
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029638  0000f000  0000f000  0000f000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002a4  20000000  00038638  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005414  200002b0  000388f0  000402b0  2**4
                  ALLOC
  3 .stack        00002004  200056c4  0003dd04  000402b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000402a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   001097ce  00000000  00000000  00040325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000fe5f  00000000  00000000  00149af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001225f  00000000  00000000  00159952  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003208  00000000  00000000  0016bbb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002ea8  00000000  00000000  0016edb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029300  00000000  00000000  00171c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005322f  00000000  00000000  0019af61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b9097  00000000  00000000  001ee190  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000bd74  00000000  00000000  002a7228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000f000 <exception_table>:
    f000:	c8 76 00 20 1d 7a 02 00 15 7b 02 00 15 7b 02 00     .v. .z...{...{..
	...
    f02c:	4d 69 01 00 00 00 00 00 00 00 00 00 71 6a 01 00     Mi..........qj..
    f03c:	b9 6a 01 00 15 7b 02 00 15 7b 02 00 15 7b 02 00     .j...{...{...{..
    f04c:	6d 39 02 00 99 2e 02 00 15 7b 02 00 61 f4 00 00     m9.......{..a...
    f05c:	15 7b 02 00 a5 f5 00 00 11 40 02 00 29 40 02 00     .{.......@..)@..
    f06c:	41 40 02 00 59 40 02 00 71 40 02 00 89 40 02 00     A@..Y@..q@...@..
    f07c:	65 79 02 00 79 79 02 00 8d 79 02 00 39 46 01 00     ey..yy...y..9F..
    f08c:	4d 46 01 00 61 46 01 00 00 00 00 00 00 00 00 00     MF..aF..........
    f09c:	e9 f2 00 00 15 7b 02 00 25 f4 00 00 15 7b 02 00     .....{..%....{..
    f0ac:	15 7b 02 00 00 00 00 00                             .{......

0000f0b4 <__do_global_dtors_aux>:
    f0b4:	b510      	push	{r4, lr}
    f0b6:	4c06      	ldr	r4, [pc, #24]	; (f0d0 <__do_global_dtors_aux+0x1c>)
    f0b8:	7823      	ldrb	r3, [r4, #0]
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d107      	bne.n	f0ce <__do_global_dtors_aux+0x1a>
    f0be:	4b05      	ldr	r3, [pc, #20]	; (f0d4 <__do_global_dtors_aux+0x20>)
    f0c0:	2b00      	cmp	r3, #0
    f0c2:	d002      	beq.n	f0ca <__do_global_dtors_aux+0x16>
    f0c4:	4804      	ldr	r0, [pc, #16]	; (f0d8 <__do_global_dtors_aux+0x24>)
    f0c6:	e000      	b.n	f0ca <__do_global_dtors_aux+0x16>
    f0c8:	bf00      	nop
    f0ca:	2301      	movs	r3, #1
    f0cc:	7023      	strb	r3, [r4, #0]
    f0ce:	bd10      	pop	{r4, pc}
    f0d0:	200002b0 	.word	0x200002b0
    f0d4:	00000000 	.word	0x00000000
    f0d8:	00038638 	.word	0x00038638

0000f0dc <frame_dummy>:
    f0dc:	4b08      	ldr	r3, [pc, #32]	; (f100 <frame_dummy+0x24>)
    f0de:	b510      	push	{r4, lr}
    f0e0:	2b00      	cmp	r3, #0
    f0e2:	d003      	beq.n	f0ec <frame_dummy+0x10>
    f0e4:	4907      	ldr	r1, [pc, #28]	; (f104 <frame_dummy+0x28>)
    f0e6:	4808      	ldr	r0, [pc, #32]	; (f108 <frame_dummy+0x2c>)
    f0e8:	e000      	b.n	f0ec <frame_dummy+0x10>
    f0ea:	bf00      	nop
    f0ec:	4807      	ldr	r0, [pc, #28]	; (f10c <frame_dummy+0x30>)
    f0ee:	6803      	ldr	r3, [r0, #0]
    f0f0:	2b00      	cmp	r3, #0
    f0f2:	d100      	bne.n	f0f6 <frame_dummy+0x1a>
    f0f4:	bd10      	pop	{r4, pc}
    f0f6:	4b06      	ldr	r3, [pc, #24]	; (f110 <frame_dummy+0x34>)
    f0f8:	2b00      	cmp	r3, #0
    f0fa:	d0fb      	beq.n	f0f4 <frame_dummy+0x18>
    f0fc:	4798      	blx	r3
    f0fe:	e7f9      	b.n	f0f4 <frame_dummy+0x18>
    f100:	00000000 	.word	0x00000000
    f104:	200002b4 	.word	0x200002b4
    f108:	00038638 	.word	0x00038638
    f10c:	00038638 	.word	0x00038638
    f110:	00000000 	.word	0x00000000

0000f114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    f114:	b580      	push	{r7, lr}
    f116:	b084      	sub	sp, #16
    f118:	af00      	add	r7, sp, #0
    f11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    f11c:	687b      	ldr	r3, [r7, #4]
    f11e:	681b      	ldr	r3, [r3, #0]
    f120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    f122:	68fb      	ldr	r3, [r7, #12]
    f124:	7e5b      	ldrb	r3, [r3, #25]
    f126:	b2db      	uxtb	r3, r3
    f128:	b25b      	sxtb	r3, r3
    f12a:	2b00      	cmp	r3, #0
    f12c:	da01      	bge.n	f132 <adc_is_syncing+0x1e>
		return true;
    f12e:	2301      	movs	r3, #1
    f130:	e000      	b.n	f134 <adc_is_syncing+0x20>
	}

	return false;
    f132:	2300      	movs	r3, #0
}
    f134:	0018      	movs	r0, r3
    f136:	46bd      	mov	sp, r7
    f138:	b004      	add	sp, #16
    f13a:	bd80      	pop	{r7, pc}

0000f13c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    f13c:	b580      	push	{r7, lr}
    f13e:	b084      	sub	sp, #16
    f140:	af00      	add	r7, sp, #0
    f142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    f144:	687b      	ldr	r3, [r7, #4]
    f146:	681b      	ldr	r3, [r3, #0]
    f148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    f14a:	46c0      	nop			; (mov r8, r8)
    f14c:	687b      	ldr	r3, [r7, #4]
    f14e:	0018      	movs	r0, r3
    f150:	4b0b      	ldr	r3, [pc, #44]	; (f180 <adc_start_conversion+0x44>)
    f152:	4798      	blx	r3
    f154:	1e03      	subs	r3, r0, #0
    f156:	d1f9      	bne.n	f14c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    f158:	68fb      	ldr	r3, [r7, #12]
    f15a:	7b1b      	ldrb	r3, [r3, #12]
    f15c:	b2db      	uxtb	r3, r3
    f15e:	2202      	movs	r2, #2
    f160:	4313      	orrs	r3, r2
    f162:	b2da      	uxtb	r2, r3
    f164:	68fb      	ldr	r3, [r7, #12]
    f166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    f168:	46c0      	nop			; (mov r8, r8)
    f16a:	687b      	ldr	r3, [r7, #4]
    f16c:	0018      	movs	r0, r3
    f16e:	4b04      	ldr	r3, [pc, #16]	; (f180 <adc_start_conversion+0x44>)
    f170:	4798      	blx	r3
    f172:	1e03      	subs	r3, r0, #0
    f174:	d1f9      	bne.n	f16a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    f176:	46c0      	nop			; (mov r8, r8)
    f178:	46bd      	mov	sp, r7
    f17a:	b004      	add	sp, #16
    f17c:	bd80      	pop	{r7, pc}
    f17e:	46c0      	nop			; (mov r8, r8)
    f180:	0000f115 	.word	0x0000f115

0000f184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    f184:	b580      	push	{r7, lr}
    f186:	b084      	sub	sp, #16
    f188:	af00      	add	r7, sp, #0
    f18a:	6078      	str	r0, [r7, #4]
    f18c:	000a      	movs	r2, r1
    f18e:	1cfb      	adds	r3, r7, #3
    f190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	681b      	ldr	r3, [r3, #0]
    f196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    f198:	68fb      	ldr	r3, [r7, #12]
    f19a:	1cfa      	adds	r2, r7, #3
    f19c:	7812      	ldrb	r2, [r2, #0]
    f19e:	759a      	strb	r2, [r3, #22]
}
    f1a0:	46c0      	nop			; (mov r8, r8)
    f1a2:	46bd      	mov	sp, r7
    f1a4:	b004      	add	sp, #16
    f1a6:	bd80      	pop	{r7, pc}

0000f1a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    f1a8:	b580      	push	{r7, lr}
    f1aa:	b084      	sub	sp, #16
    f1ac:	af00      	add	r7, sp, #0
    f1ae:	0002      	movs	r2, r0
    f1b0:	1dfb      	adds	r3, r7, #7
    f1b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    f1b4:	1dfb      	adds	r3, r7, #7
    f1b6:	781a      	ldrb	r2, [r3, #0]
    f1b8:	4b47      	ldr	r3, [pc, #284]	; (f2d8 <_adc_interrupt_handler+0x130>)
    f1ba:	0092      	lsls	r2, r2, #2
    f1bc:	58d3      	ldr	r3, [r2, r3]
    f1be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    f1c0:	68fb      	ldr	r3, [r7, #12]
    f1c2:	681b      	ldr	r3, [r3, #0]
    f1c4:	7e1b      	ldrb	r3, [r3, #24]
    f1c6:	b2da      	uxtb	r2, r3
    f1c8:	68fb      	ldr	r3, [r7, #12]
    f1ca:	681b      	ldr	r3, [r3, #0]
    f1cc:	7ddb      	ldrb	r3, [r3, #23]
    f1ce:	b2db      	uxtb	r3, r3
    f1d0:	4013      	ands	r3, r2
    f1d2:	b2db      	uxtb	r3, r3
    f1d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    f1d6:	68bb      	ldr	r3, [r7, #8]
    f1d8:	2201      	movs	r2, #1
    f1da:	4013      	ands	r3, r2
    f1dc:	d045      	beq.n	f26a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    f1de:	68fb      	ldr	r3, [r7, #12]
    f1e0:	681b      	ldr	r3, [r3, #0]
    f1e2:	2201      	movs	r2, #1
    f1e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
    f1e6:	46c0      	nop			; (mov r8, r8)
    f1e8:	68fb      	ldr	r3, [r7, #12]
    f1ea:	0018      	movs	r0, r3
    f1ec:	4b3b      	ldr	r3, [pc, #236]	; (f2dc <_adc_interrupt_handler+0x134>)
    f1ee:	4798      	blx	r3
    f1f0:	1e03      	subs	r3, r0, #0
    f1f2:	d1f9      	bne.n	f1e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    f1f4:	68fb      	ldr	r3, [r7, #12]
    f1f6:	695b      	ldr	r3, [r3, #20]
    f1f8:	1c99      	adds	r1, r3, #2
    f1fa:	68fa      	ldr	r2, [r7, #12]
    f1fc:	6151      	str	r1, [r2, #20]
    f1fe:	68fa      	ldr	r2, [r7, #12]
    f200:	6812      	ldr	r2, [r2, #0]
    f202:	8b52      	ldrh	r2, [r2, #26]
    f204:	b292      	uxth	r2, r2
    f206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
    f208:	68fb      	ldr	r3, [r7, #12]
    f20a:	8b1b      	ldrh	r3, [r3, #24]
    f20c:	b29b      	uxth	r3, r3
    f20e:	3b01      	subs	r3, #1
    f210:	b29b      	uxth	r3, r3
    f212:	68fa      	ldr	r2, [r7, #12]
    f214:	1c19      	adds	r1, r3, #0
    f216:	8311      	strh	r1, [r2, #24]
    f218:	2b00      	cmp	r3, #0
    f21a:	d008      	beq.n	f22e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
    f21c:	68fb      	ldr	r3, [r7, #12]
    f21e:	7f5b      	ldrb	r3, [r3, #29]
    f220:	2b00      	cmp	r3, #0
    f222:	d022      	beq.n	f26a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
    f224:	68fb      	ldr	r3, [r7, #12]
    f226:	0018      	movs	r0, r3
    f228:	4b2d      	ldr	r3, [pc, #180]	; (f2e0 <_adc_interrupt_handler+0x138>)
    f22a:	4798      	blx	r3
    f22c:	e01d      	b.n	f26a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    f22e:	68fb      	ldr	r3, [r7, #12]
    f230:	2101      	movs	r1, #1
    f232:	0018      	movs	r0, r3
    f234:	4b2b      	ldr	r3, [pc, #172]	; (f2e4 <_adc_interrupt_handler+0x13c>)
    f236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
    f238:	68fb      	ldr	r3, [r7, #12]
    f23a:	7f1b      	ldrb	r3, [r3, #28]
    f23c:	b2db      	uxtb	r3, r3
    f23e:	2b05      	cmp	r3, #5
    f240:	d113      	bne.n	f26a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
    f242:	68fb      	ldr	r3, [r7, #12]
    f244:	2200      	movs	r2, #0
    f246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
    f248:	68fb      	ldr	r3, [r7, #12]
    f24a:	7edb      	ldrb	r3, [r3, #27]
    f24c:	001a      	movs	r2, r3
    f24e:	2301      	movs	r3, #1
    f250:	4013      	ands	r3, r2
    f252:	d00a      	beq.n	f26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
    f254:	68fb      	ldr	r3, [r7, #12]
    f256:	7e9b      	ldrb	r3, [r3, #26]
    f258:	001a      	movs	r2, r3
    f25a:	2301      	movs	r3, #1
    f25c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    f25e:	d004      	beq.n	f26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    f260:	68fb      	ldr	r3, [r7, #12]
    f262:	689b      	ldr	r3, [r3, #8]
    f264:	68fa      	ldr	r2, [r7, #12]
    f266:	0010      	movs	r0, r2
    f268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    f26a:	68bb      	ldr	r3, [r7, #8]
    f26c:	2204      	movs	r2, #4
    f26e:	4013      	ands	r3, r2
    f270:	d014      	beq.n	f29c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    f272:	68fb      	ldr	r3, [r7, #12]
    f274:	681b      	ldr	r3, [r3, #0]
    f276:	2204      	movs	r2, #4
    f278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    f27a:	68fb      	ldr	r3, [r7, #12]
    f27c:	7edb      	ldrb	r3, [r3, #27]
    f27e:	001a      	movs	r2, r3
    f280:	2302      	movs	r3, #2
    f282:	4013      	ands	r3, r2
    f284:	d00a      	beq.n	f29c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    f286:	68fb      	ldr	r3, [r7, #12]
    f288:	7e9b      	ldrb	r3, [r3, #26]
    f28a:	001a      	movs	r2, r3
    f28c:	2302      	movs	r3, #2
    f28e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    f290:	d004      	beq.n	f29c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    f292:	68fb      	ldr	r3, [r7, #12]
    f294:	68db      	ldr	r3, [r3, #12]
    f296:	68fa      	ldr	r2, [r7, #12]
    f298:	0010      	movs	r0, r2
    f29a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    f29c:	68bb      	ldr	r3, [r7, #8]
    f29e:	2202      	movs	r2, #2
    f2a0:	4013      	ands	r3, r2
    f2a2:	d014      	beq.n	f2ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    f2a4:	68fb      	ldr	r3, [r7, #12]
    f2a6:	681b      	ldr	r3, [r3, #0]
    f2a8:	2202      	movs	r2, #2
    f2aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    f2ac:	68fb      	ldr	r3, [r7, #12]
    f2ae:	7edb      	ldrb	r3, [r3, #27]
    f2b0:	001a      	movs	r2, r3
    f2b2:	2304      	movs	r3, #4
    f2b4:	4013      	ands	r3, r2
    f2b6:	d00a      	beq.n	f2ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    f2b8:	68fb      	ldr	r3, [r7, #12]
    f2ba:	7e9b      	ldrb	r3, [r3, #26]
    f2bc:	001a      	movs	r2, r3
    f2be:	2304      	movs	r3, #4
    f2c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    f2c2:	d004      	beq.n	f2ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    f2c4:	68fb      	ldr	r3, [r7, #12]
    f2c6:	691b      	ldr	r3, [r3, #16]
    f2c8:	68fa      	ldr	r2, [r7, #12]
    f2ca:	0010      	movs	r0, r2
    f2cc:	4798      	blx	r3
		}
	}
}
    f2ce:	46c0      	nop			; (mov r8, r8)
    f2d0:	46bd      	mov	sp, r7
    f2d2:	b004      	add	sp, #16
    f2d4:	bd80      	pop	{r7, pc}
    f2d6:	46c0      	nop			; (mov r8, r8)
    f2d8:	200042bc 	.word	0x200042bc
    f2dc:	0000f115 	.word	0x0000f115
    f2e0:	0000f13d 	.word	0x0000f13d
    f2e4:	0000f185 	.word	0x0000f185

0000f2e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    f2e8:	b580      	push	{r7, lr}
    f2ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    f2ec:	2000      	movs	r0, #0
    f2ee:	4b02      	ldr	r3, [pc, #8]	; (f2f8 <ADC_Handler+0x10>)
    f2f0:	4798      	blx	r3
}
    f2f2:	46c0      	nop			; (mov r8, r8)
    f2f4:	46bd      	mov	sp, r7
    f2f6:	bd80      	pop	{r7, pc}
    f2f8:	0000f1a9 	.word	0x0000f1a9

0000f2fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    f2fc:	b580      	push	{r7, lr}
    f2fe:	b082      	sub	sp, #8
    f300:	af00      	add	r7, sp, #0
    f302:	0002      	movs	r2, r0
    f304:	1dfb      	adds	r3, r7, #7
    f306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f308:	4a07      	ldr	r2, [pc, #28]	; (f328 <system_interrupt_disable+0x2c>)
    f30a:	1dfb      	adds	r3, r7, #7
    f30c:	781b      	ldrb	r3, [r3, #0]
    f30e:	0019      	movs	r1, r3
    f310:	231f      	movs	r3, #31
    f312:	400b      	ands	r3, r1
    f314:	2101      	movs	r1, #1
    f316:	4099      	lsls	r1, r3
    f318:	000b      	movs	r3, r1
    f31a:	0019      	movs	r1, r3
    f31c:	2380      	movs	r3, #128	; 0x80
    f31e:	50d1      	str	r1, [r2, r3]
}
    f320:	46c0      	nop			; (mov r8, r8)
    f322:	46bd      	mov	sp, r7
    f324:	b002      	add	sp, #8
    f326:	bd80      	pop	{r7, pc}
    f328:	e000e100 	.word	0xe000e100

0000f32c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    f32c:	b580      	push	{r7, lr}
    f32e:	b084      	sub	sp, #16
    f330:	af00      	add	r7, sp, #0
    f332:	0002      	movs	r2, r0
    f334:	1dfb      	adds	r3, r7, #7
    f336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    f338:	1dfb      	adds	r3, r7, #7
    f33a:	781a      	ldrb	r2, [r3, #0]
    f33c:	4b37      	ldr	r3, [pc, #220]	; (f41c <_dac_interrupt_handler+0xf0>)
    f33e:	0092      	lsls	r2, r2, #2
    f340:	58d3      	ldr	r3, [r2, r3]
    f342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    f344:	68fb      	ldr	r3, [r7, #12]
    f346:	681b      	ldr	r3, [r3, #0]
    f348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    f34a:	68bb      	ldr	r3, [r7, #8]
    f34c:	799b      	ldrb	r3, [r3, #6]
    f34e:	b2db      	uxtb	r3, r3
    f350:	001a      	movs	r2, r3
    f352:	2301      	movs	r3, #1
    f354:	4013      	ands	r3, r2
    f356:	d00e      	beq.n	f376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    f358:	68bb      	ldr	r3, [r7, #8]
    f35a:	2201      	movs	r2, #1
    f35c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    f35e:	68fb      	ldr	r3, [r7, #12]
    f360:	3314      	adds	r3, #20
    f362:	2b00      	cmp	r3, #0
    f364:	d007      	beq.n	f376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    f366:	68fb      	ldr	r3, [r7, #12]
    f368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    f36a:	2b00      	cmp	r3, #0
    f36c:	d003      	beq.n	f376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    f36e:	68fb      	ldr	r3, [r7, #12]
    f370:	699b      	ldr	r3, [r3, #24]
    f372:	2000      	movs	r0, #0
    f374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    f376:	68bb      	ldr	r3, [r7, #8]
    f378:	799b      	ldrb	r3, [r3, #6]
    f37a:	b2db      	uxtb	r3, r3
    f37c:	001a      	movs	r2, r3
    f37e:	2302      	movs	r3, #2
    f380:	4013      	ands	r3, r2
    f382:	d047      	beq.n	f414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    f384:	68bb      	ldr	r3, [r7, #8]
    f386:	2202      	movs	r2, #2
    f388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    f38a:	68fb      	ldr	r3, [r7, #12]
    f38c:	899b      	ldrh	r3, [r3, #12]
    f38e:	b29b      	uxth	r3, r3
    f390:	2b00      	cmp	r3, #0
    f392:	d033      	beq.n	f3fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    f394:	68fb      	ldr	r3, [r7, #12]
    f396:	689a      	ldr	r2, [r3, #8]
    f398:	68fb      	ldr	r3, [r7, #12]
    f39a:	89db      	ldrh	r3, [r3, #14]
    f39c:	b29b      	uxth	r3, r3
    f39e:	1c59      	adds	r1, r3, #1
    f3a0:	b288      	uxth	r0, r1
    f3a2:	68f9      	ldr	r1, [r7, #12]
    f3a4:	81c8      	strh	r0, [r1, #14]
    f3a6:	005b      	lsls	r3, r3, #1
    f3a8:	18d3      	adds	r3, r2, r3
    f3aa:	881b      	ldrh	r3, [r3, #0]
    f3ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    f3ae:	68bb      	ldr	r3, [r7, #8]
    f3b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    f3b2:	68fb      	ldr	r3, [r7, #12]
    f3b4:	899b      	ldrh	r3, [r3, #12]
    f3b6:	b29b      	uxth	r3, r3
    f3b8:	3b01      	subs	r3, #1
    f3ba:	b29a      	uxth	r2, r3
    f3bc:	68fb      	ldr	r3, [r7, #12]
    f3be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    f3c0:	68fb      	ldr	r3, [r7, #12]
    f3c2:	899b      	ldrh	r3, [r3, #12]
    f3c4:	b29b      	uxth	r3, r3
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	d118      	bne.n	f3fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    f3ca:	68fb      	ldr	r3, [r7, #12]
    f3cc:	2220      	movs	r2, #32
    f3ce:	2100      	movs	r1, #0
    f3d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    f3d2:	68bb      	ldr	r3, [r7, #8]
    f3d4:	2202      	movs	r2, #2
    f3d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    f3d8:	68bb      	ldr	r3, [r7, #8]
    f3da:	2202      	movs	r2, #2
    f3dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    f3de:	2019      	movs	r0, #25
    f3e0:	4b0f      	ldr	r3, [pc, #60]	; (f420 <_dac_interrupt_handler+0xf4>)
    f3e2:	4798      	blx	r3

				if ((module->callback) &&
    f3e4:	68fb      	ldr	r3, [r7, #12]
    f3e6:	3314      	adds	r3, #20
    f3e8:	2b00      	cmp	r3, #0
    f3ea:	d007      	beq.n	f3fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    f3ec:	68fb      	ldr	r3, [r7, #12]
    f3ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	d003      	beq.n	f3fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    f3f4:	68fb      	ldr	r3, [r7, #12]
    f3f6:	69db      	ldr	r3, [r3, #28]
    f3f8:	2000      	movs	r0, #0
    f3fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    f3fc:	68fb      	ldr	r3, [r7, #12]
    f3fe:	3314      	adds	r3, #20
    f400:	2b00      	cmp	r3, #0
    f402:	d007      	beq.n	f414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    f404:	68fb      	ldr	r3, [r7, #12]
    f406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    f408:	2b00      	cmp	r3, #0
    f40a:	d003      	beq.n	f414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    f40c:	68fb      	ldr	r3, [r7, #12]
    f40e:	695b      	ldr	r3, [r3, #20]
    f410:	2000      	movs	r0, #0
    f412:	4798      	blx	r3
		}
	}
}
    f414:	46c0      	nop			; (mov r8, r8)
    f416:	46bd      	mov	sp, r7
    f418:	b004      	add	sp, #16
    f41a:	bd80      	pop	{r7, pc}
    f41c:	200042c0 	.word	0x200042c0
    f420:	0000f2fd 	.word	0x0000f2fd

0000f424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    f424:	b580      	push	{r7, lr}
    f426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    f428:	2000      	movs	r0, #0
    f42a:	4b02      	ldr	r3, [pc, #8]	; (f434 <DAC_Handler+0x10>)
    f42c:	4798      	blx	r3
}
    f42e:	46c0      	nop			; (mov r8, r8)
    f430:	46bd      	mov	sp, r7
    f432:	bd80      	pop	{r7, pc}
    f434:	0000f32d 	.word	0x0000f32d

0000f438 <system_interrupt_enter_critical_section>:
{
    f438:	b580      	push	{r7, lr}
    f43a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    f43c:	4b02      	ldr	r3, [pc, #8]	; (f448 <system_interrupt_enter_critical_section+0x10>)
    f43e:	4798      	blx	r3
}
    f440:	46c0      	nop			; (mov r8, r8)
    f442:	46bd      	mov	sp, r7
    f444:	bd80      	pop	{r7, pc}
    f446:	46c0      	nop			; (mov r8, r8)
    f448:	00022af9 	.word	0x00022af9

0000f44c <system_interrupt_leave_critical_section>:
{
    f44c:	b580      	push	{r7, lr}
    f44e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    f450:	4b02      	ldr	r3, [pc, #8]	; (f45c <system_interrupt_leave_critical_section+0x10>)
    f452:	4798      	blx	r3
}
    f454:	46c0      	nop			; (mov r8, r8)
    f456:	46bd      	mov	sp, r7
    f458:	bd80      	pop	{r7, pc}
    f45a:	46c0      	nop			; (mov r8, r8)
    f45c:	00022b4d 	.word	0x00022b4d

0000f460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    f460:	b580      	push	{r7, lr}
    f462:	b086      	sub	sp, #24
    f464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    f466:	4b49      	ldr	r3, [pc, #292]	; (f58c <DMAC_Handler+0x12c>)
    f468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    f46a:	4b49      	ldr	r3, [pc, #292]	; (f590 <DMAC_Handler+0x130>)
    f46c:	8c1b      	ldrh	r3, [r3, #32]
    f46e:	b29b      	uxth	r3, r3
    f470:	b2da      	uxtb	r2, r3
    f472:	2317      	movs	r3, #23
    f474:	18fb      	adds	r3, r7, r3
    f476:	210f      	movs	r1, #15
    f478:	400a      	ands	r2, r1
    f47a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    f47c:	2317      	movs	r3, #23
    f47e:	18fb      	adds	r3, r7, r3
    f480:	781a      	ldrb	r2, [r3, #0]
    f482:	4b44      	ldr	r3, [pc, #272]	; (f594 <DMAC_Handler+0x134>)
    f484:	0092      	lsls	r2, r2, #2
    f486:	58d3      	ldr	r3, [r2, r3]
    f488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    f48a:	4a41      	ldr	r2, [pc, #260]	; (f590 <DMAC_Handler+0x130>)
    f48c:	693b      	ldr	r3, [r7, #16]
    f48e:	781b      	ldrb	r3, [r3, #0]
    f490:	210f      	movs	r1, #15
    f492:	400b      	ands	r3, r1
    f494:	b2d9      	uxtb	r1, r3
    f496:	233f      	movs	r3, #63	; 0x3f
    f498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    f49a:	493d      	ldr	r1, [pc, #244]	; (f590 <DMAC_Handler+0x130>)
    f49c:	230f      	movs	r3, #15
    f49e:	18fb      	adds	r3, r7, r3
    f4a0:	224e      	movs	r2, #78	; 0x4e
    f4a2:	5c8a      	ldrb	r2, [r1, r2]
    f4a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    f4a6:	693b      	ldr	r3, [r7, #16]
    f4a8:	781b      	ldrb	r3, [r3, #0]
    f4aa:	4a3b      	ldr	r2, [pc, #236]	; (f598 <DMAC_Handler+0x138>)
    f4ac:	011b      	lsls	r3, r3, #4
    f4ae:	18d3      	adds	r3, r2, r3
    f4b0:	3302      	adds	r3, #2
    f4b2:	881b      	ldrh	r3, [r3, #0]
    f4b4:	b29b      	uxth	r3, r3
    f4b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    f4b8:	693b      	ldr	r3, [r7, #16]
    f4ba:	781b      	ldrb	r3, [r3, #0]
    f4bc:	4a37      	ldr	r2, [pc, #220]	; (f59c <DMAC_Handler+0x13c>)
    f4be:	011b      	lsls	r3, r3, #4
    f4c0:	18d3      	adds	r3, r2, r3
    f4c2:	3302      	adds	r3, #2
    f4c4:	881b      	ldrh	r3, [r3, #0]
    f4c6:	b29b      	uxth	r3, r3
    f4c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    f4ca:	68ba      	ldr	r2, [r7, #8]
    f4cc:	687b      	ldr	r3, [r7, #4]
    f4ce:	1ad2      	subs	r2, r2, r3
    f4d0:	693b      	ldr	r3, [r7, #16]
    f4d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    f4d4:	230f      	movs	r3, #15
    f4d6:	18fb      	adds	r3, r7, r3
    f4d8:	781b      	ldrb	r3, [r3, #0]
    f4da:	2201      	movs	r2, #1
    f4dc:	4013      	ands	r3, r2
    f4de:	d016      	beq.n	f50e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    f4e0:	4a2b      	ldr	r2, [pc, #172]	; (f590 <DMAC_Handler+0x130>)
    f4e2:	234e      	movs	r3, #78	; 0x4e
    f4e4:	2101      	movs	r1, #1
    f4e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    f4e8:	693b      	ldr	r3, [r7, #16]
    f4ea:	2210      	movs	r2, #16
    f4ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    f4ee:	693b      	ldr	r3, [r7, #16]
    f4f0:	7c1b      	ldrb	r3, [r3, #16]
    f4f2:	001a      	movs	r2, r3
    f4f4:	2301      	movs	r3, #1
    f4f6:	4013      	ands	r3, r2
    f4f8:	d042      	beq.n	f580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    f4fa:	693b      	ldr	r3, [r7, #16]
    f4fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    f4fe:	2b00      	cmp	r3, #0
    f500:	d03e      	beq.n	f580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    f502:	693b      	ldr	r3, [r7, #16]
    f504:	685b      	ldr	r3, [r3, #4]
    f506:	693a      	ldr	r2, [r7, #16]
    f508:	0010      	movs	r0, r2
    f50a:	4798      	blx	r3
    f50c:	e038      	b.n	f580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    f50e:	230f      	movs	r3, #15
    f510:	18fb      	adds	r3, r7, r3
    f512:	781b      	ldrb	r3, [r3, #0]
    f514:	2202      	movs	r2, #2
    f516:	4013      	ands	r3, r2
    f518:	d016      	beq.n	f548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    f51a:	4a1d      	ldr	r2, [pc, #116]	; (f590 <DMAC_Handler+0x130>)
    f51c:	234e      	movs	r3, #78	; 0x4e
    f51e:	2102      	movs	r1, #2
    f520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    f522:	693b      	ldr	r3, [r7, #16]
    f524:	2200      	movs	r2, #0
    f526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    f528:	693b      	ldr	r3, [r7, #16]
    f52a:	7c1b      	ldrb	r3, [r3, #16]
    f52c:	001a      	movs	r2, r3
    f52e:	2302      	movs	r3, #2
    f530:	4013      	ands	r3, r2
    f532:	d025      	beq.n	f580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    f534:	693b      	ldr	r3, [r7, #16]
    f536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    f538:	2b00      	cmp	r3, #0
    f53a:	d021      	beq.n	f580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    f53c:	693b      	ldr	r3, [r7, #16]
    f53e:	689b      	ldr	r3, [r3, #8]
    f540:	693a      	ldr	r2, [r7, #16]
    f542:	0010      	movs	r0, r2
    f544:	4798      	blx	r3
    f546:	e01b      	b.n	f580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    f548:	230f      	movs	r3, #15
    f54a:	18fb      	adds	r3, r7, r3
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	2204      	movs	r2, #4
    f550:	4013      	ands	r3, r2
    f552:	d015      	beq.n	f580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    f554:	4a0e      	ldr	r2, [pc, #56]	; (f590 <DMAC_Handler+0x130>)
    f556:	234e      	movs	r3, #78	; 0x4e
    f558:	2104      	movs	r1, #4
    f55a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    f55c:	693b      	ldr	r3, [r7, #16]
    f55e:	2206      	movs	r2, #6
    f560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    f562:	693b      	ldr	r3, [r7, #16]
    f564:	7c1b      	ldrb	r3, [r3, #16]
    f566:	001a      	movs	r2, r3
    f568:	2304      	movs	r3, #4
    f56a:	4013      	ands	r3, r2
    f56c:	d008      	beq.n	f580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    f56e:	693b      	ldr	r3, [r7, #16]
    f570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    f572:	2b00      	cmp	r3, #0
    f574:	d004      	beq.n	f580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    f576:	693b      	ldr	r3, [r7, #16]
    f578:	68db      	ldr	r3, [r3, #12]
    f57a:	693a      	ldr	r2, [r7, #16]
    f57c:	0010      	movs	r0, r2
    f57e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    f580:	4b07      	ldr	r3, [pc, #28]	; (f5a0 <DMAC_Handler+0x140>)
    f582:	4798      	blx	r3
}
    f584:	46c0      	nop			; (mov r8, r8)
    f586:	46bd      	mov	sp, r7
    f588:	b006      	add	sp, #24
    f58a:	bd80      	pop	{r7, pc}
    f58c:	0000f439 	.word	0x0000f439
    f590:	41004800 	.word	0x41004800
    f594:	20000320 	.word	0x20000320
    f598:	200042d0 	.word	0x200042d0
    f59c:	200002d0 	.word	0x200002d0
    f5a0:	0000f44d 	.word	0x0000f44d

0000f5a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    f5a4:	b580      	push	{r7, lr}
    f5a6:	b082      	sub	sp, #8
    f5a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
    f5aa:	4b15      	ldr	r3, [pc, #84]	; (f600 <EVSYS_Handler+0x5c>)
    f5ac:	691b      	ldr	r3, [r3, #16]
    f5ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    f5b0:	4b14      	ldr	r3, [pc, #80]	; (f604 <EVSYS_Handler+0x60>)
    f5b2:	699b      	ldr	r3, [r3, #24]
    f5b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
    f5b6:	4b12      	ldr	r3, [pc, #72]	; (f600 <EVSYS_Handler+0x5c>)
    f5b8:	689a      	ldr	r2, [r3, #8]
    f5ba:	683b      	ldr	r3, [r7, #0]
    f5bc:	431a      	orrs	r2, r3
    f5be:	4b10      	ldr	r3, [pc, #64]	; (f600 <EVSYS_Handler+0x5c>)
    f5c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    f5c2:	4b10      	ldr	r3, [pc, #64]	; (f604 <EVSYS_Handler+0x60>)
    f5c4:	4a10      	ldr	r2, [pc, #64]	; (f608 <EVSYS_Handler+0x64>)
    f5c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    f5c8:	e008      	b.n	f5dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
    f5ca:	687b      	ldr	r3, [r7, #4]
    f5cc:	685a      	ldr	r2, [r3, #4]
    f5ce:	687b      	ldr	r3, [r7, #4]
    f5d0:	681b      	ldr	r3, [r3, #0]
    f5d2:	0018      	movs	r0, r3
    f5d4:	4790      	blx	r2
		current_hook = current_hook->next;
    f5d6:	687b      	ldr	r3, [r7, #4]
    f5d8:	689b      	ldr	r3, [r3, #8]
    f5da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
    f5dc:	687b      	ldr	r3, [r7, #4]
    f5de:	2b00      	cmp	r3, #0
    f5e0:	d1f3      	bne.n	f5ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    f5e2:	4b07      	ldr	r3, [pc, #28]	; (f600 <EVSYS_Handler+0x5c>)
    f5e4:	68db      	ldr	r3, [r3, #12]
    f5e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
    f5e8:	4b05      	ldr	r3, [pc, #20]	; (f600 <EVSYS_Handler+0x5c>)
    f5ea:	689b      	ldr	r3, [r3, #8]
    f5ec:	683a      	ldr	r2, [r7, #0]
    f5ee:	43d2      	mvns	r2, r2
    f5f0:	401a      	ands	r2, r3
    f5f2:	4b03      	ldr	r3, [pc, #12]	; (f600 <EVSYS_Handler+0x5c>)
    f5f4:	609a      	str	r2, [r3, #8]
}
    f5f6:	46c0      	nop			; (mov r8, r8)
    f5f8:	46bd      	mov	sp, r7
    f5fa:	b002      	add	sp, #8
    f5fc:	bd80      	pop	{r7, pc}
    f5fe:	46c0      	nop			; (mov r8, r8)
    f600:	20000000 	.word	0x20000000
    f604:	42000400 	.word	0x42000400
    f608:	0f0fffff 	.word	0x0f0fffff

0000f60c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    f60c:	b580      	push	{r7, lr}
    f60e:	b082      	sub	sp, #8
    f610:	af00      	add	r7, sp, #0
    f612:	0002      	movs	r2, r0
    f614:	6039      	str	r1, [r7, #0]
    f616:	1dfb      	adds	r3, r7, #7
    f618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    f61a:	1dfb      	adds	r3, r7, #7
    f61c:	781b      	ldrb	r3, [r3, #0]
    f61e:	2b01      	cmp	r3, #1
    f620:	d00a      	beq.n	f638 <system_apb_clock_set_mask+0x2c>
    f622:	2b02      	cmp	r3, #2
    f624:	d00f      	beq.n	f646 <system_apb_clock_set_mask+0x3a>
    f626:	2b00      	cmp	r3, #0
    f628:	d114      	bne.n	f654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    f62a:	4b0e      	ldr	r3, [pc, #56]	; (f664 <system_apb_clock_set_mask+0x58>)
    f62c:	4a0d      	ldr	r2, [pc, #52]	; (f664 <system_apb_clock_set_mask+0x58>)
    f62e:	6991      	ldr	r1, [r2, #24]
    f630:	683a      	ldr	r2, [r7, #0]
    f632:	430a      	orrs	r2, r1
    f634:	619a      	str	r2, [r3, #24]
			break;
    f636:	e00f      	b.n	f658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    f638:	4b0a      	ldr	r3, [pc, #40]	; (f664 <system_apb_clock_set_mask+0x58>)
    f63a:	4a0a      	ldr	r2, [pc, #40]	; (f664 <system_apb_clock_set_mask+0x58>)
    f63c:	69d1      	ldr	r1, [r2, #28]
    f63e:	683a      	ldr	r2, [r7, #0]
    f640:	430a      	orrs	r2, r1
    f642:	61da      	str	r2, [r3, #28]
			break;
    f644:	e008      	b.n	f658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    f646:	4b07      	ldr	r3, [pc, #28]	; (f664 <system_apb_clock_set_mask+0x58>)
    f648:	4a06      	ldr	r2, [pc, #24]	; (f664 <system_apb_clock_set_mask+0x58>)
    f64a:	6a11      	ldr	r1, [r2, #32]
    f64c:	683a      	ldr	r2, [r7, #0]
    f64e:	430a      	orrs	r2, r1
    f650:	621a      	str	r2, [r3, #32]
			break;
    f652:	e001      	b.n	f658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    f654:	2317      	movs	r3, #23
    f656:	e000      	b.n	f65a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    f658:	2300      	movs	r3, #0
}
    f65a:	0018      	movs	r0, r3
    f65c:	46bd      	mov	sp, r7
    f65e:	b002      	add	sp, #8
    f660:	bd80      	pop	{r7, pc}
    f662:	46c0      	nop			; (mov r8, r8)
    f664:	40000400 	.word	0x40000400

0000f668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
    f668:	b580      	push	{r7, lr}
    f66a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
    f66c:	2102      	movs	r1, #2
    f66e:	2002      	movs	r0, #2
    f670:	4b07      	ldr	r3, [pc, #28]	; (f690 <_system_events_init+0x28>)
    f672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    f674:	4b07      	ldr	r3, [pc, #28]	; (f694 <_system_events_init+0x2c>)
    f676:	2201      	movs	r2, #1
    f678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    f67a:	46c0      	nop			; (mov r8, r8)
    f67c:	4b05      	ldr	r3, [pc, #20]	; (f694 <_system_events_init+0x2c>)
    f67e:	781b      	ldrb	r3, [r3, #0]
    f680:	b2db      	uxtb	r3, r3
    f682:	001a      	movs	r2, r3
    f684:	2301      	movs	r3, #1
    f686:	4013      	ands	r3, r2
    f688:	d1f8      	bne.n	f67c <_system_events_init+0x14>
	}
}
    f68a:	46c0      	nop			; (mov r8, r8)
    f68c:	46bd      	mov	sp, r7
    f68e:	bd80      	pop	{r7, pc}
    f690:	0000f60d 	.word	0x0000f60d
    f694:	42000400 	.word	0x42000400

0000f698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    f698:	b580      	push	{r7, lr}
    f69a:	b084      	sub	sp, #16
    f69c:	af00      	add	r7, sp, #0
    f69e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    f6a0:	687b      	ldr	r3, [r7, #4]
    f6a2:	681b      	ldr	r3, [r3, #0]
    f6a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f6a6:	68fb      	ldr	r3, [r7, #12]
    f6a8:	69db      	ldr	r3, [r3, #28]
    f6aa:	2207      	movs	r2, #7
    f6ac:	4013      	ands	r3, r2
    f6ae:	1e5a      	subs	r2, r3, #1
    f6b0:	4193      	sbcs	r3, r2
    f6b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    f6b4:	0018      	movs	r0, r3
    f6b6:	46bd      	mov	sp, r7
    f6b8:	b004      	add	sp, #16
    f6ba:	bd80      	pop	{r7, pc}

0000f6bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    f6bc:	b580      	push	{r7, lr}
    f6be:	b082      	sub	sp, #8
    f6c0:	af00      	add	r7, sp, #0
    f6c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    f6c4:	46c0      	nop			; (mov r8, r8)
    f6c6:	687b      	ldr	r3, [r7, #4]
    f6c8:	0018      	movs	r0, r3
    f6ca:	4b04      	ldr	r3, [pc, #16]	; (f6dc <_i2c_master_wait_for_sync+0x20>)
    f6cc:	4798      	blx	r3
    f6ce:	1e03      	subs	r3, r0, #0
    f6d0:	d1f9      	bne.n	f6c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    f6d2:	46c0      	nop			; (mov r8, r8)
    f6d4:	46bd      	mov	sp, r7
    f6d6:	b002      	add	sp, #8
    f6d8:	bd80      	pop	{r7, pc}
    f6da:	46c0      	nop			; (mov r8, r8)
    f6dc:	0000f699 	.word	0x0000f699

0000f6e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    f6e0:	b580      	push	{r7, lr}
    f6e2:	b084      	sub	sp, #16
    f6e4:	af00      	add	r7, sp, #0
    f6e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f6e8:	687b      	ldr	r3, [r7, #4]
    f6ea:	681b      	ldr	r3, [r3, #0]
    f6ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    f6ee:	68fb      	ldr	r3, [r7, #12]
    f6f0:	681b      	ldr	r3, [r3, #0]
    f6f2:	011b      	lsls	r3, r3, #4
    f6f4:	0fdb      	lsrs	r3, r3, #31
    f6f6:	b2db      	uxtb	r3, r3
    f6f8:	001a      	movs	r2, r3
    f6fa:	230b      	movs	r3, #11
    f6fc:	18fb      	adds	r3, r7, r3
    f6fe:	1e51      	subs	r1, r2, #1
    f700:	418a      	sbcs	r2, r1
    f702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    f704:	2308      	movs	r3, #8
    f706:	18fb      	adds	r3, r7, r3
    f708:	687a      	ldr	r2, [r7, #4]
    f70a:	8b52      	ldrh	r2, [r2, #26]
    f70c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    f70e:	687b      	ldr	r3, [r7, #4]
    f710:	8b9b      	ldrh	r3, [r3, #28]
    f712:	b29a      	uxth	r2, r3
    f714:	2308      	movs	r3, #8
    f716:	18fb      	adds	r3, r7, r3
    f718:	2108      	movs	r1, #8
    f71a:	1879      	adds	r1, r7, r1
    f71c:	8809      	ldrh	r1, [r1, #0]
    f71e:	1a8a      	subs	r2, r1, r2
    f720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    f722:	687b      	ldr	r3, [r7, #4]
    f724:	8b9b      	ldrh	r3, [r3, #28]
    f726:	b29b      	uxth	r3, r3
    f728:	3b01      	subs	r3, #1
    f72a:	b29a      	uxth	r2, r3
    f72c:	687b      	ldr	r3, [r7, #4]
    f72e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    f730:	230b      	movs	r3, #11
    f732:	18fb      	adds	r3, r7, r3
    f734:	781b      	ldrb	r3, [r3, #0]
    f736:	2b00      	cmp	r3, #0
    f738:	d010      	beq.n	f75c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    f73a:	687b      	ldr	r3, [r7, #4]
    f73c:	7adb      	ldrb	r3, [r3, #11]
    f73e:	2b00      	cmp	r3, #0
    f740:	d01c      	beq.n	f77c <_i2c_master_read+0x9c>
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	8b9b      	ldrh	r3, [r3, #28]
    f746:	b29b      	uxth	r3, r3
    f748:	2b01      	cmp	r3, #1
    f74a:	d117      	bne.n	f77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f74c:	68fb      	ldr	r3, [r7, #12]
    f74e:	685b      	ldr	r3, [r3, #4]
    f750:	2280      	movs	r2, #128	; 0x80
    f752:	02d2      	lsls	r2, r2, #11
    f754:	431a      	orrs	r2, r3
    f756:	68fb      	ldr	r3, [r7, #12]
    f758:	605a      	str	r2, [r3, #4]
    f75a:	e00f      	b.n	f77c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    f75c:	687b      	ldr	r3, [r7, #4]
    f75e:	7adb      	ldrb	r3, [r3, #11]
    f760:	2b00      	cmp	r3, #0
    f762:	d00b      	beq.n	f77c <_i2c_master_read+0x9c>
    f764:	687b      	ldr	r3, [r7, #4]
    f766:	8b9b      	ldrh	r3, [r3, #28]
    f768:	b29b      	uxth	r3, r3
    f76a:	2b00      	cmp	r3, #0
    f76c:	d106      	bne.n	f77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f76e:	68fb      	ldr	r3, [r7, #12]
    f770:	685b      	ldr	r3, [r3, #4]
    f772:	2280      	movs	r2, #128	; 0x80
    f774:	02d2      	lsls	r2, r2, #11
    f776:	431a      	orrs	r2, r3
    f778:	68fb      	ldr	r3, [r7, #12]
    f77a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    f77c:	687b      	ldr	r3, [r7, #4]
    f77e:	8b9b      	ldrh	r3, [r3, #28]
    f780:	b29b      	uxth	r3, r3
    f782:	2b00      	cmp	r3, #0
    f784:	d10e      	bne.n	f7a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    f786:	687b      	ldr	r3, [r7, #4]
    f788:	7a9b      	ldrb	r3, [r3, #10]
    f78a:	2b00      	cmp	r3, #0
    f78c:	d00a      	beq.n	f7a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    f78e:	687b      	ldr	r3, [r7, #4]
    f790:	0018      	movs	r0, r3
    f792:	4b0e      	ldr	r3, [pc, #56]	; (f7cc <_i2c_master_read+0xec>)
    f794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f796:	68fb      	ldr	r3, [r7, #12]
    f798:	685b      	ldr	r3, [r3, #4]
    f79a:	22c0      	movs	r2, #192	; 0xc0
    f79c:	0292      	lsls	r2, r2, #10
    f79e:	431a      	orrs	r2, r3
    f7a0:	68fb      	ldr	r3, [r7, #12]
    f7a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    f7a4:	687b      	ldr	r3, [r7, #4]
    f7a6:	0018      	movs	r0, r3
    f7a8:	4b08      	ldr	r3, [pc, #32]	; (f7cc <_i2c_master_read+0xec>)
    f7aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    f7ac:	687b      	ldr	r3, [r7, #4]
    f7ae:	6a1a      	ldr	r2, [r3, #32]
    f7b0:	2308      	movs	r3, #8
    f7b2:	18fb      	adds	r3, r7, r3
    f7b4:	881b      	ldrh	r3, [r3, #0]
    f7b6:	18d3      	adds	r3, r2, r3
    f7b8:	68fa      	ldr	r2, [r7, #12]
    f7ba:	2128      	movs	r1, #40	; 0x28
    f7bc:	5c52      	ldrb	r2, [r2, r1]
    f7be:	b2d2      	uxtb	r2, r2
    f7c0:	701a      	strb	r2, [r3, #0]
}
    f7c2:	46c0      	nop			; (mov r8, r8)
    f7c4:	46bd      	mov	sp, r7
    f7c6:	b004      	add	sp, #16
    f7c8:	bd80      	pop	{r7, pc}
    f7ca:	46c0      	nop			; (mov r8, r8)
    f7cc:	0000f6bd 	.word	0x0000f6bd

0000f7d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    f7d0:	b580      	push	{r7, lr}
    f7d2:	b084      	sub	sp, #16
    f7d4:	af00      	add	r7, sp, #0
    f7d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f7d8:	687b      	ldr	r3, [r7, #4]
    f7da:	681b      	ldr	r3, [r3, #0]
    f7dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    f7de:	68fb      	ldr	r3, [r7, #12]
    f7e0:	8b5b      	ldrh	r3, [r3, #26]
    f7e2:	b29b      	uxth	r3, r3
    f7e4:	001a      	movs	r2, r3
    f7e6:	2304      	movs	r3, #4
    f7e8:	4013      	ands	r3, r2
    f7ea:	d004      	beq.n	f7f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    f7ec:	687b      	ldr	r3, [r7, #4]
    f7ee:	2225      	movs	r2, #37	; 0x25
    f7f0:	211e      	movs	r1, #30
    f7f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    f7f4:	e024      	b.n	f840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    f7f6:	230a      	movs	r3, #10
    f7f8:	18fb      	adds	r3, r7, r3
    f7fa:	687a      	ldr	r2, [r7, #4]
    f7fc:	8b52      	ldrh	r2, [r2, #26]
    f7fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    f800:	687b      	ldr	r3, [r7, #4]
    f802:	8b9b      	ldrh	r3, [r3, #28]
    f804:	b29a      	uxth	r2, r3
    f806:	230a      	movs	r3, #10
    f808:	18fb      	adds	r3, r7, r3
    f80a:	210a      	movs	r1, #10
    f80c:	1879      	adds	r1, r7, r1
    f80e:	8809      	ldrh	r1, [r1, #0]
    f810:	1a8a      	subs	r2, r1, r2
    f812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    f814:	687b      	ldr	r3, [r7, #4]
    f816:	8b9b      	ldrh	r3, [r3, #28]
    f818:	b29b      	uxth	r3, r3
    f81a:	3b01      	subs	r3, #1
    f81c:	b29a      	uxth	r2, r3
    f81e:	687b      	ldr	r3, [r7, #4]
    f820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    f822:	687b      	ldr	r3, [r7, #4]
    f824:	0018      	movs	r0, r3
    f826:	4b08      	ldr	r3, [pc, #32]	; (f848 <_i2c_master_write+0x78>)
    f828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    f82a:	687b      	ldr	r3, [r7, #4]
    f82c:	6a1a      	ldr	r2, [r3, #32]
    f82e:	230a      	movs	r3, #10
    f830:	18fb      	adds	r3, r7, r3
    f832:	881b      	ldrh	r3, [r3, #0]
    f834:	18d3      	adds	r3, r2, r3
    f836:	781b      	ldrb	r3, [r3, #0]
    f838:	b2d9      	uxtb	r1, r3
    f83a:	68fb      	ldr	r3, [r7, #12]
    f83c:	2228      	movs	r2, #40	; 0x28
    f83e:	5499      	strb	r1, [r3, r2]
}
    f840:	46bd      	mov	sp, r7
    f842:	b004      	add	sp, #16
    f844:	bd80      	pop	{r7, pc}
    f846:	46c0      	nop			; (mov r8, r8)
    f848:	0000f6bd 	.word	0x0000f6bd

0000f84c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    f84c:	b580      	push	{r7, lr}
    f84e:	b084      	sub	sp, #16
    f850:	af00      	add	r7, sp, #0
    f852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f854:	687b      	ldr	r3, [r7, #4]
    f856:	681b      	ldr	r3, [r3, #0]
    f858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    f85a:	68fb      	ldr	r3, [r7, #12]
    f85c:	7e1b      	ldrb	r3, [r3, #24]
    f85e:	b2db      	uxtb	r3, r3
    f860:	001a      	movs	r2, r3
    f862:	2301      	movs	r3, #1
    f864:	4013      	ands	r3, r2
    f866:	d02b      	beq.n	f8c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    f868:	68fb      	ldr	r3, [r7, #12]
    f86a:	2201      	movs	r2, #1
    f86c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    f86e:	68fb      	ldr	r3, [r7, #12]
    f870:	8b5b      	ldrh	r3, [r3, #26]
    f872:	b29b      	uxth	r3, r3
    f874:	001a      	movs	r2, r3
    f876:	2302      	movs	r3, #2
    f878:	4013      	ands	r3, r2
    f87a:	d004      	beq.n	f886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    f87c:	687b      	ldr	r3, [r7, #4]
    f87e:	2225      	movs	r2, #37	; 0x25
    f880:	2141      	movs	r1, #65	; 0x41
    f882:	5499      	strb	r1, [r3, r2]
    f884:	e01c      	b.n	f8c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    f886:	68fb      	ldr	r3, [r7, #12]
    f888:	8b5b      	ldrh	r3, [r3, #26]
    f88a:	b29b      	uxth	r3, r3
    f88c:	001a      	movs	r2, r3
    f88e:	2304      	movs	r3, #4
    f890:	4013      	ands	r3, r2
    f892:	d015      	beq.n	f8c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    f894:	687b      	ldr	r3, [r7, #4]
    f896:	2225      	movs	r2, #37	; 0x25
    f898:	2118      	movs	r1, #24
    f89a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    f89c:	687b      	ldr	r3, [r7, #4]
    f89e:	2200      	movs	r2, #0
    f8a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    f8a2:	687b      	ldr	r3, [r7, #4]
    f8a4:	7a9b      	ldrb	r3, [r3, #10]
    f8a6:	2b00      	cmp	r3, #0
    f8a8:	d00a      	beq.n	f8c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    f8aa:	687b      	ldr	r3, [r7, #4]
    f8ac:	0018      	movs	r0, r3
    f8ae:	4b13      	ldr	r3, [pc, #76]	; (f8fc <_i2c_master_async_address_response+0xb0>)
    f8b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f8b2:	68fb      	ldr	r3, [r7, #12]
    f8b4:	685b      	ldr	r3, [r3, #4]
    f8b6:	22c0      	movs	r2, #192	; 0xc0
    f8b8:	0292      	lsls	r2, r2, #10
    f8ba:	431a      	orrs	r2, r3
    f8bc:	68fb      	ldr	r3, [r7, #12]
    f8be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    f8c0:	687b      	ldr	r3, [r7, #4]
    f8c2:	8b9b      	ldrh	r3, [r3, #28]
    f8c4:	b29a      	uxth	r2, r3
    f8c6:	687b      	ldr	r3, [r7, #4]
    f8c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    f8ca:	687b      	ldr	r3, [r7, #4]
    f8cc:	2225      	movs	r2, #37	; 0x25
    f8ce:	5c9b      	ldrb	r3, [r3, r2]
    f8d0:	b2db      	uxtb	r3, r3
    f8d2:	2b05      	cmp	r3, #5
    f8d4:	d10e      	bne.n	f8f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    f8d6:	687b      	ldr	r3, [r7, #4]
    f8d8:	2224      	movs	r2, #36	; 0x24
    f8da:	5c9b      	ldrb	r3, [r3, r2]
    f8dc:	b2db      	uxtb	r3, r3
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d104      	bne.n	f8ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    f8e2:	687b      	ldr	r3, [r7, #4]
    f8e4:	0018      	movs	r0, r3
    f8e6:	4b06      	ldr	r3, [pc, #24]	; (f900 <_i2c_master_async_address_response+0xb4>)
    f8e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    f8ea:	e003      	b.n	f8f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    f8ec:	687b      	ldr	r3, [r7, #4]
    f8ee:	0018      	movs	r0, r3
    f8f0:	4b04      	ldr	r3, [pc, #16]	; (f904 <_i2c_master_async_address_response+0xb8>)
    f8f2:	4798      	blx	r3
}
    f8f4:	46c0      	nop			; (mov r8, r8)
    f8f6:	46bd      	mov	sp, r7
    f8f8:	b004      	add	sp, #16
    f8fa:	bd80      	pop	{r7, pc}
    f8fc:	0000f6bd 	.word	0x0000f6bd
    f900:	0000f7d1 	.word	0x0000f7d1
    f904:	0000f6e1 	.word	0x0000f6e1

0000f908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    f908:	b580      	push	{r7, lr}
    f90a:	b084      	sub	sp, #16
    f90c:	af00      	add	r7, sp, #0
    f90e:	60f8      	str	r0, [r7, #12]
    f910:	60b9      	str	r1, [r7, #8]
    f912:	1dfb      	adds	r3, r7, #7
    f914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    f916:	1dfb      	adds	r3, r7, #7
    f918:	781b      	ldrb	r3, [r3, #0]
    f91a:	68fa      	ldr	r2, [r7, #12]
    f91c:	3302      	adds	r3, #2
    f91e:	009b      	lsls	r3, r3, #2
    f920:	18d3      	adds	r3, r2, r3
    f922:	3304      	adds	r3, #4
    f924:	68ba      	ldr	r2, [r7, #8]
    f926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    f928:	68fb      	ldr	r3, [r7, #12]
    f92a:	7e1b      	ldrb	r3, [r3, #24]
    f92c:	b2db      	uxtb	r3, r3
    f92e:	b25a      	sxtb	r2, r3
    f930:	1dfb      	adds	r3, r7, #7
    f932:	781b      	ldrb	r3, [r3, #0]
    f934:	2101      	movs	r1, #1
    f936:	4099      	lsls	r1, r3
    f938:	000b      	movs	r3, r1
    f93a:	b25b      	sxtb	r3, r3
    f93c:	4313      	orrs	r3, r2
    f93e:	b25b      	sxtb	r3, r3
    f940:	b2da      	uxtb	r2, r3
    f942:	68fb      	ldr	r3, [r7, #12]
    f944:	761a      	strb	r2, [r3, #24]
}
    f946:	46c0      	nop			; (mov r8, r8)
    f948:	46bd      	mov	sp, r7
    f94a:	b004      	add	sp, #16
    f94c:	bd80      	pop	{r7, pc}
	...

0000f950 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    f950:	b580      	push	{r7, lr}
    f952:	b084      	sub	sp, #16
    f954:	af00      	add	r7, sp, #0
    f956:	6078      	str	r0, [r7, #4]
    f958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f95a:	687b      	ldr	r3, [r7, #4]
    f95c:	681b      	ldr	r3, [r3, #0]
    f95e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    f960:	683b      	ldr	r3, [r7, #0]
    f962:	7a5b      	ldrb	r3, [r3, #9]
    f964:	2b00      	cmp	r3, #0
    f966:	d006      	beq.n	f976 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    f968:	683b      	ldr	r3, [r7, #0]
    f96a:	7a9a      	ldrb	r2, [r3, #10]
    f96c:	687b      	ldr	r3, [r7, #4]
    f96e:	0011      	movs	r1, r2
    f970:	0018      	movs	r0, r3
    f972:	4b1e      	ldr	r3, [pc, #120]	; (f9ec <_i2c_master_write_packet+0x9c>)
    f974:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    f976:	68fb      	ldr	r3, [r7, #12]
    f978:	685b      	ldr	r3, [r3, #4]
    f97a:	4a1d      	ldr	r2, [pc, #116]	; (f9f0 <_i2c_master_write_packet+0xa0>)
    f97c:	401a      	ands	r2, r3
    f97e:	68fb      	ldr	r3, [r7, #12]
    f980:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    f982:	683b      	ldr	r3, [r7, #0]
    f984:	685a      	ldr	r2, [r3, #4]
    f986:	687b      	ldr	r3, [r7, #4]
    f988:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    f98a:	683b      	ldr	r3, [r7, #0]
    f98c:	885a      	ldrh	r2, [r3, #2]
    f98e:	687b      	ldr	r3, [r7, #4]
    f990:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    f992:	687b      	ldr	r3, [r7, #4]
    f994:	2224      	movs	r2, #36	; 0x24
    f996:	2100      	movs	r1, #0
    f998:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    f99a:	687b      	ldr	r3, [r7, #4]
    f99c:	2225      	movs	r2, #37	; 0x25
    f99e:	2105      	movs	r1, #5
    f9a0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    f9a2:	68fb      	ldr	r3, [r7, #12]
    f9a4:	2203      	movs	r2, #3
    f9a6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    f9a8:	683b      	ldr	r3, [r7, #0]
    f9aa:	7a1b      	ldrb	r3, [r3, #8]
    f9ac:	2b00      	cmp	r3, #0
    f9ae:	d00d      	beq.n	f9cc <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f9b0:	683b      	ldr	r3, [r7, #0]
    f9b2:	881b      	ldrh	r3, [r3, #0]
    f9b4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f9b6:	683b      	ldr	r3, [r7, #0]
    f9b8:	7a5b      	ldrb	r3, [r3, #9]
    f9ba:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f9bc:	4313      	orrs	r3, r2
    f9be:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    f9c0:	2380      	movs	r3, #128	; 0x80
    f9c2:	021b      	lsls	r3, r3, #8
    f9c4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f9c6:	68fb      	ldr	r3, [r7, #12]
    f9c8:	625a      	str	r2, [r3, #36]	; 0x24
    f9ca:	e009      	b.n	f9e0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f9cc:	683b      	ldr	r3, [r7, #0]
    f9ce:	881b      	ldrh	r3, [r3, #0]
    f9d0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    f9d2:	683b      	ldr	r3, [r7, #0]
    f9d4:	7a5b      	ldrb	r3, [r3, #9]
    f9d6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    f9d8:	4313      	orrs	r3, r2
    f9da:	001a      	movs	r2, r3
    f9dc:	68fb      	ldr	r3, [r7, #12]
    f9de:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    f9e0:	2300      	movs	r3, #0
}
    f9e2:	0018      	movs	r0, r3
    f9e4:	46bd      	mov	sp, r7
    f9e6:	b004      	add	sp, #16
    f9e8:	bd80      	pop	{r7, pc}
    f9ea:	46c0      	nop			; (mov r8, r8)
    f9ec:	00014179 	.word	0x00014179
    f9f0:	fffbffff 	.word	0xfffbffff

0000f9f4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    f9f4:	b580      	push	{r7, lr}
    f9f6:	b082      	sub	sp, #8
    f9f8:	af00      	add	r7, sp, #0
    f9fa:	6078      	str	r0, [r7, #4]
    f9fc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    f9fe:	687b      	ldr	r3, [r7, #4]
    fa00:	8b9b      	ldrh	r3, [r3, #28]
    fa02:	b29b      	uxth	r3, r3
    fa04:	2b00      	cmp	r3, #0
    fa06:	d001      	beq.n	fa0c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
    fa08:	2305      	movs	r3, #5
    fa0a:	e00c      	b.n	fa26 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
    fa0c:	687b      	ldr	r3, [r7, #4]
    fa0e:	2201      	movs	r2, #1
    fa10:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    fa12:	687b      	ldr	r3, [r7, #4]
    fa14:	2201      	movs	r2, #1
    fa16:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
    fa18:	683a      	ldr	r2, [r7, #0]
    fa1a:	687b      	ldr	r3, [r7, #4]
    fa1c:	0011      	movs	r1, r2
    fa1e:	0018      	movs	r0, r3
    fa20:	4b03      	ldr	r3, [pc, #12]	; (fa30 <i2c_master_write_packet_job+0x3c>)
    fa22:	4798      	blx	r3
    fa24:	0003      	movs	r3, r0
}
    fa26:	0018      	movs	r0, r3
    fa28:	46bd      	mov	sp, r7
    fa2a:	b002      	add	sp, #8
    fa2c:	bd80      	pop	{r7, pc}
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	0000f951 	.word	0x0000f951

0000fa34 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    fa34:	b580      	push	{r7, lr}
    fa36:	b086      	sub	sp, #24
    fa38:	af00      	add	r7, sp, #0
    fa3a:	0002      	movs	r2, r0
    fa3c:	1dfb      	adds	r3, r7, #7
    fa3e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    fa40:	1dfb      	adds	r3, r7, #7
    fa42:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    fa44:	4b93      	ldr	r3, [pc, #588]	; (fc94 <_i2c_master_interrupt_handler+0x260>)
    fa46:	0092      	lsls	r2, r2, #2
    fa48:	58d3      	ldr	r3, [r2, r3]
    fa4a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    fa4c:	697b      	ldr	r3, [r7, #20]
    fa4e:	681b      	ldr	r3, [r3, #0]
    fa50:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    fa52:	693b      	ldr	r3, [r7, #16]
    fa54:	681b      	ldr	r3, [r3, #0]
    fa56:	011b      	lsls	r3, r3, #4
    fa58:	0fdb      	lsrs	r3, r3, #31
    fa5a:	b2db      	uxtb	r3, r3
    fa5c:	001a      	movs	r2, r3
    fa5e:	230f      	movs	r3, #15
    fa60:	18fb      	adds	r3, r7, r3
    fa62:	1e51      	subs	r1, r2, #1
    fa64:	418a      	sbcs	r2, r1
    fa66:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    fa68:	230e      	movs	r3, #14
    fa6a:	18fb      	adds	r3, r7, r3
    fa6c:	697a      	ldr	r2, [r7, #20]
    fa6e:	7e52      	ldrb	r2, [r2, #25]
    fa70:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    fa72:	697b      	ldr	r3, [r7, #20]
    fa74:	7e1b      	ldrb	r3, [r3, #24]
    fa76:	b2da      	uxtb	r2, r3
    fa78:	230e      	movs	r3, #14
    fa7a:	18fb      	adds	r3, r7, r3
    fa7c:	210e      	movs	r1, #14
    fa7e:	1879      	adds	r1, r7, r1
    fa80:	7809      	ldrb	r1, [r1, #0]
    fa82:	400a      	ands	r2, r1
    fa84:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    fa86:	697b      	ldr	r3, [r7, #20]
    fa88:	8b5b      	ldrh	r3, [r3, #26]
    fa8a:	b29b      	uxth	r3, r3
    fa8c:	2b00      	cmp	r3, #0
    fa8e:	d109      	bne.n	faa4 <_i2c_master_interrupt_handler+0x70>
    fa90:	697b      	ldr	r3, [r7, #20]
    fa92:	8b9b      	ldrh	r3, [r3, #28]
    fa94:	b29b      	uxth	r3, r3
    fa96:	2b00      	cmp	r3, #0
    fa98:	d004      	beq.n	faa4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    fa9a:	697b      	ldr	r3, [r7, #20]
    fa9c:	0018      	movs	r0, r3
    fa9e:	4b7e      	ldr	r3, [pc, #504]	; (fc98 <_i2c_master_interrupt_handler+0x264>)
    faa0:	4798      	blx	r3
    faa2:	e070      	b.n	fb86 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    faa4:	697b      	ldr	r3, [r7, #20]
    faa6:	8b5b      	ldrh	r3, [r3, #26]
    faa8:	b29b      	uxth	r3, r3
    faaa:	2b00      	cmp	r3, #0
    faac:	d039      	beq.n	fb22 <_i2c_master_interrupt_handler+0xee>
    faae:	697b      	ldr	r3, [r7, #20]
    fab0:	8b9b      	ldrh	r3, [r3, #28]
    fab2:	b29b      	uxth	r3, r3
    fab4:	2b00      	cmp	r3, #0
    fab6:	d134      	bne.n	fb22 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    fab8:	697b      	ldr	r3, [r7, #20]
    faba:	2225      	movs	r2, #37	; 0x25
    fabc:	5c9b      	ldrb	r3, [r3, r2]
    fabe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    fac0:	2b05      	cmp	r3, #5
    fac2:	d12e      	bne.n	fb22 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    fac4:	697b      	ldr	r3, [r7, #20]
    fac6:	2224      	movs	r2, #36	; 0x24
    fac8:	5c9b      	ldrb	r3, [r3, r2]
    faca:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    facc:	2b00      	cmp	r3, #0
    face:	d128      	bne.n	fb22 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    fad0:	693b      	ldr	r3, [r7, #16]
    fad2:	2203      	movs	r2, #3
    fad4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    fad6:	697b      	ldr	r3, [r7, #20]
    fad8:	2200      	movs	r2, #0
    fada:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    fadc:	697b      	ldr	r3, [r7, #20]
    fade:	2225      	movs	r2, #37	; 0x25
    fae0:	2100      	movs	r1, #0
    fae2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    fae4:	697b      	ldr	r3, [r7, #20]
    fae6:	7a9b      	ldrb	r3, [r3, #10]
    fae8:	2b00      	cmp	r3, #0
    faea:	d00b      	beq.n	fb04 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    faec:	697b      	ldr	r3, [r7, #20]
    faee:	0018      	movs	r0, r3
    faf0:	4b6a      	ldr	r3, [pc, #424]	; (fc9c <_i2c_master_interrupt_handler+0x268>)
    faf2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    faf4:	693b      	ldr	r3, [r7, #16]
    faf6:	685b      	ldr	r3, [r3, #4]
    faf8:	22c0      	movs	r2, #192	; 0xc0
    fafa:	0292      	lsls	r2, r2, #10
    fafc:	431a      	orrs	r2, r3
    fafe:	693b      	ldr	r3, [r7, #16]
    fb00:	605a      	str	r2, [r3, #4]
    fb02:	e002      	b.n	fb0a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    fb04:	693b      	ldr	r3, [r7, #16]
    fb06:	2201      	movs	r2, #1
    fb08:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    fb0a:	230e      	movs	r3, #14
    fb0c:	18fb      	adds	r3, r7, r3
    fb0e:	781b      	ldrb	r3, [r3, #0]
    fb10:	2201      	movs	r2, #1
    fb12:	4013      	ands	r3, r2
    fb14:	d037      	beq.n	fb86 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    fb16:	697b      	ldr	r3, [r7, #20]
    fb18:	68db      	ldr	r3, [r3, #12]
    fb1a:	697a      	ldr	r2, [r7, #20]
    fb1c:	0010      	movs	r0, r2
    fb1e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    fb20:	e031      	b.n	fb86 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    fb22:	697b      	ldr	r3, [r7, #20]
    fb24:	8b5b      	ldrh	r3, [r3, #26]
    fb26:	b29b      	uxth	r3, r3
    fb28:	2b00      	cmp	r3, #0
    fb2a:	d02c      	beq.n	fb86 <_i2c_master_interrupt_handler+0x152>
    fb2c:	697b      	ldr	r3, [r7, #20]
    fb2e:	8b9b      	ldrh	r3, [r3, #28]
    fb30:	b29b      	uxth	r3, r3
    fb32:	2b00      	cmp	r3, #0
    fb34:	d027      	beq.n	fb86 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    fb36:	693b      	ldr	r3, [r7, #16]
    fb38:	8b5b      	ldrh	r3, [r3, #26]
    fb3a:	b29b      	uxth	r3, r3
    fb3c:	001a      	movs	r2, r3
    fb3e:	2320      	movs	r3, #32
    fb40:	4013      	ands	r3, r2
    fb42:	d111      	bne.n	fb68 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    fb44:	230f      	movs	r3, #15
    fb46:	18fb      	adds	r3, r7, r3
    fb48:	781b      	ldrb	r3, [r3, #0]
    fb4a:	2201      	movs	r2, #1
    fb4c:	4053      	eors	r3, r2
    fb4e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    fb50:	2b00      	cmp	r3, #0
    fb52:	d104      	bne.n	fb5e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    fb54:	697b      	ldr	r3, [r7, #20]
    fb56:	8b9b      	ldrh	r3, [r3, #28]
    fb58:	b29b      	uxth	r3, r3
    fb5a:	2b01      	cmp	r3, #1
    fb5c:	d004      	beq.n	fb68 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    fb5e:	697b      	ldr	r3, [r7, #20]
    fb60:	2225      	movs	r2, #37	; 0x25
    fb62:	2141      	movs	r1, #65	; 0x41
    fb64:	5499      	strb	r1, [r3, r2]
    fb66:	e00e      	b.n	fb86 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    fb68:	697b      	ldr	r3, [r7, #20]
    fb6a:	2224      	movs	r2, #36	; 0x24
    fb6c:	5c9b      	ldrb	r3, [r3, r2]
    fb6e:	b2db      	uxtb	r3, r3
    fb70:	2b00      	cmp	r3, #0
    fb72:	d104      	bne.n	fb7e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    fb74:	697b      	ldr	r3, [r7, #20]
    fb76:	0018      	movs	r0, r3
    fb78:	4b49      	ldr	r3, [pc, #292]	; (fca0 <_i2c_master_interrupt_handler+0x26c>)
    fb7a:	4798      	blx	r3
    fb7c:	e003      	b.n	fb86 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    fb7e:	697b      	ldr	r3, [r7, #20]
    fb80:	0018      	movs	r0, r3
    fb82:	4b48      	ldr	r3, [pc, #288]	; (fca4 <_i2c_master_interrupt_handler+0x270>)
    fb84:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    fb86:	697b      	ldr	r3, [r7, #20]
    fb88:	8b5b      	ldrh	r3, [r3, #26]
    fb8a:	b29b      	uxth	r3, r3
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d047      	beq.n	fc20 <_i2c_master_interrupt_handler+0x1ec>
    fb90:	697b      	ldr	r3, [r7, #20]
    fb92:	8b9b      	ldrh	r3, [r3, #28]
    fb94:	b29b      	uxth	r3, r3
    fb96:	2b00      	cmp	r3, #0
    fb98:	d142      	bne.n	fc20 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    fb9a:	697b      	ldr	r3, [r7, #20]
    fb9c:	2225      	movs	r2, #37	; 0x25
    fb9e:	5c9b      	ldrb	r3, [r3, r2]
    fba0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    fba2:	2b05      	cmp	r3, #5
    fba4:	d13c      	bne.n	fc20 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    fba6:	697b      	ldr	r3, [r7, #20]
    fba8:	2224      	movs	r2, #36	; 0x24
    fbaa:	5c9b      	ldrb	r3, [r3, r2]
    fbac:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    fbae:	2b01      	cmp	r3, #1
    fbb0:	d136      	bne.n	fc20 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    fbb2:	693b      	ldr	r3, [r7, #16]
    fbb4:	7e1b      	ldrb	r3, [r3, #24]
    fbb6:	b2db      	uxtb	r3, r3
    fbb8:	001a      	movs	r2, r3
    fbba:	2302      	movs	r3, #2
    fbbc:	4013      	ands	r3, r2
    fbbe:	d002      	beq.n	fbc6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    fbc0:	693b      	ldr	r3, [r7, #16]
    fbc2:	2202      	movs	r2, #2
    fbc4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    fbc6:	693b      	ldr	r3, [r7, #16]
    fbc8:	2203      	movs	r2, #3
    fbca:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    fbcc:	697b      	ldr	r3, [r7, #20]
    fbce:	2200      	movs	r2, #0
    fbd0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    fbd2:	697b      	ldr	r3, [r7, #20]
    fbd4:	2225      	movs	r2, #37	; 0x25
    fbd6:	2100      	movs	r1, #0
    fbd8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    fbda:	230e      	movs	r3, #14
    fbdc:	18fb      	adds	r3, r7, r3
    fbde:	781b      	ldrb	r3, [r3, #0]
    fbe0:	2202      	movs	r2, #2
    fbe2:	4013      	ands	r3, r2
    fbe4:	d00b      	beq.n	fbfe <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    fbe6:	697b      	ldr	r3, [r7, #20]
    fbe8:	2224      	movs	r2, #36	; 0x24
    fbea:	5c9b      	ldrb	r3, [r3, r2]
    fbec:	b2db      	uxtb	r3, r3
    fbee:	2b01      	cmp	r3, #1
    fbf0:	d105      	bne.n	fbfe <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    fbf2:	697b      	ldr	r3, [r7, #20]
    fbf4:	691b      	ldr	r3, [r3, #16]
    fbf6:	697a      	ldr	r2, [r7, #20]
    fbf8:	0010      	movs	r0, r2
    fbfa:	4798      	blx	r3
    fbfc:	e010      	b.n	fc20 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    fbfe:	230e      	movs	r3, #14
    fc00:	18fb      	adds	r3, r7, r3
    fc02:	781b      	ldrb	r3, [r3, #0]
    fc04:	2201      	movs	r2, #1
    fc06:	4013      	ands	r3, r2
    fc08:	d00a      	beq.n	fc20 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    fc0a:	697b      	ldr	r3, [r7, #20]
    fc0c:	2224      	movs	r2, #36	; 0x24
    fc0e:	5c9b      	ldrb	r3, [r3, r2]
    fc10:	b2db      	uxtb	r3, r3
    fc12:	2b00      	cmp	r3, #0
    fc14:	d104      	bne.n	fc20 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    fc16:	697b      	ldr	r3, [r7, #20]
    fc18:	68db      	ldr	r3, [r3, #12]
    fc1a:	697a      	ldr	r2, [r7, #20]
    fc1c:	0010      	movs	r0, r2
    fc1e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    fc20:	697b      	ldr	r3, [r7, #20]
    fc22:	2225      	movs	r2, #37	; 0x25
    fc24:	5c9b      	ldrb	r3, [r3, r2]
    fc26:	b2db      	uxtb	r3, r3
    fc28:	2b05      	cmp	r3, #5
    fc2a:	d02e      	beq.n	fc8a <_i2c_master_interrupt_handler+0x256>
    fc2c:	697b      	ldr	r3, [r7, #20]
    fc2e:	2225      	movs	r2, #37	; 0x25
    fc30:	5c9b      	ldrb	r3, [r3, r2]
    fc32:	b2db      	uxtb	r3, r3
    fc34:	2b00      	cmp	r3, #0
    fc36:	d028      	beq.n	fc8a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    fc38:	693b      	ldr	r3, [r7, #16]
    fc3a:	2203      	movs	r2, #3
    fc3c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    fc3e:	697b      	ldr	r3, [r7, #20]
    fc40:	2200      	movs	r2, #0
    fc42:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    fc44:	697b      	ldr	r3, [r7, #20]
    fc46:	2200      	movs	r2, #0
    fc48:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    fc4a:	697b      	ldr	r3, [r7, #20]
    fc4c:	2225      	movs	r2, #37	; 0x25
    fc4e:	5c9b      	ldrb	r3, [r3, r2]
    fc50:	b2db      	uxtb	r3, r3
    fc52:	2b41      	cmp	r3, #65	; 0x41
    fc54:	d00e      	beq.n	fc74 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    fc56:	697b      	ldr	r3, [r7, #20]
    fc58:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    fc5a:	2b00      	cmp	r3, #0
    fc5c:	d00a      	beq.n	fc74 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    fc5e:	697b      	ldr	r3, [r7, #20]
    fc60:	0018      	movs	r0, r3
    fc62:	4b0e      	ldr	r3, [pc, #56]	; (fc9c <_i2c_master_interrupt_handler+0x268>)
    fc64:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    fc66:	693b      	ldr	r3, [r7, #16]
    fc68:	685b      	ldr	r3, [r3, #4]
    fc6a:	22e0      	movs	r2, #224	; 0xe0
    fc6c:	02d2      	lsls	r2, r2, #11
    fc6e:	431a      	orrs	r2, r3
    fc70:	693b      	ldr	r3, [r7, #16]
    fc72:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    fc74:	230e      	movs	r3, #14
    fc76:	18fb      	adds	r3, r7, r3
    fc78:	781b      	ldrb	r3, [r3, #0]
    fc7a:	2204      	movs	r2, #4
    fc7c:	4013      	ands	r3, r2
    fc7e:	d004      	beq.n	fc8a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    fc80:	697b      	ldr	r3, [r7, #20]
    fc82:	695b      	ldr	r3, [r3, #20]
    fc84:	697a      	ldr	r2, [r7, #20]
    fc86:	0010      	movs	r0, r2
    fc88:	4798      	blx	r3
		}
	}
}
    fc8a:	46c0      	nop			; (mov r8, r8)
    fc8c:	46bd      	mov	sp, r7
    fc8e:	b006      	add	sp, #24
    fc90:	bd80      	pop	{r7, pc}
    fc92:	46c0      	nop			; (mov r8, r8)
    fc94:	20005638 	.word	0x20005638
    fc98:	0000f84d 	.word	0x0000f84d
    fc9c:	0000f6bd 	.word	0x0000f6bd
    fca0:	0000f7d1 	.word	0x0000f7d1
    fca4:	0000f6e1 	.word	0x0000f6e1

0000fca8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    fca8:	b580      	push	{r7, lr}
    fcaa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    fcac:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    fcb0:	4b02      	ldr	r3, [pc, #8]	; (fcbc <NVIC_SystemReset+0x14>)
    fcb2:	4a03      	ldr	r2, [pc, #12]	; (fcc0 <NVIC_SystemReset+0x18>)
    fcb4:	60da      	str	r2, [r3, #12]
    fcb6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    fcba:	e7fe      	b.n	fcba <NVIC_SystemReset+0x12>
    fcbc:	e000ed00 	.word	0xe000ed00
    fcc0:	05fa0004 	.word	0x05fa0004

0000fcc4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    fcc4:	b580      	push	{r7, lr}
    fcc6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    fcc8:	4b02      	ldr	r3, [pc, #8]	; (fcd4 <system_reset+0x10>)
    fcca:	4798      	blx	r3
}
    fccc:	46c0      	nop			; (mov r8, r8)
    fcce:	46bd      	mov	sp, r7
    fcd0:	bd80      	pop	{r7, pc}
    fcd2:	46c0      	nop			; (mov r8, r8)
    fcd4:	0000fca9 	.word	0x0000fca9

0000fcd8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
    fcd8:	b580      	push	{r7, lr}
    fcda:	b086      	sub	sp, #24
    fcdc:	af00      	add	r7, sp, #0
    fcde:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
    fce0:	4ba6      	ldr	r3, [pc, #664]	; (ff7c <vCommandConsoleTask+0x2a4>)
    fce2:	0018      	movs	r0, r3
    fce4:	4ba6      	ldr	r3, [pc, #664]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fce6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
    fce8:	4ba6      	ldr	r3, [pc, #664]	; (ff84 <vCommandConsoleTask+0x2ac>)
    fcea:	0018      	movs	r0, r3
    fcec:	4ba4      	ldr	r3, [pc, #656]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fcee:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
    fcf0:	4ba5      	ldr	r3, [pc, #660]	; (ff88 <vCommandConsoleTask+0x2b0>)
    fcf2:	0018      	movs	r0, r3
    fcf4:	4ba2      	ldr	r3, [pc, #648]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fcf6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
    fcf8:	4ba4      	ldr	r3, [pc, #656]	; (ff8c <vCommandConsoleTask+0x2b4>)
    fcfa:	0018      	movs	r0, r3
    fcfc:	4ba0      	ldr	r3, [pc, #640]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fcfe:	4798      	blx	r3

    FreeRTOS_CLIRegisterCommand(&xVersionCommand);
    fd00:	4ba3      	ldr	r3, [pc, #652]	; (ff90 <vCommandConsoleTask+0x2b8>)
    fd02:	0018      	movs	r0, r3
    fd04:	4b9e      	ldr	r3, [pc, #632]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd06:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xTicksCommand);
    fd08:	4ba2      	ldr	r3, [pc, #648]	; (ff94 <vCommandConsoleTask+0x2bc>)
    fd0a:	0018      	movs	r0, r3
    fd0c:	4b9c      	ldr	r3, [pc, #624]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd0e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xGoldCommand);
    fd10:	4ba1      	ldr	r3, [pc, #644]	; (ff98 <vCommandConsoleTask+0x2c0>)
    fd12:	0018      	movs	r0, r3
    fd14:	4b9a      	ldr	r3, [pc, #616]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd16:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xTempCommand);  
    fd18:	4ba0      	ldr	r3, [pc, #640]	; (ff9c <vCommandConsoleTask+0x2c4>)
    fd1a:	0018      	movs	r0, r3
    fd1c:	4b98      	ldr	r3, [pc, #608]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd1e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand( &xLightCommand   );
    fd20:	4b9f      	ldr	r3, [pc, #636]	; (ffa0 <vCommandConsoleTask+0x2c8>)
    fd22:	0018      	movs	r0, r3
    fd24:	4b96      	ldr	r3, [pc, #600]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd26:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand( &xLedOffCommand  );
    fd28:	4b9e      	ldr	r3, [pc, #632]	; (ffa4 <vCommandConsoleTask+0x2cc>)
    fd2a:	0018      	movs	r0, r3
    fd2c:	4b94      	ldr	r3, [pc, #592]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd2e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand( &xLedBlueCommand );
    fd30:	4b9d      	ldr	r3, [pc, #628]	; (ffa8 <vCommandConsoleTask+0x2d0>)
    fd32:	0018      	movs	r0, r3
    fd34:	4b92      	ldr	r3, [pc, #584]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd36:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand( &xLedRedCommand  );
    fd38:	4b9c      	ldr	r3, [pc, #624]	; (ffac <vCommandConsoleTask+0x2d4>)
    fd3a:	0018      	movs	r0, r3
    fd3c:	4b90      	ldr	r3, [pc, #576]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd3e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand( &xLedGreenCommand);
    fd40:	4b9b      	ldr	r3, [pc, #620]	; (ffb0 <vCommandConsoleTask+0x2d8>)
    fd42:	0018      	movs	r0, r3
    fd44:	4b8e      	ldr	r3, [pc, #568]	; (ff80 <vCommandConsoleTask+0x2a8>)
    fd46:	4798      	blx	r3

    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
    fd48:	2317      	movs	r3, #23
    fd4a:	18fb      	adds	r3, r7, r3
    fd4c:	2200      	movs	r2, #0
    fd4e:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
    fd50:	4b98      	ldr	r3, [pc, #608]	; (ffb4 <vCommandConsoleTask+0x2dc>)
    fd52:	0018      	movs	r0, r3
    fd54:	4b98      	ldr	r3, [pc, #608]	; (ffb8 <vCommandConsoleTask+0x2e0>)
    fd56:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
    fd58:	2203      	movs	r2, #3
    fd5a:	2100      	movs	r1, #0
    fd5c:	2001      	movs	r0, #1
    fd5e:	4b97      	ldr	r3, [pc, #604]	; (ffbc <vCommandConsoleTask+0x2e4>)
    fd60:	4798      	blx	r3
    fd62:	0002      	movs	r2, r0
    fd64:	4b96      	ldr	r3, [pc, #600]	; (ffc0 <vCommandConsoleTask+0x2e8>)
    fd66:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
    fd68:	4b95      	ldr	r3, [pc, #596]	; (ffc0 <vCommandConsoleTask+0x2e8>)
    fd6a:	681b      	ldr	r3, [r3, #0]
    fd6c:	2b00      	cmp	r3, #0
    fd6e:	d107      	bne.n	fd80 <vCommandConsoleTask+0xa8>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    fd70:	4b94      	ldr	r3, [pc, #592]	; (ffc4 <vCommandConsoleTask+0x2ec>)
    fd72:	0019      	movs	r1, r3
    fd74:	2003      	movs	r0, #3
    fd76:	4b94      	ldr	r3, [pc, #592]	; (ffc8 <vCommandConsoleTask+0x2f0>)
    fd78:	4798      	blx	r3
        vTaskSuspend(NULL);
    fd7a:	2000      	movs	r0, #0
    fd7c:	4b93      	ldr	r3, [pc, #588]	; (ffcc <vCommandConsoleTask+0x2f4>)
    fd7e:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
    fd80:	230c      	movs	r3, #12
    fd82:	18fb      	adds	r3, r7, r3
    fd84:	0018      	movs	r0, r3
    fd86:	4b92      	ldr	r3, [pc, #584]	; (ffd0 <vCommandConsoleTask+0x2f8>)
    fd88:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
    fd8a:	230c      	movs	r3, #12
    fd8c:	18fb      	adds	r3, r7, r3
    fd8e:	781b      	ldrb	r3, [r3, #0]
    fd90:	2b0a      	cmp	r3, #10
    fd92:	d004      	beq.n	fd9e <vCommandConsoleTask+0xc6>
    fd94:	230c      	movs	r3, #12
    fd96:	18fb      	adds	r3, r7, r3
    fd98:	781b      	ldrb	r3, [r3, #0]
    fd9a:	2b0d      	cmp	r3, #13
    fd9c:	d137      	bne.n	fe0e <vCommandConsoleTask+0x136>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
    fd9e:	4b8d      	ldr	r3, [pc, #564]	; (ffd4 <vCommandConsoleTask+0x2fc>)
    fda0:	0018      	movs	r0, r3
    fda2:	4b85      	ldr	r3, [pc, #532]	; (ffb8 <vCommandConsoleTask+0x2e0>)
    fda4:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
    fda6:	4b8c      	ldr	r3, [pc, #560]	; (ffd8 <vCommandConsoleTask+0x300>)
    fda8:	2200      	movs	r2, #0
    fdaa:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
    fdac:	4b8b      	ldr	r3, [pc, #556]	; (ffdc <vCommandConsoleTask+0x304>)
    fdae:	2200      	movs	r2, #0
    fdb0:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
    fdb2:	498b      	ldr	r1, [pc, #556]	; (ffe0 <vCommandConsoleTask+0x308>)
    fdb4:	4b8b      	ldr	r3, [pc, #556]	; (ffe4 <vCommandConsoleTask+0x30c>)
    fdb6:	2231      	movs	r2, #49	; 0x31
    fdb8:	0018      	movs	r0, r3
    fdba:	4b8b      	ldr	r3, [pc, #556]	; (ffe8 <vCommandConsoleTask+0x310>)
    fdbc:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
    fdbe:	4b89      	ldr	r3, [pc, #548]	; (ffe4 <vCommandConsoleTask+0x30c>)
    fdc0:	2231      	movs	r2, #49	; 0x31
    fdc2:	2100      	movs	r1, #0
    fdc4:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
    fdc6:	4989      	ldr	r1, [pc, #548]	; (ffec <vCommandConsoleTask+0x314>)
    fdc8:	4b85      	ldr	r3, [pc, #532]	; (ffe0 <vCommandConsoleTask+0x308>)
    fdca:	2264      	movs	r2, #100	; 0x64
    fdcc:	0018      	movs	r0, r3
    fdce:	4b88      	ldr	r3, [pc, #544]	; (fff0 <vCommandConsoleTask+0x318>)
    fdd0:	4798      	blx	r3
    fdd2:	0003      	movs	r3, r0
    fdd4:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    fdd6:	4b85      	ldr	r3, [pc, #532]	; (ffec <vCommandConsoleTask+0x314>)
    fdd8:	2263      	movs	r2, #99	; 0x63
    fdda:	2100      	movs	r1, #0
    fddc:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
    fdde:	4b83      	ldr	r3, [pc, #524]	; (ffec <vCommandConsoleTask+0x314>)
    fde0:	0018      	movs	r0, r3
    fde2:	4b75      	ldr	r3, [pc, #468]	; (ffb8 <vCommandConsoleTask+0x2e0>)
    fde4:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
    fde6:	693b      	ldr	r3, [r7, #16]
    fde8:	2b00      	cmp	r3, #0
    fdea:	d1ec      	bne.n	fdc6 <vCommandConsoleTask+0xee>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
    fdec:	2317      	movs	r3, #23
    fdee:	18fb      	adds	r3, r7, r3
    fdf0:	2200      	movs	r2, #0
    fdf2:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    fdf4:	4b7a      	ldr	r3, [pc, #488]	; (ffe0 <vCommandConsoleTask+0x308>)
    fdf6:	2232      	movs	r2, #50	; 0x32
    fdf8:	2100      	movs	r1, #0
    fdfa:	0018      	movs	r0, r3
    fdfc:	4b7d      	ldr	r3, [pc, #500]	; (fff4 <vCommandConsoleTask+0x31c>)
    fdfe:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    fe00:	4b7a      	ldr	r3, [pc, #488]	; (ffec <vCommandConsoleTask+0x314>)
    fe02:	2264      	movs	r2, #100	; 0x64
    fe04:	2100      	movs	r1, #0
    fe06:	0018      	movs	r0, r3
    fe08:	4b7a      	ldr	r3, [pc, #488]	; (fff4 <vCommandConsoleTask+0x31c>)
    fe0a:	4798      	blx	r3
    fe0c:	e0b5      	b.n	ff7a <vCommandConsoleTask+0x2a2>
        } else {

            if (true == isEscapeCode) {
    fe0e:	4b72      	ldr	r3, [pc, #456]	; (ffd8 <vCommandConsoleTask+0x300>)
    fe10:	781b      	ldrb	r3, [r3, #0]
    fe12:	2b00      	cmp	r3, #0
    fe14:	d059      	beq.n	feca <vCommandConsoleTask+0x1f2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    fe16:	4b71      	ldr	r3, [pc, #452]	; (ffdc <vCommandConsoleTask+0x304>)
    fe18:	781b      	ldrb	r3, [r3, #0]
    fe1a:	2b03      	cmp	r3, #3
    fe1c:	d80c      	bhi.n	fe38 <vCommandConsoleTask+0x160>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    fe1e:	4b6f      	ldr	r3, [pc, #444]	; (ffdc <vCommandConsoleTask+0x304>)
    fe20:	781b      	ldrb	r3, [r3, #0]
    fe22:	1c5a      	adds	r2, r3, #1
    fe24:	b2d1      	uxtb	r1, r2
    fe26:	4a6d      	ldr	r2, [pc, #436]	; (ffdc <vCommandConsoleTask+0x304>)
    fe28:	7011      	strb	r1, [r2, #0]
    fe2a:	001a      	movs	r2, r3
    fe2c:	230c      	movs	r3, #12
    fe2e:	18fb      	adds	r3, r7, r3
    fe30:	7819      	ldrb	r1, [r3, #0]
    fe32:	4b71      	ldr	r3, [pc, #452]	; (fff8 <vCommandConsoleTask+0x320>)
    fe34:	5499      	strb	r1, [r3, r2]
    fe36:	e005      	b.n	fe44 <vCommandConsoleTask+0x16c>
                } else {
                    isEscapeCode = false;
    fe38:	4b67      	ldr	r3, [pc, #412]	; (ffd8 <vCommandConsoleTask+0x300>)
    fe3a:	2200      	movs	r2, #0
    fe3c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    fe3e:	4b67      	ldr	r3, [pc, #412]	; (ffdc <vCommandConsoleTask+0x304>)
    fe40:	2200      	movs	r2, #0
    fe42:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    fe44:	4b65      	ldr	r3, [pc, #404]	; (ffdc <vCommandConsoleTask+0x304>)
    fe46:	781b      	ldrb	r3, [r3, #0]
    fe48:	2b01      	cmp	r3, #1
    fe4a:	d999      	bls.n	fd80 <vCommandConsoleTask+0xa8>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
    fe4c:	4a6b      	ldr	r2, [pc, #428]	; (fffc <vCommandConsoleTask+0x324>)
    fe4e:	4b6a      	ldr	r3, [pc, #424]	; (fff8 <vCommandConsoleTask+0x320>)
    fe50:	0011      	movs	r1, r2
    fe52:	0018      	movs	r0, r3
    fe54:	4b6a      	ldr	r3, [pc, #424]	; (10000 <vCommandConsoleTask+0x328>)
    fe56:	4798      	blx	r3
    fe58:	1e03      	subs	r3, r0, #0
    fe5a:	d02f      	beq.n	febc <vCommandConsoleTask+0x1e4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
    fe5c:	4969      	ldr	r1, [pc, #420]	; (10004 <vCommandConsoleTask+0x32c>)
    fe5e:	4b60      	ldr	r3, [pc, #384]	; (ffe0 <vCommandConsoleTask+0x308>)
    fe60:	221b      	movs	r2, #27
    fe62:	0018      	movs	r0, r3
    fe64:	4b68      	ldr	r3, [pc, #416]	; (10008 <vCommandConsoleTask+0x330>)
    fe66:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
    fe68:	4b5d      	ldr	r3, [pc, #372]	; (ffe0 <vCommandConsoleTask+0x308>)
    fe6a:	0018      	movs	r0, r3
    fe6c:	4b52      	ldr	r3, [pc, #328]	; (ffb8 <vCommandConsoleTask+0x2e0>)
    fe6e:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
    fe70:	2317      	movs	r3, #23
    fe72:	18fb      	adds	r3, r7, r3
    fe74:	2200      	movs	r2, #0
    fe76:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
    fe78:	4b59      	ldr	r3, [pc, #356]	; (ffe0 <vCommandConsoleTask+0x308>)
    fe7a:	2232      	movs	r2, #50	; 0x32
    fe7c:	2100      	movs	r1, #0
    fe7e:	0018      	movs	r0, r3
    fe80:	4b5c      	ldr	r3, [pc, #368]	; (fff4 <vCommandConsoleTask+0x31c>)
    fe82:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
    fe84:	4957      	ldr	r1, [pc, #348]	; (ffe4 <vCommandConsoleTask+0x30c>)
    fe86:	4b56      	ldr	r3, [pc, #344]	; (ffe0 <vCommandConsoleTask+0x308>)
    fe88:	2231      	movs	r2, #49	; 0x31
    fe8a:	0018      	movs	r0, r3
    fe8c:	4b56      	ldr	r3, [pc, #344]	; (ffe8 <vCommandConsoleTask+0x310>)
    fe8e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    fe90:	4b53      	ldr	r3, [pc, #332]	; (ffe0 <vCommandConsoleTask+0x308>)
    fe92:	0018      	movs	r0, r3
    fe94:	4b5d      	ldr	r3, [pc, #372]	; (1000c <vCommandConsoleTask+0x334>)
    fe96:	4798      	blx	r3
    fe98:	0003      	movs	r3, r0
    fe9a:	2b30      	cmp	r3, #48	; 0x30
    fe9c:	d806      	bhi.n	feac <vCommandConsoleTask+0x1d4>
    fe9e:	4b51      	ldr	r3, [pc, #324]	; (ffe4 <vCommandConsoleTask+0x30c>)
    fea0:	0018      	movs	r0, r3
    fea2:	4b5a      	ldr	r3, [pc, #360]	; (1000c <vCommandConsoleTask+0x334>)
    fea4:	4798      	blx	r3
    fea6:	0003      	movs	r3, r0
    fea8:	b2da      	uxtb	r2, r3
    feaa:	e000      	b.n	feae <vCommandConsoleTask+0x1d6>
    feac:	2231      	movs	r2, #49	; 0x31
    feae:	2317      	movs	r3, #23
    feb0:	18fb      	adds	r3, r7, r3
    feb2:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
    feb4:	4b4a      	ldr	r3, [pc, #296]	; (ffe0 <vCommandConsoleTask+0x308>)
    feb6:	0018      	movs	r0, r3
    feb8:	4b3f      	ldr	r3, [pc, #252]	; (ffb8 <vCommandConsoleTask+0x2e0>)
    feba:	4798      	blx	r3
                    }

                    isEscapeCode = false;
    febc:	4b46      	ldr	r3, [pc, #280]	; (ffd8 <vCommandConsoleTask+0x300>)
    febe:	2200      	movs	r2, #0
    fec0:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    fec2:	4b46      	ldr	r3, [pc, #280]	; (ffdc <vCommandConsoleTask+0x304>)
    fec4:	2200      	movs	r2, #0
    fec6:	701a      	strb	r2, [r3, #0]
    fec8:	e75a      	b.n	fd80 <vCommandConsoleTask+0xa8>
                }
            }
            else if (cRxedChar[0] == '\r') {
    feca:	230c      	movs	r3, #12
    fecc:	18fb      	adds	r3, r7, r3
    fece:	781b      	ldrb	r3, [r3, #0]
    fed0:	2b0d      	cmp	r3, #13
    fed2:	d100      	bne.n	fed6 <vCommandConsoleTask+0x1fe>
    fed4:	e754      	b.n	fd80 <vCommandConsoleTask+0xa8>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    fed6:	230c      	movs	r3, #12
    fed8:	18fb      	adds	r3, r7, r3
    feda:	781b      	ldrb	r3, [r3, #0]
    fedc:	2b08      	cmp	r3, #8
    fede:	d004      	beq.n	feea <vCommandConsoleTask+0x212>
    fee0:	230c      	movs	r3, #12
    fee2:	18fb      	adds	r3, r7, r3
    fee4:	781b      	ldrb	r3, [r3, #0]
    fee6:	2b7f      	cmp	r3, #127	; 0x7f
    fee8:	d11c      	bne.n	ff24 <vCommandConsoleTask+0x24c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
    feea:	2308      	movs	r3, #8
    feec:	18fb      	adds	r3, r7, r3
    feee:	4a48      	ldr	r2, [pc, #288]	; (10010 <vCommandConsoleTask+0x338>)
    fef0:	6812      	ldr	r2, [r2, #0]
    fef2:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
    fef4:	2308      	movs	r3, #8
    fef6:	18fb      	adds	r3, r7, r3
    fef8:	0018      	movs	r0, r3
    fefa:	4b2f      	ldr	r3, [pc, #188]	; (ffb8 <vCommandConsoleTask+0x2e0>)
    fefc:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
    fefe:	2317      	movs	r3, #23
    ff00:	18fb      	adds	r3, r7, r3
    ff02:	781b      	ldrb	r3, [r3, #0]
    ff04:	2b00      	cmp	r3, #0
    ff06:	d037      	beq.n	ff78 <vCommandConsoleTask+0x2a0>
                    cInputIndex--;
    ff08:	2317      	movs	r3, #23
    ff0a:	18fb      	adds	r3, r7, r3
    ff0c:	781a      	ldrb	r2, [r3, #0]
    ff0e:	2317      	movs	r3, #23
    ff10:	18fb      	adds	r3, r7, r3
    ff12:	3a01      	subs	r2, #1
    ff14:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
    ff16:	2317      	movs	r3, #23
    ff18:	18fb      	adds	r3, r7, r3
    ff1a:	781b      	ldrb	r3, [r3, #0]
    ff1c:	4a30      	ldr	r2, [pc, #192]	; (ffe0 <vCommandConsoleTask+0x308>)
    ff1e:	2100      	movs	r1, #0
    ff20:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    ff22:	e029      	b.n	ff78 <vCommandConsoleTask+0x2a0>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
    ff24:	230c      	movs	r3, #12
    ff26:	18fb      	adds	r3, r7, r3
    ff28:	781b      	ldrb	r3, [r3, #0]
    ff2a:	2b1b      	cmp	r3, #27
    ff2c:	d106      	bne.n	ff3c <vCommandConsoleTask+0x264>
                isEscapeCode = true;  // Next characters will be code arguments
    ff2e:	4b2a      	ldr	r3, [pc, #168]	; (ffd8 <vCommandConsoleTask+0x300>)
    ff30:	2201      	movs	r2, #1
    ff32:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
    ff34:	4b29      	ldr	r3, [pc, #164]	; (ffdc <vCommandConsoleTask+0x304>)
    ff36:	2200      	movs	r2, #0
    ff38:	701a      	strb	r2, [r3, #0]
    ff3a:	e721      	b.n	fd80 <vCommandConsoleTask+0xa8>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
    ff3c:	2317      	movs	r3, #23
    ff3e:	18fb      	adds	r3, r7, r3
    ff40:	781b      	ldrb	r3, [r3, #0]
    ff42:	2b31      	cmp	r3, #49	; 0x31
    ff44:	d80e      	bhi.n	ff64 <vCommandConsoleTask+0x28c>
                    pcInputString[cInputIndex] = cRxedChar[0];
    ff46:	2317      	movs	r3, #23
    ff48:	18fb      	adds	r3, r7, r3
    ff4a:	781b      	ldrb	r3, [r3, #0]
    ff4c:	220c      	movs	r2, #12
    ff4e:	18ba      	adds	r2, r7, r2
    ff50:	7811      	ldrb	r1, [r2, #0]
    ff52:	4a23      	ldr	r2, [pc, #140]	; (ffe0 <vCommandConsoleTask+0x308>)
    ff54:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    ff56:	2317      	movs	r3, #23
    ff58:	18fb      	adds	r3, r7, r3
    ff5a:	781a      	ldrb	r2, [r3, #0]
    ff5c:	2317      	movs	r3, #23
    ff5e:	18fb      	adds	r3, r7, r3
    ff60:	3201      	adds	r2, #1
    ff62:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
    ff64:	230c      	movs	r3, #12
    ff66:	18fb      	adds	r3, r7, r3
    ff68:	2200      	movs	r2, #0
    ff6a:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
    ff6c:	230c      	movs	r3, #12
    ff6e:	18fb      	adds	r3, r7, r3
    ff70:	0018      	movs	r0, r3
    ff72:	4b11      	ldr	r3, [pc, #68]	; (ffb8 <vCommandConsoleTask+0x2e0>)
    ff74:	4798      	blx	r3
    ff76:	e703      	b.n	fd80 <vCommandConsoleTask+0xa8>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    ff78:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
    ff7a:	e701      	b.n	fd80 <vCommandConsoleTask+0xa8>
    ff7c:	00034260 	.word	0x00034260
    ff80:	0001472d 	.word	0x0001472d
    ff84:	00034290 	.word	0x00034290
    ff88:	00034270 	.word	0x00034270
    ff8c:	00034280 	.word	0x00034280
    ff90:	000342a0 	.word	0x000342a0
    ff94:	000342b0 	.word	0x000342b0
    ff98:	000342c0 	.word	0x000342c0
    ff9c:	000342d0 	.word	0x000342d0
    ffa0:	000342e0 	.word	0x000342e0
    ffa4:	000342f0 	.word	0x000342f0
    ffa8:	00034300 	.word	0x00034300
    ffac:	00034310 	.word	0x00034310
    ffb0:	00034320 	.word	0x00034320
    ffb4:	00033ccc 	.word	0x00033ccc
    ffb8:	0001a691 	.word	0x0001a691
    ffbc:	00016cf9 	.word	0x00016cf9
    ffc0:	20004320 	.word	0x20004320
    ffc4:	00033f80 	.word	0x00033f80
    ffc8:	0001a761 	.word	0x0001a761
    ffcc:	00018ae5 	.word	0x00018ae5
    ffd0:	00010015 	.word	0x00010015
    ffd4:	00033fa0 	.word	0x00033fa0
    ffd8:	20000344 	.word	0x20000344
    ffdc:	20000345 	.word	0x20000345
    ffe0:	2000037c 	.word	0x2000037c
    ffe4:	20000348 	.word	0x20000348
    ffe8:	00032cd7 	.word	0x00032cd7
    ffec:	200003b0 	.word	0x200003b0
    fff0:	0001479d 	.word	0x0001479d
    fff4:	000328a7 	.word	0x000328a7
    fff8:	20000414 	.word	0x20000414
    fffc:	00033fa4 	.word	0x00033fa4
   10000:	00032ba9 	.word	0x00032ba9
   10004:	00033fa8 	.word	0x00033fa8
   10008:	00032b65 	.word	0x00032b65
   1000c:	00032c5f 	.word	0x00032c5f
   10010:	00033fb0 	.word	0x00033fb0

00010014 <FreeRTOS_read>:
                                 There are multiple solutions! Check all the inter-thread communications available! See https://www.freertos.org/a00113.html
 * @details		STUDENTS TO COMPLETE.
 * @note
 *****************************************************************************/
static void FreeRTOS_read(char *character)
{
   10014:	b580      	push	{r7, lr}
   10016:	b084      	sub	sp, #16
   10018:	af00      	add	r7, sp, #0
   1001a:	6078      	str	r0, [r7, #4]
    if (xSemaphoreTake(xRxSemaphore, portMAX_DELAY) == pdTRUE)
   1001c:	4b13      	ldr	r3, [pc, #76]	; (1006c <FreeRTOS_read+0x58>)
   1001e:	681a      	ldr	r2, [r3, #0]
   10020:	2301      	movs	r3, #1
   10022:	425b      	negs	r3, r3
   10024:	0019      	movs	r1, r3
   10026:	0010      	movs	r0, r2
   10028:	4b11      	ldr	r3, [pc, #68]	; (10070 <FreeRTOS_read+0x5c>)
   1002a:	4798      	blx	r3
   1002c:	0003      	movs	r3, r0
   1002e:	2b01      	cmp	r3, #1
   10030:	d114      	bne.n	1005c <FreeRTOS_read+0x48>
    {
        uint8_t tempChar = 0;
   10032:	230f      	movs	r3, #15
   10034:	18fb      	adds	r3, r7, r3
   10036:	2200      	movs	r2, #0
   10038:	701a      	strb	r2, [r3, #0]
        if (SerialConsoleReadCharacter(&tempChar) == 0)
   1003a:	230f      	movs	r3, #15
   1003c:	18fb      	adds	r3, r7, r3
   1003e:	0018      	movs	r0, r3
   10040:	4b0c      	ldr	r3, [pc, #48]	; (10074 <FreeRTOS_read+0x60>)
   10042:	4798      	blx	r3
   10044:	1e03      	subs	r3, r0, #0
   10046:	d105      	bne.n	10054 <FreeRTOS_read+0x40>
        {
            *character = (char)tempChar;
   10048:	230f      	movs	r3, #15
   1004a:	18fb      	adds	r3, r7, r3
   1004c:	781a      	ldrb	r2, [r3, #0]
   1004e:	687b      	ldr	r3, [r7, #4]
   10050:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        *character = '\0';
    }
}
   10052:	e006      	b.n	10062 <FreeRTOS_read+0x4e>
            *character = '\0';
   10054:	687b      	ldr	r3, [r7, #4]
   10056:	2200      	movs	r2, #0
   10058:	701a      	strb	r2, [r3, #0]
}
   1005a:	e002      	b.n	10062 <FreeRTOS_read+0x4e>
        *character = '\0';
   1005c:	687b      	ldr	r3, [r7, #4]
   1005e:	2200      	movs	r2, #0
   10060:	701a      	strb	r2, [r3, #0]
}
   10062:	46c0      	nop			; (mov r8, r8)
   10064:	46bd      	mov	sp, r7
   10066:	b004      	add	sp, #16
   10068:	bd80      	pop	{r7, pc}
   1006a:	46c0      	nop			; (mov r8, r8)
   1006c:	20003c98 	.word	0x20003c98
   10070:	00017cb1 	.word	0x00017cb1
   10074:	0001a725 	.word	0x0001a725

00010078 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   10078:	b590      	push	{r4, r7, lr}
   1007a:	b087      	sub	sp, #28
   1007c:	af00      	add	r7, sp, #0
   1007e:	60f8      	str	r0, [r7, #12]
   10080:	60b9      	str	r1, [r7, #8]
   10082:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   10084:	2317      	movs	r3, #23
   10086:	18fb      	adds	r3, r7, r3
   10088:	221b      	movs	r2, #27
   1008a:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   1008c:	2317      	movs	r3, #23
   1008e:	18fb      	adds	r3, r7, r3
   10090:	781b      	ldrb	r3, [r3, #0]
   10092:	4a08      	ldr	r2, [pc, #32]	; (100b4 <xCliClearTerminalScreen+0x3c>)
   10094:	4808      	ldr	r0, [pc, #32]	; (100b8 <xCliClearTerminalScreen+0x40>)
   10096:	210f      	movs	r1, #15
   10098:	4c08      	ldr	r4, [pc, #32]	; (100bc <xCliClearTerminalScreen+0x44>)
   1009a:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   1009c:	4a06      	ldr	r2, [pc, #24]	; (100b8 <xCliClearTerminalScreen+0x40>)
   1009e:	68b9      	ldr	r1, [r7, #8]
   100a0:	68fb      	ldr	r3, [r7, #12]
   100a2:	0018      	movs	r0, r3
   100a4:	4b05      	ldr	r3, [pc, #20]	; (100bc <xCliClearTerminalScreen+0x44>)
   100a6:	4798      	blx	r3
    return pdFALSE;
   100a8:	2300      	movs	r3, #0
}
   100aa:	0018      	movs	r0, r3
   100ac:	46bd      	mov	sp, r7
   100ae:	b007      	add	sp, #28
   100b0:	bd90      	pop	{r4, r7, pc}
   100b2:	46c0      	nop			; (mov r8, r8)
   100b4:	00033fb4 	.word	0x00033fb4
   100b8:	20000334 	.word	0x20000334
   100bc:	00032b01 	.word	0x00032b01

000100c0 <CLI_OTAU>:
 *    Call this via "fw" in your serial console
 **************************************************************/
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer,
                    size_t xWriteBufferLen,
                    const int8_t *pcCommandString)
{
   100c0:	b590      	push	{r4, r7, lr}
   100c2:	b087      	sub	sp, #28
   100c4:	af00      	add	r7, sp, #0
   100c6:	60f8      	str	r0, [r7, #12]
   100c8:	60b9      	str	r1, [r7, #8]
   100ca:	607a      	str	r2, [r7, #4]
    FRESULT fr;
    // Delete previous firmware files: application.bin and g_application.bin
    fr = f_unlink("0:/application.bin");
   100cc:	2317      	movs	r3, #23
   100ce:	18fc      	adds	r4, r7, r3
   100d0:	4b14      	ldr	r3, [pc, #80]	; (10124 <CLI_OTAU+0x64>)
   100d2:	0018      	movs	r0, r3
   100d4:	4b14      	ldr	r3, [pc, #80]	; (10128 <CLI_OTAU+0x68>)
   100d6:	4798      	blx	r3
   100d8:	0003      	movs	r3, r0
   100da:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK && fr != FR_NO_FILE) {
   100dc:	2317      	movs	r3, #23
   100de:	18fb      	adds	r3, r7, r3
   100e0:	781b      	ldrb	r3, [r3, #0]
   100e2:	2b00      	cmp	r3, #0
   100e4:	d008      	beq.n	100f8 <CLI_OTAU+0x38>
   100e6:	2317      	movs	r3, #23
   100e8:	18fb      	adds	r3, r7, r3
   100ea:	781b      	ldrb	r3, [r3, #0]
   100ec:	2b04      	cmp	r3, #4
   100ee:	d003      	beq.n	100f8 <CLI_OTAU+0x38>
        SerialConsoleWriteString("Warning: Failed to delete previous application.bin\r\n");
   100f0:	4b0e      	ldr	r3, [pc, #56]	; (1012c <CLI_OTAU+0x6c>)
   100f2:	0018      	movs	r0, r3
   100f4:	4b0e      	ldr	r3, [pc, #56]	; (10130 <CLI_OTAU+0x70>)
   100f6:	4798      	blx	r3
    }

    SerialConsoleWriteString("Starting firmware download via WifiHandler...\r\n");
   100f8:	4b0e      	ldr	r3, [pc, #56]	; (10134 <CLI_OTAU+0x74>)
   100fa:	0018      	movs	r0, r3
   100fc:	4b0c      	ldr	r3, [pc, #48]	; (10130 <CLI_OTAU+0x70>)
   100fe:	4798      	blx	r3
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   10100:	2002      	movs	r0, #2
   10102:	4b0d      	ldr	r3, [pc, #52]	; (10138 <CLI_OTAU+0x78>)
   10104:	4798      	blx	r3

    snprintf((char*)pcWriteBuffer, xWriteBufferLen,
   10106:	4a0d      	ldr	r2, [pc, #52]	; (1013c <CLI_OTAU+0x7c>)
   10108:	68b9      	ldr	r1, [r7, #8]
   1010a:	68fb      	ldr	r3, [r7, #12]
   1010c:	0018      	movs	r0, r3
   1010e:	4b0c      	ldr	r3, [pc, #48]	; (10140 <CLI_OTAU+0x80>)
   10110:	4798      	blx	r3
             "Firmware download started. Once complete, device will reset.\r\n");
    WifiHandlerSetState(WIFI_DOWNLOAD_HANDLE);
   10112:	2003      	movs	r0, #3
   10114:	4b08      	ldr	r3, [pc, #32]	; (10138 <CLI_OTAU+0x78>)
   10116:	4798      	blx	r3

    return pdFALSE; 
   10118:	2300      	movs	r3, #0
}
   1011a:	0018      	movs	r0, r3
   1011c:	46bd      	mov	sp, r7
   1011e:	b007      	add	sp, #28
   10120:	bd90      	pop	{r4, r7, pc}
   10122:	46c0      	nop			; (mov r8, r8)
   10124:	00033fbc 	.word	0x00033fbc
   10128:	0002b4a9 	.word	0x0002b4a9
   1012c:	00033fd0 	.word	0x00033fd0
   10130:	0001a691 	.word	0x0001a691
   10134:	00034008 	.word	0x00034008
   10138:	00013659 	.word	0x00013659
   1013c:	00034038 	.word	0x00034038
   10140:	00032b01 	.word	0x00032b01

00010144 <CLI_GoldCommand>:
/**
 * @brief CLI command "gold": Copies the current 0:/application.bin to 0:/g_application.bin
 *        This command helps create a "Golden Image" backup on the SD card.
 */
BaseType_t CLI_GoldCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   10144:	b5b0      	push	{r4, r5, r7, lr}
   10146:	b0da      	sub	sp, #360	; 0x168
   10148:	af00      	add	r7, sp, #0
   1014a:	60f8      	str	r0, [r7, #12]
   1014c:	60b9      	str	r1, [r7, #8]
   1014e:	607a      	str	r2, [r7, #4]
    FRESULT fr;
    UINT br, bw;
    char copyBuffer[256];

    // Attempt to open "0:/application.bin" in read mode.
    fr = f_open(&srcFile, "0:/application.bin", FA_READ);
   10150:	2368      	movs	r3, #104	; 0x68
   10152:	33ff      	adds	r3, #255	; 0xff
   10154:	18fc      	adds	r4, r7, r3
   10156:	495c      	ldr	r1, [pc, #368]	; (102c8 <CLI_GoldCommand+0x184>)
   10158:	23a0      	movs	r3, #160	; 0xa0
   1015a:	005b      	lsls	r3, r3, #1
   1015c:	18fb      	adds	r3, r7, r3
   1015e:	2201      	movs	r2, #1
   10160:	0018      	movs	r0, r3
   10162:	4b5a      	ldr	r3, [pc, #360]	; (102cc <CLI_GoldCommand+0x188>)
   10164:	4798      	blx	r3
   10166:	0003      	movs	r3, r0
   10168:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK) {
   1016a:	2368      	movs	r3, #104	; 0x68
   1016c:	33ff      	adds	r3, #255	; 0xff
   1016e:	18fb      	adds	r3, r7, r3
   10170:	781b      	ldrb	r3, [r3, #0]
   10172:	2b00      	cmp	r3, #0
   10174:	d007      	beq.n	10186 <CLI_GoldCommand+0x42>
        snprintf((char*)pcWriteBuffer, xWriteBufferLen,
   10176:	4a56      	ldr	r2, [pc, #344]	; (102d0 <CLI_GoldCommand+0x18c>)
   10178:	68b9      	ldr	r1, [r7, #8]
   1017a:	68fb      	ldr	r3, [r7, #12]
   1017c:	0018      	movs	r0, r3
   1017e:	4b55      	ldr	r3, [pc, #340]	; (102d4 <CLI_GoldCommand+0x190>)
   10180:	4798      	blx	r3
                 "Error: Could not open application.bin\r\n");
        return pdFALSE;
   10182:	2300      	movs	r3, #0
   10184:	e09b      	b.n	102be <CLI_GoldCommand+0x17a>
    }

    // Delete existing "0:/g_application.bin" if it exists.
    fr = f_unlink("0:/g_application.bin");
   10186:	2368      	movs	r3, #104	; 0x68
   10188:	33ff      	adds	r3, #255	; 0xff
   1018a:	18fc      	adds	r4, r7, r3
   1018c:	4b52      	ldr	r3, [pc, #328]	; (102d8 <CLI_GoldCommand+0x194>)
   1018e:	0018      	movs	r0, r3
   10190:	4b52      	ldr	r3, [pc, #328]	; (102dc <CLI_GoldCommand+0x198>)
   10192:	4798      	blx	r3
   10194:	0003      	movs	r3, r0
   10196:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK && fr != FR_NO_FILE) {
   10198:	2368      	movs	r3, #104	; 0x68
   1019a:	33ff      	adds	r3, #255	; 0xff
   1019c:	18fb      	adds	r3, r7, r3
   1019e:	781b      	ldrb	r3, [r3, #0]
   101a0:	2b00      	cmp	r3, #0
   101a2:	d009      	beq.n	101b8 <CLI_GoldCommand+0x74>
   101a4:	2368      	movs	r3, #104	; 0x68
   101a6:	33ff      	adds	r3, #255	; 0xff
   101a8:	18fb      	adds	r3, r7, r3
   101aa:	781b      	ldrb	r3, [r3, #0]
   101ac:	2b04      	cmp	r3, #4
   101ae:	d003      	beq.n	101b8 <CLI_GoldCommand+0x74>
         SerialConsoleWriteString("Warning: Could not delete previous g_application.bin\r\n");
   101b0:	4b4b      	ldr	r3, [pc, #300]	; (102e0 <CLI_GoldCommand+0x19c>)
   101b2:	0018      	movs	r0, r3
   101b4:	4b4b      	ldr	r3, [pc, #300]	; (102e4 <CLI_GoldCommand+0x1a0>)
   101b6:	4798      	blx	r3
    }

    // Create or overwrite "0:/g_application.bin".
    fr = f_open(&dstFile, "0:/g_application.bin", FA_CREATE_ALWAYS | FA_WRITE);
   101b8:	2368      	movs	r3, #104	; 0x68
   101ba:	33ff      	adds	r3, #255	; 0xff
   101bc:	18fc      	adds	r4, r7, r3
   101be:	4946      	ldr	r1, [pc, #280]	; (102d8 <CLI_GoldCommand+0x194>)
   101c0:	238e      	movs	r3, #142	; 0x8e
   101c2:	005b      	lsls	r3, r3, #1
   101c4:	18fb      	adds	r3, r7, r3
   101c6:	220a      	movs	r2, #10
   101c8:	0018      	movs	r0, r3
   101ca:	4b40      	ldr	r3, [pc, #256]	; (102cc <CLI_GoldCommand+0x188>)
   101cc:	4798      	blx	r3
   101ce:	0003      	movs	r3, r0
   101d0:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK) {
   101d2:	2368      	movs	r3, #104	; 0x68
   101d4:	33ff      	adds	r3, #255	; 0xff
   101d6:	18fb      	adds	r3, r7, r3
   101d8:	781b      	ldrb	r3, [r3, #0]
   101da:	2b00      	cmp	r3, #0
   101dc:	d00d      	beq.n	101fa <CLI_GoldCommand+0xb6>
        f_close(&srcFile);
   101de:	23a0      	movs	r3, #160	; 0xa0
   101e0:	005b      	lsls	r3, r3, #1
   101e2:	18fb      	adds	r3, r7, r3
   101e4:	0018      	movs	r0, r3
   101e6:	4b40      	ldr	r3, [pc, #256]	; (102e8 <CLI_GoldCommand+0x1a4>)
   101e8:	4798      	blx	r3
        snprintf((char*)pcWriteBuffer, xWriteBufferLen,
   101ea:	4a40      	ldr	r2, [pc, #256]	; (102ec <CLI_GoldCommand+0x1a8>)
   101ec:	68b9      	ldr	r1, [r7, #8]
   101ee:	68fb      	ldr	r3, [r7, #12]
   101f0:	0018      	movs	r0, r3
   101f2:	4b38      	ldr	r3, [pc, #224]	; (102d4 <CLI_GoldCommand+0x190>)
   101f4:	4798      	blx	r3
                 "Error: Could not create g_application.bin\r\n");
        return pdFALSE;
   101f6:	2300      	movs	r3, #0
   101f8:	e061      	b.n	102be <CLI_GoldCommand+0x17a>
    }

    // Copy in chunks of 256 bytes.
    for (;;) {
        fr = f_read(&srcFile, copyBuffer, sizeof(copyBuffer), &br);
   101fa:	2368      	movs	r3, #104	; 0x68
   101fc:	33ff      	adds	r3, #255	; 0xff
   101fe:	18fc      	adds	r4, r7, r3
   10200:	238c      	movs	r3, #140	; 0x8c
   10202:	005b      	lsls	r3, r3, #1
   10204:	18fd      	adds	r5, r7, r3
   10206:	2380      	movs	r3, #128	; 0x80
   10208:	005a      	lsls	r2, r3, #1
   1020a:	2314      	movs	r3, #20
   1020c:	18f9      	adds	r1, r7, r3
   1020e:	23a0      	movs	r3, #160	; 0xa0
   10210:	005b      	lsls	r3, r3, #1
   10212:	18f8      	adds	r0, r7, r3
   10214:	002b      	movs	r3, r5
   10216:	4d36      	ldr	r5, [pc, #216]	; (102f0 <CLI_GoldCommand+0x1ac>)
   10218:	47a8      	blx	r5
   1021a:	0003      	movs	r3, r0
   1021c:	7023      	strb	r3, [r4, #0]
        if (fr != FR_OK || br == 0) {
   1021e:	2368      	movs	r3, #104	; 0x68
   10220:	33ff      	adds	r3, #255	; 0xff
   10222:	18fb      	adds	r3, r7, r3
   10224:	781b      	ldrb	r3, [r3, #0]
   10226:	2b00      	cmp	r3, #0
   10228:	d129      	bne.n	1027e <CLI_GoldCommand+0x13a>
   1022a:	238c      	movs	r3, #140	; 0x8c
   1022c:	005b      	lsls	r3, r3, #1
   1022e:	18fb      	adds	r3, r7, r3
   10230:	681b      	ldr	r3, [r3, #0]
   10232:	2b00      	cmp	r3, #0
   10234:	d023      	beq.n	1027e <CLI_GoldCommand+0x13a>
            // Either an error or EOF reached
            break;
        }
        fr = f_write(&dstFile, copyBuffer, br, &bw);
   10236:	238c      	movs	r3, #140	; 0x8c
   10238:	005b      	lsls	r3, r3, #1
   1023a:	18fb      	adds	r3, r7, r3
   1023c:	681a      	ldr	r2, [r3, #0]
   1023e:	2368      	movs	r3, #104	; 0x68
   10240:	33ff      	adds	r3, #255	; 0xff
   10242:	18fc      	adds	r4, r7, r3
   10244:	238a      	movs	r3, #138	; 0x8a
   10246:	005b      	lsls	r3, r3, #1
   10248:	18fb      	adds	r3, r7, r3
   1024a:	2114      	movs	r1, #20
   1024c:	1879      	adds	r1, r7, r1
   1024e:	208e      	movs	r0, #142	; 0x8e
   10250:	0040      	lsls	r0, r0, #1
   10252:	1838      	adds	r0, r7, r0
   10254:	4d27      	ldr	r5, [pc, #156]	; (102f4 <CLI_GoldCommand+0x1b0>)
   10256:	47a8      	blx	r5
   10258:	0003      	movs	r3, r0
   1025a:	7023      	strb	r3, [r4, #0]
        if (fr != FR_OK || bw < br) {
   1025c:	2368      	movs	r3, #104	; 0x68
   1025e:	33ff      	adds	r3, #255	; 0xff
   10260:	18fb      	adds	r3, r7, r3
   10262:	781b      	ldrb	r3, [r3, #0]
   10264:	2b00      	cmp	r3, #0
   10266:	d10a      	bne.n	1027e <CLI_GoldCommand+0x13a>
   10268:	238a      	movs	r3, #138	; 0x8a
   1026a:	005b      	lsls	r3, r3, #1
   1026c:	18fb      	adds	r3, r7, r3
   1026e:	681a      	ldr	r2, [r3, #0]
   10270:	238c      	movs	r3, #140	; 0x8c
   10272:	005b      	lsls	r3, r3, #1
   10274:	18fb      	adds	r3, r7, r3
   10276:	681b      	ldr	r3, [r3, #0]
   10278:	429a      	cmp	r2, r3
   1027a:	d300      	bcc.n	1027e <CLI_GoldCommand+0x13a>
        fr = f_read(&srcFile, copyBuffer, sizeof(copyBuffer), &br);
   1027c:	e7bd      	b.n	101fa <CLI_GoldCommand+0xb6>
            // Error writing to file
            break;
        }
    }
    f_close(&srcFile);
   1027e:	23a0      	movs	r3, #160	; 0xa0
   10280:	005b      	lsls	r3, r3, #1
   10282:	18fb      	adds	r3, r7, r3
   10284:	0018      	movs	r0, r3
   10286:	4b18      	ldr	r3, [pc, #96]	; (102e8 <CLI_GoldCommand+0x1a4>)
   10288:	4798      	blx	r3
    f_close(&dstFile);
   1028a:	238e      	movs	r3, #142	; 0x8e
   1028c:	005b      	lsls	r3, r3, #1
   1028e:	18fb      	adds	r3, r7, r3
   10290:	0018      	movs	r0, r3
   10292:	4b15      	ldr	r3, [pc, #84]	; (102e8 <CLI_GoldCommand+0x1a4>)
   10294:	4798      	blx	r3

    if (fr == FR_OK) {
   10296:	2368      	movs	r3, #104	; 0x68
   10298:	33ff      	adds	r3, #255	; 0xff
   1029a:	18fb      	adds	r3, r7, r3
   1029c:	781b      	ldrb	r3, [r3, #0]
   1029e:	2b00      	cmp	r3, #0
   102a0:	d106      	bne.n	102b0 <CLI_GoldCommand+0x16c>
        snprintf((char*)pcWriteBuffer, xWriteBufferLen,
   102a2:	4a15      	ldr	r2, [pc, #84]	; (102f8 <CLI_GoldCommand+0x1b4>)
   102a4:	68b9      	ldr	r1, [r7, #8]
   102a6:	68fb      	ldr	r3, [r7, #12]
   102a8:	0018      	movs	r0, r3
   102aa:	4b0a      	ldr	r3, [pc, #40]	; (102d4 <CLI_GoldCommand+0x190>)
   102ac:	4798      	blx	r3
   102ae:	e005      	b.n	102bc <CLI_GoldCommand+0x178>
                 "Golden Image Created: g_application.bin\r\n");
    } else {
        snprintf((char*)pcWriteBuffer, xWriteBufferLen,
   102b0:	4a12      	ldr	r2, [pc, #72]	; (102fc <CLI_GoldCommand+0x1b8>)
   102b2:	68b9      	ldr	r1, [r7, #8]
   102b4:	68fb      	ldr	r3, [r7, #12]
   102b6:	0018      	movs	r0, r3
   102b8:	4b06      	ldr	r3, [pc, #24]	; (102d4 <CLI_GoldCommand+0x190>)
   102ba:	4798      	blx	r3
                 "Error copying to g_application.bin\r\n");
    }

    return pdFALSE;
   102bc:	2300      	movs	r3, #0
}
   102be:	0018      	movs	r0, r3
   102c0:	46bd      	mov	sp, r7
   102c2:	b05a      	add	sp, #360	; 0x168
   102c4:	bdb0      	pop	{r4, r5, r7, pc}
   102c6:	46c0      	nop			; (mov r8, r8)
   102c8:	00033fbc 	.word	0x00033fbc
   102cc:	0002a7d1 	.word	0x0002a7d1
   102d0:	00034078 	.word	0x00034078
   102d4:	00032b01 	.word	0x00032b01
   102d8:	000340a0 	.word	0x000340a0
   102dc:	0002b4a9 	.word	0x0002b4a9
   102e0:	000340b8 	.word	0x000340b8
   102e4:	0001a691 	.word	0x0001a691
   102e8:	0002b46d 	.word	0x0002b46d
   102ec:	000340f0 	.word	0x000340f0
   102f0:	0002ad01 	.word	0x0002ad01
   102f4:	0002af9d 	.word	0x0002af9d
   102f8:	0003411c 	.word	0x0003411c
   102fc:	00034148 	.word	0x00034148

00010300 <CLI_ResetDevice>:


// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   10300:	b580      	push	{r7, lr}
   10302:	b084      	sub	sp, #16
   10304:	af00      	add	r7, sp, #0
   10306:	60f8      	str	r0, [r7, #12]
   10308:	60b9      	str	r1, [r7, #8]
   1030a:	607a      	str	r2, [r7, #4]
    WifiPublishResetNotification();
   1030c:	4b04      	ldr	r3, [pc, #16]	; (10320 <CLI_ResetDevice+0x20>)
   1030e:	4798      	blx	r3
    system_reset();
   10310:	4b04      	ldr	r3, [pc, #16]	; (10324 <CLI_ResetDevice+0x24>)
   10312:	4798      	blx	r3
    return pdFALSE;
   10314:	2300      	movs	r3, #0
}
   10316:	0018      	movs	r0, r3
   10318:	46bd      	mov	sp, r7
   1031a:	b004      	add	sp, #16
   1031c:	bd80      	pop	{r7, pc}
   1031e:	46c0      	nop			; (mov r8, r8)
   10320:	000136e1 	.word	0x000136e1
   10324:	0000fcc5 	.word	0x0000fcc5

00010328 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   10328:	b590      	push	{r4, r7, lr}
   1032a:	b08f      	sub	sp, #60	; 0x3c
   1032c:	af00      	add	r7, sp, #0
   1032e:	60f8      	str	r0, [r7, #12]
   10330:	60b9      	str	r1, [r7, #8]
   10332:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
   10334:	2318      	movs	r3, #24
   10336:	18fb      	adds	r3, r7, r3
   10338:	2200      	movs	r2, #0
   1033a:	701a      	strb	r2, [r3, #0]
   1033c:	2318      	movs	r3, #24
   1033e:	18fb      	adds	r3, r7, r3
   10340:	2200      	movs	r2, #0
   10342:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
   10344:	2318      	movs	r3, #24
   10346:	18fb      	adds	r3, r7, r3
   10348:	2200      	movs	r2, #0
   1034a:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
   1034c:	2318      	movs	r3, #24
   1034e:	18fb      	adds	r3, r7, r3
   10350:	2200      	movs	r2, #0
   10352:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
   10354:	231c      	movs	r3, #28
   10356:	18fb      	adds	r3, r7, r3
   10358:	2200      	movs	r2, #0
   1035a:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
   1035c:	231c      	movs	r3, #28
   1035e:	18fb      	adds	r3, r7, r3
   10360:	2214      	movs	r2, #20
   10362:	18ba      	adds	r2, r7, r2
   10364:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
   10366:	231c      	movs	r3, #28
   10368:	18fb      	adds	r3, r7, r3
   1036a:	2201      	movs	r2, #1
   1036c:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
   1036e:	231c      	movs	r3, #28
   10370:	18fb      	adds	r3, r7, r3
   10372:	2218      	movs	r2, #24
   10374:	18ba      	adds	r2, r7, r2
   10376:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
   10378:	231c      	movs	r3, #28
   1037a:	18fb      	adds	r3, r7, r3
   1037c:	2201      	movs	r2, #1
   1037e:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   10380:	4b2c      	ldr	r3, [pc, #176]	; (10434 <CLI_i2cScan+0x10c>)
   10382:	0018      	movs	r0, r3
   10384:	4b2c      	ldr	r3, [pc, #176]	; (10438 <CLI_i2cScan+0x110>)
   10386:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   10388:	2300      	movs	r3, #0
   1038a:	637b      	str	r3, [r7, #52]	; 0x34
   1038c:	e046      	b.n	1041c <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1038e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10390:	4a2a      	ldr	r2, [pc, #168]	; (1043c <CLI_i2cScan+0x114>)
   10392:	482b      	ldr	r0, [pc, #172]	; (10440 <CLI_i2cScan+0x118>)
   10394:	210f      	movs	r1, #15
   10396:	4c2b      	ldr	r4, [pc, #172]	; (10444 <CLI_i2cScan+0x11c>)
   10398:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
   1039a:	4b29      	ldr	r3, [pc, #164]	; (10440 <CLI_i2cScan+0x118>)
   1039c:	0018      	movs	r0, r3
   1039e:	4b26      	ldr	r3, [pc, #152]	; (10438 <CLI_i2cScan+0x110>)
   103a0:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
   103a2:	2300      	movs	r3, #0
   103a4:	633b      	str	r3, [r7, #48]	; 0x30
   103a6:	e02f      	b.n	10408 <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
   103a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   103aa:	b2da      	uxtb	r2, r3
   103ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   103ae:	b2db      	uxtb	r3, r3
   103b0:	18d3      	adds	r3, r2, r3
   103b2:	b2db      	uxtb	r3, r3
   103b4:	18db      	adds	r3, r3, r3
   103b6:	b2da      	uxtb	r2, r3
   103b8:	231c      	movs	r3, #28
   103ba:	18fb      	adds	r3, r7, r3
   103bc:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
   103be:	231c      	movs	r3, #28
   103c0:	18fb      	adds	r3, r7, r3
   103c2:	2164      	movs	r1, #100	; 0x64
   103c4:	0018      	movs	r0, r3
   103c6:	4b20      	ldr	r3, [pc, #128]	; (10448 <CLI_i2cScan+0x120>)
   103c8:	4798      	blx	r3
   103ca:	0003      	movs	r3, r0
   103cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
   103ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   103d0:	2b00      	cmp	r3, #0
   103d2:	d10c      	bne.n	103ee <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
   103d4:	231c      	movs	r3, #28
   103d6:	18fb      	adds	r3, r7, r3
   103d8:	781b      	ldrb	r3, [r3, #0]
   103da:	4a18      	ldr	r2, [pc, #96]	; (1043c <CLI_i2cScan+0x114>)
   103dc:	4818      	ldr	r0, [pc, #96]	; (10440 <CLI_i2cScan+0x118>)
   103de:	210f      	movs	r1, #15
   103e0:	4c18      	ldr	r4, [pc, #96]	; (10444 <CLI_i2cScan+0x11c>)
   103e2:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   103e4:	4b16      	ldr	r3, [pc, #88]	; (10440 <CLI_i2cScan+0x118>)
   103e6:	0018      	movs	r0, r3
   103e8:	4b13      	ldr	r3, [pc, #76]	; (10438 <CLI_i2cScan+0x110>)
   103ea:	4798      	blx	r3
   103ec:	e009      	b.n	10402 <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   103ee:	4b14      	ldr	r3, [pc, #80]	; (10440 <CLI_i2cScan+0x118>)
   103f0:	4a16      	ldr	r2, [pc, #88]	; (1044c <CLI_i2cScan+0x124>)
   103f2:	8811      	ldrh	r1, [r2, #0]
   103f4:	8019      	strh	r1, [r3, #0]
   103f6:	7892      	ldrb	r2, [r2, #2]
   103f8:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
   103fa:	4b11      	ldr	r3, [pc, #68]	; (10440 <CLI_i2cScan+0x118>)
   103fc:	0018      	movs	r0, r3
   103fe:	4b0e      	ldr	r3, [pc, #56]	; (10438 <CLI_i2cScan+0x110>)
   10400:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
   10402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10404:	3301      	adds	r3, #1
   10406:	633b      	str	r3, [r7, #48]	; 0x30
   10408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1040a:	2b0f      	cmp	r3, #15
   1040c:	ddcc      	ble.n	103a8 <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
   1040e:	4b10      	ldr	r3, [pc, #64]	; (10450 <CLI_i2cScan+0x128>)
   10410:	0018      	movs	r0, r3
   10412:	4b09      	ldr	r3, [pc, #36]	; (10438 <CLI_i2cScan+0x110>)
   10414:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   10416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10418:	3310      	adds	r3, #16
   1041a:	637b      	str	r3, [r7, #52]	; 0x34
   1041c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1041e:	2b7f      	cmp	r3, #127	; 0x7f
   10420:	ddb5      	ble.n	1038e <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
   10422:	4b0b      	ldr	r3, [pc, #44]	; (10450 <CLI_i2cScan+0x128>)
   10424:	0018      	movs	r0, r3
   10426:	4b04      	ldr	r3, [pc, #16]	; (10438 <CLI_i2cScan+0x110>)
   10428:	4798      	blx	r3
    return pdFALSE;
   1042a:	2300      	movs	r3, #0
}
   1042c:	0018      	movs	r0, r3
   1042e:	46bd      	mov	sp, r7
   10430:	b00f      	add	sp, #60	; 0x3c
   10432:	bd90      	pop	{r4, r7, pc}
   10434:	00034170 	.word	0x00034170
   10438:	0001a691 	.word	0x0001a691
   1043c:	000341a4 	.word	0x000341a4
   10440:	20000334 	.word	0x20000334
   10444:	00032b01 	.word	0x00032b01
   10448:	00010bd9 	.word	0x00010bd9
   1044c:	000341ac 	.word	0x000341ac
   10450:	00033fa0 	.word	0x00033fa0

00010454 <CLI_VersionCommand>:

BaseType_t CLI_VersionCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   10454:	b590      	push	{r4, r7, lr}
   10456:	b085      	sub	sp, #20
   10458:	af00      	add	r7, sp, #0
   1045a:	60f8      	str	r0, [r7, #12]
   1045c:	60b9      	str	r1, [r7, #8]
   1045e:	607a      	str	r2, [r7, #4]
    snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Firmware version: %s\r\n", FIRMWARE_VERSION);
   10460:	4b05      	ldr	r3, [pc, #20]	; (10478 <CLI_VersionCommand+0x24>)
   10462:	4a06      	ldr	r2, [pc, #24]	; (1047c <CLI_VersionCommand+0x28>)
   10464:	68b9      	ldr	r1, [r7, #8]
   10466:	68f8      	ldr	r0, [r7, #12]
   10468:	4c05      	ldr	r4, [pc, #20]	; (10480 <CLI_VersionCommand+0x2c>)
   1046a:	47a0      	blx	r4
    return pdFALSE;
   1046c:	2300      	movs	r3, #0
}
   1046e:	0018      	movs	r0, r3
   10470:	46bd      	mov	sp, r7
   10472:	b005      	add	sp, #20
   10474:	bd90      	pop	{r4, r7, pc}
   10476:	46c0      	nop			; (mov r8, r8)
   10478:	000341b0 	.word	0x000341b0
   1047c:	000341b8 	.word	0x000341b8
   10480:	00032b01 	.word	0x00032b01

00010484 <CLI_TicksCommand>:

BaseType_t CLI_TicksCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   10484:	b590      	push	{r4, r7, lr}
   10486:	b087      	sub	sp, #28
   10488:	af00      	add	r7, sp, #0
   1048a:	60f8      	str	r0, [r7, #12]
   1048c:	60b9      	str	r1, [r7, #8]
   1048e:	607a      	str	r2, [r7, #4]
    TickType_t ticks = xTaskGetTickCount();
   10490:	4b07      	ldr	r3, [pc, #28]	; (104b0 <CLI_TicksCommand+0x2c>)
   10492:	4798      	blx	r3
   10494:	0003      	movs	r3, r0
   10496:	617b      	str	r3, [r7, #20]
    snprintf((char *)pcWriteBuffer, xWriteBufferLen, "%lu\r\n", (unsigned long)ticks);
   10498:	697b      	ldr	r3, [r7, #20]
   1049a:	4a06      	ldr	r2, [pc, #24]	; (104b4 <CLI_TicksCommand+0x30>)
   1049c:	68b9      	ldr	r1, [r7, #8]
   1049e:	68f8      	ldr	r0, [r7, #12]
   104a0:	4c05      	ldr	r4, [pc, #20]	; (104b8 <CLI_TicksCommand+0x34>)
   104a2:	47a0      	blx	r4
    return pdFALSE;
   104a4:	2300      	movs	r3, #0
}
   104a6:	0018      	movs	r0, r3
   104a8:	46bd      	mov	sp, r7
   104aa:	b007      	add	sp, #28
   104ac:	bd90      	pop	{r4, r7, pc}
   104ae:	46c0      	nop			; (mov r8, r8)
   104b0:	00018e4d 	.word	0x00018e4d
   104b4:	000341d0 	.word	0x000341d0
   104b8:	00032b01 	.word	0x00032b01

000104bc <CLI_TempCommand>:
 * @param[in]     xWriteBufferLen Length of the buffer.
 * @param[in]     pcCommandString User's full command string (unused here).
 * @return pdFALSE, indicating the command does not return more data.
 */
BaseType_t CLI_TempCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   104bc:	b590      	push	{r4, r7, lr}
   104be:	b087      	sub	sp, #28
   104c0:	af00      	add	r7, sp, #0
   104c2:	60f8      	str	r0, [r7, #12]
   104c4:	60b9      	str	r1, [r7, #8]
   104c6:	607a      	str	r2, [r7, #4]
    (void)pcCommandString; // Unused parameter
	
    max31855_spi_disable_and_reset();
   104c8:	4b11      	ldr	r3, [pc, #68]	; (10510 <CLI_TempCommand+0x54>)
   104ca:	4798      	blx	r3
    max31855_spi_reinit();
   104cc:	4b11      	ldr	r3, [pc, #68]	; (10514 <CLI_TempCommand+0x58>)
   104ce:	4798      	blx	r3
	float temp_cli = max31855_read_temp();
   104d0:	4b11      	ldr	r3, [pc, #68]	; (10518 <CLI_TempCommand+0x5c>)
   104d2:	4798      	blx	r3
   104d4:	1c03      	adds	r3, r0, #0
   104d6:	617b      	str	r3, [r7, #20]
	uint16_t temp_int_cli = (uint16_t)(temp_cli + 0.5f);
   104d8:	4b10      	ldr	r3, [pc, #64]	; (1051c <CLI_TempCommand+0x60>)
   104da:	21fc      	movs	r1, #252	; 0xfc
   104dc:	0589      	lsls	r1, r1, #22
   104de:	6978      	ldr	r0, [r7, #20]
   104e0:	4798      	blx	r3
   104e2:	1c03      	adds	r3, r0, #0
   104e4:	1c1a      	adds	r2, r3, #0
   104e6:	2312      	movs	r3, #18
   104e8:	18fc      	adds	r4, r7, r3
   104ea:	4b0d      	ldr	r3, [pc, #52]	; (10520 <CLI_TempCommand+0x64>)
   104ec:	1c10      	adds	r0, r2, #0
   104ee:	4798      	blx	r3
   104f0:	0003      	movs	r3, r0
   104f2:	8023      	strh	r3, [r4, #0]

    /* Print the most recent temperature reading */
    snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Current Temperature: %d C\r\n", temp_int_cli);
   104f4:	2312      	movs	r3, #18
   104f6:	18fb      	adds	r3, r7, r3
   104f8:	881b      	ldrh	r3, [r3, #0]
   104fa:	4a0a      	ldr	r2, [pc, #40]	; (10524 <CLI_TempCommand+0x68>)
   104fc:	68b9      	ldr	r1, [r7, #8]
   104fe:	68f8      	ldr	r0, [r7, #12]
   10500:	4c09      	ldr	r4, [pc, #36]	; (10528 <CLI_TempCommand+0x6c>)
   10502:	47a0      	blx	r4
    return pdFALSE; // No more strings to return
   10504:	2300      	movs	r3, #0
}
   10506:	0018      	movs	r0, r3
   10508:	46bd      	mov	sp, r7
   1050a:	b007      	add	sp, #28
   1050c:	bd90      	pop	{r4, r7, pc}
   1050e:	46c0      	nop			; (mov r8, r8)
   10510:	00011305 	.word	0x00011305
   10514:	0001132d 	.word	0x0001132d
   10518:	000114b5 	.word	0x000114b5
   1051c:	000301d1 	.word	0x000301d1
   10520:	000301a1 	.word	0x000301a1
   10524:	000341d8 	.word	0x000341d8
   10528:	00032b01 	.word	0x00032b01

0001052c <CLI_LightCommand>:
 * @param[in]     pcCommandString Full input command string (unused).
 *
 * @return pdFALSE (no additional output expected).
 ******************************************************************************/
BaseType_t CLI_LightCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1052c:	b590      	push	{r4, r7, lr}
   1052e:	b087      	sub	sp, #28
   10530:	af00      	add	r7, sp, #0
   10532:	60f8      	str	r0, [r7, #12]
   10534:	60b9      	str	r1, [r7, #8]
   10536:	607a      	str	r2, [r7, #4]
    (void)pcCommandString;

    float lux = veml7700_read_lux();
   10538:	4b0f      	ldr	r3, [pc, #60]	; (10578 <CLI_LightCommand+0x4c>)
   1053a:	4798      	blx	r3
   1053c:	1c03      	adds	r3, r0, #0
   1053e:	617b      	str	r3, [r7, #20]
    uint16_t lux_int = (uint16_t)(lux + 0.5f);
   10540:	4b0e      	ldr	r3, [pc, #56]	; (1057c <CLI_LightCommand+0x50>)
   10542:	21fc      	movs	r1, #252	; 0xfc
   10544:	0589      	lsls	r1, r1, #22
   10546:	6978      	ldr	r0, [r7, #20]
   10548:	4798      	blx	r3
   1054a:	1c03      	adds	r3, r0, #0
   1054c:	1c1a      	adds	r2, r3, #0
   1054e:	2312      	movs	r3, #18
   10550:	18fc      	adds	r4, r7, r3
   10552:	4b0b      	ldr	r3, [pc, #44]	; (10580 <CLI_LightCommand+0x54>)
   10554:	1c10      	adds	r0, r2, #0
   10556:	4798      	blx	r3
   10558:	0003      	movs	r3, r0
   1055a:	8023      	strh	r3, [r4, #0]

    snprintf((char *)pcWriteBuffer, xWriteBufferLen,
   1055c:	2312      	movs	r3, #18
   1055e:	18fb      	adds	r3, r7, r3
   10560:	881b      	ldrh	r3, [r3, #0]
   10562:	4a08      	ldr	r2, [pc, #32]	; (10584 <CLI_LightCommand+0x58>)
   10564:	68b9      	ldr	r1, [r7, #8]
   10566:	68f8      	ldr	r0, [r7, #12]
   10568:	4c07      	ldr	r4, [pc, #28]	; (10588 <CLI_LightCommand+0x5c>)
   1056a:	47a0      	blx	r4
             "Light Intensity: %d Lux\r\n", lux_int);
    return pdFALSE;
   1056c:	2300      	movs	r3, #0
}
   1056e:	0018      	movs	r0, r3
   10570:	46bd      	mov	sp, r7
   10572:	b007      	add	sp, #28
   10574:	bd90      	pop	{r4, r7, pc}
   10576:	46c0      	nop			; (mov r8, r8)
   10578:	00011855 	.word	0x00011855
   1057c:	000301d1 	.word	0x000301d1
   10580:	000301a1 	.word	0x000301a1
   10584:	000341f4 	.word	0x000341f4
   10588:	00032b01 	.word	0x00032b01

0001058c <CLI_LedOffCommand>:
 * @param[in]     pcCommandString Full input command string (unused).
 *
 * @return pdFALSE (no additional output expected).
 ******************************************************************************/
BaseType_t CLI_LedOffCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1058c:	b580      	push	{r7, lr}
   1058e:	b084      	sub	sp, #16
   10590:	af00      	add	r7, sp, #0
   10592:	60f8      	str	r0, [r7, #12]
   10594:	60b9      	str	r1, [r7, #8]
   10596:	607a      	str	r2, [r7, #4]
    (void)pcCommandString;

    esp_i2c_set_color_flag(ESP_COLOR_OFF);
   10598:	2000      	movs	r0, #0
   1059a:	4b06      	ldr	r3, [pc, #24]	; (105b4 <CLI_LedOffCommand+0x28>)
   1059c:	4798      	blx	r3

    snprintf((char *)pcWriteBuffer, xWriteBufferLen,
   1059e:	4a06      	ldr	r2, [pc, #24]	; (105b8 <CLI_LedOffCommand+0x2c>)
   105a0:	68b9      	ldr	r1, [r7, #8]
   105a2:	68fb      	ldr	r3, [r7, #12]
   105a4:	0018      	movs	r0, r3
   105a6:	4b05      	ldr	r3, [pc, #20]	; (105bc <CLI_LedOffCommand+0x30>)
   105a8:	4798      	blx	r3
             "LED set to OFF\r\n");
    return pdFALSE;
   105aa:	2300      	movs	r3, #0
}
   105ac:	0018      	movs	r0, r3
   105ae:	46bd      	mov	sp, r7
   105b0:	b004      	add	sp, #16
   105b2:	bd80      	pop	{r7, pc}
   105b4:	00010edd 	.word	0x00010edd
   105b8:	00034210 	.word	0x00034210
   105bc:	00032b01 	.word	0x00032b01

000105c0 <CLI_LedBlueCommand>:
 * @param[in]     pcCommandString Full input command string (unused).
 *
 * @return pdFALSE (no additional output expected).
 ******************************************************************************/
BaseType_t CLI_LedBlueCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   105c0:	b580      	push	{r7, lr}
   105c2:	b084      	sub	sp, #16
   105c4:	af00      	add	r7, sp, #0
   105c6:	60f8      	str	r0, [r7, #12]
   105c8:	60b9      	str	r1, [r7, #8]
   105ca:	607a      	str	r2, [r7, #4]
    (void)pcCommandString;

    esp_i2c_set_color_flag(ESP_COLOR_BLUE);
   105cc:	2003      	movs	r0, #3
   105ce:	4b06      	ldr	r3, [pc, #24]	; (105e8 <CLI_LedBlueCommand+0x28>)
   105d0:	4798      	blx	r3

    snprintf((char *)pcWriteBuffer, xWriteBufferLen,
   105d2:	4a06      	ldr	r2, [pc, #24]	; (105ec <CLI_LedBlueCommand+0x2c>)
   105d4:	68b9      	ldr	r1, [r7, #8]
   105d6:	68fb      	ldr	r3, [r7, #12]
   105d8:	0018      	movs	r0, r3
   105da:	4b05      	ldr	r3, [pc, #20]	; (105f0 <CLI_LedBlueCommand+0x30>)
   105dc:	4798      	blx	r3
             "LED set to BLUE\r\n");
    return pdFALSE;
   105de:	2300      	movs	r3, #0
}
   105e0:	0018      	movs	r0, r3
   105e2:	46bd      	mov	sp, r7
   105e4:	b004      	add	sp, #16
   105e6:	bd80      	pop	{r7, pc}
   105e8:	00010edd 	.word	0x00010edd
   105ec:	00034224 	.word	0x00034224
   105f0:	00032b01 	.word	0x00032b01

000105f4 <CLI_LedRedCommand>:
 * @param[in]     pcCommandString Full input command string (unused).
 *
 * @return pdFALSE (no additional output expected).
 ******************************************************************************/
BaseType_t CLI_LedRedCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   105f4:	b580      	push	{r7, lr}
   105f6:	b084      	sub	sp, #16
   105f8:	af00      	add	r7, sp, #0
   105fa:	60f8      	str	r0, [r7, #12]
   105fc:	60b9      	str	r1, [r7, #8]
   105fe:	607a      	str	r2, [r7, #4]
    (void)pcCommandString;

    esp_i2c_set_color_flag(ESP_COLOR_RED);
   10600:	2001      	movs	r0, #1
   10602:	4b06      	ldr	r3, [pc, #24]	; (1061c <CLI_LedRedCommand+0x28>)
   10604:	4798      	blx	r3

    snprintf((char *)pcWriteBuffer, xWriteBufferLen,
   10606:	4a06      	ldr	r2, [pc, #24]	; (10620 <CLI_LedRedCommand+0x2c>)
   10608:	68b9      	ldr	r1, [r7, #8]
   1060a:	68fb      	ldr	r3, [r7, #12]
   1060c:	0018      	movs	r0, r3
   1060e:	4b05      	ldr	r3, [pc, #20]	; (10624 <CLI_LedRedCommand+0x30>)
   10610:	4798      	blx	r3
             "LED set to RED\r\n");
    return pdFALSE;
   10612:	2300      	movs	r3, #0
}
   10614:	0018      	movs	r0, r3
   10616:	46bd      	mov	sp, r7
   10618:	b004      	add	sp, #16
   1061a:	bd80      	pop	{r7, pc}
   1061c:	00010edd 	.word	0x00010edd
   10620:	00034238 	.word	0x00034238
   10624:	00032b01 	.word	0x00032b01

00010628 <CLI_LedGreenCommand>:
 * @param[in]     pcCommandString Full input command string (unused).
 *
 * @return pdFALSE (no additional output expected).
 ******************************************************************************/
BaseType_t CLI_LedGreenCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   10628:	b580      	push	{r7, lr}
   1062a:	b084      	sub	sp, #16
   1062c:	af00      	add	r7, sp, #0
   1062e:	60f8      	str	r0, [r7, #12]
   10630:	60b9      	str	r1, [r7, #8]
   10632:	607a      	str	r2, [r7, #4]
    (void)pcCommandString;

    esp_i2c_set_color_flag(ESP_COLOR_GREEN);
   10634:	2002      	movs	r0, #2
   10636:	4b06      	ldr	r3, [pc, #24]	; (10650 <CLI_LedGreenCommand+0x28>)
   10638:	4798      	blx	r3

    snprintf((char *)pcWriteBuffer, xWriteBufferLen,
   1063a:	4a06      	ldr	r2, [pc, #24]	; (10654 <CLI_LedGreenCommand+0x2c>)
   1063c:	68b9      	ldr	r1, [r7, #8]
   1063e:	68fb      	ldr	r3, [r7, #12]
   10640:	0018      	movs	r0, r3
   10642:	4b05      	ldr	r3, [pc, #20]	; (10658 <CLI_LedGreenCommand+0x30>)
   10644:	4798      	blx	r3
             "LED set to GREEN\r\n");
    return pdFALSE;
   10646:	2300      	movs	r3, #0
}
   10648:	0018      	movs	r0, r3
   1064a:	46bd      	mov	sp, r7
   1064c:	b004      	add	sp, #16
   1064e:	bd80      	pop	{r7, pc}
   10650:	00010edd 	.word	0x00010edd
   10654:	0003424c 	.word	0x0003424c
   10658:	00032b01 	.word	0x00032b01

0001065c <system_interrupt_enable>:
{
   1065c:	b580      	push	{r7, lr}
   1065e:	b082      	sub	sp, #8
   10660:	af00      	add	r7, sp, #0
   10662:	0002      	movs	r2, r0
   10664:	1dfb      	adds	r3, r7, #7
   10666:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   10668:	4b06      	ldr	r3, [pc, #24]	; (10684 <system_interrupt_enable+0x28>)
   1066a:	1dfa      	adds	r2, r7, #7
   1066c:	7812      	ldrb	r2, [r2, #0]
   1066e:	0011      	movs	r1, r2
   10670:	221f      	movs	r2, #31
   10672:	400a      	ands	r2, r1
   10674:	2101      	movs	r1, #1
   10676:	4091      	lsls	r1, r2
   10678:	000a      	movs	r2, r1
   1067a:	601a      	str	r2, [r3, #0]
}
   1067c:	46c0      	nop			; (mov r8, r8)
   1067e:	46bd      	mov	sp, r7
   10680:	b002      	add	sp, #8
   10682:	bd80      	pop	{r7, pc}
   10684:	e000e100 	.word	0xe000e100

00010688 <i2c_master_is_syncing>:
{
   10688:	b580      	push	{r7, lr}
   1068a:	b084      	sub	sp, #16
   1068c:	af00      	add	r7, sp, #0
   1068e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   10690:	687b      	ldr	r3, [r7, #4]
   10692:	681b      	ldr	r3, [r3, #0]
   10694:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   10696:	68fb      	ldr	r3, [r7, #12]
   10698:	69db      	ldr	r3, [r3, #28]
   1069a:	2207      	movs	r2, #7
   1069c:	4013      	ands	r3, r2
   1069e:	1e5a      	subs	r2, r3, #1
   106a0:	4193      	sbcs	r3, r2
   106a2:	b2db      	uxtb	r3, r3
}
   106a4:	0018      	movs	r0, r3
   106a6:	46bd      	mov	sp, r7
   106a8:	b004      	add	sp, #16
   106aa:	bd80      	pop	{r7, pc}

000106ac <_i2c_master_wait_for_sync>:
{
   106ac:	b580      	push	{r7, lr}
   106ae:	b082      	sub	sp, #8
   106b0:	af00      	add	r7, sp, #0
   106b2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   106b4:	46c0      	nop			; (mov r8, r8)
   106b6:	687b      	ldr	r3, [r7, #4]
   106b8:	0018      	movs	r0, r3
   106ba:	4b04      	ldr	r3, [pc, #16]	; (106cc <_i2c_master_wait_for_sync+0x20>)
   106bc:	4798      	blx	r3
   106be:	1e03      	subs	r3, r0, #0
   106c0:	d1f9      	bne.n	106b6 <_i2c_master_wait_for_sync+0xa>
}
   106c2:	46c0      	nop			; (mov r8, r8)
   106c4:	46bd      	mov	sp, r7
   106c6:	b002      	add	sp, #8
   106c8:	bd80      	pop	{r7, pc}
   106ca:	46c0      	nop			; (mov r8, r8)
   106cc:	00010689 	.word	0x00010689

000106d0 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   106d0:	b580      	push	{r7, lr}
   106d2:	b082      	sub	sp, #8
   106d4:	af00      	add	r7, sp, #0
   106d6:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   106d8:	687b      	ldr	r3, [r7, #4]
   106da:	2264      	movs	r2, #100	; 0x64
   106dc:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   106de:	687b      	ldr	r3, [r7, #4]
   106e0:	4a1b      	ldr	r2, [pc, #108]	; (10750 <i2c_master_get_config_defaults+0x80>)
   106e2:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   106e4:	687b      	ldr	r3, [r7, #4]
   106e6:	2200      	movs	r2, #0
   106e8:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   106ea:	687b      	ldr	r3, [r7, #4]
   106ec:	2200      	movs	r2, #0
   106ee:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   106f0:	687b      	ldr	r3, [r7, #4]
   106f2:	2200      	movs	r2, #0
   106f4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   106f6:	687b      	ldr	r3, [r7, #4]
   106f8:	2280      	movs	r2, #128	; 0x80
   106fa:	0392      	lsls	r2, r2, #14
   106fc:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   106fe:	687b      	ldr	r3, [r7, #4]
   10700:	2201      	movs	r2, #1
   10702:	4252      	negs	r2, r2
   10704:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   10706:	687b      	ldr	r3, [r7, #4]
   10708:	2201      	movs	r2, #1
   1070a:	4252      	negs	r2, r2
   1070c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1070e:	687b      	ldr	r3, [r7, #4]
   10710:	2200      	movs	r2, #0
   10712:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   10714:	687b      	ldr	r3, [r7, #4]
   10716:	2200      	movs	r2, #0
   10718:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1071a:	687b      	ldr	r3, [r7, #4]
   1071c:	2224      	movs	r2, #36	; 0x24
   1071e:	2100      	movs	r1, #0
   10720:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   10722:	687b      	ldr	r3, [r7, #4]
   10724:	2200      	movs	r2, #0
   10726:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   10728:	687b      	ldr	r3, [r7, #4]
   1072a:	222c      	movs	r2, #44	; 0x2c
   1072c:	2100      	movs	r1, #0
   1072e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   10730:	687b      	ldr	r3, [r7, #4]
   10732:	222d      	movs	r2, #45	; 0x2d
   10734:	2100      	movs	r1, #0
   10736:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   10738:	687b      	ldr	r3, [r7, #4]
   1073a:	222e      	movs	r2, #46	; 0x2e
   1073c:	2100      	movs	r1, #0
   1073e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   10740:	687b      	ldr	r3, [r7, #4]
   10742:	22d7      	movs	r2, #215	; 0xd7
   10744:	861a      	strh	r2, [r3, #48]	; 0x30
}
   10746:	46c0      	nop			; (mov r8, r8)
   10748:	46bd      	mov	sp, r7
   1074a:	b002      	add	sp, #8
   1074c:	bd80      	pop	{r7, pc}
   1074e:	46c0      	nop			; (mov r8, r8)
   10750:	00000d48 	.word	0x00000d48

00010754 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   10754:	b580      	push	{r7, lr}
   10756:	b084      	sub	sp, #16
   10758:	af00      	add	r7, sp, #0
   1075a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1075c:	687b      	ldr	r3, [r7, #4]
   1075e:	681b      	ldr	r3, [r3, #0]
   10760:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   10762:	2300      	movs	r3, #0
   10764:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   10766:	687b      	ldr	r3, [r7, #4]
   10768:	0018      	movs	r0, r3
   1076a:	4b14      	ldr	r3, [pc, #80]	; (107bc <i2c_master_enable+0x68>)
   1076c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1076e:	68bb      	ldr	r3, [r7, #8]
   10770:	681b      	ldr	r3, [r3, #0]
   10772:	2202      	movs	r2, #2
   10774:	431a      	orrs	r2, r3
   10776:	68bb      	ldr	r3, [r7, #8]
   10778:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1077a:	687b      	ldr	r3, [r7, #4]
   1077c:	681b      	ldr	r3, [r3, #0]
   1077e:	0018      	movs	r0, r3
   10780:	4b0f      	ldr	r3, [pc, #60]	; (107c0 <i2c_master_enable+0x6c>)
   10782:	4798      	blx	r3
   10784:	0003      	movs	r3, r0
   10786:	0018      	movs	r0, r3
   10788:	4b0e      	ldr	r3, [pc, #56]	; (107c4 <i2c_master_enable+0x70>)
   1078a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1078c:	e00c      	b.n	107a8 <i2c_master_enable+0x54>
		timeout_counter++;
   1078e:	68fb      	ldr	r3, [r7, #12]
   10790:	3301      	adds	r3, #1
   10792:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   10794:	687b      	ldr	r3, [r7, #4]
   10796:	88db      	ldrh	r3, [r3, #6]
   10798:	001a      	movs	r2, r3
   1079a:	68fb      	ldr	r3, [r7, #12]
   1079c:	429a      	cmp	r2, r3
   1079e:	d803      	bhi.n	107a8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   107a0:	68bb      	ldr	r3, [r7, #8]
   107a2:	2210      	movs	r2, #16
   107a4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   107a6:	e006      	b.n	107b6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   107a8:	68bb      	ldr	r3, [r7, #8]
   107aa:	8b5b      	ldrh	r3, [r3, #26]
   107ac:	b29b      	uxth	r3, r3
   107ae:	001a      	movs	r2, r3
   107b0:	2310      	movs	r3, #16
   107b2:	4013      	ands	r3, r2
   107b4:	d0eb      	beq.n	1078e <i2c_master_enable+0x3a>
		}
	}
}
   107b6:	46bd      	mov	sp, r7
   107b8:	b004      	add	sp, #16
   107ba:	bd80      	pop	{r7, pc}
   107bc:	000106ad 	.word	0x000106ad
   107c0:	00023fcd 	.word	0x00023fcd
   107c4:	0001065d 	.word	0x0001065d

000107c8 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   107c8:	b580      	push	{r7, lr}
   107ca:	b082      	sub	sp, #8
   107cc:	af00      	add	r7, sp, #0
   107ce:	6078      	str	r0, [r7, #4]
   107d0:	000a      	movs	r2, r1
   107d2:	1cfb      	adds	r3, r7, #3
   107d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   107d6:	687b      	ldr	r3, [r7, #4]
   107d8:	7e5b      	ldrb	r3, [r3, #25]
   107da:	b2db      	uxtb	r3, r3
   107dc:	b25a      	sxtb	r2, r3
   107de:	1cfb      	adds	r3, r7, #3
   107e0:	781b      	ldrb	r3, [r3, #0]
   107e2:	2101      	movs	r1, #1
   107e4:	4099      	lsls	r1, r3
   107e6:	000b      	movs	r3, r1
   107e8:	b25b      	sxtb	r3, r3
   107ea:	4313      	orrs	r3, r2
   107ec:	b25b      	sxtb	r3, r3
   107ee:	b2da      	uxtb	r2, r3
   107f0:	687b      	ldr	r3, [r7, #4]
   107f2:	765a      	strb	r2, [r3, #25]
}
   107f4:	46c0      	nop			; (mov r8, r8)
   107f6:	46bd      	mov	sp, r7
   107f8:	b002      	add	sp, #8
   107fa:	bd80      	pop	{r7, pc}

000107fc <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   107fc:	b590      	push	{r4, r7, lr}
   107fe:	b091      	sub	sp, #68	; 0x44
   10800:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   10802:	2300      	movs	r3, #0
   10804:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   10806:	233a      	movs	r3, #58	; 0x3a
   10808:	18fb      	adds	r3, r7, r3
   1080a:	2200      	movs	r2, #0
   1080c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1080e:	1d3b      	adds	r3, r7, #4
   10810:	0018      	movs	r0, r3
   10812:	4b21      	ldr	r3, [pc, #132]	; (10898 <I2cDriverConfigureSensorBus+0x9c>)
   10814:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   10816:	1d3b      	adds	r3, r7, #4
   10818:	4a20      	ldr	r2, [pc, #128]	; (1089c <I2cDriverConfigureSensorBus+0xa0>)
   1081a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   1081c:	1d3b      	adds	r3, r7, #4
   1081e:	4a20      	ldr	r2, [pc, #128]	; (108a0 <I2cDriverConfigureSensorBus+0xa4>)
   10820:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   10822:	1d3b      	adds	r3, r7, #4
   10824:	22fa      	movs	r2, #250	; 0xfa
   10826:	0092      	lsls	r2, r2, #2
   10828:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1082a:	233b      	movs	r3, #59	; 0x3b
   1082c:	18fb      	adds	r3, r7, r3
   1082e:	2203      	movs	r2, #3
   10830:	701a      	strb	r2, [r3, #0]
   10832:	e01e      	b.n	10872 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   10834:	233a      	movs	r3, #58	; 0x3a
   10836:	18fc      	adds	r4, r7, r3
   10838:	1d3a      	adds	r2, r7, #4
   1083a:	491a      	ldr	r1, [pc, #104]	; (108a4 <I2cDriverConfigureSensorBus+0xa8>)
   1083c:	4b1a      	ldr	r3, [pc, #104]	; (108a8 <I2cDriverConfigureSensorBus+0xac>)
   1083e:	0018      	movs	r0, r3
   10840:	4b1a      	ldr	r3, [pc, #104]	; (108ac <I2cDriverConfigureSensorBus+0xb0>)
   10842:	4798      	blx	r3
   10844:	0003      	movs	r3, r0
   10846:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   10848:	233a      	movs	r3, #58	; 0x3a
   1084a:	18fb      	adds	r3, r7, r3
   1084c:	781b      	ldrb	r3, [r3, #0]
   1084e:	2b00      	cmp	r3, #0
   10850:	d104      	bne.n	1085c <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   10852:	233a      	movs	r3, #58	; 0x3a
   10854:	18fb      	adds	r3, r7, r3
   10856:	781b      	ldrb	r3, [r3, #0]
   10858:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   1085a:	e00f      	b.n	1087c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   1085c:	4b12      	ldr	r3, [pc, #72]	; (108a8 <I2cDriverConfigureSensorBus+0xac>)
   1085e:	0018      	movs	r0, r3
   10860:	4b13      	ldr	r3, [pc, #76]	; (108b0 <I2cDriverConfigureSensorBus+0xb4>)
   10862:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   10864:	233b      	movs	r3, #59	; 0x3b
   10866:	18fb      	adds	r3, r7, r3
   10868:	781a      	ldrb	r2, [r3, #0]
   1086a:	233b      	movs	r3, #59	; 0x3b
   1086c:	18fb      	adds	r3, r7, r3
   1086e:	3a01      	subs	r2, #1
   10870:	701a      	strb	r2, [r3, #0]
   10872:	233b      	movs	r3, #59	; 0x3b
   10874:	18fb      	adds	r3, r7, r3
   10876:	781b      	ldrb	r3, [r3, #0]
   10878:	2b00      	cmp	r3, #0
   1087a:	d1db      	bne.n	10834 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   1087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1087e:	2b00      	cmp	r3, #0
   10880:	d104      	bne.n	1088c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   10882:	4b09      	ldr	r3, [pc, #36]	; (108a8 <I2cDriverConfigureSensorBus+0xac>)
   10884:	0018      	movs	r0, r3
   10886:	4b0b      	ldr	r3, [pc, #44]	; (108b4 <I2cDriverConfigureSensorBus+0xb8>)
   10888:	4798      	blx	r3
   1088a:	e000      	b.n	1088e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   1088c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1088e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   10890:	0018      	movs	r0, r3
   10892:	46bd      	mov	sp, r7
   10894:	b011      	add	sp, #68	; 0x44
   10896:	bd90      	pop	{r4, r7, pc}
   10898:	000106d1 	.word	0x000106d1
   1089c:	00080002 	.word	0x00080002
   108a0:	00090002 	.word	0x00090002
   108a4:	42000800 	.word	0x42000800
   108a8:	20004328 	.word	0x20004328
   108ac:	00013f21 	.word	0x00013f21
   108b0:	00014055 	.word	0x00014055
   108b4:	00010755 	.word	0x00010755

000108b8 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   108b8:	b580      	push	{r7, lr}
   108ba:	b084      	sub	sp, #16
   108bc:	af00      	add	r7, sp, #0
   108be:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   108c0:	4b0e      	ldr	r3, [pc, #56]	; (108fc <I2cSensorsTxComplete+0x44>)
   108c2:	2200      	movs	r2, #0
   108c4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   108c6:	4b0d      	ldr	r3, [pc, #52]	; (108fc <I2cSensorsTxComplete+0x44>)
   108c8:	2201      	movs	r2, #1
   108ca:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   108cc:	2300      	movs	r3, #0
   108ce:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   108d0:	4b0b      	ldr	r3, [pc, #44]	; (10900 <I2cSensorsTxComplete+0x48>)
   108d2:	681b      	ldr	r3, [r3, #0]
   108d4:	220c      	movs	r2, #12
   108d6:	18ba      	adds	r2, r7, r2
   108d8:	0011      	movs	r1, r2
   108da:	0018      	movs	r0, r3
   108dc:	4b09      	ldr	r3, [pc, #36]	; (10904 <I2cSensorsTxComplete+0x4c>)
   108de:	4798      	blx	r3
    sensorTransmitError = false;
   108e0:	4b09      	ldr	r3, [pc, #36]	; (10908 <I2cSensorsTxComplete+0x50>)
   108e2:	2200      	movs	r2, #0
   108e4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   108e6:	68fb      	ldr	r3, [r7, #12]
   108e8:	2b00      	cmp	r3, #0
   108ea:	d003      	beq.n	108f4 <I2cSensorsTxComplete+0x3c>
   108ec:	4b07      	ldr	r3, [pc, #28]	; (1090c <I2cSensorsTxComplete+0x54>)
   108ee:	2280      	movs	r2, #128	; 0x80
   108f0:	0552      	lsls	r2, r2, #21
   108f2:	601a      	str	r2, [r3, #0]
}
   108f4:	46c0      	nop			; (mov r8, r8)
   108f6:	46bd      	mov	sp, r7
   108f8:	b004      	add	sp, #16
   108fa:	bd80      	pop	{r7, pc}
   108fc:	2000041c 	.word	0x2000041c
   10900:	20004350 	.word	0x20004350
   10904:	00017629 	.word	0x00017629
   10908:	20000418 	.word	0x20000418
   1090c:	e000ed04 	.word	0xe000ed04

00010910 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   10910:	b580      	push	{r7, lr}
   10912:	b084      	sub	sp, #16
   10914:	af00      	add	r7, sp, #0
   10916:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   10918:	4b0e      	ldr	r3, [pc, #56]	; (10954 <I2cSensorsRxComplete+0x44>)
   1091a:	2200      	movs	r2, #0
   1091c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1091e:	4b0d      	ldr	r3, [pc, #52]	; (10954 <I2cSensorsRxComplete+0x44>)
   10920:	2201      	movs	r2, #1
   10922:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   10924:	2300      	movs	r3, #0
   10926:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   10928:	4b0b      	ldr	r3, [pc, #44]	; (10958 <I2cSensorsRxComplete+0x48>)
   1092a:	681b      	ldr	r3, [r3, #0]
   1092c:	220c      	movs	r2, #12
   1092e:	18ba      	adds	r2, r7, r2
   10930:	0011      	movs	r1, r2
   10932:	0018      	movs	r0, r3
   10934:	4b09      	ldr	r3, [pc, #36]	; (1095c <I2cSensorsRxComplete+0x4c>)
   10936:	4798      	blx	r3
    sensorTransmitError = false;
   10938:	4b09      	ldr	r3, [pc, #36]	; (10960 <I2cSensorsRxComplete+0x50>)
   1093a:	2200      	movs	r2, #0
   1093c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1093e:	68fb      	ldr	r3, [r7, #12]
   10940:	2b00      	cmp	r3, #0
   10942:	d003      	beq.n	1094c <I2cSensorsRxComplete+0x3c>
   10944:	4b07      	ldr	r3, [pc, #28]	; (10964 <I2cSensorsRxComplete+0x54>)
   10946:	2280      	movs	r2, #128	; 0x80
   10948:	0552      	lsls	r2, r2, #21
   1094a:	601a      	str	r2, [r3, #0]
}
   1094c:	46c0      	nop			; (mov r8, r8)
   1094e:	46bd      	mov	sp, r7
   10950:	b004      	add	sp, #16
   10952:	bd80      	pop	{r7, pc}
   10954:	2000041c 	.word	0x2000041c
   10958:	20004350 	.word	0x20004350
   1095c:	00017629 	.word	0x00017629
   10960:	20000418 	.word	0x20000418
   10964:	e000ed04 	.word	0xe000ed04

00010968 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   10968:	b580      	push	{r7, lr}
   1096a:	b084      	sub	sp, #16
   1096c:	af00      	add	r7, sp, #0
   1096e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   10970:	4b0e      	ldr	r3, [pc, #56]	; (109ac <I2cSensorsError+0x44>)
   10972:	2200      	movs	r2, #0
   10974:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   10976:	4b0d      	ldr	r3, [pc, #52]	; (109ac <I2cSensorsError+0x44>)
   10978:	2201      	movs	r2, #1
   1097a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1097c:	2300      	movs	r3, #0
   1097e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   10980:	4b0b      	ldr	r3, [pc, #44]	; (109b0 <I2cSensorsError+0x48>)
   10982:	681b      	ldr	r3, [r3, #0]
   10984:	220c      	movs	r2, #12
   10986:	18ba      	adds	r2, r7, r2
   10988:	0011      	movs	r1, r2
   1098a:	0018      	movs	r0, r3
   1098c:	4b09      	ldr	r3, [pc, #36]	; (109b4 <I2cSensorsError+0x4c>)
   1098e:	4798      	blx	r3
    sensorTransmitError = true;
   10990:	4b09      	ldr	r3, [pc, #36]	; (109b8 <I2cSensorsError+0x50>)
   10992:	2201      	movs	r2, #1
   10994:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   10996:	68fb      	ldr	r3, [r7, #12]
   10998:	2b00      	cmp	r3, #0
   1099a:	d003      	beq.n	109a4 <I2cSensorsError+0x3c>
   1099c:	4b07      	ldr	r3, [pc, #28]	; (109bc <I2cSensorsError+0x54>)
   1099e:	2280      	movs	r2, #128	; 0x80
   109a0:	0552      	lsls	r2, r2, #21
   109a2:	601a      	str	r2, [r3, #0]
}
   109a4:	46c0      	nop			; (mov r8, r8)
   109a6:	46bd      	mov	sp, r7
   109a8:	b004      	add	sp, #16
   109aa:	bd80      	pop	{r7, pc}
   109ac:	2000041c 	.word	0x2000041c
   109b0:	20004350 	.word	0x20004350
   109b4:	00017629 	.word	0x00017629
   109b8:	20000418 	.word	0x20000418
   109bc:	e000ed04 	.word	0xe000ed04

000109c0 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   109c0:	b580      	push	{r7, lr}
   109c2:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   109c4:	4911      	ldr	r1, [pc, #68]	; (10a0c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   109c6:	4b12      	ldr	r3, [pc, #72]	; (10a10 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   109c8:	2200      	movs	r2, #0
   109ca:	0018      	movs	r0, r3
   109cc:	4b11      	ldr	r3, [pc, #68]	; (10a14 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   109ce:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   109d0:	4b0f      	ldr	r3, [pc, #60]	; (10a10 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   109d2:	2100      	movs	r1, #0
   109d4:	0018      	movs	r0, r3
   109d6:	4b10      	ldr	r3, [pc, #64]	; (10a18 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   109d8:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   109da:	4910      	ldr	r1, [pc, #64]	; (10a1c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   109dc:	4b0c      	ldr	r3, [pc, #48]	; (10a10 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   109de:	2201      	movs	r2, #1
   109e0:	0018      	movs	r0, r3
   109e2:	4b0c      	ldr	r3, [pc, #48]	; (10a14 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   109e4:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   109e6:	4b0a      	ldr	r3, [pc, #40]	; (10a10 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   109e8:	2101      	movs	r1, #1
   109ea:	0018      	movs	r0, r3
   109ec:	4b0a      	ldr	r3, [pc, #40]	; (10a18 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   109ee:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   109f0:	490b      	ldr	r1, [pc, #44]	; (10a20 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   109f2:	4b07      	ldr	r3, [pc, #28]	; (10a10 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   109f4:	2202      	movs	r2, #2
   109f6:	0018      	movs	r0, r3
   109f8:	4b06      	ldr	r3, [pc, #24]	; (10a14 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   109fa:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   109fc:	4b04      	ldr	r3, [pc, #16]	; (10a10 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   109fe:	2102      	movs	r1, #2
   10a00:	0018      	movs	r0, r3
   10a02:	4b05      	ldr	r3, [pc, #20]	; (10a18 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   10a04:	4798      	blx	r3
}
   10a06:	46c0      	nop			; (mov r8, r8)
   10a08:	46bd      	mov	sp, r7
   10a0a:	bd80      	pop	{r7, pc}
   10a0c:	000108b9 	.word	0x000108b9
   10a10:	20004328 	.word	0x20004328
   10a14:	0000f909 	.word	0x0000f909
   10a18:	000107c9 	.word	0x000107c9
   10a1c:	00010911 	.word	0x00010911
   10a20:	00010969 	.word	0x00010969

00010a24 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   10a24:	b580      	push	{r7, lr}
   10a26:	b082      	sub	sp, #8
   10a28:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   10a2a:	2300      	movs	r3, #0
   10a2c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   10a2e:	4b14      	ldr	r3, [pc, #80]	; (10a80 <I2cInitializeDriver+0x5c>)
   10a30:	4798      	blx	r3
   10a32:	0003      	movs	r3, r0
   10a34:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   10a36:	687b      	ldr	r3, [r7, #4]
   10a38:	2b00      	cmp	r3, #0
   10a3a:	d11a      	bne.n	10a72 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   10a3c:	4b11      	ldr	r3, [pc, #68]	; (10a84 <I2cInitializeDriver+0x60>)
   10a3e:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   10a40:	2001      	movs	r0, #1
   10a42:	4b11      	ldr	r3, [pc, #68]	; (10a88 <I2cInitializeDriver+0x64>)
   10a44:	4798      	blx	r3
   10a46:	0002      	movs	r2, r0
   10a48:	4b10      	ldr	r3, [pc, #64]	; (10a8c <I2cInitializeDriver+0x68>)
   10a4a:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   10a4c:	2203      	movs	r2, #3
   10a4e:	2100      	movs	r1, #0
   10a50:	2001      	movs	r0, #1
   10a52:	4b0f      	ldr	r3, [pc, #60]	; (10a90 <I2cInitializeDriver+0x6c>)
   10a54:	4798      	blx	r3
   10a56:	0002      	movs	r2, r0
   10a58:	4b0e      	ldr	r3, [pc, #56]	; (10a94 <I2cInitializeDriver+0x70>)
   10a5a:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   10a5c:	4b0b      	ldr	r3, [pc, #44]	; (10a8c <I2cInitializeDriver+0x68>)
   10a5e:	681b      	ldr	r3, [r3, #0]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d003      	beq.n	10a6c <I2cInitializeDriver+0x48>
   10a64:	4b0b      	ldr	r3, [pc, #44]	; (10a94 <I2cInitializeDriver+0x70>)
   10a66:	681b      	ldr	r3, [r3, #0]
   10a68:	2b00      	cmp	r3, #0
   10a6a:	d103      	bne.n	10a74 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   10a6c:	2306      	movs	r3, #6
   10a6e:	607b      	str	r3, [r7, #4]
        goto exit;
   10a70:	e000      	b.n	10a74 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   10a72:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   10a74:	687b      	ldr	r3, [r7, #4]
}
   10a76:	0018      	movs	r0, r3
   10a78:	46bd      	mov	sp, r7
   10a7a:	b002      	add	sp, #8
   10a7c:	bd80      	pop	{r7, pc}
   10a7e:	46c0      	nop			; (mov r8, r8)
   10a80:	000107fd 	.word	0x000107fd
   10a84:	000109c1 	.word	0x000109c1
   10a88:	00016f61 	.word	0x00016f61
   10a8c:	20004324 	.word	0x20004324
   10a90:	00016cf9 	.word	0x00016cf9
   10a94:	20004350 	.word	0x20004350

00010a98 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   10a98:	b590      	push	{r4, r7, lr}
   10a9a:	b085      	sub	sp, #20
   10a9c:	af00      	add	r7, sp, #0
   10a9e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   10aa0:	2300      	movs	r3, #0
   10aa2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   10aa4:	687b      	ldr	r3, [r7, #4]
   10aa6:	2b00      	cmp	r3, #0
   10aa8:	d003      	beq.n	10ab2 <I2cWriteData+0x1a>
   10aaa:	687b      	ldr	r3, [r7, #4]
   10aac:	685b      	ldr	r3, [r3, #4]
   10aae:	2b00      	cmp	r3, #0
   10ab0:	d103      	bne.n	10aba <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   10ab2:	2308      	movs	r3, #8
   10ab4:	425b      	negs	r3, r3
   10ab6:	60fb      	str	r3, [r7, #12]
        goto exit;
   10ab8:	e01f      	b.n	10afa <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   10aba:	687b      	ldr	r3, [r7, #4]
   10abc:	781b      	ldrb	r3, [r3, #0]
   10abe:	b29a      	uxth	r2, r3
   10ac0:	4b10      	ldr	r3, [pc, #64]	; (10b04 <I2cWriteData+0x6c>)
   10ac2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   10ac4:	687b      	ldr	r3, [r7, #4]
   10ac6:	685a      	ldr	r2, [r3, #4]
   10ac8:	4b0e      	ldr	r3, [pc, #56]	; (10b04 <I2cWriteData+0x6c>)
   10aca:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   10acc:	687b      	ldr	r3, [r7, #4]
   10ace:	89da      	ldrh	r2, [r3, #14]
   10ad0:	4b0c      	ldr	r3, [pc, #48]	; (10b04 <I2cWriteData+0x6c>)
   10ad2:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   10ad4:	230b      	movs	r3, #11
   10ad6:	18fc      	adds	r4, r7, r3
   10ad8:	4a0a      	ldr	r2, [pc, #40]	; (10b04 <I2cWriteData+0x6c>)
   10ada:	4b0b      	ldr	r3, [pc, #44]	; (10b08 <I2cWriteData+0x70>)
   10adc:	0011      	movs	r1, r2
   10ade:	0018      	movs	r0, r3
   10ae0:	4b0a      	ldr	r3, [pc, #40]	; (10b0c <I2cWriteData+0x74>)
   10ae2:	4798      	blx	r3
   10ae4:	0003      	movs	r3, r0
   10ae6:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   10ae8:	230b      	movs	r3, #11
   10aea:	18fb      	adds	r3, r7, r3
   10aec:	781b      	ldrb	r3, [r3, #0]
   10aee:	2b00      	cmp	r3, #0
   10af0:	d003      	beq.n	10afa <I2cWriteData+0x62>
        error = ERROR_IO;
   10af2:	2306      	movs	r3, #6
   10af4:	425b      	negs	r3, r3
   10af6:	60fb      	str	r3, [r7, #12]
        goto exit;
   10af8:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   10afa:	68fb      	ldr	r3, [r7, #12]
}
   10afc:	0018      	movs	r0, r3
   10afe:	46bd      	mov	sp, r7
   10b00:	b005      	add	sp, #20
   10b02:	bd90      	pop	{r4, r7, pc}
   10b04:	20004354 	.word	0x20004354
   10b08:	20004328 	.word	0x20004328
   10b0c:	0000f9f5 	.word	0x0000f9f5

00010b10 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   10b10:	b590      	push	{r4, r7, lr}
   10b12:	b083      	sub	sp, #12
   10b14:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   10b16:	2300      	movs	r3, #0
   10b18:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   10b1a:	4b09      	ldr	r3, [pc, #36]	; (10b40 <I2cFreeMutex+0x30>)
   10b1c:	6818      	ldr	r0, [r3, #0]
   10b1e:	2300      	movs	r3, #0
   10b20:	2200      	movs	r2, #0
   10b22:	2100      	movs	r1, #0
   10b24:	4c07      	ldr	r4, [pc, #28]	; (10b44 <I2cFreeMutex+0x34>)
   10b26:	47a0      	blx	r4
   10b28:	0003      	movs	r3, r0
   10b2a:	2b01      	cmp	r3, #1
   10b2c:	d002      	beq.n	10b34 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   10b2e:	2314      	movs	r3, #20
   10b30:	425b      	negs	r3, r3
   10b32:	607b      	str	r3, [r7, #4]
    }
    return error;
   10b34:	687b      	ldr	r3, [r7, #4]
}
   10b36:	0018      	movs	r0, r3
   10b38:	46bd      	mov	sp, r7
   10b3a:	b003      	add	sp, #12
   10b3c:	bd90      	pop	{r4, r7, pc}
   10b3e:	46c0      	nop			; (mov r8, r8)
   10b40:	20004324 	.word	0x20004324
   10b44:	00016fa1 	.word	0x00016fa1

00010b48 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   10b48:	b580      	push	{r7, lr}
   10b4a:	b084      	sub	sp, #16
   10b4c:	af00      	add	r7, sp, #0
   10b4e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   10b50:	2300      	movs	r3, #0
   10b52:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   10b54:	4b08      	ldr	r3, [pc, #32]	; (10b78 <I2cGetMutex+0x30>)
   10b56:	681b      	ldr	r3, [r3, #0]
   10b58:	687a      	ldr	r2, [r7, #4]
   10b5a:	0011      	movs	r1, r2
   10b5c:	0018      	movs	r0, r3
   10b5e:	4b07      	ldr	r3, [pc, #28]	; (10b7c <I2cGetMutex+0x34>)
   10b60:	4798      	blx	r3
   10b62:	0003      	movs	r3, r0
   10b64:	2b01      	cmp	r3, #1
   10b66:	d002      	beq.n	10b6e <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   10b68:	231d      	movs	r3, #29
   10b6a:	425b      	negs	r3, r3
   10b6c:	60fb      	str	r3, [r7, #12]
    }
    return error;
   10b6e:	68fb      	ldr	r3, [r7, #12]
}
   10b70:	0018      	movs	r0, r3
   10b72:	46bd      	mov	sp, r7
   10b74:	b004      	add	sp, #16
   10b76:	bd80      	pop	{r7, pc}
   10b78:	20004324 	.word	0x20004324
   10b7c:	00017cb1 	.word	0x00017cb1

00010b80 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   10b80:	b580      	push	{r7, lr}
   10b82:	b084      	sub	sp, #16
   10b84:	af00      	add	r7, sp, #0
   10b86:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   10b88:	2300      	movs	r3, #0
   10b8a:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   10b8c:	4b04      	ldr	r3, [pc, #16]	; (10ba0 <I2cGetSemaphoreHandle+0x20>)
   10b8e:	681a      	ldr	r2, [r3, #0]
   10b90:	687b      	ldr	r3, [r7, #4]
   10b92:	601a      	str	r2, [r3, #0]
    return error;
   10b94:	68fb      	ldr	r3, [r7, #12]
}
   10b96:	0018      	movs	r0, r3
   10b98:	46bd      	mov	sp, r7
   10b9a:	b004      	add	sp, #16
   10b9c:	bd80      	pop	{r7, pc}
   10b9e:	46c0      	nop			; (mov r8, r8)
   10ba0:	20004350 	.word	0x20004350

00010ba4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   10ba4:	b580      	push	{r7, lr}
   10ba6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   10ba8:	4b02      	ldr	r3, [pc, #8]	; (10bb4 <I2cGetTaskErrorStatus+0x10>)
   10baa:	781b      	ldrb	r3, [r3, #0]
}
   10bac:	0018      	movs	r0, r3
   10bae:	46bd      	mov	sp, r7
   10bb0:	bd80      	pop	{r7, pc}
   10bb2:	46c0      	nop			; (mov r8, r8)
   10bb4:	20000418 	.word	0x20000418

00010bb8 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   10bb8:	b580      	push	{r7, lr}
   10bba:	b082      	sub	sp, #8
   10bbc:	af00      	add	r7, sp, #0
   10bbe:	0002      	movs	r2, r0
   10bc0:	1dfb      	adds	r3, r7, #7
   10bc2:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   10bc4:	4b03      	ldr	r3, [pc, #12]	; (10bd4 <I2cSetTaskErrorStatus+0x1c>)
   10bc6:	1dfa      	adds	r2, r7, #7
   10bc8:	7812      	ldrb	r2, [r2, #0]
   10bca:	701a      	strb	r2, [r3, #0]
}
   10bcc:	46c0      	nop			; (mov r8, r8)
   10bce:	46bd      	mov	sp, r7
   10bd0:	b002      	add	sp, #8
   10bd2:	bd80      	pop	{r7, pc}
   10bd4:	20000418 	.word	0x20000418

00010bd8 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   10bd8:	b580      	push	{r7, lr}
   10bda:	b084      	sub	sp, #16
   10bdc:	af00      	add	r7, sp, #0
   10bde:	6078      	str	r0, [r7, #4]
   10be0:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   10be2:	2300      	movs	r3, #0
   10be4:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   10be6:	2300      	movs	r3, #0
   10be8:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   10bea:	2396      	movs	r3, #150	; 0x96
   10bec:	005b      	lsls	r3, r3, #1
   10bee:	0018      	movs	r0, r3
   10bf0:	4b28      	ldr	r3, [pc, #160]	; (10c94 <I2cWriteDataWait+0xbc>)
   10bf2:	4798      	blx	r3
   10bf4:	0003      	movs	r3, r0
   10bf6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   10bf8:	68fb      	ldr	r3, [r7, #12]
   10bfa:	2b00      	cmp	r3, #0
   10bfc:	d138      	bne.n	10c70 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   10bfe:	2308      	movs	r3, #8
   10c00:	18fb      	adds	r3, r7, r3
   10c02:	0018      	movs	r0, r3
   10c04:	4b24      	ldr	r3, [pc, #144]	; (10c98 <I2cWriteDataWait+0xc0>)
   10c06:	4798      	blx	r3
   10c08:	0003      	movs	r3, r0
   10c0a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   10c0c:	68fb      	ldr	r3, [r7, #12]
   10c0e:	2b00      	cmp	r3, #0
   10c10:	d130      	bne.n	10c74 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   10c12:	687b      	ldr	r3, [r7, #4]
   10c14:	0018      	movs	r0, r3
   10c16:	4b21      	ldr	r3, [pc, #132]	; (10c9c <I2cWriteDataWait+0xc4>)
   10c18:	4798      	blx	r3
   10c1a:	0003      	movs	r3, r0
   10c1c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   10c1e:	68fb      	ldr	r3, [r7, #12]
   10c20:	2b00      	cmp	r3, #0
   10c22:	d12a      	bne.n	10c7a <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   10c24:	68bb      	ldr	r3, [r7, #8]
   10c26:	683a      	ldr	r2, [r7, #0]
   10c28:	0011      	movs	r1, r2
   10c2a:	0018      	movs	r0, r3
   10c2c:	4b1c      	ldr	r3, [pc, #112]	; (10ca0 <I2cWriteDataWait+0xc8>)
   10c2e:	4798      	blx	r3
   10c30:	0003      	movs	r3, r0
   10c32:	2b01      	cmp	r3, #1
   10c34:	d111      	bne.n	10c5a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   10c36:	4b1b      	ldr	r3, [pc, #108]	; (10ca4 <I2cWriteDataWait+0xcc>)
   10c38:	4798      	blx	r3
   10c3a:	1e03      	subs	r3, r0, #0
   10c3c:	d011      	beq.n	10c62 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   10c3e:	2000      	movs	r0, #0
   10c40:	4b19      	ldr	r3, [pc, #100]	; (10ca8 <I2cWriteDataWait+0xd0>)
   10c42:	4798      	blx	r3
            if (error != ERROR_NONE) {
   10c44:	68fb      	ldr	r3, [r7, #12]
   10c46:	2b00      	cmp	r3, #0
   10c48:	d003      	beq.n	10c52 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   10c4a:	2321      	movs	r3, #33	; 0x21
   10c4c:	425b      	negs	r3, r3
   10c4e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   10c50:	e014      	b.n	10c7c <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   10c52:	2303      	movs	r3, #3
   10c54:	425b      	negs	r3, r3
   10c56:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   10c58:	e010      	b.n	10c7c <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   10c5a:	2303      	movs	r3, #3
   10c5c:	425b      	negs	r3, r3
   10c5e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   10c60:	e00c      	b.n	10c7c <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   10c62:	4b12      	ldr	r3, [pc, #72]	; (10cac <I2cWriteDataWait+0xd4>)
   10c64:	4798      	blx	r3
   10c66:	0002      	movs	r2, r0
   10c68:	68fb      	ldr	r3, [r7, #12]
   10c6a:	4313      	orrs	r3, r2
   10c6c:	60fb      	str	r3, [r7, #12]
   10c6e:	e002      	b.n	10c76 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   10c70:	46c0      	nop			; (mov r8, r8)
   10c72:	e000      	b.n	10c76 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   10c74:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   10c76:	68fb      	ldr	r3, [r7, #12]
   10c78:	e007      	b.n	10c8a <I2cWriteDataWait+0xb2>
        goto exitError0;
   10c7a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   10c7c:	4b0b      	ldr	r3, [pc, #44]	; (10cac <I2cWriteDataWait+0xd4>)
   10c7e:	4798      	blx	r3
   10c80:	0002      	movs	r2, r0
   10c82:	68fb      	ldr	r3, [r7, #12]
   10c84:	4313      	orrs	r3, r2
   10c86:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   10c88:	68fb      	ldr	r3, [r7, #12]
}
   10c8a:	0018      	movs	r0, r3
   10c8c:	46bd      	mov	sp, r7
   10c8e:	b004      	add	sp, #16
   10c90:	bd80      	pop	{r7, pc}
   10c92:	46c0      	nop			; (mov r8, r8)
   10c94:	00010b49 	.word	0x00010b49
   10c98:	00010b81 	.word	0x00010b81
   10c9c:	00010a99 	.word	0x00010a99
   10ca0:	00017cb1 	.word	0x00017cb1
   10ca4:	00010ba5 	.word	0x00010ba5
   10ca8:	00010bb9 	.word	0x00010bb9
   10cac:	00010b11 	.word	0x00010b11

00010cb0 <I2cWriteReadNoStopBlocking_VEML>:
 *       I2cWriteDataWait() / I2cReadDataWait().
 */
int32_t I2cWriteReadNoStopBlocking_VEML(uint8_t addr,
                                        const uint8_t *wrBuf, uint16_t wrLen,
                                        uint8_t *rdBuf, uint16_t rdLen)
{
   10cb0:	b590      	push	{r4, r7, lr}
   10cb2:	b08d      	sub	sp, #52	; 0x34
   10cb4:	af00      	add	r7, sp, #0
   10cb6:	60b9      	str	r1, [r7, #8]
   10cb8:	0011      	movs	r1, r2
   10cba:	607b      	str	r3, [r7, #4]
   10cbc:	230f      	movs	r3, #15
   10cbe:	18fb      	adds	r3, r7, r3
   10cc0:	1c02      	adds	r2, r0, #0
   10cc2:	701a      	strb	r2, [r3, #0]
   10cc4:	230c      	movs	r3, #12
   10cc6:	18fb      	adds	r3, r7, r3
   10cc8:	1c0a      	adds	r2, r1, #0
   10cca:	801a      	strh	r2, [r3, #0]
    int32_t error = ERROR_NONE;
   10ccc:	2300      	movs	r3, #0
   10cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    status_code_genare_t hwError;
    struct i2c_master_packet wr_packet, rd_packet;

    // 1. Get Mutex to protect I2C bus
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   10cd0:	2396      	movs	r3, #150	; 0x96
   10cd2:	005b      	lsls	r3, r3, #1
   10cd4:	0018      	movs	r0, r3
   10cd6:	4b39      	ldr	r3, [pc, #228]	; (10dbc <I2cWriteReadNoStopBlocking_VEML+0x10c>)
   10cd8:	4798      	blx	r3
   10cda:	0003      	movs	r3, r0
   10cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (ERROR_NONE != error) {
   10cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ce0:	2b00      	cmp	r3, #0
   10ce2:	d001      	beq.n	10ce8 <I2cWriteReadNoStopBlocking_VEML+0x38>
        // Could not get mutex
        return error;
   10ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ce6:	e064      	b.n	10db2 <I2cWriteReadNoStopBlocking_VEML+0x102>
    }

    // 2. Prepare write packet (no stop)
    wr_packet.address         = addr;
   10ce8:	230f      	movs	r3, #15
   10cea:	18fb      	adds	r3, r7, r3
   10cec:	781b      	ldrb	r3, [r3, #0]
   10cee:	b29a      	uxth	r2, r3
   10cf0:	231c      	movs	r3, #28
   10cf2:	18fb      	adds	r3, r7, r3
   10cf4:	801a      	strh	r2, [r3, #0]
    wr_packet.data            = (uint8_t *)wrBuf;  // cast to non-const for ASF
   10cf6:	231c      	movs	r3, #28
   10cf8:	18fb      	adds	r3, r7, r3
   10cfa:	68ba      	ldr	r2, [r7, #8]
   10cfc:	605a      	str	r2, [r3, #4]
    wr_packet.data_length     = wrLen;
   10cfe:	231c      	movs	r3, #28
   10d00:	18fb      	adds	r3, r7, r3
   10d02:	220c      	movs	r2, #12
   10d04:	18ba      	adds	r2, r7, r2
   10d06:	8812      	ldrh	r2, [r2, #0]
   10d08:	805a      	strh	r2, [r3, #2]
    wr_packet.ten_bit_address = false;
   10d0a:	231c      	movs	r3, #28
   10d0c:	18fb      	adds	r3, r7, r3
   10d0e:	2200      	movs	r2, #0
   10d10:	721a      	strb	r2, [r3, #8]
    wr_packet.high_speed      = false;
   10d12:	231c      	movs	r3, #28
   10d14:	18fb      	adds	r3, r7, r3
   10d16:	2200      	movs	r2, #0
   10d18:	725a      	strb	r2, [r3, #9]
    wr_packet.hs_master_code  = 0;
   10d1a:	231c      	movs	r3, #28
   10d1c:	18fb      	adds	r3, r7, r3
   10d1e:	2200      	movs	r2, #0
   10d20:	729a      	strb	r2, [r3, #10]

    // 3. Write WITHOUT generating STOP
    hwError = i2c_master_write_packet_wait_no_stop(&i2cSensorBusInstance, &wr_packet);
   10d22:	232b      	movs	r3, #43	; 0x2b
   10d24:	18fc      	adds	r4, r7, r3
   10d26:	231c      	movs	r3, #28
   10d28:	18fa      	adds	r2, r7, r3
   10d2a:	4b25      	ldr	r3, [pc, #148]	; (10dc0 <I2cWriteReadNoStopBlocking_VEML+0x110>)
   10d2c:	0011      	movs	r1, r2
   10d2e:	0018      	movs	r0, r3
   10d30:	4b24      	ldr	r3, [pc, #144]	; (10dc4 <I2cWriteReadNoStopBlocking_VEML+0x114>)
   10d32:	4798      	blx	r3
   10d34:	0003      	movs	r3, r0
   10d36:	7023      	strb	r3, [r4, #0]
    if (hwError != STATUS_OK) {
   10d38:	232b      	movs	r3, #43	; 0x2b
   10d3a:	18fb      	adds	r3, r7, r3
   10d3c:	781b      	ldrb	r3, [r3, #0]
   10d3e:	2b00      	cmp	r3, #0
   10d40:	d003      	beq.n	10d4a <I2cWriteReadNoStopBlocking_VEML+0x9a>
        error = ERROR_IO;
   10d42:	2306      	movs	r3, #6
   10d44:	425b      	negs	r3, r3
   10d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exitError; // Jump to cleanup
   10d48:	e030      	b.n	10dac <I2cWriteReadNoStopBlocking_VEML+0xfc>
    }

    // 4. Prepare read packet (this will generate a repeated START)
    rd_packet.address         = addr;
   10d4a:	230f      	movs	r3, #15
   10d4c:	18fb      	adds	r3, r7, r3
   10d4e:	781b      	ldrb	r3, [r3, #0]
   10d50:	b29a      	uxth	r2, r3
   10d52:	2310      	movs	r3, #16
   10d54:	18fb      	adds	r3, r7, r3
   10d56:	801a      	strh	r2, [r3, #0]
    rd_packet.data            = rdBuf;
   10d58:	2310      	movs	r3, #16
   10d5a:	18fb      	adds	r3, r7, r3
   10d5c:	687a      	ldr	r2, [r7, #4]
   10d5e:	605a      	str	r2, [r3, #4]
    rd_packet.data_length     = rdLen;
   10d60:	2310      	movs	r3, #16
   10d62:	18fb      	adds	r3, r7, r3
   10d64:	2240      	movs	r2, #64	; 0x40
   10d66:	18ba      	adds	r2, r7, r2
   10d68:	8812      	ldrh	r2, [r2, #0]
   10d6a:	805a      	strh	r2, [r3, #2]
    rd_packet.ten_bit_address = false;
   10d6c:	2310      	movs	r3, #16
   10d6e:	18fb      	adds	r3, r7, r3
   10d70:	2200      	movs	r2, #0
   10d72:	721a      	strb	r2, [r3, #8]
    rd_packet.high_speed      = false;
   10d74:	2310      	movs	r3, #16
   10d76:	18fb      	adds	r3, r7, r3
   10d78:	2200      	movs	r2, #0
   10d7a:	725a      	strb	r2, [r3, #9]
    rd_packet.hs_master_code  = 0;
   10d7c:	2310      	movs	r3, #16
   10d7e:	18fb      	adds	r3, r7, r3
   10d80:	2200      	movs	r2, #0
   10d82:	729a      	strb	r2, [r3, #10]

    // 5. Read (this time it will send a Repeated START, then STOP at the end)
    hwError = i2c_master_read_packet_wait(&i2cSensorBusInstance, &rd_packet);
   10d84:	232b      	movs	r3, #43	; 0x2b
   10d86:	18fc      	adds	r4, r7, r3
   10d88:	2310      	movs	r3, #16
   10d8a:	18fa      	adds	r2, r7, r3
   10d8c:	4b0c      	ldr	r3, [pc, #48]	; (10dc0 <I2cWriteReadNoStopBlocking_VEML+0x110>)
   10d8e:	0011      	movs	r1, r2
   10d90:	0018      	movs	r0, r3
   10d92:	4b0d      	ldr	r3, [pc, #52]	; (10dc8 <I2cWriteReadNoStopBlocking_VEML+0x118>)
   10d94:	4798      	blx	r3
   10d96:	0003      	movs	r3, r0
   10d98:	7023      	strb	r3, [r4, #0]
    if (hwError != STATUS_OK) {
   10d9a:	232b      	movs	r3, #43	; 0x2b
   10d9c:	18fb      	adds	r3, r7, r3
   10d9e:	781b      	ldrb	r3, [r3, #0]
   10da0:	2b00      	cmp	r3, #0
   10da2:	d003      	beq.n	10dac <I2cWriteReadNoStopBlocking_VEML+0xfc>
        error = ERROR_IO;
   10da4:	2306      	movs	r3, #6
   10da6:	425b      	negs	r3, r3
   10da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        goto exitError;
   10daa:	46c0      	nop			; (mov r8, r8)
    }

exitError:
    // 6. Release Mutex
    I2cFreeMutex();
   10dac:	4b07      	ldr	r3, [pc, #28]	; (10dcc <I2cWriteReadNoStopBlocking_VEML+0x11c>)
   10dae:	4798      	blx	r3

    return error;
   10db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   10db2:	0018      	movs	r0, r3
   10db4:	46bd      	mov	sp, r7
   10db6:	b00d      	add	sp, #52	; 0x34
   10db8:	bd90      	pop	{r4, r7, pc}
   10dba:	46c0      	nop			; (mov r8, r8)
   10dbc:	00010b49 	.word	0x00010b49
   10dc0:	20004328 	.word	0x20004328
   10dc4:	000145f9 	.word	0x000145f9
   10dc8:	00014441 	.word	0x00014441
   10dcc:	00010b11 	.word	0x00010b11

00010dd0 <_mapColorToRGB>:
 * @param[out] r      Red intensity (0-255).
 * @param[out] g      Green intensity (0-255).
 * @param[out] b      Blue intensity (0-255).
 */
static void _mapColorToRGB(esp_color_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
   10dd0:	b580      	push	{r7, lr}
   10dd2:	b084      	sub	sp, #16
   10dd4:	af00      	add	r7, sp, #0
   10dd6:	60b9      	str	r1, [r7, #8]
   10dd8:	607a      	str	r2, [r7, #4]
   10dda:	603b      	str	r3, [r7, #0]
   10ddc:	230f      	movs	r3, #15
   10dde:	18fb      	adds	r3, r7, r3
   10de0:	1c02      	adds	r2, r0, #0
   10de2:	701a      	strb	r2, [r3, #0]
    switch (color) {
   10de4:	230f      	movs	r3, #15
   10de6:	18fb      	adds	r3, r7, r3
   10de8:	781b      	ldrb	r3, [r3, #0]
   10dea:	2b06      	cmp	r3, #6
   10dec:	d84a      	bhi.n	10e84 <_mapColorToRGB+0xb4>
   10dee:	009a      	lsls	r2, r3, #2
   10df0:	4b2b      	ldr	r3, [pc, #172]	; (10ea0 <_mapColorToRGB+0xd0>)
   10df2:	18d3      	adds	r3, r2, r3
   10df4:	681b      	ldr	r3, [r3, #0]
   10df6:	469f      	mov	pc, r3
        case ESP_COLOR_OFF:     *r = 0;   *g = 0;   *b = 0;   break;
   10df8:	68bb      	ldr	r3, [r7, #8]
   10dfa:	2200      	movs	r2, #0
   10dfc:	701a      	strb	r2, [r3, #0]
   10dfe:	687b      	ldr	r3, [r7, #4]
   10e00:	2200      	movs	r2, #0
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	683b      	ldr	r3, [r7, #0]
   10e06:	2200      	movs	r2, #0
   10e08:	701a      	strb	r2, [r3, #0]
   10e0a:	e045      	b.n	10e98 <_mapColorToRGB+0xc8>
        case ESP_COLOR_RED:     *r = 255; *g = 0;   *b = 0;   break;
   10e0c:	68bb      	ldr	r3, [r7, #8]
   10e0e:	22ff      	movs	r2, #255	; 0xff
   10e10:	701a      	strb	r2, [r3, #0]
   10e12:	687b      	ldr	r3, [r7, #4]
   10e14:	2200      	movs	r2, #0
   10e16:	701a      	strb	r2, [r3, #0]
   10e18:	683b      	ldr	r3, [r7, #0]
   10e1a:	2200      	movs	r2, #0
   10e1c:	701a      	strb	r2, [r3, #0]
   10e1e:	e03b      	b.n	10e98 <_mapColorToRGB+0xc8>
        case ESP_COLOR_GREEN:   *r = 0;   *g = 255; *b = 0;   break;
   10e20:	68bb      	ldr	r3, [r7, #8]
   10e22:	2200      	movs	r2, #0
   10e24:	701a      	strb	r2, [r3, #0]
   10e26:	687b      	ldr	r3, [r7, #4]
   10e28:	22ff      	movs	r2, #255	; 0xff
   10e2a:	701a      	strb	r2, [r3, #0]
   10e2c:	683b      	ldr	r3, [r7, #0]
   10e2e:	2200      	movs	r2, #0
   10e30:	701a      	strb	r2, [r3, #0]
   10e32:	e031      	b.n	10e98 <_mapColorToRGB+0xc8>
        case ESP_COLOR_BLUE:    *r = 0;   *g = 0;   *b = 255; break;
   10e34:	68bb      	ldr	r3, [r7, #8]
   10e36:	2200      	movs	r2, #0
   10e38:	701a      	strb	r2, [r3, #0]
   10e3a:	687b      	ldr	r3, [r7, #4]
   10e3c:	2200      	movs	r2, #0
   10e3e:	701a      	strb	r2, [r3, #0]
   10e40:	683b      	ldr	r3, [r7, #0]
   10e42:	22ff      	movs	r2, #255	; 0xff
   10e44:	701a      	strb	r2, [r3, #0]
   10e46:	e027      	b.n	10e98 <_mapColorToRGB+0xc8>
        case ESP_COLOR_YELLOW:  *r = 255; *g = 255; *b = 0;   break;
   10e48:	68bb      	ldr	r3, [r7, #8]
   10e4a:	22ff      	movs	r2, #255	; 0xff
   10e4c:	701a      	strb	r2, [r3, #0]
   10e4e:	687b      	ldr	r3, [r7, #4]
   10e50:	22ff      	movs	r2, #255	; 0xff
   10e52:	701a      	strb	r2, [r3, #0]
   10e54:	683b      	ldr	r3, [r7, #0]
   10e56:	2200      	movs	r2, #0
   10e58:	701a      	strb	r2, [r3, #0]
   10e5a:	e01d      	b.n	10e98 <_mapColorToRGB+0xc8>
        case ESP_COLOR_CYAN:    *r = 0;   *g = 255; *b = 255; break;
   10e5c:	68bb      	ldr	r3, [r7, #8]
   10e5e:	2200      	movs	r2, #0
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	687b      	ldr	r3, [r7, #4]
   10e64:	22ff      	movs	r2, #255	; 0xff
   10e66:	701a      	strb	r2, [r3, #0]
   10e68:	683b      	ldr	r3, [r7, #0]
   10e6a:	22ff      	movs	r2, #255	; 0xff
   10e6c:	701a      	strb	r2, [r3, #0]
   10e6e:	e013      	b.n	10e98 <_mapColorToRGB+0xc8>
        case ESP_COLOR_MAGENTA: *r = 255; *g = 0;   *b = 255; break;
   10e70:	68bb      	ldr	r3, [r7, #8]
   10e72:	22ff      	movs	r2, #255	; 0xff
   10e74:	701a      	strb	r2, [r3, #0]
   10e76:	687b      	ldr	r3, [r7, #4]
   10e78:	2200      	movs	r2, #0
   10e7a:	701a      	strb	r2, [r3, #0]
   10e7c:	683b      	ldr	r3, [r7, #0]
   10e7e:	22ff      	movs	r2, #255	; 0xff
   10e80:	701a      	strb	r2, [r3, #0]
   10e82:	e009      	b.n	10e98 <_mapColorToRGB+0xc8>
        default:                *r = 0;   *g = 0;   *b = 0;   break;
   10e84:	68bb      	ldr	r3, [r7, #8]
   10e86:	2200      	movs	r2, #0
   10e88:	701a      	strb	r2, [r3, #0]
   10e8a:	687b      	ldr	r3, [r7, #4]
   10e8c:	2200      	movs	r2, #0
   10e8e:	701a      	strb	r2, [r3, #0]
   10e90:	683b      	ldr	r3, [r7, #0]
   10e92:	2200      	movs	r2, #0
   10e94:	701a      	strb	r2, [r3, #0]
   10e96:	46c0      	nop			; (mov r8, r8)
    }
}
   10e98:	46c0      	nop			; (mov r8, r8)
   10e9a:	46bd      	mov	sp, r7
   10e9c:	b004      	add	sp, #16
   10e9e:	bd80      	pop	{r7, pc}
   10ea0:	00034330 	.word	0x00034330

00010ea4 <esp_i2c_init>:
 *
 * @param[in] i2c_addr  7-bit I2C device address.
 * @return 0 if success, non-zero otherwise.
 */
int esp_i2c_init(uint8_t i2c_addr)
{
   10ea4:	b580      	push	{r7, lr}
   10ea6:	b082      	sub	sp, #8
   10ea8:	af00      	add	r7, sp, #0
   10eaa:	0002      	movs	r2, r0
   10eac:	1dfb      	adds	r3, r7, #7
   10eae:	701a      	strb	r2, [r3, #0]
    g_espI2cAddress = i2c_addr;
   10eb0:	4b07      	ldr	r3, [pc, #28]	; (10ed0 <esp_i2c_init+0x2c>)
   10eb2:	1dfa      	adds	r2, r7, #7
   10eb4:	7812      	ldrb	r2, [r2, #0]
   10eb6:	701a      	strb	r2, [r3, #0]
    g_colorFlag = ESP_COLOR_OFF;
   10eb8:	4b06      	ldr	r3, [pc, #24]	; (10ed4 <esp_i2c_init+0x30>)
   10eba:	2200      	movs	r2, #0
   10ebc:	701a      	strb	r2, [r3, #0]
    g_lastColor = ESP_COLOR_OFF;
   10ebe:	4b06      	ldr	r3, [pc, #24]	; (10ed8 <esp_i2c_init+0x34>)
   10ec0:	2200      	movs	r2, #0
   10ec2:	701a      	strb	r2, [r3, #0]

    // Additional initialization logic can be added here.

    return 0;
   10ec4:	2300      	movs	r3, #0
}
   10ec6:	0018      	movs	r0, r3
   10ec8:	46bd      	mov	sp, r7
   10eca:	b002      	add	sp, #8
   10ecc:	bd80      	pop	{r7, pc}
   10ece:	46c0      	nop			; (mov r8, r8)
   10ed0:	20000014 	.word	0x20000014
   10ed4:	20000430 	.word	0x20000430
   10ed8:	20000431 	.word	0x20000431

00010edc <esp_i2c_set_color_flag>:
 * @brief Sets the color flag which is processed by the ESP32 I2C task.
 *
 * @param[in] color Desired color to set.
 */
void esp_i2c_set_color_flag(esp_color_t color)
{
   10edc:	b580      	push	{r7, lr}
   10ede:	b082      	sub	sp, #8
   10ee0:	af00      	add	r7, sp, #0
   10ee2:	0002      	movs	r2, r0
   10ee4:	1dfb      	adds	r3, r7, #7
   10ee6:	701a      	strb	r2, [r3, #0]
    g_colorFlag = color;
   10ee8:	4b03      	ldr	r3, [pc, #12]	; (10ef8 <esp_i2c_set_color_flag+0x1c>)
   10eea:	1dfa      	adds	r2, r7, #7
   10eec:	7812      	ldrb	r2, [r2, #0]
   10eee:	701a      	strb	r2, [r3, #0]
}
   10ef0:	46c0      	nop			; (mov r8, r8)
   10ef2:	46bd      	mov	sp, r7
   10ef4:	b002      	add	sp, #8
   10ef6:	bd80      	pop	{r7, pc}
   10ef8:	20000430 	.word	0x20000430

00010efc <vEspI2cTask>:
 *        and communicates with ESP32 device over I2C.
 *
 * @param[in] pvParameters Task parameters (unused).
 */
void vEspI2cTask(void *pvParameters)
{
   10efc:	b590      	push	{r4, r7, lr}
   10efe:	b089      	sub	sp, #36	; 0x24
   10f00:	af00      	add	r7, sp, #0
   10f02:	6078      	str	r0, [r7, #4]
    (void)pvParameters;

    esp_i2c_init(g_espI2cAddress);
   10f04:	4b34      	ldr	r3, [pc, #208]	; (10fd8 <vEspI2cTask+0xdc>)
   10f06:	781b      	ldrb	r3, [r3, #0]
   10f08:	0018      	movs	r0, r3
   10f0a:	4b34      	ldr	r3, [pc, #208]	; (10fdc <vEspI2cTask+0xe0>)
   10f0c:	4798      	blx	r3

    static uint8_t txBuff[4]; // Buffer format: [cmd, R, G, B]
    I2C_Data i2cData;
    i2cData.address = g_espI2cAddress;
   10f0e:	4b32      	ldr	r3, [pc, #200]	; (10fd8 <vEspI2cTask+0xdc>)
   10f10:	781a      	ldrb	r2, [r3, #0]
   10f12:	230c      	movs	r3, #12
   10f14:	18fb      	adds	r3, r7, r3
   10f16:	701a      	strb	r2, [r3, #0]
    i2cData.msgOut  = txBuff;
   10f18:	230c      	movs	r3, #12
   10f1a:	18fb      	adds	r3, r7, r3
   10f1c:	4a30      	ldr	r2, [pc, #192]	; (10fe0 <vEspI2cTask+0xe4>)
   10f1e:	605a      	str	r2, [r3, #4]
    i2cData.lenOut  = sizeof(txBuff);
   10f20:	230c      	movs	r3, #12
   10f22:	18fb      	adds	r3, r7, r3
   10f24:	2204      	movs	r2, #4
   10f26:	81da      	strh	r2, [r3, #14]
    i2cData.msgIn   = NULL;
   10f28:	230c      	movs	r3, #12
   10f2a:	18fb      	adds	r3, r7, r3
   10f2c:	2200      	movs	r2, #0
   10f2e:	609a      	str	r2, [r3, #8]
    i2cData.lenIn   = 0;
   10f30:	230c      	movs	r3, #12
   10f32:	18fb      	adds	r3, r7, r3
   10f34:	2200      	movs	r2, #0
   10f36:	819a      	strh	r2, [r3, #12]
	
	//esp_i2c_set_color_flag(ESP_COLOR_BLUE);

    while (1)
    {
        esp_color_t currentColor = g_colorFlag;
   10f38:	231f      	movs	r3, #31
   10f3a:	18fb      	adds	r3, r7, r3
   10f3c:	4a29      	ldr	r2, [pc, #164]	; (10fe4 <vEspI2cTask+0xe8>)
   10f3e:	7812      	ldrb	r2, [r2, #0]
   10f40:	701a      	strb	r2, [r3, #0]
        if (currentColor != g_lastColor)
   10f42:	4b29      	ldr	r3, [pc, #164]	; (10fe8 <vEspI2cTask+0xec>)
   10f44:	781b      	ldrb	r3, [r3, #0]
   10f46:	221f      	movs	r2, #31
   10f48:	18ba      	adds	r2, r7, r2
   10f4a:	7812      	ldrb	r2, [r2, #0]
   10f4c:	429a      	cmp	r2, r3
   10f4e:	d03e      	beq.n	10fce <vEspI2cTask+0xd2>
        {
            g_lastColor = currentColor;
   10f50:	4b25      	ldr	r3, [pc, #148]	; (10fe8 <vEspI2cTask+0xec>)
   10f52:	221f      	movs	r2, #31
   10f54:	18ba      	adds	r2, r7, r2
   10f56:	7812      	ldrb	r2, [r2, #0]
   10f58:	701a      	strb	r2, [r3, #0]

            uint8_t r, g, b;
            _mapColorToRGB(currentColor, &r, &g, &b);
   10f5a:	2309      	movs	r3, #9
   10f5c:	18fc      	adds	r4, r7, r3
   10f5e:	230a      	movs	r3, #10
   10f60:	18fa      	adds	r2, r7, r3
   10f62:	230b      	movs	r3, #11
   10f64:	18f9      	adds	r1, r7, r3
   10f66:	231f      	movs	r3, #31
   10f68:	18fb      	adds	r3, r7, r3
   10f6a:	7818      	ldrb	r0, [r3, #0]
   10f6c:	0023      	movs	r3, r4
   10f6e:	4c1f      	ldr	r4, [pc, #124]	; (10fec <vEspI2cTask+0xf0>)
   10f70:	47a0      	blx	r4
            txBuff[0] = 1; // SET_COLOR command
   10f72:	4b1b      	ldr	r3, [pc, #108]	; (10fe0 <vEspI2cTask+0xe4>)
   10f74:	2201      	movs	r2, #1
   10f76:	701a      	strb	r2, [r3, #0]
            txBuff[1] = r;
   10f78:	230b      	movs	r3, #11
   10f7a:	18fb      	adds	r3, r7, r3
   10f7c:	781a      	ldrb	r2, [r3, #0]
   10f7e:	4b18      	ldr	r3, [pc, #96]	; (10fe0 <vEspI2cTask+0xe4>)
   10f80:	705a      	strb	r2, [r3, #1]
            txBuff[2] = g;
   10f82:	230a      	movs	r3, #10
   10f84:	18fb      	adds	r3, r7, r3
   10f86:	781a      	ldrb	r2, [r3, #0]
   10f88:	4b15      	ldr	r3, [pc, #84]	; (10fe0 <vEspI2cTask+0xe4>)
   10f8a:	709a      	strb	r2, [r3, #2]
            txBuff[3] = b;
   10f8c:	2309      	movs	r3, #9
   10f8e:	18fb      	adds	r3, r7, r3
   10f90:	781a      	ldrb	r2, [r3, #0]
   10f92:	4b13      	ldr	r3, [pc, #76]	; (10fe0 <vEspI2cTask+0xe4>)
   10f94:	70da      	strb	r2, [r3, #3]

            if (I2cGetMutex(pdMS_TO_TICKS(50)) == ERROR_NONE) {
   10f96:	2032      	movs	r0, #50	; 0x32
   10f98:	4b15      	ldr	r3, [pc, #84]	; (10ff0 <vEspI2cTask+0xf4>)
   10f9a:	4798      	blx	r3
   10f9c:	1e03      	subs	r3, r0, #0
   10f9e:	d112      	bne.n	10fc6 <vEspI2cTask+0xca>
                if (I2cWriteData(&i2cData) == 0) {
   10fa0:	230c      	movs	r3, #12
   10fa2:	18fb      	adds	r3, r7, r3
   10fa4:	0018      	movs	r0, r3
   10fa6:	4b13      	ldr	r3, [pc, #76]	; (10ff4 <vEspI2cTask+0xf8>)
   10fa8:	4798      	blx	r3
   10faa:	1e03      	subs	r3, r0, #0
   10fac:	d104      	bne.n	10fb8 <vEspI2cTask+0xbc>
                    SerialConsoleWriteString("esp_i2c: Color change command sent.\r\n");
   10fae:	4b12      	ldr	r3, [pc, #72]	; (10ff8 <vEspI2cTask+0xfc>)
   10fb0:	0018      	movs	r0, r3
   10fb2:	4b12      	ldr	r3, [pc, #72]	; (10ffc <vEspI2cTask+0x100>)
   10fb4:	4798      	blx	r3
   10fb6:	e003      	b.n	10fc0 <vEspI2cTask+0xc4>
                } else {
                    SerialConsoleWriteString("esp_i2c: Failed to send I2C data.\r\n");
   10fb8:	4b11      	ldr	r3, [pc, #68]	; (11000 <vEspI2cTask+0x104>)
   10fba:	0018      	movs	r0, r3
   10fbc:	4b0f      	ldr	r3, [pc, #60]	; (10ffc <vEspI2cTask+0x100>)
   10fbe:	4798      	blx	r3
                }
                I2cFreeMutex();
   10fc0:	4b10      	ldr	r3, [pc, #64]	; (11004 <vEspI2cTask+0x108>)
   10fc2:	4798      	blx	r3
   10fc4:	e003      	b.n	10fce <vEspI2cTask+0xd2>
            } else {
                SerialConsoleWriteString("esp_i2c: Could not obtain I2C mutex.\r\n");
   10fc6:	4b10      	ldr	r3, [pc, #64]	; (11008 <vEspI2cTask+0x10c>)
   10fc8:	0018      	movs	r0, r3
   10fca:	4b0c      	ldr	r3, [pc, #48]	; (10ffc <vEspI2cTask+0x100>)
   10fcc:	4798      	blx	r3
            }
        }

        vTaskDelay(pdMS_TO_TICKS(200));
   10fce:	20c8      	movs	r0, #200	; 0xc8
   10fd0:	4b0e      	ldr	r3, [pc, #56]	; (1100c <vEspI2cTask+0x110>)
   10fd2:	4798      	blx	r3
    {
   10fd4:	e7b0      	b.n	10f38 <vEspI2cTask+0x3c>
   10fd6:	46c0      	nop			; (mov r8, r8)
   10fd8:	20000014 	.word	0x20000014
   10fdc:	00010ea5 	.word	0x00010ea5
   10fe0:	20000434 	.word	0x20000434
   10fe4:	20000430 	.word	0x20000430
   10fe8:	20000431 	.word	0x20000431
   10fec:	00010dd1 	.word	0x00010dd1
   10ff0:	00010b49 	.word	0x00010b49
   10ff4:	00010a99 	.word	0x00010a99
   10ff8:	0003434c 	.word	0x0003434c
   10ffc:	0001a691 	.word	0x0001a691
   11000:	00034374 	.word	0x00034374
   11004:	00010b11 	.word	0x00010b11
   11008:	00034398 	.word	0x00034398
   1100c:	00018a05 	.word	0x00018a05

00011010 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11010:	b580      	push	{r7, lr}
   11012:	b084      	sub	sp, #16
   11014:	af00      	add	r7, sp, #0
   11016:	0002      	movs	r2, r0
   11018:	1dfb      	adds	r3, r7, #7
   1101a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1101c:	230f      	movs	r3, #15
   1101e:	18fb      	adds	r3, r7, r3
   11020:	1dfa      	adds	r2, r7, #7
   11022:	7812      	ldrb	r2, [r2, #0]
   11024:	09d2      	lsrs	r2, r2, #7
   11026:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11028:	230e      	movs	r3, #14
   1102a:	18fb      	adds	r3, r7, r3
   1102c:	1dfa      	adds	r2, r7, #7
   1102e:	7812      	ldrb	r2, [r2, #0]
   11030:	0952      	lsrs	r2, r2, #5
   11032:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11034:	4b0d      	ldr	r3, [pc, #52]	; (1106c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11036:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11038:	230f      	movs	r3, #15
   1103a:	18fb      	adds	r3, r7, r3
   1103c:	781b      	ldrb	r3, [r3, #0]
   1103e:	2b00      	cmp	r3, #0
   11040:	d10f      	bne.n	11062 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11042:	230f      	movs	r3, #15
   11044:	18fb      	adds	r3, r7, r3
   11046:	781b      	ldrb	r3, [r3, #0]
   11048:	009b      	lsls	r3, r3, #2
   1104a:	2210      	movs	r2, #16
   1104c:	4694      	mov	ip, r2
   1104e:	44bc      	add	ip, r7
   11050:	4463      	add	r3, ip
   11052:	3b08      	subs	r3, #8
   11054:	681a      	ldr	r2, [r3, #0]
   11056:	230e      	movs	r3, #14
   11058:	18fb      	adds	r3, r7, r3
   1105a:	781b      	ldrb	r3, [r3, #0]
   1105c:	01db      	lsls	r3, r3, #7
   1105e:	18d3      	adds	r3, r2, r3
   11060:	e000      	b.n	11064 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11062:	2300      	movs	r3, #0
	}
}
   11064:	0018      	movs	r0, r3
   11066:	46bd      	mov	sp, r7
   11068:	b004      	add	sp, #16
   1106a:	bd80      	pop	{r7, pc}
   1106c:	41004400 	.word	0x41004400

00011070 <system_interrupt_enable>:
{
   11070:	b580      	push	{r7, lr}
   11072:	b082      	sub	sp, #8
   11074:	af00      	add	r7, sp, #0
   11076:	0002      	movs	r2, r0
   11078:	1dfb      	adds	r3, r7, #7
   1107a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1107c:	4b06      	ldr	r3, [pc, #24]	; (11098 <system_interrupt_enable+0x28>)
   1107e:	1dfa      	adds	r2, r7, #7
   11080:	7812      	ldrb	r2, [r2, #0]
   11082:	0011      	movs	r1, r2
   11084:	221f      	movs	r2, #31
   11086:	400a      	ands	r2, r1
   11088:	2101      	movs	r1, #1
   1108a:	4091      	lsls	r1, r2
   1108c:	000a      	movs	r2, r1
   1108e:	601a      	str	r2, [r3, #0]
}
   11090:	46c0      	nop			; (mov r8, r8)
   11092:	46bd      	mov	sp, r7
   11094:	b002      	add	sp, #8
   11096:	bd80      	pop	{r7, pc}
   11098:	e000e100 	.word	0xe000e100

0001109c <system_interrupt_disable>:
{
   1109c:	b580      	push	{r7, lr}
   1109e:	b082      	sub	sp, #8
   110a0:	af00      	add	r7, sp, #0
   110a2:	0002      	movs	r2, r0
   110a4:	1dfb      	adds	r3, r7, #7
   110a6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   110a8:	4a07      	ldr	r2, [pc, #28]	; (110c8 <system_interrupt_disable+0x2c>)
   110aa:	1dfb      	adds	r3, r7, #7
   110ac:	781b      	ldrb	r3, [r3, #0]
   110ae:	0019      	movs	r1, r3
   110b0:	231f      	movs	r3, #31
   110b2:	400b      	ands	r3, r1
   110b4:	2101      	movs	r1, #1
   110b6:	4099      	lsls	r1, r3
   110b8:	000b      	movs	r3, r1
   110ba:	0019      	movs	r1, r3
   110bc:	2380      	movs	r3, #128	; 0x80
   110be:	50d1      	str	r1, [r2, r3]
}
   110c0:	46c0      	nop			; (mov r8, r8)
   110c2:	46bd      	mov	sp, r7
   110c4:	b002      	add	sp, #8
   110c6:	bd80      	pop	{r7, pc}
   110c8:	e000e100 	.word	0xe000e100

000110cc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   110cc:	b580      	push	{r7, lr}
   110ce:	b082      	sub	sp, #8
   110d0:	af00      	add	r7, sp, #0
   110d2:	0002      	movs	r2, r0
   110d4:	1dfb      	adds	r3, r7, #7
   110d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   110d8:	1dfb      	adds	r3, r7, #7
   110da:	781b      	ldrb	r3, [r3, #0]
   110dc:	0018      	movs	r0, r3
   110de:	4b03      	ldr	r3, [pc, #12]	; (110ec <port_get_group_from_gpio_pin+0x20>)
   110e0:	4798      	blx	r3
   110e2:	0003      	movs	r3, r0
}
   110e4:	0018      	movs	r0, r3
   110e6:	46bd      	mov	sp, r7
   110e8:	b002      	add	sp, #8
   110ea:	bd80      	pop	{r7, pc}
   110ec:	00011011 	.word	0x00011011

000110f0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   110f0:	b580      	push	{r7, lr}
   110f2:	b082      	sub	sp, #8
   110f4:	af00      	add	r7, sp, #0
   110f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   110f8:	687b      	ldr	r3, [r7, #4]
   110fa:	2200      	movs	r2, #0
   110fc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   110fe:	687b      	ldr	r3, [r7, #4]
   11100:	2201      	movs	r2, #1
   11102:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11104:	687b      	ldr	r3, [r7, #4]
   11106:	2200      	movs	r2, #0
   11108:	709a      	strb	r2, [r3, #2]
}
   1110a:	46c0      	nop			; (mov r8, r8)
   1110c:	46bd      	mov	sp, r7
   1110e:	b002      	add	sp, #8
   11110:	bd80      	pop	{r7, pc}
	...

00011114 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11114:	b580      	push	{r7, lr}
   11116:	b084      	sub	sp, #16
   11118:	af00      	add	r7, sp, #0
   1111a:	0002      	movs	r2, r0
   1111c:	1dfb      	adds	r3, r7, #7
   1111e:	701a      	strb	r2, [r3, #0]
   11120:	1dbb      	adds	r3, r7, #6
   11122:	1c0a      	adds	r2, r1, #0
   11124:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11126:	1dfb      	adds	r3, r7, #7
   11128:	781b      	ldrb	r3, [r3, #0]
   1112a:	0018      	movs	r0, r3
   1112c:	4b0d      	ldr	r3, [pc, #52]	; (11164 <port_pin_set_output_level+0x50>)
   1112e:	4798      	blx	r3
   11130:	0003      	movs	r3, r0
   11132:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11134:	1dfb      	adds	r3, r7, #7
   11136:	781b      	ldrb	r3, [r3, #0]
   11138:	221f      	movs	r2, #31
   1113a:	4013      	ands	r3, r2
   1113c:	2201      	movs	r2, #1
   1113e:	409a      	lsls	r2, r3
   11140:	0013      	movs	r3, r2
   11142:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11144:	1dbb      	adds	r3, r7, #6
   11146:	781b      	ldrb	r3, [r3, #0]
   11148:	2b00      	cmp	r3, #0
   1114a:	d003      	beq.n	11154 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1114c:	68fb      	ldr	r3, [r7, #12]
   1114e:	68ba      	ldr	r2, [r7, #8]
   11150:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11152:	e002      	b.n	1115a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11154:	68fb      	ldr	r3, [r7, #12]
   11156:	68ba      	ldr	r2, [r7, #8]
   11158:	615a      	str	r2, [r3, #20]
}
   1115a:	46c0      	nop			; (mov r8, r8)
   1115c:	46bd      	mov	sp, r7
   1115e:	b004      	add	sp, #16
   11160:	bd80      	pop	{r7, pc}
   11162:	46c0      	nop			; (mov r8, r8)
   11164:	000110cd 	.word	0x000110cd

00011168 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   11168:	b580      	push	{r7, lr}
   1116a:	b084      	sub	sp, #16
   1116c:	af00      	add	r7, sp, #0
   1116e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11170:	687b      	ldr	r3, [r7, #4]
   11172:	681b      	ldr	r3, [r3, #0]
   11174:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   11176:	68fb      	ldr	r3, [r7, #12]
   11178:	69db      	ldr	r3, [r3, #28]
   1117a:	1e5a      	subs	r2, r3, #1
   1117c:	4193      	sbcs	r3, r2
   1117e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   11180:	0018      	movs	r0, r3
   11182:	46bd      	mov	sp, r7
   11184:	b004      	add	sp, #16
   11186:	bd80      	pop	{r7, pc}

00011188 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   11188:	b580      	push	{r7, lr}
   1118a:	b082      	sub	sp, #8
   1118c:	af00      	add	r7, sp, #0
   1118e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   11190:	687b      	ldr	r3, [r7, #4]
   11192:	2201      	movs	r2, #1
   11194:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   11196:	687b      	ldr	r3, [r7, #4]
   11198:	2200      	movs	r2, #0
   1119a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1119c:	687b      	ldr	r3, [r7, #4]
   1119e:	2200      	movs	r2, #0
   111a0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   111a2:	687b      	ldr	r3, [r7, #4]
   111a4:	22c0      	movs	r2, #192	; 0xc0
   111a6:	0392      	lsls	r2, r2, #14
   111a8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   111aa:	687b      	ldr	r3, [r7, #4]
   111ac:	2200      	movs	r2, #0
   111ae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   111b0:	687b      	ldr	r3, [r7, #4]
   111b2:	2200      	movs	r2, #0
   111b4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   111b6:	687b      	ldr	r3, [r7, #4]
   111b8:	2201      	movs	r2, #1
   111ba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   111bc:	687b      	ldr	r3, [r7, #4]
   111be:	2201      	movs	r2, #1
   111c0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   111c2:	687b      	ldr	r3, [r7, #4]
   111c4:	2200      	movs	r2, #0
   111c6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   111c8:	687b      	ldr	r3, [r7, #4]
   111ca:	2224      	movs	r2, #36	; 0x24
   111cc:	2100      	movs	r1, #0
   111ce:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   111d0:	687b      	ldr	r3, [r7, #4]
   111d2:	3318      	adds	r3, #24
   111d4:	220c      	movs	r2, #12
   111d6:	2100      	movs	r1, #0
   111d8:	0018      	movs	r0, r3
   111da:	4b0a      	ldr	r3, [pc, #40]	; (11204 <spi_get_config_defaults+0x7c>)
   111dc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   111de:	687b      	ldr	r3, [r7, #4]
   111e0:	4a09      	ldr	r2, [pc, #36]	; (11208 <spi_get_config_defaults+0x80>)
   111e2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   111e4:	687b      	ldr	r3, [r7, #4]
   111e6:	2200      	movs	r2, #0
   111e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   111ea:	687b      	ldr	r3, [r7, #4]
   111ec:	2200      	movs	r2, #0
   111ee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   111f0:	687b      	ldr	r3, [r7, #4]
   111f2:	2200      	movs	r2, #0
   111f4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   111f6:	687b      	ldr	r3, [r7, #4]
   111f8:	2200      	movs	r2, #0
   111fa:	635a      	str	r2, [r3, #52]	; 0x34

};
   111fc:	46c0      	nop			; (mov r8, r8)
   111fe:	46bd      	mov	sp, r7
   11200:	b002      	add	sp, #8
   11202:	bd80      	pop	{r7, pc}
   11204:	000328a7 	.word	0x000328a7
   11208:	000186a0 	.word	0x000186a0

0001120c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1120c:	b580      	push	{r7, lr}
   1120e:	b084      	sub	sp, #16
   11210:	af00      	add	r7, sp, #0
   11212:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11214:	687b      	ldr	r3, [r7, #4]
   11216:	681b      	ldr	r3, [r3, #0]
   11218:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1121a:	687b      	ldr	r3, [r7, #4]
   1121c:	681b      	ldr	r3, [r3, #0]
   1121e:	0018      	movs	r0, r3
   11220:	4b0b      	ldr	r3, [pc, #44]	; (11250 <spi_enable+0x44>)
   11222:	4798      	blx	r3
   11224:	0003      	movs	r3, r0
   11226:	0018      	movs	r0, r3
   11228:	4b0a      	ldr	r3, [pc, #40]	; (11254 <spi_enable+0x48>)
   1122a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1122c:	46c0      	nop			; (mov r8, r8)
   1122e:	687b      	ldr	r3, [r7, #4]
   11230:	0018      	movs	r0, r3
   11232:	4b09      	ldr	r3, [pc, #36]	; (11258 <spi_enable+0x4c>)
   11234:	4798      	blx	r3
   11236:	1e03      	subs	r3, r0, #0
   11238:	d1f9      	bne.n	1122e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1123a:	68fb      	ldr	r3, [r7, #12]
   1123c:	681b      	ldr	r3, [r3, #0]
   1123e:	2202      	movs	r2, #2
   11240:	431a      	orrs	r2, r3
   11242:	68fb      	ldr	r3, [r7, #12]
   11244:	601a      	str	r2, [r3, #0]
}
   11246:	46c0      	nop			; (mov r8, r8)
   11248:	46bd      	mov	sp, r7
   1124a:	b004      	add	sp, #16
   1124c:	bd80      	pop	{r7, pc}
   1124e:	46c0      	nop			; (mov r8, r8)
   11250:	00023fcd 	.word	0x00023fcd
   11254:	00011071 	.word	0x00011071
   11258:	00011169 	.word	0x00011169

0001125c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1125c:	b580      	push	{r7, lr}
   1125e:	b084      	sub	sp, #16
   11260:	af00      	add	r7, sp, #0
   11262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11264:	687b      	ldr	r3, [r7, #4]
   11266:	681b      	ldr	r3, [r3, #0]
   11268:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1126a:	687b      	ldr	r3, [r7, #4]
   1126c:	681b      	ldr	r3, [r3, #0]
   1126e:	0018      	movs	r0, r3
   11270:	4b0e      	ldr	r3, [pc, #56]	; (112ac <spi_disable+0x50>)
   11272:	4798      	blx	r3
   11274:	0003      	movs	r3, r0
   11276:	0018      	movs	r0, r3
   11278:	4b0d      	ldr	r3, [pc, #52]	; (112b0 <spi_disable+0x54>)
   1127a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1127c:	46c0      	nop			; (mov r8, r8)
   1127e:	687b      	ldr	r3, [r7, #4]
   11280:	0018      	movs	r0, r3
   11282:	4b0c      	ldr	r3, [pc, #48]	; (112b4 <spi_disable+0x58>)
   11284:	4798      	blx	r3
   11286:	1e03      	subs	r3, r0, #0
   11288:	d1f9      	bne.n	1127e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1128a:	68fb      	ldr	r3, [r7, #12]
   1128c:	228f      	movs	r2, #143	; 0x8f
   1128e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   11290:	68fb      	ldr	r3, [r7, #12]
   11292:	228f      	movs	r2, #143	; 0x8f
   11294:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   11296:	68fb      	ldr	r3, [r7, #12]
   11298:	681b      	ldr	r3, [r3, #0]
   1129a:	2202      	movs	r2, #2
   1129c:	4393      	bics	r3, r2
   1129e:	001a      	movs	r2, r3
   112a0:	68fb      	ldr	r3, [r7, #12]
   112a2:	601a      	str	r2, [r3, #0]
}
   112a4:	46c0      	nop			; (mov r8, r8)
   112a6:	46bd      	mov	sp, r7
   112a8:	b004      	add	sp, #16
   112aa:	bd80      	pop	{r7, pc}
   112ac:	00023fcd 	.word	0x00023fcd
   112b0:	0001109d 	.word	0x0001109d
   112b4:	00011169 	.word	0x00011169

000112b8 <max31855_acquire_mutex>:
 * @brief Acquires the mutex protecting the MAX31855 SPI bus.
 *
 * @return pdTRUE if successful, pdFALSE otherwise.
 */
static BaseType_t max31855_acquire_mutex(void)
{
   112b8:	b580      	push	{r7, lr}
   112ba:	b082      	sub	sp, #8
   112bc:	af00      	add	r7, sp, #0
    const TickType_t xMaxWait = pdMS_TO_TICKS(100);
   112be:	2364      	movs	r3, #100	; 0x64
   112c0:	607b      	str	r3, [r7, #4]
    return xSemaphoreTake(xMax31855Mutex, xMaxWait);
   112c2:	4b06      	ldr	r3, [pc, #24]	; (112dc <max31855_acquire_mutex+0x24>)
   112c4:	681b      	ldr	r3, [r3, #0]
   112c6:	687a      	ldr	r2, [r7, #4]
   112c8:	0011      	movs	r1, r2
   112ca:	0018      	movs	r0, r3
   112cc:	4b04      	ldr	r3, [pc, #16]	; (112e0 <max31855_acquire_mutex+0x28>)
   112ce:	4798      	blx	r3
   112d0:	0003      	movs	r3, r0
}
   112d2:	0018      	movs	r0, r3
   112d4:	46bd      	mov	sp, r7
   112d6:	b002      	add	sp, #8
   112d8:	bd80      	pop	{r7, pc}
   112da:	46c0      	nop			; (mov r8, r8)
   112dc:	20000474 	.word	0x20000474
   112e0:	00017cb1 	.word	0x00017cb1

000112e4 <max31855_release_mutex>:

/**
 * @brief Releases the mutex after SPI transaction.
 */
static void max31855_release_mutex(void)
{
   112e4:	b5b0      	push	{r4, r5, r7, lr}
   112e6:	af00      	add	r7, sp, #0
    xSemaphoreGive(xMax31855Mutex);
   112e8:	4b04      	ldr	r3, [pc, #16]	; (112fc <max31855_release_mutex+0x18>)
   112ea:	6818      	ldr	r0, [r3, #0]
   112ec:	2300      	movs	r3, #0
   112ee:	2200      	movs	r2, #0
   112f0:	2100      	movs	r1, #0
   112f2:	4c03      	ldr	r4, [pc, #12]	; (11300 <max31855_release_mutex+0x1c>)
   112f4:	47a0      	blx	r4
}
   112f6:	46c0      	nop			; (mov r8, r8)
   112f8:	46bd      	mov	sp, r7
   112fa:	bdb0      	pop	{r4, r5, r7, pc}
   112fc:	20000474 	.word	0x20000474
   11300:	00016fa1 	.word	0x00016fa1

00011304 <max31855_spi_disable_and_reset>:
 * @brief Disables and resets the SPI module used by the MAX31855.
 *
 * Stops ongoing SPI transactions and resets SERCOM hardware block.
 */
void max31855_spi_disable_and_reset(void)
{
   11304:	b580      	push	{r7, lr}
   11306:	af00      	add	r7, sp, #0
    spi_disable(&max31855_spi_module);
   11308:	4b05      	ldr	r3, [pc, #20]	; (11320 <max31855_spi_disable_and_reset+0x1c>)
   1130a:	0018      	movs	r0, r3
   1130c:	4b05      	ldr	r3, [pc, #20]	; (11324 <max31855_spi_disable_and_reset+0x20>)
   1130e:	4798      	blx	r3
    spi_reset(&max31855_spi_module);
   11310:	4b03      	ldr	r3, [pc, #12]	; (11320 <max31855_spi_disable_and_reset+0x1c>)
   11312:	0018      	movs	r0, r3
   11314:	4b04      	ldr	r3, [pc, #16]	; (11328 <max31855_spi_disable_and_reset+0x24>)
   11316:	4798      	blx	r3

    /* Note: If spi_reset() is unavailable, use system_periph_reset(SERCOM3) or equivalent. */
}
   11318:	46c0      	nop			; (mov r8, r8)
   1131a:	46bd      	mov	sp, r7
   1131c:	bd80      	pop	{r7, pc}
   1131e:	46c0      	nop			; (mov r8, r8)
   11320:	20000438 	.word	0x20000438
   11324:	0001125d 	.word	0x0001125d
   11328:	000244a5 	.word	0x000244a5

0001132c <max31855_spi_reinit>:
 * @brief Reinitializes the SPI configuration for the MAX31855 after reset.
 *
 * Call after max31855_spi_disable_and_reset() to restore SPI operation.
 */
void max31855_spi_reinit(void)
{
   1132c:	b580      	push	{r7, lr}
   1132e:	b08e      	sub	sp, #56	; 0x38
   11330:	af00      	add	r7, sp, #0
    struct spi_config config_spi;
    spi_get_config_defaults(&config_spi);
   11332:	003b      	movs	r3, r7
   11334:	0018      	movs	r0, r3
   11336:	4b18      	ldr	r3, [pc, #96]	; (11398 <max31855_spi_reinit+0x6c>)
   11338:	4798      	blx	r3

    config_spi.mode                   = SPI_MODE_MASTER;
   1133a:	003b      	movs	r3, r7
   1133c:	2201      	movs	r2, #1
   1133e:	701a      	strb	r2, [r3, #0]
    config_spi.data_order             = SPI_DATA_ORDER_MSB;
   11340:	003b      	movs	r3, r7
   11342:	2200      	movs	r2, #0
   11344:	605a      	str	r2, [r3, #4]
    config_spi.transfer_mode          = SPI_TRANSFER_MODE_0;
   11346:	003b      	movs	r3, r7
   11348:	2200      	movs	r2, #0
   1134a:	609a      	str	r2, [r3, #8]
    config_spi.mux_setting            = SPI_SIGNAL_MUX_SETTING_D;
   1134c:	003b      	movs	r3, r7
   1134e:	22c0      	movs	r2, #192	; 0xc0
   11350:	0392      	lsls	r2, r2, #14
   11352:	60da      	str	r2, [r3, #12]
    config_spi.pinmux_pad0            = PINMUX_UNUSED;
   11354:	003b      	movs	r3, r7
   11356:	2201      	movs	r2, #1
   11358:	4252      	negs	r2, r2
   1135a:	629a      	str	r2, [r3, #40]	; 0x28
    config_spi.pinmux_pad1            = PINMUX_PA17D_SERCOM3_PAD1;
   1135c:	003b      	movs	r3, r7
   1135e:	4a0f      	ldr	r2, [pc, #60]	; (1139c <max31855_spi_reinit+0x70>)
   11360:	62da      	str	r2, [r3, #44]	; 0x2c
    config_spi.pinmux_pad2            = PINMUX_UNUSED;
   11362:	003b      	movs	r3, r7
   11364:	2201      	movs	r2, #1
   11366:	4252      	negs	r2, r2
   11368:	631a      	str	r2, [r3, #48]	; 0x30
    config_spi.pinmux_pad3            = PINMUX_PA21D_SERCOM3_PAD3;
   1136a:	003b      	movs	r3, r7
   1136c:	4a0c      	ldr	r2, [pc, #48]	; (113a0 <max31855_spi_reinit+0x74>)
   1136e:	635a      	str	r2, [r3, #52]	; 0x34
    config_spi.run_in_standby         = true;
   11370:	003b      	movs	r3, r7
   11372:	2201      	movs	r2, #1
   11374:	745a      	strb	r2, [r3, #17]
    config_spi.mode_specific.master.baudrate = 2000000;
   11376:	003b      	movs	r3, r7
   11378:	4a0a      	ldr	r2, [pc, #40]	; (113a4 <max31855_spi_reinit+0x78>)
   1137a:	619a      	str	r2, [r3, #24]

    spi_init(&max31855_spi_module, SERCOM3, &config_spi);
   1137c:	003a      	movs	r2, r7
   1137e:	490a      	ldr	r1, [pc, #40]	; (113a8 <max31855_spi_reinit+0x7c>)
   11380:	4b0a      	ldr	r3, [pc, #40]	; (113ac <max31855_spi_reinit+0x80>)
   11382:	0018      	movs	r0, r3
   11384:	4b0a      	ldr	r3, [pc, #40]	; (113b0 <max31855_spi_reinit+0x84>)
   11386:	4798      	blx	r3
    spi_enable(&max31855_spi_module);
   11388:	4b08      	ldr	r3, [pc, #32]	; (113ac <max31855_spi_reinit+0x80>)
   1138a:	0018      	movs	r0, r3
   1138c:	4b09      	ldr	r3, [pc, #36]	; (113b4 <max31855_spi_reinit+0x88>)
   1138e:	4798      	blx	r3

    /* Optional: Reconfigure CS pin here if needed */
}
   11390:	46c0      	nop			; (mov r8, r8)
   11392:	46bd      	mov	sp, r7
   11394:	b00e      	add	sp, #56	; 0x38
   11396:	bd80      	pop	{r7, pc}
   11398:	00011189 	.word	0x00011189
   1139c:	00110003 	.word	0x00110003
   113a0:	00150003 	.word	0x00150003
   113a4:	001e8480 	.word	0x001e8480
   113a8:	42001400 	.word	0x42001400
   113ac:	20000438 	.word	0x20000438
   113b0:	000247bd 	.word	0x000247bd
   113b4:	0001120d 	.word	0x0001120d

000113b8 <max31855_init>:
 * @brief Initializes the MAX31855 SPI interface and associated GPIO.
 *
 * Configures SERCOM as SPI master and sets up a mutex for safe access.
 */
void max31855_init(void)
{
   113b8:	b580      	push	{r7, lr}
   113ba:	b090      	sub	sp, #64	; 0x40
   113bc:	af00      	add	r7, sp, #0
    struct spi_config config_spi;
    spi_get_config_defaults(&config_spi);
   113be:	2308      	movs	r3, #8
   113c0:	18fb      	adds	r3, r7, r3
   113c2:	0018      	movs	r0, r3
   113c4:	4b2c      	ldr	r3, [pc, #176]	; (11478 <max31855_init+0xc0>)
   113c6:	4798      	blx	r3

    config_spi.mode = SPI_MODE_MASTER;
   113c8:	2308      	movs	r3, #8
   113ca:	18fb      	adds	r3, r7, r3
   113cc:	2201      	movs	r2, #1
   113ce:	701a      	strb	r2, [r3, #0]
    config_spi.data_order = SPI_DATA_ORDER_MSB;
   113d0:	2308      	movs	r3, #8
   113d2:	18fb      	adds	r3, r7, r3
   113d4:	2200      	movs	r2, #0
   113d6:	605a      	str	r2, [r3, #4]
    config_spi.transfer_mode = SPI_TRANSFER_MODE_0;
   113d8:	2308      	movs	r3, #8
   113da:	18fb      	adds	r3, r7, r3
   113dc:	2200      	movs	r2, #0
   113de:	609a      	str	r2, [r3, #8]
    config_spi.mux_setting = SPI_SIGNAL_MUX_SETTING_D;
   113e0:	2308      	movs	r3, #8
   113e2:	18fb      	adds	r3, r7, r3
   113e4:	22c0      	movs	r2, #192	; 0xc0
   113e6:	0392      	lsls	r2, r2, #14
   113e8:	60da      	str	r2, [r3, #12]
    config_spi.pinmux_pad0 = PINMUX_UNUSED;
   113ea:	2308      	movs	r3, #8
   113ec:	18fb      	adds	r3, r7, r3
   113ee:	2201      	movs	r2, #1
   113f0:	4252      	negs	r2, r2
   113f2:	629a      	str	r2, [r3, #40]	; 0x28
    config_spi.pinmux_pad1 = PINMUX_PA17D_SERCOM3_PAD1;
   113f4:	2308      	movs	r3, #8
   113f6:	18fb      	adds	r3, r7, r3
   113f8:	4a20      	ldr	r2, [pc, #128]	; (1147c <max31855_init+0xc4>)
   113fa:	62da      	str	r2, [r3, #44]	; 0x2c
    config_spi.pinmux_pad2 = PINMUX_UNUSED;
   113fc:	2308      	movs	r3, #8
   113fe:	18fb      	adds	r3, r7, r3
   11400:	2201      	movs	r2, #1
   11402:	4252      	negs	r2, r2
   11404:	631a      	str	r2, [r3, #48]	; 0x30
    config_spi.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;
   11406:	2308      	movs	r3, #8
   11408:	18fb      	adds	r3, r7, r3
   1140a:	4a1d      	ldr	r2, [pc, #116]	; (11480 <max31855_init+0xc8>)
   1140c:	635a      	str	r2, [r3, #52]	; 0x34
    config_spi.run_in_standby = true;
   1140e:	2308      	movs	r3, #8
   11410:	18fb      	adds	r3, r7, r3
   11412:	2201      	movs	r2, #1
   11414:	745a      	strb	r2, [r3, #17]
    config_spi.mode_specific.master.baudrate = 2000000;
   11416:	2308      	movs	r3, #8
   11418:	18fb      	adds	r3, r7, r3
   1141a:	4a1a      	ldr	r2, [pc, #104]	; (11484 <max31855_init+0xcc>)
   1141c:	619a      	str	r2, [r3, #24]

    spi_init(&max31855_spi_module, SERCOM3, &config_spi);
   1141e:	2308      	movs	r3, #8
   11420:	18fa      	adds	r2, r7, r3
   11422:	4919      	ldr	r1, [pc, #100]	; (11488 <max31855_init+0xd0>)
   11424:	4b19      	ldr	r3, [pc, #100]	; (1148c <max31855_init+0xd4>)
   11426:	0018      	movs	r0, r3
   11428:	4b19      	ldr	r3, [pc, #100]	; (11490 <max31855_init+0xd8>)
   1142a:	4798      	blx	r3
    spi_enable(&max31855_spi_module);
   1142c:	4b17      	ldr	r3, [pc, #92]	; (1148c <max31855_init+0xd4>)
   1142e:	0018      	movs	r0, r3
   11430:	4b18      	ldr	r3, [pc, #96]	; (11494 <max31855_init+0xdc>)
   11432:	4798      	blx	r3

    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);
   11434:	1d3b      	adds	r3, r7, #4
   11436:	0018      	movs	r0, r3
   11438:	4b17      	ldr	r3, [pc, #92]	; (11498 <max31855_init+0xe0>)
   1143a:	4798      	blx	r3
    pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1143c:	1d3b      	adds	r3, r7, #4
   1143e:	2201      	movs	r2, #1
   11440:	701a      	strb	r2, [r3, #0]
    port_pin_set_config(MAX31855_CS_PIN, &pin_conf);
   11442:	1d3b      	adds	r3, r7, #4
   11444:	0019      	movs	r1, r3
   11446:	2014      	movs	r0, #20
   11448:	4b14      	ldr	r3, [pc, #80]	; (1149c <max31855_init+0xe4>)
   1144a:	4798      	blx	r3
    port_pin_set_output_level(MAX31855_CS_PIN, true);
   1144c:	2101      	movs	r1, #1
   1144e:	2014      	movs	r0, #20
   11450:	4b13      	ldr	r3, [pc, #76]	; (114a0 <max31855_init+0xe8>)
   11452:	4798      	blx	r3

    xMax31855Mutex = xSemaphoreCreateMutex();
   11454:	2001      	movs	r0, #1
   11456:	4b13      	ldr	r3, [pc, #76]	; (114a4 <max31855_init+0xec>)
   11458:	4798      	blx	r3
   1145a:	0002      	movs	r2, r0
   1145c:	4b12      	ldr	r3, [pc, #72]	; (114a8 <max31855_init+0xf0>)
   1145e:	601a      	str	r2, [r3, #0]
    if (xMax31855Mutex == NULL)
   11460:	4b11      	ldr	r3, [pc, #68]	; (114a8 <max31855_init+0xf0>)
   11462:	681b      	ldr	r3, [r3, #0]
   11464:	2b00      	cmp	r3, #0
   11466:	d103      	bne.n	11470 <max31855_init+0xb8>
    {
        SerialConsoleWriteString("ERROR: Could not create MAX31855 SPI mutex!\r\n");
   11468:	4b10      	ldr	r3, [pc, #64]	; (114ac <max31855_init+0xf4>)
   1146a:	0018      	movs	r0, r3
   1146c:	4b10      	ldr	r3, [pc, #64]	; (114b0 <max31855_init+0xf8>)
   1146e:	4798      	blx	r3
    }
}
   11470:	46c0      	nop			; (mov r8, r8)
   11472:	46bd      	mov	sp, r7
   11474:	b010      	add	sp, #64	; 0x40
   11476:	bd80      	pop	{r7, pc}
   11478:	00011189 	.word	0x00011189
   1147c:	00110003 	.word	0x00110003
   11480:	00150003 	.word	0x00150003
   11484:	001e8480 	.word	0x001e8480
   11488:	42001400 	.word	0x42001400
   1148c:	20000438 	.word	0x20000438
   11490:	000247bd 	.word	0x000247bd
   11494:	0001120d 	.word	0x0001120d
   11498:	000110f1 	.word	0x000110f1
   1149c:	000232fd 	.word	0x000232fd
   114a0:	00011115 	.word	0x00011115
   114a4:	00016f61 	.word	0x00016f61
   114a8:	20000474 	.word	0x20000474
   114ac:	000343c0 	.word	0x000343c0
   114b0:	0001a691 	.word	0x0001a691

000114b4 <max31855_read_temp>:
 * @brief Reads the temperature value from the MAX31855 sensor.
 *
 * @return Temperature in degrees Celsius. Returns -1000.0f on failure.
 */
float max31855_read_temp(void)
{
   114b4:	b5b0      	push	{r4, r5, r7, lr}
   114b6:	b086      	sub	sp, #24
   114b8:	af00      	add	r7, sp, #0
    enum status_code spi_status;
    float temperatureC = -1000.0f;
   114ba:	4b35      	ldr	r3, [pc, #212]	; (11590 <max31855_read_temp+0xdc>)
   114bc:	617b      	str	r3, [r7, #20]

    if (max31855_acquire_mutex() == pdTRUE)
   114be:	4b35      	ldr	r3, [pc, #212]	; (11594 <max31855_read_temp+0xe0>)
   114c0:	4798      	blx	r3
   114c2:	0003      	movs	r3, r0
   114c4:	2b01      	cmp	r3, #1
   114c6:	d159      	bne.n	1157c <max31855_read_temp+0xc8>
    {
        uint8_t rx_buffer[4] = {0};
   114c8:	2308      	movs	r3, #8
   114ca:	18fb      	adds	r3, r7, r3
   114cc:	2200      	movs	r2, #0
   114ce:	601a      	str	r2, [r3, #0]
        uint8_t tx_buffer[4] = {0xFF, 0xFF, 0xFF, 0xFF};
   114d0:	1d3b      	adds	r3, r7, #4
   114d2:	4a31      	ldr	r2, [pc, #196]	; (11598 <max31855_read_temp+0xe4>)
   114d4:	6812      	ldr	r2, [r2, #0]
   114d6:	601a      	str	r2, [r3, #0]

        port_pin_set_output_level(MAX31855_CS_PIN, false);
   114d8:	2100      	movs	r1, #0
   114da:	2014      	movs	r0, #20
   114dc:	4b2f      	ldr	r3, [pc, #188]	; (1159c <max31855_read_temp+0xe8>)
   114de:	4798      	blx	r3
        spi_status = spi_transceive_buffer_wait(
   114e0:	2311      	movs	r3, #17
   114e2:	18fc      	adds	r4, r7, r3
   114e4:	2308      	movs	r3, #8
   114e6:	18fa      	adds	r2, r7, r3
   114e8:	1d39      	adds	r1, r7, #4
   114ea:	482d      	ldr	r0, [pc, #180]	; (115a0 <max31855_read_temp+0xec>)
   114ec:	2304      	movs	r3, #4
   114ee:	4d2d      	ldr	r5, [pc, #180]	; (115a4 <max31855_read_temp+0xf0>)
   114f0:	47a8      	blx	r5
   114f2:	0003      	movs	r3, r0
   114f4:	7023      	strb	r3, [r4, #0]
            &max31855_spi_module, tx_buffer, rx_buffer, 4);
        port_pin_set_output_level(MAX31855_CS_PIN, true);
   114f6:	2101      	movs	r1, #1
   114f8:	2014      	movs	r0, #20
   114fa:	4b28      	ldr	r3, [pc, #160]	; (1159c <max31855_read_temp+0xe8>)
   114fc:	4798      	blx	r3

        if (spi_status == STATUS_OK)
   114fe:	2311      	movs	r3, #17
   11500:	18fb      	adds	r3, r7, r3
   11502:	781b      	ldrb	r3, [r3, #0]
   11504:	2b00      	cmp	r3, #0
   11506:	d136      	bne.n	11576 <max31855_read_temp+0xc2>
        {
            uint32_t rawData = ((uint32_t)rx_buffer[0] << 24) |
   11508:	2308      	movs	r3, #8
   1150a:	18fb      	adds	r3, r7, r3
   1150c:	781b      	ldrb	r3, [r3, #0]
   1150e:	061a      	lsls	r2, r3, #24
                               ((uint32_t)rx_buffer[1] << 16) |
   11510:	2308      	movs	r3, #8
   11512:	18fb      	adds	r3, r7, r3
   11514:	785b      	ldrb	r3, [r3, #1]
   11516:	041b      	lsls	r3, r3, #16
            uint32_t rawData = ((uint32_t)rx_buffer[0] << 24) |
   11518:	431a      	orrs	r2, r3
                               ((uint32_t)rx_buffer[2] << 8)  |
   1151a:	2308      	movs	r3, #8
   1151c:	18fb      	adds	r3, r7, r3
   1151e:	789b      	ldrb	r3, [r3, #2]
   11520:	021b      	lsls	r3, r3, #8
                               ((uint32_t)rx_buffer[1] << 16) |
   11522:	4313      	orrs	r3, r2
                               ((uint32_t)rx_buffer[3]);
   11524:	2208      	movs	r2, #8
   11526:	18ba      	adds	r2, r7, r2
   11528:	78d2      	ldrb	r2, [r2, #3]
            uint32_t rawData = ((uint32_t)rx_buffer[0] << 24) |
   1152a:	4313      	orrs	r3, r2
   1152c:	60fb      	str	r3, [r7, #12]

            int16_t tempData = (rawData >> 18) & 0x3FFF;
   1152e:	68fb      	ldr	r3, [r7, #12]
   11530:	0c9a      	lsrs	r2, r3, #18
   11532:	2312      	movs	r3, #18
   11534:	18fb      	adds	r3, r7, r3
   11536:	801a      	strh	r2, [r3, #0]
            if (tempData & 0x2000)
   11538:	2312      	movs	r3, #18
   1153a:	18fb      	adds	r3, r7, r3
   1153c:	881b      	ldrh	r3, [r3, #0]
   1153e:	001a      	movs	r2, r3
   11540:	2380      	movs	r3, #128	; 0x80
   11542:	019b      	lsls	r3, r3, #6
   11544:	4013      	ands	r3, r2
   11546:	d007      	beq.n	11558 <max31855_read_temp+0xa4>
            {
                tempData |= 0xC000;
   11548:	2312      	movs	r3, #18
   1154a:	18fb      	adds	r3, r7, r3
   1154c:	2212      	movs	r2, #18
   1154e:	18ba      	adds	r2, r7, r2
   11550:	8812      	ldrh	r2, [r2, #0]
   11552:	4915      	ldr	r1, [pc, #84]	; (115a8 <max31855_read_temp+0xf4>)
   11554:	430a      	orrs	r2, r1
   11556:	801a      	strh	r2, [r3, #0]
            }
            temperatureC = (float)tempData * 0.25f;
   11558:	2312      	movs	r3, #18
   1155a:	18fb      	adds	r3, r7, r3
   1155c:	2200      	movs	r2, #0
   1155e:	5e9a      	ldrsh	r2, [r3, r2]
   11560:	4b12      	ldr	r3, [pc, #72]	; (115ac <max31855_read_temp+0xf8>)
   11562:	0010      	movs	r0, r2
   11564:	4798      	blx	r3
   11566:	1c02      	adds	r2, r0, #0
   11568:	4b11      	ldr	r3, [pc, #68]	; (115b0 <max31855_read_temp+0xfc>)
   1156a:	21fa      	movs	r1, #250	; 0xfa
   1156c:	0589      	lsls	r1, r1, #22
   1156e:	1c10      	adds	r0, r2, #0
   11570:	4798      	blx	r3
   11572:	1c03      	adds	r3, r0, #0
   11574:	617b      	str	r3, [r7, #20]
        }

        max31855_release_mutex();
   11576:	4b0f      	ldr	r3, [pc, #60]	; (115b4 <max31855_read_temp+0x100>)
   11578:	4798      	blx	r3
   1157a:	e003      	b.n	11584 <max31855_read_temp+0xd0>
    }
    else
    {
        SerialConsoleWriteString("WARNING: Could not acquire MAX31855 SPI mutex.\r\n");
   1157c:	4b0e      	ldr	r3, [pc, #56]	; (115b8 <max31855_read_temp+0x104>)
   1157e:	0018      	movs	r0, r3
   11580:	4b0e      	ldr	r3, [pc, #56]	; (115bc <max31855_read_temp+0x108>)
   11582:	4798      	blx	r3
    }

    return temperatureC;
   11584:	697b      	ldr	r3, [r7, #20]
}
   11586:	1c18      	adds	r0, r3, #0
   11588:	46bd      	mov	sp, r7
   1158a:	b006      	add	sp, #24
   1158c:	bdb0      	pop	{r4, r5, r7, pc}
   1158e:	46c0      	nop			; (mov r8, r8)
   11590:	c47a0000 	.word	0xc47a0000
   11594:	000112b9 	.word	0x000112b9
   11598:	00034424 	.word	0x00034424
   1159c:	00011115 	.word	0x00011115
   115a0:	20000438 	.word	0x20000438
   115a4:	00024cbd 	.word	0x00024cbd
   115a8:	ffffc000 	.word	0xffffc000
   115ac:	00030e8d 	.word	0x00030e8d
   115b0:	000308d5 	.word	0x000308d5
   115b4:	000112e5 	.word	0x000112e5
   115b8:	000343f0 	.word	0x000343f0
   115bc:	0001a691 	.word	0x0001a691

000115c0 <vMax31855Task>:
 * - Reads temperature every second
 * - Updates global variable g_max31855_latest_temp
 * - Controls heating pad using basic hysteresis control.
 */
void vMax31855Task(void *pvParameters)
{
   115c0:	b580      	push	{r7, lr}
   115c2:	b08a      	sub	sp, #40	; 0x28
   115c4:	af00      	add	r7, sp, #0
   115c6:	6078      	str	r0, [r7, #4]
    (void)pvParameters;

    max31855_init();
   115c8:	4b27      	ldr	r3, [pc, #156]	; (11668 <vMax31855Task+0xa8>)
   115ca:	4798      	blx	r3
	char payload[16]; // For Node-Red UI

    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);
   115cc:	2308      	movs	r3, #8
   115ce:	18fb      	adds	r3, r7, r3
   115d0:	0018      	movs	r0, r3
   115d2:	4b26      	ldr	r3, [pc, #152]	; (1166c <vMax31855Task+0xac>)
   115d4:	4798      	blx	r3
    pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   115d6:	2308      	movs	r3, #8
   115d8:	18fb      	adds	r3, r7, r3
   115da:	2201      	movs	r2, #1
   115dc:	701a      	strb	r2, [r3, #0]
    port_pin_set_config(HEATING_PAD_PIN, &pin_conf);
   115de:	2308      	movs	r3, #8
   115e0:	18fb      	adds	r3, r7, r3
   115e2:	0019      	movs	r1, r3
   115e4:	2023      	movs	r0, #35	; 0x23
   115e6:	4b22      	ldr	r3, [pc, #136]	; (11670 <vMax31855Task+0xb0>)
   115e8:	4798      	blx	r3
    port_pin_set_output_level(HEATING_PAD_PIN, false);
   115ea:	2100      	movs	r1, #0
   115ec:	2023      	movs	r0, #35	; 0x23
   115ee:	4b21      	ldr	r3, [pc, #132]	; (11674 <vMax31855Task+0xb4>)
   115f0:	4798      	blx	r3

    float setpoint = 40.0f;
   115f2:	4b21      	ldr	r3, [pc, #132]	; (11678 <vMax31855Task+0xb8>)
   115f4:	627b      	str	r3, [r7, #36]	; 0x24

    for (;;)
    {
		if (g_heating_enable){
   115f6:	4b21      	ldr	r3, [pc, #132]	; (1167c <vMax31855Task+0xbc>)
   115f8:	781b      	ldrb	r3, [r3, #0]
   115fa:	b2db      	uxtb	r3, r3
   115fc:	2b00      	cmp	r3, #0
   115fe:	d024      	beq.n	1164a <vMax31855Task+0x8a>
			float current = max31855_read_temp();
   11600:	4b1f      	ldr	r3, [pc, #124]	; (11680 <vMax31855Task+0xc0>)
   11602:	4798      	blx	r3
   11604:	1c03      	adds	r3, r0, #0
   11606:	623b      	str	r3, [r7, #32]
			WifiAddTemperatureToQueue(current);
   11608:	6a3b      	ldr	r3, [r7, #32]
   1160a:	1c18      	adds	r0, r3, #0
   1160c:	4b1d      	ldr	r3, [pc, #116]	; (11684 <vMax31855Task+0xc4>)
   1160e:	4798      	blx	r3

			float error = setpoint - current;
   11610:	4b1d      	ldr	r3, [pc, #116]	; (11688 <vMax31855Task+0xc8>)
   11612:	6a39      	ldr	r1, [r7, #32]
   11614:	6a78      	ldr	r0, [r7, #36]	; 0x24
   11616:	4798      	blx	r3
   11618:	1c03      	adds	r3, r0, #0
   1161a:	61fb      	str	r3, [r7, #28]
			if (error > 0.5f)
   1161c:	4b1b      	ldr	r3, [pc, #108]	; (1168c <vMax31855Task+0xcc>)
   1161e:	21fc      	movs	r1, #252	; 0xfc
   11620:	0589      	lsls	r1, r1, #22
   11622:	69f8      	ldr	r0, [r7, #28]
   11624:	4798      	blx	r3
   11626:	1e03      	subs	r3, r0, #0
   11628:	d004      	beq.n	11634 <vMax31855Task+0x74>
			{
				port_pin_set_output_level(HEATING_PAD_PIN, true);
   1162a:	2101      	movs	r1, #1
   1162c:	2023      	movs	r0, #35	; 0x23
   1162e:	4b11      	ldr	r3, [pc, #68]	; (11674 <vMax31855Task+0xb4>)
   11630:	4798      	blx	r3
   11632:	e00e      	b.n	11652 <vMax31855Task+0x92>
			}
			else if (error < -0.25f)
   11634:	4b16      	ldr	r3, [pc, #88]	; (11690 <vMax31855Task+0xd0>)
   11636:	4917      	ldr	r1, [pc, #92]	; (11694 <vMax31855Task+0xd4>)
   11638:	69f8      	ldr	r0, [r7, #28]
   1163a:	4798      	blx	r3
   1163c:	1e03      	subs	r3, r0, #0
   1163e:	d008      	beq.n	11652 <vMax31855Task+0x92>
			{
				port_pin_set_output_level(HEATING_PAD_PIN, false);
   11640:	2100      	movs	r1, #0
   11642:	2023      	movs	r0, #35	; 0x23
   11644:	4b0b      	ldr	r3, [pc, #44]	; (11674 <vMax31855Task+0xb4>)
   11646:	4798      	blx	r3
   11648:	e003      	b.n	11652 <vMax31855Task+0x92>
			}
		}else{
			port_pin_set_output_level(HEATING_PAD_PIN, false);
   1164a:	2100      	movs	r1, #0
   1164c:	2023      	movs	r0, #35	; 0x23
   1164e:	4b09      	ldr	r3, [pc, #36]	; (11674 <vMax31855Task+0xb4>)
   11650:	4798      	blx	r3
		}
        max31855_spi_disable_and_reset();
   11652:	4b11      	ldr	r3, [pc, #68]	; (11698 <vMax31855Task+0xd8>)
   11654:	4798      	blx	r3
        vTaskDelay(pdMS_TO_TICKS(1000));
   11656:	23fa      	movs	r3, #250	; 0xfa
   11658:	009b      	lsls	r3, r3, #2
   1165a:	0018      	movs	r0, r3
   1165c:	4b0f      	ldr	r3, [pc, #60]	; (1169c <vMax31855Task+0xdc>)
   1165e:	4798      	blx	r3
        max31855_spi_reinit();
   11660:	4b0f      	ldr	r3, [pc, #60]	; (116a0 <vMax31855Task+0xe0>)
   11662:	4798      	blx	r3
		if (g_heating_enable){
   11664:	e7c7      	b.n	115f6 <vMax31855Task+0x36>
   11666:	46c0      	nop			; (mov r8, r8)
   11668:	000113b9 	.word	0x000113b9
   1166c:	000110f1 	.word	0x000110f1
   11670:	000232fd 	.word	0x000232fd
   11674:	00011115 	.word	0x00011115
   11678:	42200000 	.word	0x42200000
   1167c:	20000b30 	.word	0x20000b30
   11680:	000114b5 	.word	0x000114b5
   11684:	0001368d 	.word	0x0001368d
   11688:	00030b15 	.word	0x00030b15
   1168c:	00030125 	.word	0x00030125
   11690:	000300fd 	.word	0x000300fd
   11694:	be800000 	.word	0xbe800000
   11698:	00011305 	.word	0x00011305
   1169c:	00018a05 	.word	0x00018a05
   116a0:	0001132d 	.word	0x0001132d

000116a4 <_veml7700_write_config_reg>:
 *
 * @param[in] config_value Configuration register value to write.
 * @return VEML7700_OK on success, VEML7700_ERROR on failure.
 */
static int _veml7700_write_config_reg(uint16_t config_value)
{
   116a4:	b580      	push	{r7, lr}
   116a6:	b088      	sub	sp, #32
   116a8:	af00      	add	r7, sp, #0
   116aa:	0002      	movs	r2, r0
   116ac:	1dbb      	adds	r3, r7, #6
   116ae:	801a      	strh	r2, [r3, #0]
    uint8_t buf[3];
    buf[0] = VEML7700_REG_ALS_CONFIG;
   116b0:	231c      	movs	r3, #28
   116b2:	18fb      	adds	r3, r7, r3
   116b4:	2200      	movs	r2, #0
   116b6:	701a      	strb	r2, [r3, #0]
    buf[1] = config_value & 0xFF;          ///< Low byte
   116b8:	1dbb      	adds	r3, r7, #6
   116ba:	881b      	ldrh	r3, [r3, #0]
   116bc:	b2da      	uxtb	r2, r3
   116be:	231c      	movs	r3, #28
   116c0:	18fb      	adds	r3, r7, r3
   116c2:	705a      	strb	r2, [r3, #1]
    buf[2] = (config_value >> 8) & 0xFF;   ///< High byte
   116c4:	1dbb      	adds	r3, r7, #6
   116c6:	881b      	ldrh	r3, [r3, #0]
   116c8:	0a1b      	lsrs	r3, r3, #8
   116ca:	b29b      	uxth	r3, r3
   116cc:	b2da      	uxtb	r2, r3
   116ce:	231c      	movs	r3, #28
   116d0:	18fb      	adds	r3, r7, r3
   116d2:	709a      	strb	r2, [r3, #2]

    I2C_Data data;
    data.address = VEML7700_I2C_ADDR;
   116d4:	230c      	movs	r3, #12
   116d6:	18fb      	adds	r3, r7, r3
   116d8:	2210      	movs	r2, #16
   116da:	701a      	strb	r2, [r3, #0]
    data.msgOut = buf;
   116dc:	230c      	movs	r3, #12
   116de:	18fb      	adds	r3, r7, r3
   116e0:	221c      	movs	r2, #28
   116e2:	18ba      	adds	r2, r7, r2
   116e4:	605a      	str	r2, [r3, #4]
    data.lenOut = 3;
   116e6:	230c      	movs	r3, #12
   116e8:	18fb      	adds	r3, r7, r3
   116ea:	2203      	movs	r2, #3
   116ec:	81da      	strh	r2, [r3, #14]
    data.msgIn = NULL;
   116ee:	230c      	movs	r3, #12
   116f0:	18fb      	adds	r3, r7, r3
   116f2:	2200      	movs	r2, #0
   116f4:	609a      	str	r2, [r3, #8]
    data.lenIn = 0;
   116f6:	230c      	movs	r3, #12
   116f8:	18fb      	adds	r3, r7, r3
   116fa:	2200      	movs	r2, #0
   116fc:	819a      	strh	r2, [r3, #12]

    if (I2cWriteDataWait(&data, WAIT_I2C_LINE_MS) != 0) {
   116fe:	2396      	movs	r3, #150	; 0x96
   11700:	005a      	lsls	r2, r3, #1
   11702:	230c      	movs	r3, #12
   11704:	18fb      	adds	r3, r7, r3
   11706:	0011      	movs	r1, r2
   11708:	0018      	movs	r0, r3
   1170a:	4b06      	ldr	r3, [pc, #24]	; (11724 <_veml7700_write_config_reg+0x80>)
   1170c:	4798      	blx	r3
   1170e:	1e03      	subs	r3, r0, #0
   11710:	d002      	beq.n	11718 <_veml7700_write_config_reg+0x74>
        return VEML7700_ERROR;
   11712:	2301      	movs	r3, #1
   11714:	425b      	negs	r3, r3
   11716:	e000      	b.n	1171a <_veml7700_write_config_reg+0x76>
    }
    return VEML7700_OK;
   11718:	2300      	movs	r3, #0
}
   1171a:	0018      	movs	r0, r3
   1171c:	46bd      	mov	sp, r7
   1171e:	b008      	add	sp, #32
   11720:	bd80      	pop	{r7, pc}
   11722:	46c0      	nop			; (mov r8, r8)
   11724:	00010bd9 	.word	0x00010bd9

00011728 <veml7700_init>:
 * @param[in] als_gain Gain setting (e.g., VEML7700_GAIN_1).
 * @param[in] als_integration_time Integration time setting (e.g., VEML7700_IT_100MS).
 * @return VEML7700_OK on success, VEML7700_ERROR on failure.
 */
int veml7700_init(uint8_t als_gain, uint8_t als_integration_time)
{
   11728:	b580      	push	{r7, lr}
   1172a:	b088      	sub	sp, #32
   1172c:	af00      	add	r7, sp, #0
   1172e:	0002      	movs	r2, r0
   11730:	1dfb      	adds	r3, r7, #7
   11732:	701a      	strb	r2, [r3, #0]
   11734:	1dbb      	adds	r3, r7, #6
   11736:	1c0a      	adds	r2, r1, #0
   11738:	701a      	strb	r2, [r3, #0]
    uint16_t config = 0x0000;
   1173a:	231e      	movs	r3, #30
   1173c:	18fb      	adds	r3, r7, r3
   1173e:	2200      	movs	r2, #0
   11740:	801a      	strh	r2, [r3, #0]
    config |= ((als_gain & 0x03) << 11);
   11742:	1dfb      	adds	r3, r7, #7
   11744:	781b      	ldrb	r3, [r3, #0]
   11746:	02db      	lsls	r3, r3, #11
   11748:	b21a      	sxth	r2, r3
   1174a:	23c0      	movs	r3, #192	; 0xc0
   1174c:	015b      	lsls	r3, r3, #5
   1174e:	4013      	ands	r3, r2
   11750:	b21a      	sxth	r2, r3
   11752:	231e      	movs	r3, #30
   11754:	18fb      	adds	r3, r7, r3
   11756:	2100      	movs	r1, #0
   11758:	5e5b      	ldrsh	r3, [r3, r1]
   1175a:	4313      	orrs	r3, r2
   1175c:	b21a      	sxth	r2, r3
   1175e:	231e      	movs	r3, #30
   11760:	18fb      	adds	r3, r7, r3
   11762:	801a      	strh	r2, [r3, #0]
    config |= ((als_integration_time & 0x0F) << 6);
   11764:	1dbb      	adds	r3, r7, #6
   11766:	781b      	ldrb	r3, [r3, #0]
   11768:	019b      	lsls	r3, r3, #6
   1176a:	b21a      	sxth	r2, r3
   1176c:	23f0      	movs	r3, #240	; 0xf0
   1176e:	009b      	lsls	r3, r3, #2
   11770:	4013      	ands	r3, r2
   11772:	b21a      	sxth	r2, r3
   11774:	231e      	movs	r3, #30
   11776:	18fb      	adds	r3, r7, r3
   11778:	2100      	movs	r1, #0
   1177a:	5e5b      	ldrsh	r3, [r3, r1]
   1177c:	4313      	orrs	r3, r2
   1177e:	b21a      	sxth	r2, r3
   11780:	231e      	movs	r3, #30
   11782:	18fb      	adds	r3, r7, r3
   11784:	801a      	strh	r2, [r3, #0]
    config |= (VEML7700_PERS_1 << 4);
   11786:	231e      	movs	r3, #30
   11788:	18fb      	adds	r3, r7, r3
   1178a:	221e      	movs	r2, #30
   1178c:	18ba      	adds	r2, r7, r2
   1178e:	8812      	ldrh	r2, [r2, #0]
   11790:	801a      	strh	r2, [r3, #0]
    config |= VEML7700_INT_DISABLE;
   11792:	231e      	movs	r3, #30
   11794:	18fb      	adds	r3, r7, r3
   11796:	221e      	movs	r2, #30
   11798:	18ba      	adds	r2, r7, r2
   1179a:	8812      	ldrh	r2, [r2, #0]
   1179c:	801a      	strh	r2, [r3, #0]
    config |= VEML7700_POWER_ON;
   1179e:	231e      	movs	r3, #30
   117a0:	18fb      	adds	r3, r7, r3
   117a2:	221e      	movs	r2, #30
   117a4:	18ba      	adds	r2, r7, r2
   117a6:	8812      	ldrh	r2, [r2, #0]
   117a8:	801a      	strh	r2, [r3, #0]

    g_veml7700_config = config;
   117aa:	4b25      	ldr	r3, [pc, #148]	; (11840 <veml7700_init+0x118>)
   117ac:	221e      	movs	r2, #30
   117ae:	18ba      	adds	r2, r7, r2
   117b0:	8812      	ldrh	r2, [r2, #0]
   117b2:	801a      	strh	r2, [r3, #0]
    g_current_gain = als_gain & 0x03;
   117b4:	1dfb      	adds	r3, r7, #7
   117b6:	781b      	ldrb	r3, [r3, #0]
   117b8:	2203      	movs	r2, #3
   117ba:	4013      	ands	r3, r2
   117bc:	b2da      	uxtb	r2, r3
   117be:	4b21      	ldr	r3, [pc, #132]	; (11844 <veml7700_init+0x11c>)
   117c0:	701a      	strb	r2, [r3, #0]
    g_current_it   = als_integration_time & 0x0F;
   117c2:	1dbb      	adds	r3, r7, #6
   117c4:	781b      	ldrb	r3, [r3, #0]
   117c6:	220f      	movs	r2, #15
   117c8:	4013      	ands	r3, r2
   117ca:	b2da      	uxtb	r2, r3
   117cc:	4b1e      	ldr	r3, [pc, #120]	; (11848 <veml7700_init+0x120>)
   117ce:	701a      	strb	r2, [r3, #0]

    if (_veml7700_write_config_reg(g_veml7700_config) != VEML7700_OK) {
   117d0:	4b1b      	ldr	r3, [pc, #108]	; (11840 <veml7700_init+0x118>)
   117d2:	881b      	ldrh	r3, [r3, #0]
   117d4:	0018      	movs	r0, r3
   117d6:	4b1d      	ldr	r3, [pc, #116]	; (1184c <veml7700_init+0x124>)
   117d8:	4798      	blx	r3
   117da:	1e03      	subs	r3, r0, #0
   117dc:	d002      	beq.n	117e4 <veml7700_init+0xbc>
        return VEML7700_ERROR;
   117de:	2301      	movs	r3, #1
   117e0:	425b      	negs	r3, r3
   117e2:	e029      	b.n	11838 <veml7700_init+0x110>
    }

    // Disable power saving
    uint8_t psm_buf[3] = { VEML7700_REG_POWER_SAVE, 0x00, 0x00 };
   117e4:	2318      	movs	r3, #24
   117e6:	18fb      	adds	r3, r7, r3
   117e8:	2203      	movs	r2, #3
   117ea:	701a      	strb	r2, [r3, #0]
   117ec:	2318      	movs	r3, #24
   117ee:	18fb      	adds	r3, r7, r3
   117f0:	2200      	movs	r2, #0
   117f2:	705a      	strb	r2, [r3, #1]
   117f4:	2318      	movs	r3, #24
   117f6:	18fb      	adds	r3, r7, r3
   117f8:	2200      	movs	r2, #0
   117fa:	709a      	strb	r2, [r3, #2]
    I2C_Data psm_data;
    psm_data.address = VEML7700_I2C_ADDR;
   117fc:	2308      	movs	r3, #8
   117fe:	18fb      	adds	r3, r7, r3
   11800:	2210      	movs	r2, #16
   11802:	701a      	strb	r2, [r3, #0]
    psm_data.msgOut = psm_buf;
   11804:	2308      	movs	r3, #8
   11806:	18fb      	adds	r3, r7, r3
   11808:	2218      	movs	r2, #24
   1180a:	18ba      	adds	r2, r7, r2
   1180c:	605a      	str	r2, [r3, #4]
    psm_data.lenOut = 3;
   1180e:	2308      	movs	r3, #8
   11810:	18fb      	adds	r3, r7, r3
   11812:	2203      	movs	r2, #3
   11814:	81da      	strh	r2, [r3, #14]
    psm_data.msgIn = NULL;
   11816:	2308      	movs	r3, #8
   11818:	18fb      	adds	r3, r7, r3
   1181a:	2200      	movs	r2, #0
   1181c:	609a      	str	r2, [r3, #8]
    psm_data.lenIn = 0;
   1181e:	2308      	movs	r3, #8
   11820:	18fb      	adds	r3, r7, r3
   11822:	2200      	movs	r2, #0
   11824:	819a      	strh	r2, [r3, #12]
    I2cWriteDataWait(&psm_data, WAIT_I2C_LINE_MS);
   11826:	2396      	movs	r3, #150	; 0x96
   11828:	005a      	lsls	r2, r3, #1
   1182a:	2308      	movs	r3, #8
   1182c:	18fb      	adds	r3, r7, r3
   1182e:	0011      	movs	r1, r2
   11830:	0018      	movs	r0, r3
   11832:	4b07      	ldr	r3, [pc, #28]	; (11850 <veml7700_init+0x128>)
   11834:	4798      	blx	r3

    return VEML7700_OK;
   11836:	2300      	movs	r3, #0
}
   11838:	0018      	movs	r0, r3
   1183a:	46bd      	mov	sp, r7
   1183c:	b008      	add	sp, #32
   1183e:	bd80      	pop	{r7, pc}
   11840:	20000478 	.word	0x20000478
   11844:	2000047a 	.word	0x2000047a
   11848:	2000047b 	.word	0x2000047b
   1184c:	000116a5 	.word	0x000116a5
   11850:	00010bd9 	.word	0x00010bd9

00011854 <veml7700_read_lux>:
 * @brief Reads the ambient light level in lux.
 *
 * @return Light intensity in lux, or -1.0f on error.
 */
float veml7700_read_lux(void)
{
   11854:	b590      	push	{r4, r7, lr}
   11856:	b08b      	sub	sp, #44	; 0x2c
   11858:	af02      	add	r7, sp, #8
    int32_t err;
    uint8_t cmd = VEML7700_REG_ALS_DATA;
   1185a:	1dfb      	adds	r3, r7, #7
   1185c:	2204      	movs	r2, #4
   1185e:	701a      	strb	r2, [r3, #0]
    uint8_t read_buf[2] = {0};
   11860:	1d3b      	adds	r3, r7, #4
   11862:	2200      	movs	r2, #0
   11864:	801a      	strh	r2, [r3, #0]
    uint16_t als_raw;

    err = I2cWriteReadNoStopBlocking_VEML(
   11866:	1d3a      	adds	r2, r7, #4
   11868:	1df9      	adds	r1, r7, #7
   1186a:	2302      	movs	r3, #2
   1186c:	9300      	str	r3, [sp, #0]
   1186e:	0013      	movs	r3, r2
   11870:	2201      	movs	r2, #1
   11872:	2010      	movs	r0, #16
   11874:	4c3b      	ldr	r4, [pc, #236]	; (11964 <veml7700_read_lux+0x110>)
   11876:	47a0      	blx	r4
   11878:	0003      	movs	r3, r0
   1187a:	617b      	str	r3, [r7, #20]
            &cmd,
            1,
            read_buf,
            2
          );
    if (err != ERROR_NONE) {
   1187c:	697b      	ldr	r3, [r7, #20]
   1187e:	2b00      	cmp	r3, #0
   11880:	d001      	beq.n	11886 <veml7700_read_lux+0x32>
        return -1.0f;
   11882:	4b39      	ldr	r3, [pc, #228]	; (11968 <veml7700_read_lux+0x114>)
   11884:	e06a      	b.n	1195c <veml7700_read_lux+0x108>
    }

    als_raw = (uint16_t)(read_buf[0] | (read_buf[1] << 8));
   11886:	1d3b      	adds	r3, r7, #4
   11888:	781b      	ldrb	r3, [r3, #0]
   1188a:	b21a      	sxth	r2, r3
   1188c:	1d3b      	adds	r3, r7, #4
   1188e:	785b      	ldrb	r3, [r3, #1]
   11890:	021b      	lsls	r3, r3, #8
   11892:	b21b      	sxth	r3, r3
   11894:	4313      	orrs	r3, r2
   11896:	b21a      	sxth	r2, r3
   11898:	2312      	movs	r3, #18
   1189a:	18fb      	adds	r3, r7, r3
   1189c:	801a      	strh	r2, [r3, #0]

    float integration_ms;
    switch (g_current_it) {
   1189e:	4b33      	ldr	r3, [pc, #204]	; (1196c <veml7700_read_lux+0x118>)
   118a0:	781b      	ldrb	r3, [r3, #0]
   118a2:	2b0c      	cmp	r3, #12
   118a4:	d816      	bhi.n	118d4 <veml7700_read_lux+0x80>
   118a6:	009a      	lsls	r2, r3, #2
   118a8:	4b31      	ldr	r3, [pc, #196]	; (11970 <veml7700_read_lux+0x11c>)
   118aa:	18d3      	adds	r3, r2, r3
   118ac:	681b      	ldr	r3, [r3, #0]
   118ae:	469f      	mov	pc, r3
        case VEML7700_IT_25MS:  integration_ms = 25.0f;  break;
   118b0:	4b30      	ldr	r3, [pc, #192]	; (11974 <veml7700_read_lux+0x120>)
   118b2:	61fb      	str	r3, [r7, #28]
   118b4:	e011      	b.n	118da <veml7700_read_lux+0x86>
        case VEML7700_IT_50MS:  integration_ms = 50.0f;  break;
   118b6:	4b30      	ldr	r3, [pc, #192]	; (11978 <veml7700_read_lux+0x124>)
   118b8:	61fb      	str	r3, [r7, #28]
   118ba:	e00e      	b.n	118da <veml7700_read_lux+0x86>
        case VEML7700_IT_100MS: integration_ms = 100.0f; break;
   118bc:	4b2f      	ldr	r3, [pc, #188]	; (1197c <veml7700_read_lux+0x128>)
   118be:	61fb      	str	r3, [r7, #28]
   118c0:	e00b      	b.n	118da <veml7700_read_lux+0x86>
        case VEML7700_IT_200MS: integration_ms = 200.0f; break;
   118c2:	4b2f      	ldr	r3, [pc, #188]	; (11980 <veml7700_read_lux+0x12c>)
   118c4:	61fb      	str	r3, [r7, #28]
   118c6:	e008      	b.n	118da <veml7700_read_lux+0x86>
        case VEML7700_IT_400MS: integration_ms = 400.0f; break;
   118c8:	4b2e      	ldr	r3, [pc, #184]	; (11984 <veml7700_read_lux+0x130>)
   118ca:	61fb      	str	r3, [r7, #28]
   118cc:	e005      	b.n	118da <veml7700_read_lux+0x86>
        case VEML7700_IT_800MS: integration_ms = 800.0f; break;
   118ce:	4b2e      	ldr	r3, [pc, #184]	; (11988 <veml7700_read_lux+0x134>)
   118d0:	61fb      	str	r3, [r7, #28]
   118d2:	e002      	b.n	118da <veml7700_read_lux+0x86>
        default: integration_ms = 100.0f; break;
   118d4:	4b29      	ldr	r3, [pc, #164]	; (1197c <veml7700_read_lux+0x128>)
   118d6:	61fb      	str	r3, [r7, #28]
   118d8:	46c0      	nop			; (mov r8, r8)
    }

    float gain_factor;
    switch (g_current_gain) {
   118da:	4b2c      	ldr	r3, [pc, #176]	; (1198c <veml7700_read_lux+0x138>)
   118dc:	781b      	ldrb	r3, [r3, #0]
   118de:	2b01      	cmp	r3, #1
   118e0:	d00c      	beq.n	118fc <veml7700_read_lux+0xa8>
   118e2:	dc02      	bgt.n	118ea <veml7700_read_lux+0x96>
   118e4:	2b00      	cmp	r3, #0
   118e6:	d005      	beq.n	118f4 <veml7700_read_lux+0xa0>
   118e8:	e014      	b.n	11914 <veml7700_read_lux+0xc0>
   118ea:	2b02      	cmp	r3, #2
   118ec:	d00e      	beq.n	1190c <veml7700_read_lux+0xb8>
   118ee:	2b03      	cmp	r3, #3
   118f0:	d008      	beq.n	11904 <veml7700_read_lux+0xb0>
   118f2:	e00f      	b.n	11914 <veml7700_read_lux+0xc0>
        case VEML7700_GAIN_1:   gain_factor = 1.0f;   break;
   118f4:	23fe      	movs	r3, #254	; 0xfe
   118f6:	059b      	lsls	r3, r3, #22
   118f8:	61bb      	str	r3, [r7, #24]
   118fa:	e00f      	b.n	1191c <veml7700_read_lux+0xc8>
        case VEML7700_GAIN_2:   gain_factor = 2.0f;   break;
   118fc:	2380      	movs	r3, #128	; 0x80
   118fe:	05db      	lsls	r3, r3, #23
   11900:	61bb      	str	r3, [r7, #24]
   11902:	e00b      	b.n	1191c <veml7700_read_lux+0xc8>
        case VEML7700_GAIN_1_4: gain_factor = 0.25f;  break;
   11904:	23fa      	movs	r3, #250	; 0xfa
   11906:	059b      	lsls	r3, r3, #22
   11908:	61bb      	str	r3, [r7, #24]
   1190a:	e007      	b.n	1191c <veml7700_read_lux+0xc8>
        case VEML7700_GAIN_1_8: gain_factor = 0.125f; break;
   1190c:	23f8      	movs	r3, #248	; 0xf8
   1190e:	059b      	lsls	r3, r3, #22
   11910:	61bb      	str	r3, [r7, #24]
   11912:	e003      	b.n	1191c <veml7700_read_lux+0xc8>
        default: gain_factor = 1.0f; break;
   11914:	23fe      	movs	r3, #254	; 0xfe
   11916:	059b      	lsls	r3, r3, #22
   11918:	61bb      	str	r3, [r7, #24]
   1191a:	46c0      	nop			; (mov r8, r8)
    }

    float resolution = 0.0576f * (100.0f / integration_ms) / gain_factor;
   1191c:	4b1c      	ldr	r3, [pc, #112]	; (11990 <veml7700_read_lux+0x13c>)
   1191e:	69f9      	ldr	r1, [r7, #28]
   11920:	4816      	ldr	r0, [pc, #88]	; (1197c <veml7700_read_lux+0x128>)
   11922:	4798      	blx	r3
   11924:	1c03      	adds	r3, r0, #0
   11926:	1c1a      	adds	r2, r3, #0
   11928:	4b1a      	ldr	r3, [pc, #104]	; (11994 <veml7700_read_lux+0x140>)
   1192a:	491b      	ldr	r1, [pc, #108]	; (11998 <veml7700_read_lux+0x144>)
   1192c:	1c10      	adds	r0, r2, #0
   1192e:	4798      	blx	r3
   11930:	1c03      	adds	r3, r0, #0
   11932:	1c1a      	adds	r2, r3, #0
   11934:	4b16      	ldr	r3, [pc, #88]	; (11990 <veml7700_read_lux+0x13c>)
   11936:	69b9      	ldr	r1, [r7, #24]
   11938:	1c10      	adds	r0, r2, #0
   1193a:	4798      	blx	r3
   1193c:	1c03      	adds	r3, r0, #0
   1193e:	60fb      	str	r3, [r7, #12]
    float lux = als_raw * resolution;
   11940:	2312      	movs	r3, #18
   11942:	18fb      	adds	r3, r7, r3
   11944:	881a      	ldrh	r2, [r3, #0]
   11946:	4b15      	ldr	r3, [pc, #84]	; (1199c <veml7700_read_lux+0x148>)
   11948:	0010      	movs	r0, r2
   1194a:	4798      	blx	r3
   1194c:	1c02      	adds	r2, r0, #0
   1194e:	4b11      	ldr	r3, [pc, #68]	; (11994 <veml7700_read_lux+0x140>)
   11950:	68f9      	ldr	r1, [r7, #12]
   11952:	1c10      	adds	r0, r2, #0
   11954:	4798      	blx	r3
   11956:	1c03      	adds	r3, r0, #0
   11958:	60bb      	str	r3, [r7, #8]
    return lux;
   1195a:	68bb      	ldr	r3, [r7, #8]
}
   1195c:	1c18      	adds	r0, r3, #0
   1195e:	46bd      	mov	sp, r7
   11960:	b009      	add	sp, #36	; 0x24
   11962:	bd90      	pop	{r4, r7, pc}
   11964:	00010cb1 	.word	0x00010cb1
   11968:	bf800000 	.word	0xbf800000
   1196c:	2000047b 	.word	0x2000047b
   11970:	00034428 	.word	0x00034428
   11974:	41c80000 	.word	0x41c80000
   11978:	42480000 	.word	0x42480000
   1197c:	42c80000 	.word	0x42c80000
   11980:	43480000 	.word	0x43480000
   11984:	43c80000 	.word	0x43c80000
   11988:	44480000 	.word	0x44480000
   1198c:	2000047a 	.word	0x2000047a
   11990:	000304f5 	.word	0x000304f5
   11994:	000308d5 	.word	0x000308d5
   11998:	3d6bedfa 	.word	0x3d6bedfa
   1199c:	00030e8d 	.word	0x00030e8d

000119a0 <vVemlTask>:
 * message.  It then waits ~1 s, reads the sensor, scales the result to
 * **lux × 100**, sends it to @ref WifiAddIntensityToQueue() and clears the
 * request flag.
 ******************************************************************************/
void vVemlTask(void *pvParameters)
{
   119a0:	b590      	push	{r4, r7, lr}
   119a2:	b085      	sub	sp, #20
   119a4:	af00      	add	r7, sp, #0
   119a6:	6078      	str	r0, [r7, #4]
    (void)pvParameters;

    if (veml7700_init(VEML7700_GAIN_1, VEML7700_IT_100MS) != VEML7700_OK)
   119a8:	2100      	movs	r1, #0
   119aa:	2000      	movs	r0, #0
   119ac:	4b1e      	ldr	r3, [pc, #120]	; (11a28 <vVemlTask+0x88>)
   119ae:	4798      	blx	r3
   119b0:	1e03      	subs	r3, r0, #0
   119b2:	d002      	beq.n	119ba <vVemlTask+0x1a>
        vTaskSuspend(NULL);               /* fatal – stop task */
   119b4:	2000      	movs	r0, #0
   119b6:	4b1d      	ldr	r3, [pc, #116]	; (11a2c <vVemlTask+0x8c>)
   119b8:	4798      	blx	r3

    while (1)
    {
        if (g_requestIntensity)
   119ba:	4b1d      	ldr	r3, [pc, #116]	; (11a30 <vVemlTask+0x90>)
   119bc:	781b      	ldrb	r3, [r3, #0]
   119be:	b2db      	uxtb	r3, r3
   119c0:	2b00      	cmp	r3, #0
   119c2:	d02c      	beq.n	11a1e <vVemlTask+0x7e>
        {
			esp_i2c_set_color_flag(ESP_COLOR_BLUE);
   119c4:	2003      	movs	r0, #3
   119c6:	4b1b      	ldr	r3, [pc, #108]	; (11a34 <vVemlTask+0x94>)
   119c8:	4798      	blx	r3
			
            vTaskDelay(pdMS_TO_TICKS(1000));          /* settling time */
   119ca:	23fa      	movs	r3, #250	; 0xfa
   119cc:	009b      	lsls	r3, r3, #2
   119ce:	0018      	movs	r0, r3
   119d0:	4b19      	ldr	r3, [pc, #100]	; (11a38 <vVemlTask+0x98>)
   119d2:	4798      	blx	r3

            float lux = veml7700_read_lux();          /* read sensor   */
   119d4:	4b19      	ldr	r3, [pc, #100]	; (11a3c <vVemlTask+0x9c>)
   119d6:	4798      	blx	r3
   119d8:	1c03      	adds	r3, r0, #0
   119da:	60fb      	str	r3, [r7, #12]
            if (lux >= 0.0f)
   119dc:	4b18      	ldr	r3, [pc, #96]	; (11a40 <vVemlTask+0xa0>)
   119de:	2100      	movs	r1, #0
   119e0:	68f8      	ldr	r0, [r7, #12]
   119e2:	4798      	blx	r3
   119e4:	1e03      	subs	r3, r0, #0
   119e6:	d014      	beq.n	11a12 <vVemlTask+0x72>
            {
				uint16_t lux_int = (uint16_t)(lux + 0.5f);
   119e8:	4b16      	ldr	r3, [pc, #88]	; (11a44 <vVemlTask+0xa4>)
   119ea:	21fc      	movs	r1, #252	; 0xfc
   119ec:	0589      	lsls	r1, r1, #22
   119ee:	68f8      	ldr	r0, [r7, #12]
   119f0:	4798      	blx	r3
   119f2:	1c03      	adds	r3, r0, #0
   119f4:	1c1a      	adds	r2, r3, #0
   119f6:	230a      	movs	r3, #10
   119f8:	18fc      	adds	r4, r7, r3
   119fa:	4b13      	ldr	r3, [pc, #76]	; (11a48 <vVemlTask+0xa8>)
   119fc:	1c10      	adds	r0, r2, #0
   119fe:	4798      	blx	r3
   11a00:	0003      	movs	r3, r0
   11a02:	8023      	strh	r3, [r4, #0]
                WifiAddIntensityToQueue(lux_int);
   11a04:	230a      	movs	r3, #10
   11a06:	18fb      	adds	r3, r7, r3
   11a08:	2200      	movs	r2, #0
   11a0a:	5e9b      	ldrsh	r3, [r3, r2]
   11a0c:	0018      	movs	r0, r3
   11a0e:	4b0f      	ldr	r3, [pc, #60]	; (11a4c <vVemlTask+0xac>)
   11a10:	4798      	blx	r3
            }
			
			esp_i2c_set_color_flag(ESP_COLOR_OFF);
   11a12:	2000      	movs	r0, #0
   11a14:	4b07      	ldr	r3, [pc, #28]	; (11a34 <vVemlTask+0x94>)
   11a16:	4798      	blx	r3
            g_requestIntensity = false;               /* reset flag    */
   11a18:	4b05      	ldr	r3, [pc, #20]	; (11a30 <vVemlTask+0x90>)
   11a1a:	2200      	movs	r2, #0
   11a1c:	701a      	strb	r2, [r3, #0]
        }
        vTaskDelay(pdMS_TO_TICKS(50));
   11a1e:	2032      	movs	r0, #50	; 0x32
   11a20:	4b05      	ldr	r3, [pc, #20]	; (11a38 <vVemlTask+0x98>)
   11a22:	4798      	blx	r3
        if (g_requestIntensity)
   11a24:	e7c9      	b.n	119ba <vVemlTask+0x1a>
   11a26:	46c0      	nop			; (mov r8, r8)
   11a28:	00011729 	.word	0x00011729
   11a2c:	00018ae5 	.word	0x00018ae5
   11a30:	20000b31 	.word	0x20000b31
   11a34:	00010edd 	.word	0x00010edd
   11a38:	00018a05 	.word	0x00018a05
   11a3c:	00011855 	.word	0x00011855
   11a40:	00030139 	.word	0x00030139
   11a44:	000301d1 	.word	0x000301d1
   11a48:	000301a1 	.word	0x000301a1
   11a4c:	000136b5 	.word	0x000136b5

00011a50 <NVIC_SystemReset>:
{
   11a50:	b580      	push	{r7, lr}
   11a52:	af00      	add	r7, sp, #0
   11a54:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   11a58:	4b02      	ldr	r3, [pc, #8]	; (11a64 <NVIC_SystemReset+0x14>)
   11a5a:	4a03      	ldr	r2, [pc, #12]	; (11a68 <NVIC_SystemReset+0x18>)
   11a5c:	60da      	str	r2, [r3, #12]
   11a5e:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   11a62:	e7fe      	b.n	11a62 <NVIC_SystemReset+0x12>
   11a64:	e000ed00 	.word	0xe000ed00
   11a68:	05fa0004 	.word	0x05fa0004

00011a6c <system_pinmux_get_group_from_gpio_pin>:
{
   11a6c:	b580      	push	{r7, lr}
   11a6e:	b084      	sub	sp, #16
   11a70:	af00      	add	r7, sp, #0
   11a72:	0002      	movs	r2, r0
   11a74:	1dfb      	adds	r3, r7, #7
   11a76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11a78:	230f      	movs	r3, #15
   11a7a:	18fb      	adds	r3, r7, r3
   11a7c:	1dfa      	adds	r2, r7, #7
   11a7e:	7812      	ldrb	r2, [r2, #0]
   11a80:	09d2      	lsrs	r2, r2, #7
   11a82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11a84:	230e      	movs	r3, #14
   11a86:	18fb      	adds	r3, r7, r3
   11a88:	1dfa      	adds	r2, r7, #7
   11a8a:	7812      	ldrb	r2, [r2, #0]
   11a8c:	0952      	lsrs	r2, r2, #5
   11a8e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11a90:	4b0d      	ldr	r3, [pc, #52]	; (11ac8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11a92:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   11a94:	230f      	movs	r3, #15
   11a96:	18fb      	adds	r3, r7, r3
   11a98:	781b      	ldrb	r3, [r3, #0]
   11a9a:	2b00      	cmp	r3, #0
   11a9c:	d10f      	bne.n	11abe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11a9e:	230f      	movs	r3, #15
   11aa0:	18fb      	adds	r3, r7, r3
   11aa2:	781b      	ldrb	r3, [r3, #0]
   11aa4:	009b      	lsls	r3, r3, #2
   11aa6:	2210      	movs	r2, #16
   11aa8:	4694      	mov	ip, r2
   11aaa:	44bc      	add	ip, r7
   11aac:	4463      	add	r3, ip
   11aae:	3b08      	subs	r3, #8
   11ab0:	681a      	ldr	r2, [r3, #0]
   11ab2:	230e      	movs	r3, #14
   11ab4:	18fb      	adds	r3, r7, r3
   11ab6:	781b      	ldrb	r3, [r3, #0]
   11ab8:	01db      	lsls	r3, r3, #7
   11aba:	18d3      	adds	r3, r2, r3
   11abc:	e000      	b.n	11ac0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   11abe:	2300      	movs	r3, #0
}
   11ac0:	0018      	movs	r0, r3
   11ac2:	46bd      	mov	sp, r7
   11ac4:	b004      	add	sp, #16
   11ac6:	bd80      	pop	{r7, pc}
   11ac8:	41004400 	.word	0x41004400

00011acc <system_reset>:
{
   11acc:	b580      	push	{r7, lr}
   11ace:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   11ad0:	4b02      	ldr	r3, [pc, #8]	; (11adc <system_reset+0x10>)
   11ad2:	4798      	blx	r3
}
   11ad4:	46c0      	nop			; (mov r8, r8)
   11ad6:	46bd      	mov	sp, r7
   11ad8:	bd80      	pop	{r7, pc}
   11ada:	46c0      	nop			; (mov r8, r8)
   11adc:	00011a51 	.word	0x00011a51

00011ae0 <port_get_group_from_gpio_pin>:
{
   11ae0:	b580      	push	{r7, lr}
   11ae2:	b082      	sub	sp, #8
   11ae4:	af00      	add	r7, sp, #0
   11ae6:	0002      	movs	r2, r0
   11ae8:	1dfb      	adds	r3, r7, #7
   11aea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11aec:	1dfb      	adds	r3, r7, #7
   11aee:	781b      	ldrb	r3, [r3, #0]
   11af0:	0018      	movs	r0, r3
   11af2:	4b03      	ldr	r3, [pc, #12]	; (11b00 <port_get_group_from_gpio_pin+0x20>)
   11af4:	4798      	blx	r3
   11af6:	0003      	movs	r3, r0
}
   11af8:	0018      	movs	r0, r3
   11afa:	46bd      	mov	sp, r7
   11afc:	b002      	add	sp, #8
   11afe:	bd80      	pop	{r7, pc}
   11b00:	00011a6d 	.word	0x00011a6d

00011b04 <port_pin_get_input_level>:
{
   11b04:	b580      	push	{r7, lr}
   11b06:	b084      	sub	sp, #16
   11b08:	af00      	add	r7, sp, #0
   11b0a:	0002      	movs	r2, r0
   11b0c:	1dfb      	adds	r3, r7, #7
   11b0e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11b10:	1dfb      	adds	r3, r7, #7
   11b12:	781b      	ldrb	r3, [r3, #0]
   11b14:	0018      	movs	r0, r3
   11b16:	4b0b      	ldr	r3, [pc, #44]	; (11b44 <port_pin_get_input_level+0x40>)
   11b18:	4798      	blx	r3
   11b1a:	0003      	movs	r3, r0
   11b1c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11b1e:	1dfb      	adds	r3, r7, #7
   11b20:	781b      	ldrb	r3, [r3, #0]
   11b22:	221f      	movs	r2, #31
   11b24:	4013      	ands	r3, r2
   11b26:	2201      	movs	r2, #1
   11b28:	409a      	lsls	r2, r3
   11b2a:	0013      	movs	r3, r2
   11b2c:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   11b2e:	68fb      	ldr	r3, [r7, #12]
   11b30:	6a1b      	ldr	r3, [r3, #32]
   11b32:	68ba      	ldr	r2, [r7, #8]
   11b34:	4013      	ands	r3, r2
   11b36:	1e5a      	subs	r2, r3, #1
   11b38:	4193      	sbcs	r3, r2
   11b3a:	b2db      	uxtb	r3, r3
}
   11b3c:	0018      	movs	r0, r3
   11b3e:	46bd      	mov	sp, r7
   11b40:	b004      	add	sp, #16
   11b42:	bd80      	pop	{r7, pc}
   11b44:	00011ae1 	.word	0x00011ae1

00011b48 <port_pin_set_output_level>:
{
   11b48:	b580      	push	{r7, lr}
   11b4a:	b084      	sub	sp, #16
   11b4c:	af00      	add	r7, sp, #0
   11b4e:	0002      	movs	r2, r0
   11b50:	1dfb      	adds	r3, r7, #7
   11b52:	701a      	strb	r2, [r3, #0]
   11b54:	1dbb      	adds	r3, r7, #6
   11b56:	1c0a      	adds	r2, r1, #0
   11b58:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11b5a:	1dfb      	adds	r3, r7, #7
   11b5c:	781b      	ldrb	r3, [r3, #0]
   11b5e:	0018      	movs	r0, r3
   11b60:	4b0d      	ldr	r3, [pc, #52]	; (11b98 <port_pin_set_output_level+0x50>)
   11b62:	4798      	blx	r3
   11b64:	0003      	movs	r3, r0
   11b66:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11b68:	1dfb      	adds	r3, r7, #7
   11b6a:	781b      	ldrb	r3, [r3, #0]
   11b6c:	221f      	movs	r2, #31
   11b6e:	4013      	ands	r3, r2
   11b70:	2201      	movs	r2, #1
   11b72:	409a      	lsls	r2, r3
   11b74:	0013      	movs	r3, r2
   11b76:	60bb      	str	r3, [r7, #8]
	if (level) {
   11b78:	1dbb      	adds	r3, r7, #6
   11b7a:	781b      	ldrb	r3, [r3, #0]
   11b7c:	2b00      	cmp	r3, #0
   11b7e:	d003      	beq.n	11b88 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11b80:	68fb      	ldr	r3, [r7, #12]
   11b82:	68ba      	ldr	r2, [r7, #8]
   11b84:	619a      	str	r2, [r3, #24]
}
   11b86:	e002      	b.n	11b8e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11b88:	68fb      	ldr	r3, [r7, #12]
   11b8a:	68ba      	ldr	r2, [r7, #8]
   11b8c:	615a      	str	r2, [r3, #20]
}
   11b8e:	46c0      	nop			; (mov r8, r8)
   11b90:	46bd      	mov	sp, r7
   11b92:	b004      	add	sp, #16
   11b94:	bd80      	pop	{r7, pc}
   11b96:	46c0      	nop			; (mov r8, r8)
   11b98:	00011ae1 	.word	0x00011ae1

00011b9c <init_state>:
 
 /**
  * \brief Initialize download state to not ready.
  */
 static void init_state(void)
 {
   11b9c:	b580      	push	{r7, lr}
   11b9e:	af00      	add	r7, sp, #0
     down_state = NOT_READY;
   11ba0:	4b02      	ldr	r3, [pc, #8]	; (11bac <init_state+0x10>)
   11ba2:	2200      	movs	r2, #0
   11ba4:	701a      	strb	r2, [r3, #0]
 }
   11ba6:	46c0      	nop			; (mov r8, r8)
   11ba8:	46bd      	mov	sp, r7
   11baa:	bd80      	pop	{r7, pc}
   11bac:	20000499 	.word	0x20000499

00011bb0 <clear_state>:
 /**
  * \brief Clear state parameter at download processing state.
  * \param[in] mask Check download_state.
  */
 static void clear_state(download_state mask)
 {
   11bb0:	b580      	push	{r7, lr}
   11bb2:	b082      	sub	sp, #8
   11bb4:	af00      	add	r7, sp, #0
   11bb6:	0002      	movs	r2, r0
   11bb8:	1dfb      	adds	r3, r7, #7
   11bba:	701a      	strb	r2, [r3, #0]
     down_state &= ~mask;
   11bbc:	1dfb      	adds	r3, r7, #7
   11bbe:	781b      	ldrb	r3, [r3, #0]
   11bc0:	b25b      	sxtb	r3, r3
   11bc2:	43db      	mvns	r3, r3
   11bc4:	b25b      	sxtb	r3, r3
   11bc6:	4a06      	ldr	r2, [pc, #24]	; (11be0 <clear_state+0x30>)
   11bc8:	7812      	ldrb	r2, [r2, #0]
   11bca:	b252      	sxtb	r2, r2
   11bcc:	4013      	ands	r3, r2
   11bce:	b25b      	sxtb	r3, r3
   11bd0:	b2da      	uxtb	r2, r3
   11bd2:	4b03      	ldr	r3, [pc, #12]	; (11be0 <clear_state+0x30>)
   11bd4:	701a      	strb	r2, [r3, #0]
 }
   11bd6:	46c0      	nop			; (mov r8, r8)
   11bd8:	46bd      	mov	sp, r7
   11bda:	b002      	add	sp, #8
   11bdc:	bd80      	pop	{r7, pc}
   11bde:	46c0      	nop			; (mov r8, r8)
   11be0:	20000499 	.word	0x20000499

00011be4 <add_state>:
 /**
  * \brief Add state parameter at download processing state.
  * \param[in] mask Check download_state.
  */
 static void add_state(download_state mask)
 {
   11be4:	b580      	push	{r7, lr}
   11be6:	b082      	sub	sp, #8
   11be8:	af00      	add	r7, sp, #0
   11bea:	0002      	movs	r2, r0
   11bec:	1dfb      	adds	r3, r7, #7
   11bee:	701a      	strb	r2, [r3, #0]
     down_state |= mask;
   11bf0:	4b05      	ldr	r3, [pc, #20]	; (11c08 <add_state+0x24>)
   11bf2:	781a      	ldrb	r2, [r3, #0]
   11bf4:	1dfb      	adds	r3, r7, #7
   11bf6:	781b      	ldrb	r3, [r3, #0]
   11bf8:	4313      	orrs	r3, r2
   11bfa:	b2da      	uxtb	r2, r3
   11bfc:	4b02      	ldr	r3, [pc, #8]	; (11c08 <add_state+0x24>)
   11bfe:	701a      	strb	r2, [r3, #0]
 }
   11c00:	46c0      	nop			; (mov r8, r8)
   11c02:	46bd      	mov	sp, r7
   11c04:	b002      	add	sp, #8
   11c06:	bd80      	pop	{r7, pc}
   11c08:	20000499 	.word	0x20000499

00011c0c <is_state_set>:
  * \param[in] mask Check download_state.
  * \return true if this state is set, false otherwise.
  */
 
 static inline bool is_state_set(download_state mask)
 {
   11c0c:	b580      	push	{r7, lr}
   11c0e:	b082      	sub	sp, #8
   11c10:	af00      	add	r7, sp, #0
   11c12:	0002      	movs	r2, r0
   11c14:	1dfb      	adds	r3, r7, #7
   11c16:	701a      	strb	r2, [r3, #0]
     return ((down_state & mask) != 0);
   11c18:	4b06      	ldr	r3, [pc, #24]	; (11c34 <is_state_set+0x28>)
   11c1a:	781b      	ldrb	r3, [r3, #0]
   11c1c:	1dfa      	adds	r2, r7, #7
   11c1e:	7812      	ldrb	r2, [r2, #0]
   11c20:	4013      	ands	r3, r2
   11c22:	b2db      	uxtb	r3, r3
   11c24:	1e5a      	subs	r2, r3, #1
   11c26:	4193      	sbcs	r3, r2
   11c28:	b2db      	uxtb	r3, r3
 }
   11c2a:	0018      	movs	r0, r3
   11c2c:	46bd      	mov	sp, r7
   11c2e:	b002      	add	sp, #8
   11c30:	bd80      	pop	{r7, pc}
   11c32:	46c0      	nop			; (mov r8, r8)
   11c34:	20000499 	.word	0x20000499

00011c38 <is_exist_file>:
  * \param[in] fp The file pointer to check.
  * \param[in] file_path_name The file name to check.
  * \return true if this file name is exist, false otherwise.
  */
 static bool is_exist_file(FIL *fp, const char *file_path_name)
 {
   11c38:	b590      	push	{r4, r7, lr}
   11c3a:	b085      	sub	sp, #20
   11c3c:	af00      	add	r7, sp, #0
   11c3e:	6078      	str	r0, [r7, #4]
   11c40:	6039      	str	r1, [r7, #0]
     if (fp == NULL || file_path_name == NULL) {
   11c42:	687b      	ldr	r3, [r7, #4]
   11c44:	2b00      	cmp	r3, #0
   11c46:	d002      	beq.n	11c4e <is_exist_file+0x16>
   11c48:	683b      	ldr	r3, [r7, #0]
   11c4a:	2b00      	cmp	r3, #0
   11c4c:	d101      	bne.n	11c52 <is_exist_file+0x1a>
         return false;
   11c4e:	2300      	movs	r3, #0
   11c50:	e013      	b.n	11c7a <is_exist_file+0x42>
     }
 
     FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   11c52:	230f      	movs	r3, #15
   11c54:	18fc      	adds	r4, r7, r3
   11c56:	6839      	ldr	r1, [r7, #0]
   11c58:	4b0a      	ldr	r3, [pc, #40]	; (11c84 <is_exist_file+0x4c>)
   11c5a:	2200      	movs	r2, #0
   11c5c:	0018      	movs	r0, r3
   11c5e:	4b0a      	ldr	r3, [pc, #40]	; (11c88 <is_exist_file+0x50>)
   11c60:	4798      	blx	r3
   11c62:	0003      	movs	r3, r0
   11c64:	7023      	strb	r3, [r4, #0]
     f_close(&file_object);
   11c66:	4b07      	ldr	r3, [pc, #28]	; (11c84 <is_exist_file+0x4c>)
   11c68:	0018      	movs	r0, r3
   11c6a:	4b08      	ldr	r3, [pc, #32]	; (11c8c <is_exist_file+0x54>)
   11c6c:	4798      	blx	r3
     return (ret == FR_OK);
   11c6e:	230f      	movs	r3, #15
   11c70:	18fb      	adds	r3, r7, r3
   11c72:	781b      	ldrb	r3, [r3, #0]
   11c74:	425a      	negs	r2, r3
   11c76:	4153      	adcs	r3, r2
   11c78:	b2db      	uxtb	r3, r3
 }
   11c7a:	0018      	movs	r0, r3
   11c7c:	46bd      	mov	sp, r7
   11c7e:	b005      	add	sp, #20
   11c80:	bd90      	pop	{r4, r7, pc}
   11c82:	46c0      	nop			; (mov r8, r8)
   11c84:	200006cc 	.word	0x200006cc
   11c88:	0002a7d1 	.word	0x0002a7d1
   11c8c:	0002b46d 	.word	0x0002b46d

00011c90 <rename_to_unique>:
  * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
  * \param[in] max_len Maximum file name length.
  * \return true if this file name is unique, false otherwise.
  */
 static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
 {
   11c90:	b580      	push	{r7, lr}
   11c92:	b09e      	sub	sp, #120	; 0x78
   11c94:	af00      	add	r7, sp, #0
   11c96:	60f8      	str	r0, [r7, #12]
   11c98:	60b9      	str	r1, [r7, #8]
   11c9a:	1dfb      	adds	r3, r7, #7
   11c9c:	701a      	strb	r2, [r3, #0]
 #define NUMBRING_MAX (3)
 #define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
     uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   11c9e:	2376      	movs	r3, #118	; 0x76
   11ca0:	18fb      	adds	r3, r7, r3
   11ca2:	2201      	movs	r2, #1
   11ca4:	801a      	strh	r2, [r3, #0]
   11ca6:	2374      	movs	r3, #116	; 0x74
   11ca8:	18fb      	adds	r3, r7, r3
   11caa:	2200      	movs	r2, #0
   11cac:	801a      	strh	r2, [r3, #0]
   11cae:	236e      	movs	r3, #110	; 0x6e
   11cb0:	18fb      	adds	r3, r7, r3
   11cb2:	2200      	movs	r2, #0
   11cb4:	801a      	strh	r2, [r3, #0]
   11cb6:	2372      	movs	r3, #114	; 0x72
   11cb8:	18fb      	adds	r3, r7, r3
   11cba:	2200      	movs	r2, #0
   11cbc:	801a      	strh	r2, [r3, #0]
     char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   11cbe:	2324      	movs	r3, #36	; 0x24
   11cc0:	18fb      	adds	r3, r7, r3
   11cc2:	0018      	movs	r0, r3
   11cc4:	2341      	movs	r3, #65	; 0x41
   11cc6:	001a      	movs	r2, r3
   11cc8:	2100      	movs	r1, #0
   11cca:	4b92      	ldr	r3, [pc, #584]	; (11f14 <rename_to_unique+0x284>)
   11ccc:	4798      	blx	r3
     char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   11cce:	2318      	movs	r3, #24
   11cd0:	18fb      	adds	r3, r7, r3
   11cd2:	0018      	movs	r0, r3
   11cd4:	2309      	movs	r3, #9
   11cd6:	001a      	movs	r2, r3
   11cd8:	2100      	movs	r1, #0
   11cda:	4b8e      	ldr	r3, [pc, #568]	; (11f14 <rename_to_unique+0x284>)
   11cdc:	4798      	blx	r3
     char numbering[NUMBRING_MAX + 1] = {0};
   11cde:	2314      	movs	r3, #20
   11ce0:	18fb      	adds	r3, r7, r3
   11ce2:	2200      	movs	r2, #0
   11ce4:	601a      	str	r2, [r3, #0]
     char *p = NULL;
   11ce6:	2300      	movs	r3, #0
   11ce8:	66bb      	str	r3, [r7, #104]	; 0x68
     bool valid_ext = false;
   11cea:	2371      	movs	r3, #113	; 0x71
   11cec:	18fb      	adds	r3, r7, r3
   11cee:	2200      	movs	r2, #0
   11cf0:	701a      	strb	r2, [r3, #0]
 
     if (file_path_name == NULL) {
   11cf2:	68bb      	ldr	r3, [r7, #8]
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	d101      	bne.n	11cfc <rename_to_unique+0x6c>
         return false;
   11cf8:	2300      	movs	r3, #0
   11cfa:	e106      	b.n	11f0a <rename_to_unique+0x27a>
     }
 
     if (!is_exist_file(fp, file_path_name)) {
   11cfc:	68ba      	ldr	r2, [r7, #8]
   11cfe:	68fb      	ldr	r3, [r7, #12]
   11d00:	0011      	movs	r1, r2
   11d02:	0018      	movs	r0, r3
   11d04:	4b84      	ldr	r3, [pc, #528]	; (11f18 <rename_to_unique+0x288>)
   11d06:	4798      	blx	r3
   11d08:	0003      	movs	r3, r0
   11d0a:	001a      	movs	r2, r3
   11d0c:	2301      	movs	r3, #1
   11d0e:	4053      	eors	r3, r2
   11d10:	b2db      	uxtb	r3, r3
   11d12:	2b00      	cmp	r3, #0
   11d14:	d001      	beq.n	11d1a <rename_to_unique+0x8a>
         return true;
   11d16:	2301      	movs	r3, #1
   11d18:	e0f7      	b.n	11f0a <rename_to_unique+0x27a>
     } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   11d1a:	68bb      	ldr	r3, [r7, #8]
   11d1c:	0018      	movs	r0, r3
   11d1e:	4b7f      	ldr	r3, [pc, #508]	; (11f1c <rename_to_unique+0x28c>)
   11d20:	4798      	blx	r3
   11d22:	0003      	movs	r3, r0
   11d24:	2b40      	cmp	r3, #64	; 0x40
   11d26:	d901      	bls.n	11d2c <rename_to_unique+0x9c>
         return false;
   11d28:	2300      	movs	r3, #0
   11d2a:	e0ee      	b.n	11f0a <rename_to_unique+0x27a>
     }
 
     p = strrchr(file_path_name, '.');
   11d2c:	68bb      	ldr	r3, [r7, #8]
   11d2e:	212e      	movs	r1, #46	; 0x2e
   11d30:	0018      	movs	r0, r3
   11d32:	4b7b      	ldr	r3, [pc, #492]	; (11f20 <rename_to_unique+0x290>)
   11d34:	4798      	blx	r3
   11d36:	0003      	movs	r3, r0
   11d38:	66bb      	str	r3, [r7, #104]	; 0x68
     if (p != NULL) {
   11d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11d3c:	2b00      	cmp	r3, #0
   11d3e:	d052      	beq.n	11de6 <rename_to_unique+0x156>
         ext_len = strlen(p);
   11d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   11d42:	0018      	movs	r0, r3
   11d44:	4b75      	ldr	r3, [pc, #468]	; (11f1c <rename_to_unique+0x28c>)
   11d46:	4798      	blx	r3
   11d48:	0002      	movs	r2, r0
   11d4a:	236e      	movs	r3, #110	; 0x6e
   11d4c:	18fb      	adds	r3, r7, r3
   11d4e:	801a      	strh	r2, [r3, #0]
         if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   11d50:	236e      	movs	r3, #110	; 0x6e
   11d52:	18fb      	adds	r3, r7, r3
   11d54:	881b      	ldrh	r3, [r3, #0]
   11d56:	2b07      	cmp	r3, #7
   11d58:	d837      	bhi.n	11dca <rename_to_unique+0x13a>
             valid_ext = true;
   11d5a:	2371      	movs	r3, #113	; 0x71
   11d5c:	18fb      	adds	r3, r7, r3
   11d5e:	2201      	movs	r2, #1
   11d60:	701a      	strb	r2, [r3, #0]
             strcpy(ext, p);
   11d62:	6eba      	ldr	r2, [r7, #104]	; 0x68
   11d64:	2318      	movs	r3, #24
   11d66:	18fb      	adds	r3, r7, r3
   11d68:	0011      	movs	r1, r2
   11d6a:	0018      	movs	r0, r3
   11d6c:	4b6d      	ldr	r3, [pc, #436]	; (11f24 <rename_to_unique+0x294>)
   11d6e:	4798      	blx	r3
             if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   11d70:	68bb      	ldr	r3, [r7, #8]
   11d72:	0018      	movs	r0, r3
   11d74:	4b69      	ldr	r3, [pc, #420]	; (11f1c <rename_to_unique+0x28c>)
   11d76:	4798      	blx	r3
   11d78:	0002      	movs	r2, r0
   11d7a:	236e      	movs	r3, #110	; 0x6e
   11d7c:	18fb      	adds	r3, r7, r3
   11d7e:	881b      	ldrh	r3, [r3, #0]
   11d80:	1ad3      	subs	r3, r2, r3
   11d82:	2b3c      	cmp	r3, #60	; 0x3c
   11d84:	d911      	bls.n	11daa <rename_to_unique+0x11a>
                 name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   11d86:	2374      	movs	r3, #116	; 0x74
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	226e      	movs	r2, #110	; 0x6e
   11d8c:	18ba      	adds	r2, r7, r2
   11d8e:	8812      	ldrh	r2, [r2, #0]
   11d90:	213c      	movs	r1, #60	; 0x3c
   11d92:	1a8a      	subs	r2, r1, r2
   11d94:	801a      	strh	r2, [r3, #0]
                 strncpy(name, file_path_name, name_len);
   11d96:	2374      	movs	r3, #116	; 0x74
   11d98:	18fb      	adds	r3, r7, r3
   11d9a:	881a      	ldrh	r2, [r3, #0]
   11d9c:	68b9      	ldr	r1, [r7, #8]
   11d9e:	2324      	movs	r3, #36	; 0x24
   11da0:	18fb      	adds	r3, r7, r3
   11da2:	0018      	movs	r0, r3
   11da4:	4b60      	ldr	r3, [pc, #384]	; (11f28 <rename_to_unique+0x298>)
   11da6:	4798      	blx	r3
   11da8:	e02a      	b.n	11e00 <rename_to_unique+0x170>
             } else {
                 name_len = (p - file_path_name);
   11daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   11dac:	68bb      	ldr	r3, [r7, #8]
   11dae:	1ad2      	subs	r2, r2, r3
   11db0:	2374      	movs	r3, #116	; 0x74
   11db2:	18fb      	adds	r3, r7, r3
   11db4:	801a      	strh	r2, [r3, #0]
                 strncpy(name, file_path_name, name_len);
   11db6:	2374      	movs	r3, #116	; 0x74
   11db8:	18fb      	adds	r3, r7, r3
   11dba:	881a      	ldrh	r2, [r3, #0]
   11dbc:	68b9      	ldr	r1, [r7, #8]
   11dbe:	2324      	movs	r3, #36	; 0x24
   11dc0:	18fb      	adds	r3, r7, r3
   11dc2:	0018      	movs	r0, r3
   11dc4:	4b58      	ldr	r3, [pc, #352]	; (11f28 <rename_to_unique+0x298>)
   11dc6:	4798      	blx	r3
   11dc8:	e01a      	b.n	11e00 <rename_to_unique+0x170>
             }
         } else {
             name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   11dca:	2374      	movs	r3, #116	; 0x74
   11dcc:	18fb      	adds	r3, r7, r3
   11dce:	223c      	movs	r2, #60	; 0x3c
   11dd0:	801a      	strh	r2, [r3, #0]
             strncpy(name, file_path_name, name_len);
   11dd2:	2374      	movs	r3, #116	; 0x74
   11dd4:	18fb      	adds	r3, r7, r3
   11dd6:	881a      	ldrh	r2, [r3, #0]
   11dd8:	68b9      	ldr	r1, [r7, #8]
   11dda:	2324      	movs	r3, #36	; 0x24
   11ddc:	18fb      	adds	r3, r7, r3
   11dde:	0018      	movs	r0, r3
   11de0:	4b51      	ldr	r3, [pc, #324]	; (11f28 <rename_to_unique+0x298>)
   11de2:	4798      	blx	r3
   11de4:	e00c      	b.n	11e00 <rename_to_unique+0x170>
         }
     } else {
         name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   11de6:	2374      	movs	r3, #116	; 0x74
   11de8:	18fb      	adds	r3, r7, r3
   11dea:	223c      	movs	r2, #60	; 0x3c
   11dec:	801a      	strh	r2, [r3, #0]
         strncpy(name, file_path_name, name_len);
   11dee:	2374      	movs	r3, #116	; 0x74
   11df0:	18fb      	adds	r3, r7, r3
   11df2:	881a      	ldrh	r2, [r3, #0]
   11df4:	68b9      	ldr	r1, [r7, #8]
   11df6:	2324      	movs	r3, #36	; 0x24
   11df8:	18fb      	adds	r3, r7, r3
   11dfa:	0018      	movs	r0, r3
   11dfc:	4b4a      	ldr	r3, [pc, #296]	; (11f28 <rename_to_unique+0x298>)
   11dfe:	4798      	blx	r3
     }
 
     name[name_len++] = '-';
   11e00:	2374      	movs	r3, #116	; 0x74
   11e02:	18fb      	adds	r3, r7, r3
   11e04:	881b      	ldrh	r3, [r3, #0]
   11e06:	2274      	movs	r2, #116	; 0x74
   11e08:	18ba      	adds	r2, r7, r2
   11e0a:	1c59      	adds	r1, r3, #1
   11e0c:	8011      	strh	r1, [r2, #0]
   11e0e:	001a      	movs	r2, r3
   11e10:	2324      	movs	r3, #36	; 0x24
   11e12:	18fb      	adds	r3, r7, r3
   11e14:	212d      	movs	r1, #45	; 0x2d
   11e16:	5499      	strb	r1, [r3, r2]
 
     for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   11e18:	2376      	movs	r3, #118	; 0x76
   11e1a:	18fb      	adds	r3, r7, r3
   11e1c:	2200      	movs	r2, #0
   11e1e:	801a      	strh	r2, [r3, #0]
   11e20:	2372      	movs	r3, #114	; 0x72
   11e22:	18fb      	adds	r3, r7, r3
   11e24:	2201      	movs	r2, #1
   11e26:	801a      	strh	r2, [r3, #0]
   11e28:	e010      	b.n	11e4c <rename_to_unique+0x1bc>
         count *= 10;
   11e2a:	2372      	movs	r3, #114	; 0x72
   11e2c:	18fa      	adds	r2, r7, r3
   11e2e:	2372      	movs	r3, #114	; 0x72
   11e30:	18fb      	adds	r3, r7, r3
   11e32:	881b      	ldrh	r3, [r3, #0]
   11e34:	1c19      	adds	r1, r3, #0
   11e36:	0089      	lsls	r1, r1, #2
   11e38:	18cb      	adds	r3, r1, r3
   11e3a:	18db      	adds	r3, r3, r3
   11e3c:	8013      	strh	r3, [r2, #0]
     for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   11e3e:	2376      	movs	r3, #118	; 0x76
   11e40:	18fb      	adds	r3, r7, r3
   11e42:	881a      	ldrh	r2, [r3, #0]
   11e44:	2376      	movs	r3, #118	; 0x76
   11e46:	18fb      	adds	r3, r7, r3
   11e48:	3201      	adds	r2, #1
   11e4a:	801a      	strh	r2, [r3, #0]
   11e4c:	2376      	movs	r3, #118	; 0x76
   11e4e:	18fb      	adds	r3, r7, r3
   11e50:	881b      	ldrh	r3, [r3, #0]
   11e52:	2b02      	cmp	r3, #2
   11e54:	d9e9      	bls.n	11e2a <rename_to_unique+0x19a>
     }
     for (i = 1; i < count; i++) {
   11e56:	2376      	movs	r3, #118	; 0x76
   11e58:	18fb      	adds	r3, r7, r3
   11e5a:	2201      	movs	r2, #1
   11e5c:	801a      	strh	r2, [r3, #0]
   11e5e:	e04b      	b.n	11ef8 <rename_to_unique+0x268>
         sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   11e60:	2376      	movs	r3, #118	; 0x76
   11e62:	18fb      	adds	r3, r7, r3
   11e64:	881a      	ldrh	r2, [r3, #0]
   11e66:	4931      	ldr	r1, [pc, #196]	; (11f2c <rename_to_unique+0x29c>)
   11e68:	2314      	movs	r3, #20
   11e6a:	18fb      	adds	r3, r7, r3
   11e6c:	0018      	movs	r0, r3
   11e6e:	4b30      	ldr	r3, [pc, #192]	; (11f30 <rename_to_unique+0x2a0>)
   11e70:	4798      	blx	r3
         strncpy(&name[name_len], numbering, NUMBRING_MAX);
   11e72:	2374      	movs	r3, #116	; 0x74
   11e74:	18fb      	adds	r3, r7, r3
   11e76:	881b      	ldrh	r3, [r3, #0]
   11e78:	2224      	movs	r2, #36	; 0x24
   11e7a:	18ba      	adds	r2, r7, r2
   11e7c:	18d3      	adds	r3, r2, r3
   11e7e:	2214      	movs	r2, #20
   11e80:	18b9      	adds	r1, r7, r2
   11e82:	2203      	movs	r2, #3
   11e84:	0018      	movs	r0, r3
   11e86:	4b28      	ldr	r3, [pc, #160]	; (11f28 <rename_to_unique+0x298>)
   11e88:	4798      	blx	r3
         if (valid_ext) {
   11e8a:	2371      	movs	r3, #113	; 0x71
   11e8c:	18fb      	adds	r3, r7, r3
   11e8e:	781b      	ldrb	r3, [r3, #0]
   11e90:	2b00      	cmp	r3, #0
   11e92:	d00c      	beq.n	11eae <rename_to_unique+0x21e>
             strcpy(&name[name_len + NUMBRING_MAX], ext);
   11e94:	2374      	movs	r3, #116	; 0x74
   11e96:	18fb      	adds	r3, r7, r3
   11e98:	881b      	ldrh	r3, [r3, #0]
   11e9a:	3303      	adds	r3, #3
   11e9c:	2224      	movs	r2, #36	; 0x24
   11e9e:	18ba      	adds	r2, r7, r2
   11ea0:	18d3      	adds	r3, r2, r3
   11ea2:	2218      	movs	r2, #24
   11ea4:	18ba      	adds	r2, r7, r2
   11ea6:	0011      	movs	r1, r2
   11ea8:	0018      	movs	r0, r3
   11eaa:	4b1e      	ldr	r3, [pc, #120]	; (11f24 <rename_to_unique+0x294>)
   11eac:	4798      	blx	r3
         }
 
         if (!is_exist_file(fp, name)) {
   11eae:	2324      	movs	r3, #36	; 0x24
   11eb0:	18fa      	adds	r2, r7, r3
   11eb2:	68fb      	ldr	r3, [r7, #12]
   11eb4:	0011      	movs	r1, r2
   11eb6:	0018      	movs	r0, r3
   11eb8:	4b17      	ldr	r3, [pc, #92]	; (11f18 <rename_to_unique+0x288>)
   11eba:	4798      	blx	r3
   11ebc:	0003      	movs	r3, r0
   11ebe:	001a      	movs	r2, r3
   11ec0:	2301      	movs	r3, #1
   11ec2:	4053      	eors	r3, r2
   11ec4:	b2db      	uxtb	r3, r3
   11ec6:	2b00      	cmp	r3, #0
   11ec8:	d00f      	beq.n	11eea <rename_to_unique+0x25a>
             memset(file_path_name, 0, max_len);
   11eca:	1dfb      	adds	r3, r7, #7
   11ecc:	781a      	ldrb	r2, [r3, #0]
   11ece:	68bb      	ldr	r3, [r7, #8]
   11ed0:	2100      	movs	r1, #0
   11ed2:	0018      	movs	r0, r3
   11ed4:	4b0f      	ldr	r3, [pc, #60]	; (11f14 <rename_to_unique+0x284>)
   11ed6:	4798      	blx	r3
             strcpy(file_path_name, name);
   11ed8:	2324      	movs	r3, #36	; 0x24
   11eda:	18fa      	adds	r2, r7, r3
   11edc:	68bb      	ldr	r3, [r7, #8]
   11ede:	0011      	movs	r1, r2
   11ee0:	0018      	movs	r0, r3
   11ee2:	4b10      	ldr	r3, [pc, #64]	; (11f24 <rename_to_unique+0x294>)
   11ee4:	4798      	blx	r3
             return true;
   11ee6:	2301      	movs	r3, #1
   11ee8:	e00f      	b.n	11f0a <rename_to_unique+0x27a>
     for (i = 1; i < count; i++) {
   11eea:	2376      	movs	r3, #118	; 0x76
   11eec:	18fb      	adds	r3, r7, r3
   11eee:	881a      	ldrh	r2, [r3, #0]
   11ef0:	2376      	movs	r3, #118	; 0x76
   11ef2:	18fb      	adds	r3, r7, r3
   11ef4:	3201      	adds	r2, #1
   11ef6:	801a      	strh	r2, [r3, #0]
   11ef8:	2376      	movs	r3, #118	; 0x76
   11efa:	18fa      	adds	r2, r7, r3
   11efc:	2372      	movs	r3, #114	; 0x72
   11efe:	18fb      	adds	r3, r7, r3
   11f00:	8812      	ldrh	r2, [r2, #0]
   11f02:	881b      	ldrh	r3, [r3, #0]
   11f04:	429a      	cmp	r2, r3
   11f06:	d3ab      	bcc.n	11e60 <rename_to_unique+0x1d0>
         }
     }
     return false;
   11f08:	2300      	movs	r3, #0
 }
   11f0a:	0018      	movs	r0, r3
   11f0c:	46bd      	mov	sp, r7
   11f0e:	b01e      	add	sp, #120	; 0x78
   11f10:	bd80      	pop	{r7, pc}
   11f12:	46c0      	nop			; (mov r8, r8)
   11f14:	000328a7 	.word	0x000328a7
   11f18:	00011c39 	.word	0x00011c39
   11f1c:	00032c5f 	.word	0x00032c5f
   11f20:	00032d01 	.word	0x00032d01
   11f24:	00032c13 	.word	0x00032c13
   11f28:	00032cd7 	.word	0x00032cd7
   11f2c:	0003446c 	.word	0x0003446c
   11f30:	00032b65 	.word	0x00032b65

00011f34 <start_download>:
 
 /**
  * \brief Start file download via HTTP connection.
  */
 static void start_download(void)
 {
   11f34:	b590      	push	{r4, r7, lr}
   11f36:	b085      	sub	sp, #20
   11f38:	af02      	add	r7, sp, #8
     if (!is_state_set(STORAGE_READY)) {
   11f3a:	2001      	movs	r0, #1
   11f3c:	4b23      	ldr	r3, [pc, #140]	; (11fcc <start_download+0x98>)
   11f3e:	4798      	blx	r3
   11f40:	0003      	movs	r3, r0
   11f42:	001a      	movs	r2, r3
   11f44:	2301      	movs	r3, #1
   11f46:	4053      	eors	r3, r2
   11f48:	b2db      	uxtb	r3, r3
   11f4a:	2b00      	cmp	r3, #0
   11f4c:	d005      	beq.n	11f5a <start_download+0x26>
         LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   11f4e:	4b20      	ldr	r3, [pc, #128]	; (11fd0 <start_download+0x9c>)
   11f50:	0019      	movs	r1, r3
   11f52:	2001      	movs	r0, #1
   11f54:	4b1f      	ldr	r3, [pc, #124]	; (11fd4 <start_download+0xa0>)
   11f56:	4798      	blx	r3
         return;
   11f58:	e034      	b.n	11fc4 <start_download+0x90>
     }
 
     if (!is_state_set(WIFI_CONNECTED)) {
   11f5a:	2002      	movs	r0, #2
   11f5c:	4b1b      	ldr	r3, [pc, #108]	; (11fcc <start_download+0x98>)
   11f5e:	4798      	blx	r3
   11f60:	0003      	movs	r3, r0
   11f62:	001a      	movs	r2, r3
   11f64:	2301      	movs	r3, #1
   11f66:	4053      	eors	r3, r2
   11f68:	b2db      	uxtb	r3, r3
   11f6a:	2b00      	cmp	r3, #0
   11f6c:	d005      	beq.n	11f7a <start_download+0x46>
         LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   11f6e:	4b1a      	ldr	r3, [pc, #104]	; (11fd8 <start_download+0xa4>)
   11f70:	0019      	movs	r1, r3
   11f72:	2001      	movs	r0, #1
   11f74:	4b17      	ldr	r3, [pc, #92]	; (11fd4 <start_download+0xa0>)
   11f76:	4798      	blx	r3
         return;
   11f78:	e024      	b.n	11fc4 <start_download+0x90>
     }
 
     if (is_state_set(GET_REQUESTED)) {
   11f7a:	2004      	movs	r0, #4
   11f7c:	4b13      	ldr	r3, [pc, #76]	; (11fcc <start_download+0x98>)
   11f7e:	4798      	blx	r3
   11f80:	1e03      	subs	r3, r0, #0
   11f82:	d005      	beq.n	11f90 <start_download+0x5c>
         LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   11f84:	4b15      	ldr	r3, [pc, #84]	; (11fdc <start_download+0xa8>)
   11f86:	0019      	movs	r1, r3
   11f88:	2001      	movs	r0, #1
   11f8a:	4b12      	ldr	r3, [pc, #72]	; (11fd4 <start_download+0xa0>)
   11f8c:	4798      	blx	r3
         return;
   11f8e:	e019      	b.n	11fc4 <start_download+0x90>
     }
 
     if (is_state_set(DOWNLOADING)) {
   11f90:	2008      	movs	r0, #8
   11f92:	4b0e      	ldr	r3, [pc, #56]	; (11fcc <start_download+0x98>)
   11f94:	4798      	blx	r3
   11f96:	1e03      	subs	r3, r0, #0
   11f98:	d005      	beq.n	11fa6 <start_download+0x72>
         LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   11f9a:	4b11      	ldr	r3, [pc, #68]	; (11fe0 <start_download+0xac>)
   11f9c:	0019      	movs	r1, r3
   11f9e:	2001      	movs	r0, #1
   11fa0:	4b0c      	ldr	r3, [pc, #48]	; (11fd4 <start_download+0xa0>)
   11fa2:	4798      	blx	r3
         return;
   11fa4:	e00e      	b.n	11fc4 <start_download+0x90>
     }
 
     /* Send the HTTP request. */
     LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   11fa6:	4b0f      	ldr	r3, [pc, #60]	; (11fe4 <start_download+0xb0>)
   11fa8:	0019      	movs	r1, r3
   11faa:	2001      	movs	r0, #1
   11fac:	4b09      	ldr	r3, [pc, #36]	; (11fd4 <start_download+0xa0>)
   11fae:	4798      	blx	r3
     int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   11fb0:	490d      	ldr	r1, [pc, #52]	; (11fe8 <start_download+0xb4>)
   11fb2:	480e      	ldr	r0, [pc, #56]	; (11fec <start_download+0xb8>)
   11fb4:	2300      	movs	r3, #0
   11fb6:	9300      	str	r3, [sp, #0]
   11fb8:	2300      	movs	r3, #0
   11fba:	2201      	movs	r2, #1
   11fbc:	4c0c      	ldr	r4, [pc, #48]	; (11ff0 <start_download+0xbc>)
   11fbe:	47a0      	blx	r4
   11fc0:	0003      	movs	r3, r0
   11fc2:	607b      	str	r3, [r7, #4]
 }
   11fc4:	46bd      	mov	sp, r7
   11fc6:	b003      	add	sp, #12
   11fc8:	bd90      	pop	{r4, r7, pc}
   11fca:	46c0      	nop			; (mov r8, r8)
   11fcc:	00011c0d 	.word	0x00011c0d
   11fd0:	00034474 	.word	0x00034474
   11fd4:	0001a761 	.word	0x0001a761
   11fd8:	000344a0 	.word	0x000344a0
   11fdc:	000344cc 	.word	0x000344cc
   11fe0:	000344f8 	.word	0x000344f8
   11fe4:	00034524 	.word	0x00034524
   11fe8:	00034550 	.word	0x00034550
   11fec:	200043b8 	.word	0x200043b8
   11ff0:	0002e329 	.word	0x0002e329

00011ff4 <store_file_packet>:
  * \brief Store received packet to file.
  * \param[in] data Packet data.
  * \param[in] length Packet data length.
  */
 static void store_file_packet(char *data, uint32_t length)
 {
   11ff4:	b5b0      	push	{r4, r5, r7, lr}
   11ff6:	b086      	sub	sp, #24
   11ff8:	af00      	add	r7, sp, #0
   11ffa:	6078      	str	r0, [r7, #4]
   11ffc:	6039      	str	r1, [r7, #0]
     FRESULT ret;
     if ((data == NULL) || (length < 1)) {
   11ffe:	687b      	ldr	r3, [r7, #4]
   12000:	2b00      	cmp	r3, #0
   12002:	d002      	beq.n	1200a <store_file_packet+0x16>
   12004:	683b      	ldr	r3, [r7, #0]
   12006:	2b00      	cmp	r3, #0
   12008:	d105      	bne.n	12016 <store_file_packet+0x22>
         LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   1200a:	4b58      	ldr	r3, [pc, #352]	; (1216c <store_file_packet+0x178>)
   1200c:	0019      	movs	r1, r3
   1200e:	2001      	movs	r0, #1
   12010:	4b57      	ldr	r3, [pc, #348]	; (12170 <store_file_packet+0x17c>)
   12012:	4798      	blx	r3
         return;
   12014:	e0a6      	b.n	12164 <store_file_packet+0x170>
     }
 
     if (!is_state_set(DOWNLOADING)) {
   12016:	2008      	movs	r0, #8
   12018:	4b56      	ldr	r3, [pc, #344]	; (12174 <store_file_packet+0x180>)
   1201a:	4798      	blx	r3
   1201c:	0003      	movs	r3, r0
   1201e:	001a      	movs	r2, r3
   12020:	2301      	movs	r3, #1
   12022:	4053      	eors	r3, r2
   12024:	b2db      	uxtb	r3, r3
   12026:	2b00      	cmp	r3, #0
   12028:	d055      	beq.n	120d6 <store_file_packet+0xe2>
         char *cp = NULL;
   1202a:	2300      	movs	r3, #0
   1202c:	617b      	str	r3, [r7, #20]
         save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1202e:	4b52      	ldr	r3, [pc, #328]	; (12178 <store_file_packet+0x184>)
   12030:	2230      	movs	r2, #48	; 0x30
   12032:	701a      	strb	r2, [r3, #0]
         save_file_name[1] = ':';
   12034:	4b50      	ldr	r3, [pc, #320]	; (12178 <store_file_packet+0x184>)
   12036:	223a      	movs	r2, #58	; 0x3a
   12038:	705a      	strb	r2, [r3, #1]
         cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   1203a:	4b50      	ldr	r3, [pc, #320]	; (1217c <store_file_packet+0x188>)
   1203c:	617b      	str	r3, [r7, #20]
         while (*cp != '/') {
   1203e:	e002      	b.n	12046 <store_file_packet+0x52>
             cp--;
   12040:	697b      	ldr	r3, [r7, #20]
   12042:	3b01      	subs	r3, #1
   12044:	617b      	str	r3, [r7, #20]
         while (*cp != '/') {
   12046:	697b      	ldr	r3, [r7, #20]
   12048:	781b      	ldrb	r3, [r3, #0]
   1204a:	2b2f      	cmp	r3, #47	; 0x2f
   1204c:	d1f8      	bne.n	12040 <store_file_packet+0x4c>
         }
         if (strlen(cp) > 1) {
   1204e:	697b      	ldr	r3, [r7, #20]
   12050:	0018      	movs	r0, r3
   12052:	4b4b      	ldr	r3, [pc, #300]	; (12180 <store_file_packet+0x18c>)
   12054:	4798      	blx	r3
   12056:	0003      	movs	r3, r0
   12058:	2b01      	cmp	r3, #1
   1205a:	d924      	bls.n	120a6 <store_file_packet+0xb2>
             cp++;
   1205c:	697b      	ldr	r3, [r7, #20]
   1205e:	3301      	adds	r3, #1
   12060:	617b      	str	r3, [r7, #20]
             strcpy(&save_file_name[2], cp);
   12062:	697a      	ldr	r2, [r7, #20]
   12064:	4b47      	ldr	r3, [pc, #284]	; (12184 <store_file_packet+0x190>)
   12066:	0011      	movs	r1, r2
   12068:	0018      	movs	r0, r3
   1206a:	4b47      	ldr	r3, [pc, #284]	; (12188 <store_file_packet+0x194>)
   1206c:	4798      	blx	r3
             LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
             add_state(CANCELED);
             return;
         }
 
         rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1206e:	4942      	ldr	r1, [pc, #264]	; (12178 <store_file_packet+0x184>)
   12070:	4b46      	ldr	r3, [pc, #280]	; (1218c <store_file_packet+0x198>)
   12072:	2240      	movs	r2, #64	; 0x40
   12074:	0018      	movs	r0, r3
   12076:	4b46      	ldr	r3, [pc, #280]	; (12190 <store_file_packet+0x19c>)
   12078:	4798      	blx	r3
         LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   1207a:	4a3f      	ldr	r2, [pc, #252]	; (12178 <store_file_packet+0x184>)
   1207c:	4b45      	ldr	r3, [pc, #276]	; (12194 <store_file_packet+0x1a0>)
   1207e:	0019      	movs	r1, r3
   12080:	2001      	movs	r0, #1
   12082:	4b3b      	ldr	r3, [pc, #236]	; (12170 <store_file_packet+0x17c>)
   12084:	4798      	blx	r3
         ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   12086:	2313      	movs	r3, #19
   12088:	18fc      	adds	r4, r7, r3
   1208a:	493b      	ldr	r1, [pc, #236]	; (12178 <store_file_packet+0x184>)
   1208c:	4b3f      	ldr	r3, [pc, #252]	; (1218c <store_file_packet+0x198>)
   1208e:	220a      	movs	r2, #10
   12090:	0018      	movs	r0, r3
   12092:	4b41      	ldr	r3, [pc, #260]	; (12198 <store_file_packet+0x1a4>)
   12094:	4798      	blx	r3
   12096:	0003      	movs	r3, r0
   12098:	7023      	strb	r3, [r4, #0]
         if (ret != FR_OK) {
   1209a:	2313      	movs	r3, #19
   1209c:	18fb      	adds	r3, r7, r3
   1209e:	781b      	ldrb	r3, [r3, #0]
   120a0:	2b00      	cmp	r3, #0
   120a2:	d012      	beq.n	120ca <store_file_packet+0xd6>
   120a4:	e008      	b.n	120b8 <store_file_packet+0xc4>
             LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   120a6:	4b3d      	ldr	r3, [pc, #244]	; (1219c <store_file_packet+0x1a8>)
   120a8:	0019      	movs	r1, r3
   120aa:	2001      	movs	r0, #1
   120ac:	4b30      	ldr	r3, [pc, #192]	; (12170 <store_file_packet+0x17c>)
   120ae:	4798      	blx	r3
             add_state(CANCELED);
   120b0:	2020      	movs	r0, #32
   120b2:	4b3b      	ldr	r3, [pc, #236]	; (121a0 <store_file_packet+0x1ac>)
   120b4:	4798      	blx	r3
             return;
   120b6:	e055      	b.n	12164 <store_file_packet+0x170>
             LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   120b8:	2313      	movs	r3, #19
   120ba:	18fb      	adds	r3, r7, r3
   120bc:	781a      	ldrb	r2, [r3, #0]
   120be:	4b39      	ldr	r3, [pc, #228]	; (121a4 <store_file_packet+0x1b0>)
   120c0:	0019      	movs	r1, r3
   120c2:	2001      	movs	r0, #1
   120c4:	4b2a      	ldr	r3, [pc, #168]	; (12170 <store_file_packet+0x17c>)
   120c6:	4798      	blx	r3
             return;
   120c8:	e04c      	b.n	12164 <store_file_packet+0x170>
         }
 
         received_file_size = 0;
   120ca:	4b37      	ldr	r3, [pc, #220]	; (121a8 <store_file_packet+0x1b4>)
   120cc:	2200      	movs	r2, #0
   120ce:	601a      	str	r2, [r3, #0]
         add_state(DOWNLOADING);
   120d0:	2008      	movs	r0, #8
   120d2:	4b33      	ldr	r3, [pc, #204]	; (121a0 <store_file_packet+0x1ac>)
   120d4:	4798      	blx	r3
     }
 
     if (data != NULL) {
   120d6:	687b      	ldr	r3, [r7, #4]
   120d8:	2b00      	cmp	r3, #0
   120da:	d043      	beq.n	12164 <store_file_packet+0x170>
         UINT wsize = 0;
   120dc:	2300      	movs	r3, #0
   120de:	60fb      	str	r3, [r7, #12]
         ret = f_write(&file_object, (const void *)data, length, &wsize);
   120e0:	2313      	movs	r3, #19
   120e2:	18fc      	adds	r4, r7, r3
   120e4:	230c      	movs	r3, #12
   120e6:	18fb      	adds	r3, r7, r3
   120e8:	683a      	ldr	r2, [r7, #0]
   120ea:	6879      	ldr	r1, [r7, #4]
   120ec:	4827      	ldr	r0, [pc, #156]	; (1218c <store_file_packet+0x198>)
   120ee:	4d2f      	ldr	r5, [pc, #188]	; (121ac <store_file_packet+0x1b8>)
   120f0:	47a8      	blx	r5
   120f2:	0003      	movs	r3, r0
   120f4:	7023      	strb	r3, [r4, #0]
         if (ret != FR_OK) {
   120f6:	2313      	movs	r3, #19
   120f8:	18fb      	adds	r3, r7, r3
   120fa:	781b      	ldrb	r3, [r3, #0]
   120fc:	2b00      	cmp	r3, #0
   120fe:	d00c      	beq.n	1211a <store_file_packet+0x126>
             f_close(&file_object);
   12100:	4b22      	ldr	r3, [pc, #136]	; (1218c <store_file_packet+0x198>)
   12102:	0018      	movs	r0, r3
   12104:	4b2a      	ldr	r3, [pc, #168]	; (121b0 <store_file_packet+0x1bc>)
   12106:	4798      	blx	r3
             add_state(CANCELED);
   12108:	2020      	movs	r0, #32
   1210a:	4b25      	ldr	r3, [pc, #148]	; (121a0 <store_file_packet+0x1ac>)
   1210c:	4798      	blx	r3
             LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   1210e:	4b29      	ldr	r3, [pc, #164]	; (121b4 <store_file_packet+0x1c0>)
   12110:	0019      	movs	r1, r3
   12112:	2001      	movs	r0, #1
   12114:	4b16      	ldr	r3, [pc, #88]	; (12170 <store_file_packet+0x17c>)
   12116:	4798      	blx	r3
             return;
   12118:	e024      	b.n	12164 <store_file_packet+0x170>
         }
 
         received_file_size += wsize;
   1211a:	4b23      	ldr	r3, [pc, #140]	; (121a8 <store_file_packet+0x1b4>)
   1211c:	681a      	ldr	r2, [r3, #0]
   1211e:	68fb      	ldr	r3, [r7, #12]
   12120:	18d2      	adds	r2, r2, r3
   12122:	4b21      	ldr	r3, [pc, #132]	; (121a8 <store_file_packet+0x1b4>)
   12124:	601a      	str	r2, [r3, #0]
         LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   12126:	4b20      	ldr	r3, [pc, #128]	; (121a8 <store_file_packet+0x1b4>)
   12128:	681a      	ldr	r2, [r3, #0]
   1212a:	4b23      	ldr	r3, [pc, #140]	; (121b8 <store_file_packet+0x1c4>)
   1212c:	681b      	ldr	r3, [r3, #0]
   1212e:	4923      	ldr	r1, [pc, #140]	; (121bc <store_file_packet+0x1c8>)
   12130:	2001      	movs	r0, #1
   12132:	4c0f      	ldr	r4, [pc, #60]	; (12170 <store_file_packet+0x17c>)
   12134:	47a0      	blx	r4
         if (received_file_size >= http_file_size) {
   12136:	4b1c      	ldr	r3, [pc, #112]	; (121a8 <store_file_packet+0x1b4>)
   12138:	681a      	ldr	r2, [r3, #0]
   1213a:	4b1f      	ldr	r3, [pc, #124]	; (121b8 <store_file_packet+0x1c4>)
   1213c:	681b      	ldr	r3, [r3, #0]
   1213e:	429a      	cmp	r2, r3
   12140:	d310      	bcc.n	12164 <store_file_packet+0x170>
             f_close(&file_object);
   12142:	4b12      	ldr	r3, [pc, #72]	; (1218c <store_file_packet+0x198>)
   12144:	0018      	movs	r0, r3
   12146:	4b1a      	ldr	r3, [pc, #104]	; (121b0 <store_file_packet+0x1bc>)
   12148:	4798      	blx	r3
             LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   1214a:	4b1d      	ldr	r3, [pc, #116]	; (121c0 <store_file_packet+0x1cc>)
   1214c:	0019      	movs	r1, r3
   1214e:	2001      	movs	r0, #1
   12150:	4b07      	ldr	r3, [pc, #28]	; (12170 <store_file_packet+0x17c>)
   12152:	4798      	blx	r3
             port_pin_set_output_level(LED_0_PIN, false);
   12154:	2100      	movs	r1, #0
   12156:	2017      	movs	r0, #23
   12158:	4b1a      	ldr	r3, [pc, #104]	; (121c4 <store_file_packet+0x1d0>)
   1215a:	4798      	blx	r3
             add_state(COMPLETED);
   1215c:	2010      	movs	r0, #16
   1215e:	4b10      	ldr	r3, [pc, #64]	; (121a0 <store_file_packet+0x1ac>)
   12160:	4798      	blx	r3
             return;
   12162:	46c0      	nop			; (mov r8, r8)
         }
     }
 }
   12164:	46bd      	mov	sp, r7
   12166:	b006      	add	sp, #24
   12168:	bdb0      	pop	{r4, r5, r7, pc}
   1216a:	46c0      	nop			; (mov r8, r8)
   1216c:	00034578 	.word	0x00034578
   12170:	0001a761 	.word	0x0001a761
   12174:	00011c0d 	.word	0x00011c0d
   12178:	20000058 	.word	0x20000058
   1217c:	00034574 	.word	0x00034574
   12180:	00032c5f 	.word	0x00032c5f
   12184:	2000005a 	.word	0x2000005a
   12188:	00032c13 	.word	0x00032c13
   1218c:	200006cc 	.word	0x200006cc
   12190:	00011c91 	.word	0x00011c91
   12194:	000345dc 	.word	0x000345dc
   12198:	0002a7d1 	.word	0x0002a7d1
   1219c:	0003459c 	.word	0x0003459c
   121a0:	00011be5 	.word	0x00011be5
   121a4:	00034604 	.word	0x00034604
   121a8:	200006f4 	.word	0x200006f4
   121ac:	0002af9d 	.word	0x0002af9d
   121b0:	0002b46d 	.word	0x0002b46d
   121b4:	00034638 	.word	0x00034638
   121b8:	200006f0 	.word	0x200006f0
   121bc:	00034674 	.word	0x00034674
   121c0:	000346a8 	.word	0x000346a8
   121c4:	00011b49 	.word	0x00011b49

000121c8 <http_client_callback>:
  * \param[in]  module_inst     Module instance of HTTP client module.
  * \param[in]  type            Type of event.
  * \param[in]  data            Data structure of the event. \refer http_client_data
  */
 static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
 {
   121c8:	b590      	push	{r4, r7, lr}
   121ca:	b085      	sub	sp, #20
   121cc:	af00      	add	r7, sp, #0
   121ce:	60f8      	str	r0, [r7, #12]
   121d0:	60b9      	str	r1, [r7, #8]
   121d2:	607a      	str	r2, [r7, #4]
     switch (type) {
   121d4:	68bb      	ldr	r3, [r7, #8]
   121d6:	2b04      	cmp	r3, #4
   121d8:	d900      	bls.n	121dc <http_client_callback+0x14>
   121da:	e077      	b.n	122cc <http_client_callback+0x104>
   121dc:	68bb      	ldr	r3, [r7, #8]
   121de:	009a      	lsls	r2, r3, #2
   121e0:	4b3c      	ldr	r3, [pc, #240]	; (122d4 <http_client_callback+0x10c>)
   121e2:	18d3      	adds	r3, r2, r3
   121e4:	681b      	ldr	r3, [r3, #0]
   121e6:	469f      	mov	pc, r3
         case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
             LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   121e8:	4b3b      	ldr	r3, [pc, #236]	; (122d8 <http_client_callback+0x110>)
   121ea:	0019      	movs	r1, r3
   121ec:	2001      	movs	r0, #1
   121ee:	4b3b      	ldr	r3, [pc, #236]	; (122dc <http_client_callback+0x114>)
   121f0:	4798      	blx	r3
             break;
   121f2:	e06b      	b.n	122cc <http_client_callback+0x104>
 
         case HTTP_CLIENT_CALLBACK_REQUESTED:
             LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   121f4:	4b3a      	ldr	r3, [pc, #232]	; (122e0 <http_client_callback+0x118>)
   121f6:	0019      	movs	r1, r3
   121f8:	2001      	movs	r0, #1
   121fa:	4b38      	ldr	r3, [pc, #224]	; (122dc <http_client_callback+0x114>)
   121fc:	4798      	blx	r3
             add_state(GET_REQUESTED);
   121fe:	2004      	movs	r0, #4
   12200:	4b38      	ldr	r3, [pc, #224]	; (122e4 <http_client_callback+0x11c>)
   12202:	4798      	blx	r3
             break;
   12204:	e062      	b.n	122cc <http_client_callback+0x104>
 
         case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
             LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   12206:	687b      	ldr	r3, [r7, #4]
   12208:	881b      	ldrh	r3, [r3, #0]
   1220a:	001a      	movs	r2, r3
   1220c:	687b      	ldr	r3, [r7, #4]
   1220e:	685b      	ldr	r3, [r3, #4]
   12210:	4935      	ldr	r1, [pc, #212]	; (122e8 <http_client_callback+0x120>)
   12212:	2001      	movs	r0, #1
   12214:	4c31      	ldr	r4, [pc, #196]	; (122dc <http_client_callback+0x114>)
   12216:	47a0      	blx	r4
             if ((unsigned int)data->recv_response.response_code == 200) {
   12218:	687b      	ldr	r3, [r7, #4]
   1221a:	881b      	ldrh	r3, [r3, #0]
   1221c:	2bc8      	cmp	r3, #200	; 0xc8
   1221e:	d10d      	bne.n	1223c <http_client_callback+0x74>
                 http_file_size = data->recv_response.content_length;
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	685a      	ldr	r2, [r3, #4]
   12224:	4b31      	ldr	r3, [pc, #196]	; (122ec <http_client_callback+0x124>)
   12226:	601a      	str	r2, [r3, #0]
                 received_file_size = 0;
   12228:	4b31      	ldr	r3, [pc, #196]	; (122f0 <http_client_callback+0x128>)
   1222a:	2200      	movs	r2, #0
   1222c:	601a      	str	r2, [r3, #0]
             } else {
                 add_state(CANCELED);
                 return;
             }
             if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   1222e:	687b      	ldr	r3, [r7, #4]
   12230:	685a      	ldr	r2, [r3, #4]
   12232:	2380      	movs	r3, #128	; 0x80
   12234:	009b      	lsls	r3, r3, #2
   12236:	429a      	cmp	r2, r3
   12238:	d843      	bhi.n	122c2 <http_client_callback+0xfa>
   1223a:	e003      	b.n	12244 <http_client_callback+0x7c>
                 add_state(CANCELED);
   1223c:	2020      	movs	r0, #32
   1223e:	4b29      	ldr	r3, [pc, #164]	; (122e4 <http_client_callback+0x11c>)
   12240:	4798      	blx	r3
                 return;
   12242:	e043      	b.n	122cc <http_client_callback+0x104>
                 store_file_packet(data->recv_response.content, data->recv_response.content_length);
   12244:	687b      	ldr	r3, [r7, #4]
   12246:	689a      	ldr	r2, [r3, #8]
   12248:	687b      	ldr	r3, [r7, #4]
   1224a:	685b      	ldr	r3, [r3, #4]
   1224c:	0019      	movs	r1, r3
   1224e:	0010      	movs	r0, r2
   12250:	4b28      	ldr	r3, [pc, #160]	; (122f4 <http_client_callback+0x12c>)
   12252:	4798      	blx	r3
                 add_state(COMPLETED);
   12254:	2010      	movs	r0, #16
   12256:	4b23      	ldr	r3, [pc, #140]	; (122e4 <http_client_callback+0x11c>)
   12258:	4798      	blx	r3
             }
             break;
   1225a:	e032      	b.n	122c2 <http_client_callback+0xfa>
 
         case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
             store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   1225c:	687b      	ldr	r3, [r7, #4]
   1225e:	685a      	ldr	r2, [r3, #4]
   12260:	687b      	ldr	r3, [r7, #4]
   12262:	681b      	ldr	r3, [r3, #0]
   12264:	0019      	movs	r1, r3
   12266:	0010      	movs	r0, r2
   12268:	4b22      	ldr	r3, [pc, #136]	; (122f4 <http_client_callback+0x12c>)
   1226a:	4798      	blx	r3
             if (data->recv_chunked_data.is_complete) {
   1226c:	687b      	ldr	r3, [r7, #4]
   1226e:	7a1b      	ldrb	r3, [r3, #8]
   12270:	2b00      	cmp	r3, #0
   12272:	d028      	beq.n	122c6 <http_client_callback+0xfe>
                 add_state(COMPLETED);
   12274:	2010      	movs	r0, #16
   12276:	4b1b      	ldr	r3, [pc, #108]	; (122e4 <http_client_callback+0x11c>)
   12278:	4798      	blx	r3
             }
 
             break;
   1227a:	e024      	b.n	122c6 <http_client_callback+0xfe>
 
         case HTTP_CLIENT_CALLBACK_DISCONNECTED:
             LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	681a      	ldr	r2, [r3, #0]
   12280:	4b1d      	ldr	r3, [pc, #116]	; (122f8 <http_client_callback+0x130>)
   12282:	0019      	movs	r1, r3
   12284:	2001      	movs	r0, #1
   12286:	4b15      	ldr	r3, [pc, #84]	; (122dc <http_client_callback+0x114>)
   12288:	4798      	blx	r3
 
             /* If disconnect reason is equal to -ECONNRESET(-104),
              * It means the server has closed the connection (timeout).
              * This is normal operation.
              */
             if (data->disconnected.reason == -EAGAIN) {
   1228a:	687b      	ldr	r3, [r7, #4]
   1228c:	681b      	ldr	r3, [r3, #0]
   1228e:	330b      	adds	r3, #11
   12290:	d11b      	bne.n	122ca <http_client_callback+0x102>
                 /* Server has not responded. Retry immediately. */
                 if (is_state_set(DOWNLOADING)) {
   12292:	2008      	movs	r0, #8
   12294:	4b19      	ldr	r3, [pc, #100]	; (122fc <http_client_callback+0x134>)
   12296:	4798      	blx	r3
   12298:	1e03      	subs	r3, r0, #0
   1229a:	d006      	beq.n	122aa <http_client_callback+0xe2>
                     f_close(&file_object);
   1229c:	4b18      	ldr	r3, [pc, #96]	; (12300 <http_client_callback+0x138>)
   1229e:	0018      	movs	r0, r3
   122a0:	4b18      	ldr	r3, [pc, #96]	; (12304 <http_client_callback+0x13c>)
   122a2:	4798      	blx	r3
                     clear_state(DOWNLOADING);
   122a4:	2008      	movs	r0, #8
   122a6:	4b18      	ldr	r3, [pc, #96]	; (12308 <http_client_callback+0x140>)
   122a8:	4798      	blx	r3
                 }
 
                 if (is_state_set(GET_REQUESTED)) {
   122aa:	2004      	movs	r0, #4
   122ac:	4b13      	ldr	r3, [pc, #76]	; (122fc <http_client_callback+0x134>)
   122ae:	4798      	blx	r3
   122b0:	1e03      	subs	r3, r0, #0
   122b2:	d002      	beq.n	122ba <http_client_callback+0xf2>
                     clear_state(GET_REQUESTED);
   122b4:	2004      	movs	r0, #4
   122b6:	4b14      	ldr	r3, [pc, #80]	; (12308 <http_client_callback+0x140>)
   122b8:	4798      	blx	r3
                 }
 
                 start_download();
   122ba:	4b14      	ldr	r3, [pc, #80]	; (1230c <http_client_callback+0x144>)
   122bc:	4798      	blx	r3
             }
 
             break;
   122be:	46c0      	nop			; (mov r8, r8)
   122c0:	e003      	b.n	122ca <http_client_callback+0x102>
             break;
   122c2:	46c0      	nop			; (mov r8, r8)
   122c4:	e002      	b.n	122cc <http_client_callback+0x104>
             break;
   122c6:	46c0      	nop			; (mov r8, r8)
   122c8:	e000      	b.n	122cc <http_client_callback+0x104>
             break;
   122ca:	46c0      	nop			; (mov r8, r8)
     }
 }
   122cc:	46bd      	mov	sp, r7
   122ce:	b005      	add	sp, #20
   122d0:	bd90      	pop	{r4, r7, pc}
   122d2:	46c0      	nop			; (mov r8, r8)
   122d4:	00035048 	.word	0x00035048
   122d8:	000346dc 	.word	0x000346dc
   122dc:	0001a761 	.word	0x0001a761
   122e0:	00034714 	.word	0x00034714
   122e4:	00011be5 	.word	0x00011be5
   122e8:	00034740 	.word	0x00034740
   122ec:	200006f0 	.word	0x200006f0
   122f0:	200006f4 	.word	0x200006f4
   122f4:	00011ff5 	.word	0x00011ff5
   122f8:	0003477c 	.word	0x0003477c
   122fc:	00011c0d 	.word	0x00011c0d
   12300:	200006cc 	.word	0x200006cc
   12304:	0002b46d 	.word	0x0002b46d
   12308:	00011bb1 	.word	0x00011bb1
   1230c:	00011f35 	.word	0x00011f35

00012310 <socket_cb>:
  *  - tstrSocketAcceptMsg
  *  - tstrSocketConnectMsg
  *  - tstrSocketRecvMsg
  */
 static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
 {
   12310:	b580      	push	{r7, lr}
   12312:	b082      	sub	sp, #8
   12314:	af00      	add	r7, sp, #0
   12316:	603a      	str	r2, [r7, #0]
   12318:	1dfb      	adds	r3, r7, #7
   1231a:	1c02      	adds	r2, r0, #0
   1231c:	701a      	strb	r2, [r3, #0]
   1231e:	1dbb      	adds	r3, r7, #6
   12320:	1c0a      	adds	r2, r1, #0
   12322:	701a      	strb	r2, [r3, #0]
     http_client_socket_event_handler(sock, u8Msg, pvMsg);
   12324:	683a      	ldr	r2, [r7, #0]
   12326:	1dbb      	adds	r3, r7, #6
   12328:	7819      	ldrb	r1, [r3, #0]
   1232a:	1dfb      	adds	r3, r7, #7
   1232c:	781b      	ldrb	r3, [r3, #0]
   1232e:	b25b      	sxtb	r3, r3
   12330:	0018      	movs	r0, r3
   12332:	4b03      	ldr	r3, [pc, #12]	; (12340 <socket_cb+0x30>)
   12334:	4798      	blx	r3
 }
   12336:	46c0      	nop			; (mov r8, r8)
   12338:	46bd      	mov	sp, r7
   1233a:	b002      	add	sp, #8
   1233c:	bd80      	pop	{r7, pc}
   1233e:	46c0      	nop			; (mov r8, r8)
   12340:	0002e039 	.word	0x0002e039

00012344 <resolve_cb>:
  * \brief Callback for the gethostbyname function (DNS Resolution callback).
  * \param[in] pu8DomainName Domain name of the host.
  * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
  */
 static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
 {
   12344:	b5b0      	push	{r4, r5, r7, lr}
   12346:	b086      	sub	sp, #24
   12348:	af04      	add	r7, sp, #16
   1234a:	6078      	str	r0, [r7, #4]
   1234c:	6039      	str	r1, [r7, #0]
     LogMessage(LOG_DEBUG_LVL,
                "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
                pu8DomainName,
                (int)IPV4_BYTE(u32ServerIP, 0),
   1234e:	683b      	ldr	r3, [r7, #0]
     LogMessage(LOG_DEBUG_LVL,
   12350:	22ff      	movs	r2, #255	; 0xff
   12352:	4013      	ands	r3, r2
   12354:	001c      	movs	r4, r3
                (int)IPV4_BYTE(u32ServerIP, 1),
   12356:	683b      	ldr	r3, [r7, #0]
   12358:	0a1b      	lsrs	r3, r3, #8
   1235a:	001a      	movs	r2, r3
     LogMessage(LOG_DEBUG_LVL,
   1235c:	23ff      	movs	r3, #255	; 0xff
   1235e:	4013      	ands	r3, r2
                (int)IPV4_BYTE(u32ServerIP, 2),
   12360:	683a      	ldr	r2, [r7, #0]
   12362:	0c12      	lsrs	r2, r2, #16
   12364:	0011      	movs	r1, r2
     LogMessage(LOG_DEBUG_LVL,
   12366:	22ff      	movs	r2, #255	; 0xff
   12368:	400a      	ands	r2, r1
                (int)IPV4_BYTE(u32ServerIP, 3));
   1236a:	6839      	ldr	r1, [r7, #0]
   1236c:	0e09      	lsrs	r1, r1, #24
     LogMessage(LOG_DEBUG_LVL,
   1236e:	000d      	movs	r5, r1
   12370:	6878      	ldr	r0, [r7, #4]
   12372:	4909      	ldr	r1, [pc, #36]	; (12398 <resolve_cb+0x54>)
   12374:	9502      	str	r5, [sp, #8]
   12376:	9201      	str	r2, [sp, #4]
   12378:	9300      	str	r3, [sp, #0]
   1237a:	0023      	movs	r3, r4
   1237c:	0002      	movs	r2, r0
   1237e:	2001      	movs	r0, #1
   12380:	4c06      	ldr	r4, [pc, #24]	; (1239c <resolve_cb+0x58>)
   12382:	47a0      	blx	r4
     http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   12384:	683a      	ldr	r2, [r7, #0]
   12386:	687b      	ldr	r3, [r7, #4]
   12388:	0011      	movs	r1, r2
   1238a:	0018      	movs	r0, r3
   1238c:	4b04      	ldr	r3, [pc, #16]	; (123a0 <resolve_cb+0x5c>)
   1238e:	4798      	blx	r3
 }
   12390:	46c0      	nop			; (mov r8, r8)
   12392:	46bd      	mov	sp, r7
   12394:	b002      	add	sp, #8
   12396:	bdb0      	pop	{r4, r5, r7, pc}
   12398:	000347ac 	.word	0x000347ac
   1239c:	0001a761 	.word	0x0001a761
   123a0:	0002e19d 	.word	0x0002e19d

000123a4 <wifi_cb>:
  *  - tstrM2MAPResp
  *  - tstrM2mScanDone
  *  - tstrM2mWifiscanResult
  */
 static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
 {
   123a4:	b590      	push	{r4, r7, lr}
   123a6:	b087      	sub	sp, #28
   123a8:	af02      	add	r7, sp, #8
   123aa:	0002      	movs	r2, r0
   123ac:	6039      	str	r1, [r7, #0]
   123ae:	1dfb      	adds	r3, r7, #7
   123b0:	701a      	strb	r2, [r3, #0]
     switch (u8MsgType) {
   123b2:	1dfb      	adds	r3, r7, #7
   123b4:	781b      	ldrb	r3, [r3, #0]
   123b6:	2b2c      	cmp	r3, #44	; 0x2c
   123b8:	d002      	beq.n	123c0 <wifi_cb+0x1c>
   123ba:	2b32      	cmp	r3, #50	; 0x32
   123bc:	d03d      	beq.n	1243a <wifi_cb+0x96>
                 }
             }
         } break;
 
         default:
             break;
   123be:	e06f      	b.n	124a0 <wifi_cb+0xfc>
             tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   123c0:	683b      	ldr	r3, [r7, #0]
   123c2:	60fb      	str	r3, [r7, #12]
             if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   123c4:	68fb      	ldr	r3, [r7, #12]
   123c6:	781b      	ldrb	r3, [r3, #0]
   123c8:	2b01      	cmp	r3, #1
   123ca:	d107      	bne.n	123dc <wifi_cb+0x38>
                 LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   123cc:	4b36      	ldr	r3, [pc, #216]	; (124a8 <wifi_cb+0x104>)
   123ce:	0019      	movs	r1, r3
   123d0:	2001      	movs	r0, #1
   123d2:	4b36      	ldr	r3, [pc, #216]	; (124ac <wifi_cb+0x108>)
   123d4:	4798      	blx	r3
                 m2m_wifi_request_dhcp_client();
   123d6:	4b36      	ldr	r3, [pc, #216]	; (124b0 <wifi_cb+0x10c>)
   123d8:	4798      	blx	r3
             break;
   123da:	e05e      	b.n	1249a <wifi_cb+0xf6>
             } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   123dc:	68fb      	ldr	r3, [r7, #12]
   123de:	781b      	ldrb	r3, [r3, #0]
   123e0:	2b00      	cmp	r3, #0
   123e2:	d15a      	bne.n	1249a <wifi_cb+0xf6>
                 LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   123e4:	4b33      	ldr	r3, [pc, #204]	; (124b4 <wifi_cb+0x110>)
   123e6:	0019      	movs	r1, r3
   123e8:	2001      	movs	r0, #1
   123ea:	4b30      	ldr	r3, [pc, #192]	; (124ac <wifi_cb+0x108>)
   123ec:	4798      	blx	r3
                 clear_state(WIFI_CONNECTED);
   123ee:	2002      	movs	r0, #2
   123f0:	4b31      	ldr	r3, [pc, #196]	; (124b8 <wifi_cb+0x114>)
   123f2:	4798      	blx	r3
                 if (is_state_set(DOWNLOADING)) {
   123f4:	2008      	movs	r0, #8
   123f6:	4b31      	ldr	r3, [pc, #196]	; (124bc <wifi_cb+0x118>)
   123f8:	4798      	blx	r3
   123fa:	1e03      	subs	r3, r0, #0
   123fc:	d006      	beq.n	1240c <wifi_cb+0x68>
                     f_close(&file_object);
   123fe:	4b30      	ldr	r3, [pc, #192]	; (124c0 <wifi_cb+0x11c>)
   12400:	0018      	movs	r0, r3
   12402:	4b30      	ldr	r3, [pc, #192]	; (124c4 <wifi_cb+0x120>)
   12404:	4798      	blx	r3
                     clear_state(DOWNLOADING);
   12406:	2008      	movs	r0, #8
   12408:	4b2b      	ldr	r3, [pc, #172]	; (124b8 <wifi_cb+0x114>)
   1240a:	4798      	blx	r3
                 if (is_state_set(GET_REQUESTED)) {
   1240c:	2004      	movs	r0, #4
   1240e:	4b2b      	ldr	r3, [pc, #172]	; (124bc <wifi_cb+0x118>)
   12410:	4798      	blx	r3
   12412:	1e03      	subs	r3, r0, #0
   12414:	d002      	beq.n	1241c <wifi_cb+0x78>
                     clear_state(GET_REQUESTED);
   12416:	2004      	movs	r0, #4
   12418:	4b27      	ldr	r3, [pc, #156]	; (124b8 <wifi_cb+0x114>)
   1241a:	4798      	blx	r3
                 mqtt_disconnect(&mqtt_inst, 1);
   1241c:	4b2a      	ldr	r3, [pc, #168]	; (124c8 <wifi_cb+0x124>)
   1241e:	2101      	movs	r1, #1
   12420:	0018      	movs	r0, r3
   12422:	4b2a      	ldr	r3, [pc, #168]	; (124cc <wifi_cb+0x128>)
   12424:	4798      	blx	r3
                 m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   12426:	4a2a      	ldr	r2, [pc, #168]	; (124d0 <wifi_cb+0x12c>)
   12428:	482a      	ldr	r0, [pc, #168]	; (124d4 <wifi_cb+0x130>)
   1242a:	23ff      	movs	r3, #255	; 0xff
   1242c:	9300      	str	r3, [sp, #0]
   1242e:	0013      	movs	r3, r2
   12430:	2202      	movs	r2, #2
   12432:	210b      	movs	r1, #11
   12434:	4c28      	ldr	r4, [pc, #160]	; (124d8 <wifi_cb+0x134>)
   12436:	47a0      	blx	r4
             break;
   12438:	e02f      	b.n	1249a <wifi_cb+0xf6>
             uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   1243a:	683b      	ldr	r3, [r7, #0]
   1243c:	60bb      	str	r3, [r7, #8]
             LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1243e:	68bb      	ldr	r3, [r7, #8]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	0018      	movs	r0, r3
   12444:	68bb      	ldr	r3, [r7, #8]
   12446:	3301      	adds	r3, #1
   12448:	781b      	ldrb	r3, [r3, #0]
   1244a:	001c      	movs	r4, r3
   1244c:	68bb      	ldr	r3, [r7, #8]
   1244e:	3302      	adds	r3, #2
   12450:	781b      	ldrb	r3, [r3, #0]
   12452:	001a      	movs	r2, r3
   12454:	68bb      	ldr	r3, [r7, #8]
   12456:	3303      	adds	r3, #3
   12458:	781b      	ldrb	r3, [r3, #0]
   1245a:	4920      	ldr	r1, [pc, #128]	; (124dc <wifi_cb+0x138>)
   1245c:	9301      	str	r3, [sp, #4]
   1245e:	9200      	str	r2, [sp, #0]
   12460:	0023      	movs	r3, r4
   12462:	0002      	movs	r2, r0
   12464:	2001      	movs	r0, #1
   12466:	4c11      	ldr	r4, [pc, #68]	; (124ac <wifi_cb+0x108>)
   12468:	47a0      	blx	r4
             add_state(WIFI_CONNECTED);
   1246a:	2002      	movs	r0, #2
   1246c:	4b1c      	ldr	r3, [pc, #112]	; (124e0 <wifi_cb+0x13c>)
   1246e:	4798      	blx	r3
             if (do_download_flag == 1) {
   12470:	4b1c      	ldr	r3, [pc, #112]	; (124e4 <wifi_cb+0x140>)
   12472:	781b      	ldrb	r3, [r3, #0]
   12474:	2b01      	cmp	r3, #1
   12476:	d102      	bne.n	1247e <wifi_cb+0xda>
                 start_download();
   12478:	4b1b      	ldr	r3, [pc, #108]	; (124e8 <wifi_cb+0x144>)
   1247a:	4798      	blx	r3
         } break;
   1247c:	e00f      	b.n	1249e <wifi_cb+0xfa>
                 if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1247e:	4a1b      	ldr	r2, [pc, #108]	; (124ec <wifi_cb+0x148>)
   12480:	4b11      	ldr	r3, [pc, #68]	; (124c8 <wifi_cb+0x124>)
   12482:	0011      	movs	r1, r2
   12484:	0018      	movs	r0, r3
   12486:	4b1a      	ldr	r3, [pc, #104]	; (124f0 <wifi_cb+0x14c>)
   12488:	4798      	blx	r3
   1248a:	1e03      	subs	r3, r0, #0
   1248c:	d007      	beq.n	1249e <wifi_cb+0xfa>
                     LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1248e:	4b19      	ldr	r3, [pc, #100]	; (124f4 <wifi_cb+0x150>)
   12490:	0019      	movs	r1, r3
   12492:	2001      	movs	r0, #1
   12494:	4b05      	ldr	r3, [pc, #20]	; (124ac <wifi_cb+0x108>)
   12496:	4798      	blx	r3
         } break;
   12498:	e001      	b.n	1249e <wifi_cb+0xfa>
             break;
   1249a:	46c0      	nop			; (mov r8, r8)
   1249c:	e000      	b.n	124a0 <wifi_cb+0xfc>
         } break;
   1249e:	46c0      	nop			; (mov r8, r8)
     }
 }
   124a0:	46c0      	nop			; (mov r8, r8)
   124a2:	46bd      	mov	sp, r7
   124a4:	b005      	add	sp, #20
   124a6:	bd90      	pop	{r4, r7, pc}
   124a8:	000347dc 	.word	0x000347dc
   124ac:	0001a761 	.word	0x0001a761
   124b0:	0001ed85 	.word	0x0001ed85
   124b4:	000347fc 	.word	0x000347fc
   124b8:	00011bb1 	.word	0x00011bb1
   124bc:	00011c0d 	.word	0x00011c0d
   124c0:	200006cc 	.word	0x200006cc
   124c4:	0002b46d 	.word	0x0002b46d
   124c8:	200006f8 	.word	0x200006f8
   124cc:	0002cce5 	.word	0x0002cce5
   124d0:	00034820 	.word	0x00034820
   124d4:	0003482c 	.word	0x0003482c
   124d8:	0001e8b1 	.word	0x0001e8b1
   124dc:	00034838 	.word	0x00034838
   124e0:	00011be5 	.word	0x00011be5
   124e4:	20000498 	.word	0x20000498
   124e8:	00011f35 	.word	0x00011f35
   124ec:	0003445c 	.word	0x0003445c
   124f0:	0002cbb1 	.word	0x0002cbb1
   124f4:	00034860 	.word	0x00034860

000124f8 <init_storage>:
 
 /**
  * \brief Initialize SD/MMC storage.
  */
 void init_storage(void)
 {
   124f8:	b590      	push	{r4, r7, lr}
   124fa:	b083      	sub	sp, #12
   124fc:	af00      	add	r7, sp, #0
     FRESULT res;
     Ctrl_status status;
 
     /* Initialize SD/MMC stack. */
     sd_mmc_init();
   124fe:	4b29      	ldr	r3, [pc, #164]	; (125a4 <init_storage+0xac>)
   12500:	4798      	blx	r3
     while (true) {
         LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   12502:	4b29      	ldr	r3, [pc, #164]	; (125a8 <init_storage+0xb0>)
   12504:	0019      	movs	r1, r3
   12506:	2001      	movs	r0, #1
   12508:	4b28      	ldr	r3, [pc, #160]	; (125ac <init_storage+0xb4>)
   1250a:	4798      	blx	r3
 
         /* Wait card present and ready. */
         do {
             status = sd_mmc_test_unit_ready(0);
   1250c:	1dfc      	adds	r4, r7, #7
   1250e:	2000      	movs	r0, #0
   12510:	4b27      	ldr	r3, [pc, #156]	; (125b0 <init_storage+0xb8>)
   12512:	4798      	blx	r3
   12514:	0003      	movs	r3, r0
   12516:	7023      	strb	r3, [r4, #0]
             if (CTRL_FAIL == status) {
   12518:	1dfb      	adds	r3, r7, #7
   1251a:	781b      	ldrb	r3, [r3, #0]
   1251c:	2b01      	cmp	r3, #1
   1251e:	d110      	bne.n	12542 <init_storage+0x4a>
                 LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   12520:	4b24      	ldr	r3, [pc, #144]	; (125b4 <init_storage+0xbc>)
   12522:	0019      	movs	r1, r3
   12524:	2001      	movs	r0, #1
   12526:	4b21      	ldr	r3, [pc, #132]	; (125ac <init_storage+0xb4>)
   12528:	4798      	blx	r3
                 LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   1252a:	4b23      	ldr	r3, [pc, #140]	; (125b8 <init_storage+0xc0>)
   1252c:	0019      	movs	r1, r3
   1252e:	2001      	movs	r0, #1
   12530:	4b1e      	ldr	r3, [pc, #120]	; (125ac <init_storage+0xb4>)
   12532:	4798      	blx	r3
                 while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   12534:	46c0      	nop			; (mov r8, r8)
   12536:	2000      	movs	r0, #0
   12538:	4b20      	ldr	r3, [pc, #128]	; (125bc <init_storage+0xc4>)
   1253a:	4798      	blx	r3
   1253c:	0003      	movs	r3, r0
   1253e:	2b02      	cmp	r3, #2
   12540:	d1f9      	bne.n	12536 <init_storage+0x3e>
                 }
             }
         } while (CTRL_GOOD != status);
   12542:	1dfb      	adds	r3, r7, #7
   12544:	781b      	ldrb	r3, [r3, #0]
   12546:	2b00      	cmp	r3, #0
   12548:	d1e0      	bne.n	1250c <init_storage+0x14>
 
         LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   1254a:	4b1d      	ldr	r3, [pc, #116]	; (125c0 <init_storage+0xc8>)
   1254c:	0019      	movs	r1, r3
   1254e:	2001      	movs	r0, #1
   12550:	4b16      	ldr	r3, [pc, #88]	; (125ac <init_storage+0xb4>)
   12552:	4798      	blx	r3
         memset(&fatfs, 0, sizeof(FATFS));
   12554:	238c      	movs	r3, #140	; 0x8c
   12556:	009a      	lsls	r2, r3, #2
   12558:	4b1a      	ldr	r3, [pc, #104]	; (125c4 <init_storage+0xcc>)
   1255a:	2100      	movs	r1, #0
   1255c:	0018      	movs	r0, r3
   1255e:	4b1a      	ldr	r3, [pc, #104]	; (125c8 <init_storage+0xd0>)
   12560:	4798      	blx	r3
         res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   12562:	1dbc      	adds	r4, r7, #6
   12564:	4b17      	ldr	r3, [pc, #92]	; (125c4 <init_storage+0xcc>)
   12566:	0019      	movs	r1, r3
   12568:	2000      	movs	r0, #0
   1256a:	4b18      	ldr	r3, [pc, #96]	; (125cc <init_storage+0xd4>)
   1256c:	4798      	blx	r3
   1256e:	0003      	movs	r3, r0
   12570:	7023      	strb	r3, [r4, #0]
         if (FR_INVALID_DRIVE == res) {
   12572:	1dbb      	adds	r3, r7, #6
   12574:	781b      	ldrb	r3, [r3, #0]
   12576:	2b0b      	cmp	r3, #11
   12578:	d107      	bne.n	1258a <init_storage+0x92>
             LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   1257a:	1dbb      	adds	r3, r7, #6
   1257c:	781a      	ldrb	r2, [r3, #0]
   1257e:	4b14      	ldr	r3, [pc, #80]	; (125d0 <init_storage+0xd8>)
   12580:	0019      	movs	r1, r3
   12582:	2001      	movs	r0, #1
   12584:	4b09      	ldr	r3, [pc, #36]	; (125ac <init_storage+0xb4>)
   12586:	4798      	blx	r3
             return;
   12588:	e008      	b.n	1259c <init_storage+0xa4>
         }
 
         LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   1258a:	4b12      	ldr	r3, [pc, #72]	; (125d4 <init_storage+0xdc>)
   1258c:	0019      	movs	r1, r3
   1258e:	2001      	movs	r0, #1
   12590:	4b06      	ldr	r3, [pc, #24]	; (125ac <init_storage+0xb4>)
   12592:	4798      	blx	r3
         add_state(STORAGE_READY);
   12594:	2001      	movs	r0, #1
   12596:	4b10      	ldr	r3, [pc, #64]	; (125d8 <init_storage+0xe0>)
   12598:	4798      	blx	r3
         return;
   1259a:	46c0      	nop			; (mov r8, r8)
     }
 }
   1259c:	46bd      	mov	sp, r7
   1259e:	b003      	add	sp, #12
   125a0:	bd90      	pop	{r4, r7, pc}
   125a2:	46c0      	nop			; (mov r8, r8)
   125a4:	0001b5bd 	.word	0x0001b5bd
   125a8:	00034884 	.word	0x00034884
   125ac:	0001a761 	.word	0x0001a761
   125b0:	0001ba99 	.word	0x0001ba99
   125b4:	000348bc 	.word	0x000348bc
   125b8:	000348e4 	.word	0x000348e4
   125bc:	0001b60d 	.word	0x0001b60d
   125c0:	00034918 	.word	0x00034918
   125c4:	2000049c 	.word	0x2000049c
   125c8:	000328a7 	.word	0x000328a7
   125cc:	0002a779 	.word	0x0002a779
   125d0:	0003493c 	.word	0x0003493c
   125d4:	0003496c 	.word	0x0003496c
   125d8:	00011be5 	.word	0x00011be5

000125dc <configure_timer>:
 
 /**
  * \brief Configure Timer module.
  */
 static void configure_timer(void)
 {
   125dc:	b580      	push	{r7, lr}
   125de:	b082      	sub	sp, #8
   125e0:	af00      	add	r7, sp, #0
     struct sw_timer_config swt_conf;
     sw_timer_get_config_defaults(&swt_conf);
   125e2:	1d3b      	adds	r3, r7, #4
   125e4:	0018      	movs	r0, r3
   125e6:	4b08      	ldr	r3, [pc, #32]	; (12608 <configure_timer+0x2c>)
   125e8:	4798      	blx	r3
 
     sw_timer_init(&swt_module_inst, &swt_conf);
   125ea:	1d3a      	adds	r2, r7, #4
   125ec:	4b07      	ldr	r3, [pc, #28]	; (1260c <configure_timer+0x30>)
   125ee:	0011      	movs	r1, r2
   125f0:	0018      	movs	r0, r3
   125f2:	4b07      	ldr	r3, [pc, #28]	; (12610 <configure_timer+0x34>)
   125f4:	4798      	blx	r3
     sw_timer_enable(&swt_module_inst);
   125f6:	4b05      	ldr	r3, [pc, #20]	; (1260c <configure_timer+0x30>)
   125f8:	0018      	movs	r0, r3
   125fa:	4b06      	ldr	r3, [pc, #24]	; (12614 <configure_timer+0x38>)
   125fc:	4798      	blx	r3
 }
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	46bd      	mov	sp, r7
   12602:	b002      	add	sp, #8
   12604:	bd80      	pop	{r7, pc}
   12606:	46c0      	nop			; (mov r8, r8)
   12608:	0002f7cd 	.word	0x0002f7cd
   1260c:	20004360 	.word	0x20004360
   12610:	0002f7f1 	.word	0x0002f7f1
   12614:	0002f8dd 	.word	0x0002f8dd

00012618 <configure_http_client>:
 
 /**
  * \brief Configure HTTP client module.
  */
 static void configure_http_client(void)
 {
   12618:	b580      	push	{r7, lr}
   1261a:	b088      	sub	sp, #32
   1261c:	af00      	add	r7, sp, #0
     struct http_client_config httpc_conf;
     int ret;
 
     http_client_get_config_defaults(&httpc_conf);
   1261e:	003b      	movs	r3, r7
   12620:	0018      	movs	r0, r3
   12622:	4b15      	ldr	r3, [pc, #84]	; (12678 <configure_http_client+0x60>)
   12624:	4798      	blx	r3
 
     httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   12626:	003b      	movs	r3, r7
   12628:	2280      	movs	r2, #128	; 0x80
   1262a:	0092      	lsls	r2, r2, #2
   1262c:	611a      	str	r2, [r3, #16]
     httpc_conf.timer_inst = &swt_module_inst;
   1262e:	003b      	movs	r3, r7
   12630:	4a12      	ldr	r2, [pc, #72]	; (1267c <configure_http_client+0x64>)
   12632:	605a      	str	r2, [r3, #4]
     httpc_conf.port = 80;
   12634:	003b      	movs	r3, r7
   12636:	2250      	movs	r2, #80	; 0x50
   12638:	801a      	strh	r2, [r3, #0]
     httpc_conf.tls = 0;
   1263a:	003b      	movs	r3, r7
   1263c:	2200      	movs	r2, #0
   1263e:	709a      	strb	r2, [r3, #2]
 
     ret = http_client_init(&http_client_module_inst, &httpc_conf);
   12640:	003a      	movs	r2, r7
   12642:	4b0f      	ldr	r3, [pc, #60]	; (12680 <configure_http_client+0x68>)
   12644:	0011      	movs	r1, r2
   12646:	0018      	movs	r0, r3
   12648:	4b0e      	ldr	r3, [pc, #56]	; (12684 <configure_http_client+0x6c>)
   1264a:	4798      	blx	r3
   1264c:	0003      	movs	r3, r0
   1264e:	61fb      	str	r3, [r7, #28]
     if (ret < 0) {
   12650:	69fb      	ldr	r3, [r7, #28]
   12652:	2b00      	cmp	r3, #0
   12654:	da06      	bge.n	12664 <configure_http_client+0x4c>
         LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   12656:	69fa      	ldr	r2, [r7, #28]
   12658:	4b0b      	ldr	r3, [pc, #44]	; (12688 <configure_http_client+0x70>)
   1265a:	0019      	movs	r1, r3
   1265c:	2001      	movs	r0, #1
   1265e:	4b0b      	ldr	r3, [pc, #44]	; (1268c <configure_http_client+0x74>)
   12660:	4798      	blx	r3
         while (1) {
   12662:	e7fe      	b.n	12662 <configure_http_client+0x4a>
         } /* Loop forever. */
     }
 
     http_client_register_callback(&http_client_module_inst, http_client_callback);
   12664:	4a0a      	ldr	r2, [pc, #40]	; (12690 <configure_http_client+0x78>)
   12666:	4b06      	ldr	r3, [pc, #24]	; (12680 <configure_http_client+0x68>)
   12668:	0011      	movs	r1, r2
   1266a:	0018      	movs	r0, r3
   1266c:	4b09      	ldr	r3, [pc, #36]	; (12694 <configure_http_client+0x7c>)
   1266e:	4798      	blx	r3
 }
   12670:	46c0      	nop			; (mov r8, r8)
   12672:	46bd      	mov	sp, r7
   12674:	b008      	add	sp, #32
   12676:	bd80      	pop	{r7, pc}
   12678:	0002de61 	.word	0x0002de61
   1267c:	20004360 	.word	0x20004360
   12680:	200043b8 	.word	0x200043b8
   12684:	0002dead 	.word	0x0002dead
   12688:	00034990 	.word	0x00034990
   1268c:	0001a761 	.word	0x0001a761
   12690:	000121c9 	.word	0x000121c9
   12694:	0002df99 	.word	0x0002df99

00012698 <socket_event_handler>:
  *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
  *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
  * \param[in] msg_data A structure contains notification informations.
  */
 static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
 {
   12698:	b580      	push	{r7, lr}
   1269a:	b082      	sub	sp, #8
   1269c:	af00      	add	r7, sp, #0
   1269e:	603a      	str	r2, [r7, #0]
   126a0:	1dfb      	adds	r3, r7, #7
   126a2:	1c02      	adds	r2, r0, #0
   126a4:	701a      	strb	r2, [r3, #0]
   126a6:	1dbb      	adds	r3, r7, #6
   126a8:	1c0a      	adds	r2, r1, #0
   126aa:	701a      	strb	r2, [r3, #0]
     mqtt_socket_event_handler(sock, msg_type, msg_data);
   126ac:	683a      	ldr	r2, [r7, #0]
   126ae:	1dbb      	adds	r3, r7, #6
   126b0:	7819      	ldrb	r1, [r3, #0]
   126b2:	1dfb      	adds	r3, r7, #7
   126b4:	781b      	ldrb	r3, [r3, #0]
   126b6:	b25b      	sxtb	r3, r3
   126b8:	0018      	movs	r0, r3
   126ba:	4b03      	ldr	r3, [pc, #12]	; (126c8 <socket_event_handler+0x30>)
   126bc:	4798      	blx	r3
 }
   126be:	46c0      	nop			; (mov r8, r8)
   126c0:	46bd      	mov	sp, r7
   126c2:	b002      	add	sp, #8
   126c4:	bd80      	pop	{r7, pc}
   126c6:	46c0      	nop			; (mov r8, r8)
   126c8:	0002cb59 	.word	0x0002cb59

000126cc <socket_resolve_handler>:
  *
  * \param[in] doamin_name Domain name.
  * \param[in] server_ip IP of server.
  */
 static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
 {
   126cc:	b580      	push	{r7, lr}
   126ce:	b082      	sub	sp, #8
   126d0:	af00      	add	r7, sp, #0
   126d2:	6078      	str	r0, [r7, #4]
   126d4:	6039      	str	r1, [r7, #0]
     mqtt_socket_resolve_handler(doamin_name, server_ip);
   126d6:	683a      	ldr	r2, [r7, #0]
   126d8:	687b      	ldr	r3, [r7, #4]
   126da:	0011      	movs	r1, r2
   126dc:	0018      	movs	r0, r3
   126de:	4b03      	ldr	r3, [pc, #12]	; (126ec <socket_resolve_handler+0x20>)
   126e0:	4798      	blx	r3
 }
   126e2:	46c0      	nop			; (mov r8, r8)
   126e4:	46bd      	mov	sp, r7
   126e6:	b002      	add	sp, #8
   126e8:	bd80      	pop	{r7, pc}
   126ea:	46c0      	nop			; (mov r8, r8)
   126ec:	0002cb8d 	.word	0x0002cb8d

000126f0 <SubscribeHandlerLedDebugTopic>:
  *
  * \param[in] msgData Data to be received.
  */
 
  void SubscribeHandlerLedDebugTopic(MessageData *msgData)
 {
   126f0:	b580      	push	{r7, lr}
   126f2:	b082      	sub	sp, #8
   126f4:	af00      	add	r7, sp, #0
   126f6:	6078      	str	r0, [r7, #4]
     // "true" or "false" boolean
     if (msgData->message->payloadlen == 4 &&
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	681b      	ldr	r3, [r3, #0]
   126fc:	68db      	ldr	r3, [r3, #12]
   126fe:	2b04      	cmp	r3, #4
   12700:	d112      	bne.n	12728 <SubscribeHandlerLedDebugTopic+0x38>
         strncmp((char *)msgData->message->payload, "true", 4) == 0) {
   12702:	687b      	ldr	r3, [r7, #4]
   12704:	681b      	ldr	r3, [r3, #0]
   12706:	689b      	ldr	r3, [r3, #8]
   12708:	4917      	ldr	r1, [pc, #92]	; (12768 <SubscribeHandlerLedDebugTopic+0x78>)
   1270a:	2204      	movs	r2, #4
   1270c:	0018      	movs	r0, r3
   1270e:	4b17      	ldr	r3, [pc, #92]	; (1276c <SubscribeHandlerLedDebugTopic+0x7c>)
   12710:	4798      	blx	r3
   12712:	1e03      	subs	r3, r0, #0
     if (msgData->message->payloadlen == 4 &&
   12714:	d108      	bne.n	12728 <SubscribeHandlerLedDebugTopic+0x38>
         port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
   12716:	2100      	movs	r1, #0
   12718:	2017      	movs	r0, #23
   1271a:	4b15      	ldr	r3, [pc, #84]	; (12770 <SubscribeHandlerLedDebugTopic+0x80>)
   1271c:	4798      	blx	r3
         SerialConsoleWriteString("[MQTT] LED turned ON\r\n");
   1271e:	4b15      	ldr	r3, [pc, #84]	; (12774 <SubscribeHandlerLedDebugTopic+0x84>)
   12720:	0018      	movs	r0, r3
   12722:	4b15      	ldr	r3, [pc, #84]	; (12778 <SubscribeHandlerLedDebugTopic+0x88>)
   12724:	4798      	blx	r3
   12726:	e01b      	b.n	12760 <SubscribeHandlerLedDebugTopic+0x70>
     } else if (msgData->message->payloadlen == 5 &&
   12728:	687b      	ldr	r3, [r7, #4]
   1272a:	681b      	ldr	r3, [r3, #0]
   1272c:	68db      	ldr	r3, [r3, #12]
   1272e:	2b05      	cmp	r3, #5
   12730:	d112      	bne.n	12758 <SubscribeHandlerLedDebugTopic+0x68>
                strncmp((char *)msgData->message->payload, "false", 5) == 0) {
   12732:	687b      	ldr	r3, [r7, #4]
   12734:	681b      	ldr	r3, [r3, #0]
   12736:	689b      	ldr	r3, [r3, #8]
   12738:	4910      	ldr	r1, [pc, #64]	; (1277c <SubscribeHandlerLedDebugTopic+0x8c>)
   1273a:	2205      	movs	r2, #5
   1273c:	0018      	movs	r0, r3
   1273e:	4b0b      	ldr	r3, [pc, #44]	; (1276c <SubscribeHandlerLedDebugTopic+0x7c>)
   12740:	4798      	blx	r3
   12742:	1e03      	subs	r3, r0, #0
     } else if (msgData->message->payloadlen == 5 &&
   12744:	d108      	bne.n	12758 <SubscribeHandlerLedDebugTopic+0x68>
         port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   12746:	2101      	movs	r1, #1
   12748:	2017      	movs	r0, #23
   1274a:	4b09      	ldr	r3, [pc, #36]	; (12770 <SubscribeHandlerLedDebugTopic+0x80>)
   1274c:	4798      	blx	r3
         SerialConsoleWriteString("[MQTT] LED turned OFF\r\n");
   1274e:	4b0c      	ldr	r3, [pc, #48]	; (12780 <SubscribeHandlerLedDebugTopic+0x90>)
   12750:	0018      	movs	r0, r3
   12752:	4b09      	ldr	r3, [pc, #36]	; (12778 <SubscribeHandlerLedDebugTopic+0x88>)
   12754:	4798      	blx	r3
   12756:	e003      	b.n	12760 <SubscribeHandlerLedDebugTopic+0x70>
     } else {
         SerialConsoleWriteString("[MQTT] Unknown payload format.\r\n");
   12758:	4b0a      	ldr	r3, [pc, #40]	; (12784 <SubscribeHandlerLedDebugTopic+0x94>)
   1275a:	0018      	movs	r0, r3
   1275c:	4b06      	ldr	r3, [pc, #24]	; (12778 <SubscribeHandlerLedDebugTopic+0x88>)
   1275e:	4798      	blx	r3
     }
 }
   12760:	46c0      	nop			; (mov r8, r8)
   12762:	46bd      	mov	sp, r7
   12764:	b002      	add	sp, #8
   12766:	bd80      	pop	{r7, pc}
   12768:	000349d8 	.word	0x000349d8
   1276c:	00032cb5 	.word	0x00032cb5
   12770:	00011b49 	.word	0x00011b49
   12774:	000349e0 	.word	0x000349e0
   12778:	0001a691 	.word	0x0001a691
   1277c:	000349f8 	.word	0x000349f8
   12780:	00034a00 	.word	0x00034a00
   12784:	00034a18 	.word	0x00034a18

00012788 <SubscribeHandlerLedTopic>:
 
 
 
 void SubscribeHandlerLedTopic(MessageData *msgData)
 {
   12788:	b590      	push	{r4, r7, lr}
   1278a:	b089      	sub	sp, #36	; 0x24
   1278c:	af02      	add	r7, sp, #8
   1278e:	6078      	str	r0, [r7, #4]
     uint8_t rgb[3] = {0, 0, 0};
   12790:	2310      	movs	r3, #16
   12792:	18fb      	adds	r3, r7, r3
   12794:	2200      	movs	r2, #0
   12796:	701a      	strb	r2, [r3, #0]
   12798:	2310      	movs	r3, #16
   1279a:	18fb      	adds	r3, r7, r3
   1279c:	2200      	movs	r2, #0
   1279e:	705a      	strb	r2, [r3, #1]
   127a0:	2310      	movs	r3, #16
   127a2:	18fb      	adds	r3, r7, r3
   127a4:	2200      	movs	r2, #0
   127a6:	709a      	strb	r2, [r3, #2]
     LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   127a8:	687b      	ldr	r3, [r7, #4]
   127aa:	685b      	ldr	r3, [r3, #4]
   127ac:	685a      	ldr	r2, [r3, #4]
   127ae:	687b      	ldr	r3, [r7, #4]
   127b0:	685b      	ldr	r3, [r3, #4]
   127b2:	689b      	ldr	r3, [r3, #8]
   127b4:	4924      	ldr	r1, [pc, #144]	; (12848 <SubscribeHandlerLedTopic+0xc0>)
   127b6:	2001      	movs	r0, #1
   127b8:	4c24      	ldr	r4, [pc, #144]	; (1284c <SubscribeHandlerLedTopic+0xc4>)
   127ba:	47a0      	blx	r4
     // Will receive something of the style "rgb(222, 224, 189)"
     if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   127bc:	687b      	ldr	r3, [r7, #4]
   127be:	681b      	ldr	r3, [r3, #0]
   127c0:	689b      	ldr	r3, [r3, #8]
   127c2:	4923      	ldr	r1, [pc, #140]	; (12850 <SubscribeHandlerLedTopic+0xc8>)
   127c4:	2204      	movs	r2, #4
   127c6:	0018      	movs	r0, r3
   127c8:	4b22      	ldr	r3, [pc, #136]	; (12854 <SubscribeHandlerLedTopic+0xcc>)
   127ca:	4798      	blx	r3
   127cc:	1e03      	subs	r3, r0, #0
   127ce:	d137      	bne.n	12840 <SubscribeHandlerLedTopic+0xb8>
         char *p = (char *)&msgData->message->payload[4];
   127d0:	687b      	ldr	r3, [r7, #4]
   127d2:	681b      	ldr	r3, [r3, #0]
   127d4:	689b      	ldr	r3, [r3, #8]
   127d6:	3304      	adds	r3, #4
   127d8:	60fb      	str	r3, [r7, #12]
         int nb = 0;
   127da:	2300      	movs	r3, #0
   127dc:	617b      	str	r3, [r7, #20]
         while (nb <= 2 && *p) {
   127de:	e015      	b.n	1280c <SubscribeHandlerLedTopic+0x84>
             rgb[nb++] = strtol(p, &p, 10);
   127e0:	697c      	ldr	r4, [r7, #20]
   127e2:	1c63      	adds	r3, r4, #1
   127e4:	617b      	str	r3, [r7, #20]
   127e6:	68fb      	ldr	r3, [r7, #12]
   127e8:	220c      	movs	r2, #12
   127ea:	18b9      	adds	r1, r7, r2
   127ec:	220a      	movs	r2, #10
   127ee:	0018      	movs	r0, r3
   127f0:	4b19      	ldr	r3, [pc, #100]	; (12858 <SubscribeHandlerLedTopic+0xd0>)
   127f2:	4798      	blx	r3
   127f4:	0003      	movs	r3, r0
   127f6:	b2da      	uxtb	r2, r3
   127f8:	2310      	movs	r3, #16
   127fa:	18fb      	adds	r3, r7, r3
   127fc:	551a      	strb	r2, [r3, r4]
             if (*p != ',') break;
   127fe:	68fb      	ldr	r3, [r7, #12]
   12800:	781b      	ldrb	r3, [r3, #0]
   12802:	2b2c      	cmp	r3, #44	; 0x2c
   12804:	d10a      	bne.n	1281c <SubscribeHandlerLedTopic+0x94>
             p++; /* skip, */
   12806:	68fb      	ldr	r3, [r7, #12]
   12808:	3301      	adds	r3, #1
   1280a:	60fb      	str	r3, [r7, #12]
         while (nb <= 2 && *p) {
   1280c:	697b      	ldr	r3, [r7, #20]
   1280e:	2b02      	cmp	r3, #2
   12810:	dc05      	bgt.n	1281e <SubscribeHandlerLedTopic+0x96>
   12812:	68fb      	ldr	r3, [r7, #12]
   12814:	781b      	ldrb	r3, [r3, #0]
   12816:	2b00      	cmp	r3, #0
   12818:	d1e2      	bne.n	127e0 <SubscribeHandlerLedTopic+0x58>
   1281a:	e000      	b.n	1281e <SubscribeHandlerLedTopic+0x96>
             if (*p != ',') break;
   1281c:	46c0      	nop			; (mov r8, r8)
         }
         LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   1281e:	2310      	movs	r3, #16
   12820:	18fb      	adds	r3, r7, r3
   12822:	781b      	ldrb	r3, [r3, #0]
   12824:	001a      	movs	r2, r3
   12826:	2310      	movs	r3, #16
   12828:	18fb      	adds	r3, r7, r3
   1282a:	785b      	ldrb	r3, [r3, #1]
   1282c:	0018      	movs	r0, r3
   1282e:	2310      	movs	r3, #16
   12830:	18fb      	adds	r3, r7, r3
   12832:	789b      	ldrb	r3, [r3, #2]
   12834:	4909      	ldr	r1, [pc, #36]	; (1285c <SubscribeHandlerLedTopic+0xd4>)
   12836:	9300      	str	r3, [sp, #0]
   12838:	0003      	movs	r3, r0
   1283a:	2001      	movs	r0, #1
   1283c:	4c03      	ldr	r4, [pc, #12]	; (1284c <SubscribeHandlerLedTopic+0xc4>)
   1283e:	47a0      	blx	r4
     }
 }
   12840:	46c0      	nop			; (mov r8, r8)
   12842:	46bd      	mov	sp, r7
   12844:	b007      	add	sp, #28
   12846:	bd90      	pop	{r4, r7, pc}
   12848:	00034a3c 	.word	0x00034a3c
   1284c:	0001a761 	.word	0x0001a761
   12850:	00034a44 	.word	0x00034a44
   12854:	00032cb5 	.word	0x00032cb5
   12858:	00032e61 	.word	0x00032e61
   1285c:	00034a4c 	.word	0x00034a4c

00012860 <SubscribeHandlerGameTopic>:
 
 void SubscribeHandlerGameTopic(MessageData *msgData)
 {
   12860:	b590      	push	{r4, r7, lr}
   12862:	b08b      	sub	sp, #44	; 0x2c
   12864:	af00      	add	r7, sp, #0
   12866:	6078      	str	r0, [r7, #4]
     struct GameDataPacket game;
     memset(game.game, 0xff, sizeof(game.game));
   12868:	230c      	movs	r3, #12
   1286a:	18fb      	adds	r3, r7, r3
   1286c:	2214      	movs	r2, #20
   1286e:	21ff      	movs	r1, #255	; 0xff
   12870:	0018      	movs	r0, r3
   12872:	4b41      	ldr	r3, [pc, #260]	; (12978 <SubscribeHandlerGameTopic+0x118>)
   12874:	4798      	blx	r3
 
     // Parse input. The start string must be '{"game":['
     if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   12876:	687b      	ldr	r3, [r7, #4]
   12878:	681b      	ldr	r3, [r3, #0]
   1287a:	689b      	ldr	r3, [r3, #8]
   1287c:	493f      	ldr	r1, [pc, #252]	; (1297c <SubscribeHandlerGameTopic+0x11c>)
   1287e:	2209      	movs	r2, #9
   12880:	0018      	movs	r0, r3
   12882:	4b3f      	ldr	r3, [pc, #252]	; (12980 <SubscribeHandlerGameTopic+0x120>)
   12884:	4798      	blx	r3
   12886:	1e03      	subs	r3, r0, #0
   12888:	d159      	bne.n	1293e <SubscribeHandlerGameTopic+0xde>
         LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   1288a:	4b3e      	ldr	r3, [pc, #248]	; (12984 <SubscribeHandlerGameTopic+0x124>)
   1288c:	0019      	movs	r1, r3
   1288e:	2001      	movs	r0, #1
   12890:	4b3d      	ldr	r3, [pc, #244]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   12892:	4798      	blx	r3
         LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	685b      	ldr	r3, [r3, #4]
   12898:	685a      	ldr	r2, [r3, #4]
   1289a:	687b      	ldr	r3, [r7, #4]
   1289c:	685b      	ldr	r3, [r3, #4]
   1289e:	689b      	ldr	r3, [r3, #8]
   128a0:	493a      	ldr	r1, [pc, #232]	; (1298c <SubscribeHandlerGameTopic+0x12c>)
   128a2:	2001      	movs	r0, #1
   128a4:	4c38      	ldr	r4, [pc, #224]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   128a6:	47a0      	blx	r4
         LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   128a8:	687b      	ldr	r3, [r7, #4]
   128aa:	681b      	ldr	r3, [r3, #0]
   128ac:	68da      	ldr	r2, [r3, #12]
   128ae:	687b      	ldr	r3, [r7, #4]
   128b0:	681b      	ldr	r3, [r3, #0]
   128b2:	689b      	ldr	r3, [r3, #8]
   128b4:	4936      	ldr	r1, [pc, #216]	; (12990 <SubscribeHandlerGameTopic+0x130>)
   128b6:	2001      	movs	r0, #1
   128b8:	4c33      	ldr	r4, [pc, #204]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   128ba:	47a0      	blx	r4
 
         int nb = 0;
   128bc:	2300      	movs	r3, #0
   128be:	627b      	str	r3, [r7, #36]	; 0x24
         char *p = &msgData->message->payload[9];
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	681b      	ldr	r3, [r3, #0]
   128c4:	689b      	ldr	r3, [r3, #8]
   128c6:	3309      	adds	r3, #9
   128c8:	60bb      	str	r3, [r7, #8]
         while (nb < GAME_SIZE && *p) {
   128ca:	e015      	b.n	128f8 <SubscribeHandlerGameTopic+0x98>
             game.game[nb++] = strtol(p, &p, 10);
   128cc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   128ce:	1c63      	adds	r3, r4, #1
   128d0:	627b      	str	r3, [r7, #36]	; 0x24
   128d2:	68bb      	ldr	r3, [r7, #8]
   128d4:	2208      	movs	r2, #8
   128d6:	18b9      	adds	r1, r7, r2
   128d8:	220a      	movs	r2, #10
   128da:	0018      	movs	r0, r3
   128dc:	4b2d      	ldr	r3, [pc, #180]	; (12994 <SubscribeHandlerGameTopic+0x134>)
   128de:	4798      	blx	r3
   128e0:	0003      	movs	r3, r0
   128e2:	b2da      	uxtb	r2, r3
   128e4:	230c      	movs	r3, #12
   128e6:	18fb      	adds	r3, r7, r3
   128e8:	551a      	strb	r2, [r3, r4]
             if (*p != ',') break;
   128ea:	68bb      	ldr	r3, [r7, #8]
   128ec:	781b      	ldrb	r3, [r3, #0]
   128ee:	2b2c      	cmp	r3, #44	; 0x2c
   128f0:	d10a      	bne.n	12908 <SubscribeHandlerGameTopic+0xa8>
             p++; /* skip, */
   128f2:	68bb      	ldr	r3, [r7, #8]
   128f4:	3301      	adds	r3, #1
   128f6:	60bb      	str	r3, [r7, #8]
         while (nb < GAME_SIZE && *p) {
   128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   128fa:	2b13      	cmp	r3, #19
   128fc:	dc05      	bgt.n	1290a <SubscribeHandlerGameTopic+0xaa>
   128fe:	68bb      	ldr	r3, [r7, #8]
   12900:	781b      	ldrb	r3, [r3, #0]
   12902:	2b00      	cmp	r3, #0
   12904:	d1e2      	bne.n	128cc <SubscribeHandlerGameTopic+0x6c>
   12906:	e000      	b.n	1290a <SubscribeHandlerGameTopic+0xaa>
             if (*p != ',') break;
   12908:	46c0      	nop			; (mov r8, r8)
         }
         LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1290a:	4b23      	ldr	r3, [pc, #140]	; (12998 <SubscribeHandlerGameTopic+0x138>)
   1290c:	0019      	movs	r1, r3
   1290e:	2001      	movs	r0, #1
   12910:	4b1d      	ldr	r3, [pc, #116]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   12912:	4798      	blx	r3
         for (int i = 0; i < GAME_SIZE; i++) {
   12914:	2300      	movs	r3, #0
   12916:	623b      	str	r3, [r7, #32]
   12918:	e00d      	b.n	12936 <SubscribeHandlerGameTopic+0xd6>
             LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1291a:	230c      	movs	r3, #12
   1291c:	18fa      	adds	r2, r7, r3
   1291e:	6a3b      	ldr	r3, [r7, #32]
   12920:	18d3      	adds	r3, r2, r3
   12922:	781b      	ldrb	r3, [r3, #0]
   12924:	001a      	movs	r2, r3
   12926:	4b1d      	ldr	r3, [pc, #116]	; (1299c <SubscribeHandlerGameTopic+0x13c>)
   12928:	0019      	movs	r1, r3
   1292a:	2001      	movs	r0, #1
   1292c:	4b16      	ldr	r3, [pc, #88]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   1292e:	4798      	blx	r3
         for (int i = 0; i < GAME_SIZE; i++) {
   12930:	6a3b      	ldr	r3, [r7, #32]
   12932:	3301      	adds	r3, #1
   12934:	623b      	str	r3, [r7, #32]
   12936:	6a3b      	ldr	r3, [r7, #32]
   12938:	2b13      	cmp	r3, #19
   1293a:	ddee      	ble.n	1291a <SubscribeHandlerGameTopic+0xba>
     } else {
         LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
         LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
         LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
     }
 }
   1293c:	e018      	b.n	12970 <SubscribeHandlerGameTopic+0x110>
         LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   1293e:	4b18      	ldr	r3, [pc, #96]	; (129a0 <SubscribeHandlerGameTopic+0x140>)
   12940:	0019      	movs	r1, r3
   12942:	2001      	movs	r0, #1
   12944:	4b10      	ldr	r3, [pc, #64]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   12946:	4798      	blx	r3
         LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   12948:	687b      	ldr	r3, [r7, #4]
   1294a:	685b      	ldr	r3, [r3, #4]
   1294c:	685a      	ldr	r2, [r3, #4]
   1294e:	687b      	ldr	r3, [r7, #4]
   12950:	685b      	ldr	r3, [r3, #4]
   12952:	689b      	ldr	r3, [r3, #8]
   12954:	490d      	ldr	r1, [pc, #52]	; (1298c <SubscribeHandlerGameTopic+0x12c>)
   12956:	2001      	movs	r0, #1
   12958:	4c0b      	ldr	r4, [pc, #44]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   1295a:	47a0      	blx	r4
         LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   1295c:	687b      	ldr	r3, [r7, #4]
   1295e:	681b      	ldr	r3, [r3, #0]
   12960:	68da      	ldr	r2, [r3, #12]
   12962:	687b      	ldr	r3, [r7, #4]
   12964:	681b      	ldr	r3, [r3, #0]
   12966:	689b      	ldr	r3, [r3, #8]
   12968:	4909      	ldr	r1, [pc, #36]	; (12990 <SubscribeHandlerGameTopic+0x130>)
   1296a:	2001      	movs	r0, #1
   1296c:	4c06      	ldr	r4, [pc, #24]	; (12988 <SubscribeHandlerGameTopic+0x128>)
   1296e:	47a0      	blx	r4
 }
   12970:	46c0      	nop			; (mov r8, r8)
   12972:	46bd      	mov	sp, r7
   12974:	b00b      	add	sp, #44	; 0x2c
   12976:	bd90      	pop	{r4, r7, pc}
   12978:	000328a7 	.word	0x000328a7
   1297c:	00034a60 	.word	0x00034a60
   12980:	00032cb5 	.word	0x00032cb5
   12984:	00034a6c 	.word	0x00034a6c
   12988:	0001a761 	.word	0x0001a761
   1298c:	00034a3c 	.word	0x00034a3c
   12990:	00034a88 	.word	0x00034a88
   12994:	00032e61 	.word	0x00032e61
   12998:	00034a90 	.word	0x00034a90
   1299c:	00034aa4 	.word	0x00034aa4
   129a0:	00034aa8 	.word	0x00034aa8

000129a4 <SubscribeHandlerImuTopic>:
 
 void SubscribeHandlerImuTopic(MessageData *msgData)
 {
   129a4:	b590      	push	{r4, r7, lr}
   129a6:	b083      	sub	sp, #12
   129a8:	af00      	add	r7, sp, #0
   129aa:	6078      	str	r0, [r7, #4]
     LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   129ac:	4b09      	ldr	r3, [pc, #36]	; (129d4 <SubscribeHandlerImuTopic+0x30>)
   129ae:	0019      	movs	r1, r3
   129b0:	2001      	movs	r0, #1
   129b2:	4b09      	ldr	r3, [pc, #36]	; (129d8 <SubscribeHandlerImuTopic+0x34>)
   129b4:	4798      	blx	r3
     LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   129b6:	687b      	ldr	r3, [r7, #4]
   129b8:	685b      	ldr	r3, [r3, #4]
   129ba:	685a      	ldr	r2, [r3, #4]
   129bc:	687b      	ldr	r3, [r7, #4]
   129be:	685b      	ldr	r3, [r3, #4]
   129c0:	689b      	ldr	r3, [r3, #8]
   129c2:	4906      	ldr	r1, [pc, #24]	; (129dc <SubscribeHandlerImuTopic+0x38>)
   129c4:	2001      	movs	r0, #1
   129c6:	4c04      	ldr	r4, [pc, #16]	; (129d8 <SubscribeHandlerImuTopic+0x34>)
   129c8:	47a0      	blx	r4
 }
   129ca:	46c0      	nop			; (mov r8, r8)
   129cc:	46bd      	mov	sp, r7
   129ce:	b003      	add	sp, #12
   129d0:	bd90      	pop	{r4, r7, pc}
   129d2:	46c0      	nop			; (mov r8, r8)
   129d4:	00034ad8 	.word	0x00034ad8
   129d8:	0001a761 	.word	0x0001a761
   129dc:	00034a3c 	.word	0x00034a3c

000129e0 <SubscribeHandlerHeatingTopic>:
             port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
         }
     }
 }

 void SubscribeHandlerHeatingTopic(MessageData *msgData) {
   129e0:	b580      	push	{r7, lr}
   129e2:	b084      	sub	sp, #16
   129e4:	af00      	add	r7, sp, #0
   129e6:	6078      	str	r0, [r7, #4]
    // This callback is invoked when a message is received on "heating"
    const char *payload = (const char *)msgData->message->payload;
   129e8:	687b      	ldr	r3, [r7, #4]
   129ea:	681b      	ldr	r3, [r3, #0]
   129ec:	689b      	ldr	r3, [r3, #8]
   129ee:	60fb      	str	r3, [r7, #12]
    size_t payload_len = msgData->message->payloadlen;
   129f0:	687b      	ldr	r3, [r7, #4]
   129f2:	681b      	ldr	r3, [r3, #0]
   129f4:	68db      	ldr	r3, [r3, #12]
   129f6:	60bb      	str	r3, [r7, #8]
    if (payload_len == 5 && strncmp(payload, "start", 5) == 0) {
   129f8:	68bb      	ldr	r3, [r7, #8]
   129fa:	2b05      	cmp	r3, #5
   129fc:	d10b      	bne.n	12a16 <SubscribeHandlerHeatingTopic+0x36>
   129fe:	490f      	ldr	r1, [pc, #60]	; (12a3c <SubscribeHandlerHeatingTopic+0x5c>)
   12a00:	68fb      	ldr	r3, [r7, #12]
   12a02:	2205      	movs	r2, #5
   12a04:	0018      	movs	r0, r3
   12a06:	4b0e      	ldr	r3, [pc, #56]	; (12a40 <SubscribeHandlerHeatingTopic+0x60>)
   12a08:	4798      	blx	r3
   12a0a:	1e03      	subs	r3, r0, #0
   12a0c:	d103      	bne.n	12a16 <SubscribeHandlerHeatingTopic+0x36>
        g_heating_enable = true;
   12a0e:	4b0d      	ldr	r3, [pc, #52]	; (12a44 <SubscribeHandlerHeatingTopic+0x64>)
   12a10:	2201      	movs	r2, #1
   12a12:	701a      	strb	r2, [r3, #0]
    } else if (payload_len == 4 && strncmp(payload, "stop", 4) == 0) {
        g_heating_enable = false;
        // Optionally log or debug print that heating was disabled
    }
    // (No action for other payload values; ignore unrecognized commands)
}
   12a14:	e00d      	b.n	12a32 <SubscribeHandlerHeatingTopic+0x52>
    } else if (payload_len == 4 && strncmp(payload, "stop", 4) == 0) {
   12a16:	68bb      	ldr	r3, [r7, #8]
   12a18:	2b04      	cmp	r3, #4
   12a1a:	d10a      	bne.n	12a32 <SubscribeHandlerHeatingTopic+0x52>
   12a1c:	490a      	ldr	r1, [pc, #40]	; (12a48 <SubscribeHandlerHeatingTopic+0x68>)
   12a1e:	68fb      	ldr	r3, [r7, #12]
   12a20:	2204      	movs	r2, #4
   12a22:	0018      	movs	r0, r3
   12a24:	4b06      	ldr	r3, [pc, #24]	; (12a40 <SubscribeHandlerHeatingTopic+0x60>)
   12a26:	4798      	blx	r3
   12a28:	1e03      	subs	r3, r0, #0
   12a2a:	d102      	bne.n	12a32 <SubscribeHandlerHeatingTopic+0x52>
        g_heating_enable = false;
   12a2c:	4b05      	ldr	r3, [pc, #20]	; (12a44 <SubscribeHandlerHeatingTopic+0x64>)
   12a2e:	2200      	movs	r2, #0
   12a30:	701a      	strb	r2, [r3, #0]
}
   12a32:	46c0      	nop			; (mov r8, r8)
   12a34:	46bd      	mov	sp, r7
   12a36:	b004      	add	sp, #16
   12a38:	bd80      	pop	{r7, pc}
   12a3a:	46c0      	nop			; (mov r8, r8)
   12a3c:	00034b2c 	.word	0x00034b2c
   12a40:	00032cb5 	.word	0x00032cb5
   12a44:	20000b30 	.word	0x20000b30
   12a48:	00034b34 	.word	0x00034b34

00012a4c <SubscribeHandlerDetectTopic>:
 * If the payload evaluates to *true* the blue LED is turned on and the
 * global flag @ref g_requestIntensity is raised.  The flag is consumed
 * by the VEML7700 task.
 ******************************************************************************/
void SubscribeHandlerDetectTopic(MessageData *msgData)
{
   12a4c:	b580      	push	{r7, lr}
   12a4e:	b082      	sub	sp, #8
   12a50:	af00      	add	r7, sp, #0
   12a52:	6078      	str	r0, [r7, #4]
    /* Any non-zero / “true” payload triggers a measurement */
    if (msgData->message->payloadlen &&
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	681b      	ldr	r3, [r3, #0]
   12a58:	68db      	ldr	r3, [r3, #12]
   12a5a:	2b00      	cmp	r3, #0
   12a5c:	d00c      	beq.n	12a78 <SubscribeHandlerDetectTopic+0x2c>
        strncasecmp((char *)msgData->message->payload, "false", 5) != 0)
   12a5e:	687b      	ldr	r3, [r7, #4]
   12a60:	681b      	ldr	r3, [r3, #0]
   12a62:	689b      	ldr	r3, [r3, #8]
   12a64:	4906      	ldr	r1, [pc, #24]	; (12a80 <SubscribeHandlerDetectTopic+0x34>)
   12a66:	2205      	movs	r2, #5
   12a68:	0018      	movs	r0, r3
   12a6a:	4b06      	ldr	r3, [pc, #24]	; (12a84 <SubscribeHandlerDetectTopic+0x38>)
   12a6c:	4798      	blx	r3
   12a6e:	1e03      	subs	r3, r0, #0
    if (msgData->message->payloadlen &&
   12a70:	d002      	beq.n	12a78 <SubscribeHandlerDetectTopic+0x2c>
    {
        //esp_i2c_set_color_flag(ESP_COLOR_BLUE);   /* turn LED on            */
        g_requestIntensity = true;                /* ask VEML task to read  */
   12a72:	4b05      	ldr	r3, [pc, #20]	; (12a88 <SubscribeHandlerDetectTopic+0x3c>)
   12a74:	2201      	movs	r2, #1
   12a76:	701a      	strb	r2, [r3, #0]
    }
}
   12a78:	46c0      	nop			; (mov r8, r8)
   12a7a:	46bd      	mov	sp, r7
   12a7c:	b002      	add	sp, #8
   12a7e:	bd80      	pop	{r7, pc}
   12a80:	000349f8 	.word	0x000349f8
   12a84:	00032c6d 	.word	0x00032c6d
   12a88:	20000b31 	.word	0x20000b31

00012a8c <SubscribeHandlerResetTopic>:

void SubscribeHandlerResetTopic(MessageData *msgData)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	6078      	str	r0, [r7, #4]
    system_reset();
   12a94:	4b02      	ldr	r3, [pc, #8]	; (12aa0 <SubscribeHandlerResetTopic+0x14>)
   12a96:	4798      	blx	r3
}
   12a98:	46c0      	nop			; (mov r8, r8)
   12a9a:	46bd      	mov	sp, r7
   12a9c:	b002      	add	sp, #8
   12a9e:	bd80      	pop	{r7, pc}
   12aa0:	00011acd 	.word	0x00011acd

00012aa4 <SubscribeHandlerUpdateTopic>:

/***************************************************************************//**
 * @brief  MQTT callback for **update** – start OTA.
 ******************************************************************************/
void SubscribeHandlerUpdateTopic(MessageData *msgData)
{
   12aa4:	b580      	push	{r7, lr}
   12aa6:	b082      	sub	sp, #8
   12aa8:	af00      	add	r7, sp, #0
   12aaa:	6078      	str	r0, [r7, #4]
    /* 收到任意 payload 就触发 OTA 下载 */
    WifiStartFirmwareUpdate();
   12aac:	4b02      	ldr	r3, [pc, #8]	; (12ab8 <SubscribeHandlerUpdateTopic+0x14>)
   12aae:	4798      	blx	r3
}
   12ab0:	46c0      	nop			; (mov r8, r8)
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	0001375d 	.word	0x0001375d

00012abc <SubscribeHandlerBackupTopic>:

/***************************************************************************//**
 * @brief  MQTT callback for **backup** – create golden image.
 ******************************************************************************/
void SubscribeHandlerBackupTopic(MessageData *msgData)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b082      	sub	sp, #8
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
    WifiMakeGoldenImage();
   12ac4:	4b02      	ldr	r3, [pc, #8]	; (12ad0 <SubscribeHandlerBackupTopic+0x14>)
   12ac6:	4798      	blx	r3
}
   12ac8:	46c0      	nop			; (mov r8, r8)
   12aca:	46bd      	mov	sp, r7
   12acc:	b002      	add	sp, #8
   12ace:	bd80      	pop	{r7, pc}
   12ad0:	000137c9 	.word	0x000137c9

00012ad4 <mqtt_callback>:
  *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
  *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
  * \param[in] data A structure contains notification informations. @ref mqtt_data
  */
 static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
 {
   12ad4:	b590      	push	{r4, r7, lr}
   12ad6:	b08b      	sub	sp, #44	; 0x2c
   12ad8:	af06      	add	r7, sp, #24
   12ada:	60f8      	str	r0, [r7, #12]
   12adc:	60b9      	str	r1, [r7, #8]
   12ade:	607a      	str	r2, [r7, #4]
     switch (type) {
   12ae0:	68bb      	ldr	r3, [r7, #8]
   12ae2:	2b01      	cmp	r3, #1
   12ae4:	d03c      	beq.n	12b60 <mqtt_callback+0x8c>
   12ae6:	2b05      	cmp	r3, #5
   12ae8:	d100      	bne.n	12aec <mqtt_callback+0x18>
   12aea:	e084      	b.n	12bf6 <mqtt_callback+0x122>
   12aec:	2b00      	cmp	r3, #0
   12aee:	d000      	beq.n	12af2 <mqtt_callback+0x1e>
             /* Stop timer and USART callback. */
             LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
             // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
             break;
     }
 }
   12af0:	e087      	b.n	12c02 <mqtt_callback+0x12e>
             if (data->sock_connected.result >= 0) {
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	2b00      	cmp	r3, #0
   12af8:	db25      	blt.n	12b46 <mqtt_callback+0x72>
                 LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   12afa:	4b44      	ldr	r3, [pc, #272]	; (12c0c <mqtt_callback+0x138>)
   12afc:	0019      	movs	r1, r3
   12afe:	2001      	movs	r0, #1
   12b00:	4b43      	ldr	r3, [pc, #268]	; (12c10 <mqtt_callback+0x13c>)
   12b02:	4798      	blx	r3
                 if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   12b04:	4943      	ldr	r1, [pc, #268]	; (12c14 <mqtt_callback+0x140>)
   12b06:	4a44      	ldr	r2, [pc, #272]	; (12c18 <mqtt_callback+0x144>)
   12b08:	68f8      	ldr	r0, [r7, #12]
   12b0a:	2300      	movs	r3, #0
   12b0c:	9305      	str	r3, [sp, #20]
   12b0e:	2300      	movs	r3, #0
   12b10:	9304      	str	r3, [sp, #16]
   12b12:	2300      	movs	r3, #0
   12b14:	9303      	str	r3, [sp, #12]
   12b16:	2300      	movs	r3, #0
   12b18:	9302      	str	r3, [sp, #8]
   12b1a:	2300      	movs	r3, #0
   12b1c:	9301      	str	r3, [sp, #4]
   12b1e:	4b3e      	ldr	r3, [pc, #248]	; (12c18 <mqtt_callback+0x144>)
   12b20:	9300      	str	r3, [sp, #0]
   12b22:	000b      	movs	r3, r1
   12b24:	2101      	movs	r1, #1
   12b26:	4c3d      	ldr	r4, [pc, #244]	; (12c1c <mqtt_callback+0x148>)
   12b28:	47a0      	blx	r4
   12b2a:	1e03      	subs	r3, r0, #0
   12b2c:	d005      	beq.n	12b3a <mqtt_callback+0x66>
                     LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   12b2e:	4b3c      	ldr	r3, [pc, #240]	; (12c20 <mqtt_callback+0x14c>)
   12b30:	0019      	movs	r1, r3
   12b32:	2001      	movs	r0, #1
   12b34:	4b36      	ldr	r3, [pc, #216]	; (12c10 <mqtt_callback+0x13c>)
   12b36:	4798      	blx	r3
         } break;
   12b38:	e063      	b.n	12c02 <mqtt_callback+0x12e>
                     LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   12b3a:	4b3a      	ldr	r3, [pc, #232]	; (12c24 <mqtt_callback+0x150>)
   12b3c:	0019      	movs	r1, r3
   12b3e:	2001      	movs	r0, #1
   12b40:	4b33      	ldr	r3, [pc, #204]	; (12c10 <mqtt_callback+0x13c>)
   12b42:	4798      	blx	r3
         } break;
   12b44:	e05d      	b.n	12c02 <mqtt_callback+0x12e>
                 LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   12b46:	4a38      	ldr	r2, [pc, #224]	; (12c28 <mqtt_callback+0x154>)
   12b48:	4b38      	ldr	r3, [pc, #224]	; (12c2c <mqtt_callback+0x158>)
   12b4a:	0019      	movs	r1, r3
   12b4c:	2001      	movs	r0, #1
   12b4e:	4b30      	ldr	r3, [pc, #192]	; (12c10 <mqtt_callback+0x13c>)
   12b50:	4798      	blx	r3
                 mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   12b52:	4a35      	ldr	r2, [pc, #212]	; (12c28 <mqtt_callback+0x154>)
   12b54:	68fb      	ldr	r3, [r7, #12]
   12b56:	0011      	movs	r1, r2
   12b58:	0018      	movs	r0, r3
   12b5a:	4b35      	ldr	r3, [pc, #212]	; (12c30 <mqtt_callback+0x15c>)
   12b5c:	4798      	blx	r3
         } break;
   12b5e:	e050      	b.n	12c02 <mqtt_callback+0x12e>
             if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   12b60:	687b      	ldr	r3, [r7, #4]
   12b62:	781b      	ldrb	r3, [r3, #0]
   12b64:	2b00      	cmp	r3, #0
   12b66:	d13d      	bne.n	12be4 <mqtt_callback+0x110>
                 mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   12b68:	4b32      	ldr	r3, [pc, #200]	; (12c34 <mqtt_callback+0x160>)
   12b6a:	4933      	ldr	r1, [pc, #204]	; (12c38 <mqtt_callback+0x164>)
   12b6c:	68f8      	ldr	r0, [r7, #12]
   12b6e:	2202      	movs	r2, #2
   12b70:	4c32      	ldr	r4, [pc, #200]	; (12c3c <mqtt_callback+0x168>)
   12b72:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   12b74:	4b32      	ldr	r3, [pc, #200]	; (12c40 <mqtt_callback+0x16c>)
   12b76:	4933      	ldr	r1, [pc, #204]	; (12c44 <mqtt_callback+0x170>)
   12b78:	68f8      	ldr	r0, [r7, #12]
   12b7a:	2202      	movs	r2, #2
   12b7c:	4c2f      	ldr	r4, [pc, #188]	; (12c3c <mqtt_callback+0x168>)
   12b7e:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   12b80:	4b31      	ldr	r3, [pc, #196]	; (12c48 <mqtt_callback+0x174>)
   12b82:	4932      	ldr	r1, [pc, #200]	; (12c4c <mqtt_callback+0x178>)
   12b84:	68f8      	ldr	r0, [r7, #12]
   12b86:	2202      	movs	r2, #2
   12b88:	4c2c      	ldr	r4, [pc, #176]	; (12c3c <mqtt_callback+0x168>)
   12b8a:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, LED_DEBUG_TOPIC, 2, SubscribeHandlerLedDebugTopic);
   12b8c:	4b30      	ldr	r3, [pc, #192]	; (12c50 <mqtt_callback+0x17c>)
   12b8e:	4931      	ldr	r1, [pc, #196]	; (12c54 <mqtt_callback+0x180>)
   12b90:	68f8      	ldr	r0, [r7, #12]
   12b92:	2202      	movs	r2, #2
   12b94:	4c29      	ldr	r4, [pc, #164]	; (12c3c <mqtt_callback+0x168>)
   12b96:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, HEATING_PAD_TOPIC, 2, SubscribeHandlerHeatingTopic);
   12b98:	4b2f      	ldr	r3, [pc, #188]	; (12c58 <mqtt_callback+0x184>)
   12b9a:	4930      	ldr	r1, [pc, #192]	; (12c5c <mqtt_callback+0x188>)
   12b9c:	68f8      	ldr	r0, [r7, #12]
   12b9e:	2202      	movs	r2, #2
   12ba0:	4c26      	ldr	r4, [pc, #152]	; (12c3c <mqtt_callback+0x168>)
   12ba2:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, DETECT_TOPIC, 2, SubscribeHandlerDetectTopic);
   12ba4:	4b2e      	ldr	r3, [pc, #184]	; (12c60 <mqtt_callback+0x18c>)
   12ba6:	492f      	ldr	r1, [pc, #188]	; (12c64 <mqtt_callback+0x190>)
   12ba8:	68f8      	ldr	r0, [r7, #12]
   12baa:	2202      	movs	r2, #2
   12bac:	4c23      	ldr	r4, [pc, #140]	; (12c3c <mqtt_callback+0x168>)
   12bae:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, RESET_MQTT_TOPIC, 2, SubscribeHandlerResetTopic);
   12bb0:	4b2d      	ldr	r3, [pc, #180]	; (12c68 <mqtt_callback+0x194>)
   12bb2:	492e      	ldr	r1, [pc, #184]	; (12c6c <mqtt_callback+0x198>)
   12bb4:	68f8      	ldr	r0, [r7, #12]
   12bb6:	2202      	movs	r2, #2
   12bb8:	4c20      	ldr	r4, [pc, #128]	; (12c3c <mqtt_callback+0x168>)
   12bba:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, UPDATE_MQTT_TOPIC , 2, SubscribeHandlerUpdateTopic);
   12bbc:	4b2c      	ldr	r3, [pc, #176]	; (12c70 <mqtt_callback+0x19c>)
   12bbe:	492d      	ldr	r1, [pc, #180]	; (12c74 <mqtt_callback+0x1a0>)
   12bc0:	68f8      	ldr	r0, [r7, #12]
   12bc2:	2202      	movs	r2, #2
   12bc4:	4c1d      	ldr	r4, [pc, #116]	; (12c3c <mqtt_callback+0x168>)
   12bc6:	47a0      	blx	r4
                 mqtt_subscribe(module_inst, BACKUP_MQTT_TOPIC, 2, SubscribeHandlerBackupTopic);
   12bc8:	4b2b      	ldr	r3, [pc, #172]	; (12c78 <mqtt_callback+0x1a4>)
   12bca:	492c      	ldr	r1, [pc, #176]	; (12c7c <mqtt_callback+0x1a8>)
   12bcc:	68f8      	ldr	r0, [r7, #12]
   12bce:	2202      	movs	r2, #2
   12bd0:	4c1a      	ldr	r4, [pc, #104]	; (12c3c <mqtt_callback+0x168>)
   12bd2:	47a0      	blx	r4
                 WifiPublishFirmwareVersion();
   12bd4:	4b2a      	ldr	r3, [pc, #168]	; (12c80 <mqtt_callback+0x1ac>)
   12bd6:	4798      	blx	r3
                 LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   12bd8:	4b2a      	ldr	r3, [pc, #168]	; (12c84 <mqtt_callback+0x1b0>)
   12bda:	0019      	movs	r1, r3
   12bdc:	2001      	movs	r0, #1
   12bde:	4b0c      	ldr	r3, [pc, #48]	; (12c10 <mqtt_callback+0x13c>)
   12be0:	4798      	blx	r3
             break;
   12be2:	e00e      	b.n	12c02 <mqtt_callback+0x12e>
                 LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   12be4:	687b      	ldr	r3, [r7, #4]
   12be6:	781b      	ldrb	r3, [r3, #0]
   12be8:	001a      	movs	r2, r3
   12bea:	4b27      	ldr	r3, [pc, #156]	; (12c88 <mqtt_callback+0x1b4>)
   12bec:	0019      	movs	r1, r3
   12bee:	2001      	movs	r0, #1
   12bf0:	4b07      	ldr	r3, [pc, #28]	; (12c10 <mqtt_callback+0x13c>)
   12bf2:	4798      	blx	r3
             break;
   12bf4:	e005      	b.n	12c02 <mqtt_callback+0x12e>
             LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   12bf6:	4b25      	ldr	r3, [pc, #148]	; (12c8c <mqtt_callback+0x1b8>)
   12bf8:	0019      	movs	r1, r3
   12bfa:	2001      	movs	r0, #1
   12bfc:	4b04      	ldr	r3, [pc, #16]	; (12c10 <mqtt_callback+0x13c>)
   12bfe:	4798      	blx	r3
             break;
   12c00:	46c0      	nop			; (mov r8, r8)
 }
   12c02:	46c0      	nop			; (mov r8, r8)
   12c04:	46bd      	mov	sp, r7
   12c06:	b005      	add	sp, #20
   12c08:	bd90      	pop	{r4, r7, pc}
   12c0a:	46c0      	nop			; (mov r8, r8)
   12c0c:	00034b3c 	.word	0x00034b3c
   12c10:	0001a761 	.word	0x0001a761
   12c14:	00034b58 	.word	0x00034b58
   12c18:	00034b68 	.word	0x00034b68
   12c1c:	0002cbf9 	.word	0x0002cbf9
   12c20:	00034b70 	.word	0x00034b70
   12c24:	00034b98 	.word	0x00034b98
   12c28:	0003445c 	.word	0x0003445c
   12c2c:	00034bb4 	.word	0x00034bb4
   12c30:	0002cbb1 	.word	0x0002cbb1
   12c34:	00012861 	.word	0x00012861
   12c38:	00034bec 	.word	0x00034bec
   12c3c:	0002cd99 	.word	0x0002cd99
   12c40:	00012789 	.word	0x00012789
   12c44:	00034b18 	.word	0x00034b18
   12c48:	000129a5 	.word	0x000129a5
   12c4c:	00034c00 	.word	0x00034c00
   12c50:	000126f1 	.word	0x000126f1
   12c54:	00034c14 	.word	0x00034c14
   12c58:	000129e1 	.word	0x000129e1
   12c5c:	00034c24 	.word	0x00034c24
   12c60:	00012a4d 	.word	0x00012a4d
   12c64:	00034c2c 	.word	0x00034c2c
   12c68:	00012a8d 	.word	0x00012a8d
   12c6c:	00034c34 	.word	0x00034c34
   12c70:	00012aa5 	.word	0x00012aa5
   12c74:	00034c3c 	.word	0x00034c3c
   12c78:	00012abd 	.word	0x00012abd
   12c7c:	00034c44 	.word	0x00034c44
   12c80:	00013729 	.word	0x00013729
   12c84:	00034c4c 	.word	0x00034c4c
   12c88:	00034c60 	.word	0x00034c60
   12c8c:	00034c94 	.word	0x00034c94

00012c90 <configure_mqtt>:
 
 /**
  * \brief Configure MQTT service.
  */
 static void configure_mqtt(void)
 {
   12c90:	b580      	push	{r7, lr}
   12c92:	b088      	sub	sp, #32
   12c94:	af00      	add	r7, sp, #0
     struct mqtt_config mqtt_conf;
     int result;
 
     mqtt_get_config_defaults(&mqtt_conf);
   12c96:	1d3b      	adds	r3, r7, #4
   12c98:	0018      	movs	r0, r3
   12c9a:	4b1f      	ldr	r3, [pc, #124]	; (12d18 <configure_mqtt+0x88>)
   12c9c:	4798      	blx	r3
     /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
     mqtt_conf.read_buffer = mqtt_read_buffer;
   12c9e:	1d3b      	adds	r3, r7, #4
   12ca0:	4a1e      	ldr	r2, [pc, #120]	; (12d1c <configure_mqtt+0x8c>)
   12ca2:	609a      	str	r2, [r3, #8]
     mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   12ca4:	1d3b      	adds	r3, r7, #4
   12ca6:	2280      	movs	r2, #128	; 0x80
   12ca8:	0092      	lsls	r2, r2, #2
   12caa:	60da      	str	r2, [r3, #12]
     mqtt_conf.send_buffer = mqtt_send_buffer;
   12cac:	1d3b      	adds	r3, r7, #4
   12cae:	4a1c      	ldr	r2, [pc, #112]	; (12d20 <configure_mqtt+0x90>)
   12cb0:	611a      	str	r2, [r3, #16]
     mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   12cb2:	1d3b      	adds	r3, r7, #4
   12cb4:	2280      	movs	r2, #128	; 0x80
   12cb6:	0092      	lsls	r2, r2, #2
   12cb8:	615a      	str	r2, [r3, #20]
     mqtt_conf.port = CLOUDMQTT_PORT;
   12cba:	1d3b      	adds	r3, r7, #4
   12cbc:	4a19      	ldr	r2, [pc, #100]	; (12d24 <configure_mqtt+0x94>)
   12cbe:	801a      	strh	r2, [r3, #0]
     mqtt_conf.keep_alive = 6000;
   12cc0:	1d3b      	adds	r3, r7, #4
   12cc2:	4a19      	ldr	r2, [pc, #100]	; (12d28 <configure_mqtt+0x98>)
   12cc4:	809a      	strh	r2, [r3, #4]
 
     result = mqtt_init(&mqtt_inst, &mqtt_conf);
   12cc6:	1d3a      	adds	r2, r7, #4
   12cc8:	4b18      	ldr	r3, [pc, #96]	; (12d2c <configure_mqtt+0x9c>)
   12cca:	0011      	movs	r1, r2
   12ccc:	0018      	movs	r0, r3
   12cce:	4b18      	ldr	r3, [pc, #96]	; (12d30 <configure_mqtt+0xa0>)
   12cd0:	4798      	blx	r3
   12cd2:	0003      	movs	r3, r0
   12cd4:	61fb      	str	r3, [r7, #28]
     if (result < 0) {
   12cd6:	69fb      	ldr	r3, [r7, #28]
   12cd8:	2b00      	cmp	r3, #0
   12cda:	da06      	bge.n	12cea <configure_mqtt+0x5a>
         LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   12cdc:	69fa      	ldr	r2, [r7, #28]
   12cde:	4b15      	ldr	r3, [pc, #84]	; (12d34 <configure_mqtt+0xa4>)
   12ce0:	0019      	movs	r1, r3
   12ce2:	2001      	movs	r0, #1
   12ce4:	4b14      	ldr	r3, [pc, #80]	; (12d38 <configure_mqtt+0xa8>)
   12ce6:	4798      	blx	r3
         while (1) {
   12ce8:	e7fe      	b.n	12ce8 <configure_mqtt+0x58>
         }
     }
 
     result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   12cea:	4a14      	ldr	r2, [pc, #80]	; (12d3c <configure_mqtt+0xac>)
   12cec:	4b0f      	ldr	r3, [pc, #60]	; (12d2c <configure_mqtt+0x9c>)
   12cee:	0011      	movs	r1, r2
   12cf0:	0018      	movs	r0, r3
   12cf2:	4b13      	ldr	r3, [pc, #76]	; (12d40 <configure_mqtt+0xb0>)
   12cf4:	4798      	blx	r3
   12cf6:	0003      	movs	r3, r0
   12cf8:	61fb      	str	r3, [r7, #28]
     if (result < 0) {
   12cfa:	69fb      	ldr	r3, [r7, #28]
   12cfc:	2b00      	cmp	r3, #0
   12cfe:	da06      	bge.n	12d0e <configure_mqtt+0x7e>
         LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   12d00:	69fa      	ldr	r2, [r7, #28]
   12d02:	4b10      	ldr	r3, [pc, #64]	; (12d44 <configure_mqtt+0xb4>)
   12d04:	0019      	movs	r1, r3
   12d06:	2001      	movs	r0, #1
   12d08:	4b0b      	ldr	r3, [pc, #44]	; (12d38 <configure_mqtt+0xa8>)
   12d0a:	4798      	blx	r3
         while (1) {
   12d0c:	e7fe      	b.n	12d0c <configure_mqtt+0x7c>
         }
     }
 }
   12d0e:	46c0      	nop			; (mov r8, r8)
   12d10:	46bd      	mov	sp, r7
   12d12:	b008      	add	sp, #32
   12d14:	bd80      	pop	{r7, pc}
   12d16:	46c0      	nop			; (mov r8, r8)
   12d18:	0002caf1 	.word	0x0002caf1
   12d1c:	20000730 	.word	0x20000730
   12d20:	20000930 	.word	0x20000930
   12d24:	0000075b 	.word	0x0000075b
   12d28:	00001770 	.word	0x00001770
   12d2c:	200006f8 	.word	0x200006f8
   12d30:	0002ca41 	.word	0x0002ca41
   12d34:	00034ca8 	.word	0x00034ca8
   12d38:	0001a761 	.word	0x0001a761
   12d3c:	00012ad5 	.word	0x00012ad5
   12d40:	0002cb31 	.word	0x0002cb31
   12d44:	00034cdc 	.word	0x00034cdc

00012d48 <configure_extint_channel>:
 // SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message
 
 void extint_detection_callback(void);
 
 void configure_extint_channel(void)
 {
   12d48:	b580      	push	{r7, lr}
   12d4a:	b084      	sub	sp, #16
   12d4c:	af00      	add	r7, sp, #0
     struct extint_chan_conf config_extint_chan;
     extint_chan_get_config_defaults(&config_extint_chan);
   12d4e:	1d3b      	adds	r3, r7, #4
   12d50:	0018      	movs	r0, r3
   12d52:	4b0b      	ldr	r3, [pc, #44]	; (12d80 <configure_extint_channel+0x38>)
   12d54:	4798      	blx	r3
 
     config_extint_chan.gpio_pin      = BUTTON_0_EIC_PIN;
   12d56:	1d3b      	adds	r3, r7, #4
   12d58:	2237      	movs	r2, #55	; 0x37
   12d5a:	601a      	str	r2, [r3, #0]
     config_extint_chan.gpio_pin_mux  = BUTTON_0_EIC_MUX;
   12d5c:	1d3b      	adds	r3, r7, #4
   12d5e:	2200      	movs	r2, #0
   12d60:	605a      	str	r2, [r3, #4]
     config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   12d62:	1d3b      	adds	r3, r7, #4
   12d64:	2201      	movs	r2, #1
   12d66:	721a      	strb	r2, [r3, #8]
     // Set to detect "both edges"
     config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   12d68:	1d3b      	adds	r3, r7, #4
   12d6a:	2203      	movs	r2, #3
   12d6c:	72da      	strb	r2, [r3, #11]
 
     extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   12d6e:	1d3b      	adds	r3, r7, #4
   12d70:	0019      	movs	r1, r3
   12d72:	2007      	movs	r0, #7
   12d74:	4b03      	ldr	r3, [pc, #12]	; (12d84 <configure_extint_channel+0x3c>)
   12d76:	4798      	blx	r3
 }
   12d78:	46c0      	nop			; (mov r8, r8)
   12d7a:	46bd      	mov	sp, r7
   12d7c:	b004      	add	sp, #16
   12d7e:	bd80      	pop	{r7, pc}
   12d80:	000231a5 	.word	0x000231a5
   12d84:	000231d9 	.word	0x000231d9

00012d88 <configure_extint_callbacks>:
 
 void configure_extint_callbacks(void)
 {
   12d88:	b580      	push	{r7, lr}
   12d8a:	af00      	add	r7, sp, #0
     extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   12d8c:	4b06      	ldr	r3, [pc, #24]	; (12da8 <configure_extint_callbacks+0x20>)
   12d8e:	2200      	movs	r2, #0
   12d90:	2107      	movs	r1, #7
   12d92:	0018      	movs	r0, r3
   12d94:	4b05      	ldr	r3, [pc, #20]	; (12dac <configure_extint_callbacks+0x24>)
   12d96:	4798      	blx	r3
     extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   12d98:	2100      	movs	r1, #0
   12d9a:	2007      	movs	r0, #7
   12d9c:	4b04      	ldr	r3, [pc, #16]	; (12db0 <configure_extint_callbacks+0x28>)
   12d9e:	4798      	blx	r3
 }
   12da0:	46c0      	nop			; (mov r8, r8)
   12da2:	46bd      	mov	sp, r7
   12da4:	bd80      	pop	{r7, pc}
   12da6:	46c0      	nop			; (mov r8, r8)
   12da8:	00012db5 	.word	0x00012db5
   12dac:	00022da5 	.word	0x00022da5
   12db0:	00022e09 	.word	0x00022e09

00012db4 <extint_detection_callback>:
 
 /**
  * @brief This callback is triggered on both falling and rising edges of the button signal.
  */
 void extint_detection_callback(void)
 {
   12db4:	b590      	push	{r4, r7, lr}
   12db6:	b083      	sub	sp, #12
   12db8:	af00      	add	r7, sp, #0
     // If the button uses active-low logic, then pinLevel == false means it is being pressed
     bool pinLevel = port_pin_get_input_level(BUTTON_0_PIN);
   12dba:	1dfc      	adds	r4, r7, #7
   12dbc:	2037      	movs	r0, #55	; 0x37
   12dbe:	4b0b      	ldr	r3, [pc, #44]	; (12dec <extint_detection_callback+0x38>)
   12dc0:	4798      	blx	r3
   12dc2:	0003      	movs	r3, r0
   12dc4:	7023      	strb	r3, [r4, #0]
     isPressed = (pinLevel == false);
   12dc6:	1dfb      	adds	r3, r7, #7
   12dc8:	781b      	ldrb	r3, [r3, #0]
   12dca:	1e5a      	subs	r2, r3, #1
   12dcc:	4193      	sbcs	r3, r2
   12dce:	b2db      	uxtb	r3, r3
   12dd0:	2201      	movs	r2, #1
   12dd2:	4053      	eors	r3, r2
   12dd4:	b2db      	uxtb	r3, r3
   12dd6:	1c1a      	adds	r2, r3, #0
   12dd8:	2301      	movs	r3, #1
   12dda:	4013      	ands	r3, r2
   12ddc:	b2da      	uxtb	r2, r3
   12dde:	4b04      	ldr	r3, [pc, #16]	; (12df0 <extint_detection_callback+0x3c>)
   12de0:	701a      	strb	r2, [r3, #0]
 }
   12de2:	46c0      	nop			; (mov r8, r8)
   12de4:	46bd      	mov	sp, r7
   12de6:	b003      	add	sp, #12
   12de8:	bd90      	pop	{r4, r7, pc}
   12dea:	46c0      	nop			; (mov r8, r8)
   12dec:	00011b05 	.word	0x00011b05
   12df0:	20000b32 	.word	0x20000b32

00012df4 <HTTP_DownloadFileInit>:
  * @brief	Routine to initialize HTTP download of the OTAU file
  * @note
 
 */
 static void HTTP_DownloadFileInit(void)
 {
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
     if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   12df8:	4a15      	ldr	r2, [pc, #84]	; (12e50 <HTTP_DownloadFileInit+0x5c>)
   12dfa:	4b16      	ldr	r3, [pc, #88]	; (12e54 <HTTP_DownloadFileInit+0x60>)
   12dfc:	0011      	movs	r1, r2
   12dfe:	0018      	movs	r0, r3
   12e00:	4b15      	ldr	r3, [pc, #84]	; (12e58 <HTTP_DownloadFileInit+0x64>)
   12e02:	4798      	blx	r3
   12e04:	1e03      	subs	r3, r0, #0
   12e06:	d008      	beq.n	12e1a <HTTP_DownloadFileInit+0x26>
         LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   12e08:	4b14      	ldr	r3, [pc, #80]	; (12e5c <HTTP_DownloadFileInit+0x68>)
   12e0a:	0019      	movs	r1, r3
   12e0c:	2001      	movs	r0, #1
   12e0e:	4b14      	ldr	r3, [pc, #80]	; (12e60 <HTTP_DownloadFileInit+0x6c>)
   12e10:	4798      	blx	r3
     }
     while ((mqtt_inst.isConnected)) {
   12e12:	e002      	b.n	12e1a <HTTP_DownloadFileInit+0x26>
         m2m_wifi_handle_events(NULL);
   12e14:	2000      	movs	r0, #0
   12e16:	4b13      	ldr	r3, [pc, #76]	; (12e64 <HTTP_DownloadFileInit+0x70>)
   12e18:	4798      	blx	r3
     while ((mqtt_inst.isConnected)) {
   12e1a:	4b0e      	ldr	r3, [pc, #56]	; (12e54 <HTTP_DownloadFileInit+0x60>)
   12e1c:	2234      	movs	r2, #52	; 0x34
   12e1e:	5c9b      	ldrb	r3, [r3, r2]
   12e20:	2b00      	cmp	r3, #0
   12e22:	d1f7      	bne.n	12e14 <HTTP_DownloadFileInit+0x20>
     }
     socketDeinit();
   12e24:	4b10      	ldr	r3, [pc, #64]	; (12e68 <HTTP_DownloadFileInit+0x74>)
   12e26:	4798      	blx	r3
     // DOWNLOAD A FILE
     do_download_flag = true;
   12e28:	4b10      	ldr	r3, [pc, #64]	; (12e6c <HTTP_DownloadFileInit+0x78>)
   12e2a:	2201      	movs	r2, #1
   12e2c:	701a      	strb	r2, [r3, #0]
     /* Register socket callback function. */
     registerSocketCallback(socket_cb, resolve_cb);
   12e2e:	4a10      	ldr	r2, [pc, #64]	; (12e70 <HTTP_DownloadFileInit+0x7c>)
   12e30:	4b10      	ldr	r3, [pc, #64]	; (12e74 <HTTP_DownloadFileInit+0x80>)
   12e32:	0011      	movs	r1, r2
   12e34:	0018      	movs	r0, r3
   12e36:	4b10      	ldr	r3, [pc, #64]	; (12e78 <HTTP_DownloadFileInit+0x84>)
   12e38:	4798      	blx	r3
     /* Initialize socket module. */
     socketInit();
   12e3a:	4b10      	ldr	r3, [pc, #64]	; (12e7c <HTTP_DownloadFileInit+0x88>)
   12e3c:	4798      	blx	r3
 
     start_download();
   12e3e:	4b10      	ldr	r3, [pc, #64]	; (12e80 <HTTP_DownloadFileInit+0x8c>)
   12e40:	4798      	blx	r3
     wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   12e42:	4b10      	ldr	r3, [pc, #64]	; (12e84 <HTTP_DownloadFileInit+0x90>)
   12e44:	2203      	movs	r2, #3
   12e46:	701a      	strb	r2, [r3, #0]
 }
   12e48:	46c0      	nop			; (mov r8, r8)
   12e4a:	46bd      	mov	sp, r7
   12e4c:	bd80      	pop	{r7, pc}
   12e4e:	46c0      	nop			; (mov r8, r8)
   12e50:	0003445c 	.word	0x0003445c
   12e54:	200006f8 	.word	0x200006f8
   12e58:	0002cce5 	.word	0x0002cce5
   12e5c:	00034860 	.word	0x00034860
   12e60:	0001a761 	.word	0x0001a761
   12e64:	0001e895 	.word	0x0001e895
   12e68:	00021e51 	.word	0x00021e51
   12e6c:	20000498 	.word	0x20000498
   12e70:	00012345 	.word	0x00012345
   12e74:	00012311 	.word	0x00012311
   12e78:	00021e99 	.word	0x00021e99
   12e7c:	00021e01 	.word	0x00021e01
   12e80:	00011f35 	.word	0x00011f35
   12e84:	2000047c 	.word	0x2000047c

00012e88 <HTTP_DownloadFileTransaction>:
  * @brief	Routine to handle the HTTP transaction of downloading a file
  * @note
 
 */
 static void HTTP_DownloadFileTransaction(void)
 {
   12e88:	b590      	push	{r4, r7, lr}
   12e8a:	b085      	sub	sp, #20
   12e8c:	af00      	add	r7, sp, #0
     /* Connect to router. */
     while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   12e8e:	e009      	b.n	12ea4 <HTTP_DownloadFileTransaction+0x1c>
         /* Handle pending events from network controller. */
         m2m_wifi_handle_events(NULL);
   12e90:	2000      	movs	r0, #0
   12e92:	4b2b      	ldr	r3, [pc, #172]	; (12f40 <HTTP_DownloadFileTransaction+0xb8>)
   12e94:	4798      	blx	r3
         /* Checks the timer timeout. */
         sw_timer_task(&swt_module_inst);
   12e96:	4b2b      	ldr	r3, [pc, #172]	; (12f44 <HTTP_DownloadFileTransaction+0xbc>)
   12e98:	0018      	movs	r0, r3
   12e9a:	4b2b      	ldr	r3, [pc, #172]	; (12f48 <HTTP_DownloadFileTransaction+0xc0>)
   12e9c:	4798      	blx	r3
         vTaskDelay(5);
   12e9e:	2005      	movs	r0, #5
   12ea0:	4b2a      	ldr	r3, [pc, #168]	; (12f4c <HTTP_DownloadFileTransaction+0xc4>)
   12ea2:	4798      	blx	r3
     while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   12ea4:	2010      	movs	r0, #16
   12ea6:	4b2a      	ldr	r3, [pc, #168]	; (12f50 <HTTP_DownloadFileTransaction+0xc8>)
   12ea8:	4798      	blx	r3
   12eaa:	0003      	movs	r3, r0
   12eac:	001a      	movs	r2, r3
   12eae:	2301      	movs	r3, #1
   12eb0:	4053      	eors	r3, r2
   12eb2:	b2db      	uxtb	r3, r3
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	d009      	beq.n	12ecc <HTTP_DownloadFileTransaction+0x44>
   12eb8:	2020      	movs	r0, #32
   12eba:	4b25      	ldr	r3, [pc, #148]	; (12f50 <HTTP_DownloadFileTransaction+0xc8>)
   12ebc:	4798      	blx	r3
   12ebe:	0003      	movs	r3, r0
   12ec0:	001a      	movs	r2, r3
   12ec2:	2301      	movs	r3, #1
   12ec4:	4053      	eors	r3, r2
   12ec6:	b2db      	uxtb	r3, r3
   12ec8:	2b00      	cmp	r3, #0
   12eca:	d1e1      	bne.n	12e90 <HTTP_DownloadFileTransaction+0x8>
     }
 
     // Disable socket for HTTP Transfer
     socketDeinit();
   12ecc:	4b21      	ldr	r3, [pc, #132]	; (12f54 <HTTP_DownloadFileTransaction+0xcc>)
   12ece:	4798      	blx	r3
     vTaskDelay(1000);
   12ed0:	23fa      	movs	r3, #250	; 0xfa
   12ed2:	009b      	lsls	r3, r3, #2
   12ed4:	0018      	movs	r0, r3
   12ed6:	4b1d      	ldr	r3, [pc, #116]	; (12f4c <HTTP_DownloadFileTransaction+0xc4>)
   12ed8:	4798      	blx	r3
     // CONNECT TO MQTT BROKER
     do_download_flag = false;
   12eda:	4b1f      	ldr	r3, [pc, #124]	; (12f58 <HTTP_DownloadFileTransaction+0xd0>)
   12edc:	2200      	movs	r2, #0
   12ede:	701a      	strb	r2, [r3, #0]
 
     // Write Flag
     char test_file_name[] = "0:FlagA.txt";
   12ee0:	003b      	movs	r3, r7
   12ee2:	4a1e      	ldr	r2, [pc, #120]	; (12f5c <HTTP_DownloadFileTransaction+0xd4>)
   12ee4:	ca13      	ldmia	r2!, {r0, r1, r4}
   12ee6:	c313      	stmia	r3!, {r0, r1, r4}
     test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   12ee8:	003b      	movs	r3, r7
   12eea:	2230      	movs	r2, #48	; 0x30
   12eec:	701a      	strb	r2, [r3, #0]
     FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   12eee:	230f      	movs	r3, #15
   12ef0:	18fc      	adds	r4, r7, r3
   12ef2:	0039      	movs	r1, r7
   12ef4:	4b1a      	ldr	r3, [pc, #104]	; (12f60 <HTTP_DownloadFileTransaction+0xd8>)
   12ef6:	220a      	movs	r2, #10
   12ef8:	0018      	movs	r0, r3
   12efa:	4b1a      	ldr	r3, [pc, #104]	; (12f64 <HTTP_DownloadFileTransaction+0xdc>)
   12efc:	4798      	blx	r3
   12efe:	0003      	movs	r3, r0
   12f00:	7023      	strb	r3, [r4, #0]
 
     if (res != FR_OK) {
   12f02:	230f      	movs	r3, #15
   12f04:	18fb      	adds	r3, r7, r3
   12f06:	781b      	ldrb	r3, [r3, #0]
   12f08:	2b00      	cmp	r3, #0
   12f0a:	d008      	beq.n	12f1e <HTTP_DownloadFileTransaction+0x96>
         LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   12f0c:	230f      	movs	r3, #15
   12f0e:	18fb      	adds	r3, r7, r3
   12f10:	781a      	ldrb	r2, [r3, #0]
   12f12:	4b15      	ldr	r3, [pc, #84]	; (12f68 <HTTP_DownloadFileTransaction+0xe0>)
   12f14:	0019      	movs	r1, r3
   12f16:	2000      	movs	r0, #0
   12f18:	4b14      	ldr	r3, [pc, #80]	; (12f6c <HTTP_DownloadFileTransaction+0xe4>)
   12f1a:	4798      	blx	r3
   12f1c:	e003      	b.n	12f26 <HTTP_DownloadFileTransaction+0x9e>
     } else {
         SerialConsoleWriteString("FlagA.txt added!\r\n");
   12f1e:	4b14      	ldr	r3, [pc, #80]	; (12f70 <HTTP_DownloadFileTransaction+0xe8>)
   12f20:	0018      	movs	r0, r3
   12f22:	4b14      	ldr	r3, [pc, #80]	; (12f74 <HTTP_DownloadFileTransaction+0xec>)
   12f24:	4798      	blx	r3
     }
 
     f_close(&file_object);
   12f26:	4b0e      	ldr	r3, [pc, #56]	; (12f60 <HTTP_DownloadFileTransaction+0xd8>)
   12f28:	0018      	movs	r0, r3
   12f2a:	4b13      	ldr	r3, [pc, #76]	; (12f78 <HTTP_DownloadFileTransaction+0xf0>)
   12f2c:	4798      	blx	r3
     wifiStateMachine = WIFI_MQTT_INIT;
   12f2e:	4b13      	ldr	r3, [pc, #76]	; (12f7c <HTTP_DownloadFileTransaction+0xf4>)
   12f30:	2200      	movs	r2, #0
   12f32:	701a      	strb	r2, [r3, #0]
 
 
     system_reset();
   12f34:	4b12      	ldr	r3, [pc, #72]	; (12f80 <HTTP_DownloadFileTransaction+0xf8>)
   12f36:	4798      	blx	r3
 }
   12f38:	46c0      	nop			; (mov r8, r8)
   12f3a:	46bd      	mov	sp, r7
   12f3c:	b005      	add	sp, #20
   12f3e:	bd90      	pop	{r4, r7, pc}
   12f40:	0001e895 	.word	0x0001e895
   12f44:	20004360 	.word	0x20004360
   12f48:	0002fa0d 	.word	0x0002fa0d
   12f4c:	00018a05 	.word	0x00018a05
   12f50:	00011c0d 	.word	0x00011c0d
   12f54:	00021e51 	.word	0x00021e51
   12f58:	20000498 	.word	0x20000498
   12f5c:	00034d34 	.word	0x00034d34
   12f60:	200006cc 	.word	0x200006cc
   12f64:	0002a7d1 	.word	0x0002a7d1
   12f68:	00034d10 	.word	0x00034d10
   12f6c:	0001a761 	.word	0x0001a761
   12f70:	00034d20 	.word	0x00034d20
   12f74:	0001a691 	.word	0x0001a691
   12f78:	0002b46d 	.word	0x0002b46d
   12f7c:	2000047c 	.word	0x2000047c
   12f80:	00011acd 	.word	0x00011acd

00012f84 <MQTT_InitRoutine>:
  * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
  * @note
 
 */
 static void MQTT_InitRoutine(void)
 {
   12f84:	b580      	push	{r7, lr}
   12f86:	af00      	add	r7, sp, #0
     socketDeinit();
   12f88:	4b18      	ldr	r3, [pc, #96]	; (12fec <MQTT_InitRoutine+0x68>)
   12f8a:	4798      	blx	r3
     configure_mqtt();
   12f8c:	4b18      	ldr	r3, [pc, #96]	; (12ff0 <MQTT_InitRoutine+0x6c>)
   12f8e:	4798      	blx	r3
     // Re-enable socket for MQTT Transfer
     registerSocketCallback(socket_event_handler, socket_resolve_handler);
   12f90:	4a18      	ldr	r2, [pc, #96]	; (12ff4 <MQTT_InitRoutine+0x70>)
   12f92:	4b19      	ldr	r3, [pc, #100]	; (12ff8 <MQTT_InitRoutine+0x74>)
   12f94:	0011      	movs	r1, r2
   12f96:	0018      	movs	r0, r3
   12f98:	4b18      	ldr	r3, [pc, #96]	; (12ffc <MQTT_InitRoutine+0x78>)
   12f9a:	4798      	blx	r3
     socketInit();
   12f9c:	4b18      	ldr	r3, [pc, #96]	; (13000 <MQTT_InitRoutine+0x7c>)
   12f9e:	4798      	blx	r3
     /* Connect to router. */
     if (!(mqtt_inst.isConnected)) {
   12fa0:	4b18      	ldr	r3, [pc, #96]	; (13004 <MQTT_InitRoutine+0x80>)
   12fa2:	2234      	movs	r2, #52	; 0x34
   12fa4:	5c9b      	ldrb	r3, [r3, r2]
   12fa6:	2201      	movs	r2, #1
   12fa8:	4053      	eors	r3, r2
   12faa:	b2db      	uxtb	r3, r3
   12fac:	2b00      	cmp	r3, #0
   12fae:	d00c      	beq.n	12fca <MQTT_InitRoutine+0x46>
         if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   12fb0:	4a15      	ldr	r2, [pc, #84]	; (13008 <MQTT_InitRoutine+0x84>)
   12fb2:	4b14      	ldr	r3, [pc, #80]	; (13004 <MQTT_InitRoutine+0x80>)
   12fb4:	0011      	movs	r1, r2
   12fb6:	0018      	movs	r0, r3
   12fb8:	4b14      	ldr	r3, [pc, #80]	; (1300c <MQTT_InitRoutine+0x88>)
   12fba:	4798      	blx	r3
   12fbc:	1e03      	subs	r3, r0, #0
   12fbe:	d004      	beq.n	12fca <MQTT_InitRoutine+0x46>
             LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   12fc0:	4b13      	ldr	r3, [pc, #76]	; (13010 <MQTT_InitRoutine+0x8c>)
   12fc2:	0019      	movs	r1, r3
   12fc4:	2001      	movs	r0, #1
   12fc6:	4b13      	ldr	r3, [pc, #76]	; (13014 <MQTT_InitRoutine+0x90>)
   12fc8:	4798      	blx	r3
         }
     }
 
     if (mqtt_inst.isConnected) {
   12fca:	4b0e      	ldr	r3, [pc, #56]	; (13004 <MQTT_InitRoutine+0x80>)
   12fcc:	2234      	movs	r2, #52	; 0x34
   12fce:	5c9b      	ldrb	r3, [r3, r2]
   12fd0:	2b00      	cmp	r3, #0
   12fd2:	d004      	beq.n	12fde <MQTT_InitRoutine+0x5a>
         LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   12fd4:	4b10      	ldr	r3, [pc, #64]	; (13018 <MQTT_InitRoutine+0x94>)
   12fd6:	0019      	movs	r1, r3
   12fd8:	2001      	movs	r0, #1
   12fda:	4b0e      	ldr	r3, [pc, #56]	; (13014 <MQTT_InitRoutine+0x90>)
   12fdc:	4798      	blx	r3
     }
     wifiStateMachine = WIFI_MQTT_HANDLE;
   12fde:	4b0f      	ldr	r3, [pc, #60]	; (1301c <MQTT_InitRoutine+0x98>)
   12fe0:	2201      	movs	r2, #1
   12fe2:	701a      	strb	r2, [r3, #0]
 }
   12fe4:	46c0      	nop			; (mov r8, r8)
   12fe6:	46bd      	mov	sp, r7
   12fe8:	bd80      	pop	{r7, pc}
   12fea:	46c0      	nop			; (mov r8, r8)
   12fec:	00021e51 	.word	0x00021e51
   12ff0:	00012c91 	.word	0x00012c91
   12ff4:	000126cd 	.word	0x000126cd
   12ff8:	00012699 	.word	0x00012699
   12ffc:	00021e99 	.word	0x00021e99
   13000:	00021e01 	.word	0x00021e01
   13004:	200006f8 	.word	0x200006f8
   13008:	0003445c 	.word	0x0003445c
   1300c:	0002cbb1 	.word	0x0002cbb1
   13010:	00034860 	.word	0x00034860
   13014:	0001a761 	.word	0x0001a761
   13018:	00034d40 	.word	0x00034d40
   1301c:	2000047c 	.word	0x2000047c

00013020 <MQTT_HandleTransactions>:
  * @brief	Routine to handle MQTT transactions
  * @note
 
 */
 static void MQTT_HandleTransactions(void)
 {
   13020:	b580      	push	{r7, lr}
   13022:	af00      	add	r7, sp, #0
     /* Handle pending events from network controller. */
     m2m_wifi_handle_events(NULL);
   13024:	2000      	movs	r0, #0
   13026:	4b0d      	ldr	r3, [pc, #52]	; (1305c <MQTT_HandleTransactions+0x3c>)
   13028:	4798      	blx	r3
     sw_timer_task(&swt_module_inst);
   1302a:	4b0d      	ldr	r3, [pc, #52]	; (13060 <MQTT_HandleTransactions+0x40>)
   1302c:	0018      	movs	r0, r3
   1302e:	4b0d      	ldr	r3, [pc, #52]	; (13064 <MQTT_HandleTransactions+0x44>)
   13030:	4798      	blx	r3
 
     // Check if data has to be sent!
     MQTT_HandleGameMessages();
   13032:	4b0d      	ldr	r3, [pc, #52]	; (13068 <MQTT_HandleTransactions+0x48>)
   13034:	4798      	blx	r3
     MQTT_HandleImuMessages();
   13036:	4b0d      	ldr	r3, [pc, #52]	; (1306c <MQTT_HandleTransactions+0x4c>)
   13038:	4798      	blx	r3
     MQTT_HandleTempMessages();   
   1303a:	4b0d      	ldr	r3, [pc, #52]	; (13070 <MQTT_HandleTransactions+0x50>)
   1303c:	4798      	blx	r3
     MQTT_HandleIntensityMessages();
   1303e:	4b0d      	ldr	r3, [pc, #52]	; (13074 <MQTT_HandleTransactions+0x54>)
   13040:	4798      	blx	r3
 
     // Handle MQTT messages
     if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   13042:	4b0d      	ldr	r3, [pc, #52]	; (13078 <MQTT_HandleTransactions+0x58>)
   13044:	2234      	movs	r2, #52	; 0x34
   13046:	5c9b      	ldrb	r3, [r3, r2]
   13048:	2b00      	cmp	r3, #0
   1304a:	d004      	beq.n	13056 <MQTT_HandleTransactions+0x36>
   1304c:	4b0a      	ldr	r3, [pc, #40]	; (13078 <MQTT_HandleTransactions+0x58>)
   1304e:	2164      	movs	r1, #100	; 0x64
   13050:	0018      	movs	r0, r3
   13052:	4b0a      	ldr	r3, [pc, #40]	; (1307c <MQTT_HandleTransactions+0x5c>)
   13054:	4798      	blx	r3
 }
   13056:	46c0      	nop			; (mov r8, r8)
   13058:	46bd      	mov	sp, r7
   1305a:	bd80      	pop	{r7, pc}
   1305c:	0001e895 	.word	0x0001e895
   13060:	20004360 	.word	0x20004360
   13064:	0002fa0d 	.word	0x0002fa0d
   13068:	0001310d 	.word	0x0001310d
   1306c:	00013081 	.word	0x00013081
   13070:	00013235 	.word	0x00013235
   13074:	000132e5 	.word	0x000132e5
   13078:	200006f8 	.word	0x200006f8
   1307c:	0002cde1 	.word	0x0002cde1

00013080 <MQTT_HandleImuMessages>:
 
 static void MQTT_HandleImuMessages(void)
 {
   13080:	b590      	push	{r4, r7, lr}
   13082:	b085      	sub	sp, #20
   13084:	af02      	add	r7, sp, #8
     struct ImuDataPacket imuDataVar;
     if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   13086:	4b18      	ldr	r3, [pc, #96]	; (130e8 <MQTT_HandleImuMessages+0x68>)
   13088:	681b      	ldr	r3, [r3, #0]
   1308a:	0039      	movs	r1, r7
   1308c:	2200      	movs	r2, #0
   1308e:	0018      	movs	r0, r3
   13090:	4b16      	ldr	r3, [pc, #88]	; (130ec <MQTT_HandleImuMessages+0x6c>)
   13092:	4798      	blx	r3
   13094:	0003      	movs	r3, r0
   13096:	2b01      	cmp	r3, #1
   13098:	d121      	bne.n	130de <MQTT_HandleImuMessages+0x5e>
         snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   1309a:	003b      	movs	r3, r7
   1309c:	2200      	movs	r2, #0
   1309e:	5e9b      	ldrsh	r3, [r3, r2]
   130a0:	001c      	movs	r4, r3
   130a2:	003b      	movs	r3, r7
   130a4:	2202      	movs	r2, #2
   130a6:	5e9b      	ldrsh	r3, [r3, r2]
   130a8:	0019      	movs	r1, r3
   130aa:	003b      	movs	r3, r7
   130ac:	2204      	movs	r2, #4
   130ae:	5e9b      	ldrsh	r3, [r3, r2]
   130b0:	4a0f      	ldr	r2, [pc, #60]	; (130f0 <MQTT_HandleImuMessages+0x70>)
   130b2:	4810      	ldr	r0, [pc, #64]	; (130f4 <MQTT_HandleImuMessages+0x74>)
   130b4:	9301      	str	r3, [sp, #4]
   130b6:	9100      	str	r1, [sp, #0]
   130b8:	0023      	movs	r3, r4
   130ba:	213f      	movs	r1, #63	; 0x3f
   130bc:	4c0e      	ldr	r4, [pc, #56]	; (130f8 <MQTT_HandleImuMessages+0x78>)
   130be:	47a0      	blx	r4
         mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   130c0:	4b0c      	ldr	r3, [pc, #48]	; (130f4 <MQTT_HandleImuMessages+0x74>)
   130c2:	0018      	movs	r0, r3
   130c4:	4b0d      	ldr	r3, [pc, #52]	; (130fc <MQTT_HandleImuMessages+0x7c>)
   130c6:	4798      	blx	r3
   130c8:	0004      	movs	r4, r0
   130ca:	4a0a      	ldr	r2, [pc, #40]	; (130f4 <MQTT_HandleImuMessages+0x74>)
   130cc:	490c      	ldr	r1, [pc, #48]	; (13100 <MQTT_HandleImuMessages+0x80>)
   130ce:	480d      	ldr	r0, [pc, #52]	; (13104 <MQTT_HandleImuMessages+0x84>)
   130d0:	2300      	movs	r3, #0
   130d2:	9301      	str	r3, [sp, #4]
   130d4:	2301      	movs	r3, #1
   130d6:	9300      	str	r3, [sp, #0]
   130d8:	0023      	movs	r3, r4
   130da:	4c0b      	ldr	r4, [pc, #44]	; (13108 <MQTT_HandleImuMessages+0x88>)
   130dc:	47a0      	blx	r4
     }
 }
   130de:	46c0      	nop			; (mov r8, r8)
   130e0:	46bd      	mov	sp, r7
   130e2:	b003      	add	sp, #12
   130e4:	bd90      	pop	{r4, r7, pc}
   130e6:	46c0      	nop			; (mov r8, r8)
   130e8:	20000488 	.word	0x20000488
   130ec:	00017859 	.word	0x00017859
   130f0:	00034d5c 	.word	0x00034d5c
   130f4:	20000018 	.word	0x20000018
   130f8:	00032b01 	.word	0x00032b01
   130fc:	00032c5f 	.word	0x00032c5f
   13100:	00034c00 	.word	0x00034c00
   13104:	200006f8 	.word	0x200006f8
   13108:	0002cd2d 	.word	0x0002cd2d

0001310c <MQTT_HandleGameMessages>:
 
 static void MQTT_HandleGameMessages(void)
 {
   1310c:	b590      	push	{r4, r7, lr}
   1310e:	b08b      	sub	sp, #44	; 0x2c
   13110:	af02      	add	r7, sp, #8
     struct GameDataPacket gamePacket;
     if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   13112:	4b39      	ldr	r3, [pc, #228]	; (131f8 <MQTT_HandleGameMessages+0xec>)
   13114:	681b      	ldr	r3, [r3, #0]
   13116:	2208      	movs	r2, #8
   13118:	18b9      	adds	r1, r7, r2
   1311a:	2200      	movs	r2, #0
   1311c:	0018      	movs	r0, r3
   1311e:	4b37      	ldr	r3, [pc, #220]	; (131fc <MQTT_HandleGameMessages+0xf0>)
   13120:	4798      	blx	r3
   13122:	0003      	movs	r3, r0
   13124:	2b01      	cmp	r3, #1
   13126:	d163      	bne.n	131f0 <MQTT_HandleGameMessages+0xe4>
         snprintf(mqtt_msg, 63, "{\"game\":[");
   13128:	4b35      	ldr	r3, [pc, #212]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   1312a:	4a36      	ldr	r2, [pc, #216]	; (13204 <MQTT_HandleGameMessages+0xf8>)
   1312c:	ca03      	ldmia	r2!, {r0, r1}
   1312e:	c303      	stmia	r3!, {r0, r1}
   13130:	8812      	ldrh	r2, [r2, #0]
   13132:	801a      	strh	r2, [r3, #0]
         for (int iter = 0; iter < GAME_SIZE; iter++) {
   13134:	2300      	movs	r3, #0
   13136:	61fb      	str	r3, [r7, #28]
   13138:	e02d      	b.n	13196 <MQTT_HandleGameMessages+0x8a>
             char numGame[5];
             if (gamePacket.game[iter] != 0xFF) {
   1313a:	2308      	movs	r3, #8
   1313c:	18fa      	adds	r2, r7, r3
   1313e:	69fb      	ldr	r3, [r7, #28]
   13140:	18d3      	adds	r3, r2, r3
   13142:	781b      	ldrb	r3, [r3, #0]
   13144:	2bff      	cmp	r3, #255	; 0xff
   13146:	d02a      	beq.n	1319e <MQTT_HandleGameMessages+0x92>
                 snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   13148:	2308      	movs	r3, #8
   1314a:	18fa      	adds	r2, r7, r3
   1314c:	69fb      	ldr	r3, [r7, #28]
   1314e:	18d3      	adds	r3, r2, r3
   13150:	781b      	ldrb	r3, [r3, #0]
   13152:	4a2d      	ldr	r2, [pc, #180]	; (13208 <MQTT_HandleGameMessages+0xfc>)
   13154:	0038      	movs	r0, r7
   13156:	2103      	movs	r1, #3
   13158:	4c2c      	ldr	r4, [pc, #176]	; (1320c <MQTT_HandleGameMessages+0x100>)
   1315a:	47a0      	blx	r4
                 strcat(mqtt_msg, numGame);
   1315c:	003a      	movs	r2, r7
   1315e:	4b28      	ldr	r3, [pc, #160]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   13160:	0011      	movs	r1, r2
   13162:	0018      	movs	r0, r3
   13164:	4b2a      	ldr	r3, [pc, #168]	; (13210 <MQTT_HandleGameMessages+0x104>)
   13166:	4798      	blx	r3
                 if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   13168:	69fb      	ldr	r3, [r7, #28]
   1316a:	3301      	adds	r3, #1
   1316c:	2208      	movs	r2, #8
   1316e:	18ba      	adds	r2, r7, r2
   13170:	5cd3      	ldrb	r3, [r2, r3]
   13172:	2bff      	cmp	r3, #255	; 0xff
   13174:	d00c      	beq.n	13190 <MQTT_HandleGameMessages+0x84>
   13176:	69fb      	ldr	r3, [r7, #28]
   13178:	3301      	adds	r3, #1
   1317a:	2b13      	cmp	r3, #19
   1317c:	dc08      	bgt.n	13190 <MQTT_HandleGameMessages+0x84>
                     snprintf(numGame, 5, ",");
   1317e:	003b      	movs	r3, r7
   13180:	222c      	movs	r2, #44	; 0x2c
   13182:	801a      	strh	r2, [r3, #0]
                     strcat(mqtt_msg, numGame);
   13184:	003a      	movs	r2, r7
   13186:	4b1e      	ldr	r3, [pc, #120]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   13188:	0011      	movs	r1, r2
   1318a:	0018      	movs	r0, r3
   1318c:	4b20      	ldr	r3, [pc, #128]	; (13210 <MQTT_HandleGameMessages+0x104>)
   1318e:	4798      	blx	r3
         for (int iter = 0; iter < GAME_SIZE; iter++) {
   13190:	69fb      	ldr	r3, [r7, #28]
   13192:	3301      	adds	r3, #1
   13194:	61fb      	str	r3, [r7, #28]
   13196:	69fb      	ldr	r3, [r7, #28]
   13198:	2b13      	cmp	r3, #19
   1319a:	ddce      	ble.n	1313a <MQTT_HandleGameMessages+0x2e>
   1319c:	e000      	b.n	131a0 <MQTT_HandleGameMessages+0x94>
                 }
             } else {
                 break;
   1319e:	46c0      	nop			; (mov r8, r8)
             }
         }
         strcat(mqtt_msg, "]}");
   131a0:	4b17      	ldr	r3, [pc, #92]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   131a2:	0018      	movs	r0, r3
   131a4:	4b1b      	ldr	r3, [pc, #108]	; (13214 <MQTT_HandleGameMessages+0x108>)
   131a6:	4798      	blx	r3
   131a8:	0003      	movs	r3, r0
   131aa:	001a      	movs	r2, r3
   131ac:	4b14      	ldr	r3, [pc, #80]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   131ae:	18d2      	adds	r2, r2, r3
   131b0:	4b19      	ldr	r3, [pc, #100]	; (13218 <MQTT_HandleGameMessages+0x10c>)
   131b2:	0010      	movs	r0, r2
   131b4:	0019      	movs	r1, r3
   131b6:	2303      	movs	r3, #3
   131b8:	001a      	movs	r2, r3
   131ba:	4b18      	ldr	r3, [pc, #96]	; (1321c <MQTT_HandleGameMessages+0x110>)
   131bc:	4798      	blx	r3
         LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   131be:	4b10      	ldr	r3, [pc, #64]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   131c0:	0019      	movs	r1, r3
   131c2:	2001      	movs	r0, #1
   131c4:	4b16      	ldr	r3, [pc, #88]	; (13220 <MQTT_HandleGameMessages+0x114>)
   131c6:	4798      	blx	r3
         LogMessage(LOG_DEBUG_LVL, "\r\n");
   131c8:	4b16      	ldr	r3, [pc, #88]	; (13224 <MQTT_HandleGameMessages+0x118>)
   131ca:	0019      	movs	r1, r3
   131cc:	2001      	movs	r0, #1
   131ce:	4b14      	ldr	r3, [pc, #80]	; (13220 <MQTT_HandleGameMessages+0x114>)
   131d0:	4798      	blx	r3
         mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   131d2:	4b0b      	ldr	r3, [pc, #44]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   131d4:	0018      	movs	r0, r3
   131d6:	4b0f      	ldr	r3, [pc, #60]	; (13214 <MQTT_HandleGameMessages+0x108>)
   131d8:	4798      	blx	r3
   131da:	0004      	movs	r4, r0
   131dc:	4a08      	ldr	r2, [pc, #32]	; (13200 <MQTT_HandleGameMessages+0xf4>)
   131de:	4912      	ldr	r1, [pc, #72]	; (13228 <MQTT_HandleGameMessages+0x11c>)
   131e0:	4812      	ldr	r0, [pc, #72]	; (1322c <MQTT_HandleGameMessages+0x120>)
   131e2:	2300      	movs	r3, #0
   131e4:	9301      	str	r3, [sp, #4]
   131e6:	2301      	movs	r3, #1
   131e8:	9300      	str	r3, [sp, #0]
   131ea:	0023      	movs	r3, r4
   131ec:	4c10      	ldr	r4, [pc, #64]	; (13230 <MQTT_HandleGameMessages+0x124>)
   131ee:	47a0      	blx	r4
     }
 }
   131f0:	46c0      	nop			; (mov r8, r8)
   131f2:	46bd      	mov	sp, r7
   131f4:	b009      	add	sp, #36	; 0x24
   131f6:	bd90      	pop	{r4, r7, pc}
   131f8:	20000484 	.word	0x20000484
   131fc:	00017859 	.word	0x00017859
   13200:	20000018 	.word	0x20000018
   13204:	00034a60 	.word	0x00034a60
   13208:	00034d80 	.word	0x00034d80
   1320c:	00032b01 	.word	0x00032b01
   13210:	00032be5 	.word	0x00032be5
   13214:	00032c5f 	.word	0x00032c5f
   13218:	00034d84 	.word	0x00034d84
   1321c:	00032871 	.word	0x00032871
   13220:	0001a761 	.word	0x0001a761
   13224:	00034d88 	.word	0x00034d88
   13228:	00034d8c 	.word	0x00034d8c
   1322c:	200006f8 	.word	0x200006f8
   13230:	0002cd2d 	.word	0x0002cd2d

00013234 <MQTT_HandleTempMessages>:
 * @ref TEMPERATURE_MQTT_TOPIC with QoS 1.
 *
 * @note Subscriber should divide received value by 100.
 */
static void MQTT_HandleTempMessages(void)
{
   13234:	b590      	push	{r4, r7, lr}
   13236:	b089      	sub	sp, #36	; 0x24
   13238:	af02      	add	r7, sp, #8
    float temp;
    if (pdPASS == xQueueReceive(xQueueTempBuffer, &temp, 0))
   1323a:	4b1e      	ldr	r3, [pc, #120]	; (132b4 <MQTT_HandleTempMessages+0x80>)
   1323c:	681b      	ldr	r3, [r3, #0]
   1323e:	2210      	movs	r2, #16
   13240:	18b9      	adds	r1, r7, r2
   13242:	2200      	movs	r2, #0
   13244:	0018      	movs	r0, r3
   13246:	4b1c      	ldr	r3, [pc, #112]	; (132b8 <MQTT_HandleTempMessages+0x84>)
   13248:	4798      	blx	r3
   1324a:	0003      	movs	r3, r0
   1324c:	2b01      	cmp	r3, #1
   1324e:	d12c      	bne.n	132aa <MQTT_HandleTempMessages+0x76>
    {
        char payload[16];
        int16_t t100 = (int16_t)(temp * 100 + 0.5f);   /* e.g. 23.45°C → 2345 */
   13250:	693a      	ldr	r2, [r7, #16]
   13252:	4b1a      	ldr	r3, [pc, #104]	; (132bc <MQTT_HandleTempMessages+0x88>)
   13254:	491a      	ldr	r1, [pc, #104]	; (132c0 <MQTT_HandleTempMessages+0x8c>)
   13256:	1c10      	adds	r0, r2, #0
   13258:	4798      	blx	r3
   1325a:	1c03      	adds	r3, r0, #0
   1325c:	1c1a      	adds	r2, r3, #0
   1325e:	4b19      	ldr	r3, [pc, #100]	; (132c4 <MQTT_HandleTempMessages+0x90>)
   13260:	21fc      	movs	r1, #252	; 0xfc
   13262:	0589      	lsls	r1, r1, #22
   13264:	1c10      	adds	r0, r2, #0
   13266:	4798      	blx	r3
   13268:	1c03      	adds	r3, r0, #0
   1326a:	1c1a      	adds	r2, r3, #0
   1326c:	2316      	movs	r3, #22
   1326e:	18fc      	adds	r4, r7, r3
   13270:	4b15      	ldr	r3, [pc, #84]	; (132c8 <MQTT_HandleTempMessages+0x94>)
   13272:	1c10      	adds	r0, r2, #0
   13274:	4798      	blx	r3
   13276:	0003      	movs	r3, r0
   13278:	8023      	strh	r3, [r4, #0]
        snprintf(payload, sizeof(payload), "%d", t100);
   1327a:	2316      	movs	r3, #22
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	2200      	movs	r2, #0
   13280:	5e9b      	ldrsh	r3, [r3, r2]
   13282:	4a12      	ldr	r2, [pc, #72]	; (132cc <MQTT_HandleTempMessages+0x98>)
   13284:	0038      	movs	r0, r7
   13286:	2110      	movs	r1, #16
   13288:	4c11      	ldr	r4, [pc, #68]	; (132d0 <MQTT_HandleTempMessages+0x9c>)
   1328a:	47a0      	blx	r4

        mqtt_publish(&mqtt_inst,
                     TEMPERATURE_MQTT_TOPIC,
                     payload,
                     strlen(payload),
   1328c:	003b      	movs	r3, r7
   1328e:	0018      	movs	r0, r3
   13290:	4b10      	ldr	r3, [pc, #64]	; (132d4 <MQTT_HandleTempMessages+0xa0>)
   13292:	4798      	blx	r3
   13294:	0004      	movs	r4, r0
        mqtt_publish(&mqtt_inst,
   13296:	003a      	movs	r2, r7
   13298:	490f      	ldr	r1, [pc, #60]	; (132d8 <MQTT_HandleTempMessages+0xa4>)
   1329a:	4810      	ldr	r0, [pc, #64]	; (132dc <MQTT_HandleTempMessages+0xa8>)
   1329c:	2300      	movs	r3, #0
   1329e:	9301      	str	r3, [sp, #4]
   132a0:	2301      	movs	r3, #1
   132a2:	9300      	str	r3, [sp, #0]
   132a4:	0023      	movs	r3, r4
   132a6:	4c0e      	ldr	r4, [pc, #56]	; (132e0 <MQTT_HandleTempMessages+0xac>)
   132a8:	47a0      	blx	r4
                     1,   /* QoS */
                     0);  /* retain */
    }
}
   132aa:	46c0      	nop			; (mov r8, r8)
   132ac:	46bd      	mov	sp, r7
   132ae:	b007      	add	sp, #28
   132b0:	bd90      	pop	{r4, r7, pc}
   132b2:	46c0      	nop			; (mov r8, r8)
   132b4:	20000490 	.word	0x20000490
   132b8:	00017859 	.word	0x00017859
   132bc:	000308d5 	.word	0x000308d5
   132c0:	42c80000 	.word	0x42c80000
   132c4:	000301d1 	.word	0x000301d1
   132c8:	00030e4d 	.word	0x00030e4d
   132cc:	00034d80 	.word	0x00034d80
   132d0:	00032b01 	.word	0x00032b01
   132d4:	00032c5f 	.word	0x00032c5f
   132d8:	00034da0 	.word	0x00034da0
   132dc:	200006f8 	.word	0x200006f8
   132e0:	0002cd2d 	.word	0x0002cd2d

000132e4 <MQTT_HandleIntensityMessages>:
 * @ref INTENSITY_MQTT_TOPIC with **QoS 1** and the retain-flag cleared.
 *
 * Example : a payload of `"1234"` corresponds to *12.34 lux*.
 ******************************************************************************/
static void MQTT_HandleIntensityMessages(void)
{
   132e4:	b590      	push	{r4, r7, lr}
   132e6:	b087      	sub	sp, #28
   132e8:	af02      	add	r7, sp, #8
    int16_t lux_int;
    if (pdPASS == xQueueReceive(xQueueIntensityBuffer, &lux_int, 0))
   132ea:	4b13      	ldr	r3, [pc, #76]	; (13338 <MQTT_HandleIntensityMessages+0x54>)
   132ec:	681b      	ldr	r3, [r3, #0]
   132ee:	220e      	movs	r2, #14
   132f0:	18b9      	adds	r1, r7, r2
   132f2:	2200      	movs	r2, #0
   132f4:	0018      	movs	r0, r3
   132f6:	4b11      	ldr	r3, [pc, #68]	; (1333c <MQTT_HandleIntensityMessages+0x58>)
   132f8:	4798      	blx	r3
   132fa:	0003      	movs	r3, r0
   132fc:	2b01      	cmp	r3, #1
   132fe:	d117      	bne.n	13330 <MQTT_HandleIntensityMessages+0x4c>
    {
        char payload[8];
        snprintf(payload, sizeof(payload), "%d", lux_int);
   13300:	230e      	movs	r3, #14
   13302:	18fb      	adds	r3, r7, r3
   13304:	2200      	movs	r2, #0
   13306:	5e9b      	ldrsh	r3, [r3, r2]
   13308:	4a0d      	ldr	r2, [pc, #52]	; (13340 <MQTT_HandleIntensityMessages+0x5c>)
   1330a:	1d38      	adds	r0, r7, #4
   1330c:	2108      	movs	r1, #8
   1330e:	4c0d      	ldr	r4, [pc, #52]	; (13344 <MQTT_HandleIntensityMessages+0x60>)
   13310:	47a0      	blx	r4

        mqtt_publish(&mqtt_inst,
                     INTENSITY_MQTT_TOPIC,
                     payload,
                     strlen(payload),
   13312:	1d3b      	adds	r3, r7, #4
   13314:	0018      	movs	r0, r3
   13316:	4b0c      	ldr	r3, [pc, #48]	; (13348 <MQTT_HandleIntensityMessages+0x64>)
   13318:	4798      	blx	r3
   1331a:	0004      	movs	r4, r0
        mqtt_publish(&mqtt_inst,
   1331c:	1d3a      	adds	r2, r7, #4
   1331e:	490b      	ldr	r1, [pc, #44]	; (1334c <MQTT_HandleIntensityMessages+0x68>)
   13320:	480b      	ldr	r0, [pc, #44]	; (13350 <MQTT_HandleIntensityMessages+0x6c>)
   13322:	2300      	movs	r3, #0
   13324:	9301      	str	r3, [sp, #4]
   13326:	2301      	movs	r3, #1
   13328:	9300      	str	r3, [sp, #0]
   1332a:	0023      	movs	r3, r4
   1332c:	4c09      	ldr	r4, [pc, #36]	; (13354 <MQTT_HandleIntensityMessages+0x70>)
   1332e:	47a0      	blx	r4
                     1,   /* QoS 1 : at-least-once            */
                     0);  /* retain flag : false               */
    }
}
   13330:	46c0      	nop			; (mov r8, r8)
   13332:	46bd      	mov	sp, r7
   13334:	b005      	add	sp, #20
   13336:	bd90      	pop	{r4, r7, pc}
   13338:	20000494 	.word	0x20000494
   1333c:	00017859 	.word	0x00017859
   13340:	00034d80 	.word	0x00034d80
   13344:	00032b01 	.word	0x00032b01
   13348:	00032c5f 	.word	0x00032c5f
   1334c:	00034dac 	.word	0x00034dac
   13350:	200006f8 	.word	0x200006f8
   13354:	0002cd2d 	.word	0x0002cd2d

00013358 <vWifiTask>:
  * Application entry point.
  *
  * \return program return value.
  */
 void vWifiTask(void *pvParameters)
 {
   13358:	b590      	push	{r4, r7, lr}
   1335a:	b08d      	sub	sp, #52	; 0x34
   1335c:	af02      	add	r7, sp, #8
   1335e:	6078      	str	r0, [r7, #4]
     tstrWifiInitParam param;
     int8_t ret;
     vTaskDelay(100);
   13360:	2064      	movs	r0, #100	; 0x64
   13362:	4b8c      	ldr	r3, [pc, #560]	; (13594 <vWifiTask+0x23c>)
   13364:	4798      	blx	r3
     init_state();
   13366:	4b8c      	ldr	r3, [pc, #560]	; (13598 <vWifiTask+0x240>)
   13368:	4798      	blx	r3
     // Create buffers to send data
     xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   1336a:	2200      	movs	r2, #0
   1336c:	2104      	movs	r1, #4
   1336e:	2005      	movs	r0, #5
   13370:	4b8a      	ldr	r3, [pc, #552]	; (1359c <vWifiTask+0x244>)
   13372:	4798      	blx	r3
   13374:	0002      	movs	r2, r0
   13376:	4b8a      	ldr	r3, [pc, #552]	; (135a0 <vWifiTask+0x248>)
   13378:	601a      	str	r2, [r3, #0]
     xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   1337a:	2200      	movs	r2, #0
   1337c:	2106      	movs	r1, #6
   1337e:	2005      	movs	r0, #5
   13380:	4b86      	ldr	r3, [pc, #536]	; (1359c <vWifiTask+0x244>)
   13382:	4798      	blx	r3
   13384:	0002      	movs	r2, r0
   13386:	4b87      	ldr	r3, [pc, #540]	; (135a4 <vWifiTask+0x24c>)
   13388:	601a      	str	r2, [r3, #0]
     xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   1338a:	2200      	movs	r2, #0
   1338c:	2114      	movs	r1, #20
   1338e:	2002      	movs	r0, #2
   13390:	4b82      	ldr	r3, [pc, #520]	; (1359c <vWifiTask+0x244>)
   13392:	4798      	blx	r3
   13394:	0002      	movs	r2, r0
   13396:	4b84      	ldr	r3, [pc, #528]	; (135a8 <vWifiTask+0x250>)
   13398:	601a      	str	r2, [r3, #0]
     xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   1339a:	2200      	movs	r2, #0
   1339c:	2102      	movs	r1, #2
   1339e:	2005      	movs	r0, #5
   133a0:	4b7e      	ldr	r3, [pc, #504]	; (1359c <vWifiTask+0x244>)
   133a2:	4798      	blx	r3
   133a4:	0002      	movs	r2, r0
   133a6:	4b81      	ldr	r3, [pc, #516]	; (135ac <vWifiTask+0x254>)
   133a8:	601a      	str	r2, [r3, #0]
     xQueueTempBuffer = xQueueCreate(5, sizeof(float));
   133aa:	2200      	movs	r2, #0
   133ac:	2104      	movs	r1, #4
   133ae:	2005      	movs	r0, #5
   133b0:	4b7a      	ldr	r3, [pc, #488]	; (1359c <vWifiTask+0x244>)
   133b2:	4798      	blx	r3
   133b4:	0002      	movs	r2, r0
   133b6:	4b7e      	ldr	r3, [pc, #504]	; (135b0 <vWifiTask+0x258>)
   133b8:	601a      	str	r2, [r3, #0]
     xQueueIntensityBuffer = xQueueCreate(5, sizeof(int16_t));
   133ba:	2200      	movs	r2, #0
   133bc:	2102      	movs	r1, #2
   133be:	2005      	movs	r0, #5
   133c0:	4b76      	ldr	r3, [pc, #472]	; (1359c <vWifiTask+0x244>)
   133c2:	4798      	blx	r3
   133c4:	0002      	movs	r2, r0
   133c6:	4b7b      	ldr	r3, [pc, #492]	; (135b4 <vWifiTask+0x25c>)
   133c8:	601a      	str	r2, [r3, #0]

 
     if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL
   133ca:	4b75      	ldr	r3, [pc, #468]	; (135a0 <vWifiTask+0x248>)
   133cc:	681b      	ldr	r3, [r3, #0]
   133ce:	2b00      	cmp	r3, #0
   133d0:	d013      	beq.n	133fa <vWifiTask+0xa2>
   133d2:	4b74      	ldr	r3, [pc, #464]	; (135a4 <vWifiTask+0x24c>)
   133d4:	681b      	ldr	r3, [r3, #0]
   133d6:	2b00      	cmp	r3, #0
   133d8:	d00f      	beq.n	133fa <vWifiTask+0xa2>
   133da:	4b73      	ldr	r3, [pc, #460]	; (135a8 <vWifiTask+0x250>)
   133dc:	681b      	ldr	r3, [r3, #0]
   133de:	2b00      	cmp	r3, #0
   133e0:	d00b      	beq.n	133fa <vWifiTask+0xa2>
   133e2:	4b72      	ldr	r3, [pc, #456]	; (135ac <vWifiTask+0x254>)
   133e4:	681b      	ldr	r3, [r3, #0]
   133e6:	2b00      	cmp	r3, #0
   133e8:	d007      	beq.n	133fa <vWifiTask+0xa2>
         ||xQueueTempBuffer == NULL||xQueueIntensityBuffer==NULL) {
   133ea:	4b71      	ldr	r3, [pc, #452]	; (135b0 <vWifiTask+0x258>)
   133ec:	681b      	ldr	r3, [r3, #0]
   133ee:	2b00      	cmp	r3, #0
   133f0:	d003      	beq.n	133fa <vWifiTask+0xa2>
   133f2:	4b70      	ldr	r3, [pc, #448]	; (135b4 <vWifiTask+0x25c>)
   133f4:	681b      	ldr	r3, [r3, #0]
   133f6:	2b00      	cmp	r3, #0
   133f8:	d103      	bne.n	13402 <vWifiTask+0xaa>
         SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   133fa:	4b6f      	ldr	r3, [pc, #444]	; (135b8 <vWifiTask+0x260>)
   133fc:	0018      	movs	r0, r3
   133fe:	4b6f      	ldr	r3, [pc, #444]	; (135bc <vWifiTask+0x264>)
   13400:	4798      	blx	r3
     }
 
     SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   13402:	4b6f      	ldr	r3, [pc, #444]	; (135c0 <vWifiTask+0x268>)
   13404:	0018      	movs	r0, r3
   13406:	4b6d      	ldr	r3, [pc, #436]	; (135bc <vWifiTask+0x264>)
   13408:	4798      	blx	r3
     /* Initialize the Timer. */
     configure_timer();
   1340a:	4b6e      	ldr	r3, [pc, #440]	; (135c4 <vWifiTask+0x26c>)
   1340c:	4798      	blx	r3
 
     /* Initialize the HTTP client service. */
     configure_http_client();
   1340e:	4b6e      	ldr	r3, [pc, #440]	; (135c8 <vWifiTask+0x270>)
   13410:	4798      	blx	r3
 
     /* Initialize the MQTT service. */
     configure_mqtt();
   13412:	4b6e      	ldr	r3, [pc, #440]	; (135cc <vWifiTask+0x274>)
   13414:	4798      	blx	r3
 
     /* Initialize SD/MMC storage. */
     init_storage();
   13416:	4b6e      	ldr	r3, [pc, #440]	; (135d0 <vWifiTask+0x278>)
   13418:	4798      	blx	r3
 
     /*Initialize BUTTON 0 as an external interrupt*/
     configure_extint_channel();
   1341a:	4b6e      	ldr	r3, [pc, #440]	; (135d4 <vWifiTask+0x27c>)
   1341c:	4798      	blx	r3
     configure_extint_callbacks();
   1341e:	4b6e      	ldr	r3, [pc, #440]	; (135d8 <vWifiTask+0x280>)
   13420:	4798      	blx	r3
 
     /* Initialize Wi-Fi parameters structure. */
     memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   13422:	230c      	movs	r3, #12
   13424:	18fb      	adds	r3, r7, r3
   13426:	2218      	movs	r2, #24
   13428:	2100      	movs	r1, #0
   1342a:	0018      	movs	r0, r3
   1342c:	4b6b      	ldr	r3, [pc, #428]	; (135dc <vWifiTask+0x284>)
   1342e:	4798      	blx	r3
 
     nm_bsp_init();
   13430:	4b6b      	ldr	r3, [pc, #428]	; (135e0 <vWifiTask+0x288>)
   13432:	4798      	blx	r3
 
     /* Initialize Wi-Fi driver with data and status callbacks. */
     param.pfAppWifiCb = wifi_cb;
   13434:	230c      	movs	r3, #12
   13436:	18fb      	adds	r3, r7, r3
   13438:	4a6a      	ldr	r2, [pc, #424]	; (135e4 <vWifiTask+0x28c>)
   1343a:	601a      	str	r2, [r3, #0]
     ret = m2m_wifi_init(&param);
   1343c:	2327      	movs	r3, #39	; 0x27
   1343e:	18fc      	adds	r4, r7, r3
   13440:	230c      	movs	r3, #12
   13442:	18fb      	adds	r3, r7, r3
   13444:	0018      	movs	r0, r3
   13446:	4b68      	ldr	r3, [pc, #416]	; (135e8 <vWifiTask+0x290>)
   13448:	4798      	blx	r3
   1344a:	0003      	movs	r3, r0
   1344c:	7023      	strb	r3, [r4, #0]
     if (M2M_SUCCESS != ret) {
   1344e:	2327      	movs	r3, #39	; 0x27
   13450:	18fb      	adds	r3, r7, r3
   13452:	781b      	ldrb	r3, [r3, #0]
   13454:	b25b      	sxtb	r3, r3
   13456:	2b00      	cmp	r3, #0
   13458:	d009      	beq.n	1346e <vWifiTask+0x116>
         LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1345a:	2327      	movs	r3, #39	; 0x27
   1345c:	18fb      	adds	r3, r7, r3
   1345e:	2200      	movs	r2, #0
   13460:	569a      	ldrsb	r2, [r3, r2]
   13462:	4b62      	ldr	r3, [pc, #392]	; (135ec <vWifiTask+0x294>)
   13464:	0019      	movs	r1, r3
   13466:	2001      	movs	r0, #1
   13468:	4b61      	ldr	r3, [pc, #388]	; (135f0 <vWifiTask+0x298>)
   1346a:	4798      	blx	r3
         while (1) {
   1346c:	e7fe      	b.n	1346c <vWifiTask+0x114>
         }
     }
 
     LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1346e:	4a61      	ldr	r2, [pc, #388]	; (135f4 <vWifiTask+0x29c>)
   13470:	4b61      	ldr	r3, [pc, #388]	; (135f8 <vWifiTask+0x2a0>)
   13472:	0019      	movs	r1, r3
   13474:	2001      	movs	r0, #1
   13476:	4b5e      	ldr	r3, [pc, #376]	; (135f0 <vWifiTask+0x298>)
   13478:	4798      	blx	r3
 
     // Re-enable socket for MQTT Transfer
     socketInit();
   1347a:	4b60      	ldr	r3, [pc, #384]	; (135fc <vWifiTask+0x2a4>)
   1347c:	4798      	blx	r3
     registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1347e:	4a60      	ldr	r2, [pc, #384]	; (13600 <vWifiTask+0x2a8>)
   13480:	4b60      	ldr	r3, [pc, #384]	; (13604 <vWifiTask+0x2ac>)
   13482:	0011      	movs	r1, r2
   13484:	0018      	movs	r0, r3
   13486:	4b60      	ldr	r3, [pc, #384]	; (13608 <vWifiTask+0x2b0>)
   13488:	4798      	blx	r3
 
     m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1348a:	4a60      	ldr	r2, [pc, #384]	; (1360c <vWifiTask+0x2b4>)
   1348c:	4859      	ldr	r0, [pc, #356]	; (135f4 <vWifiTask+0x29c>)
   1348e:	23ff      	movs	r3, #255	; 0xff
   13490:	9300      	str	r3, [sp, #0]
   13492:	0013      	movs	r3, r2
   13494:	2202      	movs	r2, #2
   13496:	210b      	movs	r1, #11
   13498:	4c5d      	ldr	r4, [pc, #372]	; (13610 <vWifiTask+0x2b8>)
   1349a:	47a0      	blx	r4
 
     while (!(is_state_set(WIFI_CONNECTED))) {
   1349c:	e006      	b.n	134ac <vWifiTask+0x154>
         /* Handle pending events from network controller. */
         m2m_wifi_handle_events(NULL);
   1349e:	2000      	movs	r0, #0
   134a0:	4b5c      	ldr	r3, [pc, #368]	; (13614 <vWifiTask+0x2bc>)
   134a2:	4798      	blx	r3
         /* Checks the timer timeout. */
         sw_timer_task(&swt_module_inst);
   134a4:	4b5c      	ldr	r3, [pc, #368]	; (13618 <vWifiTask+0x2c0>)
   134a6:	0018      	movs	r0, r3
   134a8:	4b5c      	ldr	r3, [pc, #368]	; (1361c <vWifiTask+0x2c4>)
   134aa:	4798      	blx	r3
     while (!(is_state_set(WIFI_CONNECTED))) {
   134ac:	2002      	movs	r0, #2
   134ae:	4b5c      	ldr	r3, [pc, #368]	; (13620 <vWifiTask+0x2c8>)
   134b0:	4798      	blx	r3
   134b2:	0003      	movs	r3, r0
   134b4:	001a      	movs	r2, r3
   134b6:	2301      	movs	r3, #1
   134b8:	4053      	eors	r3, r2
   134ba:	b2db      	uxtb	r3, r3
   134bc:	2b00      	cmp	r3, #0
   134be:	d1ee      	bne.n	1349e <vWifiTask+0x146>
     }
 
     vTaskDelay(1000);
   134c0:	23fa      	movs	r3, #250	; 0xfa
   134c2:	009b      	lsls	r3, r3, #2
   134c4:	0018      	movs	r0, r3
   134c6:	4b33      	ldr	r3, [pc, #204]	; (13594 <vWifiTask+0x23c>)
   134c8:	4798      	blx	r3
 
     wifiStateMachine = WIFI_MQTT_HANDLE;
   134ca:	4b56      	ldr	r3, [pc, #344]	; (13624 <vWifiTask+0x2cc>)
   134cc:	2201      	movs	r2, #1
   134ce:	701a      	strb	r2, [r3, #0]
 
     // Define a local static variable to remember the button state from the previous loop
     static bool oldIsPressed = false;
 
     while (1) {
         switch (wifiStateMachine) {
   134d0:	4b54      	ldr	r3, [pc, #336]	; (13624 <vWifiTask+0x2cc>)
   134d2:	781b      	ldrb	r3, [r3, #0]
   134d4:	b25b      	sxtb	r3, r3
   134d6:	2b01      	cmp	r3, #1
   134d8:	d00b      	beq.n	134f2 <vWifiTask+0x19a>
   134da:	dc02      	bgt.n	134e2 <vWifiTask+0x18a>
   134dc:	2b00      	cmp	r3, #0
   134de:	d005      	beq.n	134ec <vWifiTask+0x194>
   134e0:	e010      	b.n	13504 <vWifiTask+0x1ac>
   134e2:	2b02      	cmp	r3, #2
   134e4:	d008      	beq.n	134f8 <vWifiTask+0x1a0>
   134e6:	2b03      	cmp	r3, #3
   134e8:	d009      	beq.n	134fe <vWifiTask+0x1a6>
   134ea:	e00b      	b.n	13504 <vWifiTask+0x1ac>
             case (WIFI_MQTT_INIT): {
                 MQTT_InitRoutine();
   134ec:	4b4e      	ldr	r3, [pc, #312]	; (13628 <vWifiTask+0x2d0>)
   134ee:	4798      	blx	r3
 
                 break;
   134f0:	e00c      	b.n	1350c <vWifiTask+0x1b4>
             }
 
             case (WIFI_MQTT_HANDLE): {
                 MQTT_HandleTransactions();
   134f2:	4b4e      	ldr	r3, [pc, #312]	; (1362c <vWifiTask+0x2d4>)
   134f4:	4798      	blx	r3
                 break;
   134f6:	e009      	b.n	1350c <vWifiTask+0x1b4>
             }
 
             case (WIFI_DOWNLOAD_INIT): {
                 HTTP_DownloadFileInit();
   134f8:	4b4d      	ldr	r3, [pc, #308]	; (13630 <vWifiTask+0x2d8>)
   134fa:	4798      	blx	r3
                 break;
   134fc:	e006      	b.n	1350c <vWifiTask+0x1b4>
             }
 
             case (WIFI_DOWNLOAD_HANDLE): {
                 HTTP_DownloadFileTransaction();
   134fe:	4b4d      	ldr	r3, [pc, #308]	; (13634 <vWifiTask+0x2dc>)
   13500:	4798      	blx	r3
                 break;
   13502:	e003      	b.n	1350c <vWifiTask+0x1b4>
             }
 
             default:
                 wifiStateMachine = WIFI_MQTT_INIT;
   13504:	4b47      	ldr	r3, [pc, #284]	; (13624 <vWifiTask+0x2cc>)
   13506:	2200      	movs	r2, #0
   13508:	701a      	strb	r2, [r3, #0]
                 break;
   1350a:	46c0      	nop			; (mov r8, r8)
         }
         // Check if a new state was called
         uint8_t DataToReceive = 0;
   1350c:	230b      	movs	r3, #11
   1350e:	18fb      	adds	r3, r7, r3
   13510:	2200      	movs	r2, #0
   13512:	701a      	strb	r2, [r3, #0]
         if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   13514:	4b22      	ldr	r3, [pc, #136]	; (135a0 <vWifiTask+0x248>)
   13516:	681b      	ldr	r3, [r3, #0]
   13518:	220b      	movs	r2, #11
   1351a:	18b9      	adds	r1, r7, r2
   1351c:	2200      	movs	r2, #0
   1351e:	0018      	movs	r0, r3
   13520:	4b45      	ldr	r3, [pc, #276]	; (13638 <vWifiTask+0x2e0>)
   13522:	4798      	blx	r3
   13524:	0003      	movs	r3, r0
   13526:	2b01      	cmp	r3, #1
   13528:	d105      	bne.n	13536 <vWifiTask+0x1de>
             wifiStateMachine = DataToReceive;  // Update new state
   1352a:	230b      	movs	r3, #11
   1352c:	18fb      	adds	r3, r7, r3
   1352e:	781b      	ldrb	r3, [r3, #0]
   13530:	b25a      	sxtb	r2, r3
   13532:	4b3c      	ldr	r3, [pc, #240]	; (13624 <vWifiTask+0x2cc>)
   13534:	701a      	strb	r2, [r3, #0]
         }
 
         // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
         bool currentIsPressed = isPressed; // isPressed is updated by the interrupt callback, representing the real-time physical button state
   13536:	2326      	movs	r3, #38	; 0x26
   13538:	18fb      	adds	r3, r7, r3
   1353a:	4a40      	ldr	r2, [pc, #256]	; (1363c <vWifiTask+0x2e4>)
   1353c:	7812      	ldrb	r2, [r2, #0]
   1353e:	701a      	strb	r2, [r3, #0]
         if (currentIsPressed != oldIsPressed) {
   13540:	4b3f      	ldr	r3, [pc, #252]	; (13640 <vWifiTask+0x2e8>)
   13542:	781b      	ldrb	r3, [r3, #0]
   13544:	2226      	movs	r2, #38	; 0x26
   13546:	18ba      	adds	r2, r7, r2
   13548:	7812      	ldrb	r2, [r2, #0]
   1354a:	429a      	cmp	r2, r3
   1354c:	d01e      	beq.n	1358c <vWifiTask+0x234>
             // If not equal, it means the state just changed from "not pressed" to "pressed" or vice versa
             if (currentIsPressed) {
   1354e:	2326      	movs	r3, #38	; 0x26
   13550:	18fb      	adds	r3, r7, r3
   13552:	781b      	ldrb	r3, [r3, #0]
   13554:	2b00      	cmp	r3, #0
   13556:	d00a      	beq.n	1356e <vWifiTask+0x216>
                 // Button pressed: send "PRESSED"
                 mqtt_publish(&mqtt_inst, DEBUG_BUTTON_TOPIC, "PRESSED", 
   13558:	4a3a      	ldr	r2, [pc, #232]	; (13644 <vWifiTask+0x2ec>)
   1355a:	493b      	ldr	r1, [pc, #236]	; (13648 <vWifiTask+0x2f0>)
   1355c:	483b      	ldr	r0, [pc, #236]	; (1364c <vWifiTask+0x2f4>)
   1355e:	2300      	movs	r3, #0
   13560:	9301      	str	r3, [sp, #4]
   13562:	2301      	movs	r3, #1
   13564:	9300      	str	r3, [sp, #0]
   13566:	2307      	movs	r3, #7
   13568:	4c39      	ldr	r4, [pc, #228]	; (13650 <vWifiTask+0x2f8>)
   1356a:	47a0      	blx	r4
   1356c:	e009      	b.n	13582 <vWifiTask+0x22a>
                             strlen("PRESSED"), 1, 0);
             } else {
                 // Button released: send "RELEASED"
                 mqtt_publish(&mqtt_inst, DEBUG_BUTTON_TOPIC, "RELEASED",
   1356e:	4a39      	ldr	r2, [pc, #228]	; (13654 <vWifiTask+0x2fc>)
   13570:	4935      	ldr	r1, [pc, #212]	; (13648 <vWifiTask+0x2f0>)
   13572:	4836      	ldr	r0, [pc, #216]	; (1364c <vWifiTask+0x2f4>)
   13574:	2300      	movs	r3, #0
   13576:	9301      	str	r3, [sp, #4]
   13578:	2301      	movs	r3, #1
   1357a:	9300      	str	r3, [sp, #0]
   1357c:	2308      	movs	r3, #8
   1357e:	4c34      	ldr	r4, [pc, #208]	; (13650 <vWifiTask+0x2f8>)
   13580:	47a0      	blx	r4
                             strlen("RELEASED"), 1, 0);
             }
             // Save the current state for comparison in the next loop
             oldIsPressed = currentIsPressed;
   13582:	4b2f      	ldr	r3, [pc, #188]	; (13640 <vWifiTask+0x2e8>)
   13584:	2226      	movs	r2, #38	; 0x26
   13586:	18ba      	adds	r2, r7, r2
   13588:	7812      	ldrb	r2, [r2, #0]
   1358a:	701a      	strb	r2, [r3, #0]
         }
         vTaskDelay(100);
   1358c:	2064      	movs	r0, #100	; 0x64
   1358e:	4b01      	ldr	r3, [pc, #4]	; (13594 <vWifiTask+0x23c>)
   13590:	4798      	blx	r3
     while (1) {
   13592:	e79d      	b.n	134d0 <vWifiTask+0x178>
   13594:	00018a05 	.word	0x00018a05
   13598:	00011b9d 	.word	0x00011b9d
   1359c:	00016cf9 	.word	0x00016cf9
   135a0:	20000480 	.word	0x20000480
   135a4:	20000488 	.word	0x20000488
   135a8:	20000484 	.word	0x20000484
   135ac:	2000048c 	.word	0x2000048c
   135b0:	20000490 	.word	0x20000490
   135b4:	20000494 	.word	0x20000494
   135b8:	00034db8 	.word	0x00034db8
   135bc:	0001a691 	.word	0x0001a691
   135c0:	00034de0 	.word	0x00034de0
   135c4:	000125dd 	.word	0x000125dd
   135c8:	00012619 	.word	0x00012619
   135cc:	00012c91 	.word	0x00012c91
   135d0:	000124f9 	.word	0x000124f9
   135d4:	00012d49 	.word	0x00012d49
   135d8:	00012d89 	.word	0x00012d89
   135dc:	000328a7 	.word	0x000328a7
   135e0:	0001cbc9 	.word	0x0001cbc9
   135e4:	000123a5 	.word	0x000123a5
   135e8:	0001e6a1 	.word	0x0001e6a1
   135ec:	00034dfc 	.word	0x00034dfc
   135f0:	0001a761 	.word	0x0001a761
   135f4:	0003482c 	.word	0x0003482c
   135f8:	00034e28 	.word	0x00034e28
   135fc:	00021e01 	.word	0x00021e01
   13600:	000126cd 	.word	0x000126cd
   13604:	00012699 	.word	0x00012699
   13608:	00021e99 	.word	0x00021e99
   1360c:	00034820 	.word	0x00034820
   13610:	0001e8b1 	.word	0x0001e8b1
   13614:	0001e895 	.word	0x0001e895
   13618:	20004360 	.word	0x20004360
   1361c:	0002fa0d 	.word	0x0002fa0d
   13620:	00011c0d 	.word	0x00011c0d
   13624:	2000047c 	.word	0x2000047c
   13628:	00012f85 	.word	0x00012f85
   1362c:	00013021 	.word	0x00013021
   13630:	00012df5 	.word	0x00012df5
   13634:	00012e89 	.word	0x00012e89
   13638:	00017859 	.word	0x00017859
   1363c:	20000b32 	.word	0x20000b32
   13640:	20000b33 	.word	0x20000b33
   13644:	00034e4c 	.word	0x00034e4c
   13648:	00034e54 	.word	0x00034e54
   1364c:	200006f8 	.word	0x200006f8
   13650:	0002cd2d 	.word	0x0002cd2d
   13654:	00034e68 	.word	0x00034e68

00013658 <WifiHandlerSetState>:
     }
     return;
 }
 
 void WifiHandlerSetState(uint8_t state)
 {
   13658:	b590      	push	{r4, r7, lr}
   1365a:	b083      	sub	sp, #12
   1365c:	af00      	add	r7, sp, #0
   1365e:	0002      	movs	r2, r0
   13660:	1dfb      	adds	r3, r7, #7
   13662:	701a      	strb	r2, [r3, #0]
     if (state <= WIFI_DOWNLOAD_HANDLE) {
   13664:	1dfb      	adds	r3, r7, #7
   13666:	781b      	ldrb	r3, [r3, #0]
   13668:	2b03      	cmp	r3, #3
   1366a:	d806      	bhi.n	1367a <WifiHandlerSetState+0x22>
         xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   1366c:	4b05      	ldr	r3, [pc, #20]	; (13684 <WifiHandlerSetState+0x2c>)
   1366e:	6818      	ldr	r0, [r3, #0]
   13670:	1df9      	adds	r1, r7, #7
   13672:	2300      	movs	r3, #0
   13674:	220a      	movs	r2, #10
   13676:	4c04      	ldr	r4, [pc, #16]	; (13688 <WifiHandlerSetState+0x30>)
   13678:	47a0      	blx	r4
     }
 }
   1367a:	46c0      	nop			; (mov r8, r8)
   1367c:	46bd      	mov	sp, r7
   1367e:	b003      	add	sp, #12
   13680:	bd90      	pop	{r4, r7, pc}
   13682:	46c0      	nop			; (mov r8, r8)
   13684:	20000480 	.word	0x20000480
   13688:	00016fa1 	.word	0x00016fa1

0001368c <WifiAddTemperatureToQueue>:
 /**
 * @brief  Enqueue a temperature value for later MQTT publishing.
 * @see    WifiAddTemperatureToQueue() declaration.
 */
int WifiAddTemperatureToQueue(float temperatureC)
{
   1368c:	b590      	push	{r4, r7, lr}
   1368e:	b083      	sub	sp, #12
   13690:	af00      	add	r7, sp, #0
   13692:	6078      	str	r0, [r7, #4]
    return xQueueSend(xQueueTempBuffer, &temperatureC, (TickType_t)10);
   13694:	4b05      	ldr	r3, [pc, #20]	; (136ac <WifiAddTemperatureToQueue+0x20>)
   13696:	6818      	ldr	r0, [r3, #0]
   13698:	1d39      	adds	r1, r7, #4
   1369a:	2300      	movs	r3, #0
   1369c:	220a      	movs	r2, #10
   1369e:	4c04      	ldr	r4, [pc, #16]	; (136b0 <WifiAddTemperatureToQueue+0x24>)
   136a0:	47a0      	blx	r4
   136a2:	0003      	movs	r3, r0
}
   136a4:	0018      	movs	r0, r3
   136a6:	46bd      	mov	sp, r7
   136a8:	b003      	add	sp, #12
   136aa:	bd90      	pop	{r4, r7, pc}
   136ac:	20000490 	.word	0x20000490
   136b0:	00016fa1 	.word	0x00016fa1

000136b4 <WifiAddIntensityToQueue>:
 * @brief  Queue a light-intensity reading for later MQTT publishing.
 *
 * See declaration in *WifiHandler.h* for full documentation.
 ******************************************************************************/
int WifiAddIntensityToQueue(int16_t intensity100)
{
   136b4:	b590      	push	{r4, r7, lr}
   136b6:	b083      	sub	sp, #12
   136b8:	af00      	add	r7, sp, #0
   136ba:	0002      	movs	r2, r0
   136bc:	1dbb      	adds	r3, r7, #6
   136be:	801a      	strh	r2, [r3, #0]
    return xQueueSend(xQueueIntensityBuffer, &intensity100, (TickType_t)10);
   136c0:	4b05      	ldr	r3, [pc, #20]	; (136d8 <WifiAddIntensityToQueue+0x24>)
   136c2:	6818      	ldr	r0, [r3, #0]
   136c4:	1db9      	adds	r1, r7, #6
   136c6:	2300      	movs	r3, #0
   136c8:	220a      	movs	r2, #10
   136ca:	4c04      	ldr	r4, [pc, #16]	; (136dc <WifiAddIntensityToQueue+0x28>)
   136cc:	47a0      	blx	r4
   136ce:	0003      	movs	r3, r0
}
   136d0:	0018      	movs	r0, r3
   136d2:	46bd      	mov	sp, r7
   136d4:	b003      	add	sp, #12
   136d6:	bd90      	pop	{r4, r7, pc}
   136d8:	20000494 	.word	0x20000494
   136dc:	00016fa1 	.word	0x00016fa1

000136e0 <WifiPublishResetNotification>:
 * @return `MQTT_SUCCESS` (0) on success, negative value on error.
 *
 * @note   Call this *before* invoking @c system_reset().
 */
int WifiPublishResetNotification(void)
{
   136e0:	b590      	push	{r4, r7, lr}
   136e2:	b085      	sub	sp, #20
   136e4:	af02      	add	r7, sp, #8
    const char *payload = "mcu_reset";
   136e6:	4b0b      	ldr	r3, [pc, #44]	; (13714 <WifiPublishResetNotification+0x34>)
   136e8:	607b      	str	r3, [r7, #4]
    return mqtt_publish(&mqtt_inst,RESET_MQTT_TOPIC,payload,strlen(payload),1, 0);  /* retain flag: false   */
   136ea:	687b      	ldr	r3, [r7, #4]
   136ec:	0018      	movs	r0, r3
   136ee:	4b0a      	ldr	r3, [pc, #40]	; (13718 <WifiPublishResetNotification+0x38>)
   136f0:	4798      	blx	r3
   136f2:	0004      	movs	r4, r0
   136f4:	687a      	ldr	r2, [r7, #4]
   136f6:	4909      	ldr	r1, [pc, #36]	; (1371c <WifiPublishResetNotification+0x3c>)
   136f8:	4809      	ldr	r0, [pc, #36]	; (13720 <WifiPublishResetNotification+0x40>)
   136fa:	2300      	movs	r3, #0
   136fc:	9301      	str	r3, [sp, #4]
   136fe:	2301      	movs	r3, #1
   13700:	9300      	str	r3, [sp, #0]
   13702:	0023      	movs	r3, r4
   13704:	4c07      	ldr	r4, [pc, #28]	; (13724 <WifiPublishResetNotification+0x44>)
   13706:	47a0      	blx	r4
   13708:	0003      	movs	r3, r0
}
   1370a:	0018      	movs	r0, r3
   1370c:	46bd      	mov	sp, r7
   1370e:	b003      	add	sp, #12
   13710:	bd90      	pop	{r4, r7, pc}
   13712:	46c0      	nop			; (mov r8, r8)
   13714:	00034e74 	.word	0x00034e74
   13718:	00032c5f 	.word	0x00032c5f
   1371c:	00034c34 	.word	0x00034c34
   13720:	200006f8 	.word	0x200006f8
   13724:	0002cd2d 	.word	0x0002cd2d

00013728 <WifiPublishFirmwareVersion>:
 *
 * @retval MQTT_SUCCESS (0) on success.
 * @retval Negative value               Error returned by @c mqtt_publish().
 ******************************************************************************/
int WifiPublishFirmwareVersion(void)
{
   13728:	b590      	push	{r4, r7, lr}
   1372a:	b083      	sub	sp, #12
   1372c:	af02      	add	r7, sp, #8
    return mqtt_publish(&mqtt_inst,
   1372e:	4a07      	ldr	r2, [pc, #28]	; (1374c <WifiPublishFirmwareVersion+0x24>)
   13730:	4907      	ldr	r1, [pc, #28]	; (13750 <WifiPublishFirmwareVersion+0x28>)
   13732:	4808      	ldr	r0, [pc, #32]	; (13754 <WifiPublishFirmwareVersion+0x2c>)
   13734:	2301      	movs	r3, #1
   13736:	9301      	str	r3, [sp, #4]
   13738:	2301      	movs	r3, #1
   1373a:	9300      	str	r3, [sp, #0]
   1373c:	2305      	movs	r3, #5
   1373e:	4c06      	ldr	r4, [pc, #24]	; (13758 <WifiPublishFirmwareVersion+0x30>)
   13740:	47a0      	blx	r4
   13742:	0003      	movs	r3, r0
                        FIRMWARE_MQTT_TOPIC,
                        FIRMWARE_VERSION,
                        strlen(FIRMWARE_VERSION),
                        1,   /* QoS 1 – at-least-once                    */
                        1);  /* retain so late subscribers get the value */
}
   13744:	0018      	movs	r0, r3
   13746:	46bd      	mov	sp, r7
   13748:	b001      	add	sp, #4
   1374a:	bd90      	pop	{r4, r7, pc}
   1374c:	00034e80 	.word	0x00034e80
   13750:	00034e88 	.word	0x00034e88
   13754:	200006f8 	.word	0x200006f8
   13758:	0002cd2d 	.word	0x0002cd2d

0001375c <WifiStartFirmwareUpdate>:
 * After download, the device will reset automatically.
 *
 * @note   Intended to be triggered either from MQTT commands or CLI commands.
 ******************************************************************************/
void WifiStartFirmwareUpdate(void)
{
   1375c:	b590      	push	{r4, r7, lr}
   1375e:	b083      	sub	sp, #12
   13760:	af00      	add	r7, sp, #0
    FRESULT fr;
    // Delete previous firmware files: application.bin and g_application.bin
    fr = f_unlink("0:/application.bin");
   13762:	1dfc      	adds	r4, r7, #7
   13764:	4b11      	ldr	r3, [pc, #68]	; (137ac <WifiStartFirmwareUpdate+0x50>)
   13766:	0018      	movs	r0, r3
   13768:	4b11      	ldr	r3, [pc, #68]	; (137b0 <WifiStartFirmwareUpdate+0x54>)
   1376a:	4798      	blx	r3
   1376c:	0003      	movs	r3, r0
   1376e:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK && fr != FR_NO_FILE) {
   13770:	1dfb      	adds	r3, r7, #7
   13772:	781b      	ldrb	r3, [r3, #0]
   13774:	2b00      	cmp	r3, #0
   13776:	d007      	beq.n	13788 <WifiStartFirmwareUpdate+0x2c>
   13778:	1dfb      	adds	r3, r7, #7
   1377a:	781b      	ldrb	r3, [r3, #0]
   1377c:	2b04      	cmp	r3, #4
   1377e:	d003      	beq.n	13788 <WifiStartFirmwareUpdate+0x2c>
        SerialConsoleWriteString("Warning: Failed to delete previous application.bin\r\n");
   13780:	4b0c      	ldr	r3, [pc, #48]	; (137b4 <WifiStartFirmwareUpdate+0x58>)
   13782:	0018      	movs	r0, r3
   13784:	4b0c      	ldr	r3, [pc, #48]	; (137b8 <WifiStartFirmwareUpdate+0x5c>)
   13786:	4798      	blx	r3
    }

    SerialConsoleWriteString("Starting firmware download via WifiHandler...\r\n");
   13788:	4b0c      	ldr	r3, [pc, #48]	; (137bc <WifiStartFirmwareUpdate+0x60>)
   1378a:	0018      	movs	r0, r3
   1378c:	4b0a      	ldr	r3, [pc, #40]	; (137b8 <WifiStartFirmwareUpdate+0x5c>)
   1378e:	4798      	blx	r3
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13790:	2002      	movs	r0, #2
   13792:	4b0b      	ldr	r3, [pc, #44]	; (137c0 <WifiStartFirmwareUpdate+0x64>)
   13794:	4798      	blx	r3
	
    SerialConsoleWriteString("Firmware download started. Once complete, device will reset.\r\n");
   13796:	4b0b      	ldr	r3, [pc, #44]	; (137c4 <WifiStartFirmwareUpdate+0x68>)
   13798:	0018      	movs	r0, r3
   1379a:	4b07      	ldr	r3, [pc, #28]	; (137b8 <WifiStartFirmwareUpdate+0x5c>)
   1379c:	4798      	blx	r3
    WifiHandlerSetState(WIFI_DOWNLOAD_HANDLE);
   1379e:	2003      	movs	r0, #3
   137a0:	4b07      	ldr	r3, [pc, #28]	; (137c0 <WifiStartFirmwareUpdate+0x64>)
   137a2:	4798      	blx	r3
}
   137a4:	46c0      	nop			; (mov r8, r8)
   137a6:	46bd      	mov	sp, r7
   137a8:	b003      	add	sp, #12
   137aa:	bd90      	pop	{r4, r7, pc}
   137ac:	00034e94 	.word	0x00034e94
   137b0:	0002b4a9 	.word	0x0002b4a9
   137b4:	00034ea8 	.word	0x00034ea8
   137b8:	0001a691 	.word	0x0001a691
   137bc:	00034ee0 	.word	0x00034ee0
   137c0:	00013659 	.word	0x00013659
   137c4:	00034f10 	.word	0x00034f10

000137c8 <WifiMakeGoldenImage>:
 * If the operation succeeds, a message is printed indicating successful creation.
 *
 * @note   Intended to be triggered either from MQTT commands or CLI commands.
 ******************************************************************************/
void WifiMakeGoldenImage(void)
{
   137c8:	b5b0      	push	{r4, r5, r7, lr}
   137ca:	b0d6      	sub	sp, #344	; 0x158
   137cc:	af00      	add	r7, sp, #0
    FRESULT fr;
    UINT br, bw;
    char copyBuffer[256];

    // Attempt to open "0:/application.bin" in read mode.
    fr = f_open(&srcFile, "0:/application.bin", FA_READ);
   137ce:	2358      	movs	r3, #88	; 0x58
   137d0:	33ff      	adds	r3, #255	; 0xff
   137d2:	18fc      	adds	r4, r7, r3
   137d4:	4954      	ldr	r1, [pc, #336]	; (13928 <WifiMakeGoldenImage+0x160>)
   137d6:	2398      	movs	r3, #152	; 0x98
   137d8:	005b      	lsls	r3, r3, #1
   137da:	18fb      	adds	r3, r7, r3
   137dc:	2201      	movs	r2, #1
   137de:	0018      	movs	r0, r3
   137e0:	4b52      	ldr	r3, [pc, #328]	; (1392c <WifiMakeGoldenImage+0x164>)
   137e2:	4798      	blx	r3
   137e4:	0003      	movs	r3, r0
   137e6:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK) {
   137e8:	2358      	movs	r3, #88	; 0x58
   137ea:	33ff      	adds	r3, #255	; 0xff
   137ec:	18fb      	adds	r3, r7, r3
   137ee:	781b      	ldrb	r3, [r3, #0]
   137f0:	2b00      	cmp	r3, #0
   137f2:	d004      	beq.n	137fe <WifiMakeGoldenImage+0x36>
		SerialConsoleWriteString("Error: Could not open application.bin\r\n");
   137f4:	4b4e      	ldr	r3, [pc, #312]	; (13930 <WifiMakeGoldenImage+0x168>)
   137f6:	0018      	movs	r0, r3
   137f8:	4b4e      	ldr	r3, [pc, #312]	; (13934 <WifiMakeGoldenImage+0x16c>)
   137fa:	4798      	blx	r3
	    return;
   137fc:	e090      	b.n	13920 <WifiMakeGoldenImage+0x158>
    }

    // Delete existing "0:/g_application.bin" if it exists.
    fr = f_unlink("0:/g_application.bin");
   137fe:	2358      	movs	r3, #88	; 0x58
   13800:	33ff      	adds	r3, #255	; 0xff
   13802:	18fc      	adds	r4, r7, r3
   13804:	4b4c      	ldr	r3, [pc, #304]	; (13938 <WifiMakeGoldenImage+0x170>)
   13806:	0018      	movs	r0, r3
   13808:	4b4c      	ldr	r3, [pc, #304]	; (1393c <WifiMakeGoldenImage+0x174>)
   1380a:	4798      	blx	r3
   1380c:	0003      	movs	r3, r0
   1380e:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK && fr != FR_NO_FILE) {
   13810:	2358      	movs	r3, #88	; 0x58
   13812:	33ff      	adds	r3, #255	; 0xff
   13814:	18fb      	adds	r3, r7, r3
   13816:	781b      	ldrb	r3, [r3, #0]
   13818:	2b00      	cmp	r3, #0
   1381a:	d009      	beq.n	13830 <WifiMakeGoldenImage+0x68>
   1381c:	2358      	movs	r3, #88	; 0x58
   1381e:	33ff      	adds	r3, #255	; 0xff
   13820:	18fb      	adds	r3, r7, r3
   13822:	781b      	ldrb	r3, [r3, #0]
   13824:	2b04      	cmp	r3, #4
   13826:	d003      	beq.n	13830 <WifiMakeGoldenImage+0x68>
	    SerialConsoleWriteString("Warning: Could not delete previous g_application.bin\r\n");
   13828:	4b45      	ldr	r3, [pc, #276]	; (13940 <WifiMakeGoldenImage+0x178>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b41      	ldr	r3, [pc, #260]	; (13934 <WifiMakeGoldenImage+0x16c>)
   1382e:	4798      	blx	r3
    }

    // Create or overwrite "0:/g_application.bin".
    fr = f_open(&dstFile, "0:/g_application.bin", FA_CREATE_ALWAYS | FA_WRITE);
   13830:	2358      	movs	r3, #88	; 0x58
   13832:	33ff      	adds	r3, #255	; 0xff
   13834:	18fc      	adds	r4, r7, r3
   13836:	4940      	ldr	r1, [pc, #256]	; (13938 <WifiMakeGoldenImage+0x170>)
   13838:	2386      	movs	r3, #134	; 0x86
   1383a:	005b      	lsls	r3, r3, #1
   1383c:	18fb      	adds	r3, r7, r3
   1383e:	220a      	movs	r2, #10
   13840:	0018      	movs	r0, r3
   13842:	4b3a      	ldr	r3, [pc, #232]	; (1392c <WifiMakeGoldenImage+0x164>)
   13844:	4798      	blx	r3
   13846:	0003      	movs	r3, r0
   13848:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK) {
   1384a:	2358      	movs	r3, #88	; 0x58
   1384c:	33ff      	adds	r3, #255	; 0xff
   1384e:	18fb      	adds	r3, r7, r3
   13850:	781b      	ldrb	r3, [r3, #0]
   13852:	2b00      	cmp	r3, #0
   13854:	d00a      	beq.n	1386c <WifiMakeGoldenImage+0xa4>
	    f_close(&srcFile);
   13856:	2398      	movs	r3, #152	; 0x98
   13858:	005b      	lsls	r3, r3, #1
   1385a:	18fb      	adds	r3, r7, r3
   1385c:	0018      	movs	r0, r3
   1385e:	4b39      	ldr	r3, [pc, #228]	; (13944 <WifiMakeGoldenImage+0x17c>)
   13860:	4798      	blx	r3
		SerialConsoleWriteString("Error: Could not create g_application.bin\r\n");
   13862:	4b39      	ldr	r3, [pc, #228]	; (13948 <WifiMakeGoldenImage+0x180>)
   13864:	0018      	movs	r0, r3
   13866:	4b33      	ldr	r3, [pc, #204]	; (13934 <WifiMakeGoldenImage+0x16c>)
   13868:	4798      	blx	r3
	    return;
   1386a:	e059      	b.n	13920 <WifiMakeGoldenImage+0x158>
    }

    // Copy in chunks of 256 bytes.
    for (;;) {
	    fr = f_read(&srcFile, copyBuffer, sizeof(copyBuffer), &br);
   1386c:	2358      	movs	r3, #88	; 0x58
   1386e:	33ff      	adds	r3, #255	; 0xff
   13870:	18fc      	adds	r4, r7, r3
   13872:	2384      	movs	r3, #132	; 0x84
   13874:	005b      	lsls	r3, r3, #1
   13876:	18fd      	adds	r5, r7, r3
   13878:	2380      	movs	r3, #128	; 0x80
   1387a:	005a      	lsls	r2, r3, #1
   1387c:	1d39      	adds	r1, r7, #4
   1387e:	2398      	movs	r3, #152	; 0x98
   13880:	005b      	lsls	r3, r3, #1
   13882:	18f8      	adds	r0, r7, r3
   13884:	002b      	movs	r3, r5
   13886:	4d31      	ldr	r5, [pc, #196]	; (1394c <WifiMakeGoldenImage+0x184>)
   13888:	47a8      	blx	r5
   1388a:	0003      	movs	r3, r0
   1388c:	7023      	strb	r3, [r4, #0]
	    if (fr != FR_OK || br == 0) {
   1388e:	2358      	movs	r3, #88	; 0x58
   13890:	33ff      	adds	r3, #255	; 0xff
   13892:	18fb      	adds	r3, r7, r3
   13894:	781b      	ldrb	r3, [r3, #0]
   13896:	2b00      	cmp	r3, #0
   13898:	d126      	bne.n	138e8 <WifiMakeGoldenImage+0x120>
   1389a:	2384      	movs	r3, #132	; 0x84
   1389c:	005b      	lsls	r3, r3, #1
   1389e:	18fb      	adds	r3, r7, r3
   138a0:	681b      	ldr	r3, [r3, #0]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d020      	beq.n	138e8 <WifiMakeGoldenImage+0x120>
		    // Either an error or EOF reached
		    break;
	    }
	    fr = f_write(&dstFile, copyBuffer, br, &bw);
   138a6:	2384      	movs	r3, #132	; 0x84
   138a8:	005b      	lsls	r3, r3, #1
   138aa:	18fb      	adds	r3, r7, r3
   138ac:	681a      	ldr	r2, [r3, #0]
   138ae:	2358      	movs	r3, #88	; 0x58
   138b0:	33ff      	adds	r3, #255	; 0xff
   138b2:	18fc      	adds	r4, r7, r3
   138b4:	1d7b      	adds	r3, r7, #5
   138b6:	33ff      	adds	r3, #255	; 0xff
   138b8:	1d39      	adds	r1, r7, #4
   138ba:	2086      	movs	r0, #134	; 0x86
   138bc:	0040      	lsls	r0, r0, #1
   138be:	1838      	adds	r0, r7, r0
   138c0:	4d23      	ldr	r5, [pc, #140]	; (13950 <WifiMakeGoldenImage+0x188>)
   138c2:	47a8      	blx	r5
   138c4:	0003      	movs	r3, r0
   138c6:	7023      	strb	r3, [r4, #0]
	    if (fr != FR_OK || bw < br) {
   138c8:	2358      	movs	r3, #88	; 0x58
   138ca:	33ff      	adds	r3, #255	; 0xff
   138cc:	18fb      	adds	r3, r7, r3
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	2b00      	cmp	r3, #0
   138d2:	d109      	bne.n	138e8 <WifiMakeGoldenImage+0x120>
   138d4:	1d7b      	adds	r3, r7, #5
   138d6:	33ff      	adds	r3, #255	; 0xff
   138d8:	681a      	ldr	r2, [r3, #0]
   138da:	2384      	movs	r3, #132	; 0x84
   138dc:	005b      	lsls	r3, r3, #1
   138de:	18fb      	adds	r3, r7, r3
   138e0:	681b      	ldr	r3, [r3, #0]
   138e2:	429a      	cmp	r2, r3
   138e4:	d300      	bcc.n	138e8 <WifiMakeGoldenImage+0x120>
	    fr = f_read(&srcFile, copyBuffer, sizeof(copyBuffer), &br);
   138e6:	e7c1      	b.n	1386c <WifiMakeGoldenImage+0xa4>
		    // Error writing to file
		    break;
	    }
    }
    f_close(&srcFile);
   138e8:	2398      	movs	r3, #152	; 0x98
   138ea:	005b      	lsls	r3, r3, #1
   138ec:	18fb      	adds	r3, r7, r3
   138ee:	0018      	movs	r0, r3
   138f0:	4b14      	ldr	r3, [pc, #80]	; (13944 <WifiMakeGoldenImage+0x17c>)
   138f2:	4798      	blx	r3
    f_close(&dstFile);
   138f4:	2386      	movs	r3, #134	; 0x86
   138f6:	005b      	lsls	r3, r3, #1
   138f8:	18fb      	adds	r3, r7, r3
   138fa:	0018      	movs	r0, r3
   138fc:	4b11      	ldr	r3, [pc, #68]	; (13944 <WifiMakeGoldenImage+0x17c>)
   138fe:	4798      	blx	r3

    if (fr == FR_OK) {
   13900:	2358      	movs	r3, #88	; 0x58
   13902:	33ff      	adds	r3, #255	; 0xff
   13904:	18fb      	adds	r3, r7, r3
   13906:	781b      	ldrb	r3, [r3, #0]
   13908:	2b00      	cmp	r3, #0
   1390a:	d104      	bne.n	13916 <WifiMakeGoldenImage+0x14e>
	    SerialConsoleWriteString("Golden Image Created: g_application.bin\r\n");
   1390c:	4b11      	ldr	r3, [pc, #68]	; (13954 <WifiMakeGoldenImage+0x18c>)
   1390e:	0018      	movs	r0, r3
   13910:	4b08      	ldr	r3, [pc, #32]	; (13934 <WifiMakeGoldenImage+0x16c>)
   13912:	4798      	blx	r3
	} else {
	    SerialConsoleWriteString("Error copying to g_application.bin\r\n");
    }

    return;
   13914:	e004      	b.n	13920 <WifiMakeGoldenImage+0x158>
	    SerialConsoleWriteString("Error copying to g_application.bin\r\n");
   13916:	4b10      	ldr	r3, [pc, #64]	; (13958 <WifiMakeGoldenImage+0x190>)
   13918:	0018      	movs	r0, r3
   1391a:	4b06      	ldr	r3, [pc, #24]	; (13934 <WifiMakeGoldenImage+0x16c>)
   1391c:	4798      	blx	r3
    return;
   1391e:	46c0      	nop			; (mov r8, r8)
}
   13920:	46bd      	mov	sp, r7
   13922:	b056      	add	sp, #344	; 0x158
   13924:	bdb0      	pop	{r4, r5, r7, pc}
   13926:	46c0      	nop			; (mov r8, r8)
   13928:	00034e94 	.word	0x00034e94
   1392c:	0002a7d1 	.word	0x0002a7d1
   13930:	00034f50 	.word	0x00034f50
   13934:	0001a691 	.word	0x0001a691
   13938:	00034f78 	.word	0x00034f78
   1393c:	0002b4a9 	.word	0x0002b4a9
   13940:	00034f90 	.word	0x00034f90
   13944:	0002b46d 	.word	0x0002b46d
   13948:	00034fc8 	.word	0x00034fc8
   1394c:	0002ad01 	.word	0x0002ad01
   13950:	0002af9d 	.word	0x0002af9d
   13954:	00034ff4 	.word	0x00034ff4
   13958:	00035020 	.word	0x00035020

0001395c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1395c:	b580      	push	{r7, lr}
   1395e:	b082      	sub	sp, #8
   13960:	af00      	add	r7, sp, #0
   13962:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   13964:	687b      	ldr	r3, [r7, #4]
   13966:	2200      	movs	r2, #0
   13968:	701a      	strb	r2, [r3, #0]
}
   1396a:	46c0      	nop			; (mov r8, r8)
   1396c:	46bd      	mov	sp, r7
   1396e:	b002      	add	sp, #8
   13970:	bd80      	pop	{r7, pc}
	...

00013974 <system_apb_clock_set_mask>:
{
   13974:	b580      	push	{r7, lr}
   13976:	b082      	sub	sp, #8
   13978:	af00      	add	r7, sp, #0
   1397a:	0002      	movs	r2, r0
   1397c:	6039      	str	r1, [r7, #0]
   1397e:	1dfb      	adds	r3, r7, #7
   13980:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13982:	1dfb      	adds	r3, r7, #7
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	2b01      	cmp	r3, #1
   13988:	d00a      	beq.n	139a0 <system_apb_clock_set_mask+0x2c>
   1398a:	2b02      	cmp	r3, #2
   1398c:	d00f      	beq.n	139ae <system_apb_clock_set_mask+0x3a>
   1398e:	2b00      	cmp	r3, #0
   13990:	d114      	bne.n	139bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   13992:	4b0e      	ldr	r3, [pc, #56]	; (139cc <system_apb_clock_set_mask+0x58>)
   13994:	4a0d      	ldr	r2, [pc, #52]	; (139cc <system_apb_clock_set_mask+0x58>)
   13996:	6991      	ldr	r1, [r2, #24]
   13998:	683a      	ldr	r2, [r7, #0]
   1399a:	430a      	orrs	r2, r1
   1399c:	619a      	str	r2, [r3, #24]
			break;
   1399e:	e00f      	b.n	139c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   139a0:	4b0a      	ldr	r3, [pc, #40]	; (139cc <system_apb_clock_set_mask+0x58>)
   139a2:	4a0a      	ldr	r2, [pc, #40]	; (139cc <system_apb_clock_set_mask+0x58>)
   139a4:	69d1      	ldr	r1, [r2, #28]
   139a6:	683a      	ldr	r2, [r7, #0]
   139a8:	430a      	orrs	r2, r1
   139aa:	61da      	str	r2, [r3, #28]
			break;
   139ac:	e008      	b.n	139c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   139ae:	4b07      	ldr	r3, [pc, #28]	; (139cc <system_apb_clock_set_mask+0x58>)
   139b0:	4a06      	ldr	r2, [pc, #24]	; (139cc <system_apb_clock_set_mask+0x58>)
   139b2:	6a11      	ldr	r1, [r2, #32]
   139b4:	683a      	ldr	r2, [r7, #0]
   139b6:	430a      	orrs	r2, r1
   139b8:	621a      	str	r2, [r3, #32]
			break;
   139ba:	e001      	b.n	139c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   139bc:	2317      	movs	r3, #23
   139be:	e000      	b.n	139c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   139c0:	2300      	movs	r3, #0
}
   139c2:	0018      	movs	r0, r3
   139c4:	46bd      	mov	sp, r7
   139c6:	b002      	add	sp, #8
   139c8:	bd80      	pop	{r7, pc}
   139ca:	46c0      	nop			; (mov r8, r8)
   139cc:	40000400 	.word	0x40000400

000139d0 <system_pinmux_get_config_defaults>:
{
   139d0:	b580      	push	{r7, lr}
   139d2:	b082      	sub	sp, #8
   139d4:	af00      	add	r7, sp, #0
   139d6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   139d8:	687b      	ldr	r3, [r7, #4]
   139da:	2280      	movs	r2, #128	; 0x80
   139dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   139de:	687b      	ldr	r3, [r7, #4]
   139e0:	2200      	movs	r2, #0
   139e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   139e4:	687b      	ldr	r3, [r7, #4]
   139e6:	2201      	movs	r2, #1
   139e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   139ea:	687b      	ldr	r3, [r7, #4]
   139ec:	2200      	movs	r2, #0
   139ee:	70da      	strb	r2, [r3, #3]
}
   139f0:	46c0      	nop			; (mov r8, r8)
   139f2:	46bd      	mov	sp, r7
   139f4:	b002      	add	sp, #8
   139f6:	bd80      	pop	{r7, pc}

000139f8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   139f8:	b580      	push	{r7, lr}
   139fa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   139fc:	4b05      	ldr	r3, [pc, #20]	; (13a14 <system_is_debugger_present+0x1c>)
   139fe:	789b      	ldrb	r3, [r3, #2]
   13a00:	b2db      	uxtb	r3, r3
   13a02:	001a      	movs	r2, r3
   13a04:	2302      	movs	r3, #2
   13a06:	4013      	ands	r3, r2
   13a08:	1e5a      	subs	r2, r3, #1
   13a0a:	4193      	sbcs	r3, r2
   13a0c:	b2db      	uxtb	r3, r3
}
   13a0e:	0018      	movs	r0, r3
   13a10:	46bd      	mov	sp, r7
   13a12:	bd80      	pop	{r7, pc}
   13a14:	41002000 	.word	0x41002000

00013a18 <system_interrupt_enter_critical_section>:
{
   13a18:	b580      	push	{r7, lr}
   13a1a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13a1c:	4b02      	ldr	r3, [pc, #8]	; (13a28 <system_interrupt_enter_critical_section+0x10>)
   13a1e:	4798      	blx	r3
}
   13a20:	46c0      	nop			; (mov r8, r8)
   13a22:	46bd      	mov	sp, r7
   13a24:	bd80      	pop	{r7, pc}
   13a26:	46c0      	nop			; (mov r8, r8)
   13a28:	00022af9 	.word	0x00022af9

00013a2c <system_interrupt_leave_critical_section>:
{
   13a2c:	b580      	push	{r7, lr}
   13a2e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13a30:	4b02      	ldr	r3, [pc, #8]	; (13a3c <system_interrupt_leave_critical_section+0x10>)
   13a32:	4798      	blx	r3
}
   13a34:	46c0      	nop			; (mov r8, r8)
   13a36:	46bd      	mov	sp, r7
   13a38:	bd80      	pop	{r7, pc}
   13a3a:	46c0      	nop			; (mov r8, r8)
   13a3c:	00022b4d 	.word	0x00022b4d

00013a40 <system_interrupt_disable>:
{
   13a40:	b580      	push	{r7, lr}
   13a42:	b082      	sub	sp, #8
   13a44:	af00      	add	r7, sp, #0
   13a46:	0002      	movs	r2, r0
   13a48:	1dfb      	adds	r3, r7, #7
   13a4a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13a4c:	4a07      	ldr	r2, [pc, #28]	; (13a6c <system_interrupt_disable+0x2c>)
   13a4e:	1dfb      	adds	r3, r7, #7
   13a50:	781b      	ldrb	r3, [r3, #0]
   13a52:	0019      	movs	r1, r3
   13a54:	231f      	movs	r3, #31
   13a56:	400b      	ands	r3, r1
   13a58:	2101      	movs	r1, #1
   13a5a:	4099      	lsls	r1, r3
   13a5c:	000b      	movs	r3, r1
   13a5e:	0019      	movs	r1, r3
   13a60:	2380      	movs	r3, #128	; 0x80
   13a62:	50d1      	str	r1, [r2, r3]
}
   13a64:	46c0      	nop			; (mov r8, r8)
   13a66:	46bd      	mov	sp, r7
   13a68:	b002      	add	sp, #8
   13a6a:	bd80      	pop	{r7, pc}
   13a6c:	e000e100 	.word	0xe000e100

00013a70 <i2c_master_is_syncing>:
{
   13a70:	b580      	push	{r7, lr}
   13a72:	b084      	sub	sp, #16
   13a74:	af00      	add	r7, sp, #0
   13a76:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13a78:	687b      	ldr	r3, [r7, #4]
   13a7a:	681b      	ldr	r3, [r3, #0]
   13a7c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13a7e:	68fb      	ldr	r3, [r7, #12]
   13a80:	69db      	ldr	r3, [r3, #28]
   13a82:	2207      	movs	r2, #7
   13a84:	4013      	ands	r3, r2
   13a86:	1e5a      	subs	r2, r3, #1
   13a88:	4193      	sbcs	r3, r2
   13a8a:	b2db      	uxtb	r3, r3
}
   13a8c:	0018      	movs	r0, r3
   13a8e:	46bd      	mov	sp, r7
   13a90:	b004      	add	sp, #16
   13a92:	bd80      	pop	{r7, pc}

00013a94 <_i2c_master_wait_for_sync>:
{
   13a94:	b580      	push	{r7, lr}
   13a96:	b082      	sub	sp, #8
   13a98:	af00      	add	r7, sp, #0
   13a9a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13a9c:	46c0      	nop			; (mov r8, r8)
   13a9e:	687b      	ldr	r3, [r7, #4]
   13aa0:	0018      	movs	r0, r3
   13aa2:	4b04      	ldr	r3, [pc, #16]	; (13ab4 <_i2c_master_wait_for_sync+0x20>)
   13aa4:	4798      	blx	r3
   13aa6:	1e03      	subs	r3, r0, #0
   13aa8:	d1f9      	bne.n	13a9e <_i2c_master_wait_for_sync+0xa>
}
   13aaa:	46c0      	nop			; (mov r8, r8)
   13aac:	46bd      	mov	sp, r7
   13aae:	b002      	add	sp, #8
   13ab0:	bd80      	pop	{r7, pc}
   13ab2:	46c0      	nop			; (mov r8, r8)
   13ab4:	00013a71 	.word	0x00013a71

00013ab8 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   13ab8:	b580      	push	{r7, lr}
   13aba:	b084      	sub	sp, #16
   13abc:	af00      	add	r7, sp, #0
   13abe:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ac0:	687b      	ldr	r3, [r7, #4]
   13ac2:	681b      	ldr	r3, [r3, #0]
   13ac4:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   13ac6:	687b      	ldr	r3, [r7, #4]
   13ac8:	681b      	ldr	r3, [r3, #0]
   13aca:	0018      	movs	r0, r3
   13acc:	4b0d      	ldr	r3, [pc, #52]	; (13b04 <i2c_master_disable+0x4c>)
   13ace:	4798      	blx	r3
   13ad0:	0003      	movs	r3, r0
   13ad2:	0018      	movs	r0, r3
   13ad4:	4b0c      	ldr	r3, [pc, #48]	; (13b08 <i2c_master_disable+0x50>)
   13ad6:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13ad8:	687b      	ldr	r3, [r7, #4]
   13ada:	0018      	movs	r0, r3
   13adc:	4b0b      	ldr	r3, [pc, #44]	; (13b0c <i2c_master_disable+0x54>)
   13ade:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   13ae0:	68fb      	ldr	r3, [r7, #12]
   13ae2:	2283      	movs	r2, #131	; 0x83
   13ae4:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   13ae6:	68fb      	ldr	r3, [r7, #12]
   13ae8:	2283      	movs	r2, #131	; 0x83
   13aea:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   13aec:	68fb      	ldr	r3, [r7, #12]
   13aee:	681b      	ldr	r3, [r3, #0]
   13af0:	2202      	movs	r2, #2
   13af2:	4393      	bics	r3, r2
   13af4:	001a      	movs	r2, r3
   13af6:	68fb      	ldr	r3, [r7, #12]
   13af8:	601a      	str	r2, [r3, #0]

}
   13afa:	46c0      	nop			; (mov r8, r8)
   13afc:	46bd      	mov	sp, r7
   13afe:	b004      	add	sp, #16
   13b00:	bd80      	pop	{r7, pc}
   13b02:	46c0      	nop			; (mov r8, r8)
   13b04:	00023fcd 	.word	0x00023fcd
   13b08:	00013a41 	.word	0x00013a41
   13b0c:	00013a95 	.word	0x00013a95

00013b10 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   13b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b12:	b097      	sub	sp, #92	; 0x5c
   13b14:	af00      	add	r7, sp, #0
   13b16:	6178      	str	r0, [r7, #20]
   13b18:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   13b1a:	2300      	movs	r3, #0
   13b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   13b1e:	2300      	movs	r3, #0
   13b20:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   13b22:	2300      	movs	r3, #0
   13b24:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   13b26:	233b      	movs	r3, #59	; 0x3b
   13b28:	2210      	movs	r2, #16
   13b2a:	4694      	mov	ip, r2
   13b2c:	44bc      	add	ip, r7
   13b2e:	4463      	add	r3, ip
   13b30:	2200      	movs	r2, #0
   13b32:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13b34:	697b      	ldr	r3, [r7, #20]
   13b36:	681b      	ldr	r3, [r3, #0]
   13b38:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   13b3a:	697b      	ldr	r3, [r7, #20]
   13b3c:	681b      	ldr	r3, [r3, #0]
   13b3e:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   13b40:	2323      	movs	r3, #35	; 0x23
   13b42:	2210      	movs	r2, #16
   13b44:	18ba      	adds	r2, r7, r2
   13b46:	18d4      	adds	r4, r2, r3
   13b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b4a:	0018      	movs	r0, r3
   13b4c:	4bc0      	ldr	r3, [pc, #768]	; (13e50 <_i2c_master_set_config+0x340>)
   13b4e:	4798      	blx	r3
   13b50:	0003      	movs	r3, r0
   13b52:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13b54:	230c      	movs	r3, #12
   13b56:	2210      	movs	r2, #16
   13b58:	4694      	mov	ip, r2
   13b5a:	44bc      	add	ip, r7
   13b5c:	4463      	add	r3, ip
   13b5e:	0018      	movs	r0, r3
   13b60:	4bbc      	ldr	r3, [pc, #752]	; (13e54 <_i2c_master_set_config+0x344>)
   13b62:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   13b64:	693b      	ldr	r3, [r7, #16]
   13b66:	69db      	ldr	r3, [r3, #28]
   13b68:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   13b6a:	693b      	ldr	r3, [r7, #16]
   13b6c:	6a1b      	ldr	r3, [r3, #32]
   13b6e:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   13b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13b72:	2b00      	cmp	r3, #0
   13b74:	d106      	bne.n	13b84 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   13b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b78:	2100      	movs	r1, #0
   13b7a:	0018      	movs	r0, r3
   13b7c:	4bb6      	ldr	r3, [pc, #728]	; (13e58 <_i2c_master_set_config+0x348>)
   13b7e:	4798      	blx	r3
   13b80:	0003      	movs	r3, r0
   13b82:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   13b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13b86:	b2da      	uxtb	r2, r3
   13b88:	230c      	movs	r3, #12
   13b8a:	2110      	movs	r1, #16
   13b8c:	468c      	mov	ip, r1
   13b8e:	44bc      	add	ip, r7
   13b90:	4463      	add	r3, ip
   13b92:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13b94:	230c      	movs	r3, #12
   13b96:	2210      	movs	r2, #16
   13b98:	4694      	mov	ip, r2
   13b9a:	44bc      	add	ip, r7
   13b9c:	4463      	add	r3, ip
   13b9e:	2202      	movs	r2, #2
   13ba0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   13ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13ba4:	0c1b      	lsrs	r3, r3, #16
   13ba6:	b2db      	uxtb	r3, r3
   13ba8:	220c      	movs	r2, #12
   13baa:	2110      	movs	r1, #16
   13bac:	468c      	mov	ip, r1
   13bae:	44bc      	add	ip, r7
   13bb0:	4462      	add	r2, ip
   13bb2:	0011      	movs	r1, r2
   13bb4:	0018      	movs	r0, r3
   13bb6:	4ba9      	ldr	r3, [pc, #676]	; (13e5c <_i2c_master_set_config+0x34c>)
   13bb8:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   13bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d106      	bne.n	13bce <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   13bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13bc2:	2101      	movs	r1, #1
   13bc4:	0018      	movs	r0, r3
   13bc6:	4ba4      	ldr	r3, [pc, #656]	; (13e58 <_i2c_master_set_config+0x348>)
   13bc8:	4798      	blx	r3
   13bca:	0003      	movs	r3, r0
   13bcc:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   13bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13bd0:	b2da      	uxtb	r2, r3
   13bd2:	230c      	movs	r3, #12
   13bd4:	2110      	movs	r1, #16
   13bd6:	468c      	mov	ip, r1
   13bd8:	44bc      	add	ip, r7
   13bda:	4463      	add	r3, ip
   13bdc:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13bde:	230c      	movs	r3, #12
   13be0:	2210      	movs	r2, #16
   13be2:	4694      	mov	ip, r2
   13be4:	44bc      	add	ip, r7
   13be6:	4463      	add	r3, ip
   13be8:	2202      	movs	r2, #2
   13bea:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   13bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13bee:	0c1b      	lsrs	r3, r3, #16
   13bf0:	b2db      	uxtb	r3, r3
   13bf2:	220c      	movs	r2, #12
   13bf4:	2110      	movs	r1, #16
   13bf6:	468c      	mov	ip, r1
   13bf8:	44bc      	add	ip, r7
   13bfa:	4462      	add	r2, ip
   13bfc:	0011      	movs	r1, r2
   13bfe:	0018      	movs	r0, r3
   13c00:	4b96      	ldr	r3, [pc, #600]	; (13e5c <_i2c_master_set_config+0x34c>)
   13c02:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   13c04:	693b      	ldr	r3, [r7, #16]
   13c06:	8a9a      	ldrh	r2, [r3, #20]
   13c08:	697b      	ldr	r3, [r7, #20]
   13c0a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   13c0c:	693b      	ldr	r3, [r7, #16]
   13c0e:	8ada      	ldrh	r2, [r3, #22]
   13c10:	697b      	ldr	r3, [r7, #20]
   13c12:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13c14:	693b      	ldr	r3, [r7, #16]
   13c16:	7e1b      	ldrb	r3, [r3, #24]
   13c18:	2b00      	cmp	r3, #0
   13c1a:	d103      	bne.n	13c24 <_i2c_master_set_config+0x114>
   13c1c:	4b90      	ldr	r3, [pc, #576]	; (13e60 <_i2c_master_set_config+0x350>)
   13c1e:	4798      	blx	r3
   13c20:	1e03      	subs	r3, r0, #0
   13c22:	d002      	beq.n	13c2a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   13c24:	2380      	movs	r3, #128	; 0x80
   13c26:	657b      	str	r3, [r7, #84]	; 0x54
   13c28:	e001      	b.n	13c2e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   13c2a:	2300      	movs	r3, #0
   13c2c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   13c2e:	693b      	ldr	r3, [r7, #16]
   13c30:	691b      	ldr	r3, [r3, #16]
   13c32:	2b00      	cmp	r3, #0
   13c34:	d004      	beq.n	13c40 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   13c36:	693b      	ldr	r3, [r7, #16]
   13c38:	691b      	ldr	r3, [r3, #16]
   13c3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13c3c:	4313      	orrs	r3, r2
   13c3e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   13c40:	693b      	ldr	r3, [r7, #16]
   13c42:	689b      	ldr	r3, [r3, #8]
   13c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13c46:	4313      	orrs	r3, r2
   13c48:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   13c4a:	693b      	ldr	r3, [r7, #16]
   13c4c:	2224      	movs	r2, #36	; 0x24
   13c4e:	5c9b      	ldrb	r3, [r3, r2]
   13c50:	2b00      	cmp	r3, #0
   13c52:	d004      	beq.n	13c5e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   13c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   13c56:	2280      	movs	r2, #128	; 0x80
   13c58:	05d2      	lsls	r2, r2, #23
   13c5a:	4313      	orrs	r3, r2
   13c5c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   13c5e:	693b      	ldr	r3, [r7, #16]
   13c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c62:	2b00      	cmp	r3, #0
   13c64:	d004      	beq.n	13c70 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   13c66:	693b      	ldr	r3, [r7, #16]
   13c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13c6c:	4313      	orrs	r3, r2
   13c6e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   13c70:	693b      	ldr	r3, [r7, #16]
   13c72:	222c      	movs	r2, #44	; 0x2c
   13c74:	5c9b      	ldrb	r3, [r3, r2]
   13c76:	2b00      	cmp	r3, #0
   13c78:	d105      	bne.n	13c86 <_i2c_master_set_config+0x176>
   13c7a:	693b      	ldr	r3, [r7, #16]
   13c7c:	689a      	ldr	r2, [r3, #8]
   13c7e:	2380      	movs	r3, #128	; 0x80
   13c80:	049b      	lsls	r3, r3, #18
   13c82:	429a      	cmp	r2, r3
   13c84:	d104      	bne.n	13c90 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   13c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   13c88:	2280      	movs	r2, #128	; 0x80
   13c8a:	0512      	lsls	r2, r2, #20
   13c8c:	4313      	orrs	r3, r2
   13c8e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   13c90:	693b      	ldr	r3, [r7, #16]
   13c92:	222d      	movs	r2, #45	; 0x2d
   13c94:	5c9b      	ldrb	r3, [r3, r2]
   13c96:	2b00      	cmp	r3, #0
   13c98:	d004      	beq.n	13ca4 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   13c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   13c9c:	2280      	movs	r2, #128	; 0x80
   13c9e:	0412      	lsls	r2, r2, #16
   13ca0:	4313      	orrs	r3, r2
   13ca2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   13ca4:	693b      	ldr	r3, [r7, #16]
   13ca6:	222e      	movs	r2, #46	; 0x2e
   13ca8:	5c9b      	ldrb	r3, [r3, r2]
   13caa:	2b00      	cmp	r3, #0
   13cac:	d004      	beq.n	13cb8 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   13cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   13cb0:	2280      	movs	r2, #128	; 0x80
   13cb2:	03d2      	lsls	r2, r2, #15
   13cb4:	4313      	orrs	r3, r2
   13cb6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   13cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13cba:	681a      	ldr	r2, [r3, #0]
   13cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   13cbe:	431a      	orrs	r2, r3
   13cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13cc2:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   13cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13cc6:	2280      	movs	r2, #128	; 0x80
   13cc8:	0052      	lsls	r2, r2, #1
   13cca:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   13ccc:	2323      	movs	r3, #35	; 0x23
   13cce:	2210      	movs	r2, #16
   13cd0:	4694      	mov	ip, r2
   13cd2:	44bc      	add	ip, r7
   13cd4:	4463      	add	r3, ip
   13cd6:	781b      	ldrb	r3, [r3, #0]
   13cd8:	3314      	adds	r3, #20
   13cda:	b2db      	uxtb	r3, r3
   13cdc:	0018      	movs	r0, r3
   13cde:	4b61      	ldr	r3, [pc, #388]	; (13e64 <_i2c_master_set_config+0x354>)
   13ce0:	4798      	blx	r3
   13ce2:	0003      	movs	r3, r0
   13ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   13ce6:	693b      	ldr	r3, [r7, #16]
   13ce8:	681b      	ldr	r3, [r3, #0]
   13cea:	22fa      	movs	r2, #250	; 0xfa
   13cec:	0092      	lsls	r2, r2, #2
   13cee:	4353      	muls	r3, r2
   13cf0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   13cf2:	693b      	ldr	r3, [r7, #16]
   13cf4:	685b      	ldr	r3, [r3, #4]
   13cf6:	22fa      	movs	r2, #250	; 0xfa
   13cf8:	0092      	lsls	r2, r2, #2
   13cfa:	4353      	muls	r3, r2
   13cfc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   13cfe:	693b      	ldr	r3, [r7, #16]
   13d00:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   13d02:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   13d04:	4b58      	ldr	r3, [pc, #352]	; (13e68 <_i2c_master_set_config+0x358>)
   13d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13d08:	4798      	blx	r3
   13d0a:	0005      	movs	r5, r0
   13d0c:	000e      	movs	r6, r1
   13d0e:	4b56      	ldr	r3, [pc, #344]	; (13e68 <_i2c_master_set_config+0x358>)
   13d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13d12:	4798      	blx	r3
   13d14:	60b8      	str	r0, [r7, #8]
   13d16:	60f9      	str	r1, [r7, #12]
   13d18:	4b53      	ldr	r3, [pc, #332]	; (13e68 <_i2c_master_set_config+0x358>)
   13d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13d1c:	4798      	blx	r3
   13d1e:	4c53      	ldr	r4, [pc, #332]	; (13e6c <_i2c_master_set_config+0x35c>)
   13d20:	4a53      	ldr	r2, [pc, #332]	; (13e70 <_i2c_master_set_config+0x360>)
   13d22:	4b54      	ldr	r3, [pc, #336]	; (13e74 <_i2c_master_set_config+0x364>)
   13d24:	47a0      	blx	r4
   13d26:	0003      	movs	r3, r0
   13d28:	000c      	movs	r4, r1
   13d2a:	603b      	str	r3, [r7, #0]
   13d2c:	607c      	str	r4, [r7, #4]
   13d2e:	4b4e      	ldr	r3, [pc, #312]	; (13e68 <_i2c_master_set_config+0x358>)
   13d30:	6a38      	ldr	r0, [r7, #32]
   13d32:	4798      	blx	r3
   13d34:	0002      	movs	r2, r0
   13d36:	000b      	movs	r3, r1
   13d38:	4c4c      	ldr	r4, [pc, #304]	; (13e6c <_i2c_master_set_config+0x35c>)
   13d3a:	6838      	ldr	r0, [r7, #0]
   13d3c:	6879      	ldr	r1, [r7, #4]
   13d3e:	47a0      	blx	r4
   13d40:	0003      	movs	r3, r0
   13d42:	000c      	movs	r4, r1
   13d44:	0018      	movs	r0, r3
   13d46:	0021      	movs	r1, r4
   13d48:	4c4b      	ldr	r4, [pc, #300]	; (13e78 <_i2c_master_set_config+0x368>)
   13d4a:	2200      	movs	r2, #0
   13d4c:	4b4b      	ldr	r3, [pc, #300]	; (13e7c <_i2c_master_set_config+0x36c>)
   13d4e:	47a0      	blx	r4
   13d50:	0003      	movs	r3, r0
   13d52:	000c      	movs	r4, r1
   13d54:	001a      	movs	r2, r3
   13d56:	0023      	movs	r3, r4
   13d58:	4c44      	ldr	r4, [pc, #272]	; (13e6c <_i2c_master_set_config+0x35c>)
   13d5a:	68b8      	ldr	r0, [r7, #8]
   13d5c:	68f9      	ldr	r1, [r7, #12]
   13d5e:	47a0      	blx	r4
   13d60:	0003      	movs	r3, r0
   13d62:	000c      	movs	r4, r1
   13d64:	001a      	movs	r2, r3
   13d66:	0023      	movs	r3, r4
   13d68:	4c45      	ldr	r4, [pc, #276]	; (13e80 <_i2c_master_set_config+0x370>)
   13d6a:	0028      	movs	r0, r5
   13d6c:	0031      	movs	r1, r6
   13d6e:	47a0      	blx	r4
   13d70:	0003      	movs	r3, r0
   13d72:	000c      	movs	r4, r1
   13d74:	001d      	movs	r5, r3
   13d76:	0026      	movs	r6, r4
   13d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13d7a:	005a      	lsls	r2, r3, #1
   13d7c:	4b3a      	ldr	r3, [pc, #232]	; (13e68 <_i2c_master_set_config+0x358>)
   13d7e:	0010      	movs	r0, r2
   13d80:	4798      	blx	r3
   13d82:	0002      	movs	r2, r0
   13d84:	000b      	movs	r3, r1
   13d86:	4c3c      	ldr	r4, [pc, #240]	; (13e78 <_i2c_master_set_config+0x368>)
   13d88:	0028      	movs	r0, r5
   13d8a:	0031      	movs	r1, r6
   13d8c:	47a0      	blx	r4
   13d8e:	0003      	movs	r3, r0
   13d90:	000c      	movs	r4, r1
   13d92:	0018      	movs	r0, r3
   13d94:	0021      	movs	r1, r4
   13d96:	4c3a      	ldr	r4, [pc, #232]	; (13e80 <_i2c_master_set_config+0x370>)
   13d98:	2200      	movs	r2, #0
   13d9a:	4b3a      	ldr	r3, [pc, #232]	; (13e84 <_i2c_master_set_config+0x374>)
   13d9c:	47a0      	blx	r4
   13d9e:	0003      	movs	r3, r0
   13da0:	000c      	movs	r4, r1
   13da2:	001d      	movs	r5, r3
   13da4:	0026      	movs	r6, r4
   13da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13da8:	005a      	lsls	r2, r3, #1
   13daa:	4b2f      	ldr	r3, [pc, #188]	; (13e68 <_i2c_master_set_config+0x358>)
   13dac:	0010      	movs	r0, r2
   13dae:	4798      	blx	r3
   13db0:	0002      	movs	r2, r0
   13db2:	000b      	movs	r3, r1
   13db4:	4c34      	ldr	r4, [pc, #208]	; (13e88 <_i2c_master_set_config+0x378>)
   13db6:	0028      	movs	r0, r5
   13db8:	0031      	movs	r1, r6
   13dba:	47a0      	blx	r4
   13dbc:	0003      	movs	r3, r0
   13dbe:	000c      	movs	r4, r1
   13dc0:	0019      	movs	r1, r3
   13dc2:	0022      	movs	r2, r4
   13dc4:	4b31      	ldr	r3, [pc, #196]	; (13e8c <_i2c_master_set_config+0x37c>)
   13dc6:	0008      	movs	r0, r1
   13dc8:	0011      	movs	r1, r2
   13dca:	4798      	blx	r3
   13dcc:	0003      	movs	r3, r0
   13dce:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   13dd0:	693b      	ldr	r3, [r7, #16]
   13dd2:	689a      	ldr	r2, [r3, #8]
   13dd4:	2380      	movs	r3, #128	; 0x80
   13dd6:	049b      	lsls	r3, r3, #18
   13dd8:	429a      	cmp	r2, r3
   13dda:	d16a      	bne.n	13eb2 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   13ddc:	4b22      	ldr	r3, [pc, #136]	; (13e68 <_i2c_master_set_config+0x358>)
   13dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13de0:	4798      	blx	r3
   13de2:	4c25      	ldr	r4, [pc, #148]	; (13e78 <_i2c_master_set_config+0x368>)
   13de4:	0002      	movs	r2, r0
   13de6:	000b      	movs	r3, r1
   13de8:	47a0      	blx	r4
   13dea:	0003      	movs	r3, r0
   13dec:	000c      	movs	r4, r1
   13dee:	001d      	movs	r5, r3
   13df0:	0026      	movs	r6, r4
   13df2:	4b1d      	ldr	r3, [pc, #116]	; (13e68 <_i2c_master_set_config+0x358>)
   13df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13df6:	4798      	blx	r3
   13df8:	4c1c      	ldr	r4, [pc, #112]	; (13e6c <_i2c_master_set_config+0x35c>)
   13dfa:	2200      	movs	r2, #0
   13dfc:	4b24      	ldr	r3, [pc, #144]	; (13e90 <_i2c_master_set_config+0x380>)
   13dfe:	47a0      	blx	r4
   13e00:	0003      	movs	r3, r0
   13e02:	000c      	movs	r4, r1
   13e04:	001a      	movs	r2, r3
   13e06:	0023      	movs	r3, r4
   13e08:	4c1f      	ldr	r4, [pc, #124]	; (13e88 <_i2c_master_set_config+0x378>)
   13e0a:	0028      	movs	r0, r5
   13e0c:	0031      	movs	r1, r6
   13e0e:	47a0      	blx	r4
   13e10:	0003      	movs	r3, r0
   13e12:	000c      	movs	r4, r1
   13e14:	0018      	movs	r0, r3
   13e16:	0021      	movs	r1, r4
   13e18:	4c19      	ldr	r4, [pc, #100]	; (13e80 <_i2c_master_set_config+0x370>)
   13e1a:	2200      	movs	r2, #0
   13e1c:	4b19      	ldr	r3, [pc, #100]	; (13e84 <_i2c_master_set_config+0x374>)
   13e1e:	47a0      	blx	r4
   13e20:	0003      	movs	r3, r0
   13e22:	000c      	movs	r4, r1
   13e24:	0019      	movs	r1, r3
   13e26:	0022      	movs	r2, r4
   13e28:	4b18      	ldr	r3, [pc, #96]	; (13e8c <_i2c_master_set_config+0x37c>)
   13e2a:	0008      	movs	r0, r1
   13e2c:	0011      	movs	r1, r2
   13e2e:	4798      	blx	r3
   13e30:	0003      	movs	r3, r0
   13e32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   13e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e36:	2b00      	cmp	r3, #0
   13e38:	d02e      	beq.n	13e98 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   13e3a:	4b16      	ldr	r3, [pc, #88]	; (13e94 <_i2c_master_set_config+0x384>)
   13e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13e40:	4798      	blx	r3
   13e42:	0003      	movs	r3, r0
   13e44:	1e9a      	subs	r2, r3, #2
   13e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13e48:	1ad3      	subs	r3, r2, r3
   13e4a:	653b      	str	r3, [r7, #80]	; 0x50
   13e4c:	e031      	b.n	13eb2 <_i2c_master_set_config+0x3a2>
   13e4e:	46c0      	nop			; (mov r8, r8)
   13e50:	00023efd 	.word	0x00023efd
   13e54:	000139d1 	.word	0x000139d1
   13e58:	00023d41 	.word	0x00023d41
   13e5c:	00026ced 	.word	0x00026ced
   13e60:	000139f9 	.word	0x000139f9
   13e64:	00026ab1 	.word	0x00026ab1
   13e68:	00032749 	.word	0x00032749
   13e6c:	00031bb5 	.word	0x00031bb5
   13e70:	e826d695 	.word	0xe826d695
   13e74:	3e112e0b 	.word	0x3e112e0b
   13e78:	00030f2d 	.word	0x00030f2d
   13e7c:	40240000 	.word	0x40240000
   13e80:	000320b5 	.word	0x000320b5
   13e84:	3ff00000 	.word	0x3ff00000
   13e88:	0003154d 	.word	0x0003154d
   13e8c:	000326e1 	.word	0x000326e1
   13e90:	40080000 	.word	0x40080000
   13e94:	0002fded 	.word	0x0002fded
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   13e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13e9a:	005a      	lsls	r2, r3, #1
   13e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13e9e:	18d3      	adds	r3, r2, r3
   13ea0:	1e5a      	subs	r2, r3, #1
   13ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ea4:	0059      	lsls	r1, r3, #1
   13ea6:	4b1d      	ldr	r3, [pc, #116]	; (13f1c <_i2c_master_set_config+0x40c>)
   13ea8:	0010      	movs	r0, r2
   13eaa:	4798      	blx	r3
   13eac:	0003      	movs	r3, r0
   13eae:	3b01      	subs	r3, #1
   13eb0:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   13eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13eb4:	2bff      	cmp	r3, #255	; 0xff
   13eb6:	dc08      	bgt.n	13eca <_i2c_master_set_config+0x3ba>
   13eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13eba:	2b00      	cmp	r3, #0
   13ebc:	db05      	blt.n	13eca <_i2c_master_set_config+0x3ba>
   13ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ec0:	2bff      	cmp	r3, #255	; 0xff
   13ec2:	dc02      	bgt.n	13eca <_i2c_master_set_config+0x3ba>
   13ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	da06      	bge.n	13ed8 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13eca:	233b      	movs	r3, #59	; 0x3b
   13ecc:	2210      	movs	r2, #16
   13ece:	4694      	mov	ip, r2
   13ed0:	44bc      	add	ip, r7
   13ed2:	4463      	add	r3, ip
   13ed4:	2240      	movs	r2, #64	; 0x40
   13ed6:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   13ed8:	233b      	movs	r3, #59	; 0x3b
   13eda:	2210      	movs	r2, #16
   13edc:	4694      	mov	ip, r2
   13ede:	44bc      	add	ip, r7
   13ee0:	4463      	add	r3, ip
   13ee2:	781b      	ldrb	r3, [r3, #0]
   13ee4:	2b40      	cmp	r3, #64	; 0x40
   13ee6:	d00e      	beq.n	13f06 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13eea:	22ff      	movs	r2, #255	; 0xff
   13eec:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ef0:	041b      	lsls	r3, r3, #16
   13ef2:	0019      	movs	r1, r3
   13ef4:	23ff      	movs	r3, #255	; 0xff
   13ef6:	041b      	lsls	r3, r3, #16
   13ef8:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13efa:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   13efe:	0612      	lsls	r2, r2, #24
   13f00:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13f04:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   13f06:	233b      	movs	r3, #59	; 0x3b
   13f08:	2210      	movs	r2, #16
   13f0a:	4694      	mov	ip, r2
   13f0c:	44bc      	add	ip, r7
   13f0e:	4463      	add	r3, ip
   13f10:	781b      	ldrb	r3, [r3, #0]
}
   13f12:	0018      	movs	r0, r3
   13f14:	46bd      	mov	sp, r7
   13f16:	b017      	add	sp, #92	; 0x5c
   13f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f1a:	46c0      	nop			; (mov r8, r8)
   13f1c:	0002fded 	.word	0x0002fded

00013f20 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   13f20:	b590      	push	{r4, r7, lr}
   13f22:	b08b      	sub	sp, #44	; 0x2c
   13f24:	af00      	add	r7, sp, #0
   13f26:	60f8      	str	r0, [r7, #12]
   13f28:	60b9      	str	r1, [r7, #8]
   13f2a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   13f2c:	68fb      	ldr	r3, [r7, #12]
   13f2e:	68ba      	ldr	r2, [r7, #8]
   13f30:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13f32:	68fb      	ldr	r3, [r7, #12]
   13f34:	681b      	ldr	r3, [r3, #0]
   13f36:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13f38:	68fb      	ldr	r3, [r7, #12]
   13f3a:	681b      	ldr	r3, [r3, #0]
   13f3c:	0018      	movs	r0, r3
   13f3e:	4b3b      	ldr	r3, [pc, #236]	; (1402c <i2c_master_init+0x10c>)
   13f40:	4798      	blx	r3
   13f42:	0003      	movs	r3, r0
   13f44:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   13f46:	6a3b      	ldr	r3, [r7, #32]
   13f48:	3302      	adds	r3, #2
   13f4a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13f4c:	6a3b      	ldr	r3, [r7, #32]
   13f4e:	3314      	adds	r3, #20
   13f50:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13f52:	2201      	movs	r2, #1
   13f54:	69fb      	ldr	r3, [r7, #28]
   13f56:	409a      	lsls	r2, r3
   13f58:	0013      	movs	r3, r2
   13f5a:	0019      	movs	r1, r3
   13f5c:	2002      	movs	r0, #2
   13f5e:	4b34      	ldr	r3, [pc, #208]	; (14030 <i2c_master_init+0x110>)
   13f60:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13f62:	2314      	movs	r3, #20
   13f64:	18fb      	adds	r3, r7, r3
   13f66:	0018      	movs	r0, r3
   13f68:	4b32      	ldr	r3, [pc, #200]	; (14034 <i2c_master_init+0x114>)
   13f6a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13f6c:	687b      	ldr	r3, [r7, #4]
   13f6e:	7b1a      	ldrb	r2, [r3, #12]
   13f70:	2314      	movs	r3, #20
   13f72:	18fb      	adds	r3, r7, r3
   13f74:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13f76:	69bb      	ldr	r3, [r7, #24]
   13f78:	b2db      	uxtb	r3, r3
   13f7a:	2214      	movs	r2, #20
   13f7c:	18ba      	adds	r2, r7, r2
   13f7e:	0011      	movs	r1, r2
   13f80:	0018      	movs	r0, r3
   13f82:	4b2d      	ldr	r3, [pc, #180]	; (14038 <i2c_master_init+0x118>)
   13f84:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13f86:	69bb      	ldr	r3, [r7, #24]
   13f88:	b2db      	uxtb	r3, r3
   13f8a:	0018      	movs	r0, r3
   13f8c:	4b2b      	ldr	r3, [pc, #172]	; (1403c <i2c_master_init+0x11c>)
   13f8e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13f90:	687b      	ldr	r3, [r7, #4]
   13f92:	7b1b      	ldrb	r3, [r3, #12]
   13f94:	2100      	movs	r1, #0
   13f96:	0018      	movs	r0, r3
   13f98:	4b29      	ldr	r3, [pc, #164]	; (14040 <i2c_master_init+0x120>)
   13f9a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   13f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f9e:	681b      	ldr	r3, [r3, #0]
   13fa0:	2202      	movs	r2, #2
   13fa2:	4013      	ands	r3, r2
   13fa4:	d001      	beq.n	13faa <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   13fa6:	231c      	movs	r3, #28
   13fa8:	e03b      	b.n	14022 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   13faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13fac:	681b      	ldr	r3, [r3, #0]
   13fae:	2201      	movs	r2, #1
   13fb0:	4013      	ands	r3, r2
   13fb2:	d001      	beq.n	13fb8 <i2c_master_init+0x98>
		return STATUS_BUSY;
   13fb4:	2305      	movs	r3, #5
   13fb6:	e034      	b.n	14022 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13fb8:	68fb      	ldr	r3, [r7, #12]
   13fba:	681b      	ldr	r3, [r3, #0]
   13fbc:	2217      	movs	r2, #23
   13fbe:	18bc      	adds	r4, r7, r2
   13fc0:	0018      	movs	r0, r3
   13fc2:	4b1a      	ldr	r3, [pc, #104]	; (1402c <i2c_master_init+0x10c>)
   13fc4:	4798      	blx	r3
   13fc6:	0003      	movs	r3, r0
   13fc8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   13fca:	4a1e      	ldr	r2, [pc, #120]	; (14044 <i2c_master_init+0x124>)
   13fcc:	2317      	movs	r3, #23
   13fce:	18fb      	adds	r3, r7, r3
   13fd0:	781b      	ldrb	r3, [r3, #0]
   13fd2:	0011      	movs	r1, r2
   13fd4:	0018      	movs	r0, r3
   13fd6:	4b1c      	ldr	r3, [pc, #112]	; (14048 <i2c_master_init+0x128>)
   13fd8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13fda:	2317      	movs	r3, #23
   13fdc:	18fb      	adds	r3, r7, r3
   13fde:	781a      	ldrb	r2, [r3, #0]
   13fe0:	4b1a      	ldr	r3, [pc, #104]	; (1404c <i2c_master_init+0x12c>)
   13fe2:	0092      	lsls	r2, r2, #2
   13fe4:	68f9      	ldr	r1, [r7, #12]
   13fe6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   13fe8:	68fb      	ldr	r3, [r7, #12]
   13fea:	2200      	movs	r2, #0
   13fec:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   13fee:	68fb      	ldr	r3, [r7, #12]
   13ff0:	2200      	movs	r2, #0
   13ff2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   13ff4:	68fb      	ldr	r3, [r7, #12]
   13ff6:	2200      	movs	r2, #0
   13ff8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   13ffa:	68fb      	ldr	r3, [r7, #12]
   13ffc:	2200      	movs	r2, #0
   13ffe:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   14000:	68fb      	ldr	r3, [r7, #12]
   14002:	2225      	movs	r2, #37	; 0x25
   14004:	2100      	movs	r1, #0
   14006:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   14008:	68fb      	ldr	r3, [r7, #12]
   1400a:	2200      	movs	r2, #0
   1400c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14010:	2214      	movs	r2, #20
   14012:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   14014:	687a      	ldr	r2, [r7, #4]
   14016:	68fb      	ldr	r3, [r7, #12]
   14018:	0011      	movs	r1, r2
   1401a:	0018      	movs	r0, r3
   1401c:	4b0c      	ldr	r3, [pc, #48]	; (14050 <i2c_master_init+0x130>)
   1401e:	4798      	blx	r3
   14020:	0003      	movs	r3, r0
}
   14022:	0018      	movs	r0, r3
   14024:	46bd      	mov	sp, r7
   14026:	b00b      	add	sp, #44	; 0x2c
   14028:	bd90      	pop	{r4, r7, pc}
   1402a:	46c0      	nop			; (mov r8, r8)
   1402c:	00023efd 	.word	0x00023efd
   14030:	00013975 	.word	0x00013975
   14034:	0001395d 	.word	0x0001395d
   14038:	0002698d 	.word	0x0002698d
   1403c:	000269d1 	.word	0x000269d1
   14040:	00023cb5 	.word	0x00023cb5
   14044:	0000fa35 	.word	0x0000fa35
   14048:	00023f61 	.word	0x00023f61
   1404c:	20005638 	.word	0x20005638
   14050:	00013b11 	.word	0x00013b11

00014054 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   14054:	b580      	push	{r7, lr}
   14056:	b084      	sub	sp, #16
   14058:	af00      	add	r7, sp, #0
   1405a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1405c:	687b      	ldr	r3, [r7, #4]
   1405e:	681b      	ldr	r3, [r3, #0]
   14060:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   14062:	687b      	ldr	r3, [r7, #4]
   14064:	0018      	movs	r0, r3
   14066:	4b0f      	ldr	r3, [pc, #60]	; (140a4 <i2c_master_reset+0x50>)
   14068:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1406a:	687b      	ldr	r3, [r7, #4]
   1406c:	0018      	movs	r0, r3
   1406e:	4b0e      	ldr	r3, [pc, #56]	; (140a8 <i2c_master_reset+0x54>)
   14070:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   14072:	4b0e      	ldr	r3, [pc, #56]	; (140ac <i2c_master_reset+0x58>)
   14074:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   14076:	687b      	ldr	r3, [r7, #4]
   14078:	681b      	ldr	r3, [r3, #0]
   1407a:	0018      	movs	r0, r3
   1407c:	4b0c      	ldr	r3, [pc, #48]	; (140b0 <i2c_master_reset+0x5c>)
   1407e:	4798      	blx	r3
   14080:	0003      	movs	r3, r0
   14082:	0018      	movs	r0, r3
   14084:	4b0b      	ldr	r3, [pc, #44]	; (140b4 <i2c_master_reset+0x60>)
   14086:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   14088:	4b0b      	ldr	r3, [pc, #44]	; (140b8 <i2c_master_reset+0x64>)
   1408a:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1408c:	687b      	ldr	r3, [r7, #4]
   1408e:	0018      	movs	r0, r3
   14090:	4b04      	ldr	r3, [pc, #16]	; (140a4 <i2c_master_reset+0x50>)
   14092:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   14094:	68fb      	ldr	r3, [r7, #12]
   14096:	2201      	movs	r2, #1
   14098:	601a      	str	r2, [r3, #0]
}
   1409a:	46c0      	nop			; (mov r8, r8)
   1409c:	46bd      	mov	sp, r7
   1409e:	b004      	add	sp, #16
   140a0:	bd80      	pop	{r7, pc}
   140a2:	46c0      	nop			; (mov r8, r8)
   140a4:	00013a95 	.word	0x00013a95
   140a8:	00013ab9 	.word	0x00013ab9
   140ac:	00013a19 	.word	0x00013a19
   140b0:	00023fcd 	.word	0x00023fcd
   140b4:	00026b09 	.word	0x00026b09
   140b8:	00013a2d 	.word	0x00013a2d

000140bc <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   140bc:	b580      	push	{r7, lr}
   140be:	b084      	sub	sp, #16
   140c0:	af00      	add	r7, sp, #0
   140c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   140c4:	687b      	ldr	r3, [r7, #4]
   140c6:	681b      	ldr	r3, [r3, #0]
   140c8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   140ca:	68fb      	ldr	r3, [r7, #12]
   140cc:	7e1b      	ldrb	r3, [r3, #24]
   140ce:	b2db      	uxtb	r3, r3
   140d0:	001a      	movs	r2, r3
   140d2:	2302      	movs	r3, #2
   140d4:	4013      	ands	r3, r2
   140d6:	d00b      	beq.n	140f0 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   140d8:	68fb      	ldr	r3, [r7, #12]
   140da:	2202      	movs	r2, #2
   140dc:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   140de:	68fb      	ldr	r3, [r7, #12]
   140e0:	8b5b      	ldrh	r3, [r3, #26]
   140e2:	b29b      	uxth	r3, r3
   140e4:	001a      	movs	r2, r3
   140e6:	2302      	movs	r3, #2
   140e8:	4013      	ands	r3, r2
   140ea:	d011      	beq.n	14110 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   140ec:	2341      	movs	r3, #65	; 0x41
   140ee:	e010      	b.n	14112 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   140f0:	68fb      	ldr	r3, [r7, #12]
   140f2:	8b5b      	ldrh	r3, [r3, #26]
   140f4:	b29b      	uxth	r3, r3
   140f6:	001a      	movs	r2, r3
   140f8:	2304      	movs	r3, #4
   140fa:	4013      	ands	r3, r2
   140fc:	d008      	beq.n	14110 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   140fe:	68fb      	ldr	r3, [r7, #12]
   14100:	685b      	ldr	r3, [r3, #4]
   14102:	22c0      	movs	r2, #192	; 0xc0
   14104:	0292      	lsls	r2, r2, #10
   14106:	431a      	orrs	r2, r3
   14108:	68fb      	ldr	r3, [r7, #12]
   1410a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1410c:	2318      	movs	r3, #24
   1410e:	e000      	b.n	14112 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   14110:	2300      	movs	r3, #0
}
   14112:	0018      	movs	r0, r3
   14114:	46bd      	mov	sp, r7
   14116:	b004      	add	sp, #16
   14118:	bd80      	pop	{r7, pc}

0001411a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1411a:	b580      	push	{r7, lr}
   1411c:	b084      	sub	sp, #16
   1411e:	af00      	add	r7, sp, #0
   14120:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14122:	687b      	ldr	r3, [r7, #4]
   14124:	681b      	ldr	r3, [r3, #0]
   14126:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   14128:	230e      	movs	r3, #14
   1412a:	18fb      	adds	r3, r7, r3
   1412c:	2200      	movs	r2, #0
   1412e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   14130:	e00f      	b.n	14152 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   14132:	230e      	movs	r3, #14
   14134:	18fb      	adds	r3, r7, r3
   14136:	220e      	movs	r2, #14
   14138:	18ba      	adds	r2, r7, r2
   1413a:	8812      	ldrh	r2, [r2, #0]
   1413c:	3201      	adds	r2, #1
   1413e:	801a      	strh	r2, [r3, #0]
   14140:	687b      	ldr	r3, [r7, #4]
   14142:	891b      	ldrh	r3, [r3, #8]
   14144:	220e      	movs	r2, #14
   14146:	18ba      	adds	r2, r7, r2
   14148:	8812      	ldrh	r2, [r2, #0]
   1414a:	429a      	cmp	r2, r3
   1414c:	d301      	bcc.n	14152 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1414e:	2312      	movs	r3, #18
   14150:	e00e      	b.n	14170 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   14152:	68bb      	ldr	r3, [r7, #8]
   14154:	7e1b      	ldrb	r3, [r3, #24]
   14156:	b2db      	uxtb	r3, r3
   14158:	001a      	movs	r2, r3
   1415a:	2301      	movs	r3, #1
   1415c:	4013      	ands	r3, r2
   1415e:	d106      	bne.n	1416e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   14160:	68bb      	ldr	r3, [r7, #8]
   14162:	7e1b      	ldrb	r3, [r3, #24]
   14164:	b2db      	uxtb	r3, r3
   14166:	001a      	movs	r2, r3
   14168:	2302      	movs	r3, #2
   1416a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1416c:	d0e1      	beq.n	14132 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1416e:	2300      	movs	r3, #0
}
   14170:	0018      	movs	r0, r3
   14172:	46bd      	mov	sp, r7
   14174:	b004      	add	sp, #16
   14176:	bd80      	pop	{r7, pc}

00014178 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   14178:	b590      	push	{r4, r7, lr}
   1417a:	b085      	sub	sp, #20
   1417c:	af00      	add	r7, sp, #0
   1417e:	6078      	str	r0, [r7, #4]
   14180:	000a      	movs	r2, r1
   14182:	1cfb      	adds	r3, r7, #3
   14184:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14186:	687b      	ldr	r3, [r7, #4]
   14188:	681b      	ldr	r3, [r3, #0]
   1418a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1418c:	68fb      	ldr	r3, [r7, #12]
   1418e:	685b      	ldr	r3, [r3, #4]
   14190:	2280      	movs	r2, #128	; 0x80
   14192:	02d2      	lsls	r2, r2, #11
   14194:	431a      	orrs	r2, r3
   14196:	68fb      	ldr	r3, [r7, #12]
   14198:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1419a:	1cfb      	adds	r3, r7, #3
   1419c:	781a      	ldrb	r2, [r3, #0]
   1419e:	68fb      	ldr	r3, [r7, #12]
   141a0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   141a2:	230b      	movs	r3, #11
   141a4:	18fc      	adds	r4, r7, r3
   141a6:	687b      	ldr	r3, [r7, #4]
   141a8:	0018      	movs	r0, r3
   141aa:	4b07      	ldr	r3, [pc, #28]	; (141c8 <_i2c_master_send_hs_master_code+0x50>)
   141ac:	4798      	blx	r3
   141ae:	0003      	movs	r3, r0
   141b0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   141b2:	68fb      	ldr	r3, [r7, #12]
   141b4:	2201      	movs	r2, #1
   141b6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   141b8:	230b      	movs	r3, #11
   141ba:	18fb      	adds	r3, r7, r3
   141bc:	781b      	ldrb	r3, [r3, #0]
}
   141be:	0018      	movs	r0, r3
   141c0:	46bd      	mov	sp, r7
   141c2:	b005      	add	sp, #20
   141c4:	bd90      	pop	{r4, r7, pc}
   141c6:	46c0      	nop			; (mov r8, r8)
   141c8:	0001411b 	.word	0x0001411b

000141cc <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   141cc:	b590      	push	{r4, r7, lr}
   141ce:	b087      	sub	sp, #28
   141d0:	af00      	add	r7, sp, #0
   141d2:	6078      	str	r0, [r7, #4]
   141d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   141d6:	687b      	ldr	r3, [r7, #4]
   141d8:	681b      	ldr	r3, [r3, #0]
   141da:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   141dc:	2314      	movs	r3, #20
   141de:	18fb      	adds	r3, r7, r3
   141e0:	683a      	ldr	r2, [r7, #0]
   141e2:	8852      	ldrh	r2, [r2, #2]
   141e4:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
   141e6:	2312      	movs	r3, #18
   141e8:	18fb      	adds	r3, r7, r3
   141ea:	2200      	movs	r2, #0
   141ec:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   141ee:	68fb      	ldr	r3, [r7, #12]
   141f0:	681b      	ldr	r3, [r3, #0]
   141f2:	011b      	lsls	r3, r3, #4
   141f4:	0fdb      	lsrs	r3, r3, #31
   141f6:	b2db      	uxtb	r3, r3
   141f8:	001a      	movs	r2, r3
   141fa:	230b      	movs	r3, #11
   141fc:	18fb      	adds	r3, r7, r3
   141fe:	1e51      	subs	r1, r2, #1
   14200:	418a      	sbcs	r2, r1
   14202:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   14204:	683b      	ldr	r3, [r7, #0]
   14206:	7a5b      	ldrb	r3, [r3, #9]
   14208:	2b00      	cmp	r3, #0
   1420a:	d006      	beq.n	1421a <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1420c:	683b      	ldr	r3, [r7, #0]
   1420e:	7a9a      	ldrb	r2, [r3, #10]
   14210:	687b      	ldr	r3, [r7, #4]
   14212:	0011      	movs	r1, r2
   14214:	0018      	movs	r0, r3
   14216:	4b85      	ldr	r3, [pc, #532]	; (1442c <_i2c_master_read_packet+0x260>)
   14218:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1421a:	68fb      	ldr	r3, [r7, #12]
   1421c:	685b      	ldr	r3, [r3, #4]
   1421e:	4a84      	ldr	r2, [pc, #528]	; (14430 <_i2c_master_read_packet+0x264>)
   14220:	401a      	ands	r2, r3
   14222:	68fb      	ldr	r3, [r7, #12]
   14224:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
   14226:	683b      	ldr	r3, [r7, #0]
   14228:	7a1b      	ldrb	r3, [r3, #8]
   1422a:	2b00      	cmp	r3, #0
   1422c:	d042      	beq.n	142b4 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1422e:	683b      	ldr	r3, [r7, #0]
   14230:	881b      	ldrh	r3, [r3, #0]
   14232:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   14234:	683b      	ldr	r3, [r7, #0]
   14236:	7a5b      	ldrb	r3, [r3, #9]
   14238:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   1423a:	4313      	orrs	r3, r2
   1423c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1423e:	2380      	movs	r3, #128	; 0x80
   14240:	021b      	lsls	r3, r3, #8
   14242:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   14244:	68fb      	ldr	r3, [r7, #12]
   14246:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   14248:	2317      	movs	r3, #23
   1424a:	18fc      	adds	r4, r7, r3
   1424c:	687b      	ldr	r3, [r7, #4]
   1424e:	0018      	movs	r0, r3
   14250:	4b78      	ldr	r3, [pc, #480]	; (14434 <_i2c_master_read_packet+0x268>)
   14252:	4798      	blx	r3
   14254:	0003      	movs	r3, r0
   14256:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   14258:	68fb      	ldr	r3, [r7, #12]
   1425a:	685b      	ldr	r3, [r3, #4]
   1425c:	4a74      	ldr	r2, [pc, #464]	; (14430 <_i2c_master_read_packet+0x264>)
   1425e:	401a      	ands	r2, r3
   14260:	68fb      	ldr	r3, [r7, #12]
   14262:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   14264:	2317      	movs	r3, #23
   14266:	18fb      	adds	r3, r7, r3
   14268:	781b      	ldrb	r3, [r3, #0]
   1426a:	2b00      	cmp	r3, #0
   1426c:	d107      	bne.n	1427e <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
   1426e:	2317      	movs	r3, #23
   14270:	18fc      	adds	r4, r7, r3
   14272:	687b      	ldr	r3, [r7, #4]
   14274:	0018      	movs	r0, r3
   14276:	4b70      	ldr	r3, [pc, #448]	; (14438 <_i2c_master_read_packet+0x26c>)
   14278:	4798      	blx	r3
   1427a:	0003      	movs	r3, r0
   1427c:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   1427e:	2317      	movs	r3, #23
   14280:	18fb      	adds	r3, r7, r3
   14282:	781b      	ldrb	r3, [r3, #0]
   14284:	2b00      	cmp	r3, #0
   14286:	d111      	bne.n	142ac <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   14288:	683b      	ldr	r3, [r7, #0]
   1428a:	881b      	ldrh	r3, [r3, #0]
   1428c:	0a1b      	lsrs	r3, r3, #8
   1428e:	b29b      	uxth	r3, r3
   14290:	2278      	movs	r2, #120	; 0x78
   14292:	4313      	orrs	r3, r2
   14294:	b29b      	uxth	r3, r3
   14296:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   14298:	683b      	ldr	r3, [r7, #0]
   1429a:	7a5b      	ldrb	r3, [r3, #9]
   1429c:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1429e:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   142a0:	2201      	movs	r2, #1
   142a2:	4313      	orrs	r3, r2
   142a4:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   142a6:	68fb      	ldr	r3, [r7, #12]
   142a8:	625a      	str	r2, [r3, #36]	; 0x24
   142aa:	e00f      	b.n	142cc <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   142ac:	2317      	movs	r3, #23
   142ae:	18fb      	adds	r3, r7, r3
   142b0:	781b      	ldrb	r3, [r3, #0]
   142b2:	e0b6      	b.n	14422 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   142b4:	683b      	ldr	r3, [r7, #0]
   142b6:	881b      	ldrh	r3, [r3, #0]
   142b8:	005b      	lsls	r3, r3, #1
   142ba:	2201      	movs	r2, #1
   142bc:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   142be:	683b      	ldr	r3, [r7, #0]
   142c0:	7a5b      	ldrb	r3, [r3, #9]
   142c2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   142c4:	4313      	orrs	r3, r2
   142c6:	001a      	movs	r2, r3
   142c8:	68fb      	ldr	r3, [r7, #12]
   142ca:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   142cc:	2317      	movs	r3, #23
   142ce:	18fc      	adds	r4, r7, r3
   142d0:	687b      	ldr	r3, [r7, #4]
   142d2:	0018      	movs	r0, r3
   142d4:	4b57      	ldr	r3, [pc, #348]	; (14434 <_i2c_master_read_packet+0x268>)
   142d6:	4798      	blx	r3
   142d8:	0003      	movs	r3, r0
   142da:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   142dc:	230b      	movs	r3, #11
   142de:	18fb      	adds	r3, r7, r3
   142e0:	781b      	ldrb	r3, [r3, #0]
   142e2:	2b00      	cmp	r3, #0
   142e4:	d00b      	beq.n	142fe <_i2c_master_read_packet+0x132>
   142e6:	683b      	ldr	r3, [r7, #0]
   142e8:	885b      	ldrh	r3, [r3, #2]
   142ea:	2b01      	cmp	r3, #1
   142ec:	d107      	bne.n	142fe <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   142ee:	68fb      	ldr	r3, [r7, #12]
   142f0:	685b      	ldr	r3, [r3, #4]
   142f2:	2280      	movs	r2, #128	; 0x80
   142f4:	02d2      	lsls	r2, r2, #11
   142f6:	431a      	orrs	r2, r3
   142f8:	68fb      	ldr	r3, [r7, #12]
   142fa:	605a      	str	r2, [r3, #4]
   142fc:	e005      	b.n	1430a <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
   142fe:	68fb      	ldr	r3, [r7, #12]
   14300:	685b      	ldr	r3, [r3, #4]
   14302:	4a4b      	ldr	r2, [pc, #300]	; (14430 <_i2c_master_read_packet+0x264>)
   14304:	401a      	ands	r2, r3
   14306:	68fb      	ldr	r3, [r7, #12]
   14308:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   1430a:	2317      	movs	r3, #23
   1430c:	18fb      	adds	r3, r7, r3
   1430e:	781b      	ldrb	r3, [r3, #0]
   14310:	2b00      	cmp	r3, #0
   14312:	d107      	bne.n	14324 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
   14314:	2317      	movs	r3, #23
   14316:	18fc      	adds	r4, r7, r3
   14318:	687b      	ldr	r3, [r7, #4]
   1431a:	0018      	movs	r0, r3
   1431c:	4b46      	ldr	r3, [pc, #280]	; (14438 <_i2c_master_read_packet+0x26c>)
   1431e:	4798      	blx	r3
   14320:	0003      	movs	r3, r0
   14322:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   14324:	2317      	movs	r3, #23
   14326:	18fb      	adds	r3, r7, r3
   14328:	781b      	ldrb	r3, [r3, #0]
   1432a:	2b00      	cmp	r3, #0
   1432c:	d000      	beq.n	14330 <_i2c_master_read_packet+0x164>
   1432e:	e075      	b.n	1441c <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
   14330:	e04b      	b.n	143ca <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   14332:	68fb      	ldr	r3, [r7, #12]
   14334:	8b5b      	ldrh	r3, [r3, #26]
   14336:	b29b      	uxth	r3, r3
   14338:	001a      	movs	r2, r3
   1433a:	2320      	movs	r3, #32
   1433c:	4013      	ands	r3, r2
   1433e:	d101      	bne.n	14344 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
   14340:	2341      	movs	r3, #65	; 0x41
   14342:	e06e      	b.n	14422 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
   14344:	687b      	ldr	r3, [r7, #4]
   14346:	7adb      	ldrb	r3, [r3, #11]
   14348:	2b00      	cmp	r3, #0
   1434a:	d01e      	beq.n	1438a <_i2c_master_read_packet+0x1be>
   1434c:	230b      	movs	r3, #11
   1434e:	18fb      	adds	r3, r7, r3
   14350:	781b      	ldrb	r3, [r3, #0]
   14352:	2201      	movs	r2, #1
   14354:	4053      	eors	r3, r2
   14356:	b2db      	uxtb	r3, r3
   14358:	2b00      	cmp	r3, #0
   1435a:	d004      	beq.n	14366 <_i2c_master_read_packet+0x19a>
   1435c:	2314      	movs	r3, #20
   1435e:	18fb      	adds	r3, r7, r3
   14360:	881b      	ldrh	r3, [r3, #0]
   14362:	2b00      	cmp	r3, #0
   14364:	d009      	beq.n	1437a <_i2c_master_read_packet+0x1ae>
   14366:	230b      	movs	r3, #11
   14368:	18fb      	adds	r3, r7, r3
   1436a:	781b      	ldrb	r3, [r3, #0]
   1436c:	2b00      	cmp	r3, #0
   1436e:	d00c      	beq.n	1438a <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
   14370:	2314      	movs	r3, #20
   14372:	18fb      	adds	r3, r7, r3
   14374:	881b      	ldrh	r3, [r3, #0]
   14376:	2b01      	cmp	r3, #1
   14378:	d107      	bne.n	1438a <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1437a:	68fb      	ldr	r3, [r7, #12]
   1437c:	685b      	ldr	r3, [r3, #4]
   1437e:	2280      	movs	r2, #128	; 0x80
   14380:	02d2      	lsls	r2, r2, #11
   14382:	431a      	orrs	r2, r3
   14384:	68fb      	ldr	r3, [r7, #12]
   14386:	605a      	str	r2, [r3, #4]
   14388:	e01a      	b.n	143c0 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
   1438a:	687b      	ldr	r3, [r7, #4]
   1438c:	0018      	movs	r0, r3
   1438e:	4b2b      	ldr	r3, [pc, #172]	; (1443c <_i2c_master_read_packet+0x270>)
   14390:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
   14392:	683b      	ldr	r3, [r7, #0]
   14394:	685a      	ldr	r2, [r3, #4]
   14396:	2312      	movs	r3, #18
   14398:	18fb      	adds	r3, r7, r3
   1439a:	881b      	ldrh	r3, [r3, #0]
   1439c:	2112      	movs	r1, #18
   1439e:	1879      	adds	r1, r7, r1
   143a0:	1c58      	adds	r0, r3, #1
   143a2:	8008      	strh	r0, [r1, #0]
   143a4:	18d3      	adds	r3, r2, r3
   143a6:	68fa      	ldr	r2, [r7, #12]
   143a8:	2128      	movs	r1, #40	; 0x28
   143aa:	5c52      	ldrb	r2, [r2, r1]
   143ac:	b2d2      	uxtb	r2, r2
   143ae:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
   143b0:	2317      	movs	r3, #23
   143b2:	18fc      	adds	r4, r7, r3
   143b4:	687b      	ldr	r3, [r7, #4]
   143b6:	0018      	movs	r0, r3
   143b8:	4b1e      	ldr	r3, [pc, #120]	; (14434 <_i2c_master_read_packet+0x268>)
   143ba:	4798      	blx	r3
   143bc:	0003      	movs	r3, r0
   143be:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   143c0:	2317      	movs	r3, #23
   143c2:	18fb      	adds	r3, r7, r3
   143c4:	781b      	ldrb	r3, [r3, #0]
   143c6:	2b00      	cmp	r3, #0
   143c8:	d109      	bne.n	143de <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
   143ca:	2314      	movs	r3, #20
   143cc:	18fb      	adds	r3, r7, r3
   143ce:	881b      	ldrh	r3, [r3, #0]
   143d0:	2214      	movs	r2, #20
   143d2:	18ba      	adds	r2, r7, r2
   143d4:	1e59      	subs	r1, r3, #1
   143d6:	8011      	strh	r1, [r2, #0]
   143d8:	2b00      	cmp	r3, #0
   143da:	d1aa      	bne.n	14332 <_i2c_master_read_packet+0x166>
   143dc:	e000      	b.n	143e0 <_i2c_master_read_packet+0x214>
				break;
   143de:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
   143e0:	687b      	ldr	r3, [r7, #4]
   143e2:	7a9b      	ldrb	r3, [r3, #10]
   143e4:	2b00      	cmp	r3, #0
   143e6:	d00a      	beq.n	143fe <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
   143e8:	687b      	ldr	r3, [r7, #4]
   143ea:	0018      	movs	r0, r3
   143ec:	4b13      	ldr	r3, [pc, #76]	; (1443c <_i2c_master_read_packet+0x270>)
   143ee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   143f0:	68fb      	ldr	r3, [r7, #12]
   143f2:	685b      	ldr	r3, [r3, #4]
   143f4:	22c0      	movs	r2, #192	; 0xc0
   143f6:	0292      	lsls	r2, r2, #10
   143f8:	431a      	orrs	r2, r3
   143fa:	68fb      	ldr	r3, [r7, #12]
   143fc:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
   143fe:	687b      	ldr	r3, [r7, #4]
   14400:	0018      	movs	r0, r3
   14402:	4b0e      	ldr	r3, [pc, #56]	; (1443c <_i2c_master_read_packet+0x270>)
   14404:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
   14406:	683b      	ldr	r3, [r7, #0]
   14408:	685a      	ldr	r2, [r3, #4]
   1440a:	2312      	movs	r3, #18
   1440c:	18fb      	adds	r3, r7, r3
   1440e:	881b      	ldrh	r3, [r3, #0]
   14410:	18d3      	adds	r3, r2, r3
   14412:	68fa      	ldr	r2, [r7, #12]
   14414:	2128      	movs	r1, #40	; 0x28
   14416:	5c52      	ldrb	r2, [r2, r1]
   14418:	b2d2      	uxtb	r2, r2
   1441a:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
   1441c:	2317      	movs	r3, #23
   1441e:	18fb      	adds	r3, r7, r3
   14420:	781b      	ldrb	r3, [r3, #0]
}
   14422:	0018      	movs	r0, r3
   14424:	46bd      	mov	sp, r7
   14426:	b007      	add	sp, #28
   14428:	bd90      	pop	{r4, r7, pc}
   1442a:	46c0      	nop			; (mov r8, r8)
   1442c:	00014179 	.word	0x00014179
   14430:	fffbffff 	.word	0xfffbffff
   14434:	0001411b 	.word	0x0001411b
   14438:	000140bd 	.word	0x000140bd
   1443c:	00013a95 	.word	0x00013a95

00014440 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   14440:	b580      	push	{r7, lr}
   14442:	b082      	sub	sp, #8
   14444:	af00      	add	r7, sp, #0
   14446:	6078      	str	r0, [r7, #4]
   14448:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
   1444a:	687b      	ldr	r3, [r7, #4]
   1444c:	8b9b      	ldrh	r3, [r3, #28]
   1444e:	b29b      	uxth	r3, r3
   14450:	2b00      	cmp	r3, #0
   14452:	d001      	beq.n	14458 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
   14454:	2305      	movs	r3, #5
   14456:	e00c      	b.n	14472 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
   14458:	687b      	ldr	r3, [r7, #4]
   1445a:	2201      	movs	r2, #1
   1445c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1445e:	687b      	ldr	r3, [r7, #4]
   14460:	2201      	movs	r2, #1
   14462:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
   14464:	683a      	ldr	r2, [r7, #0]
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	0011      	movs	r1, r2
   1446a:	0018      	movs	r0, r3
   1446c:	4b03      	ldr	r3, [pc, #12]	; (1447c <i2c_master_read_packet_wait+0x3c>)
   1446e:	4798      	blx	r3
   14470:	0003      	movs	r3, r0
}
   14472:	0018      	movs	r0, r3
   14474:	46bd      	mov	sp, r7
   14476:	b002      	add	sp, #8
   14478:	bd80      	pop	{r7, pc}
   1447a:	46c0      	nop			; (mov r8, r8)
   1447c:	000141cd 	.word	0x000141cd

00014480 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   14480:	b590      	push	{r4, r7, lr}
   14482:	b087      	sub	sp, #28
   14484:	af00      	add	r7, sp, #0
   14486:	6078      	str	r0, [r7, #4]
   14488:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1448a:	687b      	ldr	r3, [r7, #4]
   1448c:	681b      	ldr	r3, [r3, #0]
   1448e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
   14490:	2314      	movs	r3, #20
   14492:	18fb      	adds	r3, r7, r3
   14494:	683a      	ldr	r2, [r7, #0]
   14496:	8852      	ldrh	r2, [r2, #2]
   14498:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
   1449a:	687b      	ldr	r3, [r7, #4]
   1449c:	0018      	movs	r0, r3
   1449e:	4b51      	ldr	r3, [pc, #324]	; (145e4 <_i2c_master_write_packet+0x164>)
   144a0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
   144a2:	683b      	ldr	r3, [r7, #0]
   144a4:	7a5b      	ldrb	r3, [r3, #9]
   144a6:	2b00      	cmp	r3, #0
   144a8:	d006      	beq.n	144b8 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   144aa:	683b      	ldr	r3, [r7, #0]
   144ac:	7a9a      	ldrb	r2, [r3, #10]
   144ae:	687b      	ldr	r3, [r7, #4]
   144b0:	0011      	movs	r1, r2
   144b2:	0018      	movs	r0, r3
   144b4:	4b4c      	ldr	r3, [pc, #304]	; (145e8 <_i2c_master_write_packet+0x168>)
   144b6:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   144b8:	68fb      	ldr	r3, [r7, #12]
   144ba:	685b      	ldr	r3, [r3, #4]
   144bc:	4a4b      	ldr	r2, [pc, #300]	; (145ec <_i2c_master_write_packet+0x16c>)
   144be:	401a      	ands	r2, r3
   144c0:	68fb      	ldr	r3, [r7, #12]
   144c2:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
   144c4:	683b      	ldr	r3, [r7, #0]
   144c6:	7a1b      	ldrb	r3, [r3, #8]
   144c8:	2b00      	cmp	r3, #0
   144ca:	d00d      	beq.n	144e8 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   144cc:	683b      	ldr	r3, [r7, #0]
   144ce:	881b      	ldrh	r3, [r3, #0]
   144d0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   144d2:	683b      	ldr	r3, [r7, #0]
   144d4:	7a5b      	ldrb	r3, [r3, #9]
   144d6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   144d8:	4313      	orrs	r3, r2
   144da:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   144dc:	2380      	movs	r3, #128	; 0x80
   144de:	021b      	lsls	r3, r3, #8
   144e0:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   144e2:	68fb      	ldr	r3, [r7, #12]
   144e4:	625a      	str	r2, [r3, #36]	; 0x24
   144e6:	e009      	b.n	144fc <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   144e8:	683b      	ldr	r3, [r7, #0]
   144ea:	881b      	ldrh	r3, [r3, #0]
   144ec:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   144ee:	683b      	ldr	r3, [r7, #0]
   144f0:	7a5b      	ldrb	r3, [r3, #9]
   144f2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   144f4:	4313      	orrs	r3, r2
   144f6:	001a      	movs	r2, r3
   144f8:	68fb      	ldr	r3, [r7, #12]
   144fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   144fc:	2317      	movs	r3, #23
   144fe:	18fc      	adds	r4, r7, r3
   14500:	687b      	ldr	r3, [r7, #4]
   14502:	0018      	movs	r0, r3
   14504:	4b3a      	ldr	r3, [pc, #232]	; (145f0 <_i2c_master_write_packet+0x170>)
   14506:	4798      	blx	r3
   14508:	0003      	movs	r3, r0
   1450a:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
   1450c:	2317      	movs	r3, #23
   1450e:	18fb      	adds	r3, r7, r3
   14510:	781b      	ldrb	r3, [r3, #0]
   14512:	2b00      	cmp	r3, #0
   14514:	d107      	bne.n	14526 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
   14516:	2317      	movs	r3, #23
   14518:	18fc      	adds	r4, r7, r3
   1451a:	687b      	ldr	r3, [r7, #4]
   1451c:	0018      	movs	r0, r3
   1451e:	4b35      	ldr	r3, [pc, #212]	; (145f4 <_i2c_master_write_packet+0x174>)
   14520:	4798      	blx	r3
   14522:	0003      	movs	r3, r0
   14524:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
   14526:	2317      	movs	r3, #23
   14528:	18fb      	adds	r3, r7, r3
   1452a:	781b      	ldrb	r3, [r3, #0]
   1452c:	2b00      	cmp	r3, #0
   1452e:	d152      	bne.n	145d6 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
   14530:	2312      	movs	r3, #18
   14532:	18fb      	adds	r3, r7, r3
   14534:	2200      	movs	r2, #0
   14536:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
   14538:	e033      	b.n	145a2 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
   1453a:	68fb      	ldr	r3, [r7, #12]
   1453c:	8b5b      	ldrh	r3, [r3, #26]
   1453e:	b29b      	uxth	r3, r3
   14540:	001a      	movs	r2, r3
   14542:	2320      	movs	r3, #32
   14544:	4013      	ands	r3, r2
   14546:	d101      	bne.n	1454c <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
   14548:	2341      	movs	r3, #65	; 0x41
   1454a:	e047      	b.n	145dc <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	0018      	movs	r0, r3
   14550:	4b24      	ldr	r3, [pc, #144]	; (145e4 <_i2c_master_write_packet+0x164>)
   14552:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
   14554:	683b      	ldr	r3, [r7, #0]
   14556:	685a      	ldr	r2, [r3, #4]
   14558:	2312      	movs	r3, #18
   1455a:	18fb      	adds	r3, r7, r3
   1455c:	881b      	ldrh	r3, [r3, #0]
   1455e:	2112      	movs	r1, #18
   14560:	1879      	adds	r1, r7, r1
   14562:	1c58      	adds	r0, r3, #1
   14564:	8008      	strh	r0, [r1, #0]
   14566:	18d3      	adds	r3, r2, r3
   14568:	7819      	ldrb	r1, [r3, #0]
   1456a:	68fb      	ldr	r3, [r7, #12]
   1456c:	2228      	movs	r2, #40	; 0x28
   1456e:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
   14570:	2317      	movs	r3, #23
   14572:	18fc      	adds	r4, r7, r3
   14574:	687b      	ldr	r3, [r7, #4]
   14576:	0018      	movs	r0, r3
   14578:	4b1d      	ldr	r3, [pc, #116]	; (145f0 <_i2c_master_write_packet+0x170>)
   1457a:	4798      	blx	r3
   1457c:	0003      	movs	r3, r0
   1457e:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
   14580:	2317      	movs	r3, #23
   14582:	18fb      	adds	r3, r7, r3
   14584:	781b      	ldrb	r3, [r3, #0]
   14586:	2b00      	cmp	r3, #0
   14588:	d115      	bne.n	145b6 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1458a:	68fb      	ldr	r3, [r7, #12]
   1458c:	8b5b      	ldrh	r3, [r3, #26]
   1458e:	b29b      	uxth	r3, r3
   14590:	001a      	movs	r2, r3
   14592:	2304      	movs	r3, #4
   14594:	4013      	ands	r3, r2
   14596:	d004      	beq.n	145a2 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
   14598:	2317      	movs	r3, #23
   1459a:	18fb      	adds	r3, r7, r3
   1459c:	221e      	movs	r2, #30
   1459e:	701a      	strb	r2, [r3, #0]
				break;
   145a0:	e00a      	b.n	145b8 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
   145a2:	2314      	movs	r3, #20
   145a4:	18fb      	adds	r3, r7, r3
   145a6:	881b      	ldrh	r3, [r3, #0]
   145a8:	2214      	movs	r2, #20
   145aa:	18ba      	adds	r2, r7, r2
   145ac:	1e59      	subs	r1, r3, #1
   145ae:	8011      	strh	r1, [r2, #0]
   145b0:	2b00      	cmp	r3, #0
   145b2:	d1c2      	bne.n	1453a <_i2c_master_write_packet+0xba>
   145b4:	e000      	b.n	145b8 <_i2c_master_write_packet+0x138>
				break;
   145b6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
   145b8:	687b      	ldr	r3, [r7, #4]
   145ba:	7a9b      	ldrb	r3, [r3, #10]
   145bc:	2b00      	cmp	r3, #0
   145be:	d00a      	beq.n	145d6 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
   145c0:	687b      	ldr	r3, [r7, #4]
   145c2:	0018      	movs	r0, r3
   145c4:	4b07      	ldr	r3, [pc, #28]	; (145e4 <_i2c_master_write_packet+0x164>)
   145c6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   145c8:	68fb      	ldr	r3, [r7, #12]
   145ca:	685b      	ldr	r3, [r3, #4]
   145cc:	22c0      	movs	r2, #192	; 0xc0
   145ce:	0292      	lsls	r2, r2, #10
   145d0:	431a      	orrs	r2, r3
   145d2:	68fb      	ldr	r3, [r7, #12]
   145d4:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
   145d6:	2317      	movs	r3, #23
   145d8:	18fb      	adds	r3, r7, r3
   145da:	781b      	ldrb	r3, [r3, #0]
}
   145dc:	0018      	movs	r0, r3
   145de:	46bd      	mov	sp, r7
   145e0:	b007      	add	sp, #28
   145e2:	bd90      	pop	{r4, r7, pc}
   145e4:	00013a95 	.word	0x00013a95
   145e8:	00014179 	.word	0x00014179
   145ec:	fffbffff 	.word	0xfffbffff
   145f0:	0001411b 	.word	0x0001411b
   145f4:	000140bd 	.word	0x000140bd

000145f8 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   145f8:	b580      	push	{r7, lr}
   145fa:	b082      	sub	sp, #8
   145fc:	af00      	add	r7, sp, #0
   145fe:	6078      	str	r0, [r7, #4]
   14600:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   14602:	687b      	ldr	r3, [r7, #4]
   14604:	8b9b      	ldrh	r3, [r3, #28]
   14606:	b29b      	uxth	r3, r3
   14608:	2b00      	cmp	r3, #0
   1460a:	d001      	beq.n	14610 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
   1460c:	2305      	movs	r3, #5
   1460e:	e00c      	b.n	1462a <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
   14610:	687b      	ldr	r3, [r7, #4]
   14612:	2200      	movs	r2, #0
   14614:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   14616:	687b      	ldr	r3, [r7, #4]
   14618:	2201      	movs	r2, #1
   1461a:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
   1461c:	683a      	ldr	r2, [r7, #0]
   1461e:	687b      	ldr	r3, [r7, #4]
   14620:	0011      	movs	r1, r2
   14622:	0018      	movs	r0, r3
   14624:	4b03      	ldr	r3, [pc, #12]	; (14634 <i2c_master_write_packet_wait_no_stop+0x3c>)
   14626:	4798      	blx	r3
   14628:	0003      	movs	r3, r0
}
   1462a:	0018      	movs	r0, r3
   1462c:	46bd      	mov	sp, r7
   1462e:	b002      	add	sp, #8
   14630:	bd80      	pop	{r7, pc}
   14632:	46c0      	nop			; (mov r8, r8)
   14634:	00014481 	.word	0x00014481

00014638 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   14638:	b580      	push	{r7, lr}
   1463a:	af00      	add	r7, sp, #0
   1463c:	2000      	movs	r0, #0
   1463e:	4b02      	ldr	r3, [pc, #8]	; (14648 <TC3_Handler+0x10>)
   14640:	4798      	blx	r3
   14642:	46c0      	nop			; (mov r8, r8)
   14644:	46bd      	mov	sp, r7
   14646:	bd80      	pop	{r7, pc}
   14648:	00014675 	.word	0x00014675

0001464c <TC4_Handler>:
   1464c:	b580      	push	{r7, lr}
   1464e:	af00      	add	r7, sp, #0
   14650:	2001      	movs	r0, #1
   14652:	4b02      	ldr	r3, [pc, #8]	; (1465c <TC4_Handler+0x10>)
   14654:	4798      	blx	r3
   14656:	46c0      	nop			; (mov r8, r8)
   14658:	46bd      	mov	sp, r7
   1465a:	bd80      	pop	{r7, pc}
   1465c:	00014675 	.word	0x00014675

00014660 <TC5_Handler>:
   14660:	b580      	push	{r7, lr}
   14662:	af00      	add	r7, sp, #0
   14664:	2002      	movs	r0, #2
   14666:	4b02      	ldr	r3, [pc, #8]	; (14670 <TC5_Handler+0x10>)
   14668:	4798      	blx	r3
   1466a:	46c0      	nop			; (mov r8, r8)
   1466c:	46bd      	mov	sp, r7
   1466e:	bd80      	pop	{r7, pc}
   14670:	00014675 	.word	0x00014675

00014674 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   14674:	b580      	push	{r7, lr}
   14676:	b084      	sub	sp, #16
   14678:	af00      	add	r7, sp, #0
   1467a:	0002      	movs	r2, r0
   1467c:	1dfb      	adds	r3, r7, #7
   1467e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   14680:	1dfb      	adds	r3, r7, #7
   14682:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   14684:	4b28      	ldr	r3, [pc, #160]	; (14728 <_tc_interrupt_handler+0xb4>)
   14686:	0092      	lsls	r2, r2, #2
   14688:	58d3      	ldr	r3, [r2, r3]
   1468a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1468c:	68fb      	ldr	r3, [r7, #12]
   1468e:	681b      	ldr	r3, [r3, #0]
   14690:	7b9b      	ldrb	r3, [r3, #14]
   14692:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   14694:	68fa      	ldr	r2, [r7, #12]
   14696:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   14698:	4013      	ands	r3, r2
   1469a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1469c:	68fb      	ldr	r3, [r7, #12]
   1469e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   146a0:	230b      	movs	r3, #11
   146a2:	18fb      	adds	r3, r7, r3
   146a4:	400a      	ands	r2, r1
   146a6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   146a8:	230b      	movs	r3, #11
   146aa:	18fb      	adds	r3, r7, r3
   146ac:	781b      	ldrb	r3, [r3, #0]
   146ae:	2201      	movs	r2, #1
   146b0:	4013      	ands	r3, r2
   146b2:	d008      	beq.n	146c6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   146b4:	68fb      	ldr	r3, [r7, #12]
   146b6:	689b      	ldr	r3, [r3, #8]
   146b8:	68fa      	ldr	r2, [r7, #12]
   146ba:	0010      	movs	r0, r2
   146bc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   146be:	68fb      	ldr	r3, [r7, #12]
   146c0:	681b      	ldr	r3, [r3, #0]
   146c2:	2201      	movs	r2, #1
   146c4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   146c6:	230b      	movs	r3, #11
   146c8:	18fb      	adds	r3, r7, r3
   146ca:	781b      	ldrb	r3, [r3, #0]
   146cc:	2202      	movs	r2, #2
   146ce:	4013      	ands	r3, r2
   146d0:	d008      	beq.n	146e4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   146d2:	68fb      	ldr	r3, [r7, #12]
   146d4:	68db      	ldr	r3, [r3, #12]
   146d6:	68fa      	ldr	r2, [r7, #12]
   146d8:	0010      	movs	r0, r2
   146da:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   146dc:	68fb      	ldr	r3, [r7, #12]
   146de:	681b      	ldr	r3, [r3, #0]
   146e0:	2202      	movs	r2, #2
   146e2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   146e4:	230b      	movs	r3, #11
   146e6:	18fb      	adds	r3, r7, r3
   146e8:	781b      	ldrb	r3, [r3, #0]
   146ea:	2210      	movs	r2, #16
   146ec:	4013      	ands	r3, r2
   146ee:	d008      	beq.n	14702 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   146f0:	68fb      	ldr	r3, [r7, #12]
   146f2:	691b      	ldr	r3, [r3, #16]
   146f4:	68fa      	ldr	r2, [r7, #12]
   146f6:	0010      	movs	r0, r2
   146f8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   146fa:	68fb      	ldr	r3, [r7, #12]
   146fc:	681b      	ldr	r3, [r3, #0]
   146fe:	2210      	movs	r2, #16
   14700:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   14702:	230b      	movs	r3, #11
   14704:	18fb      	adds	r3, r7, r3
   14706:	781b      	ldrb	r3, [r3, #0]
   14708:	2220      	movs	r2, #32
   1470a:	4013      	ands	r3, r2
   1470c:	d008      	beq.n	14720 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1470e:	68fb      	ldr	r3, [r7, #12]
   14710:	695b      	ldr	r3, [r3, #20]
   14712:	68fa      	ldr	r2, [r7, #12]
   14714:	0010      	movs	r0, r2
   14716:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   14718:	68fb      	ldr	r3, [r7, #12]
   1471a:	681b      	ldr	r3, [r3, #0]
   1471c:	2220      	movs	r2, #32
   1471e:	739a      	strb	r2, [r3, #14]
	}
}
   14720:	46c0      	nop			; (mov r8, r8)
   14722:	46bd      	mov	sp, r7
   14724:	b004      	add	sp, #16
   14726:	bd80      	pop	{r7, pc}
   14728:	200044a0 	.word	0x200044a0

0001472c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1472c:	b580      	push	{r7, lr}
   1472e:	b084      	sub	sp, #16
   14730:	af00      	add	r7, sp, #0
   14732:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   14734:	2300      	movs	r3, #0
   14736:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   14738:	687b      	ldr	r3, [r7, #4]
   1473a:	2b00      	cmp	r3, #0
   1473c:	d101      	bne.n	14742 <FreeRTOS_CLIRegisterCommand+0x16>
   1473e:	b672      	cpsid	i
   14740:	e7fe      	b.n	14740 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   14742:	2008      	movs	r0, #8
   14744:	4b11      	ldr	r3, [pc, #68]	; (1478c <FreeRTOS_CLIRegisterCommand+0x60>)
   14746:	4798      	blx	r3
   14748:	0003      	movs	r3, r0
   1474a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1474c:	68bb      	ldr	r3, [r7, #8]
   1474e:	2b00      	cmp	r3, #0
   14750:	d101      	bne.n	14756 <FreeRTOS_CLIRegisterCommand+0x2a>
   14752:	b672      	cpsid	i
   14754:	e7fe      	b.n	14754 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   14756:	68bb      	ldr	r3, [r7, #8]
   14758:	2b00      	cmp	r3, #0
   1475a:	d012      	beq.n	14782 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1475c:	4b0c      	ldr	r3, [pc, #48]	; (14790 <FreeRTOS_CLIRegisterCommand+0x64>)
   1475e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   14760:	68bb      	ldr	r3, [r7, #8]
   14762:	687a      	ldr	r2, [r7, #4]
   14764:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   14766:	68bb      	ldr	r3, [r7, #8]
   14768:	2200      	movs	r2, #0
   1476a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1476c:	4b09      	ldr	r3, [pc, #36]	; (14794 <FreeRTOS_CLIRegisterCommand+0x68>)
   1476e:	681b      	ldr	r3, [r3, #0]
   14770:	68ba      	ldr	r2, [r7, #8]
   14772:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   14774:	4b07      	ldr	r3, [pc, #28]	; (14794 <FreeRTOS_CLIRegisterCommand+0x68>)
   14776:	68ba      	ldr	r2, [r7, #8]
   14778:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1477a:	4b07      	ldr	r3, [pc, #28]	; (14798 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1477c:	4798      	blx	r3

		xReturn = pdPASS;
   1477e:	2301      	movs	r3, #1
   14780:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   14782:	68fb      	ldr	r3, [r7, #12]
}
   14784:	0018      	movs	r0, r3
   14786:	46bd      	mov	sp, r7
   14788:	b004      	add	sp, #16
   1478a:	bd80      	pop	{r7, pc}
   1478c:	00016b41 	.word	0x00016b41
   14790:	00016a09 	.word	0x00016a09
   14794:	200000a4 	.word	0x200000a4
   14798:	00016a2d 	.word	0x00016a2d

0001479c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1479c:	b580      	push	{r7, lr}
   1479e:	b088      	sub	sp, #32
   147a0:	af00      	add	r7, sp, #0
   147a2:	60f8      	str	r0, [r7, #12]
   147a4:	60b9      	str	r1, [r7, #8]
   147a6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   147a8:	2301      	movs	r3, #1
   147aa:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   147ac:	4b3d      	ldr	r3, [pc, #244]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	2b00      	cmp	r3, #0
   147b2:	d144      	bne.n	1483e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   147b4:	4b3b      	ldr	r3, [pc, #236]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   147b6:	4a3c      	ldr	r2, [pc, #240]	; (148a8 <FreeRTOS_CLIProcessCommand+0x10c>)
   147b8:	601a      	str	r2, [r3, #0]
   147ba:	e03a      	b.n	14832 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   147bc:	4b39      	ldr	r3, [pc, #228]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   147be:	681b      	ldr	r3, [r3, #0]
   147c0:	681b      	ldr	r3, [r3, #0]
   147c2:	681b      	ldr	r3, [r3, #0]
   147c4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   147c6:	69bb      	ldr	r3, [r7, #24]
   147c8:	0018      	movs	r0, r3
   147ca:	4b38      	ldr	r3, [pc, #224]	; (148ac <FreeRTOS_CLIProcessCommand+0x110>)
   147cc:	4798      	blx	r3
   147ce:	0003      	movs	r3, r0
   147d0:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   147d2:	68fa      	ldr	r2, [r7, #12]
   147d4:	697b      	ldr	r3, [r7, #20]
   147d6:	18d3      	adds	r3, r2, r3
   147d8:	781b      	ldrb	r3, [r3, #0]
   147da:	2b20      	cmp	r3, #32
   147dc:	d005      	beq.n	147ea <FreeRTOS_CLIProcessCommand+0x4e>
   147de:	68fa      	ldr	r2, [r7, #12]
   147e0:	697b      	ldr	r3, [r7, #20]
   147e2:	18d3      	adds	r3, r2, r3
   147e4:	781b      	ldrb	r3, [r3, #0]
   147e6:	2b00      	cmp	r3, #0
   147e8:	d11e      	bne.n	14828 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   147ea:	697a      	ldr	r2, [r7, #20]
   147ec:	69b9      	ldr	r1, [r7, #24]
   147ee:	68fb      	ldr	r3, [r7, #12]
   147f0:	0018      	movs	r0, r3
   147f2:	4b2f      	ldr	r3, [pc, #188]	; (148b0 <FreeRTOS_CLIProcessCommand+0x114>)
   147f4:	4798      	blx	r3
   147f6:	1e03      	subs	r3, r0, #0
   147f8:	d116      	bne.n	14828 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   147fa:	4b2a      	ldr	r3, [pc, #168]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   147fc:	681b      	ldr	r3, [r3, #0]
   147fe:	681b      	ldr	r3, [r3, #0]
   14800:	7b1b      	ldrb	r3, [r3, #12]
   14802:	b25b      	sxtb	r3, r3
   14804:	2b00      	cmp	r3, #0
   14806:	db19      	blt.n	1483c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   14808:	68fb      	ldr	r3, [r7, #12]
   1480a:	0018      	movs	r0, r3
   1480c:	4b29      	ldr	r3, [pc, #164]	; (148b4 <FreeRTOS_CLIProcessCommand+0x118>)
   1480e:	4798      	blx	r3
   14810:	0003      	movs	r3, r0
   14812:	001a      	movs	r2, r3
   14814:	4b23      	ldr	r3, [pc, #140]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   14816:	681b      	ldr	r3, [r3, #0]
   14818:	681b      	ldr	r3, [r3, #0]
   1481a:	7b1b      	ldrb	r3, [r3, #12]
   1481c:	b25b      	sxtb	r3, r3
   1481e:	429a      	cmp	r2, r3
   14820:	d00c      	beq.n	1483c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   14822:	2300      	movs	r3, #0
   14824:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   14826:	e009      	b.n	1483c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   14828:	4b1e      	ldr	r3, [pc, #120]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   1482a:	681b      	ldr	r3, [r3, #0]
   1482c:	685a      	ldr	r2, [r3, #4]
   1482e:	4b1d      	ldr	r3, [pc, #116]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   14830:	601a      	str	r2, [r3, #0]
   14832:	4b1c      	ldr	r3, [pc, #112]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   14834:	681b      	ldr	r3, [r3, #0]
   14836:	2b00      	cmp	r3, #0
   14838:	d1c0      	bne.n	147bc <FreeRTOS_CLIProcessCommand+0x20>
   1483a:	e000      	b.n	1483e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1483c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1483e:	4b19      	ldr	r3, [pc, #100]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   14840:	681b      	ldr	r3, [r3, #0]
   14842:	2b00      	cmp	r3, #0
   14844:	d00c      	beq.n	14860 <FreeRTOS_CLIProcessCommand+0xc4>
   14846:	69fb      	ldr	r3, [r7, #28]
   14848:	2b00      	cmp	r3, #0
   1484a:	d109      	bne.n	14860 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1484c:	687a      	ldr	r2, [r7, #4]
   1484e:	491a      	ldr	r1, [pc, #104]	; (148b8 <FreeRTOS_CLIProcessCommand+0x11c>)
   14850:	68bb      	ldr	r3, [r7, #8]
   14852:	0018      	movs	r0, r3
   14854:	4b19      	ldr	r3, [pc, #100]	; (148bc <FreeRTOS_CLIProcessCommand+0x120>)
   14856:	4798      	blx	r3
		pxCommand = NULL;
   14858:	4b12      	ldr	r3, [pc, #72]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   1485a:	2200      	movs	r2, #0
   1485c:	601a      	str	r2, [r3, #0]
   1485e:	e01c      	b.n	1489a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   14860:	4b10      	ldr	r3, [pc, #64]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   14862:	681b      	ldr	r3, [r3, #0]
   14864:	2b00      	cmp	r3, #0
   14866:	d010      	beq.n	1488a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   14868:	4b0e      	ldr	r3, [pc, #56]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   1486a:	681b      	ldr	r3, [r3, #0]
   1486c:	681b      	ldr	r3, [r3, #0]
   1486e:	689b      	ldr	r3, [r3, #8]
   14870:	68fa      	ldr	r2, [r7, #12]
   14872:	6879      	ldr	r1, [r7, #4]
   14874:	68b8      	ldr	r0, [r7, #8]
   14876:	4798      	blx	r3
   14878:	0003      	movs	r3, r0
   1487a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1487c:	69fb      	ldr	r3, [r7, #28]
   1487e:	2b00      	cmp	r3, #0
   14880:	d10b      	bne.n	1489a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   14882:	4b08      	ldr	r3, [pc, #32]	; (148a4 <FreeRTOS_CLIProcessCommand+0x108>)
   14884:	2200      	movs	r2, #0
   14886:	601a      	str	r2, [r3, #0]
   14888:	e007      	b.n	1489a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1488a:	687a      	ldr	r2, [r7, #4]
   1488c:	490c      	ldr	r1, [pc, #48]	; (148c0 <FreeRTOS_CLIProcessCommand+0x124>)
   1488e:	68bb      	ldr	r3, [r7, #8]
   14890:	0018      	movs	r0, r3
   14892:	4b0a      	ldr	r3, [pc, #40]	; (148bc <FreeRTOS_CLIProcessCommand+0x120>)
   14894:	4798      	blx	r3
		xReturn = pdFALSE;
   14896:	2300      	movs	r3, #0
   14898:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1489a:	69fb      	ldr	r3, [r7, #28]
}
   1489c:	0018      	movs	r0, r3
   1489e:	46bd      	mov	sp, r7
   148a0:	b008      	add	sp, #32
   148a2:	bd80      	pop	{r7, pc}
   148a4:	20000b34 	.word	0x20000b34
   148a8:	2000009c 	.word	0x2000009c
   148ac:	00032c5f 	.word	0x00032c5f
   148b0:	00032cb5 	.word	0x00032cb5
   148b4:	00014925 	.word	0x00014925
   148b8:	00035094 	.word	0x00035094
   148bc:	00032cd7 	.word	0x00032cd7
   148c0:	000350ec 	.word	0x000350ec

000148c4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   148c4:	b580      	push	{r7, lr}
   148c6:	b086      	sub	sp, #24
   148c8:	af00      	add	r7, sp, #0
   148ca:	60f8      	str	r0, [r7, #12]
   148cc:	60b9      	str	r1, [r7, #8]
   148ce:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   148d0:	4b11      	ldr	r3, [pc, #68]	; (14918 <prvHelpCommand+0x54>)
   148d2:	681b      	ldr	r3, [r3, #0]
   148d4:	2b00      	cmp	r3, #0
   148d6:	d102      	bne.n	148de <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   148d8:	4b0f      	ldr	r3, [pc, #60]	; (14918 <prvHelpCommand+0x54>)
   148da:	4a10      	ldr	r2, [pc, #64]	; (1491c <prvHelpCommand+0x58>)
   148dc:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   148de:	4b0e      	ldr	r3, [pc, #56]	; (14918 <prvHelpCommand+0x54>)
   148e0:	681b      	ldr	r3, [r3, #0]
   148e2:	681b      	ldr	r3, [r3, #0]
   148e4:	6859      	ldr	r1, [r3, #4]
   148e6:	68ba      	ldr	r2, [r7, #8]
   148e8:	68fb      	ldr	r3, [r7, #12]
   148ea:	0018      	movs	r0, r3
   148ec:	4b0c      	ldr	r3, [pc, #48]	; (14920 <prvHelpCommand+0x5c>)
   148ee:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   148f0:	4b09      	ldr	r3, [pc, #36]	; (14918 <prvHelpCommand+0x54>)
   148f2:	681b      	ldr	r3, [r3, #0]
   148f4:	685a      	ldr	r2, [r3, #4]
   148f6:	4b08      	ldr	r3, [pc, #32]	; (14918 <prvHelpCommand+0x54>)
   148f8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   148fa:	4b07      	ldr	r3, [pc, #28]	; (14918 <prvHelpCommand+0x54>)
   148fc:	681b      	ldr	r3, [r3, #0]
   148fe:	2b00      	cmp	r3, #0
   14900:	d102      	bne.n	14908 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   14902:	2300      	movs	r3, #0
   14904:	617b      	str	r3, [r7, #20]
   14906:	e001      	b.n	1490c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   14908:	2301      	movs	r3, #1
   1490a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1490c:	697b      	ldr	r3, [r7, #20]
}
   1490e:	0018      	movs	r0, r3
   14910:	46bd      	mov	sp, r7
   14912:	b006      	add	sp, #24
   14914:	bd80      	pop	{r7, pc}
   14916:	46c0      	nop			; (mov r8, r8)
   14918:	20000b38 	.word	0x20000b38
   1491c:	2000009c 	.word	0x2000009c
   14920:	00032cd7 	.word	0x00032cd7

00014924 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   14924:	b580      	push	{r7, lr}
   14926:	b084      	sub	sp, #16
   14928:	af00      	add	r7, sp, #0
   1492a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1492c:	230f      	movs	r3, #15
   1492e:	18fb      	adds	r3, r7, r3
   14930:	2200      	movs	r2, #0
   14932:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   14934:	2300      	movs	r3, #0
   14936:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   14938:	e018      	b.n	1496c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1493a:	687b      	ldr	r3, [r7, #4]
   1493c:	781b      	ldrb	r3, [r3, #0]
   1493e:	2b20      	cmp	r3, #32
   14940:	d10f      	bne.n	14962 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   14942:	68bb      	ldr	r3, [r7, #8]
   14944:	2b01      	cmp	r3, #1
   14946:	d00e      	beq.n	14966 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   14948:	230f      	movs	r3, #15
   1494a:	18fb      	adds	r3, r7, r3
   1494c:	781b      	ldrb	r3, [r3, #0]
   1494e:	b25b      	sxtb	r3, r3
   14950:	b2db      	uxtb	r3, r3
   14952:	3301      	adds	r3, #1
   14954:	b2da      	uxtb	r2, r3
   14956:	230f      	movs	r3, #15
   14958:	18fb      	adds	r3, r7, r3
   1495a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1495c:	2301      	movs	r3, #1
   1495e:	60bb      	str	r3, [r7, #8]
   14960:	e001      	b.n	14966 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   14962:	2300      	movs	r3, #0
   14964:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   14966:	687b      	ldr	r3, [r7, #4]
   14968:	3301      	adds	r3, #1
   1496a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1496c:	687b      	ldr	r3, [r7, #4]
   1496e:	781b      	ldrb	r3, [r3, #0]
   14970:	2b00      	cmp	r3, #0
   14972:	d1e2      	bne.n	1493a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   14974:	68bb      	ldr	r3, [r7, #8]
   14976:	2b01      	cmp	r3, #1
   14978:	d109      	bne.n	1498e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1497a:	230f      	movs	r3, #15
   1497c:	18fb      	adds	r3, r7, r3
   1497e:	781b      	ldrb	r3, [r3, #0]
   14980:	b25b      	sxtb	r3, r3
   14982:	b2db      	uxtb	r3, r3
   14984:	3b01      	subs	r3, #1
   14986:	b2da      	uxtb	r2, r3
   14988:	230f      	movs	r3, #15
   1498a:	18fb      	adds	r3, r7, r3
   1498c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1498e:	230f      	movs	r3, #15
   14990:	18fb      	adds	r3, r7, r3
   14992:	781b      	ldrb	r3, [r3, #0]
   14994:	b25b      	sxtb	r3, r3
}
   14996:	0018      	movs	r0, r3
   14998:	46bd      	mov	sp, r7
   1499a:	b004      	add	sp, #16
   1499c:	bd80      	pop	{r7, pc}
	...

000149a0 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   149a0:	b580      	push	{r7, lr}
   149a2:	b082      	sub	sp, #8
   149a4:	af00      	add	r7, sp, #0
   149a6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   149a8:	687b      	ldr	r3, [r7, #4]
   149aa:	0018      	movs	r0, r3
   149ac:	4b03      	ldr	r3, [pc, #12]	; (149bc <prvTraceGetQueueNumber+0x1c>)
   149ae:	4798      	blx	r3
   149b0:	0003      	movs	r3, r0
}
   149b2:	0018      	movs	r0, r3
   149b4:	46bd      	mov	sp, r7
   149b6:	b002      	add	sp, #8
   149b8:	bd80      	pop	{r7, pc}
   149ba:	46c0      	nop			; (mov r8, r8)
   149bc:	00018169 	.word	0x00018169

000149c0 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   149c0:	b580      	push	{r7, lr}
   149c2:	b082      	sub	sp, #8
   149c4:	af00      	add	r7, sp, #0
   149c6:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   149c8:	687b      	ldr	r3, [r7, #4]
   149ca:	0018      	movs	r0, r3
   149cc:	4b03      	ldr	r3, [pc, #12]	; (149dc <prvTraceGetQueueType+0x1c>)
   149ce:	4798      	blx	r3
   149d0:	0003      	movs	r3, r0
}
   149d2:	0018      	movs	r0, r3
   149d4:	46bd      	mov	sp, r7
   149d6:	b002      	add	sp, #8
   149d8:	bd80      	pop	{r7, pc}
   149da:	46c0      	nop			; (mov r8, r8)
   149dc:	00018195 	.word	0x00018195

000149e0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   149e0:	b580      	push	{r7, lr}
   149e2:	b082      	sub	sp, #8
   149e4:	af00      	add	r7, sp, #0
   149e6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   149e8:	687b      	ldr	r3, [r7, #4]
   149ea:	0018      	movs	r0, r3
   149ec:	4b03      	ldr	r3, [pc, #12]	; (149fc <prvTraceGetTaskNumberLow16+0x1c>)
   149ee:	4798      	blx	r3
   149f0:	0003      	movs	r3, r0
   149f2:	b29b      	uxth	r3, r3
}
   149f4:	0018      	movs	r0, r3
   149f6:	46bd      	mov	sp, r7
   149f8:	b002      	add	sp, #8
   149fa:	bd80      	pop	{r7, pc}
   149fc:	000194c5 	.word	0x000194c5

00014a00 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   14a00:	b580      	push	{r7, lr}
   14a02:	b082      	sub	sp, #8
   14a04:	af00      	add	r7, sp, #0
   14a06:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   14a08:	687b      	ldr	r3, [r7, #4]
   14a0a:	0018      	movs	r0, r3
   14a0c:	4b04      	ldr	r3, [pc, #16]	; (14a20 <prvTraceGetTaskNumberHigh16+0x20>)
   14a0e:	4798      	blx	r3
   14a10:	0003      	movs	r3, r0
   14a12:	0c1b      	lsrs	r3, r3, #16
   14a14:	b29b      	uxth	r3, r3
}
   14a16:	0018      	movs	r0, r3
   14a18:	46bd      	mov	sp, r7
   14a1a:	b002      	add	sp, #8
   14a1c:	bd80      	pop	{r7, pc}
   14a1e:	46c0      	nop			; (mov r8, r8)
   14a20:	000194c5 	.word	0x000194c5

00014a24 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   14a24:	b580      	push	{r7, lr}
   14a26:	b082      	sub	sp, #8
   14a28:	af00      	add	r7, sp, #0
   14a2a:	6078      	str	r0, [r7, #4]
   14a2c:	000a      	movs	r2, r1
   14a2e:	1cbb      	adds	r3, r7, #2
   14a30:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   14a32:	687b      	ldr	r3, [r7, #4]
   14a34:	0018      	movs	r0, r3
   14a36:	4b08      	ldr	r3, [pc, #32]	; (14a58 <prvTraceSetTaskNumberLow16+0x34>)
   14a38:	4798      	blx	r3
   14a3a:	0003      	movs	r3, r0
   14a3c:	0c1b      	lsrs	r3, r3, #16
   14a3e:	041a      	lsls	r2, r3, #16
   14a40:	1cbb      	adds	r3, r7, #2
   14a42:	881b      	ldrh	r3, [r3, #0]
   14a44:	431a      	orrs	r2, r3
   14a46:	687b      	ldr	r3, [r7, #4]
   14a48:	0011      	movs	r1, r2
   14a4a:	0018      	movs	r0, r3
   14a4c:	4b03      	ldr	r3, [pc, #12]	; (14a5c <prvTraceSetTaskNumberLow16+0x38>)
   14a4e:	4798      	blx	r3
}
   14a50:	46c0      	nop			; (mov r8, r8)
   14a52:	46bd      	mov	sp, r7
   14a54:	b002      	add	sp, #8
   14a56:	bd80      	pop	{r7, pc}
   14a58:	000194c5 	.word	0x000194c5
   14a5c:	000194ed 	.word	0x000194ed

00014a60 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   14a60:	b580      	push	{r7, lr}
   14a62:	b082      	sub	sp, #8
   14a64:	af00      	add	r7, sp, #0
   14a66:	6078      	str	r0, [r7, #4]
   14a68:	000a      	movs	r2, r1
   14a6a:	1cbb      	adds	r3, r7, #2
   14a6c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   14a6e:	687b      	ldr	r3, [r7, #4]
   14a70:	0018      	movs	r0, r3
   14a72:	4b09      	ldr	r3, [pc, #36]	; (14a98 <prvTraceSetTaskNumberHigh16+0x38>)
   14a74:	4798      	blx	r3
   14a76:	0003      	movs	r3, r0
   14a78:	041b      	lsls	r3, r3, #16
   14a7a:	0c1a      	lsrs	r2, r3, #16
   14a7c:	1cbb      	adds	r3, r7, #2
   14a7e:	881b      	ldrh	r3, [r3, #0]
   14a80:	041b      	lsls	r3, r3, #16
   14a82:	431a      	orrs	r2, r3
   14a84:	687b      	ldr	r3, [r7, #4]
   14a86:	0011      	movs	r1, r2
   14a88:	0018      	movs	r0, r3
   14a8a:	4b04      	ldr	r3, [pc, #16]	; (14a9c <prvTraceSetTaskNumberHigh16+0x3c>)
   14a8c:	4798      	blx	r3
}
   14a8e:	46c0      	nop			; (mov r8, r8)
   14a90:	46bd      	mov	sp, r7
   14a92:	b002      	add	sp, #8
   14a94:	bd80      	pop	{r7, pc}
   14a96:	46c0      	nop			; (mov r8, r8)
   14a98:	000194c5 	.word	0x000194c5
   14a9c:	000194ed 	.word	0x000194ed

00014aa0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   14aa0:	b580      	push	{r7, lr}
   14aa2:	b082      	sub	sp, #8
   14aa4:	af00      	add	r7, sp, #0
   14aa6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   14aa8:	687b      	ldr	r3, [r7, #4]
   14aaa:	0018      	movs	r0, r3
   14aac:	4b03      	ldr	r3, [pc, #12]	; (14abc <prvTraceGetQueueNumberLow16+0x1c>)
   14aae:	4798      	blx	r3
   14ab0:	0003      	movs	r3, r0
   14ab2:	b29b      	uxth	r3, r3
}
   14ab4:	0018      	movs	r0, r3
   14ab6:	46bd      	mov	sp, r7
   14ab8:	b002      	add	sp, #8
   14aba:	bd80      	pop	{r7, pc}
   14abc:	000149a1 	.word	0x000149a1

00014ac0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   14ac0:	b580      	push	{r7, lr}
   14ac2:	b082      	sub	sp, #8
   14ac4:	af00      	add	r7, sp, #0
   14ac6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   14ac8:	687b      	ldr	r3, [r7, #4]
   14aca:	0018      	movs	r0, r3
   14acc:	4b04      	ldr	r3, [pc, #16]	; (14ae0 <prvTraceGetQueueNumberHigh16+0x20>)
   14ace:	4798      	blx	r3
   14ad0:	0003      	movs	r3, r0
   14ad2:	0c1b      	lsrs	r3, r3, #16
   14ad4:	b29b      	uxth	r3, r3
}
   14ad6:	0018      	movs	r0, r3
   14ad8:	46bd      	mov	sp, r7
   14ada:	b002      	add	sp, #8
   14adc:	bd80      	pop	{r7, pc}
   14ade:	46c0      	nop			; (mov r8, r8)
   14ae0:	000149a1 	.word	0x000149a1

00014ae4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   14ae4:	b580      	push	{r7, lr}
   14ae6:	b082      	sub	sp, #8
   14ae8:	af00      	add	r7, sp, #0
   14aea:	6078      	str	r0, [r7, #4]
   14aec:	000a      	movs	r2, r1
   14aee:	1cbb      	adds	r3, r7, #2
   14af0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   14af2:	687b      	ldr	r3, [r7, #4]
   14af4:	0018      	movs	r0, r3
   14af6:	4b08      	ldr	r3, [pc, #32]	; (14b18 <prvTraceSetQueueNumberLow16+0x34>)
   14af8:	4798      	blx	r3
   14afa:	0003      	movs	r3, r0
   14afc:	0c1b      	lsrs	r3, r3, #16
   14afe:	041a      	lsls	r2, r3, #16
   14b00:	1cbb      	adds	r3, r7, #2
   14b02:	881b      	ldrh	r3, [r3, #0]
   14b04:	431a      	orrs	r2, r3
   14b06:	687b      	ldr	r3, [r7, #4]
   14b08:	0011      	movs	r1, r2
   14b0a:	0018      	movs	r0, r3
   14b0c:	4b03      	ldr	r3, [pc, #12]	; (14b1c <prvTraceSetQueueNumberLow16+0x38>)
   14b0e:	4798      	blx	r3
}
   14b10:	46c0      	nop			; (mov r8, r8)
   14b12:	46bd      	mov	sp, r7
   14b14:	b002      	add	sp, #8
   14b16:	bd80      	pop	{r7, pc}
   14b18:	000149a1 	.word	0x000149a1
   14b1c:	0001817d 	.word	0x0001817d

00014b20 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   14b20:	b580      	push	{r7, lr}
   14b22:	b082      	sub	sp, #8
   14b24:	af00      	add	r7, sp, #0
   14b26:	6078      	str	r0, [r7, #4]
   14b28:	000a      	movs	r2, r1
   14b2a:	1cbb      	adds	r3, r7, #2
   14b2c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   14b2e:	687b      	ldr	r3, [r7, #4]
   14b30:	0018      	movs	r0, r3
   14b32:	4b09      	ldr	r3, [pc, #36]	; (14b58 <prvTraceSetQueueNumberHigh16+0x38>)
   14b34:	4798      	blx	r3
   14b36:	0003      	movs	r3, r0
   14b38:	041b      	lsls	r3, r3, #16
   14b3a:	0c1a      	lsrs	r2, r3, #16
   14b3c:	1cbb      	adds	r3, r7, #2
   14b3e:	881b      	ldrh	r3, [r3, #0]
   14b40:	041b      	lsls	r3, r3, #16
   14b42:	431a      	orrs	r2, r3
   14b44:	687b      	ldr	r3, [r7, #4]
   14b46:	0011      	movs	r1, r2
   14b48:	0018      	movs	r0, r3
   14b4a:	4b04      	ldr	r3, [pc, #16]	; (14b5c <prvTraceSetQueueNumberHigh16+0x3c>)
   14b4c:	4798      	blx	r3
}
   14b4e:	46c0      	nop			; (mov r8, r8)
   14b50:	46bd      	mov	sp, r7
   14b52:	b002      	add	sp, #8
   14b54:	bd80      	pop	{r7, pc}
   14b56:	46c0      	nop			; (mov r8, r8)
   14b58:	000149a1 	.word	0x000149a1
   14b5c:	0001817d 	.word	0x0001817d

00014b60 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   14b60:	b580      	push	{r7, lr}
   14b62:	b084      	sub	sp, #16
   14b64:	af00      	add	r7, sp, #0
   14b66:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   14b68:	2300      	movs	r3, #0
   14b6a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   14b6c:	2300      	movs	r3, #0
   14b6e:	60bb      	str	r3, [r7, #8]
   14b70:	e018      	b.n	14ba4 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   14b72:	4b14      	ldr	r3, [pc, #80]	; (14bc4 <prvAddTaskToStackMonitor+0x64>)
   14b74:	68ba      	ldr	r2, [r7, #8]
   14b76:	00d2      	lsls	r2, r2, #3
   14b78:	58d3      	ldr	r3, [r2, r3]
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	d10f      	bne.n	14b9e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   14b7e:	4b11      	ldr	r3, [pc, #68]	; (14bc4 <prvAddTaskToStackMonitor+0x64>)
   14b80:	68ba      	ldr	r2, [r7, #8]
   14b82:	00d2      	lsls	r2, r2, #3
   14b84:	6879      	ldr	r1, [r7, #4]
   14b86:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   14b88:	4a0e      	ldr	r2, [pc, #56]	; (14bc4 <prvAddTaskToStackMonitor+0x64>)
   14b8a:	68bb      	ldr	r3, [r7, #8]
   14b8c:	00db      	lsls	r3, r3, #3
   14b8e:	18d3      	adds	r3, r2, r3
   14b90:	3304      	adds	r3, #4
   14b92:	2201      	movs	r2, #1
   14b94:	4252      	negs	r2, r2
   14b96:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   14b98:	2301      	movs	r3, #1
   14b9a:	60fb      	str	r3, [r7, #12]
			break;
   14b9c:	e005      	b.n	14baa <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   14b9e:	68bb      	ldr	r3, [r7, #8]
   14ba0:	3301      	adds	r3, #1
   14ba2:	60bb      	str	r3, [r7, #8]
   14ba4:	68bb      	ldr	r3, [r7, #8]
   14ba6:	2b09      	cmp	r3, #9
   14ba8:	dde3      	ble.n	14b72 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   14baa:	68fb      	ldr	r3, [r7, #12]
   14bac:	2b00      	cmp	r3, #0
   14bae:	d104      	bne.n	14bba <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   14bb0:	4b05      	ldr	r3, [pc, #20]	; (14bc8 <prvAddTaskToStackMonitor+0x68>)
   14bb2:	681b      	ldr	r3, [r3, #0]
   14bb4:	1c5a      	adds	r2, r3, #1
   14bb6:	4b04      	ldr	r3, [pc, #16]	; (14bc8 <prvAddTaskToStackMonitor+0x68>)
   14bb8:	601a      	str	r2, [r3, #0]
	}
}
   14bba:	46c0      	nop			; (mov r8, r8)
   14bbc:	46bd      	mov	sp, r7
   14bbe:	b004      	add	sp, #16
   14bc0:	bd80      	pop	{r7, pc}
   14bc2:	46c0      	nop			; (mov r8, r8)
   14bc4:	20000b40 	.word	0x20000b40
   14bc8:	20000b90 	.word	0x20000b90

00014bcc <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   14bcc:	b590      	push	{r4, r7, lr}
   14bce:	b085      	sub	sp, #20
   14bd0:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   14bd2:	2300      	movs	r3, #0
   14bd4:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   14bd6:	4b2b      	ldr	r3, [pc, #172]	; (14c84 <prvReportStackUsage+0xb8>)
   14bd8:	681b      	ldr	r3, [r3, #0]
   14bda:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   14bdc:	4b29      	ldr	r3, [pc, #164]	; (14c84 <prvReportStackUsage+0xb8>)
   14bde:	681a      	ldr	r2, [r3, #0]
   14be0:	4b29      	ldr	r3, [pc, #164]	; (14c88 <prvReportStackUsage+0xbc>)
   14be2:	00d2      	lsls	r2, r2, #3
   14be4:	58d3      	ldr	r3, [r2, r3]
   14be6:	2b00      	cmp	r3, #0
   14be8:	d035      	beq.n	14c56 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   14bea:	4b26      	ldr	r3, [pc, #152]	; (14c84 <prvReportStackUsage+0xb8>)
   14bec:	681a      	ldr	r2, [r3, #0]
   14bee:	4b26      	ldr	r3, [pc, #152]	; (14c88 <prvReportStackUsage+0xbc>)
   14bf0:	00d2      	lsls	r2, r2, #3
   14bf2:	58d3      	ldr	r3, [r2, r3]
   14bf4:	0018      	movs	r0, r3
   14bf6:	4b25      	ldr	r3, [pc, #148]	; (14c8c <prvReportStackUsage+0xc0>)
   14bf8:	4798      	blx	r3
   14bfa:	0003      	movs	r3, r0
   14bfc:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   14bfe:	4b21      	ldr	r3, [pc, #132]	; (14c84 <prvReportStackUsage+0xb8>)
   14c00:	681b      	ldr	r3, [r3, #0]
   14c02:	4a21      	ldr	r2, [pc, #132]	; (14c88 <prvReportStackUsage+0xbc>)
   14c04:	00db      	lsls	r3, r3, #3
   14c06:	18d3      	adds	r3, r2, r3
   14c08:	3304      	adds	r3, #4
   14c0a:	681a      	ldr	r2, [r3, #0]
   14c0c:	687b      	ldr	r3, [r7, #4]
   14c0e:	429a      	cmp	r2, r3
   14c10:	d907      	bls.n	14c22 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   14c12:	4b1c      	ldr	r3, [pc, #112]	; (14c84 <prvReportStackUsage+0xb8>)
   14c14:	681b      	ldr	r3, [r3, #0]
   14c16:	4a1c      	ldr	r2, [pc, #112]	; (14c88 <prvReportStackUsage+0xbc>)
   14c18:	00db      	lsls	r3, r3, #3
   14c1a:	18d3      	adds	r3, r2, r3
   14c1c:	3304      	adds	r3, #4
   14c1e:	687a      	ldr	r2, [r7, #4]
   14c20:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   14c22:	4b18      	ldr	r3, [pc, #96]	; (14c84 <prvReportStackUsage+0xb8>)
   14c24:	681a      	ldr	r2, [r3, #0]
   14c26:	4b18      	ldr	r3, [pc, #96]	; (14c88 <prvReportStackUsage+0xbc>)
   14c28:	00d2      	lsls	r2, r2, #3
   14c2a:	58d3      	ldr	r3, [r2, r3]
   14c2c:	0018      	movs	r0, r3
   14c2e:	4b18      	ldr	r3, [pc, #96]	; (14c90 <prvReportStackUsage+0xc4>)
   14c30:	4798      	blx	r3
   14c32:	0003      	movs	r3, r0
   14c34:	b2db      	uxtb	r3, r3
   14c36:	0019      	movs	r1, r3
   14c38:	4b12      	ldr	r3, [pc, #72]	; (14c84 <prvReportStackUsage+0xb8>)
   14c3a:	681b      	ldr	r3, [r3, #0]
   14c3c:	4a12      	ldr	r2, [pc, #72]	; (14c88 <prvReportStackUsage+0xbc>)
   14c3e:	00db      	lsls	r3, r3, #3
   14c40:	18d3      	adds	r3, r2, r3
   14c42:	3304      	adds	r3, #4
   14c44:	681b      	ldr	r3, [r3, #0]
   14c46:	000a      	movs	r2, r1
   14c48:	2103      	movs	r1, #3
   14c4a:	20ea      	movs	r0, #234	; 0xea
   14c4c:	4c11      	ldr	r4, [pc, #68]	; (14c94 <prvReportStackUsage+0xc8>)
   14c4e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   14c50:	68fb      	ldr	r3, [r7, #12]
   14c52:	3301      	adds	r3, #1
   14c54:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   14c56:	4b0b      	ldr	r3, [pc, #44]	; (14c84 <prvReportStackUsage+0xb8>)
   14c58:	681b      	ldr	r3, [r3, #0]
   14c5a:	1c5a      	adds	r2, r3, #1
   14c5c:	4b0e      	ldr	r3, [pc, #56]	; (14c98 <prvReportStackUsage+0xcc>)
   14c5e:	210a      	movs	r1, #10
   14c60:	0010      	movs	r0, r2
   14c62:	4798      	blx	r3
   14c64:	000b      	movs	r3, r1
   14c66:	001a      	movs	r2, r3
   14c68:	4b06      	ldr	r3, [pc, #24]	; (14c84 <prvReportStackUsage+0xb8>)
   14c6a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   14c6c:	68fb      	ldr	r3, [r7, #12]
   14c6e:	2b00      	cmp	r3, #0
   14c70:	dc04      	bgt.n	14c7c <prvReportStackUsage+0xb0>
   14c72:	4b04      	ldr	r3, [pc, #16]	; (14c84 <prvReportStackUsage+0xb8>)
   14c74:	681a      	ldr	r2, [r3, #0]
   14c76:	68bb      	ldr	r3, [r7, #8]
   14c78:	429a      	cmp	r2, r3
   14c7a:	d1af      	bne.n	14bdc <prvReportStackUsage+0x10>
}
   14c7c:	46c0      	nop			; (mov r8, r8)
   14c7e:	46bd      	mov	sp, r7
   14c80:	b005      	add	sp, #20
   14c82:	bd90      	pop	{r4, r7, pc}
   14c84:	20000b94 	.word	0x20000b94
   14c88:	20000b40 	.word	0x20000b40
   14c8c:	00019665 	.word	0x00019665
   14c90:	000149e1 	.word	0x000149e1
   14c94:	00015529 	.word	0x00015529
   14c98:	000300cd 	.word	0x000300cd

00014c9c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   14c9c:	b580      	push	{r7, lr}
   14c9e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   14ca0:	4b02      	ldr	r3, [pc, #8]	; (14cac <prvTraceGetCurrentTaskHandle+0x10>)
   14ca2:	4798      	blx	r3
   14ca4:	0003      	movs	r3, r0
}
   14ca6:	0018      	movs	r0, r3
   14ca8:	46bd      	mov	sp, r7
   14caa:	bd80      	pop	{r7, pc}
   14cac:	00019711 	.word	0x00019711

00014cb0 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   14cb0:	b590      	push	{r4, r7, lr}
   14cb2:	b085      	sub	sp, #20
   14cb4:	af02      	add	r7, sp, #8
   14cb6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   14cb8:	4b14      	ldr	r3, [pc, #80]	; (14d0c <vTraceEnable+0x5c>)
   14cba:	4798      	blx	r3

	if (startOption == TRC_START)
   14cbc:	687b      	ldr	r3, [r7, #4]
   14cbe:	2b01      	cmp	r3, #1
   14cc0:	d102      	bne.n	14cc8 <vTraceEnable+0x18>
	{
		vTraceStart();
   14cc2:	4b13      	ldr	r3, [pc, #76]	; (14d10 <vTraceEnable+0x60>)
   14cc4:	4798      	blx	r3
   14cc6:	e00e      	b.n	14ce6 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   14cc8:	687b      	ldr	r3, [r7, #4]
   14cca:	2b02      	cmp	r3, #2
   14ccc:	d104      	bne.n	14cd8 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   14cce:	4b11      	ldr	r3, [pc, #68]	; (14d14 <vTraceEnable+0x64>)
   14cd0:	0018      	movs	r0, r3
   14cd2:	4b11      	ldr	r3, [pc, #68]	; (14d18 <vTraceEnable+0x68>)
   14cd4:	4798      	blx	r3
   14cd6:	e006      	b.n	14ce6 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   14cd8:	687b      	ldr	r3, [r7, #4]
   14cda:	2b00      	cmp	r3, #0
   14cdc:	d003      	beq.n	14ce6 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   14cde:	4b0f      	ldr	r3, [pc, #60]	; (14d1c <vTraceEnable+0x6c>)
   14ce0:	0018      	movs	r0, r3
   14ce2:	4b0d      	ldr	r3, [pc, #52]	; (14d18 <vTraceEnable+0x68>)
   14ce4:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   14ce6:	4b0e      	ldr	r3, [pc, #56]	; (14d20 <vTraceEnable+0x70>)
   14ce8:	681b      	ldr	r3, [r3, #0]
   14cea:	2b00      	cmp	r3, #0
   14cec:	d109      	bne.n	14d02 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   14cee:	490d      	ldr	r1, [pc, #52]	; (14d24 <vTraceEnable+0x74>)
   14cf0:	480d      	ldr	r0, [pc, #52]	; (14d28 <vTraceEnable+0x78>)
   14cf2:	4b0b      	ldr	r3, [pc, #44]	; (14d20 <vTraceEnable+0x70>)
   14cf4:	9301      	str	r3, [sp, #4]
   14cf6:	2304      	movs	r3, #4
   14cf8:	9300      	str	r3, [sp, #0]
   14cfa:	2300      	movs	r3, #0
   14cfc:	22c8      	movs	r2, #200	; 0xc8
   14cfe:	4c0b      	ldr	r4, [pc, #44]	; (14d2c <vTraceEnable+0x7c>)
   14d00:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   14d02:	46c0      	nop			; (mov r8, r8)
   14d04:	46bd      	mov	sp, r7
   14d06:	b003      	add	sp, #12
   14d08:	bd90      	pop	{r4, r7, pc}
   14d0a:	46c0      	nop			; (mov r8, r8)
   14d0c:	00015bf5 	.word	0x00015bf5
   14d10:	0001514d 	.word	0x0001514d
   14d14:	0003514c 	.word	0x0003514c
   14d18:	0001629d 	.word	0x0001629d
   14d1c:	0003518c 	.word	0x0003518c
   14d20:	20000b3c 	.word	0x20000b3c
   14d24:	000351c0 	.word	0x000351c0
   14d28:	00014d31 	.word	0x00014d31
   14d2c:	00018669 	.word	0x00018669

00014d30 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   14d30:	b580      	push	{r7, lr}
   14d32:	b082      	sub	sp, #8
   14d34:	af00      	add	r7, sp, #0
   14d36:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   14d38:	4b04      	ldr	r3, [pc, #16]	; (14d4c <TzCtrl+0x1c>)
   14d3a:	4798      	blx	r3
   14d3c:	1e03      	subs	r3, r0, #0
   14d3e:	d001      	beq.n	14d44 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   14d40:	4b03      	ldr	r3, [pc, #12]	; (14d50 <TzCtrl+0x20>)
   14d42:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   14d44:	2004      	movs	r0, #4
   14d46:	4b03      	ldr	r3, [pc, #12]	; (14d54 <TzCtrl+0x24>)
   14d48:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   14d4a:	e7f5      	b.n	14d38 <TzCtrl+0x8>
   14d4c:	00015191 	.word	0x00015191
   14d50:	00014bcd 	.word	0x00014bcd
   14d54:	00018a05 	.word	0x00018a05

00014d58 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   14d58:	b580      	push	{r7, lr}
   14d5a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   14d5c:	4b60      	ldr	r3, [pc, #384]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14d5e:	681b      	ldr	r3, [r3, #0]
   14d60:	2209      	movs	r2, #9
   14d62:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   14d64:	4b5e      	ldr	r3, [pc, #376]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14d66:	681b      	ldr	r3, [r3, #0]
   14d68:	2264      	movs	r2, #100	; 0x64
   14d6a:	210a      	movs	r1, #10
   14d6c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   14d6e:	4b5c      	ldr	r3, [pc, #368]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14d70:	681b      	ldr	r3, [r3, #0]
   14d72:	2265      	movs	r2, #101	; 0x65
   14d74:	210a      	movs	r1, #10
   14d76:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   14d78:	4b59      	ldr	r3, [pc, #356]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14d7a:	681b      	ldr	r3, [r3, #0]
   14d7c:	2266      	movs	r2, #102	; 0x66
   14d7e:	210a      	movs	r1, #10
   14d80:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   14d82:	4b57      	ldr	r3, [pc, #348]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14d84:	681b      	ldr	r3, [r3, #0]
   14d86:	2267      	movs	r2, #103	; 0x67
   14d88:	210f      	movs	r1, #15
   14d8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   14d8c:	4b54      	ldr	r3, [pc, #336]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14d8e:	681b      	ldr	r3, [r3, #0]
   14d90:	2268      	movs	r2, #104	; 0x68
   14d92:	2105      	movs	r1, #5
   14d94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   14d96:	4b52      	ldr	r3, [pc, #328]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14d98:	681b      	ldr	r3, [r3, #0]
   14d9a:	2269      	movs	r2, #105	; 0x69
   14d9c:	2105      	movs	r1, #5
   14d9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   14da0:	4b4f      	ldr	r3, [pc, #316]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14da2:	681b      	ldr	r3, [r3, #0]
   14da4:	226a      	movs	r2, #106	; 0x6a
   14da6:	2105      	movs	r1, #5
   14da8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   14daa:	4b4d      	ldr	r3, [pc, #308]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14dac:	681b      	ldr	r3, [r3, #0]
   14dae:	226b      	movs	r2, #107	; 0x6b
   14db0:	2105      	movs	r1, #5
   14db2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   14db4:	4b4a      	ldr	r3, [pc, #296]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14db6:	681b      	ldr	r3, [r3, #0]
   14db8:	226c      	movs	r2, #108	; 0x6c
   14dba:	2105      	movs	r1, #5
   14dbc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   14dbe:	4b48      	ldr	r3, [pc, #288]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14dc0:	681b      	ldr	r3, [r3, #0]
   14dc2:	2270      	movs	r2, #112	; 0x70
   14dc4:	210f      	movs	r1, #15
   14dc6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   14dc8:	4b45      	ldr	r3, [pc, #276]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14dca:	681b      	ldr	r3, [r3, #0]
   14dcc:	2271      	movs	r2, #113	; 0x71
   14dce:	210f      	movs	r1, #15
   14dd0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   14dd2:	4b43      	ldr	r3, [pc, #268]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14dd4:	681b      	ldr	r3, [r3, #0]
   14dd6:	2272      	movs	r2, #114	; 0x72
   14dd8:	210f      	movs	r1, #15
   14dda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   14ddc:	4b40      	ldr	r3, [pc, #256]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14dde:	681b      	ldr	r3, [r3, #0]
   14de0:	2273      	movs	r2, #115	; 0x73
   14de2:	210f      	movs	r1, #15
   14de4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   14de6:	4b3e      	ldr	r3, [pc, #248]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14de8:	681b      	ldr	r3, [r3, #0]
   14dea:	2274      	movs	r2, #116	; 0x74
   14dec:	210f      	movs	r1, #15
   14dee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   14df0:	4b3b      	ldr	r3, [pc, #236]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14df2:	681b      	ldr	r3, [r3, #0]
   14df4:	2275      	movs	r2, #117	; 0x75
   14df6:	210f      	movs	r1, #15
   14df8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   14dfa:	4b39      	ldr	r3, [pc, #228]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14dfc:	681b      	ldr	r3, [r3, #0]
   14dfe:	2276      	movs	r2, #118	; 0x76
   14e00:	210f      	movs	r1, #15
   14e02:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   14e04:	4b36      	ldr	r3, [pc, #216]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e06:	681b      	ldr	r3, [r3, #0]
   14e08:	2277      	movs	r2, #119	; 0x77
   14e0a:	210f      	movs	r1, #15
   14e0c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   14e0e:	4b34      	ldr	r3, [pc, #208]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e10:	681b      	ldr	r3, [r3, #0]
   14e12:	2278      	movs	r2, #120	; 0x78
   14e14:	210f      	movs	r1, #15
   14e16:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   14e18:	4b31      	ldr	r3, [pc, #196]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e1a:	681b      	ldr	r3, [r3, #0]
   14e1c:	227c      	movs	r2, #124	; 0x7c
   14e1e:	2110      	movs	r1, #16
   14e20:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   14e22:	4b2f      	ldr	r3, [pc, #188]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e24:	681b      	ldr	r3, [r3, #0]
   14e26:	227d      	movs	r2, #125	; 0x7d
   14e28:	2110      	movs	r1, #16
   14e2a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   14e2c:	4b2c      	ldr	r3, [pc, #176]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e2e:	681b      	ldr	r3, [r3, #0]
   14e30:	227e      	movs	r2, #126	; 0x7e
   14e32:	2110      	movs	r1, #16
   14e34:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   14e36:	4b2a      	ldr	r3, [pc, #168]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e38:	681b      	ldr	r3, [r3, #0]
   14e3a:	227f      	movs	r2, #127	; 0x7f
   14e3c:	2113      	movs	r1, #19
   14e3e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   14e40:	4b27      	ldr	r3, [pc, #156]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e42:	681b      	ldr	r3, [r3, #0]
   14e44:	2280      	movs	r2, #128	; 0x80
   14e46:	2111      	movs	r1, #17
   14e48:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   14e4a:	4b25      	ldr	r3, [pc, #148]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e4c:	681b      	ldr	r3, [r3, #0]
   14e4e:	2281      	movs	r2, #129	; 0x81
   14e50:	2110      	movs	r1, #16
   14e52:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   14e54:	4b22      	ldr	r3, [pc, #136]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e56:	681b      	ldr	r3, [r3, #0]
   14e58:	2282      	movs	r2, #130	; 0x82
   14e5a:	2113      	movs	r1, #19
   14e5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   14e5e:	4b20      	ldr	r3, [pc, #128]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e60:	681b      	ldr	r3, [r3, #0]
   14e62:	2283      	movs	r2, #131	; 0x83
   14e64:	2113      	movs	r1, #19
   14e66:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   14e68:	4b1d      	ldr	r3, [pc, #116]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e6a:	681b      	ldr	r3, [r3, #0]
   14e6c:	2284      	movs	r2, #132	; 0x84
   14e6e:	2113      	movs	r1, #19
   14e70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   14e72:	4b1b      	ldr	r3, [pc, #108]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e74:	681b      	ldr	r3, [r3, #0]
   14e76:	2288      	movs	r2, #136	; 0x88
   14e78:	2100      	movs	r1, #0
   14e7a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   14e7c:	4b18      	ldr	r3, [pc, #96]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e7e:	681b      	ldr	r3, [r3, #0]
   14e80:	228a      	movs	r2, #138	; 0x8a
   14e82:	21a0      	movs	r1, #160	; 0xa0
   14e84:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   14e86:	4b16      	ldr	r3, [pc, #88]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e88:	681b      	ldr	r3, [r3, #0]
   14e8a:	228c      	movs	r2, #140	; 0x8c
   14e8c:	21a0      	movs	r1, #160	; 0xa0
   14e8e:	0049      	lsls	r1, r1, #1
   14e90:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   14e92:	4b13      	ldr	r3, [pc, #76]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14e94:	681b      	ldr	r3, [r3, #0]
   14e96:	228e      	movs	r2, #142	; 0x8e
   14e98:	21f0      	movs	r1, #240	; 0xf0
   14e9a:	0049      	lsls	r1, r1, #1
   14e9c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   14e9e:	4b10      	ldr	r3, [pc, #64]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14ea0:	681b      	ldr	r3, [r3, #0]
   14ea2:	2290      	movs	r2, #144	; 0x90
   14ea4:	490f      	ldr	r1, [pc, #60]	; (14ee4 <vTraceInitObjectPropertyTable+0x18c>)
   14ea6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   14ea8:	4b0d      	ldr	r3, [pc, #52]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14eaa:	681b      	ldr	r3, [r3, #0]
   14eac:	2292      	movs	r2, #146	; 0x92
   14eae:	490e      	ldr	r1, [pc, #56]	; (14ee8 <vTraceInitObjectPropertyTable+0x190>)
   14eb0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   14eb2:	4b0b      	ldr	r3, [pc, #44]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14eb4:	681b      	ldr	r3, [r3, #0]
   14eb6:	2294      	movs	r2, #148	; 0x94
   14eb8:	490c      	ldr	r1, [pc, #48]	; (14eec <vTraceInitObjectPropertyTable+0x194>)
   14eba:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   14ebc:	4b08      	ldr	r3, [pc, #32]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14ebe:	681b      	ldr	r3, [r3, #0]
   14ec0:	2296      	movs	r2, #150	; 0x96
   14ec2:	490b      	ldr	r1, [pc, #44]	; (14ef0 <vTraceInitObjectPropertyTable+0x198>)
   14ec4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   14ec6:	4b06      	ldr	r3, [pc, #24]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14ec8:	681b      	ldr	r3, [r3, #0]
   14eca:	2298      	movs	r2, #152	; 0x98
   14ecc:	218c      	movs	r1, #140	; 0x8c
   14ece:	00c9      	lsls	r1, r1, #3
   14ed0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   14ed2:	4b03      	ldr	r3, [pc, #12]	; (14ee0 <vTraceInitObjectPropertyTable+0x188>)
   14ed4:	681b      	ldr	r3, [r3, #0]
   14ed6:	4a07      	ldr	r2, [pc, #28]	; (14ef4 <vTraceInitObjectPropertyTable+0x19c>)
   14ed8:	661a      	str	r2, [r3, #96]	; 0x60
}
   14eda:	46c0      	nop			; (mov r8, r8)
   14edc:	46bd      	mov	sp, r7
   14ede:	bd80      	pop	{r7, pc}
   14ee0:	20000c54 	.word	0x20000c54
   14ee4:	000002fd 	.word	0x000002fd
   14ee8:	00000352 	.word	0x00000352
   14eec:	000003a2 	.word	0x000003a2
   14ef0:	00000401 	.word	0x00000401
   14ef4:	000004bf 	.word	0x000004bf

00014ef8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   14ef8:	b580      	push	{r7, lr}
   14efa:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   14efc:	4b2e      	ldr	r3, [pc, #184]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14efe:	2200      	movs	r2, #0
   14f00:	825a      	strh	r2, [r3, #18]
   14f02:	4b2d      	ldr	r3, [pc, #180]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f04:	8a5a      	ldrh	r2, [r3, #18]
   14f06:	4b2c      	ldr	r3, [pc, #176]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f08:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   14f0a:	4b2b      	ldr	r3, [pc, #172]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f0c:	220a      	movs	r2, #10
   14f0e:	829a      	strh	r2, [r3, #20]
   14f10:	4b29      	ldr	r3, [pc, #164]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f12:	8a9a      	ldrh	r2, [r3, #20]
   14f14:	4b28      	ldr	r3, [pc, #160]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f16:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   14f18:	4b27      	ldr	r3, [pc, #156]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f1a:	2214      	movs	r2, #20
   14f1c:	82da      	strh	r2, [r3, #22]
   14f1e:	4b26      	ldr	r3, [pc, #152]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f20:	8ada      	ldrh	r2, [r3, #22]
   14f22:	4b25      	ldr	r3, [pc, #148]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f24:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   14f26:	4b24      	ldr	r3, [pc, #144]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f28:	221e      	movs	r2, #30
   14f2a:	831a      	strh	r2, [r3, #24]
   14f2c:	4b22      	ldr	r3, [pc, #136]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f2e:	8b1a      	ldrh	r2, [r3, #24]
   14f30:	4b21      	ldr	r3, [pc, #132]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f32:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   14f34:	4b20      	ldr	r3, [pc, #128]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f36:	222d      	movs	r2, #45	; 0x2d
   14f38:	835a      	strh	r2, [r3, #26]
   14f3a:	4b1f      	ldr	r3, [pc, #124]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f3c:	8b5a      	ldrh	r2, [r3, #26]
   14f3e:	4b1e      	ldr	r3, [pc, #120]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f40:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   14f42:	4b1d      	ldr	r3, [pc, #116]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f44:	2232      	movs	r2, #50	; 0x32
   14f46:	839a      	strh	r2, [r3, #28]
   14f48:	4b1b      	ldr	r3, [pc, #108]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f4a:	8b9a      	ldrh	r2, [r3, #28]
   14f4c:	4b1a      	ldr	r3, [pc, #104]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f4e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   14f50:	4b19      	ldr	r3, [pc, #100]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f52:	2237      	movs	r2, #55	; 0x37
   14f54:	83da      	strh	r2, [r3, #30]
   14f56:	4b18      	ldr	r3, [pc, #96]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f58:	8bda      	ldrh	r2, [r3, #30]
   14f5a:	4b17      	ldr	r3, [pc, #92]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f5c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   14f5e:	4b16      	ldr	r3, [pc, #88]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f60:	223c      	movs	r2, #60	; 0x3c
   14f62:	841a      	strh	r2, [r3, #32]
   14f64:	4b14      	ldr	r3, [pc, #80]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f66:	8c1a      	ldrh	r2, [r3, #32]
   14f68:	4b13      	ldr	r3, [pc, #76]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f6a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   14f6c:	4b12      	ldr	r3, [pc, #72]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f6e:	2241      	movs	r2, #65	; 0x41
   14f70:	845a      	strh	r2, [r3, #34]	; 0x22
   14f72:	4b11      	ldr	r3, [pc, #68]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f74:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   14f76:	4b10      	ldr	r3, [pc, #64]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f78:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   14f7a:	4b0f      	ldr	r3, [pc, #60]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f7c:	2209      	movs	r2, #9
   14f7e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   14f80:	4b0d      	ldr	r3, [pc, #52]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f82:	2213      	movs	r2, #19
   14f84:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   14f86:	4b0c      	ldr	r3, [pc, #48]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f88:	221d      	movs	r2, #29
   14f8a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   14f8c:	4b0a      	ldr	r3, [pc, #40]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f8e:	222c      	movs	r2, #44	; 0x2c
   14f90:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   14f92:	4b09      	ldr	r3, [pc, #36]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f94:	2231      	movs	r2, #49	; 0x31
   14f96:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   14f98:	4b07      	ldr	r3, [pc, #28]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14f9a:	2236      	movs	r2, #54	; 0x36
   14f9c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   14f9e:	4b06      	ldr	r3, [pc, #24]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14fa0:	223b      	movs	r2, #59	; 0x3b
   14fa2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   14fa4:	4b04      	ldr	r3, [pc, #16]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14fa6:	2240      	movs	r2, #64	; 0x40
   14fa8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   14faa:	4b03      	ldr	r3, [pc, #12]	; (14fb8 <vTraceInitObjectHandleStack+0xc0>)
   14fac:	2245      	movs	r2, #69	; 0x45
   14fae:	869a      	strh	r2, [r3, #52]	; 0x34
}
   14fb0:	46c0      	nop			; (mov r8, r8)
   14fb2:	46bd      	mov	sp, r7
   14fb4:	bd80      	pop	{r7, pc}
   14fb6:	46c0      	nop			; (mov r8, r8)
   14fb8:	20000bc4 	.word	0x20000bc4

00014fbc <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   14fbc:	b580      	push	{r7, lr}
   14fbe:	b082      	sub	sp, #8
   14fc0:	af00      	add	r7, sp, #0
   14fc2:	0002      	movs	r2, r0
   14fc4:	1dfb      	adds	r3, r7, #7
   14fc6:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   14fc8:	1dfb      	adds	r3, r7, #7
   14fca:	781b      	ldrb	r3, [r3, #0]
   14fcc:	2b08      	cmp	r3, #8
   14fce:	d816      	bhi.n	14ffe <pszTraceGetErrorNotEnoughHandles+0x42>
   14fd0:	009a      	lsls	r2, r3, #2
   14fd2:	4b0d      	ldr	r3, [pc, #52]	; (15008 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   14fd4:	18d3      	adds	r3, r2, r3
   14fd6:	681b      	ldr	r3, [r3, #0]
   14fd8:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   14fda:	4b0c      	ldr	r3, [pc, #48]	; (1500c <pszTraceGetErrorNotEnoughHandles+0x50>)
   14fdc:	e010      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   14fde:	4b0c      	ldr	r3, [pc, #48]	; (15010 <pszTraceGetErrorNotEnoughHandles+0x54>)
   14fe0:	e00e      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   14fe2:	4b0c      	ldr	r3, [pc, #48]	; (15014 <pszTraceGetErrorNotEnoughHandles+0x58>)
   14fe4:	e00c      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   14fe6:	4b0c      	ldr	r3, [pc, #48]	; (15018 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   14fe8:	e00a      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   14fea:	4b0c      	ldr	r3, [pc, #48]	; (1501c <pszTraceGetErrorNotEnoughHandles+0x60>)
   14fec:	e008      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   14fee:	4b0c      	ldr	r3, [pc, #48]	; (15020 <pszTraceGetErrorNotEnoughHandles+0x64>)
   14ff0:	e006      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   14ff2:	4b0c      	ldr	r3, [pc, #48]	; (15024 <pszTraceGetErrorNotEnoughHandles+0x68>)
   14ff4:	e004      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   14ff6:	4b0c      	ldr	r3, [pc, #48]	; (15028 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   14ff8:	e002      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   14ffa:	4b0c      	ldr	r3, [pc, #48]	; (1502c <pszTraceGetErrorNotEnoughHandles+0x70>)
   14ffc:	e000      	b.n	15000 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   14ffe:	4b0c      	ldr	r3, [pc, #48]	; (15030 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   15000:	0018      	movs	r0, r3
   15002:	46bd      	mov	sp, r7
   15004:	b002      	add	sp, #8
   15006:	bd80      	pop	{r7, pc}
   15008:	000354c8 	.word	0x000354c8
   1500c:	000351c8 	.word	0x000351c8
   15010:	00035210 	.word	0x00035210
   15014:	00035258 	.word	0x00035258
   15018:	000352ac 	.word	0x000352ac
   1501c:	000352f8 	.word	0x000352f8
   15020:	00035344 	.word	0x00035344
   15024:	00035390 	.word	0x00035390
   15028:	000353e4 	.word	0x000353e4
   1502c:	0003543c 	.word	0x0003543c
   15030:	00035498 	.word	0x00035498

00015034 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   15034:	b590      	push	{r4, r7, lr}
   15036:	b087      	sub	sp, #28
   15038:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1503a:	2317      	movs	r3, #23
   1503c:	18fb      	adds	r3, r7, r3
   1503e:	2200      	movs	r2, #0
   15040:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   15042:	4b36      	ldr	r3, [pc, #216]	; (1511c <uiTraceStart+0xe8>)
   15044:	681b      	ldr	r3, [r3, #0]
   15046:	2b00      	cmp	r3, #0
   15048:	d10b      	bne.n	15062 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1504a:	4b34      	ldr	r3, [pc, #208]	; (1511c <uiTraceStart+0xe8>)
   1504c:	681b      	ldr	r3, [r3, #0]
   1504e:	2b00      	cmp	r3, #0
   15050:	d105      	bne.n	1505e <uiTraceStart+0x2a>
   15052:	4b33      	ldr	r3, [pc, #204]	; (15120 <uiTraceStart+0xec>)
   15054:	0018      	movs	r0, r3
   15056:	4b33      	ldr	r3, [pc, #204]	; (15124 <uiTraceStart+0xf0>)
   15058:	4798      	blx	r3
   1505a:	2300      	movs	r3, #0
   1505c:	e059      	b.n	15112 <uiTraceStart+0xde>
		return 0;
   1505e:	2300      	movs	r3, #0
   15060:	e057      	b.n	15112 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   15062:	4b2e      	ldr	r3, [pc, #184]	; (1511c <uiTraceStart+0xe8>)
   15064:	681b      	ldr	r3, [r3, #0]
   15066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15068:	2b01      	cmp	r3, #1
   1506a:	d101      	bne.n	15070 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1506c:	2301      	movs	r3, #1
   1506e:	e050      	b.n	15112 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   15070:	4b2d      	ldr	r3, [pc, #180]	; (15128 <uiTraceStart+0xf4>)
   15072:	681b      	ldr	r3, [r3, #0]
   15074:	2b00      	cmp	r3, #0
   15076:	d149      	bne.n	1510c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15078:	f3ef 8310 	mrs	r3, PRIMASK
   1507c:	60bb      	str	r3, [r7, #8]
  return(result);
   1507e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   15080:	613b      	str	r3, [r7, #16]
   15082:	2301      	movs	r3, #1
   15084:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15086:	68fb      	ldr	r3, [r7, #12]
   15088:	f383 8810 	msr	PRIMASK, r3
   1508c:	4b27      	ldr	r3, [pc, #156]	; (1512c <uiTraceStart+0xf8>)
   1508e:	681b      	ldr	r3, [r3, #0]
   15090:	1c5a      	adds	r2, r3, #1
   15092:	4b26      	ldr	r3, [pc, #152]	; (1512c <uiTraceStart+0xf8>)
   15094:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   15096:	4b21      	ldr	r3, [pc, #132]	; (1511c <uiTraceStart+0xe8>)
   15098:	681b      	ldr	r3, [r3, #0]
   1509a:	2201      	movs	r2, #1
   1509c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1509e:	4b24      	ldr	r3, [pc, #144]	; (15130 <uiTraceStart+0xfc>)
   150a0:	4798      	blx	r3
   150a2:	0003      	movs	r3, r0
   150a4:	0018      	movs	r0, r3
   150a6:	4b23      	ldr	r3, [pc, #140]	; (15134 <uiTraceStart+0x100>)
   150a8:	4798      	blx	r3
   150aa:	0003      	movs	r3, r0
   150ac:	001a      	movs	r2, r3
   150ae:	2317      	movs	r3, #23
   150b0:	18fb      	adds	r3, r7, r3
   150b2:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   150b4:	2317      	movs	r3, #23
   150b6:	18fb      	adds	r3, r7, r3
   150b8:	781b      	ldrb	r3, [r3, #0]
   150ba:	2b00      	cmp	r3, #0
   150bc:	d116      	bne.n	150ec <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   150be:	2317      	movs	r3, #23
   150c0:	18fc      	adds	r4, r7, r3
   150c2:	2003      	movs	r0, #3
   150c4:	4b1c      	ldr	r3, [pc, #112]	; (15138 <uiTraceStart+0x104>)
   150c6:	4798      	blx	r3
   150c8:	0003      	movs	r3, r0
   150ca:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   150cc:	4a1b      	ldr	r2, [pc, #108]	; (1513c <uiTraceStart+0x108>)
   150ce:	2317      	movs	r3, #23
   150d0:	18fb      	adds	r3, r7, r3
   150d2:	781b      	ldrb	r3, [r3, #0]
   150d4:	0019      	movs	r1, r3
   150d6:	2003      	movs	r0, #3
   150d8:	4b19      	ldr	r3, [pc, #100]	; (15140 <uiTraceStart+0x10c>)
   150da:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   150dc:	2317      	movs	r3, #23
   150de:	18fb      	adds	r3, r7, r3
   150e0:	781b      	ldrb	r3, [r3, #0]
   150e2:	2200      	movs	r2, #0
   150e4:	0019      	movs	r1, r3
   150e6:	2003      	movs	r0, #3
   150e8:	4b16      	ldr	r3, [pc, #88]	; (15144 <uiTraceStart+0x110>)
   150ea:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   150ec:	2317      	movs	r3, #23
   150ee:	18fb      	adds	r3, r7, r3
   150f0:	781b      	ldrb	r3, [r3, #0]
   150f2:	0018      	movs	r0, r3
   150f4:	4b14      	ldr	r3, [pc, #80]	; (15148 <uiTraceStart+0x114>)
   150f6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   150f8:	4b0c      	ldr	r3, [pc, #48]	; (1512c <uiTraceStart+0xf8>)
   150fa:	681b      	ldr	r3, [r3, #0]
   150fc:	1e5a      	subs	r2, r3, #1
   150fe:	4b0b      	ldr	r3, [pc, #44]	; (1512c <uiTraceStart+0xf8>)
   15100:	601a      	str	r2, [r3, #0]
   15102:	693b      	ldr	r3, [r7, #16]
   15104:	607b      	str	r3, [r7, #4]
   15106:	687b      	ldr	r3, [r7, #4]
   15108:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1510c:	4b03      	ldr	r3, [pc, #12]	; (1511c <uiTraceStart+0xe8>)
   1510e:	681b      	ldr	r3, [r3, #0]
   15110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   15112:	0018      	movs	r0, r3
   15114:	46bd      	mov	sp, r7
   15116:	b007      	add	sp, #28
   15118:	bd90      	pop	{r4, r7, pc}
   1511a:	46c0      	nop			; (mov r8, r8)
   1511c:	20000c54 	.word	0x20000c54
   15120:	000354ec 	.word	0x000354ec
   15124:	0001629d 	.word	0x0001629d
   15128:	20000bb4 	.word	0x20000bb4
   1512c:	20000bac 	.word	0x20000bac
   15130:	00014c9d 	.word	0x00014c9d
   15134:	000149e1 	.word	0x000149e1
   15138:	00015f81 	.word	0x00015f81
   1513c:	00035530 	.word	0x00035530
   15140:	000161b1 	.word	0x000161b1
   15144:	00015915 	.word	0x00015915
   15148:	000157fd 	.word	0x000157fd

0001514c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1514c:	b580      	push	{r7, lr}
   1514e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   15150:	4b02      	ldr	r3, [pc, #8]	; (1515c <vTraceStart+0x10>)
   15152:	4798      	blx	r3
}
   15154:	46c0      	nop			; (mov r8, r8)
   15156:	46bd      	mov	sp, r7
   15158:	bd80      	pop	{r7, pc}
   1515a:	46c0      	nop			; (mov r8, r8)
   1515c:	00015035 	.word	0x00015035

00015160 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   15160:	b580      	push	{r7, lr}
   15162:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   15164:	4b08      	ldr	r3, [pc, #32]	; (15188 <vTraceStop+0x28>)
   15166:	681b      	ldr	r3, [r3, #0]
   15168:	2b00      	cmp	r3, #0
   1516a:	d003      	beq.n	15174 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1516c:	4b06      	ldr	r3, [pc, #24]	; (15188 <vTraceStop+0x28>)
   1516e:	681b      	ldr	r3, [r3, #0]
   15170:	2200      	movs	r2, #0
   15172:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   15174:	4b05      	ldr	r3, [pc, #20]	; (1518c <vTraceStop+0x2c>)
   15176:	681b      	ldr	r3, [r3, #0]
   15178:	2b00      	cmp	r3, #0
   1517a:	d002      	beq.n	15182 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1517c:	4b03      	ldr	r3, [pc, #12]	; (1518c <vTraceStop+0x2c>)
   1517e:	681b      	ldr	r3, [r3, #0]
   15180:	4798      	blx	r3
	}
}
   15182:	46c0      	nop			; (mov r8, r8)
   15184:	46bd      	mov	sp, r7
   15186:	bd80      	pop	{r7, pc}
   15188:	20000c54 	.word	0x20000c54
   1518c:	20000bbc 	.word	0x20000bbc

00015190 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   15190:	b580      	push	{r7, lr}
   15192:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   15194:	4b05      	ldr	r3, [pc, #20]	; (151ac <xTraceIsRecordingEnabled+0x1c>)
   15196:	681b      	ldr	r3, [r3, #0]
   15198:	2b00      	cmp	r3, #0
   1519a:	d003      	beq.n	151a4 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1519c:	4b03      	ldr	r3, [pc, #12]	; (151ac <xTraceIsRecordingEnabled+0x1c>)
   1519e:	681b      	ldr	r3, [r3, #0]
   151a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   151a2:	e000      	b.n	151a6 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   151a4:	2300      	movs	r3, #0
	}
}
   151a6:	0018      	movs	r0, r3
   151a8:	46bd      	mov	sp, r7
   151aa:	bd80      	pop	{r7, pc}
   151ac:	20000c54 	.word	0x20000c54

000151b0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   151b0:	b590      	push	{r4, r7, lr}
   151b2:	b089      	sub	sp, #36	; 0x24
   151b4:	af00      	add	r7, sp, #0
   151b6:	0002      	movs	r2, r0
   151b8:	1dfb      	adds	r3, r7, #7
   151ba:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   151bc:	1dfb      	adds	r3, r7, #7
   151be:	781b      	ldrb	r3, [r3, #0]
   151c0:	2b00      	cmp	r3, #0
   151c2:	d057      	beq.n	15274 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   151c4:	4b2e      	ldr	r3, [pc, #184]	; (15280 <prvTraceStoreTaskReady+0xd0>)
   151c6:	681b      	ldr	r3, [r3, #0]
   151c8:	2b00      	cmp	r3, #0
   151ca:	d055      	beq.n	15278 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   151cc:	1dfb      	adds	r3, r7, #7
   151ce:	781b      	ldrb	r3, [r3, #0]
   151d0:	2b0f      	cmp	r3, #15
   151d2:	d904      	bls.n	151de <prvTraceStoreTaskReady+0x2e>
   151d4:	4b2b      	ldr	r3, [pc, #172]	; (15284 <prvTraceStoreTaskReady+0xd4>)
   151d6:	0018      	movs	r0, r3
   151d8:	4b2b      	ldr	r3, [pc, #172]	; (15288 <prvTraceStoreTaskReady+0xd8>)
   151da:	4798      	blx	r3
   151dc:	e04d      	b.n	1527a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   151de:	4b2b      	ldr	r3, [pc, #172]	; (1528c <prvTraceStoreTaskReady+0xdc>)
   151e0:	681b      	ldr	r3, [r3, #0]
   151e2:	2b00      	cmp	r3, #0
   151e4:	d004      	beq.n	151f0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   151e6:	4b2a      	ldr	r3, [pc, #168]	; (15290 <prvTraceStoreTaskReady+0xe0>)
   151e8:	0018      	movs	r0, r3
   151ea:	4b27      	ldr	r3, [pc, #156]	; (15288 <prvTraceStoreTaskReady+0xd8>)
   151ec:	4798      	blx	r3
		return;
   151ee:	e044      	b.n	1527a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   151f0:	f3ef 8310 	mrs	r3, PRIMASK
   151f4:	60fb      	str	r3, [r7, #12]
  return(result);
   151f6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   151f8:	61fb      	str	r3, [r7, #28]
   151fa:	2301      	movs	r3, #1
   151fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   151fe:	693b      	ldr	r3, [r7, #16]
   15200:	f383 8810 	msr	PRIMASK, r3
   15204:	4b21      	ldr	r3, [pc, #132]	; (1528c <prvTraceStoreTaskReady+0xdc>)
   15206:	681b      	ldr	r3, [r3, #0]
   15208:	1c5a      	adds	r2, r3, #1
   1520a:	4b20      	ldr	r3, [pc, #128]	; (1528c <prvTraceStoreTaskReady+0xdc>)
   1520c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1520e:	4b21      	ldr	r3, [pc, #132]	; (15294 <prvTraceStoreTaskReady+0xe4>)
   15210:	681b      	ldr	r3, [r3, #0]
   15212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15214:	2b00      	cmp	r3, #0
   15216:	d022      	beq.n	1525e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   15218:	231a      	movs	r3, #26
   1521a:	18fc      	adds	r4, r7, r3
   1521c:	4b1e      	ldr	r3, [pc, #120]	; (15298 <prvTraceStoreTaskReady+0xe8>)
   1521e:	0018      	movs	r0, r3
   15220:	4b1e      	ldr	r3, [pc, #120]	; (1529c <prvTraceStoreTaskReady+0xec>)
   15222:	4798      	blx	r3
   15224:	0003      	movs	r3, r0
   15226:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   15228:	2319      	movs	r3, #25
   1522a:	18fb      	adds	r3, r7, r3
   1522c:	1dfa      	adds	r2, r7, #7
   1522e:	7812      	ldrb	r2, [r2, #0]
   15230:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   15232:	4b1b      	ldr	r3, [pc, #108]	; (152a0 <prvTraceStoreTaskReady+0xf0>)
   15234:	4798      	blx	r3
   15236:	0003      	movs	r3, r0
   15238:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1523a:	697b      	ldr	r3, [r7, #20]
   1523c:	2b00      	cmp	r3, #0
   1523e:	d00e      	beq.n	1525e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   15240:	697b      	ldr	r3, [r7, #20]
   15242:	2202      	movs	r2, #2
   15244:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   15246:	697b      	ldr	r3, [r7, #20]
   15248:	221a      	movs	r2, #26
   1524a:	18ba      	adds	r2, r7, r2
   1524c:	8812      	ldrh	r2, [r2, #0]
   1524e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   15250:	697b      	ldr	r3, [r7, #20]
   15252:	2219      	movs	r2, #25
   15254:	18ba      	adds	r2, r7, r2
   15256:	7812      	ldrb	r2, [r2, #0]
   15258:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1525a:	4b12      	ldr	r3, [pc, #72]	; (152a4 <prvTraceStoreTaskReady+0xf4>)
   1525c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1525e:	4b0b      	ldr	r3, [pc, #44]	; (1528c <prvTraceStoreTaskReady+0xdc>)
   15260:	681b      	ldr	r3, [r3, #0]
   15262:	1e5a      	subs	r2, r3, #1
   15264:	4b09      	ldr	r3, [pc, #36]	; (1528c <prvTraceStoreTaskReady+0xdc>)
   15266:	601a      	str	r2, [r3, #0]
   15268:	69fb      	ldr	r3, [r7, #28]
   1526a:	60bb      	str	r3, [r7, #8]
   1526c:	68bb      	ldr	r3, [r7, #8]
   1526e:	f383 8810 	msr	PRIMASK, r3
   15272:	e002      	b.n	1527a <prvTraceStoreTaskReady+0xca>
		return;
   15274:	46c0      	nop			; (mov r8, r8)
   15276:	e000      	b.n	1527a <prvTraceStoreTaskReady+0xca>
		return;
   15278:	46c0      	nop			; (mov r8, r8)
}
   1527a:	46bd      	mov	sp, r7
   1527c:	b009      	add	sp, #36	; 0x24
   1527e:	bd90      	pop	{r4, r7, pc}
   15280:	200000b0 	.word	0x200000b0
   15284:	00035898 	.word	0x00035898
   15288:	0001629d 	.word	0x0001629d
   1528c:	20000bac 	.word	0x20000bac
   15290:	000358d8 	.word	0x000358d8
   15294:	20000c54 	.word	0x20000c54
   15298:	0000ffff 	.word	0x0000ffff
   1529c:	000164b1 	.word	0x000164b1
   152a0:	00015e55 	.word	0x00015e55
   152a4:	00016459 	.word	0x00016459

000152a8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   152a8:	b580      	push	{r7, lr}
   152aa:	b08e      	sub	sp, #56	; 0x38
   152ac:	af00      	add	r7, sp, #0
   152ae:	60f8      	str	r0, [r7, #12]
   152b0:	60b9      	str	r1, [r7, #8]
   152b2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   152b4:	4b48      	ldr	r3, [pc, #288]	; (153d8 <vTraceStoreMemMangEvent+0x130>)
   152b6:	681b      	ldr	r3, [r3, #0]
   152b8:	2b00      	cmp	r3, #0
   152ba:	d100      	bne.n	152be <vTraceStoreMemMangEvent+0x16>
   152bc:	e088      	b.n	153d0 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   152be:	687b      	ldr	r3, [r7, #4]
   152c0:	2b00      	cmp	r3, #0
   152c2:	da03      	bge.n	152cc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   152c4:	687b      	ldr	r3, [r7, #4]
   152c6:	425b      	negs	r3, r3
   152c8:	637b      	str	r3, [r7, #52]	; 0x34
   152ca:	e001      	b.n	152d0 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   152cc:	687b      	ldr	r3, [r7, #4]
   152ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   152d0:	f3ef 8310 	mrs	r3, PRIMASK
   152d4:	61bb      	str	r3, [r7, #24]
  return(result);
   152d6:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   152d8:	633b      	str	r3, [r7, #48]	; 0x30
   152da:	2301      	movs	r3, #1
   152dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   152de:	69fb      	ldr	r3, [r7, #28]
   152e0:	f383 8810 	msr	PRIMASK, r3
   152e4:	4b3d      	ldr	r3, [pc, #244]	; (153dc <vTraceStoreMemMangEvent+0x134>)
   152e6:	681b      	ldr	r3, [r3, #0]
   152e8:	1c5a      	adds	r2, r3, #1
   152ea:	4b3c      	ldr	r3, [pc, #240]	; (153dc <vTraceStoreMemMangEvent+0x134>)
   152ec:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   152ee:	68bb      	ldr	r3, [r7, #8]
   152f0:	2b00      	cmp	r3, #0
   152f2:	d005      	beq.n	15300 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   152f4:	4b3a      	ldr	r3, [pc, #232]	; (153e0 <vTraceStoreMemMangEvent+0x138>)
   152f6:	681a      	ldr	r2, [r3, #0]
   152f8:	687b      	ldr	r3, [r7, #4]
   152fa:	18d2      	adds	r2, r2, r3
   152fc:	4b38      	ldr	r3, [pc, #224]	; (153e0 <vTraceStoreMemMangEvent+0x138>)
   152fe:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   15300:	4b35      	ldr	r3, [pc, #212]	; (153d8 <vTraceStoreMemMangEvent+0x130>)
   15302:	681b      	ldr	r3, [r3, #0]
   15304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15306:	2b00      	cmp	r3, #0
   15308:	d057      	beq.n	153ba <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1530a:	20ff      	movs	r0, #255	; 0xff
   1530c:	4b35      	ldr	r3, [pc, #212]	; (153e4 <vTraceStoreMemMangEvent+0x13c>)
   1530e:	4798      	blx	r3
   15310:	0003      	movs	r3, r0
   15312:	001a      	movs	r2, r3
   15314:	232f      	movs	r3, #47	; 0x2f
   15316:	18fb      	adds	r3, r7, r3
   15318:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1531c:	4a32      	ldr	r2, [pc, #200]	; (153e8 <vTraceStoreMemMangEvent+0x140>)
   1531e:	0019      	movs	r1, r3
   15320:	0010      	movs	r0, r2
   15322:	4b32      	ldr	r3, [pc, #200]	; (153ec <vTraceStoreMemMangEvent+0x144>)
   15324:	4798      	blx	r3
   15326:	0002      	movs	r2, r0
   15328:	232c      	movs	r3, #44	; 0x2c
   1532a:	18fb      	adds	r3, r7, r3
   1532c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1532e:	4b30      	ldr	r3, [pc, #192]	; (153f0 <vTraceStoreMemMangEvent+0x148>)
   15330:	4798      	blx	r3
   15332:	0003      	movs	r3, r0
   15334:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   15336:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15338:	2b00      	cmp	r3, #0
   1533a:	d03e      	beq.n	153ba <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1533e:	222f      	movs	r2, #47	; 0x2f
   15340:	18ba      	adds	r2, r7, r2
   15342:	7812      	ldrb	r2, [r2, #0]
   15344:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   15346:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15348:	2200      	movs	r2, #0
   1534a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1534e:	222c      	movs	r2, #44	; 0x2c
   15350:	18ba      	adds	r2, r7, r2
   15352:	8812      	ldrh	r2, [r2, #0]
   15354:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   15356:	4b27      	ldr	r3, [pc, #156]	; (153f4 <vTraceStoreMemMangEvent+0x14c>)
   15358:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1535a:	68bb      	ldr	r3, [r7, #8]
   1535c:	4a22      	ldr	r2, [pc, #136]	; (153e8 <vTraceStoreMemMangEvent+0x140>)
   1535e:	0019      	movs	r1, r3
   15360:	0010      	movs	r0, r2
   15362:	4b22      	ldr	r3, [pc, #136]	; (153ec <vTraceStoreMemMangEvent+0x144>)
   15364:	4798      	blx	r3
   15366:	0002      	movs	r2, r0
   15368:	2326      	movs	r3, #38	; 0x26
   1536a:	18fb      	adds	r3, r7, r3
   1536c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1536e:	2325      	movs	r3, #37	; 0x25
   15370:	18fb      	adds	r3, r7, r3
   15372:	2200      	movs	r2, #0
   15374:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   15376:	4b1e      	ldr	r3, [pc, #120]	; (153f0 <vTraceStoreMemMangEvent+0x148>)
   15378:	4798      	blx	r3
   1537a:	0003      	movs	r3, r0
   1537c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1537e:	6a3b      	ldr	r3, [r7, #32]
   15380:	2b00      	cmp	r3, #0
   15382:	d01a      	beq.n	153ba <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   15384:	6a3b      	ldr	r3, [r7, #32]
   15386:	2226      	movs	r2, #38	; 0x26
   15388:	18ba      	adds	r2, r7, r2
   1538a:	8812      	ldrh	r2, [r2, #0]
   1538c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1538e:	6a3b      	ldr	r3, [r7, #32]
   15390:	2225      	movs	r2, #37	; 0x25
   15392:	18ba      	adds	r2, r7, r2
   15394:	7812      	ldrb	r2, [r2, #0]
   15396:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   15398:	68fb      	ldr	r3, [r7, #12]
   1539a:	b2db      	uxtb	r3, r3
   1539c:	3301      	adds	r3, #1
   1539e:	b2da      	uxtb	r2, r3
   153a0:	6a3b      	ldr	r3, [r7, #32]
   153a2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   153a4:	68fb      	ldr	r3, [r7, #12]
   153a6:	b2da      	uxtb	r2, r3
   153a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153aa:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   153ac:	4b11      	ldr	r3, [pc, #68]	; (153f4 <vTraceStoreMemMangEvent+0x14c>)
   153ae:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   153b0:	4b09      	ldr	r3, [pc, #36]	; (153d8 <vTraceStoreMemMangEvent+0x130>)
   153b2:	681b      	ldr	r3, [r3, #0]
   153b4:	4a0a      	ldr	r2, [pc, #40]	; (153e0 <vTraceStoreMemMangEvent+0x138>)
   153b6:	6812      	ldr	r2, [r2, #0]
   153b8:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   153ba:	4b08      	ldr	r3, [pc, #32]	; (153dc <vTraceStoreMemMangEvent+0x134>)
   153bc:	681b      	ldr	r3, [r3, #0]
   153be:	1e5a      	subs	r2, r3, #1
   153c0:	4b06      	ldr	r3, [pc, #24]	; (153dc <vTraceStoreMemMangEvent+0x134>)
   153c2:	601a      	str	r2, [r3, #0]
   153c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   153c6:	617b      	str	r3, [r7, #20]
   153c8:	697b      	ldr	r3, [r7, #20]
   153ca:	f383 8810 	msr	PRIMASK, r3
   153ce:	e000      	b.n	153d2 <vTraceStoreMemMangEvent+0x12a>
		return;
   153d0:	46c0      	nop			; (mov r8, r8)
}
   153d2:	46bd      	mov	sp, r7
   153d4:	b00e      	add	sp, #56	; 0x38
   153d6:	bd80      	pop	{r7, pc}
   153d8:	20000c54 	.word	0x20000c54
   153dc:	20000bac 	.word	0x20000bac
   153e0:	20000bc0 	.word	0x20000bc0
   153e4:	000164b1 	.word	0x000164b1
   153e8:	0000ffff 	.word	0x0000ffff
   153ec:	00015675 	.word	0x00015675
   153f0:	00015e55 	.word	0x00015e55
   153f4:	00016459 	.word	0x00016459

000153f8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   153f8:	b590      	push	{r4, r7, lr}
   153fa:	b08b      	sub	sp, #44	; 0x2c
   153fc:	af00      	add	r7, sp, #0
   153fe:	60f8      	str	r0, [r7, #12]
   15400:	607a      	str	r2, [r7, #4]
   15402:	230b      	movs	r3, #11
   15404:	18fb      	adds	r3, r7, r3
   15406:	1c0a      	adds	r2, r1, #0
   15408:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1540a:	68fb      	ldr	r3, [r7, #12]
   1540c:	2bfe      	cmp	r3, #254	; 0xfe
   1540e:	d904      	bls.n	1541a <prvTraceStoreKernelCall+0x22>
   15410:	4b39      	ldr	r3, [pc, #228]	; (154f8 <prvTraceStoreKernelCall+0x100>)
   15412:	0018      	movs	r0, r3
   15414:	4b39      	ldr	r3, [pc, #228]	; (154fc <prvTraceStoreKernelCall+0x104>)
   15416:	4798      	blx	r3
   15418:	e06b      	b.n	154f2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1541a:	230b      	movs	r3, #11
   1541c:	18fb      	adds	r3, r7, r3
   1541e:	781b      	ldrb	r3, [r3, #0]
   15420:	2b08      	cmp	r3, #8
   15422:	d904      	bls.n	1542e <prvTraceStoreKernelCall+0x36>
   15424:	4b36      	ldr	r3, [pc, #216]	; (15500 <prvTraceStoreKernelCall+0x108>)
   15426:	0018      	movs	r0, r3
   15428:	4b34      	ldr	r3, [pc, #208]	; (154fc <prvTraceStoreKernelCall+0x104>)
   1542a:	4798      	blx	r3
   1542c:	e061      	b.n	154f2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1542e:	4b35      	ldr	r3, [pc, #212]	; (15504 <prvTraceStoreKernelCall+0x10c>)
   15430:	681a      	ldr	r2, [r3, #0]
   15432:	230b      	movs	r3, #11
   15434:	18fb      	adds	r3, r7, r3
   15436:	781b      	ldrb	r3, [r3, #0]
   15438:	2164      	movs	r1, #100	; 0x64
   1543a:	18d3      	adds	r3, r2, r3
   1543c:	185b      	adds	r3, r3, r1
   1543e:	781b      	ldrb	r3, [r3, #0]
   15440:	001a      	movs	r2, r3
   15442:	687b      	ldr	r3, [r7, #4]
   15444:	429a      	cmp	r2, r3
   15446:	d204      	bcs.n	15452 <prvTraceStoreKernelCall+0x5a>
   15448:	4b2f      	ldr	r3, [pc, #188]	; (15508 <prvTraceStoreKernelCall+0x110>)
   1544a:	0018      	movs	r0, r3
   1544c:	4b2b      	ldr	r3, [pc, #172]	; (154fc <prvTraceStoreKernelCall+0x104>)
   1544e:	4798      	blx	r3
   15450:	e04f      	b.n	154f2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   15452:	4b2e      	ldr	r3, [pc, #184]	; (1550c <prvTraceStoreKernelCall+0x114>)
   15454:	681b      	ldr	r3, [r3, #0]
   15456:	2b00      	cmp	r3, #0
   15458:	d004      	beq.n	15464 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1545a:	4b2d      	ldr	r3, [pc, #180]	; (15510 <prvTraceStoreKernelCall+0x118>)
   1545c:	0018      	movs	r0, r3
   1545e:	4b27      	ldr	r3, [pc, #156]	; (154fc <prvTraceStoreKernelCall+0x104>)
   15460:	4798      	blx	r3
		return;
   15462:	e046      	b.n	154f2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   15464:	4b2b      	ldr	r3, [pc, #172]	; (15514 <prvTraceStoreKernelCall+0x11c>)
   15466:	781b      	ldrb	r3, [r3, #0]
   15468:	2b00      	cmp	r3, #0
   1546a:	d041      	beq.n	154f0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1546c:	f3ef 8310 	mrs	r3, PRIMASK
   15470:	617b      	str	r3, [r7, #20]
  return(result);
   15472:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   15474:	627b      	str	r3, [r7, #36]	; 0x24
   15476:	2301      	movs	r3, #1
   15478:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1547a:	69bb      	ldr	r3, [r7, #24]
   1547c:	f383 8810 	msr	PRIMASK, r3
   15480:	4b22      	ldr	r3, [pc, #136]	; (1550c <prvTraceStoreKernelCall+0x114>)
   15482:	681b      	ldr	r3, [r3, #0]
   15484:	1c5a      	adds	r2, r3, #1
   15486:	4b21      	ldr	r3, [pc, #132]	; (1550c <prvTraceStoreKernelCall+0x114>)
   15488:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1548a:	4b1e      	ldr	r3, [pc, #120]	; (15504 <prvTraceStoreKernelCall+0x10c>)
   1548c:	681b      	ldr	r3, [r3, #0]
   1548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15490:	2b00      	cmp	r3, #0
   15492:	d022      	beq.n	154da <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   15494:	2322      	movs	r3, #34	; 0x22
   15496:	18fc      	adds	r4, r7, r3
   15498:	4b1f      	ldr	r3, [pc, #124]	; (15518 <prvTraceStoreKernelCall+0x120>)
   1549a:	0018      	movs	r0, r3
   1549c:	4b1f      	ldr	r3, [pc, #124]	; (1551c <prvTraceStoreKernelCall+0x124>)
   1549e:	4798      	blx	r3
   154a0:	0003      	movs	r3, r0
   154a2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   154a4:	2321      	movs	r3, #33	; 0x21
   154a6:	18fb      	adds	r3, r7, r3
   154a8:	687a      	ldr	r2, [r7, #4]
   154aa:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   154ac:	4b1c      	ldr	r3, [pc, #112]	; (15520 <prvTraceStoreKernelCall+0x128>)
   154ae:	4798      	blx	r3
   154b0:	0003      	movs	r3, r0
   154b2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   154b4:	69fb      	ldr	r3, [r7, #28]
   154b6:	2b00      	cmp	r3, #0
   154b8:	d00f      	beq.n	154da <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   154ba:	69fb      	ldr	r3, [r7, #28]
   154bc:	2222      	movs	r2, #34	; 0x22
   154be:	18ba      	adds	r2, r7, r2
   154c0:	8812      	ldrh	r2, [r2, #0]
   154c2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   154c4:	68fb      	ldr	r3, [r7, #12]
   154c6:	b2da      	uxtb	r2, r3
   154c8:	69fb      	ldr	r3, [r7, #28]
   154ca:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   154cc:	69fb      	ldr	r3, [r7, #28]
   154ce:	2221      	movs	r2, #33	; 0x21
   154d0:	18ba      	adds	r2, r7, r2
   154d2:	7812      	ldrb	r2, [r2, #0]
   154d4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   154d6:	4b13      	ldr	r3, [pc, #76]	; (15524 <prvTraceStoreKernelCall+0x12c>)
   154d8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   154da:	4b0c      	ldr	r3, [pc, #48]	; (1550c <prvTraceStoreKernelCall+0x114>)
   154dc:	681b      	ldr	r3, [r3, #0]
   154de:	1e5a      	subs	r2, r3, #1
   154e0:	4b0a      	ldr	r3, [pc, #40]	; (1550c <prvTraceStoreKernelCall+0x114>)
   154e2:	601a      	str	r2, [r3, #0]
   154e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   154e6:	613b      	str	r3, [r7, #16]
   154e8:	693b      	ldr	r3, [r7, #16]
   154ea:	f383 8810 	msr	PRIMASK, r3
   154ee:	e000      	b.n	154f2 <prvTraceStoreKernelCall+0xfa>
		return;
   154f0:	46c0      	nop			; (mov r8, r8)
}
   154f2:	46bd      	mov	sp, r7
   154f4:	b00b      	add	sp, #44	; 0x2c
   154f6:	bd90      	pop	{r4, r7, pc}
   154f8:	00035948 	.word	0x00035948
   154fc:	0001629d 	.word	0x0001629d
   15500:	00035980 	.word	0x00035980
   15504:	20000c54 	.word	0x20000c54
   15508:	000359c8 	.word	0x000359c8
   1550c:	20000bac 	.word	0x20000bac
   15510:	00035a10 	.word	0x00035a10
   15514:	20000bb8 	.word	0x20000bb8
   15518:	0000ffff 	.word	0x0000ffff
   1551c:	000164b1 	.word	0x000164b1
   15520:	00015e55 	.word	0x00015e55
   15524:	00016459 	.word	0x00016459

00015528 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   15528:	b580      	push	{r7, lr}
   1552a:	b08a      	sub	sp, #40	; 0x28
   1552c:	af00      	add	r7, sp, #0
   1552e:	60f8      	str	r0, [r7, #12]
   15530:	607a      	str	r2, [r7, #4]
   15532:	603b      	str	r3, [r7, #0]
   15534:	230b      	movs	r3, #11
   15536:	18fb      	adds	r3, r7, r3
   15538:	1c0a      	adds	r2, r1, #0
   1553a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1553c:	68fb      	ldr	r3, [r7, #12]
   1553e:	2bfe      	cmp	r3, #254	; 0xfe
   15540:	d904      	bls.n	1554c <prvTraceStoreKernelCallWithParam+0x24>
   15542:	4b40      	ldr	r3, [pc, #256]	; (15644 <prvTraceStoreKernelCallWithParam+0x11c>)
   15544:	0018      	movs	r0, r3
   15546:	4b40      	ldr	r3, [pc, #256]	; (15648 <prvTraceStoreKernelCallWithParam+0x120>)
   15548:	4798      	blx	r3
   1554a:	e077      	b.n	1563c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1554c:	230b      	movs	r3, #11
   1554e:	18fb      	adds	r3, r7, r3
   15550:	781b      	ldrb	r3, [r3, #0]
   15552:	2b08      	cmp	r3, #8
   15554:	d904      	bls.n	15560 <prvTraceStoreKernelCallWithParam+0x38>
   15556:	4b3d      	ldr	r3, [pc, #244]	; (1564c <prvTraceStoreKernelCallWithParam+0x124>)
   15558:	0018      	movs	r0, r3
   1555a:	4b3b      	ldr	r3, [pc, #236]	; (15648 <prvTraceStoreKernelCallWithParam+0x120>)
   1555c:	4798      	blx	r3
   1555e:	e06d      	b.n	1563c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   15560:	4b3b      	ldr	r3, [pc, #236]	; (15650 <prvTraceStoreKernelCallWithParam+0x128>)
   15562:	681a      	ldr	r2, [r3, #0]
   15564:	230b      	movs	r3, #11
   15566:	18fb      	adds	r3, r7, r3
   15568:	781b      	ldrb	r3, [r3, #0]
   1556a:	2164      	movs	r1, #100	; 0x64
   1556c:	18d3      	adds	r3, r2, r3
   1556e:	185b      	adds	r3, r3, r1
   15570:	781b      	ldrb	r3, [r3, #0]
   15572:	001a      	movs	r2, r3
   15574:	687b      	ldr	r3, [r7, #4]
   15576:	429a      	cmp	r2, r3
   15578:	d204      	bcs.n	15584 <prvTraceStoreKernelCallWithParam+0x5c>
   1557a:	4b36      	ldr	r3, [pc, #216]	; (15654 <prvTraceStoreKernelCallWithParam+0x12c>)
   1557c:	0018      	movs	r0, r3
   1557e:	4b32      	ldr	r3, [pc, #200]	; (15648 <prvTraceStoreKernelCallWithParam+0x120>)
   15580:	4798      	blx	r3
   15582:	e05b      	b.n	1563c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   15584:	4b34      	ldr	r3, [pc, #208]	; (15658 <prvTraceStoreKernelCallWithParam+0x130>)
   15586:	681b      	ldr	r3, [r3, #0]
   15588:	2b00      	cmp	r3, #0
   1558a:	d004      	beq.n	15596 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1558c:	4b33      	ldr	r3, [pc, #204]	; (1565c <prvTraceStoreKernelCallWithParam+0x134>)
   1558e:	0018      	movs	r0, r3
   15590:	4b2d      	ldr	r3, [pc, #180]	; (15648 <prvTraceStoreKernelCallWithParam+0x120>)
   15592:	4798      	blx	r3
		return;
   15594:	e052      	b.n	1563c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15596:	f3ef 8310 	mrs	r3, PRIMASK
   1559a:	617b      	str	r3, [r7, #20]
  return(result);
   1559c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1559e:	627b      	str	r3, [r7, #36]	; 0x24
   155a0:	2301      	movs	r3, #1
   155a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   155a4:	69bb      	ldr	r3, [r7, #24]
   155a6:	f383 8810 	msr	PRIMASK, r3
   155aa:	4b2b      	ldr	r3, [pc, #172]	; (15658 <prvTraceStoreKernelCallWithParam+0x130>)
   155ac:	681b      	ldr	r3, [r3, #0]
   155ae:	1c5a      	adds	r2, r3, #1
   155b0:	4b29      	ldr	r3, [pc, #164]	; (15658 <prvTraceStoreKernelCallWithParam+0x130>)
   155b2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   155b4:	4b26      	ldr	r3, [pc, #152]	; (15650 <prvTraceStoreKernelCallWithParam+0x128>)
   155b6:	681b      	ldr	r3, [r3, #0]
   155b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   155ba:	2b00      	cmp	r3, #0
   155bc:	d034      	beq.n	15628 <prvTraceStoreKernelCallWithParam+0x100>
   155be:	4b28      	ldr	r3, [pc, #160]	; (15660 <prvTraceStoreKernelCallWithParam+0x138>)
   155c0:	781b      	ldrb	r3, [r3, #0]
   155c2:	2b00      	cmp	r3, #0
   155c4:	d030      	beq.n	15628 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   155c6:	20ff      	movs	r0, #255	; 0xff
   155c8:	4b26      	ldr	r3, [pc, #152]	; (15664 <prvTraceStoreKernelCallWithParam+0x13c>)
   155ca:	4798      	blx	r3
   155cc:	0003      	movs	r3, r0
   155ce:	001a      	movs	r2, r3
   155d0:	2323      	movs	r3, #35	; 0x23
   155d2:	18fb      	adds	r3, r7, r3
   155d4:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   155d6:	683b      	ldr	r3, [r7, #0]
   155d8:	0019      	movs	r1, r3
   155da:	20ff      	movs	r0, #255	; 0xff
   155dc:	4b22      	ldr	r3, [pc, #136]	; (15668 <prvTraceStoreKernelCallWithParam+0x140>)
   155de:	4798      	blx	r3
   155e0:	0002      	movs	r2, r0
   155e2:	2322      	movs	r3, #34	; 0x22
   155e4:	18fb      	adds	r3, r7, r3
   155e6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   155e8:	2321      	movs	r3, #33	; 0x21
   155ea:	18fb      	adds	r3, r7, r3
   155ec:	687a      	ldr	r2, [r7, #4]
   155ee:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   155f0:	4b1e      	ldr	r3, [pc, #120]	; (1566c <prvTraceStoreKernelCallWithParam+0x144>)
   155f2:	4798      	blx	r3
   155f4:	0003      	movs	r3, r0
   155f6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   155f8:	69fb      	ldr	r3, [r7, #28]
   155fa:	2b00      	cmp	r3, #0
   155fc:	d014      	beq.n	15628 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   155fe:	69fb      	ldr	r3, [r7, #28]
   15600:	2223      	movs	r2, #35	; 0x23
   15602:	18ba      	adds	r2, r7, r2
   15604:	7812      	ldrb	r2, [r2, #0]
   15606:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   15608:	68fb      	ldr	r3, [r7, #12]
   1560a:	b2da      	uxtb	r2, r3
   1560c:	69fb      	ldr	r3, [r7, #28]
   1560e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   15610:	69fb      	ldr	r3, [r7, #28]
   15612:	2221      	movs	r2, #33	; 0x21
   15614:	18ba      	adds	r2, r7, r2
   15616:	7812      	ldrb	r2, [r2, #0]
   15618:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1561a:	69fb      	ldr	r3, [r7, #28]
   1561c:	2222      	movs	r2, #34	; 0x22
   1561e:	18ba      	adds	r2, r7, r2
   15620:	7812      	ldrb	r2, [r2, #0]
   15622:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   15624:	4b12      	ldr	r3, [pc, #72]	; (15670 <prvTraceStoreKernelCallWithParam+0x148>)
   15626:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   15628:	4b0b      	ldr	r3, [pc, #44]	; (15658 <prvTraceStoreKernelCallWithParam+0x130>)
   1562a:	681b      	ldr	r3, [r3, #0]
   1562c:	1e5a      	subs	r2, r3, #1
   1562e:	4b0a      	ldr	r3, [pc, #40]	; (15658 <prvTraceStoreKernelCallWithParam+0x130>)
   15630:	601a      	str	r2, [r3, #0]
   15632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15634:	613b      	str	r3, [r7, #16]
   15636:	693b      	ldr	r3, [r7, #16]
   15638:	f383 8810 	msr	PRIMASK, r3
}
   1563c:	46bd      	mov	sp, r7
   1563e:	b00a      	add	sp, #40	; 0x28
   15640:	bd80      	pop	{r7, pc}
   15642:	46c0      	nop			; (mov r8, r8)
   15644:	00035a48 	.word	0x00035a48
   15648:	0001629d 	.word	0x0001629d
   1564c:	00035a88 	.word	0x00035a88
   15650:	20000c54 	.word	0x20000c54
   15654:	00035ad8 	.word	0x00035ad8
   15658:	20000bac 	.word	0x20000bac
   1565c:	00035b28 	.word	0x00035b28
   15660:	20000bb8 	.word	0x20000bb8
   15664:	000164b1 	.word	0x000164b1
   15668:	00015675 	.word	0x00015675
   1566c:	00015e55 	.word	0x00015e55
   15670:	00016459 	.word	0x00016459

00015674 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   15674:	b580      	push	{r7, lr}
   15676:	b084      	sub	sp, #16
   15678:	af00      	add	r7, sp, #0
   1567a:	6078      	str	r0, [r7, #4]
   1567c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1567e:	687b      	ldr	r3, [r7, #4]
   15680:	2bff      	cmp	r3, #255	; 0xff
   15682:	d009      	beq.n	15698 <prvTraceGetParam+0x24>
   15684:	687b      	ldr	r3, [r7, #4]
   15686:	4a19      	ldr	r2, [pc, #100]	; (156ec <prvTraceGetParam+0x78>)
   15688:	4293      	cmp	r3, r2
   1568a:	d005      	beq.n	15698 <prvTraceGetParam+0x24>
   1568c:	4b18      	ldr	r3, [pc, #96]	; (156f0 <prvTraceGetParam+0x7c>)
   1568e:	0018      	movs	r0, r3
   15690:	4b18      	ldr	r3, [pc, #96]	; (156f4 <prvTraceGetParam+0x80>)
   15692:	4798      	blx	r3
   15694:	683b      	ldr	r3, [r7, #0]
   15696:	e024      	b.n	156e2 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   15698:	683a      	ldr	r2, [r7, #0]
   1569a:	687b      	ldr	r3, [r7, #4]
   1569c:	429a      	cmp	r2, r3
   1569e:	d801      	bhi.n	156a4 <prvTraceGetParam+0x30>
	{
		return param;
   156a0:	683b      	ldr	r3, [r7, #0]
   156a2:	e01e      	b.n	156e2 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   156a4:	4b14      	ldr	r3, [pc, #80]	; (156f8 <prvTraceGetParam+0x84>)
   156a6:	4798      	blx	r3
   156a8:	0003      	movs	r3, r0
   156aa:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   156ac:	68fb      	ldr	r3, [r7, #12]
   156ae:	2b00      	cmp	r3, #0
   156b0:	d014      	beq.n	156dc <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   156b2:	68fb      	ldr	r3, [r7, #12]
   156b4:	2201      	movs	r2, #1
   156b6:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   156b8:	687b      	ldr	r3, [r7, #4]
   156ba:	43db      	mvns	r3, r3
   156bc:	683a      	ldr	r2, [r7, #0]
   156be:	4013      	ands	r3, r2
   156c0:	0a1b      	lsrs	r3, r3, #8
   156c2:	b2da      	uxtb	r2, r3
   156c4:	68fb      	ldr	r3, [r7, #12]
   156c6:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   156c8:	687b      	ldr	r3, [r7, #4]
   156ca:	43db      	mvns	r3, r3
   156cc:	683a      	ldr	r2, [r7, #0]
   156ce:	4013      	ands	r3, r2
   156d0:	0c1b      	lsrs	r3, r3, #16
   156d2:	b29a      	uxth	r2, r3
   156d4:	68fb      	ldr	r3, [r7, #12]
   156d6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   156d8:	4b08      	ldr	r3, [pc, #32]	; (156fc <prvTraceGetParam+0x88>)
   156da:	4798      	blx	r3
		}

		return param & param_max;
   156dc:	683b      	ldr	r3, [r7, #0]
   156de:	687a      	ldr	r2, [r7, #4]
   156e0:	4013      	ands	r3, r2
	}
}
   156e2:	0018      	movs	r0, r3
   156e4:	46bd      	mov	sp, r7
   156e6:	b004      	add	sp, #16
   156e8:	bd80      	pop	{r7, pc}
   156ea:	46c0      	nop			; (mov r8, r8)
   156ec:	0000ffff 	.word	0x0000ffff
   156f0:	00035b60 	.word	0x00035b60
   156f4:	0001629d 	.word	0x0001629d
   156f8:	00015e55 	.word	0x00015e55
   156fc:	00016459 	.word	0x00016459

00015700 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   15700:	b580      	push	{r7, lr}
   15702:	b08a      	sub	sp, #40	; 0x28
   15704:	af00      	add	r7, sp, #0
   15706:	6078      	str	r0, [r7, #4]
   15708:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1570a:	2326      	movs	r3, #38	; 0x26
   1570c:	18fb      	adds	r3, r7, r3
   1570e:	2200      	movs	r2, #0
   15710:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   15712:	687b      	ldr	r3, [r7, #4]
   15714:	2bfe      	cmp	r3, #254	; 0xfe
   15716:	d904      	bls.n	15722 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   15718:	4b2d      	ldr	r3, [pc, #180]	; (157d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1571a:	0018      	movs	r0, r3
   1571c:	4b2d      	ldr	r3, [pc, #180]	; (157d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1571e:	4798      	blx	r3
   15720:	e053      	b.n	157ca <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   15722:	4b2d      	ldr	r3, [pc, #180]	; (157d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   15724:	681b      	ldr	r3, [r3, #0]
   15726:	2b00      	cmp	r3, #0
   15728:	d004      	beq.n	15734 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1572a:	4b2c      	ldr	r3, [pc, #176]	; (157dc <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1572c:	0018      	movs	r0, r3
   1572e:	4b29      	ldr	r3, [pc, #164]	; (157d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   15730:	4798      	blx	r3
		return;
   15732:	e04a      	b.n	157ca <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15734:	f3ef 8310 	mrs	r3, PRIMASK
   15738:	613b      	str	r3, [r7, #16]
  return(result);
   1573a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1573c:	623b      	str	r3, [r7, #32]
   1573e:	2301      	movs	r3, #1
   15740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15742:	697b      	ldr	r3, [r7, #20]
   15744:	f383 8810 	msr	PRIMASK, r3
   15748:	4b23      	ldr	r3, [pc, #140]	; (157d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1574a:	681b      	ldr	r3, [r3, #0]
   1574c:	1c5a      	adds	r2, r3, #1
   1574e:	4b22      	ldr	r3, [pc, #136]	; (157d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   15750:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   15752:	4b23      	ldr	r3, [pc, #140]	; (157e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   15754:	681b      	ldr	r3, [r3, #0]
   15756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15758:	2b00      	cmp	r3, #0
   1575a:	d02c      	beq.n	157b6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1575c:	4b21      	ldr	r3, [pc, #132]	; (157e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1575e:	781b      	ldrb	r3, [r3, #0]
   15760:	2b00      	cmp	r3, #0
   15762:	d028      	beq.n	157b6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   15764:	20ff      	movs	r0, #255	; 0xff
   15766:	4b20      	ldr	r3, [pc, #128]	; (157e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   15768:	4798      	blx	r3
   1576a:	0003      	movs	r3, r0
   1576c:	001a      	movs	r2, r3
   1576e:	231f      	movs	r3, #31
   15770:	18fb      	adds	r3, r7, r3
   15772:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   15774:	683b      	ldr	r3, [r7, #0]
   15776:	4a1d      	ldr	r2, [pc, #116]	; (157ec <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   15778:	0019      	movs	r1, r3
   1577a:	0010      	movs	r0, r2
   1577c:	4b1c      	ldr	r3, [pc, #112]	; (157f0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1577e:	4798      	blx	r3
   15780:	0002      	movs	r2, r0
   15782:	2326      	movs	r3, #38	; 0x26
   15784:	18fb      	adds	r3, r7, r3
   15786:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   15788:	4b1a      	ldr	r3, [pc, #104]	; (157f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1578a:	4798      	blx	r3
   1578c:	0003      	movs	r3, r0
   1578e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   15790:	69bb      	ldr	r3, [r7, #24]
   15792:	2b00      	cmp	r3, #0
   15794:	d00f      	beq.n	157b6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   15796:	69bb      	ldr	r3, [r7, #24]
   15798:	221f      	movs	r2, #31
   1579a:	18ba      	adds	r2, r7, r2
   1579c:	7812      	ldrb	r2, [r2, #0]
   1579e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   157a0:	687b      	ldr	r3, [r7, #4]
   157a2:	b2da      	uxtb	r2, r3
   157a4:	69bb      	ldr	r3, [r7, #24]
   157a6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   157a8:	69bb      	ldr	r3, [r7, #24]
   157aa:	2226      	movs	r2, #38	; 0x26
   157ac:	18ba      	adds	r2, r7, r2
   157ae:	8812      	ldrh	r2, [r2, #0]
   157b0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   157b2:	4b11      	ldr	r3, [pc, #68]	; (157f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   157b4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   157b6:	4b08      	ldr	r3, [pc, #32]	; (157d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   157b8:	681b      	ldr	r3, [r3, #0]
   157ba:	1e5a      	subs	r2, r3, #1
   157bc:	4b06      	ldr	r3, [pc, #24]	; (157d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   157be:	601a      	str	r2, [r3, #0]
   157c0:	6a3b      	ldr	r3, [r7, #32]
   157c2:	60fb      	str	r3, [r7, #12]
   157c4:	68fb      	ldr	r3, [r7, #12]
   157c6:	f383 8810 	msr	PRIMASK, r3
}
   157ca:	46bd      	mov	sp, r7
   157cc:	b00a      	add	sp, #40	; 0x28
   157ce:	bd80      	pop	{r7, pc}
   157d0:	00035b9c 	.word	0x00035b9c
   157d4:	0001629d 	.word	0x0001629d
   157d8:	20000bac 	.word	0x20000bac
   157dc:	00035bf4 	.word	0x00035bf4
   157e0:	20000c54 	.word	0x20000c54
   157e4:	20000bb8 	.word	0x20000bb8
   157e8:	000164b1 	.word	0x000164b1
   157ec:	0000ffff 	.word	0x0000ffff
   157f0:	00015675 	.word	0x00015675
   157f4:	00015e55 	.word	0x00015e55
   157f8:	00016459 	.word	0x00016459

000157fc <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   157fc:	b590      	push	{r4, r7, lr}
   157fe:	b089      	sub	sp, #36	; 0x24
   15800:	af00      	add	r7, sp, #0
   15802:	0002      	movs	r2, r0
   15804:	1dfb      	adds	r3, r7, #7
   15806:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   15808:	1dfb      	adds	r3, r7, #7
   1580a:	781b      	ldrb	r3, [r3, #0]
   1580c:	2b0f      	cmp	r3, #15
   1580e:	d904      	bls.n	1581a <prvTraceStoreTaskswitch+0x1e>
   15810:	4b34      	ldr	r3, [pc, #208]	; (158e4 <prvTraceStoreTaskswitch+0xe8>)
   15812:	0018      	movs	r0, r3
   15814:	4b34      	ldr	r3, [pc, #208]	; (158e8 <prvTraceStoreTaskswitch+0xec>)
   15816:	4798      	blx	r3
   15818:	e061      	b.n	158de <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1581a:	f3ef 8310 	mrs	r3, PRIMASK
   1581e:	60fb      	str	r3, [r7, #12]
  return(result);
   15820:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   15822:	61fb      	str	r3, [r7, #28]
   15824:	2301      	movs	r3, #1
   15826:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15828:	693b      	ldr	r3, [r7, #16]
   1582a:	f383 8810 	msr	PRIMASK, r3
   1582e:	4b2f      	ldr	r3, [pc, #188]	; (158ec <prvTraceStoreTaskswitch+0xf0>)
   15830:	681b      	ldr	r3, [r3, #0]
   15832:	1c5a      	adds	r2, r3, #1
   15834:	4b2d      	ldr	r3, [pc, #180]	; (158ec <prvTraceStoreTaskswitch+0xf0>)
   15836:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   15838:	4b2d      	ldr	r3, [pc, #180]	; (158f0 <prvTraceStoreTaskswitch+0xf4>)
   1583a:	781b      	ldrb	r3, [r3, #0]
   1583c:	1dfa      	adds	r2, r7, #7
   1583e:	7812      	ldrb	r2, [r2, #0]
   15840:	429a      	cmp	r2, r3
   15842:	d042      	beq.n	158ca <prvTraceStoreTaskswitch+0xce>
   15844:	4b2b      	ldr	r3, [pc, #172]	; (158f4 <prvTraceStoreTaskswitch+0xf8>)
   15846:	681b      	ldr	r3, [r3, #0]
   15848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1584a:	2b00      	cmp	r3, #0
   1584c:	d03d      	beq.n	158ca <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1584e:	4b2a      	ldr	r3, [pc, #168]	; (158f8 <prvTraceStoreTaskswitch+0xfc>)
   15850:	2200      	movs	r2, #0
   15852:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   15854:	231a      	movs	r3, #26
   15856:	18fc      	adds	r4, r7, r3
   15858:	4b28      	ldr	r3, [pc, #160]	; (158fc <prvTraceStoreTaskswitch+0x100>)
   1585a:	0018      	movs	r0, r3
   1585c:	4b28      	ldr	r3, [pc, #160]	; (15900 <prvTraceStoreTaskswitch+0x104>)
   1585e:	4798      	blx	r3
   15860:	0003      	movs	r3, r0
   15862:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   15864:	4b22      	ldr	r3, [pc, #136]	; (158f0 <prvTraceStoreTaskswitch+0xf4>)
   15866:	1dfa      	adds	r2, r7, #7
   15868:	7812      	ldrb	r2, [r2, #0]
   1586a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1586c:	2319      	movs	r3, #25
   1586e:	18fb      	adds	r3, r7, r3
   15870:	4a1f      	ldr	r2, [pc, #124]	; (158f0 <prvTraceStoreTaskswitch+0xf4>)
   15872:	7812      	ldrb	r2, [r2, #0]
   15874:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   15876:	4b23      	ldr	r3, [pc, #140]	; (15904 <prvTraceStoreTaskswitch+0x108>)
   15878:	4798      	blx	r3
   1587a:	0003      	movs	r3, r0
   1587c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1587e:	697b      	ldr	r3, [r7, #20]
   15880:	2b00      	cmp	r3, #0
   15882:	d022      	beq.n	158ca <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   15884:	4b1a      	ldr	r3, [pc, #104]	; (158f0 <prvTraceStoreTaskswitch+0xf4>)
   15886:	781b      	ldrb	r3, [r3, #0]
   15888:	0019      	movs	r1, r3
   1588a:	2003      	movs	r0, #3
   1588c:	4b1e      	ldr	r3, [pc, #120]	; (15908 <prvTraceStoreTaskswitch+0x10c>)
   1588e:	4798      	blx	r3
   15890:	0003      	movs	r3, r0
   15892:	2b01      	cmp	r3, #1
   15894:	d103      	bne.n	1589e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   15896:	697b      	ldr	r3, [r7, #20]
   15898:	2207      	movs	r2, #7
   1589a:	701a      	strb	r2, [r3, #0]
   1589c:	e002      	b.n	158a4 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1589e:	697b      	ldr	r3, [r7, #20]
   158a0:	2206      	movs	r2, #6
   158a2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   158a4:	697b      	ldr	r3, [r7, #20]
   158a6:	221a      	movs	r2, #26
   158a8:	18ba      	adds	r2, r7, r2
   158aa:	8812      	ldrh	r2, [r2, #0]
   158ac:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   158ae:	697b      	ldr	r3, [r7, #20]
   158b0:	2219      	movs	r2, #25
   158b2:	18ba      	adds	r2, r7, r2
   158b4:	7812      	ldrb	r2, [r2, #0]
   158b6:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   158b8:	4b0d      	ldr	r3, [pc, #52]	; (158f0 <prvTraceStoreTaskswitch+0xf4>)
   158ba:	781b      	ldrb	r3, [r3, #0]
   158bc:	2201      	movs	r2, #1
   158be:	0019      	movs	r1, r3
   158c0:	2003      	movs	r0, #3
   158c2:	4b12      	ldr	r3, [pc, #72]	; (1590c <prvTraceStoreTaskswitch+0x110>)
   158c4:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   158c6:	4b12      	ldr	r3, [pc, #72]	; (15910 <prvTraceStoreTaskswitch+0x114>)
   158c8:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   158ca:	4b08      	ldr	r3, [pc, #32]	; (158ec <prvTraceStoreTaskswitch+0xf0>)
   158cc:	681b      	ldr	r3, [r3, #0]
   158ce:	1e5a      	subs	r2, r3, #1
   158d0:	4b06      	ldr	r3, [pc, #24]	; (158ec <prvTraceStoreTaskswitch+0xf0>)
   158d2:	601a      	str	r2, [r3, #0]
   158d4:	69fb      	ldr	r3, [r7, #28]
   158d6:	60bb      	str	r3, [r7, #8]
   158d8:	68bb      	ldr	r3, [r7, #8]
   158da:	f383 8810 	msr	PRIMASK, r3
}
   158de:	46bd      	mov	sp, r7
   158e0:	b009      	add	sp, #36	; 0x24
   158e2:	bd90      	pop	{r4, r7, pc}
   158e4:	00035c2c 	.word	0x00035c2c
   158e8:	0001629d 	.word	0x0001629d
   158ec:	20000bac 	.word	0x20000bac
   158f0:	20000bb8 	.word	0x20000bb8
   158f4:	20000c54 	.word	0x20000c54
   158f8:	20000b98 	.word	0x20000b98
   158fc:	0000ffff 	.word	0x0000ffff
   15900:	000164b1 	.word	0x000164b1
   15904:	00015e55 	.word	0x00015e55
   15908:	00015af9 	.word	0x00015af9
   1590c:	00015a55 	.word	0x00015a55
   15910:	00016459 	.word	0x00016459

00015914 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   15914:	b590      	push	{r4, r7, lr}
   15916:	b083      	sub	sp, #12
   15918:	af00      	add	r7, sp, #0
   1591a:	0004      	movs	r4, r0
   1591c:	0008      	movs	r0, r1
   1591e:	0011      	movs	r1, r2
   15920:	1dfb      	adds	r3, r7, #7
   15922:	1c22      	adds	r2, r4, #0
   15924:	701a      	strb	r2, [r3, #0]
   15926:	1dbb      	adds	r3, r7, #6
   15928:	1c02      	adds	r2, r0, #0
   1592a:	701a      	strb	r2, [r3, #0]
   1592c:	1d7b      	adds	r3, r7, #5
   1592e:	1c0a      	adds	r2, r1, #0
   15930:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15932:	1dfb      	adds	r3, r7, #7
   15934:	781b      	ldrb	r3, [r3, #0]
   15936:	2b08      	cmp	r3, #8
   15938:	d904      	bls.n	15944 <prvTraceSetPriorityProperty+0x30>
   1593a:	4b1a      	ldr	r3, [pc, #104]	; (159a4 <prvTraceSetPriorityProperty+0x90>)
   1593c:	0018      	movs	r0, r3
   1593e:	4b1a      	ldr	r3, [pc, #104]	; (159a8 <prvTraceSetPriorityProperty+0x94>)
   15940:	4798      	blx	r3
   15942:	e02c      	b.n	1599e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15944:	4b19      	ldr	r3, [pc, #100]	; (159ac <prvTraceSetPriorityProperty+0x98>)
   15946:	681a      	ldr	r2, [r3, #0]
   15948:	1dfb      	adds	r3, r7, #7
   1594a:	781b      	ldrb	r3, [r3, #0]
   1594c:	2164      	movs	r1, #100	; 0x64
   1594e:	18d3      	adds	r3, r2, r3
   15950:	185b      	adds	r3, r3, r1
   15952:	781b      	ldrb	r3, [r3, #0]
   15954:	1dba      	adds	r2, r7, #6
   15956:	7812      	ldrb	r2, [r2, #0]
   15958:	429a      	cmp	r2, r3
   1595a:	d904      	bls.n	15966 <prvTraceSetPriorityProperty+0x52>
   1595c:	4b14      	ldr	r3, [pc, #80]	; (159b0 <prvTraceSetPriorityProperty+0x9c>)
   1595e:	0018      	movs	r0, r3
   15960:	4b11      	ldr	r3, [pc, #68]	; (159a8 <prvTraceSetPriorityProperty+0x94>)
   15962:	4798      	blx	r3
   15964:	e01b      	b.n	1599e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   15966:	4b11      	ldr	r3, [pc, #68]	; (159ac <prvTraceSetPriorityProperty+0x98>)
   15968:	681c      	ldr	r4, [r3, #0]
   1596a:	1dfb      	adds	r3, r7, #7
   1596c:	781a      	ldrb	r2, [r3, #0]
   1596e:	1dbb      	adds	r3, r7, #6
   15970:	781b      	ldrb	r3, [r3, #0]
   15972:	0011      	movs	r1, r2
   15974:	0018      	movs	r0, r3
   15976:	4b0f      	ldr	r3, [pc, #60]	; (159b4 <prvTraceSetPriorityProperty+0xa0>)
   15978:	4798      	blx	r3
   1597a:	0003      	movs	r3, r0
   1597c:	0018      	movs	r0, r3
   1597e:	4b0b      	ldr	r3, [pc, #44]	; (159ac <prvTraceSetPriorityProperty+0x98>)
   15980:	681a      	ldr	r2, [r3, #0]
   15982:	1dfb      	adds	r3, r7, #7
   15984:	781b      	ldrb	r3, [r3, #0]
   15986:	2170      	movs	r1, #112	; 0x70
   15988:	18d3      	adds	r3, r2, r3
   1598a:	185b      	adds	r3, r3, r1
   1598c:	781b      	ldrb	r3, [r3, #0]
   1598e:	18c3      	adds	r3, r0, r3
   15990:	3301      	adds	r3, #1
   15992:	229c      	movs	r2, #156	; 0x9c
   15994:	18e3      	adds	r3, r4, r3
   15996:	189b      	adds	r3, r3, r2
   15998:	1d7a      	adds	r2, r7, #5
   1599a:	7812      	ldrb	r2, [r2, #0]
   1599c:	701a      	strb	r2, [r3, #0]
}
   1599e:	46bd      	mov	sp, r7
   159a0:	b003      	add	sp, #12
   159a2:	bd90      	pop	{r4, r7, pc}
   159a4:	00035dc0 	.word	0x00035dc0
   159a8:	0001629d 	.word	0x0001629d
   159ac:	20000c54 	.word	0x20000c54
   159b0:	00035e0c 	.word	0x00035e0c
   159b4:	00015ea9 	.word	0x00015ea9

000159b8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   159b8:	b590      	push	{r4, r7, lr}
   159ba:	b083      	sub	sp, #12
   159bc:	af00      	add	r7, sp, #0
   159be:	0002      	movs	r2, r0
   159c0:	1dfb      	adds	r3, r7, #7
   159c2:	701a      	strb	r2, [r3, #0]
   159c4:	1dbb      	adds	r3, r7, #6
   159c6:	1c0a      	adds	r2, r1, #0
   159c8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   159ca:	1dfb      	adds	r3, r7, #7
   159cc:	781b      	ldrb	r3, [r3, #0]
   159ce:	2b08      	cmp	r3, #8
   159d0:	d905      	bls.n	159de <prvTraceGetPriorityProperty+0x26>
   159d2:	4b1b      	ldr	r3, [pc, #108]	; (15a40 <prvTraceGetPriorityProperty+0x88>)
   159d4:	0018      	movs	r0, r3
   159d6:	4b1b      	ldr	r3, [pc, #108]	; (15a44 <prvTraceGetPriorityProperty+0x8c>)
   159d8:	4798      	blx	r3
   159da:	2300      	movs	r3, #0
   159dc:	e02b      	b.n	15a36 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   159de:	4b1a      	ldr	r3, [pc, #104]	; (15a48 <prvTraceGetPriorityProperty+0x90>)
   159e0:	681a      	ldr	r2, [r3, #0]
   159e2:	1dfb      	adds	r3, r7, #7
   159e4:	781b      	ldrb	r3, [r3, #0]
   159e6:	2164      	movs	r1, #100	; 0x64
   159e8:	18d3      	adds	r3, r2, r3
   159ea:	185b      	adds	r3, r3, r1
   159ec:	781b      	ldrb	r3, [r3, #0]
   159ee:	1dba      	adds	r2, r7, #6
   159f0:	7812      	ldrb	r2, [r2, #0]
   159f2:	429a      	cmp	r2, r3
   159f4:	d905      	bls.n	15a02 <prvTraceGetPriorityProperty+0x4a>
   159f6:	4b15      	ldr	r3, [pc, #84]	; (15a4c <prvTraceGetPriorityProperty+0x94>)
   159f8:	0018      	movs	r0, r3
   159fa:	4b12      	ldr	r3, [pc, #72]	; (15a44 <prvTraceGetPriorityProperty+0x8c>)
   159fc:	4798      	blx	r3
   159fe:	2300      	movs	r3, #0
   15a00:	e019      	b.n	15a36 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   15a02:	4b11      	ldr	r3, [pc, #68]	; (15a48 <prvTraceGetPriorityProperty+0x90>)
   15a04:	681c      	ldr	r4, [r3, #0]
   15a06:	1dfb      	adds	r3, r7, #7
   15a08:	781a      	ldrb	r2, [r3, #0]
   15a0a:	1dbb      	adds	r3, r7, #6
   15a0c:	781b      	ldrb	r3, [r3, #0]
   15a0e:	0011      	movs	r1, r2
   15a10:	0018      	movs	r0, r3
   15a12:	4b0f      	ldr	r3, [pc, #60]	; (15a50 <prvTraceGetPriorityProperty+0x98>)
   15a14:	4798      	blx	r3
   15a16:	0003      	movs	r3, r0
   15a18:	0018      	movs	r0, r3
   15a1a:	4b0b      	ldr	r3, [pc, #44]	; (15a48 <prvTraceGetPriorityProperty+0x90>)
   15a1c:	681a      	ldr	r2, [r3, #0]
   15a1e:	1dfb      	adds	r3, r7, #7
   15a20:	781b      	ldrb	r3, [r3, #0]
   15a22:	2170      	movs	r1, #112	; 0x70
   15a24:	18d3      	adds	r3, r2, r3
   15a26:	185b      	adds	r3, r3, r1
   15a28:	781b      	ldrb	r3, [r3, #0]
   15a2a:	18c3      	adds	r3, r0, r3
   15a2c:	3301      	adds	r3, #1
   15a2e:	229c      	movs	r2, #156	; 0x9c
   15a30:	18e3      	adds	r3, r4, r3
   15a32:	189b      	adds	r3, r3, r2
   15a34:	781b      	ldrb	r3, [r3, #0]
}
   15a36:	0018      	movs	r0, r3
   15a38:	46bd      	mov	sp, r7
   15a3a:	b003      	add	sp, #12
   15a3c:	bd90      	pop	{r4, r7, pc}
   15a3e:	46c0      	nop			; (mov r8, r8)
   15a40:	00035e4c 	.word	0x00035e4c
   15a44:	0001629d 	.word	0x0001629d
   15a48:	20000c54 	.word	0x20000c54
   15a4c:	00035e98 	.word	0x00035e98
   15a50:	00015ea9 	.word	0x00015ea9

00015a54 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   15a54:	b590      	push	{r4, r7, lr}
   15a56:	b083      	sub	sp, #12
   15a58:	af00      	add	r7, sp, #0
   15a5a:	0004      	movs	r4, r0
   15a5c:	0008      	movs	r0, r1
   15a5e:	0011      	movs	r1, r2
   15a60:	1dfb      	adds	r3, r7, #7
   15a62:	1c22      	adds	r2, r4, #0
   15a64:	701a      	strb	r2, [r3, #0]
   15a66:	1dbb      	adds	r3, r7, #6
   15a68:	1c02      	adds	r2, r0, #0
   15a6a:	701a      	strb	r2, [r3, #0]
   15a6c:	1d7b      	adds	r3, r7, #5
   15a6e:	1c0a      	adds	r2, r1, #0
   15a70:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15a72:	1dfb      	adds	r3, r7, #7
   15a74:	781b      	ldrb	r3, [r3, #0]
   15a76:	2b08      	cmp	r3, #8
   15a78:	d904      	bls.n	15a84 <prvTraceSetObjectState+0x30>
   15a7a:	4b1a      	ldr	r3, [pc, #104]	; (15ae4 <prvTraceSetObjectState+0x90>)
   15a7c:	0018      	movs	r0, r3
   15a7e:	4b1a      	ldr	r3, [pc, #104]	; (15ae8 <prvTraceSetObjectState+0x94>)
   15a80:	4798      	blx	r3
   15a82:	e02b      	b.n	15adc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15a84:	4b19      	ldr	r3, [pc, #100]	; (15aec <prvTraceSetObjectState+0x98>)
   15a86:	681a      	ldr	r2, [r3, #0]
   15a88:	1dfb      	adds	r3, r7, #7
   15a8a:	781b      	ldrb	r3, [r3, #0]
   15a8c:	2164      	movs	r1, #100	; 0x64
   15a8e:	18d3      	adds	r3, r2, r3
   15a90:	185b      	adds	r3, r3, r1
   15a92:	781b      	ldrb	r3, [r3, #0]
   15a94:	1dba      	adds	r2, r7, #6
   15a96:	7812      	ldrb	r2, [r2, #0]
   15a98:	429a      	cmp	r2, r3
   15a9a:	d904      	bls.n	15aa6 <prvTraceSetObjectState+0x52>
   15a9c:	4b14      	ldr	r3, [pc, #80]	; (15af0 <prvTraceSetObjectState+0x9c>)
   15a9e:	0018      	movs	r0, r3
   15aa0:	4b11      	ldr	r3, [pc, #68]	; (15ae8 <prvTraceSetObjectState+0x94>)
   15aa2:	4798      	blx	r3
   15aa4:	e01a      	b.n	15adc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   15aa6:	4b11      	ldr	r3, [pc, #68]	; (15aec <prvTraceSetObjectState+0x98>)
   15aa8:	681c      	ldr	r4, [r3, #0]
   15aaa:	1dfb      	adds	r3, r7, #7
   15aac:	781a      	ldrb	r2, [r3, #0]
   15aae:	1dbb      	adds	r3, r7, #6
   15ab0:	781b      	ldrb	r3, [r3, #0]
   15ab2:	0011      	movs	r1, r2
   15ab4:	0018      	movs	r0, r3
   15ab6:	4b0f      	ldr	r3, [pc, #60]	; (15af4 <prvTraceSetObjectState+0xa0>)
   15ab8:	4798      	blx	r3
   15aba:	0003      	movs	r3, r0
   15abc:	0018      	movs	r0, r3
   15abe:	4b0b      	ldr	r3, [pc, #44]	; (15aec <prvTraceSetObjectState+0x98>)
   15ac0:	681a      	ldr	r2, [r3, #0]
   15ac2:	1dfb      	adds	r3, r7, #7
   15ac4:	781b      	ldrb	r3, [r3, #0]
   15ac6:	2170      	movs	r1, #112	; 0x70
   15ac8:	18d3      	adds	r3, r2, r3
   15aca:	185b      	adds	r3, r3, r1
   15acc:	781b      	ldrb	r3, [r3, #0]
   15ace:	18c3      	adds	r3, r0, r3
   15ad0:	229c      	movs	r2, #156	; 0x9c
   15ad2:	18e3      	adds	r3, r4, r3
   15ad4:	189b      	adds	r3, r3, r2
   15ad6:	1d7a      	adds	r2, r7, #5
   15ad8:	7812      	ldrb	r2, [r2, #0]
   15ada:	701a      	strb	r2, [r3, #0]
}
   15adc:	46bd      	mov	sp, r7
   15ade:	b003      	add	sp, #12
   15ae0:	bd90      	pop	{r4, r7, pc}
   15ae2:	46c0      	nop			; (mov r8, r8)
   15ae4:	00035ed8 	.word	0x00035ed8
   15ae8:	0001629d 	.word	0x0001629d
   15aec:	20000c54 	.word	0x20000c54
   15af0:	00035f1c 	.word	0x00035f1c
   15af4:	00015ea9 	.word	0x00015ea9

00015af8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   15af8:	b590      	push	{r4, r7, lr}
   15afa:	b083      	sub	sp, #12
   15afc:	af00      	add	r7, sp, #0
   15afe:	0002      	movs	r2, r0
   15b00:	1dfb      	adds	r3, r7, #7
   15b02:	701a      	strb	r2, [r3, #0]
   15b04:	1dbb      	adds	r3, r7, #6
   15b06:	1c0a      	adds	r2, r1, #0
   15b08:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15b0a:	1dfb      	adds	r3, r7, #7
   15b0c:	781b      	ldrb	r3, [r3, #0]
   15b0e:	2b08      	cmp	r3, #8
   15b10:	d905      	bls.n	15b1e <prvTraceGetObjectState+0x26>
   15b12:	4b1a      	ldr	r3, [pc, #104]	; (15b7c <prvTraceGetObjectState+0x84>)
   15b14:	0018      	movs	r0, r3
   15b16:	4b1a      	ldr	r3, [pc, #104]	; (15b80 <prvTraceGetObjectState+0x88>)
   15b18:	4798      	blx	r3
   15b1a:	2300      	movs	r3, #0
   15b1c:	e02a      	b.n	15b74 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15b1e:	4b19      	ldr	r3, [pc, #100]	; (15b84 <prvTraceGetObjectState+0x8c>)
   15b20:	681a      	ldr	r2, [r3, #0]
   15b22:	1dfb      	adds	r3, r7, #7
   15b24:	781b      	ldrb	r3, [r3, #0]
   15b26:	2164      	movs	r1, #100	; 0x64
   15b28:	18d3      	adds	r3, r2, r3
   15b2a:	185b      	adds	r3, r3, r1
   15b2c:	781b      	ldrb	r3, [r3, #0]
   15b2e:	1dba      	adds	r2, r7, #6
   15b30:	7812      	ldrb	r2, [r2, #0]
   15b32:	429a      	cmp	r2, r3
   15b34:	d905      	bls.n	15b42 <prvTraceGetObjectState+0x4a>
   15b36:	4b14      	ldr	r3, [pc, #80]	; (15b88 <prvTraceGetObjectState+0x90>)
   15b38:	0018      	movs	r0, r3
   15b3a:	4b11      	ldr	r3, [pc, #68]	; (15b80 <prvTraceGetObjectState+0x88>)
   15b3c:	4798      	blx	r3
   15b3e:	2300      	movs	r3, #0
   15b40:	e018      	b.n	15b74 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   15b42:	4b10      	ldr	r3, [pc, #64]	; (15b84 <prvTraceGetObjectState+0x8c>)
   15b44:	681c      	ldr	r4, [r3, #0]
   15b46:	1dfb      	adds	r3, r7, #7
   15b48:	781a      	ldrb	r2, [r3, #0]
   15b4a:	1dbb      	adds	r3, r7, #6
   15b4c:	781b      	ldrb	r3, [r3, #0]
   15b4e:	0011      	movs	r1, r2
   15b50:	0018      	movs	r0, r3
   15b52:	4b0e      	ldr	r3, [pc, #56]	; (15b8c <prvTraceGetObjectState+0x94>)
   15b54:	4798      	blx	r3
   15b56:	0003      	movs	r3, r0
   15b58:	0018      	movs	r0, r3
   15b5a:	4b0a      	ldr	r3, [pc, #40]	; (15b84 <prvTraceGetObjectState+0x8c>)
   15b5c:	681a      	ldr	r2, [r3, #0]
   15b5e:	1dfb      	adds	r3, r7, #7
   15b60:	781b      	ldrb	r3, [r3, #0]
   15b62:	2170      	movs	r1, #112	; 0x70
   15b64:	18d3      	adds	r3, r2, r3
   15b66:	185b      	adds	r3, r3, r1
   15b68:	781b      	ldrb	r3, [r3, #0]
   15b6a:	18c3      	adds	r3, r0, r3
   15b6c:	229c      	movs	r2, #156	; 0x9c
   15b6e:	18e3      	adds	r3, r4, r3
   15b70:	189b      	adds	r3, r3, r2
   15b72:	781b      	ldrb	r3, [r3, #0]
}
   15b74:	0018      	movs	r0, r3
   15b76:	46bd      	mov	sp, r7
   15b78:	b003      	add	sp, #12
   15b7a:	bd90      	pop	{r4, r7, pc}
   15b7c:	00035f58 	.word	0x00035f58
   15b80:	0001629d 	.word	0x0001629d
   15b84:	20000c54 	.word	0x20000c54
   15b88:	00035f9c 	.word	0x00035f9c
   15b8c:	00015ea9 	.word	0x00015ea9

00015b90 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   15b90:	b590      	push	{r4, r7, lr}
   15b92:	b083      	sub	sp, #12
   15b94:	af00      	add	r7, sp, #0
   15b96:	0002      	movs	r2, r0
   15b98:	1dfb      	adds	r3, r7, #7
   15b9a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15b9c:	4b11      	ldr	r3, [pc, #68]	; (15be4 <prvTraceSetTaskInstanceFinished+0x54>)
   15b9e:	681b      	ldr	r3, [r3, #0]
   15ba0:	2267      	movs	r2, #103	; 0x67
   15ba2:	5c9b      	ldrb	r3, [r3, r2]
   15ba4:	1dfa      	adds	r2, r7, #7
   15ba6:	7812      	ldrb	r2, [r2, #0]
   15ba8:	429a      	cmp	r2, r3
   15baa:	d904      	bls.n	15bb6 <prvTraceSetTaskInstanceFinished+0x26>
   15bac:	4b0e      	ldr	r3, [pc, #56]	; (15be8 <prvTraceSetTaskInstanceFinished+0x58>)
   15bae:	0018      	movs	r0, r3
   15bb0:	4b0e      	ldr	r3, [pc, #56]	; (15bec <prvTraceSetTaskInstanceFinished+0x5c>)
   15bb2:	4798      	blx	r3
   15bb4:	e013      	b.n	15bde <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   15bb6:	4b0b      	ldr	r3, [pc, #44]	; (15be4 <prvTraceSetTaskInstanceFinished+0x54>)
   15bb8:	681c      	ldr	r4, [r3, #0]
   15bba:	1dfb      	adds	r3, r7, #7
   15bbc:	781b      	ldrb	r3, [r3, #0]
   15bbe:	2103      	movs	r1, #3
   15bc0:	0018      	movs	r0, r3
   15bc2:	4b0b      	ldr	r3, [pc, #44]	; (15bf0 <prvTraceSetTaskInstanceFinished+0x60>)
   15bc4:	4798      	blx	r3
   15bc6:	0003      	movs	r3, r0
   15bc8:	0019      	movs	r1, r3
   15bca:	4b06      	ldr	r3, [pc, #24]	; (15be4 <prvTraceSetTaskInstanceFinished+0x54>)
   15bcc:	681b      	ldr	r3, [r3, #0]
   15bce:	2273      	movs	r2, #115	; 0x73
   15bd0:	5c9b      	ldrb	r3, [r3, r2]
   15bd2:	18cb      	adds	r3, r1, r3
   15bd4:	229c      	movs	r2, #156	; 0x9c
   15bd6:	18e3      	adds	r3, r4, r3
   15bd8:	189b      	adds	r3, r3, r2
   15bda:	2200      	movs	r2, #0
   15bdc:	701a      	strb	r2, [r3, #0]
#endif
}
   15bde:	46bd      	mov	sp, r7
   15be0:	b003      	add	sp, #12
   15be2:	bd90      	pop	{r4, r7, pc}
   15be4:	20000c54 	.word	0x20000c54
   15be8:	00035fd8 	.word	0x00035fd8
   15bec:	0001629d 	.word	0x0001629d
   15bf0:	00015ea9 	.word	0x00015ea9

00015bf4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   15bf4:	b580      	push	{r7, lr}
   15bf6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   15bf8:	4b75      	ldr	r3, [pc, #468]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15bfa:	681b      	ldr	r3, [r3, #0]
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d103      	bne.n	15c08 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   15c00:	4b73      	ldr	r3, [pc, #460]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c02:	4a74      	ldr	r2, [pc, #464]	; (15dd4 <prvTraceInitTraceData+0x1e0>)
   15c04:	601a      	str	r2, [r3, #0]
   15c06:	e006      	b.n	15c16 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   15c08:	4b71      	ldr	r3, [pc, #452]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c0a:	681b      	ldr	r3, [r3, #0]
   15c0c:	781b      	ldrb	r3, [r3, #0]
   15c0e:	b2db      	uxtb	r3, r3
   15c10:	2b01      	cmp	r3, #1
   15c12:	d100      	bne.n	15c16 <prvTraceInitTraceData+0x22>
   15c14:	e0d8      	b.n	15dc8 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   15c16:	4b70      	ldr	r3, [pc, #448]	; (15dd8 <prvTraceInitTraceData+0x1e4>)
   15c18:	681a      	ldr	r2, [r3, #0]
   15c1a:	4b70      	ldr	r3, [pc, #448]	; (15ddc <prvTraceInitTraceData+0x1e8>)
   15c1c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   15c1e:	4b6c      	ldr	r3, [pc, #432]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c20:	6818      	ldr	r0, [r3, #0]
   15c22:	23bd      	movs	r3, #189	; 0xbd
   15c24:	011b      	lsls	r3, r3, #4
   15c26:	001a      	movs	r2, r3
   15c28:	2100      	movs	r1, #0
   15c2a:	4b6d      	ldr	r3, [pc, #436]	; (15de0 <prvTraceInitTraceData+0x1ec>)
   15c2c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   15c2e:	4b68      	ldr	r3, [pc, #416]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c30:	681b      	ldr	r3, [r3, #0]
   15c32:	4a6c      	ldr	r2, [pc, #432]	; (15de4 <prvTraceInitTraceData+0x1f0>)
   15c34:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   15c36:	4b66      	ldr	r3, [pc, #408]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c38:	681b      	ldr	r3, [r3, #0]
   15c3a:	2205      	movs	r2, #5
   15c3c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   15c3e:	4b64      	ldr	r3, [pc, #400]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c40:	681b      	ldr	r3, [r3, #0]
   15c42:	2200      	movs	r2, #0
   15c44:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   15c46:	4b62      	ldr	r3, [pc, #392]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c48:	681b      	ldr	r3, [r3, #0]
   15c4a:	22bd      	movs	r2, #189	; 0xbd
   15c4c:	0112      	lsls	r2, r2, #4
   15c4e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   15c50:	4b5f      	ldr	r3, [pc, #380]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c52:	681b      	ldr	r3, [r3, #0]
   15c54:	2296      	movs	r2, #150	; 0x96
   15c56:	0052      	lsls	r2, r2, #1
   15c58:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   15c5a:	4b5d      	ldr	r3, [pc, #372]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c5c:	681b      	ldr	r3, [r3, #0]
   15c5e:	4a62      	ldr	r2, [pc, #392]	; (15de8 <prvTraceInitTraceData+0x1f4>)
   15c60:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   15c62:	4b5b      	ldr	r3, [pc, #364]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c64:	681b      	ldr	r3, [r3, #0]
   15c66:	2200      	movs	r2, #0
   15c68:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   15c6a:	4b59      	ldr	r3, [pc, #356]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c6c:	681b      	ldr	r3, [r3, #0]
   15c6e:	2200      	movs	r2, #0
   15c70:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   15c72:	4b5e      	ldr	r3, [pc, #376]	; (15dec <prvTraceInitTraceData+0x1f8>)
   15c74:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   15c76:	4b56      	ldr	r3, [pc, #344]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c78:	681b      	ldr	r3, [r3, #0]
   15c7a:	4a5d      	ldr	r2, [pc, #372]	; (15df0 <prvTraceInitTraceData+0x1fc>)
   15c7c:	495d      	ldr	r1, [pc, #372]	; (15df4 <prvTraceInitTraceData+0x200>)
   15c7e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   15c80:	4b53      	ldr	r3, [pc, #332]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c82:	681a      	ldr	r2, [r3, #0]
   15c84:	23ac      	movs	r3, #172	; 0xac
   15c86:	00db      	lsls	r3, r3, #3
   15c88:	21c8      	movs	r1, #200	; 0xc8
   15c8a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   15c8c:	4b50      	ldr	r3, [pc, #320]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c8e:	681b      	ldr	r3, [r3, #0]
   15c90:	4a59      	ldr	r2, [pc, #356]	; (15df8 <prvTraceInitTraceData+0x204>)
   15c92:	2101      	movs	r1, #1
   15c94:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   15c96:	4b4e      	ldr	r3, [pc, #312]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15c98:	681a      	ldr	r2, [r3, #0]
   15c9a:	23d7      	movs	r3, #215	; 0xd7
   15c9c:	00db      	lsls	r3, r3, #3
   15c9e:	4957      	ldr	r1, [pc, #348]	; (15dfc <prvTraceInitTraceData+0x208>)
   15ca0:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   15ca2:	4b4b      	ldr	r3, [pc, #300]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15ca4:	681b      	ldr	r3, [r3, #0]
   15ca6:	4a56      	ldr	r2, [pc, #344]	; (15e00 <prvTraceInitTraceData+0x20c>)
   15ca8:	4694      	mov	ip, r2
   15caa:	4463      	add	r3, ip
   15cac:	4955      	ldr	r1, [pc, #340]	; (15e04 <prvTraceInitTraceData+0x210>)
   15cae:	2250      	movs	r2, #80	; 0x50
   15cb0:	0018      	movs	r0, r3
   15cb2:	4b55      	ldr	r3, [pc, #340]	; (15e08 <prvTraceInitTraceData+0x214>)
   15cb4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   15cb6:	4b46      	ldr	r3, [pc, #280]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15cb8:	681b      	ldr	r3, [r3, #0]
   15cba:	4a54      	ldr	r2, [pc, #336]	; (15e0c <prvTraceInitTraceData+0x218>)
   15cbc:	4954      	ldr	r1, [pc, #336]	; (15e10 <prvTraceInitTraceData+0x21c>)
   15cbe:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   15cc0:	4b43      	ldr	r3, [pc, #268]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15cc2:	681b      	ldr	r3, [r3, #0]
   15cc4:	4a53      	ldr	r2, [pc, #332]	; (15e14 <prvTraceInitTraceData+0x220>)
   15cc6:	210a      	movs	r1, #10
   15cc8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   15cca:	4b41      	ldr	r3, [pc, #260]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15ccc:	681b      	ldr	r3, [r3, #0]
   15cce:	4a52      	ldr	r2, [pc, #328]	; (15e18 <prvTraceInitTraceData+0x224>)
   15cd0:	210b      	movs	r1, #11
   15cd2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   15cd4:	4b3e      	ldr	r3, [pc, #248]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15cd6:	681b      	ldr	r3, [r3, #0]
   15cd8:	4a50      	ldr	r2, [pc, #320]	; (15e1c <prvTraceInitTraceData+0x228>)
   15cda:	210c      	movs	r1, #12
   15cdc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   15cde:	4b3c      	ldr	r3, [pc, #240]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15ce0:	681b      	ldr	r3, [r3, #0]
   15ce2:	4a4f      	ldr	r2, [pc, #316]	; (15e20 <prvTraceInitTraceData+0x22c>)
   15ce4:	210d      	movs	r1, #13
   15ce6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   15ce8:	4b39      	ldr	r3, [pc, #228]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15cea:	681b      	ldr	r3, [r3, #0]
   15cec:	4a4d      	ldr	r2, [pc, #308]	; (15e24 <prvTraceInitTraceData+0x230>)
   15cee:	2171      	movs	r1, #113	; 0x71
   15cf0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   15cf2:	4b37      	ldr	r3, [pc, #220]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15cf4:	681b      	ldr	r3, [r3, #0]
   15cf6:	4a4c      	ldr	r2, [pc, #304]	; (15e28 <prvTraceInitTraceData+0x234>)
   15cf8:	2172      	movs	r1, #114	; 0x72
   15cfa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   15cfc:	4b34      	ldr	r3, [pc, #208]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15cfe:	681b      	ldr	r3, [r3, #0]
   15d00:	4a4a      	ldr	r2, [pc, #296]	; (15e2c <prvTraceInitTraceData+0x238>)
   15d02:	2173      	movs	r1, #115	; 0x73
   15d04:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   15d06:	4b32      	ldr	r3, [pc, #200]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d08:	681b      	ldr	r3, [r3, #0]
   15d0a:	4a49      	ldr	r2, [pc, #292]	; (15e30 <prvTraceInitTraceData+0x23c>)
   15d0c:	2174      	movs	r1, #116	; 0x74
   15d0e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   15d10:	4b2f      	ldr	r3, [pc, #188]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d12:	681b      	ldr	r3, [r3, #0]
   15d14:	4a47      	ldr	r2, [pc, #284]	; (15e34 <prvTraceInitTraceData+0x240>)
   15d16:	21f1      	movs	r1, #241	; 0xf1
   15d18:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   15d1a:	4b2d      	ldr	r3, [pc, #180]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d1c:	681b      	ldr	r3, [r3, #0]
   15d1e:	4a46      	ldr	r2, [pc, #280]	; (15e38 <prvTraceInitTraceData+0x244>)
   15d20:	21f2      	movs	r1, #242	; 0xf2
   15d22:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   15d24:	4b2a      	ldr	r3, [pc, #168]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d26:	681b      	ldr	r3, [r3, #0]
   15d28:	4a44      	ldr	r2, [pc, #272]	; (15e3c <prvTraceInitTraceData+0x248>)
   15d2a:	21f3      	movs	r1, #243	; 0xf3
   15d2c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   15d2e:	4b28      	ldr	r3, [pc, #160]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d30:	681b      	ldr	r3, [r3, #0]
   15d32:	4a43      	ldr	r2, [pc, #268]	; (15e40 <prvTraceInitTraceData+0x24c>)
   15d34:	21f4      	movs	r1, #244	; 0xf4
   15d36:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   15d38:	4b42      	ldr	r3, [pc, #264]	; (15e44 <prvTraceInitTraceData+0x250>)
   15d3a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   15d3c:	4b24      	ldr	r3, [pc, #144]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d3e:	681b      	ldr	r3, [r3, #0]
   15d40:	22f4      	movs	r2, #244	; 0xf4
   15d42:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   15d44:	4b22      	ldr	r3, [pc, #136]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d46:	681b      	ldr	r3, [r3, #0]
   15d48:	22f3      	movs	r2, #243	; 0xf3
   15d4a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   15d4c:	4b20      	ldr	r3, [pc, #128]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d4e:	681b      	ldr	r3, [r3, #0]
   15d50:	22f2      	movs	r2, #242	; 0xf2
   15d52:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   15d54:	4b1e      	ldr	r3, [pc, #120]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d56:	681b      	ldr	r3, [r3, #0]
   15d58:	22f1      	movs	r2, #241	; 0xf1
   15d5a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   15d5c:	4b1c      	ldr	r3, [pc, #112]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d5e:	681b      	ldr	r3, [r3, #0]
   15d60:	2274      	movs	r2, #116	; 0x74
   15d62:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   15d64:	4b1a      	ldr	r3, [pc, #104]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d66:	681b      	ldr	r3, [r3, #0]
   15d68:	2273      	movs	r2, #115	; 0x73
   15d6a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   15d6c:	4b18      	ldr	r3, [pc, #96]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d6e:	681b      	ldr	r3, [r3, #0]
   15d70:	2272      	movs	r2, #114	; 0x72
   15d72:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   15d74:	4b16      	ldr	r3, [pc, #88]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d76:	681b      	ldr	r3, [r3, #0]
   15d78:	2271      	movs	r2, #113	; 0x71
   15d7a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   15d7c:	4b14      	ldr	r3, [pc, #80]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d7e:	681b      	ldr	r3, [r3, #0]
   15d80:	2204      	movs	r2, #4
   15d82:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   15d84:	4b12      	ldr	r3, [pc, #72]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d86:	681b      	ldr	r3, [r3, #0]
   15d88:	2203      	movs	r2, #3
   15d8a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   15d8c:	4b10      	ldr	r3, [pc, #64]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d8e:	681b      	ldr	r3, [r3, #0]
   15d90:	2202      	movs	r2, #2
   15d92:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   15d94:	4b0e      	ldr	r3, [pc, #56]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15d96:	681b      	ldr	r3, [r3, #0]
   15d98:	2201      	movs	r2, #1
   15d9a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   15d9c:	4b2a      	ldr	r3, [pc, #168]	; (15e48 <prvTraceInitTraceData+0x254>)
   15d9e:	681b      	ldr	r3, [r3, #0]
   15da0:	2b00      	cmp	r3, #0
   15da2:	d012      	beq.n	15dca <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   15da4:	4b0a      	ldr	r3, [pc, #40]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15da6:	681b      	ldr	r3, [r3, #0]
   15da8:	4a15      	ldr	r2, [pc, #84]	; (15e00 <prvTraceInitTraceData+0x20c>)
   15daa:	1898      	adds	r0, r3, r2
   15dac:	4b26      	ldr	r3, [pc, #152]	; (15e48 <prvTraceInitTraceData+0x254>)
   15dae:	681b      	ldr	r3, [r3, #0]
   15db0:	2250      	movs	r2, #80	; 0x50
   15db2:	0019      	movs	r1, r3
   15db4:	4b14      	ldr	r3, [pc, #80]	; (15e08 <prvTraceInitTraceData+0x214>)
   15db6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   15db8:	4b05      	ldr	r3, [pc, #20]	; (15dd0 <prvTraceInitTraceData+0x1dc>)
   15dba:	681b      	ldr	r3, [r3, #0]
   15dbc:	4a23      	ldr	r2, [pc, #140]	; (15e4c <prvTraceInitTraceData+0x258>)
   15dbe:	2101      	movs	r1, #1
   15dc0:	5099      	str	r1, [r3, r2]
		vTraceStop();
   15dc2:	4b23      	ldr	r3, [pc, #140]	; (15e50 <prvTraceInitTraceData+0x25c>)
   15dc4:	4798      	blx	r3
   15dc6:	e000      	b.n	15dca <prvTraceInitTraceData+0x1d6>
			return;
   15dc8:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   15dca:	46bd      	mov	sp, r7
   15dcc:	bd80      	pop	{r7, pc}
   15dce:	46c0      	nop			; (mov r8, r8)
   15dd0:	20000c54 	.word	0x20000c54
   15dd4:	200044ac 	.word	0x200044ac
   15dd8:	e000e018 	.word	0xe000e018
   15ddc:	2000507c 	.word	0x2000507c
   15de0:	000328a7 	.word	0x000328a7
   15de4:	00001aa1 	.word	0x00001aa1
   15de8:	f0f0f0f0 	.word	0xf0f0f0f0
   15dec:	00014d59 	.word	0x00014d59
   15df0:	0000055c 	.word	0x0000055c
   15df4:	f1f1f1f1 	.word	0xf1f1f1f1
   15df8:	00000564 	.word	0x00000564
   15dfc:	f2f2f2f2 	.word	0xf2f2f2f2
   15e00:	000006bc 	.word	0x000006bc
   15e04:	00036020 	.word	0x00036020
   15e08:	00016169 	.word	0x00016169
   15e0c:	0000070c 	.word	0x0000070c
   15e10:	f3f3f3f3 	.word	0xf3f3f3f3
   15e14:	00000bc4 	.word	0x00000bc4
   15e18:	00000bc5 	.word	0x00000bc5
   15e1c:	00000bc6 	.word	0x00000bc6
   15e20:	00000bc7 	.word	0x00000bc7
   15e24:	00000bc8 	.word	0x00000bc8
   15e28:	00000bc9 	.word	0x00000bc9
   15e2c:	00000bca 	.word	0x00000bca
   15e30:	00000bcb 	.word	0x00000bcb
   15e34:	00000bcc 	.word	0x00000bcc
   15e38:	00000bcd 	.word	0x00000bcd
   15e3c:	00000bce 	.word	0x00000bce
   15e40:	00000bcf 	.word	0x00000bcf
   15e44:	00014ef9 	.word	0x00014ef9
   15e48:	20000bb4 	.word	0x20000bb4
   15e4c:	000006b4 	.word	0x000006b4
   15e50:	00015161 	.word	0x00015161

00015e54 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   15e54:	b580      	push	{r7, lr}
   15e56:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   15e58:	4b10      	ldr	r3, [pc, #64]	; (15e9c <prvTraceNextFreeEventBufferSlot+0x48>)
   15e5a:	681b      	ldr	r3, [r3, #0]
   15e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15e5e:	2b00      	cmp	r3, #0
   15e60:	d101      	bne.n	15e66 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   15e62:	2300      	movs	r3, #0
   15e64:	e017      	b.n	15e96 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   15e66:	4b0d      	ldr	r3, [pc, #52]	; (15e9c <prvTraceNextFreeEventBufferSlot+0x48>)
   15e68:	681b      	ldr	r3, [r3, #0]
   15e6a:	69da      	ldr	r2, [r3, #28]
   15e6c:	232c      	movs	r3, #44	; 0x2c
   15e6e:	33ff      	adds	r3, #255	; 0xff
   15e70:	429a      	cmp	r2, r3
   15e72:	d905      	bls.n	15e80 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   15e74:	4b0a      	ldr	r3, [pc, #40]	; (15ea0 <prvTraceNextFreeEventBufferSlot+0x4c>)
   15e76:	0018      	movs	r0, r3
   15e78:	4b0a      	ldr	r3, [pc, #40]	; (15ea4 <prvTraceNextFreeEventBufferSlot+0x50>)
   15e7a:	4798      	blx	r3
		return NULL;
   15e7c:	2300      	movs	r3, #0
   15e7e:	e00a      	b.n	15e96 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   15e80:	4b06      	ldr	r3, [pc, #24]	; (15e9c <prvTraceNextFreeEventBufferSlot+0x48>)
   15e82:	681a      	ldr	r2, [r3, #0]
   15e84:	4b05      	ldr	r3, [pc, #20]	; (15e9c <prvTraceNextFreeEventBufferSlot+0x48>)
   15e86:	681b      	ldr	r3, [r3, #0]
   15e88:	69db      	ldr	r3, [r3, #28]
   15e8a:	009b      	lsls	r3, r3, #2
   15e8c:	21e2      	movs	r1, #226	; 0xe2
   15e8e:	00c9      	lsls	r1, r1, #3
   15e90:	468c      	mov	ip, r1
   15e92:	4463      	add	r3, ip
   15e94:	18d3      	adds	r3, r2, r3
}
   15e96:	0018      	movs	r0, r3
   15e98:	46bd      	mov	sp, r7
   15e9a:	bd80      	pop	{r7, pc}
   15e9c:	20000c54 	.word	0x20000c54
   15ea0:	00036034 	.word	0x00036034
   15ea4:	0001629d 	.word	0x0001629d

00015ea8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   15ea8:	b580      	push	{r7, lr}
   15eaa:	b082      	sub	sp, #8
   15eac:	af00      	add	r7, sp, #0
   15eae:	0002      	movs	r2, r0
   15eb0:	1dfb      	adds	r3, r7, #7
   15eb2:	701a      	strb	r2, [r3, #0]
   15eb4:	1dbb      	adds	r3, r7, #6
   15eb6:	1c0a      	adds	r2, r1, #0
   15eb8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15eba:	1dbb      	adds	r3, r7, #6
   15ebc:	781b      	ldrb	r3, [r3, #0]
   15ebe:	2b08      	cmp	r3, #8
   15ec0:	d905      	bls.n	15ece <uiIndexOfObject+0x26>
   15ec2:	4b2a      	ldr	r3, [pc, #168]	; (15f6c <uiIndexOfObject+0xc4>)
   15ec4:	0018      	movs	r0, r3
   15ec6:	4b2a      	ldr	r3, [pc, #168]	; (15f70 <uiIndexOfObject+0xc8>)
   15ec8:	4798      	blx	r3
   15eca:	2300      	movs	r3, #0
   15ecc:	e049      	b.n	15f62 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15ece:	1dfb      	adds	r3, r7, #7
   15ed0:	781b      	ldrb	r3, [r3, #0]
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	d00b      	beq.n	15eee <uiIndexOfObject+0x46>
   15ed6:	4b27      	ldr	r3, [pc, #156]	; (15f74 <uiIndexOfObject+0xcc>)
   15ed8:	681a      	ldr	r2, [r3, #0]
   15eda:	1dbb      	adds	r3, r7, #6
   15edc:	781b      	ldrb	r3, [r3, #0]
   15ede:	2164      	movs	r1, #100	; 0x64
   15ee0:	18d3      	adds	r3, r2, r3
   15ee2:	185b      	adds	r3, r3, r1
   15ee4:	781b      	ldrb	r3, [r3, #0]
   15ee6:	1dfa      	adds	r2, r7, #7
   15ee8:	7812      	ldrb	r2, [r2, #0]
   15eea:	429a      	cmp	r2, r3
   15eec:	d905      	bls.n	15efa <uiIndexOfObject+0x52>
   15eee:	4b22      	ldr	r3, [pc, #136]	; (15f78 <uiIndexOfObject+0xd0>)
   15ef0:	0018      	movs	r0, r3
   15ef2:	4b1f      	ldr	r3, [pc, #124]	; (15f70 <uiIndexOfObject+0xc8>)
   15ef4:	4798      	blx	r3
   15ef6:	2300      	movs	r3, #0
   15ef8:	e033      	b.n	15f62 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   15efa:	1dbb      	adds	r3, r7, #6
   15efc:	781b      	ldrb	r3, [r3, #0]
   15efe:	2b08      	cmp	r3, #8
   15f00:	d82a      	bhi.n	15f58 <uiIndexOfObject+0xb0>
   15f02:	1dfb      	adds	r3, r7, #7
   15f04:	781b      	ldrb	r3, [r3, #0]
   15f06:	2b00      	cmp	r3, #0
   15f08:	d026      	beq.n	15f58 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   15f0a:	4b1a      	ldr	r3, [pc, #104]	; (15f74 <uiIndexOfObject+0xcc>)
   15f0c:	681a      	ldr	r2, [r3, #0]
   15f0e:	1dbb      	adds	r3, r7, #6
   15f10:	781b      	ldrb	r3, [r3, #0]
   15f12:	2164      	movs	r1, #100	; 0x64
   15f14:	18d3      	adds	r3, r2, r3
   15f16:	185b      	adds	r3, r3, r1
   15f18:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   15f1a:	1dfa      	adds	r2, r7, #7
   15f1c:	7812      	ldrb	r2, [r2, #0]
   15f1e:	429a      	cmp	r2, r3
   15f20:	d81a      	bhi.n	15f58 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15f22:	4b14      	ldr	r3, [pc, #80]	; (15f74 <uiIndexOfObject+0xcc>)
   15f24:	681a      	ldr	r2, [r3, #0]
   15f26:	1dbb      	adds	r3, r7, #6
   15f28:	781b      	ldrb	r3, [r3, #0]
   15f2a:	3340      	adds	r3, #64	; 0x40
   15f2c:	005b      	lsls	r3, r3, #1
   15f2e:	18d3      	adds	r3, r2, r3
   15f30:	3308      	adds	r3, #8
   15f32:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15f34:	4b0f      	ldr	r3, [pc, #60]	; (15f74 <uiIndexOfObject+0xcc>)
   15f36:	6819      	ldr	r1, [r3, #0]
   15f38:	1dbb      	adds	r3, r7, #6
   15f3a:	781b      	ldrb	r3, [r3, #0]
   15f3c:	207c      	movs	r0, #124	; 0x7c
   15f3e:	18cb      	adds	r3, r1, r3
   15f40:	181b      	adds	r3, r3, r0
   15f42:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15f44:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15f46:	1df9      	adds	r1, r7, #7
   15f48:	7809      	ldrb	r1, [r1, #0]
   15f4a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15f4c:	b289      	uxth	r1, r1
   15f4e:	434b      	muls	r3, r1
   15f50:	b29b      	uxth	r3, r3
   15f52:	18d3      	adds	r3, r2, r3
   15f54:	b29b      	uxth	r3, r3
   15f56:	e004      	b.n	15f62 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   15f58:	4b08      	ldr	r3, [pc, #32]	; (15f7c <uiIndexOfObject+0xd4>)
   15f5a:	0018      	movs	r0, r3
   15f5c:	4b04      	ldr	r3, [pc, #16]	; (15f70 <uiIndexOfObject+0xc8>)
   15f5e:	4798      	blx	r3
	return 0;
   15f60:	2300      	movs	r3, #0
}
   15f62:	0018      	movs	r0, r3
   15f64:	46bd      	mov	sp, r7
   15f66:	b002      	add	sp, #8
   15f68:	bd80      	pop	{r7, pc}
   15f6a:	46c0      	nop			; (mov r8, r8)
   15f6c:	0003605c 	.word	0x0003605c
   15f70:	0001629d 	.word	0x0001629d
   15f74:	20000c54 	.word	0x20000c54
   15f78:	0003609c 	.word	0x0003609c
   15f7c:	000360dc 	.word	0x000360dc

00015f80 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   15f80:	b580      	push	{r7, lr}
   15f82:	b088      	sub	sp, #32
   15f84:	af00      	add	r7, sp, #0
   15f86:	0002      	movs	r2, r0
   15f88:	1dfb      	adds	r3, r7, #7
   15f8a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15f8c:	4b5a      	ldr	r3, [pc, #360]	; (160f8 <prvTraceGetObjectHandle+0x178>)
   15f8e:	681b      	ldr	r3, [r3, #0]
   15f90:	2b00      	cmp	r3, #0
   15f92:	d105      	bne.n	15fa0 <prvTraceGetObjectHandle+0x20>
   15f94:	4b59      	ldr	r3, [pc, #356]	; (160fc <prvTraceGetObjectHandle+0x17c>)
   15f96:	0018      	movs	r0, r3
   15f98:	4b59      	ldr	r3, [pc, #356]	; (16100 <prvTraceGetObjectHandle+0x180>)
   15f9a:	4798      	blx	r3
   15f9c:	2300      	movs	r3, #0
   15f9e:	e0a7      	b.n	160f0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15fa0:	1dfb      	adds	r3, r7, #7
   15fa2:	781b      	ldrb	r3, [r3, #0]
   15fa4:	2b08      	cmp	r3, #8
   15fa6:	d905      	bls.n	15fb4 <prvTraceGetObjectHandle+0x34>
   15fa8:	4b56      	ldr	r3, [pc, #344]	; (16104 <prvTraceGetObjectHandle+0x184>)
   15faa:	0018      	movs	r0, r3
   15fac:	4b54      	ldr	r3, [pc, #336]	; (16100 <prvTraceGetObjectHandle+0x180>)
   15fae:	4798      	blx	r3
   15fb0:	2300      	movs	r3, #0
   15fb2:	e09d      	b.n	160f0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15fb4:	f3ef 8310 	mrs	r3, PRIMASK
   15fb8:	60fb      	str	r3, [r7, #12]
  return(result);
   15fba:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   15fbc:	61bb      	str	r3, [r7, #24]
   15fbe:	2301      	movs	r3, #1
   15fc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15fc2:	693b      	ldr	r3, [r7, #16]
   15fc4:	f383 8810 	msr	PRIMASK, r3
   15fc8:	4b4f      	ldr	r3, [pc, #316]	; (16108 <prvTraceGetObjectHandle+0x188>)
   15fca:	681b      	ldr	r3, [r3, #0]
   15fcc:	1c5a      	adds	r2, r3, #1
   15fce:	4b4e      	ldr	r3, [pc, #312]	; (16108 <prvTraceGetObjectHandle+0x188>)
   15fd0:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   15fd2:	1dfb      	adds	r3, r7, #7
   15fd4:	781a      	ldrb	r2, [r3, #0]
   15fd6:	4b4d      	ldr	r3, [pc, #308]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   15fd8:	0052      	lsls	r2, r2, #1
   15fda:	5ad3      	ldrh	r3, [r2, r3]
   15fdc:	001a      	movs	r2, r3
   15fde:	4b4c      	ldr	r3, [pc, #304]	; (16110 <prvTraceGetObjectHandle+0x190>)
   15fe0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   15fe2:	4b4b      	ldr	r3, [pc, #300]	; (16110 <prvTraceGetObjectHandle+0x190>)
   15fe4:	681b      	ldr	r3, [r3, #0]
   15fe6:	4a49      	ldr	r2, [pc, #292]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   15fe8:	2148      	movs	r1, #72	; 0x48
   15fea:	18d3      	adds	r3, r2, r3
   15fec:	185b      	adds	r3, r3, r1
   15fee:	781b      	ldrb	r3, [r3, #0]
   15ff0:	2b00      	cmp	r3, #0
   15ff2:	d117      	bne.n	16024 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   15ff4:	4b46      	ldr	r3, [pc, #280]	; (16110 <prvTraceGetObjectHandle+0x190>)
   15ff6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   15ff8:	4b45      	ldr	r3, [pc, #276]	; (16110 <prvTraceGetObjectHandle+0x190>)
   15ffa:	681b      	ldr	r3, [r3, #0]
   15ffc:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   15ffe:	1dfb      	adds	r3, r7, #7
   16000:	781b      	ldrb	r3, [r3, #0]
   16002:	4842      	ldr	r0, [pc, #264]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   16004:	3308      	adds	r3, #8
   16006:	005b      	lsls	r3, r3, #1
   16008:	18c3      	adds	r3, r0, r3
   1600a:	3302      	adds	r3, #2
   1600c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1600e:	b2db      	uxtb	r3, r3
   16010:	1acb      	subs	r3, r1, r3
   16012:	b2db      	uxtb	r3, r3
   16014:	3301      	adds	r3, #1
   16016:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   16018:	4b3c      	ldr	r3, [pc, #240]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   1601a:	2148      	movs	r1, #72	; 0x48
   1601c:	189b      	adds	r3, r3, r2
   1601e:	185b      	adds	r3, r3, r1
   16020:	1c02      	adds	r2, r0, #0
   16022:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   16024:	4b3a      	ldr	r3, [pc, #232]	; (16110 <prvTraceGetObjectHandle+0x190>)
   16026:	681a      	ldr	r2, [r3, #0]
   16028:	231f      	movs	r3, #31
   1602a:	18fb      	adds	r3, r7, r3
   1602c:	4937      	ldr	r1, [pc, #220]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   1602e:	2048      	movs	r0, #72	; 0x48
   16030:	188a      	adds	r2, r1, r2
   16032:	1812      	adds	r2, r2, r0
   16034:	7812      	ldrb	r2, [r2, #0]
   16036:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   16038:	1dfb      	adds	r3, r7, #7
   1603a:	781a      	ldrb	r2, [r3, #0]
   1603c:	4b33      	ldr	r3, [pc, #204]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   1603e:	0052      	lsls	r2, r2, #1
   16040:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   16042:	1dfb      	adds	r3, r7, #7
   16044:	781b      	ldrb	r3, [r3, #0]
   16046:	4931      	ldr	r1, [pc, #196]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   16048:	3310      	adds	r3, #16
   1604a:	005b      	lsls	r3, r3, #1
   1604c:	18cb      	adds	r3, r1, r3
   1604e:	3304      	adds	r3, #4
   16050:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   16052:	429a      	cmp	r2, r3
   16054:	d90d      	bls.n	16072 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   16056:	1dfb      	adds	r3, r7, #7
   16058:	781b      	ldrb	r3, [r3, #0]
   1605a:	0018      	movs	r0, r3
   1605c:	4b2d      	ldr	r3, [pc, #180]	; (16114 <prvTraceGetObjectHandle+0x194>)
   1605e:	4798      	blx	r3
   16060:	0003      	movs	r3, r0
   16062:	0018      	movs	r0, r3
   16064:	4b26      	ldr	r3, [pc, #152]	; (16100 <prvTraceGetObjectHandle+0x180>)
   16066:	4798      	blx	r3
		handle = 0;
   16068:	231f      	movs	r3, #31
   1606a:	18fb      	adds	r3, r7, r3
   1606c:	2200      	movs	r2, #0
   1606e:	701a      	strb	r2, [r3, #0]
   16070:	e031      	b.n	160d6 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   16072:	1dfb      	adds	r3, r7, #7
   16074:	781b      	ldrb	r3, [r3, #0]
   16076:	4a25      	ldr	r2, [pc, #148]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   16078:	0059      	lsls	r1, r3, #1
   1607a:	5a8a      	ldrh	r2, [r1, r2]
   1607c:	3201      	adds	r2, #1
   1607e:	b291      	uxth	r1, r2
   16080:	4a22      	ldr	r2, [pc, #136]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   16082:	005b      	lsls	r3, r3, #1
   16084:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   16086:	1dfb      	adds	r3, r7, #7
   16088:	781a      	ldrb	r2, [r3, #0]
   1608a:	4b20      	ldr	r3, [pc, #128]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   1608c:	0052      	lsls	r2, r2, #1
   1608e:	5ad3      	ldrh	r3, [r2, r3]
   16090:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   16092:	1dfb      	adds	r3, r7, #7
   16094:	781b      	ldrb	r3, [r3, #0]
   16096:	4a1d      	ldr	r2, [pc, #116]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   16098:	3308      	adds	r3, #8
   1609a:	005b      	lsls	r3, r3, #1
   1609c:	18d3      	adds	r3, r2, r3
   1609e:	3302      	adds	r3, #2
   160a0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   160a2:	1acb      	subs	r3, r1, r3
   160a4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   160a6:	1dfb      	adds	r3, r7, #7
   160a8:	781b      	ldrb	r3, [r3, #0]
   160aa:	4a18      	ldr	r2, [pc, #96]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   160ac:	3318      	adds	r3, #24
   160ae:	005b      	lsls	r3, r3, #1
   160b0:	18d3      	adds	r3, r2, r3
   160b2:	3306      	adds	r3, #6
   160b4:	881b      	ldrh	r3, [r3, #0]
   160b6:	001a      	movs	r2, r3
		if (hndCount >
   160b8:	697b      	ldr	r3, [r7, #20]
   160ba:	429a      	cmp	r2, r3
   160bc:	da0b      	bge.n	160d6 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   160be:	1dfb      	adds	r3, r7, #7
   160c0:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   160c2:	697a      	ldr	r2, [r7, #20]
   160c4:	b2d2      	uxtb	r2, r2
   160c6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   160c8:	4a10      	ldr	r2, [pc, #64]	; (1610c <prvTraceGetObjectHandle+0x18c>)
   160ca:	3318      	adds	r3, #24
   160cc:	005b      	lsls	r3, r3, #1
   160ce:	18d3      	adds	r3, r2, r3
   160d0:	3306      	adds	r3, #6
   160d2:	1c0a      	adds	r2, r1, #0
   160d4:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   160d6:	4b0c      	ldr	r3, [pc, #48]	; (16108 <prvTraceGetObjectHandle+0x188>)
   160d8:	681b      	ldr	r3, [r3, #0]
   160da:	1e5a      	subs	r2, r3, #1
   160dc:	4b0a      	ldr	r3, [pc, #40]	; (16108 <prvTraceGetObjectHandle+0x188>)
   160de:	601a      	str	r2, [r3, #0]
   160e0:	69bb      	ldr	r3, [r7, #24]
   160e2:	60bb      	str	r3, [r7, #8]
   160e4:	68bb      	ldr	r3, [r7, #8]
   160e6:	f383 8810 	msr	PRIMASK, r3

	return handle;
   160ea:	231f      	movs	r3, #31
   160ec:	18fb      	adds	r3, r7, r3
   160ee:	781b      	ldrb	r3, [r3, #0]
}
   160f0:	0018      	movs	r0, r3
   160f2:	46bd      	mov	sp, r7
   160f4:	b008      	add	sp, #32
   160f6:	bd80      	pop	{r7, pc}
   160f8:	20000c54 	.word	0x20000c54
   160fc:	0003553c 	.word	0x0003553c
   16100:	0001629d 	.word	0x0001629d
   16104:	0003611c 	.word	0x0003611c
   16108:	20000bac 	.word	0x20000bac
   1610c:	20000bc4 	.word	0x20000bc4
   16110:	20000c58 	.word	0x20000c58
   16114:	00014fbd 	.word	0x00014fbd

00016118 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   16118:	b590      	push	{r4, r7, lr}
   1611a:	b085      	sub	sp, #20
   1611c:	af00      	add	r7, sp, #0
   1611e:	0002      	movs	r2, r0
   16120:	1dfb      	adds	r3, r7, #7
   16122:	701a      	strb	r2, [r3, #0]
   16124:	1dbb      	adds	r3, r7, #6
   16126:	1c0a      	adds	r2, r1, #0
   16128:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1612a:	230e      	movs	r3, #14
   1612c:	18fc      	adds	r4, r7, r3
   1612e:	1dfb      	adds	r3, r7, #7
   16130:	781a      	ldrb	r2, [r3, #0]
   16132:	1dbb      	adds	r3, r7, #6
   16134:	781b      	ldrb	r3, [r3, #0]
   16136:	0011      	movs	r1, r2
   16138:	0018      	movs	r0, r3
   1613a:	4b09      	ldr	r3, [pc, #36]	; (16160 <prvMarkObjectAsUsed+0x48>)
   1613c:	4798      	blx	r3
   1613e:	0003      	movs	r3, r0
   16140:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   16142:	4b08      	ldr	r3, [pc, #32]	; (16164 <prvMarkObjectAsUsed+0x4c>)
   16144:	681a      	ldr	r2, [r3, #0]
   16146:	230e      	movs	r3, #14
   16148:	18fb      	adds	r3, r7, r3
   1614a:	881b      	ldrh	r3, [r3, #0]
   1614c:	219c      	movs	r1, #156	; 0x9c
   1614e:	18d3      	adds	r3, r2, r3
   16150:	185b      	adds	r3, r3, r1
   16152:	2201      	movs	r2, #1
   16154:	701a      	strb	r2, [r3, #0]
}
   16156:	46c0      	nop			; (mov r8, r8)
   16158:	46bd      	mov	sp, r7
   1615a:	b005      	add	sp, #20
   1615c:	bd90      	pop	{r4, r7, pc}
   1615e:	46c0      	nop			; (mov r8, r8)
   16160:	00015ea9 	.word	0x00015ea9
   16164:	20000c54 	.word	0x20000c54

00016168 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   16168:	b580      	push	{r7, lr}
   1616a:	b086      	sub	sp, #24
   1616c:	af00      	add	r7, sp, #0
   1616e:	60f8      	str	r0, [r7, #12]
   16170:	60b9      	str	r1, [r7, #8]
   16172:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   16174:	2300      	movs	r3, #0
   16176:	617b      	str	r3, [r7, #20]
   16178:	e010      	b.n	1619c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1617a:	68fa      	ldr	r2, [r7, #12]
   1617c:	697b      	ldr	r3, [r7, #20]
   1617e:	18d3      	adds	r3, r2, r3
   16180:	68b9      	ldr	r1, [r7, #8]
   16182:	697a      	ldr	r2, [r7, #20]
   16184:	188a      	adds	r2, r1, r2
   16186:	7812      	ldrb	r2, [r2, #0]
   16188:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1618a:	68ba      	ldr	r2, [r7, #8]
   1618c:	697b      	ldr	r3, [r7, #20]
   1618e:	18d3      	adds	r3, r2, r3
   16190:	781b      	ldrb	r3, [r3, #0]
   16192:	2b00      	cmp	r3, #0
   16194:	d007      	beq.n	161a6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   16196:	697b      	ldr	r3, [r7, #20]
   16198:	3301      	adds	r3, #1
   1619a:	617b      	str	r3, [r7, #20]
   1619c:	697a      	ldr	r2, [r7, #20]
   1619e:	687b      	ldr	r3, [r7, #4]
   161a0:	429a      	cmp	r2, r3
   161a2:	d3ea      	bcc.n	1617a <prvStrncpy+0x12>
			break;
	}
}
   161a4:	e000      	b.n	161a8 <prvStrncpy+0x40>
			break;
   161a6:	46c0      	nop			; (mov r8, r8)
}
   161a8:	46c0      	nop			; (mov r8, r8)
   161aa:	46bd      	mov	sp, r7
   161ac:	b006      	add	sp, #24
   161ae:	bd80      	pop	{r7, pc}

000161b0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   161b0:	b580      	push	{r7, lr}
   161b2:	b082      	sub	sp, #8
   161b4:	af00      	add	r7, sp, #0
   161b6:	603a      	str	r2, [r7, #0]
   161b8:	1dfb      	adds	r3, r7, #7
   161ba:	1c02      	adds	r2, r0, #0
   161bc:	701a      	strb	r2, [r3, #0]
   161be:	1dbb      	adds	r3, r7, #6
   161c0:	1c0a      	adds	r2, r1, #0
   161c2:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   161c4:	683b      	ldr	r3, [r7, #0]
   161c6:	2b00      	cmp	r3, #0
   161c8:	d104      	bne.n	161d4 <prvTraceSetObjectName+0x24>
   161ca:	4b2a      	ldr	r3, [pc, #168]	; (16274 <prvTraceSetObjectName+0xc4>)
   161cc:	0018      	movs	r0, r3
   161ce:	4b2a      	ldr	r3, [pc, #168]	; (16278 <prvTraceSetObjectName+0xc8>)
   161d0:	4798      	blx	r3
   161d2:	e04b      	b.n	1626c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   161d4:	1dfb      	adds	r3, r7, #7
   161d6:	781b      	ldrb	r3, [r3, #0]
   161d8:	2b08      	cmp	r3, #8
   161da:	d904      	bls.n	161e6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   161dc:	4b27      	ldr	r3, [pc, #156]	; (1627c <prvTraceSetObjectName+0xcc>)
   161de:	0018      	movs	r0, r3
   161e0:	4b25      	ldr	r3, [pc, #148]	; (16278 <prvTraceSetObjectName+0xc8>)
   161e2:	4798      	blx	r3
		return;
   161e4:	e042      	b.n	1626c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   161e6:	1dbb      	adds	r3, r7, #6
   161e8:	781b      	ldrb	r3, [r3, #0]
   161ea:	2b00      	cmp	r3, #0
   161ec:	d104      	bne.n	161f8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   161ee:	4b24      	ldr	r3, [pc, #144]	; (16280 <prvTraceSetObjectName+0xd0>)
   161f0:	0018      	movs	r0, r3
   161f2:	4b21      	ldr	r3, [pc, #132]	; (16278 <prvTraceSetObjectName+0xc8>)
   161f4:	4798      	blx	r3
		return;
   161f6:	e039      	b.n	1626c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   161f8:	4b22      	ldr	r3, [pc, #136]	; (16284 <prvTraceSetObjectName+0xd4>)
   161fa:	681a      	ldr	r2, [r3, #0]
   161fc:	1dfb      	adds	r3, r7, #7
   161fe:	781b      	ldrb	r3, [r3, #0]
   16200:	2164      	movs	r1, #100	; 0x64
   16202:	18d3      	adds	r3, r2, r3
   16204:	185b      	adds	r3, r3, r1
   16206:	781b      	ldrb	r3, [r3, #0]
   16208:	1dba      	adds	r2, r7, #6
   1620a:	7812      	ldrb	r2, [r2, #0]
   1620c:	429a      	cmp	r2, r3
   1620e:	d909      	bls.n	16224 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   16210:	1dfb      	adds	r3, r7, #7
   16212:	781b      	ldrb	r3, [r3, #0]
   16214:	0018      	movs	r0, r3
   16216:	4b1c      	ldr	r3, [pc, #112]	; (16288 <prvTraceSetObjectName+0xd8>)
   16218:	4798      	blx	r3
   1621a:	0003      	movs	r3, r0
   1621c:	0018      	movs	r0, r3
   1621e:	4b16      	ldr	r3, [pc, #88]	; (16278 <prvTraceSetObjectName+0xc8>)
   16220:	4798      	blx	r3
   16222:	e023      	b.n	1626c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   16224:	1dfb      	adds	r3, r7, #7
   16226:	781a      	ldrb	r2, [r3, #0]
   16228:	1dbb      	adds	r3, r7, #6
   1622a:	781b      	ldrb	r3, [r3, #0]
   1622c:	0011      	movs	r1, r2
   1622e:	0018      	movs	r0, r3
   16230:	4b16      	ldr	r3, [pc, #88]	; (1628c <prvTraceSetObjectName+0xdc>)
   16232:	4798      	blx	r3
   16234:	0003      	movs	r3, r0
   16236:	001a      	movs	r2, r3
   16238:	4b15      	ldr	r3, [pc, #84]	; (16290 <prvTraceSetObjectName+0xe0>)
   1623a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1623c:	4b15      	ldr	r3, [pc, #84]	; (16294 <prvTraceSetObjectName+0xe4>)
   1623e:	681b      	ldr	r3, [r3, #0]
   16240:	2b00      	cmp	r3, #0
   16242:	d113      	bne.n	1626c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   16244:	4b0f      	ldr	r3, [pc, #60]	; (16284 <prvTraceSetObjectName+0xd4>)
   16246:	681a      	ldr	r2, [r3, #0]
   16248:	4b11      	ldr	r3, [pc, #68]	; (16290 <prvTraceSetObjectName+0xe0>)
   1624a:	881b      	ldrh	r3, [r3, #0]
   1624c:	3398      	adds	r3, #152	; 0x98
   1624e:	18d3      	adds	r3, r2, r3
   16250:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   16252:	4b0c      	ldr	r3, [pc, #48]	; (16284 <prvTraceSetObjectName+0xd4>)
   16254:	681a      	ldr	r2, [r3, #0]
   16256:	1dfb      	adds	r3, r7, #7
   16258:	781b      	ldrb	r3, [r3, #0]
   1625a:	2170      	movs	r1, #112	; 0x70
   1625c:	18d3      	adds	r3, r2, r3
   1625e:	185b      	adds	r3, r3, r1
   16260:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   16262:	001a      	movs	r2, r3
   16264:	683b      	ldr	r3, [r7, #0]
   16266:	0019      	movs	r1, r3
   16268:	4b0b      	ldr	r3, [pc, #44]	; (16298 <prvTraceSetObjectName+0xe8>)
   1626a:	4798      	blx	r3
		}
	}
}
   1626c:	46bd      	mov	sp, r7
   1626e:	b002      	add	sp, #8
   16270:	bd80      	pop	{r7, pc}
   16272:	46c0      	nop			; (mov r8, r8)
   16274:	00036220 	.word	0x00036220
   16278:	0001629d 	.word	0x0001629d
   1627c:	00036254 	.word	0x00036254
   16280:	00036284 	.word	0x00036284
   16284:	20000c54 	.word	0x20000c54
   16288:	00014fbd 	.word	0x00014fbd
   1628c:	00015ea9 	.word	0x00015ea9
   16290:	20000c5c 	.word	0x20000c5c
   16294:	20000bb4 	.word	0x20000bb4
   16298:	00016169 	.word	0x00016169

0001629c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1629c:	b580      	push	{r7, lr}
   1629e:	b082      	sub	sp, #8
   162a0:	af00      	add	r7, sp, #0
   162a2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   162a4:	4b11      	ldr	r3, [pc, #68]	; (162ec <prvTraceError+0x50>)
   162a6:	681b      	ldr	r3, [r3, #0]
   162a8:	2b00      	cmp	r3, #0
   162aa:	d001      	beq.n	162b0 <prvTraceError+0x14>
	{
		vTraceStop();
   162ac:	4b10      	ldr	r3, [pc, #64]	; (162f0 <prvTraceError+0x54>)
   162ae:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   162b0:	4b10      	ldr	r3, [pc, #64]	; (162f4 <prvTraceError+0x58>)
   162b2:	681b      	ldr	r3, [r3, #0]
   162b4:	2b00      	cmp	r3, #0
   162b6:	d115      	bne.n	162e4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   162b8:	4b0e      	ldr	r3, [pc, #56]	; (162f4 <prvTraceError+0x58>)
   162ba:	687a      	ldr	r2, [r7, #4]
   162bc:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   162be:	4b0b      	ldr	r3, [pc, #44]	; (162ec <prvTraceError+0x50>)
   162c0:	681b      	ldr	r3, [r3, #0]
   162c2:	2b00      	cmp	r3, #0
   162c4:	d00e      	beq.n	162e4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   162c6:	4b09      	ldr	r3, [pc, #36]	; (162ec <prvTraceError+0x50>)
   162c8:	681b      	ldr	r3, [r3, #0]
   162ca:	4a0b      	ldr	r2, [pc, #44]	; (162f8 <prvTraceError+0x5c>)
   162cc:	1898      	adds	r0, r3, r2
   162ce:	4b09      	ldr	r3, [pc, #36]	; (162f4 <prvTraceError+0x58>)
   162d0:	681b      	ldr	r3, [r3, #0]
   162d2:	2250      	movs	r2, #80	; 0x50
   162d4:	0019      	movs	r1, r3
   162d6:	4b09      	ldr	r3, [pc, #36]	; (162fc <prvTraceError+0x60>)
   162d8:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   162da:	4b04      	ldr	r3, [pc, #16]	; (162ec <prvTraceError+0x50>)
   162dc:	681b      	ldr	r3, [r3, #0]
   162de:	4a08      	ldr	r2, [pc, #32]	; (16300 <prvTraceError+0x64>)
   162e0:	2101      	movs	r1, #1
   162e2:	5099      	str	r1, [r3, r2]
		}
	}
}
   162e4:	46c0      	nop			; (mov r8, r8)
   162e6:	46bd      	mov	sp, r7
   162e8:	b002      	add	sp, #8
   162ea:	bd80      	pop	{r7, pc}
   162ec:	20000c54 	.word	0x20000c54
   162f0:	00015161 	.word	0x00015161
   162f4:	20000bb4 	.word	0x20000bb4
   162f8:	000006bc 	.word	0x000006bc
   162fc:	00016169 	.word	0x00016169
   16300:	000006b4 	.word	0x000006b4

00016304 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   16304:	b580      	push	{r7, lr}
   16306:	b086      	sub	sp, #24
   16308:	af00      	add	r7, sp, #0
   1630a:	0002      	movs	r2, r0
   1630c:	1dfb      	adds	r3, r7, #7
   1630e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   16310:	2300      	movs	r3, #0
   16312:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   16314:	2300      	movs	r3, #0
   16316:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   16318:	1dfb      	adds	r3, r7, #7
   1631a:	781b      	ldrb	r3, [r3, #0]
   1631c:	2b00      	cmp	r3, #0
   1631e:	d000      	beq.n	16322 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   16320:	e089      	b.n	16436 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   16322:	4b49      	ldr	r3, [pc, #292]	; (16448 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   16324:	0018      	movs	r0, r3
   16326:	4b49      	ldr	r3, [pc, #292]	; (1644c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   16328:	4798      	blx	r3
   1632a:	e08a      	b.n	16442 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1632c:	4b48      	ldr	r3, [pc, #288]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1632e:	681b      	ldr	r3, [r3, #0]
   16330:	69da      	ldr	r2, [r3, #28]
   16332:	697b      	ldr	r3, [r7, #20]
   16334:	18d3      	adds	r3, r2, r3
   16336:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   16338:	4b45      	ldr	r3, [pc, #276]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1633a:	6819      	ldr	r1, [r3, #0]
   1633c:	693b      	ldr	r3, [r7, #16]
   1633e:	009a      	lsls	r2, r3, #2
   16340:	23e2      	movs	r3, #226	; 0xe2
   16342:	00db      	lsls	r3, r3, #3
   16344:	188a      	adds	r2, r1, r2
   16346:	18d3      	adds	r3, r2, r3
   16348:	781b      	ldrb	r3, [r3, #0]
   1634a:	2b98      	cmp	r3, #152	; 0x98
   1634c:	d934      	bls.n	163b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1634e:	4b40      	ldr	r3, [pc, #256]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   16350:	6819      	ldr	r1, [r3, #0]
   16352:	693b      	ldr	r3, [r7, #16]
   16354:	009a      	lsls	r2, r3, #2
   16356:	23e2      	movs	r3, #226	; 0xe2
   16358:	00db      	lsls	r3, r3, #3
   1635a:	188a      	adds	r2, r1, r2
   1635c:	18d3      	adds	r3, r2, r3
   1635e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   16360:	2ba7      	cmp	r3, #167	; 0xa7
   16362:	d829      	bhi.n	163b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   16364:	4b3a      	ldr	r3, [pc, #232]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   16366:	6819      	ldr	r1, [r3, #0]
   16368:	693b      	ldr	r3, [r7, #16]
   1636a:	009a      	lsls	r2, r3, #2
   1636c:	23e2      	movs	r3, #226	; 0xe2
   1636e:	00db      	lsls	r3, r3, #3
   16370:	188a      	adds	r2, r1, r2
   16372:	18d3      	adds	r3, r2, r3
   16374:	781a      	ldrb	r2, [r3, #0]
   16376:	230f      	movs	r3, #15
   16378:	18fb      	adds	r3, r7, r3
   1637a:	3268      	adds	r2, #104	; 0x68
   1637c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1637e:	230f      	movs	r3, #15
   16380:	18fb      	adds	r3, r7, r3
   16382:	781a      	ldrb	r2, [r3, #0]
   16384:	693b      	ldr	r3, [r7, #16]
   16386:	18d2      	adds	r2, r2, r3
   16388:	4b31      	ldr	r3, [pc, #196]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1638a:	681b      	ldr	r3, [r3, #0]
   1638c:	699b      	ldr	r3, [r3, #24]
   1638e:	429a      	cmp	r2, r3
   16390:	d24d      	bcs.n	1642e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   16392:	4b2f      	ldr	r3, [pc, #188]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   16394:	681a      	ldr	r2, [r3, #0]
   16396:	693b      	ldr	r3, [r7, #16]
   16398:	009b      	lsls	r3, r3, #2
   1639a:	21e2      	movs	r1, #226	; 0xe2
   1639c:	00c9      	lsls	r1, r1, #3
   1639e:	468c      	mov	ip, r1
   163a0:	4463      	add	r3, ip
   163a2:	18d0      	adds	r0, r2, r3
   163a4:	230f      	movs	r3, #15
   163a6:	18fb      	adds	r3, r7, r3
   163a8:	781b      	ldrb	r3, [r3, #0]
   163aa:	3301      	adds	r3, #1
   163ac:	009b      	lsls	r3, r3, #2
   163ae:	001a      	movs	r2, r3
   163b0:	2100      	movs	r1, #0
   163b2:	4b28      	ldr	r3, [pc, #160]	; (16454 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   163b4:	4798      	blx	r3
		{
   163b6:	e03a      	b.n	1642e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   163b8:	4b25      	ldr	r3, [pc, #148]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   163ba:	6819      	ldr	r1, [r3, #0]
   163bc:	693b      	ldr	r3, [r7, #16]
   163be:	009a      	lsls	r2, r3, #2
   163c0:	23e2      	movs	r3, #226	; 0xe2
   163c2:	00db      	lsls	r3, r3, #3
   163c4:	188a      	adds	r2, r1, r2
   163c6:	18d3      	adds	r3, r2, r3
   163c8:	781b      	ldrb	r3, [r3, #0]
   163ca:	2b01      	cmp	r3, #1
   163cc:	d130      	bne.n	16430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   163ce:	693b      	ldr	r3, [r7, #16]
   163d0:	1c5a      	adds	r2, r3, #1
   163d2:	4b1f      	ldr	r3, [pc, #124]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   163d4:	681b      	ldr	r3, [r3, #0]
   163d6:	699b      	ldr	r3, [r3, #24]
   163d8:	429a      	cmp	r2, r3
   163da:	d20e      	bcs.n	163fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   163dc:	4b1c      	ldr	r3, [pc, #112]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   163de:	681a      	ldr	r2, [r3, #0]
   163e0:	693b      	ldr	r3, [r7, #16]
   163e2:	009b      	lsls	r3, r3, #2
   163e4:	21e2      	movs	r1, #226	; 0xe2
   163e6:	00c9      	lsls	r1, r1, #3
   163e8:	468c      	mov	ip, r1
   163ea:	4463      	add	r3, ip
   163ec:	18d3      	adds	r3, r2, r3
   163ee:	2208      	movs	r2, #8
   163f0:	2100      	movs	r1, #0
   163f2:	0018      	movs	r0, r3
   163f4:	4b17      	ldr	r3, [pc, #92]	; (16454 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   163f6:	4798      	blx	r3
   163f8:	e01a      	b.n	16430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   163fa:	4b15      	ldr	r3, [pc, #84]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   163fc:	681b      	ldr	r3, [r3, #0]
   163fe:	22e2      	movs	r2, #226	; 0xe2
   16400:	00d2      	lsls	r2, r2, #3
   16402:	4694      	mov	ip, r2
   16404:	4463      	add	r3, ip
   16406:	2204      	movs	r2, #4
   16408:	2100      	movs	r1, #0
   1640a:	0018      	movs	r0, r3
   1640c:	4b11      	ldr	r3, [pc, #68]	; (16454 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1640e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   16410:	4b0f      	ldr	r3, [pc, #60]	; (16450 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   16412:	681a      	ldr	r2, [r3, #0]
   16414:	693b      	ldr	r3, [r7, #16]
   16416:	009b      	lsls	r3, r3, #2
   16418:	21e2      	movs	r1, #226	; 0xe2
   1641a:	00c9      	lsls	r1, r1, #3
   1641c:	468c      	mov	ip, r1
   1641e:	4463      	add	r3, ip
   16420:	18d3      	adds	r3, r2, r3
   16422:	2204      	movs	r2, #4
   16424:	2100      	movs	r1, #0
   16426:	0018      	movs	r0, r3
   16428:	4b0a      	ldr	r3, [pc, #40]	; (16454 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1642a:	4798      	blx	r3
   1642c:	e000      	b.n	16430 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1642e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   16430:	697b      	ldr	r3, [r7, #20]
   16432:	3301      	adds	r3, #1
   16434:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   16436:	1dfb      	adds	r3, r7, #7
   16438:	781a      	ldrb	r2, [r3, #0]
   1643a:	697b      	ldr	r3, [r7, #20]
   1643c:	429a      	cmp	r2, r3
   1643e:	d900      	bls.n	16442 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   16440:	e774      	b.n	1632c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   16442:	46bd      	mov	sp, r7
   16444:	b006      	add	sp, #24
   16446:	bd80      	pop	{r7, pc}
   16448:	000362e4 	.word	0x000362e4
   1644c:	0001629d 	.word	0x0001629d
   16450:	20000c54 	.word	0x20000c54
   16454:	000328a7 	.word	0x000328a7

00016458 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   16458:	b580      	push	{r7, lr}
   1645a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1645c:	4b12      	ldr	r3, [pc, #72]	; (164a8 <prvTraceUpdateCounters+0x50>)
   1645e:	681b      	ldr	r3, [r3, #0]
   16460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16462:	2b00      	cmp	r3, #0
   16464:	d01c      	beq.n	164a0 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   16466:	4b10      	ldr	r3, [pc, #64]	; (164a8 <prvTraceUpdateCounters+0x50>)
   16468:	681b      	ldr	r3, [r3, #0]
   1646a:	695a      	ldr	r2, [r3, #20]
   1646c:	3201      	adds	r2, #1
   1646e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   16470:	4b0d      	ldr	r3, [pc, #52]	; (164a8 <prvTraceUpdateCounters+0x50>)
   16472:	681b      	ldr	r3, [r3, #0]
   16474:	69da      	ldr	r2, [r3, #28]
   16476:	3201      	adds	r2, #1
   16478:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1647a:	4b0b      	ldr	r3, [pc, #44]	; (164a8 <prvTraceUpdateCounters+0x50>)
   1647c:	681b      	ldr	r3, [r3, #0]
   1647e:	69da      	ldr	r2, [r3, #28]
   16480:	232c      	movs	r3, #44	; 0x2c
   16482:	33ff      	adds	r3, #255	; 0xff
   16484:	429a      	cmp	r2, r3
   16486:	d907      	bls.n	16498 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   16488:	4b07      	ldr	r3, [pc, #28]	; (164a8 <prvTraceUpdateCounters+0x50>)
   1648a:	681b      	ldr	r3, [r3, #0]
   1648c:	2201      	movs	r2, #1
   1648e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   16490:	4b05      	ldr	r3, [pc, #20]	; (164a8 <prvTraceUpdateCounters+0x50>)
   16492:	681b      	ldr	r3, [r3, #0]
   16494:	2200      	movs	r2, #0
   16496:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   16498:	2001      	movs	r0, #1
   1649a:	4b04      	ldr	r3, [pc, #16]	; (164ac <prvTraceUpdateCounters+0x54>)
   1649c:	4798      	blx	r3
   1649e:	e000      	b.n	164a2 <prvTraceUpdateCounters+0x4a>
		return;
   164a0:	46c0      	nop			; (mov r8, r8)
#endif
}
   164a2:	46bd      	mov	sp, r7
   164a4:	bd80      	pop	{r7, pc}
   164a6:	46c0      	nop			; (mov r8, r8)
   164a8:	20000c54 	.word	0x20000c54
   164ac:	00016305 	.word	0x00016305

000164b0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   164b0:	b5b0      	push	{r4, r5, r7, lr}
   164b2:	b086      	sub	sp, #24
   164b4:	af00      	add	r7, sp, #0
   164b6:	0002      	movs	r2, r0
   164b8:	1dbb      	adds	r3, r7, #6
   164ba:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   164bc:	2300      	movs	r3, #0
   164be:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   164c0:	2300      	movs	r3, #0
   164c2:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   164c4:	2300      	movs	r3, #0
   164c6:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   164c8:	1dbb      	adds	r3, r7, #6
   164ca:	881b      	ldrh	r3, [r3, #0]
   164cc:	2bff      	cmp	r3, #255	; 0xff
   164ce:	d00a      	beq.n	164e6 <prvTraceGetDTS+0x36>
   164d0:	1dbb      	adds	r3, r7, #6
   164d2:	881b      	ldrh	r3, [r3, #0]
   164d4:	4a60      	ldr	r2, [pc, #384]	; (16658 <prvTraceGetDTS+0x1a8>)
   164d6:	4293      	cmp	r3, r2
   164d8:	d005      	beq.n	164e6 <prvTraceGetDTS+0x36>
   164da:	4b60      	ldr	r3, [pc, #384]	; (1665c <prvTraceGetDTS+0x1ac>)
   164dc:	0018      	movs	r0, r3
   164de:	4b60      	ldr	r3, [pc, #384]	; (16660 <prvTraceGetDTS+0x1b0>)
   164e0:	4798      	blx	r3
   164e2:	2300      	movs	r3, #0
   164e4:	e0b3      	b.n	1664e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   164e6:	4b5f      	ldr	r3, [pc, #380]	; (16664 <prvTraceGetDTS+0x1b4>)
   164e8:	681b      	ldr	r3, [r3, #0]
   164ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   164ec:	2b00      	cmp	r3, #0
   164ee:	d118      	bne.n	16522 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   164f0:	4b5d      	ldr	r3, [pc, #372]	; (16668 <prvTraceGetDTS+0x1b8>)
   164f2:	681b      	ldr	r3, [r3, #0]
   164f4:	2b00      	cmp	r3, #0
   164f6:	d006      	beq.n	16506 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   164f8:	4b5a      	ldr	r3, [pc, #360]	; (16664 <prvTraceGetDTS+0x1b4>)
   164fa:	681b      	ldr	r3, [r3, #0]
   164fc:	4a5a      	ldr	r2, [pc, #360]	; (16668 <prvTraceGetDTS+0x1b8>)
   164fe:	6812      	ldr	r2, [r2, #0]
   16500:	0892      	lsrs	r2, r2, #2
   16502:	625a      	str	r2, [r3, #36]	; 0x24
   16504:	e00d      	b.n	16522 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   16506:	4b59      	ldr	r3, [pc, #356]	; (1666c <prvTraceGetDTS+0x1bc>)
   16508:	681a      	ldr	r2, [r3, #0]
   1650a:	4b59      	ldr	r3, [pc, #356]	; (16670 <prvTraceGetDTS+0x1c0>)
   1650c:	681b      	ldr	r3, [r3, #0]
   1650e:	429a      	cmp	r2, r3
   16510:	d007      	beq.n	16522 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   16512:	4b54      	ldr	r3, [pc, #336]	; (16664 <prvTraceGetDTS+0x1b4>)
   16514:	681c      	ldr	r4, [r3, #0]
   16516:	2000      	movs	r0, #0
   16518:	4b56      	ldr	r3, [pc, #344]	; (16674 <prvTraceGetDTS+0x1c4>)
   1651a:	4798      	blx	r3
   1651c:	0003      	movs	r3, r0
   1651e:	089b      	lsrs	r3, r3, #2
   16520:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   16522:	230c      	movs	r3, #12
   16524:	18fb      	adds	r3, r7, r3
   16526:	0018      	movs	r0, r3
   16528:	4b53      	ldr	r3, [pc, #332]	; (16678 <prvTraceGetDTS+0x1c8>)
   1652a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1652c:	68fa      	ldr	r2, [r7, #12]
   1652e:	4b53      	ldr	r3, [pc, #332]	; (1667c <prvTraceGetDTS+0x1cc>)
   16530:	681b      	ldr	r3, [r3, #0]
   16532:	1ad3      	subs	r3, r2, r3
   16534:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   16536:	68fa      	ldr	r2, [r7, #12]
   16538:	4b50      	ldr	r3, [pc, #320]	; (1667c <prvTraceGetDTS+0x1cc>)
   1653a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1653c:	4b49      	ldr	r3, [pc, #292]	; (16664 <prvTraceGetDTS+0x1b4>)
   1653e:	681b      	ldr	r3, [r3, #0]
   16540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16542:	2b00      	cmp	r3, #0
   16544:	d044      	beq.n	165d0 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   16546:	4b47      	ldr	r3, [pc, #284]	; (16664 <prvTraceGetDTS+0x1b4>)
   16548:	681b      	ldr	r3, [r3, #0]
   1654a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1654c:	693b      	ldr	r3, [r7, #16]
   1654e:	429a      	cmp	r2, r3
   16550:	d21e      	bcs.n	16590 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   16552:	4b44      	ldr	r3, [pc, #272]	; (16664 <prvTraceGetDTS+0x1b4>)
   16554:	681c      	ldr	r4, [r3, #0]
   16556:	4b43      	ldr	r3, [pc, #268]	; (16664 <prvTraceGetDTS+0x1b4>)
   16558:	681b      	ldr	r3, [r3, #0]
   1655a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1655c:	4b41      	ldr	r3, [pc, #260]	; (16664 <prvTraceGetDTS+0x1b4>)
   1655e:	681b      	ldr	r3, [r3, #0]
   16560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16562:	4b47      	ldr	r3, [pc, #284]	; (16680 <prvTraceGetDTS+0x1d0>)
   16564:	0011      	movs	r1, r2
   16566:	6938      	ldr	r0, [r7, #16]
   16568:	4798      	blx	r3
   1656a:	0003      	movs	r3, r0
   1656c:	18eb      	adds	r3, r5, r3
   1656e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   16570:	4b3c      	ldr	r3, [pc, #240]	; (16664 <prvTraceGetDTS+0x1b4>)
   16572:	681c      	ldr	r4, [r3, #0]
   16574:	4b3b      	ldr	r3, [pc, #236]	; (16664 <prvTraceGetDTS+0x1b4>)
   16576:	681b      	ldr	r3, [r3, #0]
   16578:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1657a:	4b3a      	ldr	r3, [pc, #232]	; (16664 <prvTraceGetDTS+0x1b4>)
   1657c:	681b      	ldr	r3, [r3, #0]
   1657e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   16580:	693a      	ldr	r2, [r7, #16]
   16582:	4b40      	ldr	r3, [pc, #256]	; (16684 <prvTraceGetDTS+0x1d4>)
   16584:	0010      	movs	r0, r2
   16586:	4798      	blx	r3
   16588:	000b      	movs	r3, r1
   1658a:	18eb      	adds	r3, r5, r3
   1658c:	62a3      	str	r3, [r4, #40]	; 0x28
   1658e:	e007      	b.n	165a0 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   16590:	4b34      	ldr	r3, [pc, #208]	; (16664 <prvTraceGetDTS+0x1b4>)
   16592:	681b      	ldr	r3, [r3, #0]
   16594:	4a33      	ldr	r2, [pc, #204]	; (16664 <prvTraceGetDTS+0x1b4>)
   16596:	6812      	ldr	r2, [r2, #0]
   16598:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1659a:	693a      	ldr	r2, [r7, #16]
   1659c:	188a      	adds	r2, r1, r2
   1659e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   165a0:	4b30      	ldr	r3, [pc, #192]	; (16664 <prvTraceGetDTS+0x1b4>)
   165a2:	681b      	ldr	r3, [r3, #0]
   165a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   165a6:	4b2f      	ldr	r3, [pc, #188]	; (16664 <prvTraceGetDTS+0x1b4>)
   165a8:	681b      	ldr	r3, [r3, #0]
   165aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   165ac:	429a      	cmp	r2, r3
   165ae:	d313      	bcc.n	165d8 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   165b0:	4b2c      	ldr	r3, [pc, #176]	; (16664 <prvTraceGetDTS+0x1b4>)
   165b2:	681b      	ldr	r3, [r3, #0]
   165b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   165b6:	3201      	adds	r2, #1
   165b8:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   165ba:	4b2a      	ldr	r3, [pc, #168]	; (16664 <prvTraceGetDTS+0x1b4>)
   165bc:	681b      	ldr	r3, [r3, #0]
   165be:	4a29      	ldr	r2, [pc, #164]	; (16664 <prvTraceGetDTS+0x1b4>)
   165c0:	6812      	ldr	r2, [r2, #0]
   165c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
   165c4:	4a27      	ldr	r2, [pc, #156]	; (16664 <prvTraceGetDTS+0x1b4>)
   165c6:	6812      	ldr	r2, [r2, #0]
   165c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
   165ca:	1a8a      	subs	r2, r1, r2
   165cc:	629a      	str	r2, [r3, #40]	; 0x28
   165ce:	e003      	b.n	165d8 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   165d0:	4b24      	ldr	r3, [pc, #144]	; (16664 <prvTraceGetDTS+0x1b4>)
   165d2:	681b      	ldr	r3, [r3, #0]
   165d4:	68fa      	ldr	r2, [r7, #12]
   165d6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   165d8:	1dbb      	adds	r3, r7, #6
   165da:	881a      	ldrh	r2, [r3, #0]
   165dc:	693b      	ldr	r3, [r7, #16]
   165de:	429a      	cmp	r2, r3
   165e0:	d22f      	bcs.n	16642 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   165e2:	4b29      	ldr	r3, [pc, #164]	; (16688 <prvTraceGetDTS+0x1d8>)
   165e4:	4798      	blx	r3
   165e6:	0003      	movs	r3, r0
   165e8:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   165ea:	697b      	ldr	r3, [r7, #20]
   165ec:	2b00      	cmp	r3, #0
   165ee:	d028      	beq.n	16642 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   165f0:	1dbb      	adds	r3, r7, #6
   165f2:	881b      	ldrh	r3, [r3, #0]
   165f4:	4a18      	ldr	r2, [pc, #96]	; (16658 <prvTraceGetDTS+0x1a8>)
   165f6:	4293      	cmp	r3, r2
   165f8:	d10b      	bne.n	16612 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   165fa:	697b      	ldr	r3, [r7, #20]
   165fc:	22a9      	movs	r2, #169	; 0xa9
   165fe:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   16600:	693b      	ldr	r3, [r7, #16]
   16602:	0c1b      	lsrs	r3, r3, #16
   16604:	b29a      	uxth	r2, r3
   16606:	697b      	ldr	r3, [r7, #20]
   16608:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1660a:	697b      	ldr	r3, [r7, #20]
   1660c:	2200      	movs	r2, #0
   1660e:	705a      	strb	r2, [r3, #1]
   16610:	e015      	b.n	1663e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   16612:	1dbb      	adds	r3, r7, #6
   16614:	881b      	ldrh	r3, [r3, #0]
   16616:	2bff      	cmp	r3, #255	; 0xff
   16618:	d10d      	bne.n	16636 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1661a:	697b      	ldr	r3, [r7, #20]
   1661c:	22a8      	movs	r2, #168	; 0xa8
   1661e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   16620:	693b      	ldr	r3, [r7, #16]
   16622:	0a1b      	lsrs	r3, r3, #8
   16624:	b29a      	uxth	r2, r3
   16626:	697b      	ldr	r3, [r7, #20]
   16628:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1662a:	693b      	ldr	r3, [r7, #16]
   1662c:	0e1b      	lsrs	r3, r3, #24
   1662e:	b2da      	uxtb	r2, r3
   16630:	697b      	ldr	r3, [r7, #20]
   16632:	705a      	strb	r2, [r3, #1]
   16634:	e003      	b.n	1663e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   16636:	4b15      	ldr	r3, [pc, #84]	; (1668c <prvTraceGetDTS+0x1dc>)
   16638:	0018      	movs	r0, r3
   1663a:	4b09      	ldr	r3, [pc, #36]	; (16660 <prvTraceGetDTS+0x1b0>)
   1663c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1663e:	4b14      	ldr	r3, [pc, #80]	; (16690 <prvTraceGetDTS+0x1e0>)
   16640:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   16642:	693b      	ldr	r3, [r7, #16]
   16644:	b29b      	uxth	r3, r3
   16646:	1dba      	adds	r2, r7, #6
   16648:	8812      	ldrh	r2, [r2, #0]
   1664a:	4013      	ands	r3, r2
   1664c:	b29b      	uxth	r3, r3
}
   1664e:	0018      	movs	r0, r3
   16650:	46bd      	mov	sp, r7
   16652:	b006      	add	sp, #24
   16654:	bdb0      	pop	{r4, r5, r7, pc}
   16656:	46c0      	nop			; (mov r8, r8)
   16658:	0000ffff 	.word	0x0000ffff
   1665c:	0003633c 	.word	0x0003633c
   16660:	0001629d 	.word	0x0001629d
   16664:	20000c54 	.word	0x20000c54
   16668:	20000bb0 	.word	0x20000bb0
   1666c:	e000e018 	.word	0xe000e018
   16670:	2000507c 	.word	0x2000507c
   16674:	000268b5 	.word	0x000268b5
   16678:	00016695 	.word	0x00016695
   1667c:	20000c60 	.word	0x20000c60
   16680:	0002fded 	.word	0x0002fded
   16684:	0002fef9 	.word	0x0002fef9
   16688:	00015e55 	.word	0x00015e55
   1668c:	0003637c 	.word	0x0003637c
   16690:	00016459 	.word	0x00016459

00016694 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   16694:	b580      	push	{r7, lr}
   16696:	b084      	sub	sp, #16
   16698:	af00      	add	r7, sp, #0
   1669a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1669c:	2300      	movs	r3, #0
   1669e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   166a0:	2300      	movs	r3, #0
   166a2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   166a4:	4b2d      	ldr	r3, [pc, #180]	; (1675c <prvTracePortGetTimeStamp+0xc8>)
   166a6:	681b      	ldr	r3, [r3, #0]
   166a8:	2b01      	cmp	r3, #1
   166aa:	d107      	bne.n	166bc <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   166ac:	687b      	ldr	r3, [r7, #4]
   166ae:	2b00      	cmp	r3, #0
   166b0:	d04f      	beq.n	16752 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   166b2:	4b2b      	ldr	r3, [pc, #172]	; (16760 <prvTracePortGetTimeStamp+0xcc>)
   166b4:	681a      	ldr	r2, [r3, #0]
   166b6:	687b      	ldr	r3, [r7, #4]
   166b8:	601a      	str	r2, [r3, #0]
		return;
   166ba:	e04a      	b.n	16752 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   166bc:	4b29      	ldr	r3, [pc, #164]	; (16764 <prvTracePortGetTimeStamp+0xd0>)
   166be:	681a      	ldr	r2, [r3, #0]
   166c0:	4b29      	ldr	r3, [pc, #164]	; (16768 <prvTracePortGetTimeStamp+0xd4>)
   166c2:	681b      	ldr	r3, [r3, #0]
   166c4:	1ad3      	subs	r3, r2, r3
   166c6:	3301      	adds	r3, #1
   166c8:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   166ca:	4b28      	ldr	r3, [pc, #160]	; (1676c <prvTracePortGetTimeStamp+0xd8>)
   166cc:	681a      	ldr	r2, [r3, #0]
   166ce:	4b28      	ldr	r3, [pc, #160]	; (16770 <prvTracePortGetTimeStamp+0xdc>)
   166d0:	681b      	ldr	r3, [r3, #0]
   166d2:	1ad3      	subs	r3, r2, r3
   166d4:	3b01      	subs	r3, #1
   166d6:	2b00      	cmp	r3, #0
   166d8:	db03      	blt.n	166e2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   166da:	4b24      	ldr	r3, [pc, #144]	; (1676c <prvTracePortGetTimeStamp+0xd8>)
   166dc:	681b      	ldr	r3, [r3, #0]
   166de:	60fb      	str	r3, [r7, #12]
   166e0:	e002      	b.n	166e8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   166e2:	4b23      	ldr	r3, [pc, #140]	; (16770 <prvTracePortGetTimeStamp+0xdc>)
   166e4:	681b      	ldr	r3, [r3, #0]
   166e6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   166e8:	4b20      	ldr	r3, [pc, #128]	; (1676c <prvTracePortGetTimeStamp+0xd8>)
   166ea:	681b      	ldr	r3, [r3, #0]
   166ec:	68fa      	ldr	r2, [r7, #12]
   166ee:	429a      	cmp	r2, r3
   166f0:	d107      	bne.n	16702 <prvTracePortGetTimeStamp+0x6e>
   166f2:	4b20      	ldr	r3, [pc, #128]	; (16774 <prvTracePortGetTimeStamp+0xe0>)
   166f4:	681b      	ldr	r3, [r3, #0]
   166f6:	68ba      	ldr	r2, [r7, #8]
   166f8:	429a      	cmp	r2, r3
   166fa:	d202      	bcs.n	16702 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   166fc:	68fb      	ldr	r3, [r7, #12]
   166fe:	3301      	adds	r3, #1
   16700:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   16702:	687b      	ldr	r3, [r7, #4]
   16704:	2b00      	cmp	r3, #0
   16706:	d016      	beq.n	16736 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   16708:	4b16      	ldr	r3, [pc, #88]	; (16764 <prvTracePortGetTimeStamp+0xd0>)
   1670a:	681b      	ldr	r3, [r3, #0]
   1670c:	3301      	adds	r3, #1
   1670e:	089b      	lsrs	r3, r3, #2
   16710:	68fa      	ldr	r2, [r7, #12]
   16712:	435a      	muls	r2, r3
   16714:	4b12      	ldr	r3, [pc, #72]	; (16760 <prvTracePortGetTimeStamp+0xcc>)
   16716:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   16718:	4b12      	ldr	r3, [pc, #72]	; (16764 <prvTracePortGetTimeStamp+0xd0>)
   1671a:	681b      	ldr	r3, [r3, #0]
   1671c:	3301      	adds	r3, #1
   1671e:	2203      	movs	r2, #3
   16720:	4013      	ands	r3, r2
   16722:	68fa      	ldr	r2, [r7, #12]
   16724:	435a      	muls	r2, r3
   16726:	68bb      	ldr	r3, [r7, #8]
   16728:	18d3      	adds	r3, r2, r3
   1672a:	089a      	lsrs	r2, r3, #2
   1672c:	4b0c      	ldr	r3, [pc, #48]	; (16760 <prvTracePortGetTimeStamp+0xcc>)
   1672e:	681b      	ldr	r3, [r3, #0]
   16730:	18d2      	adds	r2, r2, r3
   16732:	4b0b      	ldr	r3, [pc, #44]	; (16760 <prvTracePortGetTimeStamp+0xcc>)
   16734:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   16736:	4b0d      	ldr	r3, [pc, #52]	; (1676c <prvTracePortGetTimeStamp+0xd8>)
   16738:	68fa      	ldr	r2, [r7, #12]
   1673a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1673c:	687b      	ldr	r3, [r7, #4]
   1673e:	2b00      	cmp	r3, #0
   16740:	d003      	beq.n	1674a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   16742:	4b07      	ldr	r3, [pc, #28]	; (16760 <prvTracePortGetTimeStamp+0xcc>)
   16744:	681a      	ldr	r2, [r3, #0]
   16746:	687b      	ldr	r3, [r7, #4]
   16748:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1674a:	4b0a      	ldr	r3, [pc, #40]	; (16774 <prvTracePortGetTimeStamp+0xe0>)
   1674c:	68ba      	ldr	r2, [r7, #8]
   1674e:	601a      	str	r2, [r3, #0]
   16750:	e000      	b.n	16754 <prvTracePortGetTimeStamp+0xc0>
		return;
   16752:	46c0      	nop			; (mov r8, r8)
}
   16754:	46bd      	mov	sp, r7
   16756:	b004      	add	sp, #16
   16758:	bd80      	pop	{r7, pc}
   1675a:	46c0      	nop			; (mov r8, r8)
   1675c:	20000ba0 	.word	0x20000ba0
   16760:	20000ba4 	.word	0x20000ba4
   16764:	e000e014 	.word	0xe000e014
   16768:	e000e018 	.word	0xe000e018
   1676c:	20000c64 	.word	0x20000c64
   16770:	20000b9c 	.word	0x20000b9c
   16774:	20000c68 	.word	0x20000c68

00016778 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   16778:	b580      	push	{r7, lr}
   1677a:	b082      	sub	sp, #8
   1677c:	af00      	add	r7, sp, #0
   1677e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16780:	687b      	ldr	r3, [r7, #4]
   16782:	3308      	adds	r3, #8
   16784:	001a      	movs	r2, r3
   16786:	687b      	ldr	r3, [r7, #4]
   16788:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1678a:	687b      	ldr	r3, [r7, #4]
   1678c:	2201      	movs	r2, #1
   1678e:	4252      	negs	r2, r2
   16790:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16792:	687b      	ldr	r3, [r7, #4]
   16794:	3308      	adds	r3, #8
   16796:	001a      	movs	r2, r3
   16798:	687b      	ldr	r3, [r7, #4]
   1679a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1679c:	687b      	ldr	r3, [r7, #4]
   1679e:	3308      	adds	r3, #8
   167a0:	001a      	movs	r2, r3
   167a2:	687b      	ldr	r3, [r7, #4]
   167a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   167a6:	687b      	ldr	r3, [r7, #4]
   167a8:	2200      	movs	r2, #0
   167aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   167ac:	46c0      	nop			; (mov r8, r8)
   167ae:	46bd      	mov	sp, r7
   167b0:	b002      	add	sp, #8
   167b2:	bd80      	pop	{r7, pc}

000167b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   167b4:	b580      	push	{r7, lr}
   167b6:	b082      	sub	sp, #8
   167b8:	af00      	add	r7, sp, #0
   167ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   167bc:	687b      	ldr	r3, [r7, #4]
   167be:	2200      	movs	r2, #0
   167c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   167c2:	46c0      	nop			; (mov r8, r8)
   167c4:	46bd      	mov	sp, r7
   167c6:	b002      	add	sp, #8
   167c8:	bd80      	pop	{r7, pc}

000167ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   167ca:	b580      	push	{r7, lr}
   167cc:	b084      	sub	sp, #16
   167ce:	af00      	add	r7, sp, #0
   167d0:	6078      	str	r0, [r7, #4]
   167d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   167d4:	687b      	ldr	r3, [r7, #4]
   167d6:	685b      	ldr	r3, [r3, #4]
   167d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   167da:	683b      	ldr	r3, [r7, #0]
   167dc:	68fa      	ldr	r2, [r7, #12]
   167de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   167e0:	68fb      	ldr	r3, [r7, #12]
   167e2:	689a      	ldr	r2, [r3, #8]
   167e4:	683b      	ldr	r3, [r7, #0]
   167e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   167e8:	68fb      	ldr	r3, [r7, #12]
   167ea:	689b      	ldr	r3, [r3, #8]
   167ec:	683a      	ldr	r2, [r7, #0]
   167ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   167f0:	68fb      	ldr	r3, [r7, #12]
   167f2:	683a      	ldr	r2, [r7, #0]
   167f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   167f6:	683b      	ldr	r3, [r7, #0]
   167f8:	687a      	ldr	r2, [r7, #4]
   167fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   167fc:	687b      	ldr	r3, [r7, #4]
   167fe:	681b      	ldr	r3, [r3, #0]
   16800:	1c5a      	adds	r2, r3, #1
   16802:	687b      	ldr	r3, [r7, #4]
   16804:	601a      	str	r2, [r3, #0]
}
   16806:	46c0      	nop			; (mov r8, r8)
   16808:	46bd      	mov	sp, r7
   1680a:	b004      	add	sp, #16
   1680c:	bd80      	pop	{r7, pc}

0001680e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1680e:	b580      	push	{r7, lr}
   16810:	b084      	sub	sp, #16
   16812:	af00      	add	r7, sp, #0
   16814:	6078      	str	r0, [r7, #4]
   16816:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   16818:	683b      	ldr	r3, [r7, #0]
   1681a:	681b      	ldr	r3, [r3, #0]
   1681c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1681e:	68bb      	ldr	r3, [r7, #8]
   16820:	3301      	adds	r3, #1
   16822:	d103      	bne.n	1682c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   16824:	687b      	ldr	r3, [r7, #4]
   16826:	691b      	ldr	r3, [r3, #16]
   16828:	60fb      	str	r3, [r7, #12]
   1682a:	e00c      	b.n	16846 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1682c:	687b      	ldr	r3, [r7, #4]
   1682e:	3308      	adds	r3, #8
   16830:	60fb      	str	r3, [r7, #12]
   16832:	e002      	b.n	1683a <vListInsert+0x2c>
   16834:	68fb      	ldr	r3, [r7, #12]
   16836:	685b      	ldr	r3, [r3, #4]
   16838:	60fb      	str	r3, [r7, #12]
   1683a:	68fb      	ldr	r3, [r7, #12]
   1683c:	685b      	ldr	r3, [r3, #4]
   1683e:	681a      	ldr	r2, [r3, #0]
   16840:	68bb      	ldr	r3, [r7, #8]
   16842:	429a      	cmp	r2, r3
   16844:	d9f6      	bls.n	16834 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   16846:	68fb      	ldr	r3, [r7, #12]
   16848:	685a      	ldr	r2, [r3, #4]
   1684a:	683b      	ldr	r3, [r7, #0]
   1684c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1684e:	683b      	ldr	r3, [r7, #0]
   16850:	685b      	ldr	r3, [r3, #4]
   16852:	683a      	ldr	r2, [r7, #0]
   16854:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   16856:	683b      	ldr	r3, [r7, #0]
   16858:	68fa      	ldr	r2, [r7, #12]
   1685a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1685c:	68fb      	ldr	r3, [r7, #12]
   1685e:	683a      	ldr	r2, [r7, #0]
   16860:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   16862:	683b      	ldr	r3, [r7, #0]
   16864:	687a      	ldr	r2, [r7, #4]
   16866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   16868:	687b      	ldr	r3, [r7, #4]
   1686a:	681b      	ldr	r3, [r3, #0]
   1686c:	1c5a      	adds	r2, r3, #1
   1686e:	687b      	ldr	r3, [r7, #4]
   16870:	601a      	str	r2, [r3, #0]
}
   16872:	46c0      	nop			; (mov r8, r8)
   16874:	46bd      	mov	sp, r7
   16876:	b004      	add	sp, #16
   16878:	bd80      	pop	{r7, pc}

0001687a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1687a:	b580      	push	{r7, lr}
   1687c:	b084      	sub	sp, #16
   1687e:	af00      	add	r7, sp, #0
   16880:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   16882:	687b      	ldr	r3, [r7, #4]
   16884:	691b      	ldr	r3, [r3, #16]
   16886:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   16888:	687b      	ldr	r3, [r7, #4]
   1688a:	685b      	ldr	r3, [r3, #4]
   1688c:	687a      	ldr	r2, [r7, #4]
   1688e:	6892      	ldr	r2, [r2, #8]
   16890:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   16892:	687b      	ldr	r3, [r7, #4]
   16894:	689b      	ldr	r3, [r3, #8]
   16896:	687a      	ldr	r2, [r7, #4]
   16898:	6852      	ldr	r2, [r2, #4]
   1689a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1689c:	68fb      	ldr	r3, [r7, #12]
   1689e:	685a      	ldr	r2, [r3, #4]
   168a0:	687b      	ldr	r3, [r7, #4]
   168a2:	429a      	cmp	r2, r3
   168a4:	d103      	bne.n	168ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   168a6:	687b      	ldr	r3, [r7, #4]
   168a8:	689a      	ldr	r2, [r3, #8]
   168aa:	68fb      	ldr	r3, [r7, #12]
   168ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   168ae:	687b      	ldr	r3, [r7, #4]
   168b0:	2200      	movs	r2, #0
   168b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   168b4:	68fb      	ldr	r3, [r7, #12]
   168b6:	681b      	ldr	r3, [r3, #0]
   168b8:	1e5a      	subs	r2, r3, #1
   168ba:	68fb      	ldr	r3, [r7, #12]
   168bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   168be:	68fb      	ldr	r3, [r7, #12]
   168c0:	681b      	ldr	r3, [r3, #0]
}
   168c2:	0018      	movs	r0, r3
   168c4:	46bd      	mov	sp, r7
   168c6:	b004      	add	sp, #16
   168c8:	bd80      	pop	{r7, pc}
	...

000168cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   168cc:	b580      	push	{r7, lr}
   168ce:	b084      	sub	sp, #16
   168d0:	af00      	add	r7, sp, #0
   168d2:	60f8      	str	r0, [r7, #12]
   168d4:	60b9      	str	r1, [r7, #8]
   168d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   168d8:	68fb      	ldr	r3, [r7, #12]
   168da:	3b04      	subs	r3, #4
   168dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   168de:	68fb      	ldr	r3, [r7, #12]
   168e0:	2280      	movs	r2, #128	; 0x80
   168e2:	0452      	lsls	r2, r2, #17
   168e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   168e6:	68fb      	ldr	r3, [r7, #12]
   168e8:	3b04      	subs	r3, #4
   168ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   168ec:	68ba      	ldr	r2, [r7, #8]
   168ee:	68fb      	ldr	r3, [r7, #12]
   168f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   168f2:	68fb      	ldr	r3, [r7, #12]
   168f4:	3b04      	subs	r3, #4
   168f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   168f8:	4a08      	ldr	r2, [pc, #32]	; (1691c <pxPortInitialiseStack+0x50>)
   168fa:	68fb      	ldr	r3, [r7, #12]
   168fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   168fe:	68fb      	ldr	r3, [r7, #12]
   16900:	3b14      	subs	r3, #20
   16902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   16904:	687a      	ldr	r2, [r7, #4]
   16906:	68fb      	ldr	r3, [r7, #12]
   16908:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1690a:	68fb      	ldr	r3, [r7, #12]
   1690c:	3b20      	subs	r3, #32
   1690e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   16910:	68fb      	ldr	r3, [r7, #12]
}
   16912:	0018      	movs	r0, r3
   16914:	46bd      	mov	sp, r7
   16916:	b004      	add	sp, #16
   16918:	bd80      	pop	{r7, pc}
   1691a:	46c0      	nop			; (mov r8, r8)
   1691c:	00016921 	.word	0x00016921

00016920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   16920:	b580      	push	{r7, lr}
   16922:	b082      	sub	sp, #8
   16924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   16926:	2300      	movs	r3, #0
   16928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1692a:	4b07      	ldr	r3, [pc, #28]	; (16948 <prvTaskExitError+0x28>)
   1692c:	681b      	ldr	r3, [r3, #0]
   1692e:	3301      	adds	r3, #1
   16930:	d001      	beq.n	16936 <prvTaskExitError+0x16>
   16932:	b672      	cpsid	i
   16934:	e7fe      	b.n	16934 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   16936:	b672      	cpsid	i
	while( ulDummy == 0 )
   16938:	46c0      	nop			; (mov r8, r8)
   1693a:	687b      	ldr	r3, [r7, #4]
   1693c:	2b00      	cmp	r3, #0
   1693e:	d0fc      	beq.n	1693a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   16940:	46c0      	nop			; (mov r8, r8)
   16942:	46bd      	mov	sp, r7
   16944:	b002      	add	sp, #8
   16946:	bd80      	pop	{r7, pc}
   16948:	200000b8 	.word	0x200000b8

0001694c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1694c:	b580      	push	{r7, lr}
   1694e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   16950:	46c0      	nop			; (mov r8, r8)
   16952:	46bd      	mov	sp, r7
   16954:	bd80      	pop	{r7, pc}
	...

00016960 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   16960:	4a0b      	ldr	r2, [pc, #44]	; (16990 <pxCurrentTCBConst2>)
   16962:	6813      	ldr	r3, [r2, #0]
   16964:	6818      	ldr	r0, [r3, #0]
   16966:	3020      	adds	r0, #32
   16968:	f380 8809 	msr	PSP, r0
   1696c:	2002      	movs	r0, #2
   1696e:	f380 8814 	msr	CONTROL, r0
   16972:	f3bf 8f6f 	isb	sy
   16976:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   16978:	46ae      	mov	lr, r5
   1697a:	bc08      	pop	{r3}
   1697c:	bc04      	pop	{r2}
   1697e:	b662      	cpsie	i
   16980:	4718      	bx	r3
   16982:	46c0      	nop			; (mov r8, r8)
   16984:	46c0      	nop			; (mov r8, r8)
   16986:	46c0      	nop			; (mov r8, r8)
   16988:	46c0      	nop			; (mov r8, r8)
   1698a:	46c0      	nop			; (mov r8, r8)
   1698c:	46c0      	nop			; (mov r8, r8)
   1698e:	46c0      	nop			; (mov r8, r8)

00016990 <pxCurrentTCBConst2>:
   16990:	20003b54 	.word	0x20003b54
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   16994:	46c0      	nop			; (mov r8, r8)
   16996:	46c0      	nop			; (mov r8, r8)

00016998 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   16998:	b580      	push	{r7, lr}
   1699a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1699c:	4b0e      	ldr	r3, [pc, #56]	; (169d8 <xPortStartScheduler+0x40>)
   1699e:	4a0e      	ldr	r2, [pc, #56]	; (169d8 <xPortStartScheduler+0x40>)
   169a0:	6812      	ldr	r2, [r2, #0]
   169a2:	21ff      	movs	r1, #255	; 0xff
   169a4:	0409      	lsls	r1, r1, #16
   169a6:	430a      	orrs	r2, r1
   169a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   169aa:	4b0b      	ldr	r3, [pc, #44]	; (169d8 <xPortStartScheduler+0x40>)
   169ac:	4a0a      	ldr	r2, [pc, #40]	; (169d8 <xPortStartScheduler+0x40>)
   169ae:	6812      	ldr	r2, [r2, #0]
   169b0:	21ff      	movs	r1, #255	; 0xff
   169b2:	0609      	lsls	r1, r1, #24
   169b4:	430a      	orrs	r2, r1
   169b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   169b8:	4b08      	ldr	r3, [pc, #32]	; (169dc <xPortStartScheduler+0x44>)
   169ba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   169bc:	4b08      	ldr	r3, [pc, #32]	; (169e0 <xPortStartScheduler+0x48>)
   169be:	2200      	movs	r2, #0
   169c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   169c2:	4b08      	ldr	r3, [pc, #32]	; (169e4 <xPortStartScheduler+0x4c>)
   169c4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   169c6:	4b08      	ldr	r3, [pc, #32]	; (169e8 <xPortStartScheduler+0x50>)
   169c8:	4798      	blx	r3
	prvTaskExitError();
   169ca:	4b08      	ldr	r3, [pc, #32]	; (169ec <xPortStartScheduler+0x54>)
   169cc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   169ce:	2300      	movs	r3, #0
}
   169d0:	0018      	movs	r0, r3
   169d2:	46bd      	mov	sp, r7
   169d4:	bd80      	pop	{r7, pc}
   169d6:	46c0      	nop			; (mov r8, r8)
   169d8:	e000ed20 	.word	0xe000ed20
   169dc:	00016af9 	.word	0x00016af9
   169e0:	200000b8 	.word	0x200000b8
   169e4:	00016961 	.word	0x00016961
   169e8:	00019059 	.word	0x00019059
   169ec:	00016921 	.word	0x00016921

000169f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   169f0:	b580      	push	{r7, lr}
   169f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   169f4:	4b03      	ldr	r3, [pc, #12]	; (16a04 <vPortYield+0x14>)
   169f6:	2280      	movs	r2, #128	; 0x80
   169f8:	0552      	lsls	r2, r2, #21
   169fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   169fc:	46c0      	nop			; (mov r8, r8)
   169fe:	46bd      	mov	sp, r7
   16a00:	bd80      	pop	{r7, pc}
   16a02:	46c0      	nop			; (mov r8, r8)
   16a04:	e000ed04 	.word	0xe000ed04

00016a08 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   16a08:	b580      	push	{r7, lr}
   16a0a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   16a0c:	b672      	cpsid	i
    uxCriticalNesting++;
   16a0e:	4b06      	ldr	r3, [pc, #24]	; (16a28 <vPortEnterCritical+0x20>)
   16a10:	681b      	ldr	r3, [r3, #0]
   16a12:	1c5a      	adds	r2, r3, #1
   16a14:	4b04      	ldr	r3, [pc, #16]	; (16a28 <vPortEnterCritical+0x20>)
   16a16:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   16a18:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   16a1c:	f3bf 8f6f 	isb	sy
}
   16a20:	46c0      	nop			; (mov r8, r8)
   16a22:	46bd      	mov	sp, r7
   16a24:	bd80      	pop	{r7, pc}
   16a26:	46c0      	nop			; (mov r8, r8)
   16a28:	200000b8 	.word	0x200000b8

00016a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   16a2c:	b580      	push	{r7, lr}
   16a2e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   16a30:	4b09      	ldr	r3, [pc, #36]	; (16a58 <vPortExitCritical+0x2c>)
   16a32:	681b      	ldr	r3, [r3, #0]
   16a34:	2b00      	cmp	r3, #0
   16a36:	d101      	bne.n	16a3c <vPortExitCritical+0x10>
   16a38:	b672      	cpsid	i
   16a3a:	e7fe      	b.n	16a3a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   16a3c:	4b06      	ldr	r3, [pc, #24]	; (16a58 <vPortExitCritical+0x2c>)
   16a3e:	681b      	ldr	r3, [r3, #0]
   16a40:	1e5a      	subs	r2, r3, #1
   16a42:	4b05      	ldr	r3, [pc, #20]	; (16a58 <vPortExitCritical+0x2c>)
   16a44:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   16a46:	4b04      	ldr	r3, [pc, #16]	; (16a58 <vPortExitCritical+0x2c>)
   16a48:	681b      	ldr	r3, [r3, #0]
   16a4a:	2b00      	cmp	r3, #0
   16a4c:	d100      	bne.n	16a50 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   16a4e:	b662      	cpsie	i
    }
}
   16a50:	46c0      	nop			; (mov r8, r8)
   16a52:	46bd      	mov	sp, r7
   16a54:	bd80      	pop	{r7, pc}
   16a56:	46c0      	nop			; (mov r8, r8)
   16a58:	200000b8 	.word	0x200000b8

00016a5c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   16a5c:	f3ef 8010 	mrs	r0, PRIMASK
   16a60:	b672      	cpsid	i
   16a62:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   16a64:	46c0      	nop			; (mov r8, r8)
   16a66:	0018      	movs	r0, r3

00016a68 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   16a68:	f380 8810 	msr	PRIMASK, r0
   16a6c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   16a6e:	46c0      	nop			; (mov r8, r8)

00016a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   16a70:	f3ef 8009 	mrs	r0, PSP
   16a74:	4b0e      	ldr	r3, [pc, #56]	; (16ab0 <pxCurrentTCBConst>)
   16a76:	681a      	ldr	r2, [r3, #0]
   16a78:	3820      	subs	r0, #32
   16a7a:	6010      	str	r0, [r2, #0]
   16a7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   16a7e:	4644      	mov	r4, r8
   16a80:	464d      	mov	r5, r9
   16a82:	4656      	mov	r6, sl
   16a84:	465f      	mov	r7, fp
   16a86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   16a88:	b508      	push	{r3, lr}
   16a8a:	b672      	cpsid	i
   16a8c:	f002 fae4 	bl	19058 <vTaskSwitchContext>
   16a90:	b662      	cpsie	i
   16a92:	bc0c      	pop	{r2, r3}
   16a94:	6811      	ldr	r1, [r2, #0]
   16a96:	6808      	ldr	r0, [r1, #0]
   16a98:	3010      	adds	r0, #16
   16a9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   16a9c:	46a0      	mov	r8, r4
   16a9e:	46a9      	mov	r9, r5
   16aa0:	46b2      	mov	sl, r6
   16aa2:	46bb      	mov	fp, r7
   16aa4:	f380 8809 	msr	PSP, r0
   16aa8:	3820      	subs	r0, #32
   16aaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   16aac:	4718      	bx	r3
   16aae:	46c0      	nop			; (mov r8, r8)

00016ab0 <pxCurrentTCBConst>:
   16ab0:	20003b54 	.word	0x20003b54
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   16ab4:	46c0      	nop			; (mov r8, r8)
   16ab6:	46c0      	nop			; (mov r8, r8)

00016ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   16ab8:	b580      	push	{r7, lr}
   16aba:	b082      	sub	sp, #8
   16abc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   16abe:	4b0a      	ldr	r3, [pc, #40]	; (16ae8 <SysTick_Handler+0x30>)
   16ac0:	4798      	blx	r3
   16ac2:	0003      	movs	r3, r0
   16ac4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   16ac6:	4b09      	ldr	r3, [pc, #36]	; (16aec <SysTick_Handler+0x34>)
   16ac8:	4798      	blx	r3
   16aca:	1e03      	subs	r3, r0, #0
   16acc:	d003      	beq.n	16ad6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   16ace:	4b08      	ldr	r3, [pc, #32]	; (16af0 <SysTick_Handler+0x38>)
   16ad0:	2280      	movs	r2, #128	; 0x80
   16ad2:	0552      	lsls	r2, r2, #21
   16ad4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   16ad6:	687b      	ldr	r3, [r7, #4]
   16ad8:	0018      	movs	r0, r3
   16ada:	4b06      	ldr	r3, [pc, #24]	; (16af4 <SysTick_Handler+0x3c>)
   16adc:	4798      	blx	r3
}
   16ade:	46c0      	nop			; (mov r8, r8)
   16ae0:	46bd      	mov	sp, r7
   16ae2:	b002      	add	sp, #8
   16ae4:	bd80      	pop	{r7, pc}
   16ae6:	46c0      	nop			; (mov r8, r8)
   16ae8:	00016a5d 	.word	0x00016a5d
   16aec:	00018e69 	.word	0x00018e69
   16af0:	e000ed04 	.word	0xe000ed04
   16af4:	00016a69 	.word	0x00016a69

00016af8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   16af8:	b5b0      	push	{r4, r5, r7, lr}
   16afa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   16afc:	4b0b      	ldr	r3, [pc, #44]	; (16b2c <prvSetupTimerInterrupt+0x34>)
   16afe:	2200      	movs	r2, #0
   16b00:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   16b02:	4b0b      	ldr	r3, [pc, #44]	; (16b30 <prvSetupTimerInterrupt+0x38>)
   16b04:	2200      	movs	r2, #0
   16b06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   16b08:	4c0a      	ldr	r4, [pc, #40]	; (16b34 <prvSetupTimerInterrupt+0x3c>)
   16b0a:	2000      	movs	r0, #0
   16b0c:	4b0a      	ldr	r3, [pc, #40]	; (16b38 <prvSetupTimerInterrupt+0x40>)
   16b0e:	4798      	blx	r3
   16b10:	4b0a      	ldr	r3, [pc, #40]	; (16b3c <prvSetupTimerInterrupt+0x44>)
   16b12:	22fa      	movs	r2, #250	; 0xfa
   16b14:	0091      	lsls	r1, r2, #2
   16b16:	4798      	blx	r3
   16b18:	0003      	movs	r3, r0
   16b1a:	3b01      	subs	r3, #1
   16b1c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   16b1e:	4b03      	ldr	r3, [pc, #12]	; (16b2c <prvSetupTimerInterrupt+0x34>)
   16b20:	2207      	movs	r2, #7
   16b22:	601a      	str	r2, [r3, #0]
}
   16b24:	46c0      	nop			; (mov r8, r8)
   16b26:	46bd      	mov	sp, r7
   16b28:	bdb0      	pop	{r4, r5, r7, pc}
   16b2a:	46c0      	nop			; (mov r8, r8)
   16b2c:	e000e010 	.word	0xe000e010
   16b30:	e000e018 	.word	0xe000e018
   16b34:	e000e014 	.word	0xe000e014
   16b38:	000268b5 	.word	0x000268b5
   16b3c:	0002fded 	.word	0x0002fded

00016b40 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   16b40:	b580      	push	{r7, lr}
   16b42:	b084      	sub	sp, #16
   16b44:	af00      	add	r7, sp, #0
   16b46:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   16b48:	2300      	movs	r3, #0
   16b4a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   16b4c:	687b      	ldr	r3, [r7, #4]
   16b4e:	2207      	movs	r2, #7
   16b50:	4013      	ands	r3, r2
   16b52:	d004      	beq.n	16b5e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   16b54:	687b      	ldr	r3, [r7, #4]
   16b56:	2207      	movs	r2, #7
   16b58:	4393      	bics	r3, r2
   16b5a:	3308      	adds	r3, #8
   16b5c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   16b5e:	4b21      	ldr	r3, [pc, #132]	; (16be4 <pvPortMalloc+0xa4>)
   16b60:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   16b62:	4b21      	ldr	r3, [pc, #132]	; (16be8 <pvPortMalloc+0xa8>)
   16b64:	681b      	ldr	r3, [r3, #0]
   16b66:	2b00      	cmp	r3, #0
   16b68:	d105      	bne.n	16b76 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   16b6a:	4b20      	ldr	r3, [pc, #128]	; (16bec <pvPortMalloc+0xac>)
   16b6c:	2207      	movs	r2, #7
   16b6e:	4393      	bics	r3, r2
   16b70:	001a      	movs	r2, r3
   16b72:	4b1d      	ldr	r3, [pc, #116]	; (16be8 <pvPortMalloc+0xa8>)
   16b74:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   16b76:	4b1e      	ldr	r3, [pc, #120]	; (16bf0 <pvPortMalloc+0xb0>)
   16b78:	681a      	ldr	r2, [r3, #0]
   16b7a:	687b      	ldr	r3, [r7, #4]
   16b7c:	18d3      	adds	r3, r2, r3
   16b7e:	4a1d      	ldr	r2, [pc, #116]	; (16bf4 <pvPortMalloc+0xb4>)
   16b80:	4293      	cmp	r3, r2
   16b82:	d813      	bhi.n	16bac <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   16b84:	4b1a      	ldr	r3, [pc, #104]	; (16bf0 <pvPortMalloc+0xb0>)
   16b86:	681a      	ldr	r2, [r3, #0]
   16b88:	687b      	ldr	r3, [r7, #4]
   16b8a:	18d2      	adds	r2, r2, r3
   16b8c:	4b18      	ldr	r3, [pc, #96]	; (16bf0 <pvPortMalloc+0xb0>)
   16b8e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   16b90:	429a      	cmp	r2, r3
   16b92:	d90b      	bls.n	16bac <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   16b94:	4b14      	ldr	r3, [pc, #80]	; (16be8 <pvPortMalloc+0xa8>)
   16b96:	681a      	ldr	r2, [r3, #0]
   16b98:	4b15      	ldr	r3, [pc, #84]	; (16bf0 <pvPortMalloc+0xb0>)
   16b9a:	681b      	ldr	r3, [r3, #0]
   16b9c:	18d3      	adds	r3, r2, r3
   16b9e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   16ba0:	4b13      	ldr	r3, [pc, #76]	; (16bf0 <pvPortMalloc+0xb0>)
   16ba2:	681a      	ldr	r2, [r3, #0]
   16ba4:	687b      	ldr	r3, [r7, #4]
   16ba6:	18d2      	adds	r2, r2, r3
   16ba8:	4b11      	ldr	r3, [pc, #68]	; (16bf0 <pvPortMalloc+0xb0>)
   16baa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   16bac:	68fb      	ldr	r3, [r7, #12]
   16bae:	2b00      	cmp	r3, #0
   16bb0:	d006      	beq.n	16bc0 <pvPortMalloc+0x80>
   16bb2:	68fb      	ldr	r3, [r7, #12]
   16bb4:	687a      	ldr	r2, [r7, #4]
   16bb6:	0019      	movs	r1, r3
   16bb8:	2094      	movs	r0, #148	; 0x94
   16bba:	4b0f      	ldr	r3, [pc, #60]	; (16bf8 <pvPortMalloc+0xb8>)
   16bbc:	4798      	blx	r3
   16bbe:	e005      	b.n	16bcc <pvPortMalloc+0x8c>
   16bc0:	68fb      	ldr	r3, [r7, #12]
   16bc2:	687a      	ldr	r2, [r7, #4]
   16bc4:	0019      	movs	r1, r3
   16bc6:	20e8      	movs	r0, #232	; 0xe8
   16bc8:	4b0b      	ldr	r3, [pc, #44]	; (16bf8 <pvPortMalloc+0xb8>)
   16bca:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   16bcc:	4b0b      	ldr	r3, [pc, #44]	; (16bfc <pvPortMalloc+0xbc>)
   16bce:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   16bd0:	68fb      	ldr	r3, [r7, #12]
   16bd2:	2b00      	cmp	r3, #0
   16bd4:	d101      	bne.n	16bda <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   16bd6:	4b0a      	ldr	r3, [pc, #40]	; (16c00 <pvPortMalloc+0xc0>)
   16bd8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   16bda:	68fb      	ldr	r3, [r7, #12]
}
   16bdc:	0018      	movs	r0, r3
   16bde:	46bd      	mov	sp, r7
   16be0:	b004      	add	sp, #16
   16be2:	bd80      	pop	{r7, pc}
   16be4:	00018cc5 	.word	0x00018cc5
   16be8:	20003b50 	.word	0x20003b50
   16bec:	20000c74 	.word	0x20000c74
   16bf0:	20003b4c 	.word	0x20003b4c
   16bf4:	00002ed7 	.word	0x00002ed7
   16bf8:	000152a9 	.word	0x000152a9
   16bfc:	00018cdd 	.word	0x00018cdd
   16c00:	0002fdbd 	.word	0x0002fdbd

00016c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   16c04:	b580      	push	{r7, lr}
   16c06:	b082      	sub	sp, #8
   16c08:	af00      	add	r7, sp, #0
   16c0a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   16c0c:	687b      	ldr	r3, [r7, #4]
   16c0e:	2b00      	cmp	r3, #0
   16c10:	d001      	beq.n	16c16 <vPortFree+0x12>
   16c12:	b672      	cpsid	i
   16c14:	e7fe      	b.n	16c14 <vPortFree+0x10>
}
   16c16:	46c0      	nop			; (mov r8, r8)
   16c18:	46bd      	mov	sp, r7
   16c1a:	b002      	add	sp, #8
   16c1c:	bd80      	pop	{r7, pc}
	...

00016c20 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   16c20:	b580      	push	{r7, lr}
   16c22:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   16c24:	4b03      	ldr	r3, [pc, #12]	; (16c34 <xPortGetFreeHeapSize+0x14>)
   16c26:	681b      	ldr	r3, [r3, #0]
   16c28:	4a03      	ldr	r2, [pc, #12]	; (16c38 <xPortGetFreeHeapSize+0x18>)
   16c2a:	1ad3      	subs	r3, r2, r3
}
   16c2c:	0018      	movs	r0, r3
   16c2e:	46bd      	mov	sp, r7
   16c30:	bd80      	pop	{r7, pc}
   16c32:	46c0      	nop			; (mov r8, r8)
   16c34:	20003b4c 	.word	0x20003b4c
   16c38:	00002ed8 	.word	0x00002ed8

00016c3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   16c3c:	b580      	push	{r7, lr}
   16c3e:	b084      	sub	sp, #16
   16c40:	af00      	add	r7, sp, #0
   16c42:	6078      	str	r0, [r7, #4]
   16c44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   16c46:	687b      	ldr	r3, [r7, #4]
   16c48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   16c4a:	68fb      	ldr	r3, [r7, #12]
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d101      	bne.n	16c54 <xQueueGenericReset+0x18>
   16c50:	b672      	cpsid	i
   16c52:	e7fe      	b.n	16c52 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   16c54:	4b23      	ldr	r3, [pc, #140]	; (16ce4 <xQueueGenericReset+0xa8>)
   16c56:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   16c58:	68fb      	ldr	r3, [r7, #12]
   16c5a:	681a      	ldr	r2, [r3, #0]
   16c5c:	68fb      	ldr	r3, [r7, #12]
   16c5e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   16c60:	68fb      	ldr	r3, [r7, #12]
   16c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16c64:	434b      	muls	r3, r1
   16c66:	18d2      	adds	r2, r2, r3
   16c68:	68fb      	ldr	r3, [r7, #12]
   16c6a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   16c6c:	68fb      	ldr	r3, [r7, #12]
   16c6e:	2200      	movs	r2, #0
   16c70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   16c72:	68fb      	ldr	r3, [r7, #12]
   16c74:	681a      	ldr	r2, [r3, #0]
   16c76:	68fb      	ldr	r3, [r7, #12]
   16c78:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   16c7a:	68fb      	ldr	r3, [r7, #12]
   16c7c:	681a      	ldr	r2, [r3, #0]
   16c7e:	68fb      	ldr	r3, [r7, #12]
   16c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16c82:	1e59      	subs	r1, r3, #1
   16c84:	68fb      	ldr	r3, [r7, #12]
   16c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16c88:	434b      	muls	r3, r1
   16c8a:	18d2      	adds	r2, r2, r3
   16c8c:	68fb      	ldr	r3, [r7, #12]
   16c8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   16c90:	68fb      	ldr	r3, [r7, #12]
   16c92:	2244      	movs	r2, #68	; 0x44
   16c94:	21ff      	movs	r1, #255	; 0xff
   16c96:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   16c98:	68fb      	ldr	r3, [r7, #12]
   16c9a:	2245      	movs	r2, #69	; 0x45
   16c9c:	21ff      	movs	r1, #255	; 0xff
   16c9e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   16ca0:	683b      	ldr	r3, [r7, #0]
   16ca2:	2b00      	cmp	r3, #0
   16ca4:	d10d      	bne.n	16cc2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16ca6:	68fb      	ldr	r3, [r7, #12]
   16ca8:	691b      	ldr	r3, [r3, #16]
   16caa:	2b00      	cmp	r3, #0
   16cac:	d013      	beq.n	16cd6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16cae:	68fb      	ldr	r3, [r7, #12]
   16cb0:	3310      	adds	r3, #16
   16cb2:	0018      	movs	r0, r3
   16cb4:	4b0c      	ldr	r3, [pc, #48]	; (16ce8 <xQueueGenericReset+0xac>)
   16cb6:	4798      	blx	r3
   16cb8:	1e03      	subs	r3, r0, #0
   16cba:	d00c      	beq.n	16cd6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   16cbc:	4b0b      	ldr	r3, [pc, #44]	; (16cec <xQueueGenericReset+0xb0>)
   16cbe:	4798      	blx	r3
   16cc0:	e009      	b.n	16cd6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   16cc2:	68fb      	ldr	r3, [r7, #12]
   16cc4:	3310      	adds	r3, #16
   16cc6:	0018      	movs	r0, r3
   16cc8:	4b09      	ldr	r3, [pc, #36]	; (16cf0 <xQueueGenericReset+0xb4>)
   16cca:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   16ccc:	68fb      	ldr	r3, [r7, #12]
   16cce:	3324      	adds	r3, #36	; 0x24
   16cd0:	0018      	movs	r0, r3
   16cd2:	4b07      	ldr	r3, [pc, #28]	; (16cf0 <xQueueGenericReset+0xb4>)
   16cd4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   16cd6:	4b07      	ldr	r3, [pc, #28]	; (16cf4 <xQueueGenericReset+0xb8>)
   16cd8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   16cda:	2301      	movs	r3, #1
}
   16cdc:	0018      	movs	r0, r3
   16cde:	46bd      	mov	sp, r7
   16ce0:	b004      	add	sp, #16
   16ce2:	bd80      	pop	{r7, pc}
   16ce4:	00016a09 	.word	0x00016a09
   16ce8:	0001929d 	.word	0x0001929d
   16cec:	000169f1 	.word	0x000169f1
   16cf0:	00016779 	.word	0x00016779
   16cf4:	00016a2d 	.word	0x00016a2d

00016cf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   16cf8:	b590      	push	{r4, r7, lr}
   16cfa:	b08b      	sub	sp, #44	; 0x2c
   16cfc:	af02      	add	r7, sp, #8
   16cfe:	60f8      	str	r0, [r7, #12]
   16d00:	60b9      	str	r1, [r7, #8]
   16d02:	1dfb      	adds	r3, r7, #7
   16d04:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   16d06:	68fb      	ldr	r3, [r7, #12]
   16d08:	2b00      	cmp	r3, #0
   16d0a:	d101      	bne.n	16d10 <xQueueGenericCreate+0x18>
   16d0c:	b672      	cpsid	i
   16d0e:	e7fe      	b.n	16d0e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   16d10:	68bb      	ldr	r3, [r7, #8]
   16d12:	2b00      	cmp	r3, #0
   16d14:	d102      	bne.n	16d1c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   16d16:	2300      	movs	r3, #0
   16d18:	61fb      	str	r3, [r7, #28]
   16d1a:	e003      	b.n	16d24 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16d1c:	68fb      	ldr	r3, [r7, #12]
   16d1e:	68ba      	ldr	r2, [r7, #8]
   16d20:	4353      	muls	r3, r2
   16d22:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   16d24:	69fb      	ldr	r3, [r7, #28]
   16d26:	3354      	adds	r3, #84	; 0x54
   16d28:	0018      	movs	r0, r3
   16d2a:	4b19      	ldr	r3, [pc, #100]	; (16d90 <xQueueGenericCreate+0x98>)
   16d2c:	4798      	blx	r3
   16d2e:	0003      	movs	r3, r0
   16d30:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   16d32:	69bb      	ldr	r3, [r7, #24]
   16d34:	2b00      	cmp	r3, #0
   16d36:	d00d      	beq.n	16d54 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   16d38:	69bb      	ldr	r3, [r7, #24]
   16d3a:	3354      	adds	r3, #84	; 0x54
   16d3c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   16d3e:	1dfb      	adds	r3, r7, #7
   16d40:	781c      	ldrb	r4, [r3, #0]
   16d42:	697a      	ldr	r2, [r7, #20]
   16d44:	68b9      	ldr	r1, [r7, #8]
   16d46:	68f8      	ldr	r0, [r7, #12]
   16d48:	69bb      	ldr	r3, [r7, #24]
   16d4a:	9300      	str	r3, [sp, #0]
   16d4c:	0023      	movs	r3, r4
   16d4e:	4c11      	ldr	r4, [pc, #68]	; (16d94 <xQueueGenericCreate+0x9c>)
   16d50:	47a0      	blx	r4
   16d52:	e017      	b.n	16d84 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   16d54:	4b10      	ldr	r3, [pc, #64]	; (16d98 <xQueueGenericCreate+0xa0>)
   16d56:	4798      	blx	r3
   16d58:	0003      	movs	r3, r0
   16d5a:	0018      	movs	r0, r3
   16d5c:	4b0f      	ldr	r3, [pc, #60]	; (16d9c <xQueueGenericCreate+0xa4>)
   16d5e:	4798      	blx	r3
   16d60:	0003      	movs	r3, r0
   16d62:	001a      	movs	r2, r3
   16d64:	4b0e      	ldr	r3, [pc, #56]	; (16da0 <xQueueGenericCreate+0xa8>)
   16d66:	881b      	ldrh	r3, [r3, #0]
   16d68:	4013      	ands	r3, r2
   16d6a:	b29b      	uxth	r3, r3
   16d6c:	2b00      	cmp	r3, #0
   16d6e:	d009      	beq.n	16d84 <xQueueGenericCreate+0x8c>
   16d70:	1dfb      	adds	r3, r7, #7
   16d72:	781b      	ldrb	r3, [r3, #0]
   16d74:	4a0b      	ldr	r2, [pc, #44]	; (16da4 <xQueueGenericCreate+0xac>)
   16d76:	5cd3      	ldrb	r3, [r2, r3]
   16d78:	3340      	adds	r3, #64	; 0x40
   16d7a:	b2db      	uxtb	r3, r3
   16d7c:	2100      	movs	r1, #0
   16d7e:	0018      	movs	r0, r3
   16d80:	4b09      	ldr	r3, [pc, #36]	; (16da8 <xQueueGenericCreate+0xb0>)
   16d82:	4798      	blx	r3
		}

		return pxNewQueue;
   16d84:	69bb      	ldr	r3, [r7, #24]
	}
   16d86:	0018      	movs	r0, r3
   16d88:	46bd      	mov	sp, r7
   16d8a:	b009      	add	sp, #36	; 0x24
   16d8c:	bd90      	pop	{r4, r7, pc}
   16d8e:	46c0      	nop			; (mov r8, r8)
   16d90:	00016b41 	.word	0x00016b41
   16d94:	00016dad 	.word	0x00016dad
   16d98:	00014c9d 	.word	0x00014c9d
   16d9c:	00014a01 	.word	0x00014a01
   16da0:	200000b4 	.word	0x200000b4
   16da4:	200000a8 	.word	0x200000a8
   16da8:	00015701 	.word	0x00015701

00016dac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   16dac:	b5b0      	push	{r4, r5, r7, lr}
   16dae:	b084      	sub	sp, #16
   16db0:	af00      	add	r7, sp, #0
   16db2:	60f8      	str	r0, [r7, #12]
   16db4:	60b9      	str	r1, [r7, #8]
   16db6:	607a      	str	r2, [r7, #4]
   16db8:	001a      	movs	r2, r3
   16dba:	1cfb      	adds	r3, r7, #3
   16dbc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   16dbe:	68bb      	ldr	r3, [r7, #8]
   16dc0:	2b00      	cmp	r3, #0
   16dc2:	d103      	bne.n	16dcc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   16dc4:	6a3b      	ldr	r3, [r7, #32]
   16dc6:	6a3a      	ldr	r2, [r7, #32]
   16dc8:	601a      	str	r2, [r3, #0]
   16dca:	e002      	b.n	16dd2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   16dcc:	6a3b      	ldr	r3, [r7, #32]
   16dce:	687a      	ldr	r2, [r7, #4]
   16dd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   16dd2:	6a3b      	ldr	r3, [r7, #32]
   16dd4:	68fa      	ldr	r2, [r7, #12]
   16dd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   16dd8:	6a3b      	ldr	r3, [r7, #32]
   16dda:	68ba      	ldr	r2, [r7, #8]
   16ddc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   16dde:	6a3b      	ldr	r3, [r7, #32]
   16de0:	2101      	movs	r1, #1
   16de2:	0018      	movs	r0, r3
   16de4:	4b41      	ldr	r3, [pc, #260]	; (16eec <prvInitialiseNewQueue+0x140>)
   16de6:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   16de8:	6a3b      	ldr	r3, [r7, #32]
   16dea:	1cfa      	adds	r2, r7, #3
   16dec:	2150      	movs	r1, #80	; 0x50
   16dee:	7812      	ldrb	r2, [r2, #0]
   16df0:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   16df2:	6a3b      	ldr	r3, [r7, #32]
   16df4:	2200      	movs	r2, #0
   16df6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   16df8:	6a3b      	ldr	r3, [r7, #32]
   16dfa:	0018      	movs	r0, r3
   16dfc:	4b3c      	ldr	r3, [pc, #240]	; (16ef0 <prvInitialiseNewQueue+0x144>)
   16dfe:	4798      	blx	r3
   16e00:	0003      	movs	r3, r0
   16e02:	001a      	movs	r2, r3
   16e04:	4b3b      	ldr	r3, [pc, #236]	; (16ef4 <prvInitialiseNewQueue+0x148>)
   16e06:	5c9b      	ldrb	r3, [r3, r2]
   16e08:	0018      	movs	r0, r3
   16e0a:	4b3b      	ldr	r3, [pc, #236]	; (16ef8 <prvInitialiseNewQueue+0x14c>)
   16e0c:	4798      	blx	r3
   16e0e:	0003      	movs	r3, r0
   16e10:	b29a      	uxth	r2, r3
   16e12:	6a3b      	ldr	r3, [r7, #32]
   16e14:	0011      	movs	r1, r2
   16e16:	0018      	movs	r0, r3
   16e18:	4b38      	ldr	r3, [pc, #224]	; (16efc <prvInitialiseNewQueue+0x150>)
   16e1a:	4798      	blx	r3
   16e1c:	4b38      	ldr	r3, [pc, #224]	; (16f00 <prvInitialiseNewQueue+0x154>)
   16e1e:	881a      	ldrh	r2, [r3, #0]
   16e20:	6a3b      	ldr	r3, [r7, #32]
   16e22:	0011      	movs	r1, r2
   16e24:	0018      	movs	r0, r3
   16e26:	4b37      	ldr	r3, [pc, #220]	; (16f04 <prvInitialiseNewQueue+0x158>)
   16e28:	4798      	blx	r3
   16e2a:	6a3b      	ldr	r3, [r7, #32]
   16e2c:	0018      	movs	r0, r3
   16e2e:	4b30      	ldr	r3, [pc, #192]	; (16ef0 <prvInitialiseNewQueue+0x144>)
   16e30:	4798      	blx	r3
   16e32:	0003      	movs	r3, r0
   16e34:	001a      	movs	r2, r3
   16e36:	4b2f      	ldr	r3, [pc, #188]	; (16ef4 <prvInitialiseNewQueue+0x148>)
   16e38:	5c9c      	ldrb	r4, [r3, r2]
   16e3a:	6a3b      	ldr	r3, [r7, #32]
   16e3c:	0018      	movs	r0, r3
   16e3e:	4b32      	ldr	r3, [pc, #200]	; (16f08 <prvInitialiseNewQueue+0x15c>)
   16e40:	4798      	blx	r3
   16e42:	0003      	movs	r3, r0
   16e44:	b2db      	uxtb	r3, r3
   16e46:	0019      	movs	r1, r3
   16e48:	0020      	movs	r0, r4
   16e4a:	4b30      	ldr	r3, [pc, #192]	; (16f0c <prvInitialiseNewQueue+0x160>)
   16e4c:	4798      	blx	r3
   16e4e:	4b30      	ldr	r3, [pc, #192]	; (16f10 <prvInitialiseNewQueue+0x164>)
   16e50:	4798      	blx	r3
   16e52:	0003      	movs	r3, r0
   16e54:	0018      	movs	r0, r3
   16e56:	4b2f      	ldr	r3, [pc, #188]	; (16f14 <prvInitialiseNewQueue+0x168>)
   16e58:	4798      	blx	r3
   16e5a:	0003      	movs	r3, r0
   16e5c:	001a      	movs	r2, r3
   16e5e:	4b2e      	ldr	r3, [pc, #184]	; (16f18 <prvInitialiseNewQueue+0x16c>)
   16e60:	881b      	ldrh	r3, [r3, #0]
   16e62:	4013      	ands	r3, r2
   16e64:	b29b      	uxth	r3, r3
   16e66:	2b00      	cmp	r3, #0
   16e68:	d029      	beq.n	16ebe <prvInitialiseNewQueue+0x112>
   16e6a:	6a3b      	ldr	r3, [r7, #32]
   16e6c:	0018      	movs	r0, r3
   16e6e:	4b2b      	ldr	r3, [pc, #172]	; (16f1c <prvInitialiseNewQueue+0x170>)
   16e70:	4798      	blx	r3
   16e72:	0003      	movs	r3, r0
   16e74:	001a      	movs	r2, r3
   16e76:	4b28      	ldr	r3, [pc, #160]	; (16f18 <prvInitialiseNewQueue+0x16c>)
   16e78:	881b      	ldrh	r3, [r3, #0]
   16e7a:	4013      	ands	r3, r2
   16e7c:	b29b      	uxth	r3, r3
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d01d      	beq.n	16ebe <prvInitialiseNewQueue+0x112>
   16e82:	6a3b      	ldr	r3, [r7, #32]
   16e84:	0018      	movs	r0, r3
   16e86:	4b1a      	ldr	r3, [pc, #104]	; (16ef0 <prvInitialiseNewQueue+0x144>)
   16e88:	4798      	blx	r3
   16e8a:	0003      	movs	r3, r0
   16e8c:	001a      	movs	r2, r3
   16e8e:	4b19      	ldr	r3, [pc, #100]	; (16ef4 <prvInitialiseNewQueue+0x148>)
   16e90:	5c9b      	ldrb	r3, [r3, r2]
   16e92:	3318      	adds	r3, #24
   16e94:	b2db      	uxtb	r3, r3
   16e96:	001d      	movs	r5, r3
   16e98:	6a3b      	ldr	r3, [r7, #32]
   16e9a:	0018      	movs	r0, r3
   16e9c:	4b14      	ldr	r3, [pc, #80]	; (16ef0 <prvInitialiseNewQueue+0x144>)
   16e9e:	4798      	blx	r3
   16ea0:	0003      	movs	r3, r0
   16ea2:	001a      	movs	r2, r3
   16ea4:	4b13      	ldr	r3, [pc, #76]	; (16ef4 <prvInitialiseNewQueue+0x148>)
   16ea6:	5c9c      	ldrb	r4, [r3, r2]
   16ea8:	6a3b      	ldr	r3, [r7, #32]
   16eaa:	0018      	movs	r0, r3
   16eac:	4b16      	ldr	r3, [pc, #88]	; (16f08 <prvInitialiseNewQueue+0x15c>)
   16eae:	4798      	blx	r3
   16eb0:	0003      	movs	r3, r0
   16eb2:	b2db      	uxtb	r3, r3
   16eb4:	001a      	movs	r2, r3
   16eb6:	0021      	movs	r1, r4
   16eb8:	0028      	movs	r0, r5
   16eba:	4b19      	ldr	r3, [pc, #100]	; (16f20 <prvInitialiseNewQueue+0x174>)
   16ebc:	4798      	blx	r3
   16ebe:	6a3b      	ldr	r3, [r7, #32]
   16ec0:	0018      	movs	r0, r3
   16ec2:	4b0b      	ldr	r3, [pc, #44]	; (16ef0 <prvInitialiseNewQueue+0x144>)
   16ec4:	4798      	blx	r3
   16ec6:	0003      	movs	r3, r0
   16ec8:	001a      	movs	r2, r3
   16eca:	4b0a      	ldr	r3, [pc, #40]	; (16ef4 <prvInitialiseNewQueue+0x148>)
   16ecc:	5c9c      	ldrb	r4, [r3, r2]
   16ece:	6a3b      	ldr	r3, [r7, #32]
   16ed0:	0018      	movs	r0, r3
   16ed2:	4b0d      	ldr	r3, [pc, #52]	; (16f08 <prvInitialiseNewQueue+0x15c>)
   16ed4:	4798      	blx	r3
   16ed6:	0003      	movs	r3, r0
   16ed8:	b2db      	uxtb	r3, r3
   16eda:	2200      	movs	r2, #0
   16edc:	0019      	movs	r1, r3
   16ede:	0020      	movs	r0, r4
   16ee0:	4b10      	ldr	r3, [pc, #64]	; (16f24 <prvInitialiseNewQueue+0x178>)
   16ee2:	4798      	blx	r3
}
   16ee4:	46c0      	nop			; (mov r8, r8)
   16ee6:	46bd      	mov	sp, r7
   16ee8:	b004      	add	sp, #16
   16eea:	bdb0      	pop	{r4, r5, r7, pc}
   16eec:	00016c3d 	.word	0x00016c3d
   16ef0:	000149c1 	.word	0x000149c1
   16ef4:	200000a8 	.word	0x200000a8
   16ef8:	00015f81 	.word	0x00015f81
   16efc:	00014ae5 	.word	0x00014ae5
   16f00:	200000b6 	.word	0x200000b6
   16f04:	00014b21 	.word	0x00014b21
   16f08:	00014aa1 	.word	0x00014aa1
   16f0c:	00016119 	.word	0x00016119
   16f10:	00014c9d 	.word	0x00014c9d
   16f14:	00014a01 	.word	0x00014a01
   16f18:	200000b4 	.word	0x200000b4
   16f1c:	00014ac1 	.word	0x00014ac1
   16f20:	000153f9 	.word	0x000153f9
   16f24:	00015a55 	.word	0x00015a55

00016f28 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   16f28:	b590      	push	{r4, r7, lr}
   16f2a:	b083      	sub	sp, #12
   16f2c:	af00      	add	r7, sp, #0
   16f2e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   16f30:	687b      	ldr	r3, [r7, #4]
   16f32:	2b00      	cmp	r3, #0
   16f34:	d00e      	beq.n	16f54 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   16f36:	687b      	ldr	r3, [r7, #4]
   16f38:	2200      	movs	r2, #0
   16f3a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   16f3c:	687b      	ldr	r3, [r7, #4]
   16f3e:	2200      	movs	r2, #0
   16f40:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   16f42:	687b      	ldr	r3, [r7, #4]
   16f44:	2200      	movs	r2, #0
   16f46:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   16f48:	6878      	ldr	r0, [r7, #4]
   16f4a:	2300      	movs	r3, #0
   16f4c:	2200      	movs	r2, #0
   16f4e:	2100      	movs	r1, #0
   16f50:	4c02      	ldr	r4, [pc, #8]	; (16f5c <prvInitialiseMutex+0x34>)
   16f52:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   16f54:	46c0      	nop			; (mov r8, r8)
   16f56:	46bd      	mov	sp, r7
   16f58:	b003      	add	sp, #12
   16f5a:	bd90      	pop	{r4, r7, pc}
   16f5c:	00016fa1 	.word	0x00016fa1

00016f60 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   16f60:	b580      	push	{r7, lr}
   16f62:	b086      	sub	sp, #24
   16f64:	af00      	add	r7, sp, #0
   16f66:	0002      	movs	r2, r0
   16f68:	1dfb      	adds	r3, r7, #7
   16f6a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   16f6c:	2301      	movs	r3, #1
   16f6e:	617b      	str	r3, [r7, #20]
   16f70:	2300      	movs	r3, #0
   16f72:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   16f74:	1dfb      	adds	r3, r7, #7
   16f76:	781a      	ldrb	r2, [r3, #0]
   16f78:	6939      	ldr	r1, [r7, #16]
   16f7a:	697b      	ldr	r3, [r7, #20]
   16f7c:	0018      	movs	r0, r3
   16f7e:	4b06      	ldr	r3, [pc, #24]	; (16f98 <xQueueCreateMutex+0x38>)
   16f80:	4798      	blx	r3
   16f82:	0003      	movs	r3, r0
   16f84:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   16f86:	68fb      	ldr	r3, [r7, #12]
   16f88:	0018      	movs	r0, r3
   16f8a:	4b04      	ldr	r3, [pc, #16]	; (16f9c <xQueueCreateMutex+0x3c>)
   16f8c:	4798      	blx	r3

		return pxNewQueue;
   16f8e:	68fb      	ldr	r3, [r7, #12]
	}
   16f90:	0018      	movs	r0, r3
   16f92:	46bd      	mov	sp, r7
   16f94:	b006      	add	sp, #24
   16f96:	bd80      	pop	{r7, pc}
   16f98:	00016cf9 	.word	0x00016cf9
   16f9c:	00016f29 	.word	0x00016f29

00016fa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   16fa0:	b5b0      	push	{r4, r5, r7, lr}
   16fa2:	b08a      	sub	sp, #40	; 0x28
   16fa4:	af00      	add	r7, sp, #0
   16fa6:	60f8      	str	r0, [r7, #12]
   16fa8:	60b9      	str	r1, [r7, #8]
   16faa:	607a      	str	r2, [r7, #4]
   16fac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   16fae:	2300      	movs	r3, #0
   16fb0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   16fb2:	68fb      	ldr	r3, [r7, #12]
   16fb4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   16fb6:	6a3b      	ldr	r3, [r7, #32]
   16fb8:	2b00      	cmp	r3, #0
   16fba:	d101      	bne.n	16fc0 <xQueueGenericSend+0x20>
   16fbc:	b672      	cpsid	i
   16fbe:	e7fe      	b.n	16fbe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16fc0:	68bb      	ldr	r3, [r7, #8]
   16fc2:	2b00      	cmp	r3, #0
   16fc4:	d103      	bne.n	16fce <xQueueGenericSend+0x2e>
   16fc6:	6a3b      	ldr	r3, [r7, #32]
   16fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16fca:	2b00      	cmp	r3, #0
   16fcc:	d101      	bne.n	16fd2 <xQueueGenericSend+0x32>
   16fce:	2301      	movs	r3, #1
   16fd0:	e000      	b.n	16fd4 <xQueueGenericSend+0x34>
   16fd2:	2300      	movs	r3, #0
   16fd4:	2b00      	cmp	r3, #0
   16fd6:	d101      	bne.n	16fdc <xQueueGenericSend+0x3c>
   16fd8:	b672      	cpsid	i
   16fda:	e7fe      	b.n	16fda <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16fdc:	683b      	ldr	r3, [r7, #0]
   16fde:	2b02      	cmp	r3, #2
   16fe0:	d103      	bne.n	16fea <xQueueGenericSend+0x4a>
   16fe2:	6a3b      	ldr	r3, [r7, #32]
   16fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16fe6:	2b01      	cmp	r3, #1
   16fe8:	d101      	bne.n	16fee <xQueueGenericSend+0x4e>
   16fea:	2301      	movs	r3, #1
   16fec:	e000      	b.n	16ff0 <xQueueGenericSend+0x50>
   16fee:	2300      	movs	r3, #0
   16ff0:	2b00      	cmp	r3, #0
   16ff2:	d101      	bne.n	16ff8 <xQueueGenericSend+0x58>
   16ff4:	b672      	cpsid	i
   16ff6:	e7fe      	b.n	16ff6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   16ff8:	4bbc      	ldr	r3, [pc, #752]	; (172ec <xQueueGenericSend+0x34c>)
   16ffa:	4798      	blx	r3
   16ffc:	1e03      	subs	r3, r0, #0
   16ffe:	d102      	bne.n	17006 <xQueueGenericSend+0x66>
   17000:	687b      	ldr	r3, [r7, #4]
   17002:	2b00      	cmp	r3, #0
   17004:	d101      	bne.n	1700a <xQueueGenericSend+0x6a>
   17006:	2301      	movs	r3, #1
   17008:	e000      	b.n	1700c <xQueueGenericSend+0x6c>
   1700a:	2300      	movs	r3, #0
   1700c:	2b00      	cmp	r3, #0
   1700e:	d101      	bne.n	17014 <xQueueGenericSend+0x74>
   17010:	b672      	cpsid	i
   17012:	e7fe      	b.n	17012 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   17014:	4bb6      	ldr	r3, [pc, #728]	; (172f0 <xQueueGenericSend+0x350>)
   17016:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   17018:	6a3b      	ldr	r3, [r7, #32]
   1701a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1701c:	6a3b      	ldr	r3, [r7, #32]
   1701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17020:	429a      	cmp	r2, r3
   17022:	d303      	bcc.n	1702c <xQueueGenericSend+0x8c>
   17024:	683b      	ldr	r3, [r7, #0]
   17026:	2b02      	cmp	r3, #2
   17028:	d000      	beq.n	1702c <xQueueGenericSend+0x8c>
   1702a:	e08e      	b.n	1714a <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1702c:	4bb1      	ldr	r3, [pc, #708]	; (172f4 <xQueueGenericSend+0x354>)
   1702e:	4798      	blx	r3
   17030:	0003      	movs	r3, r0
   17032:	0018      	movs	r0, r3
   17034:	4bb0      	ldr	r3, [pc, #704]	; (172f8 <xQueueGenericSend+0x358>)
   17036:	4798      	blx	r3
   17038:	0003      	movs	r3, r0
   1703a:	001a      	movs	r2, r3
   1703c:	4baf      	ldr	r3, [pc, #700]	; (172fc <xQueueGenericSend+0x35c>)
   1703e:	881b      	ldrh	r3, [r3, #0]
   17040:	4013      	ands	r3, r2
   17042:	b29b      	uxth	r3, r3
   17044:	2b00      	cmp	r3, #0
   17046:	d02e      	beq.n	170a6 <xQueueGenericSend+0x106>
   17048:	6a3b      	ldr	r3, [r7, #32]
   1704a:	0018      	movs	r0, r3
   1704c:	4bac      	ldr	r3, [pc, #688]	; (17300 <xQueueGenericSend+0x360>)
   1704e:	4798      	blx	r3
   17050:	0003      	movs	r3, r0
   17052:	001a      	movs	r2, r3
   17054:	4ba9      	ldr	r3, [pc, #676]	; (172fc <xQueueGenericSend+0x35c>)
   17056:	881b      	ldrh	r3, [r3, #0]
   17058:	4013      	ands	r3, r2
   1705a:	b29b      	uxth	r3, r3
   1705c:	2b00      	cmp	r3, #0
   1705e:	d022      	beq.n	170a6 <xQueueGenericSend+0x106>
   17060:	683b      	ldr	r3, [r7, #0]
   17062:	2b00      	cmp	r3, #0
   17064:	d10b      	bne.n	1707e <xQueueGenericSend+0xde>
   17066:	6a3b      	ldr	r3, [r7, #32]
   17068:	0018      	movs	r0, r3
   1706a:	4ba6      	ldr	r3, [pc, #664]	; (17304 <xQueueGenericSend+0x364>)
   1706c:	4798      	blx	r3
   1706e:	0003      	movs	r3, r0
   17070:	001a      	movs	r2, r3
   17072:	4ba5      	ldr	r3, [pc, #660]	; (17308 <xQueueGenericSend+0x368>)
   17074:	5c9b      	ldrb	r3, [r3, r2]
   17076:	3320      	adds	r3, #32
   17078:	b2db      	uxtb	r3, r3
   1707a:	001d      	movs	r5, r3
   1707c:	e000      	b.n	17080 <xQueueGenericSend+0xe0>
   1707e:	2525      	movs	r5, #37	; 0x25
   17080:	6a3b      	ldr	r3, [r7, #32]
   17082:	0018      	movs	r0, r3
   17084:	4b9f      	ldr	r3, [pc, #636]	; (17304 <xQueueGenericSend+0x364>)
   17086:	4798      	blx	r3
   17088:	0003      	movs	r3, r0
   1708a:	001a      	movs	r2, r3
   1708c:	4b9e      	ldr	r3, [pc, #632]	; (17308 <xQueueGenericSend+0x368>)
   1708e:	5c9c      	ldrb	r4, [r3, r2]
   17090:	6a3b      	ldr	r3, [r7, #32]
   17092:	0018      	movs	r0, r3
   17094:	4b9d      	ldr	r3, [pc, #628]	; (1730c <xQueueGenericSend+0x36c>)
   17096:	4798      	blx	r3
   17098:	0003      	movs	r3, r0
   1709a:	b2db      	uxtb	r3, r3
   1709c:	001a      	movs	r2, r3
   1709e:	0021      	movs	r1, r4
   170a0:	0028      	movs	r0, r5
   170a2:	4b9b      	ldr	r3, [pc, #620]	; (17310 <xQueueGenericSend+0x370>)
   170a4:	4798      	blx	r3
   170a6:	6a3b      	ldr	r3, [r7, #32]
   170a8:	0018      	movs	r0, r3
   170aa:	4b96      	ldr	r3, [pc, #600]	; (17304 <xQueueGenericSend+0x364>)
   170ac:	4798      	blx	r3
   170ae:	0003      	movs	r3, r0
   170b0:	001a      	movs	r2, r3
   170b2:	4b95      	ldr	r3, [pc, #596]	; (17308 <xQueueGenericSend+0x368>)
   170b4:	5c9c      	ldrb	r4, [r3, r2]
   170b6:	6a3b      	ldr	r3, [r7, #32]
   170b8:	0018      	movs	r0, r3
   170ba:	4b94      	ldr	r3, [pc, #592]	; (1730c <xQueueGenericSend+0x36c>)
   170bc:	4798      	blx	r3
   170be:	0003      	movs	r3, r0
   170c0:	b2dd      	uxtb	r5, r3
   170c2:	6a3b      	ldr	r3, [r7, #32]
   170c4:	0018      	movs	r0, r3
   170c6:	4b8f      	ldr	r3, [pc, #572]	; (17304 <xQueueGenericSend+0x364>)
   170c8:	4798      	blx	r3
   170ca:	0003      	movs	r3, r0
   170cc:	001a      	movs	r2, r3
   170ce:	4b8e      	ldr	r3, [pc, #568]	; (17308 <xQueueGenericSend+0x368>)
   170d0:	5c9b      	ldrb	r3, [r3, r2]
   170d2:	2b02      	cmp	r3, #2
   170d4:	d005      	beq.n	170e2 <xQueueGenericSend+0x142>
   170d6:	6a3b      	ldr	r3, [r7, #32]
   170d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   170da:	b2db      	uxtb	r3, r3
   170dc:	3301      	adds	r3, #1
   170de:	b2db      	uxtb	r3, r3
   170e0:	e000      	b.n	170e4 <xQueueGenericSend+0x144>
   170e2:	2300      	movs	r3, #0
   170e4:	001a      	movs	r2, r3
   170e6:	0029      	movs	r1, r5
   170e8:	0020      	movs	r0, r4
   170ea:	4b8a      	ldr	r3, [pc, #552]	; (17314 <xQueueGenericSend+0x374>)
   170ec:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   170ee:	683a      	ldr	r2, [r7, #0]
   170f0:	68b9      	ldr	r1, [r7, #8]
   170f2:	6a3b      	ldr	r3, [r7, #32]
   170f4:	0018      	movs	r0, r3
   170f6:	4b88      	ldr	r3, [pc, #544]	; (17318 <xQueueGenericSend+0x378>)
   170f8:	4798      	blx	r3
   170fa:	0003      	movs	r3, r0
   170fc:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   170fe:	6a3b      	ldr	r3, [r7, #32]
   17100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   17102:	2b00      	cmp	r3, #0
   17104:	d00a      	beq.n	1711c <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   17106:	683a      	ldr	r2, [r7, #0]
   17108:	6a3b      	ldr	r3, [r7, #32]
   1710a:	0011      	movs	r1, r2
   1710c:	0018      	movs	r0, r3
   1710e:	4b83      	ldr	r3, [pc, #524]	; (1731c <xQueueGenericSend+0x37c>)
   17110:	4798      	blx	r3
   17112:	1e03      	subs	r3, r0, #0
   17114:	d015      	beq.n	17142 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   17116:	4b82      	ldr	r3, [pc, #520]	; (17320 <xQueueGenericSend+0x380>)
   17118:	4798      	blx	r3
   1711a:	e012      	b.n	17142 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1711c:	6a3b      	ldr	r3, [r7, #32]
   1711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17120:	2b00      	cmp	r3, #0
   17122:	d009      	beq.n	17138 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   17124:	6a3b      	ldr	r3, [r7, #32]
   17126:	3324      	adds	r3, #36	; 0x24
   17128:	0018      	movs	r0, r3
   1712a:	4b7e      	ldr	r3, [pc, #504]	; (17324 <xQueueGenericSend+0x384>)
   1712c:	4798      	blx	r3
   1712e:	1e03      	subs	r3, r0, #0
   17130:	d007      	beq.n	17142 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   17132:	4b7b      	ldr	r3, [pc, #492]	; (17320 <xQueueGenericSend+0x380>)
   17134:	4798      	blx	r3
   17136:	e004      	b.n	17142 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   17138:	69fb      	ldr	r3, [r7, #28]
   1713a:	2b00      	cmp	r3, #0
   1713c:	d001      	beq.n	17142 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1713e:	4b78      	ldr	r3, [pc, #480]	; (17320 <xQueueGenericSend+0x380>)
   17140:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   17142:	4b79      	ldr	r3, [pc, #484]	; (17328 <xQueueGenericSend+0x388>)
   17144:	4798      	blx	r3
				return pdPASS;
   17146:	2301      	movs	r3, #1
   17148:	e142      	b.n	173d0 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1714a:	687b      	ldr	r3, [r7, #4]
   1714c:	2b00      	cmp	r3, #0
   1714e:	d140      	bne.n	171d2 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   17150:	4b75      	ldr	r3, [pc, #468]	; (17328 <xQueueGenericSend+0x388>)
   17152:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   17154:	4b67      	ldr	r3, [pc, #412]	; (172f4 <xQueueGenericSend+0x354>)
   17156:	4798      	blx	r3
   17158:	0003      	movs	r3, r0
   1715a:	0018      	movs	r0, r3
   1715c:	4b66      	ldr	r3, [pc, #408]	; (172f8 <xQueueGenericSend+0x358>)
   1715e:	4798      	blx	r3
   17160:	0003      	movs	r3, r0
   17162:	001a      	movs	r2, r3
   17164:	4b65      	ldr	r3, [pc, #404]	; (172fc <xQueueGenericSend+0x35c>)
   17166:	881b      	ldrh	r3, [r3, #0]
   17168:	4013      	ands	r3, r2
   1716a:	b29b      	uxth	r3, r3
   1716c:	2b00      	cmp	r3, #0
   1716e:	d02e      	beq.n	171ce <xQueueGenericSend+0x22e>
   17170:	6a3b      	ldr	r3, [r7, #32]
   17172:	0018      	movs	r0, r3
   17174:	4b62      	ldr	r3, [pc, #392]	; (17300 <xQueueGenericSend+0x360>)
   17176:	4798      	blx	r3
   17178:	0003      	movs	r3, r0
   1717a:	001a      	movs	r2, r3
   1717c:	4b5f      	ldr	r3, [pc, #380]	; (172fc <xQueueGenericSend+0x35c>)
   1717e:	881b      	ldrh	r3, [r3, #0]
   17180:	4013      	ands	r3, r2
   17182:	b29b      	uxth	r3, r3
   17184:	2b00      	cmp	r3, #0
   17186:	d022      	beq.n	171ce <xQueueGenericSend+0x22e>
   17188:	683b      	ldr	r3, [r7, #0]
   1718a:	2b00      	cmp	r3, #0
   1718c:	d10b      	bne.n	171a6 <xQueueGenericSend+0x206>
   1718e:	6a3b      	ldr	r3, [r7, #32]
   17190:	0018      	movs	r0, r3
   17192:	4b5c      	ldr	r3, [pc, #368]	; (17304 <xQueueGenericSend+0x364>)
   17194:	4798      	blx	r3
   17196:	0003      	movs	r3, r0
   17198:	001a      	movs	r2, r3
   1719a:	4b5b      	ldr	r3, [pc, #364]	; (17308 <xQueueGenericSend+0x368>)
   1719c:	5c9b      	ldrb	r3, [r3, r2]
   1719e:	3348      	adds	r3, #72	; 0x48
   171a0:	b2db      	uxtb	r3, r3
   171a2:	001d      	movs	r5, r3
   171a4:	e000      	b.n	171a8 <xQueueGenericSend+0x208>
   171a6:	254d      	movs	r5, #77	; 0x4d
   171a8:	6a3b      	ldr	r3, [r7, #32]
   171aa:	0018      	movs	r0, r3
   171ac:	4b55      	ldr	r3, [pc, #340]	; (17304 <xQueueGenericSend+0x364>)
   171ae:	4798      	blx	r3
   171b0:	0003      	movs	r3, r0
   171b2:	001a      	movs	r2, r3
   171b4:	4b54      	ldr	r3, [pc, #336]	; (17308 <xQueueGenericSend+0x368>)
   171b6:	5c9c      	ldrb	r4, [r3, r2]
   171b8:	6a3b      	ldr	r3, [r7, #32]
   171ba:	0018      	movs	r0, r3
   171bc:	4b53      	ldr	r3, [pc, #332]	; (1730c <xQueueGenericSend+0x36c>)
   171be:	4798      	blx	r3
   171c0:	0003      	movs	r3, r0
   171c2:	b2db      	uxtb	r3, r3
   171c4:	001a      	movs	r2, r3
   171c6:	0021      	movs	r1, r4
   171c8:	0028      	movs	r0, r5
   171ca:	4b51      	ldr	r3, [pc, #324]	; (17310 <xQueueGenericSend+0x370>)
   171cc:	4798      	blx	r3
					return errQUEUE_FULL;
   171ce:	2300      	movs	r3, #0
   171d0:	e0fe      	b.n	173d0 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   171d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   171d4:	2b00      	cmp	r3, #0
   171d6:	d106      	bne.n	171e6 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   171d8:	2314      	movs	r3, #20
   171da:	18fb      	adds	r3, r7, r3
   171dc:	0018      	movs	r0, r3
   171de:	4b53      	ldr	r3, [pc, #332]	; (1732c <xQueueGenericSend+0x38c>)
   171e0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   171e2:	2301      	movs	r3, #1
   171e4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   171e6:	4b50      	ldr	r3, [pc, #320]	; (17328 <xQueueGenericSend+0x388>)
   171e8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   171ea:	4b51      	ldr	r3, [pc, #324]	; (17330 <xQueueGenericSend+0x390>)
   171ec:	4798      	blx	r3
		prvLockQueue( pxQueue );
   171ee:	4b40      	ldr	r3, [pc, #256]	; (172f0 <xQueueGenericSend+0x350>)
   171f0:	4798      	blx	r3
   171f2:	6a3b      	ldr	r3, [r7, #32]
   171f4:	2244      	movs	r2, #68	; 0x44
   171f6:	5c9b      	ldrb	r3, [r3, r2]
   171f8:	b25b      	sxtb	r3, r3
   171fa:	3301      	adds	r3, #1
   171fc:	d103      	bne.n	17206 <xQueueGenericSend+0x266>
   171fe:	6a3b      	ldr	r3, [r7, #32]
   17200:	2244      	movs	r2, #68	; 0x44
   17202:	2100      	movs	r1, #0
   17204:	5499      	strb	r1, [r3, r2]
   17206:	6a3b      	ldr	r3, [r7, #32]
   17208:	2245      	movs	r2, #69	; 0x45
   1720a:	5c9b      	ldrb	r3, [r3, r2]
   1720c:	b25b      	sxtb	r3, r3
   1720e:	3301      	adds	r3, #1
   17210:	d103      	bne.n	1721a <xQueueGenericSend+0x27a>
   17212:	6a3b      	ldr	r3, [r7, #32]
   17214:	2245      	movs	r2, #69	; 0x45
   17216:	2100      	movs	r1, #0
   17218:	5499      	strb	r1, [r3, r2]
   1721a:	4b43      	ldr	r3, [pc, #268]	; (17328 <xQueueGenericSend+0x388>)
   1721c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1721e:	1d3a      	adds	r2, r7, #4
   17220:	2314      	movs	r3, #20
   17222:	18fb      	adds	r3, r7, r3
   17224:	0011      	movs	r1, r2
   17226:	0018      	movs	r0, r3
   17228:	4b42      	ldr	r3, [pc, #264]	; (17334 <xQueueGenericSend+0x394>)
   1722a:	4798      	blx	r3
   1722c:	1e03      	subs	r3, r0, #0
   1722e:	d000      	beq.n	17232 <xQueueGenericSend+0x292>
   17230:	e08a      	b.n	17348 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   17232:	6a3b      	ldr	r3, [r7, #32]
   17234:	0018      	movs	r0, r3
   17236:	4b40      	ldr	r3, [pc, #256]	; (17338 <xQueueGenericSend+0x398>)
   17238:	4798      	blx	r3
   1723a:	1e03      	subs	r3, r0, #0
   1723c:	d04f      	beq.n	172de <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1723e:	4b2d      	ldr	r3, [pc, #180]	; (172f4 <xQueueGenericSend+0x354>)
   17240:	4798      	blx	r3
   17242:	0003      	movs	r3, r0
   17244:	0018      	movs	r0, r3
   17246:	4b2c      	ldr	r3, [pc, #176]	; (172f8 <xQueueGenericSend+0x358>)
   17248:	4798      	blx	r3
   1724a:	0003      	movs	r3, r0
   1724c:	001a      	movs	r2, r3
   1724e:	4b2b      	ldr	r3, [pc, #172]	; (172fc <xQueueGenericSend+0x35c>)
   17250:	881b      	ldrh	r3, [r3, #0]
   17252:	4013      	ands	r3, r2
   17254:	b29b      	uxth	r3, r3
   17256:	2b00      	cmp	r3, #0
   17258:	d02e      	beq.n	172b8 <xQueueGenericSend+0x318>
   1725a:	6a3b      	ldr	r3, [r7, #32]
   1725c:	0018      	movs	r0, r3
   1725e:	4b28      	ldr	r3, [pc, #160]	; (17300 <xQueueGenericSend+0x360>)
   17260:	4798      	blx	r3
   17262:	0003      	movs	r3, r0
   17264:	001a      	movs	r2, r3
   17266:	4b25      	ldr	r3, [pc, #148]	; (172fc <xQueueGenericSend+0x35c>)
   17268:	881b      	ldrh	r3, [r3, #0]
   1726a:	4013      	ands	r3, r2
   1726c:	b29b      	uxth	r3, r3
   1726e:	2b00      	cmp	r3, #0
   17270:	d022      	beq.n	172b8 <xQueueGenericSend+0x318>
   17272:	683b      	ldr	r3, [r7, #0]
   17274:	2b00      	cmp	r3, #0
   17276:	d10b      	bne.n	17290 <xQueueGenericSend+0x2f0>
   17278:	6a3b      	ldr	r3, [r7, #32]
   1727a:	0018      	movs	r0, r3
   1727c:	4b21      	ldr	r3, [pc, #132]	; (17304 <xQueueGenericSend+0x364>)
   1727e:	4798      	blx	r3
   17280:	0003      	movs	r3, r0
   17282:	001a      	movs	r2, r3
   17284:	4b20      	ldr	r3, [pc, #128]	; (17308 <xQueueGenericSend+0x368>)
   17286:	5c9b      	ldrb	r3, [r3, r2]
   17288:	3370      	adds	r3, #112	; 0x70
   1728a:	b2db      	uxtb	r3, r3
   1728c:	001d      	movs	r5, r3
   1728e:	e000      	b.n	17292 <xQueueGenericSend+0x2f2>
   17290:	2575      	movs	r5, #117	; 0x75
   17292:	6a3b      	ldr	r3, [r7, #32]
   17294:	0018      	movs	r0, r3
   17296:	4b1b      	ldr	r3, [pc, #108]	; (17304 <xQueueGenericSend+0x364>)
   17298:	4798      	blx	r3
   1729a:	0003      	movs	r3, r0
   1729c:	001a      	movs	r2, r3
   1729e:	4b1a      	ldr	r3, [pc, #104]	; (17308 <xQueueGenericSend+0x368>)
   172a0:	5c9c      	ldrb	r4, [r3, r2]
   172a2:	6a3b      	ldr	r3, [r7, #32]
   172a4:	0018      	movs	r0, r3
   172a6:	4b19      	ldr	r3, [pc, #100]	; (1730c <xQueueGenericSend+0x36c>)
   172a8:	4798      	blx	r3
   172aa:	0003      	movs	r3, r0
   172ac:	b2db      	uxtb	r3, r3
   172ae:	001a      	movs	r2, r3
   172b0:	0021      	movs	r1, r4
   172b2:	0028      	movs	r0, r5
   172b4:	4b16      	ldr	r3, [pc, #88]	; (17310 <xQueueGenericSend+0x370>)
   172b6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   172b8:	6a3b      	ldr	r3, [r7, #32]
   172ba:	3310      	adds	r3, #16
   172bc:	687a      	ldr	r2, [r7, #4]
   172be:	0011      	movs	r1, r2
   172c0:	0018      	movs	r0, r3
   172c2:	4b1e      	ldr	r3, [pc, #120]	; (1733c <xQueueGenericSend+0x39c>)
   172c4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   172c6:	6a3b      	ldr	r3, [r7, #32]
   172c8:	0018      	movs	r0, r3
   172ca:	4b1d      	ldr	r3, [pc, #116]	; (17340 <xQueueGenericSend+0x3a0>)
   172cc:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   172ce:	4b1d      	ldr	r3, [pc, #116]	; (17344 <xQueueGenericSend+0x3a4>)
   172d0:	4798      	blx	r3
   172d2:	1e03      	subs	r3, r0, #0
   172d4:	d000      	beq.n	172d8 <xQueueGenericSend+0x338>
   172d6:	e69d      	b.n	17014 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   172d8:	4b11      	ldr	r3, [pc, #68]	; (17320 <xQueueGenericSend+0x380>)
   172da:	4798      	blx	r3
   172dc:	e69a      	b.n	17014 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   172de:	6a3b      	ldr	r3, [r7, #32]
   172e0:	0018      	movs	r0, r3
   172e2:	4b17      	ldr	r3, [pc, #92]	; (17340 <xQueueGenericSend+0x3a0>)
   172e4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   172e6:	4b17      	ldr	r3, [pc, #92]	; (17344 <xQueueGenericSend+0x3a4>)
   172e8:	4798      	blx	r3
   172ea:	e693      	b.n	17014 <xQueueGenericSend+0x74>
   172ec:	0001972d 	.word	0x0001972d
   172f0:	00016a09 	.word	0x00016a09
   172f4:	00014c9d 	.word	0x00014c9d
   172f8:	00014a01 	.word	0x00014a01
   172fc:	200000b4 	.word	0x200000b4
   17300:	00014ac1 	.word	0x00014ac1
   17304:	000149c1 	.word	0x000149c1
   17308:	200000a8 	.word	0x200000a8
   1730c:	00014aa1 	.word	0x00014aa1
   17310:	000153f9 	.word	0x000153f9
   17314:	00015a55 	.word	0x00015a55
   17318:	000181d9 	.word	0x000181d9
   1731c:	000184dd 	.word	0x000184dd
   17320:	000169f1 	.word	0x000169f1
   17324:	0001929d 	.word	0x0001929d
   17328:	00016a2d 	.word	0x00016a2d
   1732c:	000193dd 	.word	0x000193dd
   17330:	00018cc5 	.word	0x00018cc5
   17334:	00019405 	.word	0x00019405
   17338:	0001842d 	.word	0x0001842d
   1733c:	00019179 	.word	0x00019179
   17340:	00018309 	.word	0x00018309
   17344:	00018cdd 	.word	0x00018cdd
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   17348:	6a3b      	ldr	r3, [r7, #32]
   1734a:	0018      	movs	r0, r3
   1734c:	4b22      	ldr	r3, [pc, #136]	; (173d8 <xQueueGenericSend+0x438>)
   1734e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   17350:	4b22      	ldr	r3, [pc, #136]	; (173dc <xQueueGenericSend+0x43c>)
   17352:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   17354:	4b22      	ldr	r3, [pc, #136]	; (173e0 <xQueueGenericSend+0x440>)
   17356:	4798      	blx	r3
   17358:	0003      	movs	r3, r0
   1735a:	0018      	movs	r0, r3
   1735c:	4b21      	ldr	r3, [pc, #132]	; (173e4 <xQueueGenericSend+0x444>)
   1735e:	4798      	blx	r3
   17360:	0003      	movs	r3, r0
   17362:	001a      	movs	r2, r3
   17364:	4b20      	ldr	r3, [pc, #128]	; (173e8 <xQueueGenericSend+0x448>)
   17366:	881b      	ldrh	r3, [r3, #0]
   17368:	4013      	ands	r3, r2
   1736a:	b29b      	uxth	r3, r3
   1736c:	2b00      	cmp	r3, #0
   1736e:	d02e      	beq.n	173ce <xQueueGenericSend+0x42e>
   17370:	6a3b      	ldr	r3, [r7, #32]
   17372:	0018      	movs	r0, r3
   17374:	4b1d      	ldr	r3, [pc, #116]	; (173ec <xQueueGenericSend+0x44c>)
   17376:	4798      	blx	r3
   17378:	0003      	movs	r3, r0
   1737a:	001a      	movs	r2, r3
   1737c:	4b1a      	ldr	r3, [pc, #104]	; (173e8 <xQueueGenericSend+0x448>)
   1737e:	881b      	ldrh	r3, [r3, #0]
   17380:	4013      	ands	r3, r2
   17382:	b29b      	uxth	r3, r3
   17384:	2b00      	cmp	r3, #0
   17386:	d022      	beq.n	173ce <xQueueGenericSend+0x42e>
   17388:	683b      	ldr	r3, [r7, #0]
   1738a:	2b00      	cmp	r3, #0
   1738c:	d10b      	bne.n	173a6 <xQueueGenericSend+0x406>
   1738e:	6a3b      	ldr	r3, [r7, #32]
   17390:	0018      	movs	r0, r3
   17392:	4b17      	ldr	r3, [pc, #92]	; (173f0 <xQueueGenericSend+0x450>)
   17394:	4798      	blx	r3
   17396:	0003      	movs	r3, r0
   17398:	001a      	movs	r2, r3
   1739a:	4b16      	ldr	r3, [pc, #88]	; (173f4 <xQueueGenericSend+0x454>)
   1739c:	5c9b      	ldrb	r3, [r3, r2]
   1739e:	3348      	adds	r3, #72	; 0x48
   173a0:	b2db      	uxtb	r3, r3
   173a2:	001d      	movs	r5, r3
   173a4:	e000      	b.n	173a8 <xQueueGenericSend+0x408>
   173a6:	254d      	movs	r5, #77	; 0x4d
   173a8:	6a3b      	ldr	r3, [r7, #32]
   173aa:	0018      	movs	r0, r3
   173ac:	4b10      	ldr	r3, [pc, #64]	; (173f0 <xQueueGenericSend+0x450>)
   173ae:	4798      	blx	r3
   173b0:	0003      	movs	r3, r0
   173b2:	001a      	movs	r2, r3
   173b4:	4b0f      	ldr	r3, [pc, #60]	; (173f4 <xQueueGenericSend+0x454>)
   173b6:	5c9c      	ldrb	r4, [r3, r2]
   173b8:	6a3b      	ldr	r3, [r7, #32]
   173ba:	0018      	movs	r0, r3
   173bc:	4b0e      	ldr	r3, [pc, #56]	; (173f8 <xQueueGenericSend+0x458>)
   173be:	4798      	blx	r3
   173c0:	0003      	movs	r3, r0
   173c2:	b2db      	uxtb	r3, r3
   173c4:	001a      	movs	r2, r3
   173c6:	0021      	movs	r1, r4
   173c8:	0028      	movs	r0, r5
   173ca:	4b0c      	ldr	r3, [pc, #48]	; (173fc <xQueueGenericSend+0x45c>)
   173cc:	4798      	blx	r3
			return errQUEUE_FULL;
   173ce:	2300      	movs	r3, #0
		}
	}
}
   173d0:	0018      	movs	r0, r3
   173d2:	46bd      	mov	sp, r7
   173d4:	b00a      	add	sp, #40	; 0x28
   173d6:	bdb0      	pop	{r4, r5, r7, pc}
   173d8:	00018309 	.word	0x00018309
   173dc:	00018cdd 	.word	0x00018cdd
   173e0:	00014c9d 	.word	0x00014c9d
   173e4:	00014a01 	.word	0x00014a01
   173e8:	200000b4 	.word	0x200000b4
   173ec:	00014ac1 	.word	0x00014ac1
   173f0:	000149c1 	.word	0x000149c1
   173f4:	200000a8 	.word	0x200000a8
   173f8:	00014aa1 	.word	0x00014aa1
   173fc:	000153f9 	.word	0x000153f9

00017400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   17400:	b5b0      	push	{r4, r5, r7, lr}
   17402:	b088      	sub	sp, #32
   17404:	af00      	add	r7, sp, #0
   17406:	60f8      	str	r0, [r7, #12]
   17408:	60b9      	str	r1, [r7, #8]
   1740a:	607a      	str	r2, [r7, #4]
   1740c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1740e:	68fb      	ldr	r3, [r7, #12]
   17410:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   17412:	69bb      	ldr	r3, [r7, #24]
   17414:	2b00      	cmp	r3, #0
   17416:	d101      	bne.n	1741c <xQueueGenericSendFromISR+0x1c>
   17418:	b672      	cpsid	i
   1741a:	e7fe      	b.n	1741a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1741c:	68bb      	ldr	r3, [r7, #8]
   1741e:	2b00      	cmp	r3, #0
   17420:	d103      	bne.n	1742a <xQueueGenericSendFromISR+0x2a>
   17422:	69bb      	ldr	r3, [r7, #24]
   17424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17426:	2b00      	cmp	r3, #0
   17428:	d101      	bne.n	1742e <xQueueGenericSendFromISR+0x2e>
   1742a:	2301      	movs	r3, #1
   1742c:	e000      	b.n	17430 <xQueueGenericSendFromISR+0x30>
   1742e:	2300      	movs	r3, #0
   17430:	2b00      	cmp	r3, #0
   17432:	d101      	bne.n	17438 <xQueueGenericSendFromISR+0x38>
   17434:	b672      	cpsid	i
   17436:	e7fe      	b.n	17436 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   17438:	683b      	ldr	r3, [r7, #0]
   1743a:	2b02      	cmp	r3, #2
   1743c:	d103      	bne.n	17446 <xQueueGenericSendFromISR+0x46>
   1743e:	69bb      	ldr	r3, [r7, #24]
   17440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17442:	2b01      	cmp	r3, #1
   17444:	d101      	bne.n	1744a <xQueueGenericSendFromISR+0x4a>
   17446:	2301      	movs	r3, #1
   17448:	e000      	b.n	1744c <xQueueGenericSendFromISR+0x4c>
   1744a:	2300      	movs	r3, #0
   1744c:	2b00      	cmp	r3, #0
   1744e:	d101      	bne.n	17454 <xQueueGenericSendFromISR+0x54>
   17450:	b672      	cpsid	i
   17452:	e7fe      	b.n	17452 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   17454:	4b68      	ldr	r3, [pc, #416]	; (175f8 <xQueueGenericSendFromISR+0x1f8>)
   17456:	4798      	blx	r3
   17458:	0003      	movs	r3, r0
   1745a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1745c:	69bb      	ldr	r3, [r7, #24]
   1745e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17460:	69bb      	ldr	r3, [r7, #24]
   17462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17464:	429a      	cmp	r2, r3
   17466:	d303      	bcc.n	17470 <xQueueGenericSendFromISR+0x70>
   17468:	683b      	ldr	r3, [r7, #0]
   1746a:	2b02      	cmp	r3, #2
   1746c:	d000      	beq.n	17470 <xQueueGenericSendFromISR+0x70>
   1746e:	e088      	b.n	17582 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   17470:	2313      	movs	r3, #19
   17472:	18fb      	adds	r3, r7, r3
   17474:	69ba      	ldr	r2, [r7, #24]
   17476:	2145      	movs	r1, #69	; 0x45
   17478:	5c52      	ldrb	r2, [r2, r1]
   1747a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1747c:	69bb      	ldr	r3, [r7, #24]
   1747e:	0018      	movs	r0, r3
   17480:	4b5e      	ldr	r3, [pc, #376]	; (175fc <xQueueGenericSendFromISR+0x1fc>)
   17482:	4798      	blx	r3
   17484:	0003      	movs	r3, r0
   17486:	001a      	movs	r2, r3
   17488:	4b5d      	ldr	r3, [pc, #372]	; (17600 <xQueueGenericSendFromISR+0x200>)
   1748a:	881b      	ldrh	r3, [r3, #0]
   1748c:	4013      	ands	r3, r2
   1748e:	b29b      	uxth	r3, r3
   17490:	2b00      	cmp	r3, #0
   17492:	d022      	beq.n	174da <xQueueGenericSendFromISR+0xda>
   17494:	683b      	ldr	r3, [r7, #0]
   17496:	2b00      	cmp	r3, #0
   17498:	d10b      	bne.n	174b2 <xQueueGenericSendFromISR+0xb2>
   1749a:	69bb      	ldr	r3, [r7, #24]
   1749c:	0018      	movs	r0, r3
   1749e:	4b59      	ldr	r3, [pc, #356]	; (17604 <xQueueGenericSendFromISR+0x204>)
   174a0:	4798      	blx	r3
   174a2:	0003      	movs	r3, r0
   174a4:	001a      	movs	r2, r3
   174a6:	4b58      	ldr	r3, [pc, #352]	; (17608 <xQueueGenericSendFromISR+0x208>)
   174a8:	5c9b      	ldrb	r3, [r3, r2]
   174aa:	3330      	adds	r3, #48	; 0x30
   174ac:	b2db      	uxtb	r3, r3
   174ae:	001d      	movs	r5, r3
   174b0:	e000      	b.n	174b4 <xQueueGenericSendFromISR+0xb4>
   174b2:	2535      	movs	r5, #53	; 0x35
   174b4:	69bb      	ldr	r3, [r7, #24]
   174b6:	0018      	movs	r0, r3
   174b8:	4b52      	ldr	r3, [pc, #328]	; (17604 <xQueueGenericSendFromISR+0x204>)
   174ba:	4798      	blx	r3
   174bc:	0003      	movs	r3, r0
   174be:	001a      	movs	r2, r3
   174c0:	4b51      	ldr	r3, [pc, #324]	; (17608 <xQueueGenericSendFromISR+0x208>)
   174c2:	5c9c      	ldrb	r4, [r3, r2]
   174c4:	69bb      	ldr	r3, [r7, #24]
   174c6:	0018      	movs	r0, r3
   174c8:	4b50      	ldr	r3, [pc, #320]	; (1760c <xQueueGenericSendFromISR+0x20c>)
   174ca:	4798      	blx	r3
   174cc:	0003      	movs	r3, r0
   174ce:	b2db      	uxtb	r3, r3
   174d0:	001a      	movs	r2, r3
   174d2:	0021      	movs	r1, r4
   174d4:	0028      	movs	r0, r5
   174d6:	4b4e      	ldr	r3, [pc, #312]	; (17610 <xQueueGenericSendFromISR+0x210>)
   174d8:	4798      	blx	r3
   174da:	69bb      	ldr	r3, [r7, #24]
   174dc:	0018      	movs	r0, r3
   174de:	4b49      	ldr	r3, [pc, #292]	; (17604 <xQueueGenericSendFromISR+0x204>)
   174e0:	4798      	blx	r3
   174e2:	0003      	movs	r3, r0
   174e4:	001a      	movs	r2, r3
   174e6:	4b48      	ldr	r3, [pc, #288]	; (17608 <xQueueGenericSendFromISR+0x208>)
   174e8:	5c9c      	ldrb	r4, [r3, r2]
   174ea:	69bb      	ldr	r3, [r7, #24]
   174ec:	0018      	movs	r0, r3
   174ee:	4b47      	ldr	r3, [pc, #284]	; (1760c <xQueueGenericSendFromISR+0x20c>)
   174f0:	4798      	blx	r3
   174f2:	0003      	movs	r3, r0
   174f4:	b2d9      	uxtb	r1, r3
   174f6:	69bb      	ldr	r3, [r7, #24]
   174f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   174fa:	b2db      	uxtb	r3, r3
   174fc:	3301      	adds	r3, #1
   174fe:	b2db      	uxtb	r3, r3
   17500:	001a      	movs	r2, r3
   17502:	0020      	movs	r0, r4
   17504:	4b43      	ldr	r3, [pc, #268]	; (17614 <xQueueGenericSendFromISR+0x214>)
   17506:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   17508:	683a      	ldr	r2, [r7, #0]
   1750a:	68b9      	ldr	r1, [r7, #8]
   1750c:	69bb      	ldr	r3, [r7, #24]
   1750e:	0018      	movs	r0, r3
   17510:	4b41      	ldr	r3, [pc, #260]	; (17618 <xQueueGenericSendFromISR+0x218>)
   17512:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   17514:	2313      	movs	r3, #19
   17516:	18fb      	adds	r3, r7, r3
   17518:	781b      	ldrb	r3, [r3, #0]
   1751a:	b25b      	sxtb	r3, r3
   1751c:	3301      	adds	r3, #1
   1751e:	d124      	bne.n	1756a <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   17520:	69bb      	ldr	r3, [r7, #24]
   17522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   17524:	2b00      	cmp	r3, #0
   17526:	d00e      	beq.n	17546 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   17528:	683a      	ldr	r2, [r7, #0]
   1752a:	69bb      	ldr	r3, [r7, #24]
   1752c:	0011      	movs	r1, r2
   1752e:	0018      	movs	r0, r3
   17530:	4b3a      	ldr	r3, [pc, #232]	; (1761c <xQueueGenericSendFromISR+0x21c>)
   17532:	4798      	blx	r3
   17534:	1e03      	subs	r3, r0, #0
   17536:	d021      	beq.n	1757c <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   17538:	687b      	ldr	r3, [r7, #4]
   1753a:	2b00      	cmp	r3, #0
   1753c:	d01e      	beq.n	1757c <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1753e:	687b      	ldr	r3, [r7, #4]
   17540:	2201      	movs	r2, #1
   17542:	601a      	str	r2, [r3, #0]
   17544:	e01a      	b.n	1757c <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   17546:	69bb      	ldr	r3, [r7, #24]
   17548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1754a:	2b00      	cmp	r3, #0
   1754c:	d016      	beq.n	1757c <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1754e:	69bb      	ldr	r3, [r7, #24]
   17550:	3324      	adds	r3, #36	; 0x24
   17552:	0018      	movs	r0, r3
   17554:	4b32      	ldr	r3, [pc, #200]	; (17620 <xQueueGenericSendFromISR+0x220>)
   17556:	4798      	blx	r3
   17558:	1e03      	subs	r3, r0, #0
   1755a:	d00f      	beq.n	1757c <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1755c:	687b      	ldr	r3, [r7, #4]
   1755e:	2b00      	cmp	r3, #0
   17560:	d00c      	beq.n	1757c <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   17562:	687b      	ldr	r3, [r7, #4]
   17564:	2201      	movs	r2, #1
   17566:	601a      	str	r2, [r3, #0]
   17568:	e008      	b.n	1757c <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1756a:	2313      	movs	r3, #19
   1756c:	18fb      	adds	r3, r7, r3
   1756e:	781b      	ldrb	r3, [r3, #0]
   17570:	3301      	adds	r3, #1
   17572:	b2db      	uxtb	r3, r3
   17574:	b259      	sxtb	r1, r3
   17576:	69bb      	ldr	r3, [r7, #24]
   17578:	2245      	movs	r2, #69	; 0x45
   1757a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1757c:	2301      	movs	r3, #1
   1757e:	61fb      	str	r3, [r7, #28]
		{
   17580:	e030      	b.n	175e4 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   17582:	69bb      	ldr	r3, [r7, #24]
   17584:	0018      	movs	r0, r3
   17586:	4b1d      	ldr	r3, [pc, #116]	; (175fc <xQueueGenericSendFromISR+0x1fc>)
   17588:	4798      	blx	r3
   1758a:	0003      	movs	r3, r0
   1758c:	001a      	movs	r2, r3
   1758e:	4b1c      	ldr	r3, [pc, #112]	; (17600 <xQueueGenericSendFromISR+0x200>)
   17590:	881b      	ldrh	r3, [r3, #0]
   17592:	4013      	ands	r3, r2
   17594:	b29b      	uxth	r3, r3
   17596:	2b00      	cmp	r3, #0
   17598:	d022      	beq.n	175e0 <xQueueGenericSendFromISR+0x1e0>
   1759a:	683b      	ldr	r3, [r7, #0]
   1759c:	2b00      	cmp	r3, #0
   1759e:	d10b      	bne.n	175b8 <xQueueGenericSendFromISR+0x1b8>
   175a0:	69bb      	ldr	r3, [r7, #24]
   175a2:	0018      	movs	r0, r3
   175a4:	4b17      	ldr	r3, [pc, #92]	; (17604 <xQueueGenericSendFromISR+0x204>)
   175a6:	4798      	blx	r3
   175a8:	0003      	movs	r3, r0
   175aa:	001a      	movs	r2, r3
   175ac:	4b16      	ldr	r3, [pc, #88]	; (17608 <xQueueGenericSendFromISR+0x208>)
   175ae:	5c9b      	ldrb	r3, [r3, r2]
   175b0:	3358      	adds	r3, #88	; 0x58
   175b2:	b2db      	uxtb	r3, r3
   175b4:	001d      	movs	r5, r3
   175b6:	e000      	b.n	175ba <xQueueGenericSendFromISR+0x1ba>
   175b8:	255d      	movs	r5, #93	; 0x5d
   175ba:	69bb      	ldr	r3, [r7, #24]
   175bc:	0018      	movs	r0, r3
   175be:	4b11      	ldr	r3, [pc, #68]	; (17604 <xQueueGenericSendFromISR+0x204>)
   175c0:	4798      	blx	r3
   175c2:	0003      	movs	r3, r0
   175c4:	001a      	movs	r2, r3
   175c6:	4b10      	ldr	r3, [pc, #64]	; (17608 <xQueueGenericSendFromISR+0x208>)
   175c8:	5c9c      	ldrb	r4, [r3, r2]
   175ca:	69bb      	ldr	r3, [r7, #24]
   175cc:	0018      	movs	r0, r3
   175ce:	4b0f      	ldr	r3, [pc, #60]	; (1760c <xQueueGenericSendFromISR+0x20c>)
   175d0:	4798      	blx	r3
   175d2:	0003      	movs	r3, r0
   175d4:	b2db      	uxtb	r3, r3
   175d6:	001a      	movs	r2, r3
   175d8:	0021      	movs	r1, r4
   175da:	0028      	movs	r0, r5
   175dc:	4b0c      	ldr	r3, [pc, #48]	; (17610 <xQueueGenericSendFromISR+0x210>)
   175de:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   175e0:	2300      	movs	r3, #0
   175e2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   175e4:	697b      	ldr	r3, [r7, #20]
   175e6:	0018      	movs	r0, r3
   175e8:	4b0e      	ldr	r3, [pc, #56]	; (17624 <xQueueGenericSendFromISR+0x224>)
   175ea:	4798      	blx	r3

	return xReturn;
   175ec:	69fb      	ldr	r3, [r7, #28]
}
   175ee:	0018      	movs	r0, r3
   175f0:	46bd      	mov	sp, r7
   175f2:	b008      	add	sp, #32
   175f4:	bdb0      	pop	{r4, r5, r7, pc}
   175f6:	46c0      	nop			; (mov r8, r8)
   175f8:	00016a5d 	.word	0x00016a5d
   175fc:	00014ac1 	.word	0x00014ac1
   17600:	200000b4 	.word	0x200000b4
   17604:	000149c1 	.word	0x000149c1
   17608:	200000a8 	.word	0x200000a8
   1760c:	00014aa1 	.word	0x00014aa1
   17610:	000153f9 	.word	0x000153f9
   17614:	00015a55 	.word	0x00015a55
   17618:	000181d9 	.word	0x000181d9
   1761c:	000184dd 	.word	0x000184dd
   17620:	0001929d 	.word	0x0001929d
   17624:	00016a69 	.word	0x00016a69

00017628 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   17628:	b580      	push	{r7, lr}
   1762a:	b082      	sub	sp, #8
   1762c:	af00      	add	r7, sp, #0
   1762e:	6078      	str	r0, [r7, #4]
   17630:	6039      	str	r1, [r7, #0]
   17632:	6839      	ldr	r1, [r7, #0]
   17634:	687b      	ldr	r3, [r7, #4]
   17636:	2200      	movs	r2, #0
   17638:	0018      	movs	r0, r3
   1763a:	4b03      	ldr	r3, [pc, #12]	; (17648 <xQueueGiveFromISR+0x20>)
   1763c:	4798      	blx	r3
   1763e:	0003      	movs	r3, r0
   17640:	0018      	movs	r0, r3
   17642:	46bd      	mov	sp, r7
   17644:	b002      	add	sp, #8
   17646:	bd80      	pop	{r7, pc}
   17648:	0001764d 	.word	0x0001764d

0001764c <MyWrapper>:
{
   1764c:	b5b0      	push	{r4, r5, r7, lr}
   1764e:	b08a      	sub	sp, #40	; 0x28
   17650:	af00      	add	r7, sp, #0
   17652:	60f8      	str	r0, [r7, #12]
   17654:	60b9      	str	r1, [r7, #8]
   17656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   17658:	68fb      	ldr	r3, [r7, #12]
   1765a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1765c:	6a3b      	ldr	r3, [r7, #32]
   1765e:	2b00      	cmp	r3, #0
   17660:	d101      	bne.n	17666 <MyWrapper+0x1a>
   17662:	b672      	cpsid	i
   17664:	e7fe      	b.n	17664 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   17666:	6a3b      	ldr	r3, [r7, #32]
   17668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1766a:	2b00      	cmp	r3, #0
   1766c:	d001      	beq.n	17672 <MyWrapper+0x26>
   1766e:	b672      	cpsid	i
   17670:	e7fe      	b.n	17670 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   17672:	6a3b      	ldr	r3, [r7, #32]
   17674:	681b      	ldr	r3, [r3, #0]
   17676:	2b00      	cmp	r3, #0
   17678:	d103      	bne.n	17682 <MyWrapper+0x36>
   1767a:	6a3b      	ldr	r3, [r7, #32]
   1767c:	685b      	ldr	r3, [r3, #4]
   1767e:	2b00      	cmp	r3, #0
   17680:	d101      	bne.n	17686 <MyWrapper+0x3a>
   17682:	2301      	movs	r3, #1
   17684:	e000      	b.n	17688 <MyWrapper+0x3c>
   17686:	2300      	movs	r3, #0
   17688:	2b00      	cmp	r3, #0
   1768a:	d101      	bne.n	17690 <MyWrapper+0x44>
   1768c:	b672      	cpsid	i
   1768e:	e7fe      	b.n	1768e <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   17690:	4b66      	ldr	r3, [pc, #408]	; (1782c <MyWrapper+0x1e0>)
   17692:	4798      	blx	r3
   17694:	0003      	movs	r3, r0
   17696:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   17698:	6a3b      	ldr	r3, [r7, #32]
   1769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1769c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1769e:	6a3b      	ldr	r3, [r7, #32]
   176a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   176a2:	69bb      	ldr	r3, [r7, #24]
   176a4:	429a      	cmp	r2, r3
   176a6:	d800      	bhi.n	176aa <MyWrapper+0x5e>
   176a8:	e085      	b.n	177b6 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   176aa:	2317      	movs	r3, #23
   176ac:	18fb      	adds	r3, r7, r3
   176ae:	6a3a      	ldr	r2, [r7, #32]
   176b0:	2145      	movs	r1, #69	; 0x45
   176b2:	5c52      	ldrb	r2, [r2, r1]
   176b4:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   176b6:	6a3b      	ldr	r3, [r7, #32]
   176b8:	0018      	movs	r0, r3
   176ba:	4b5d      	ldr	r3, [pc, #372]	; (17830 <MyWrapper+0x1e4>)
   176bc:	4798      	blx	r3
   176be:	0003      	movs	r3, r0
   176c0:	001a      	movs	r2, r3
   176c2:	4b5c      	ldr	r3, [pc, #368]	; (17834 <MyWrapper+0x1e8>)
   176c4:	881b      	ldrh	r3, [r3, #0]
   176c6:	4013      	ands	r3, r2
   176c8:	b29b      	uxth	r3, r3
   176ca:	2b00      	cmp	r3, #0
   176cc:	d022      	beq.n	17714 <MyWrapper+0xc8>
   176ce:	687b      	ldr	r3, [r7, #4]
   176d0:	2b00      	cmp	r3, #0
   176d2:	d10b      	bne.n	176ec <MyWrapper+0xa0>
   176d4:	6a3b      	ldr	r3, [r7, #32]
   176d6:	0018      	movs	r0, r3
   176d8:	4b57      	ldr	r3, [pc, #348]	; (17838 <MyWrapper+0x1ec>)
   176da:	4798      	blx	r3
   176dc:	0003      	movs	r3, r0
   176de:	001a      	movs	r2, r3
   176e0:	4b56      	ldr	r3, [pc, #344]	; (1783c <MyWrapper+0x1f0>)
   176e2:	5c9b      	ldrb	r3, [r3, r2]
   176e4:	3330      	adds	r3, #48	; 0x30
   176e6:	b2db      	uxtb	r3, r3
   176e8:	001d      	movs	r5, r3
   176ea:	e000      	b.n	176ee <MyWrapper+0xa2>
   176ec:	2535      	movs	r5, #53	; 0x35
   176ee:	6a3b      	ldr	r3, [r7, #32]
   176f0:	0018      	movs	r0, r3
   176f2:	4b51      	ldr	r3, [pc, #324]	; (17838 <MyWrapper+0x1ec>)
   176f4:	4798      	blx	r3
   176f6:	0003      	movs	r3, r0
   176f8:	001a      	movs	r2, r3
   176fa:	4b50      	ldr	r3, [pc, #320]	; (1783c <MyWrapper+0x1f0>)
   176fc:	5c9c      	ldrb	r4, [r3, r2]
   176fe:	6a3b      	ldr	r3, [r7, #32]
   17700:	0018      	movs	r0, r3
   17702:	4b4f      	ldr	r3, [pc, #316]	; (17840 <MyWrapper+0x1f4>)
   17704:	4798      	blx	r3
   17706:	0003      	movs	r3, r0
   17708:	b2db      	uxtb	r3, r3
   1770a:	001a      	movs	r2, r3
   1770c:	0021      	movs	r1, r4
   1770e:	0028      	movs	r0, r5
   17710:	4b4c      	ldr	r3, [pc, #304]	; (17844 <MyWrapper+0x1f8>)
   17712:	4798      	blx	r3
   17714:	6a3b      	ldr	r3, [r7, #32]
   17716:	0018      	movs	r0, r3
   17718:	4b47      	ldr	r3, [pc, #284]	; (17838 <MyWrapper+0x1ec>)
   1771a:	4798      	blx	r3
   1771c:	0003      	movs	r3, r0
   1771e:	001a      	movs	r2, r3
   17720:	4b46      	ldr	r3, [pc, #280]	; (1783c <MyWrapper+0x1f0>)
   17722:	5c9c      	ldrb	r4, [r3, r2]
   17724:	6a3b      	ldr	r3, [r7, #32]
   17726:	0018      	movs	r0, r3
   17728:	4b45      	ldr	r3, [pc, #276]	; (17840 <MyWrapper+0x1f4>)
   1772a:	4798      	blx	r3
   1772c:	0003      	movs	r3, r0
   1772e:	b2d9      	uxtb	r1, r3
   17730:	6a3b      	ldr	r3, [r7, #32]
   17732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17734:	b2db      	uxtb	r3, r3
   17736:	3301      	adds	r3, #1
   17738:	b2db      	uxtb	r3, r3
   1773a:	001a      	movs	r2, r3
   1773c:	0020      	movs	r0, r4
   1773e:	4b42      	ldr	r3, [pc, #264]	; (17848 <MyWrapper+0x1fc>)
   17740:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   17742:	69bb      	ldr	r3, [r7, #24]
   17744:	1c5a      	adds	r2, r3, #1
   17746:	6a3b      	ldr	r3, [r7, #32]
   17748:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1774a:	2317      	movs	r3, #23
   1774c:	18fb      	adds	r3, r7, r3
   1774e:	781b      	ldrb	r3, [r3, #0]
   17750:	b25b      	sxtb	r3, r3
   17752:	3301      	adds	r3, #1
   17754:	d123      	bne.n	1779e <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   17756:	6a3b      	ldr	r3, [r7, #32]
   17758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1775a:	2b00      	cmp	r3, #0
   1775c:	d00d      	beq.n	1777a <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1775e:	6a3b      	ldr	r3, [r7, #32]
   17760:	2100      	movs	r1, #0
   17762:	0018      	movs	r0, r3
   17764:	4b39      	ldr	r3, [pc, #228]	; (1784c <MyWrapper+0x200>)
   17766:	4798      	blx	r3
   17768:	1e03      	subs	r3, r0, #0
   1776a:	d021      	beq.n	177b0 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1776c:	68bb      	ldr	r3, [r7, #8]
   1776e:	2b00      	cmp	r3, #0
   17770:	d01e      	beq.n	177b0 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   17772:	68bb      	ldr	r3, [r7, #8]
   17774:	2201      	movs	r2, #1
   17776:	601a      	str	r2, [r3, #0]
   17778:	e01a      	b.n	177b0 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1777a:	6a3b      	ldr	r3, [r7, #32]
   1777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1777e:	2b00      	cmp	r3, #0
   17780:	d016      	beq.n	177b0 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   17782:	6a3b      	ldr	r3, [r7, #32]
   17784:	3324      	adds	r3, #36	; 0x24
   17786:	0018      	movs	r0, r3
   17788:	4b31      	ldr	r3, [pc, #196]	; (17850 <MyWrapper+0x204>)
   1778a:	4798      	blx	r3
   1778c:	1e03      	subs	r3, r0, #0
   1778e:	d00f      	beq.n	177b0 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   17790:	68bb      	ldr	r3, [r7, #8]
   17792:	2b00      	cmp	r3, #0
   17794:	d00c      	beq.n	177b0 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   17796:	68bb      	ldr	r3, [r7, #8]
   17798:	2201      	movs	r2, #1
   1779a:	601a      	str	r2, [r3, #0]
   1779c:	e008      	b.n	177b0 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1779e:	2317      	movs	r3, #23
   177a0:	18fb      	adds	r3, r7, r3
   177a2:	781b      	ldrb	r3, [r3, #0]
   177a4:	3301      	adds	r3, #1
   177a6:	b2db      	uxtb	r3, r3
   177a8:	b259      	sxtb	r1, r3
   177aa:	6a3b      	ldr	r3, [r7, #32]
   177ac:	2245      	movs	r2, #69	; 0x45
   177ae:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   177b0:	2301      	movs	r3, #1
   177b2:	627b      	str	r3, [r7, #36]	; 0x24
   177b4:	e030      	b.n	17818 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   177b6:	6a3b      	ldr	r3, [r7, #32]
   177b8:	0018      	movs	r0, r3
   177ba:	4b1d      	ldr	r3, [pc, #116]	; (17830 <MyWrapper+0x1e4>)
   177bc:	4798      	blx	r3
   177be:	0003      	movs	r3, r0
   177c0:	001a      	movs	r2, r3
   177c2:	4b1c      	ldr	r3, [pc, #112]	; (17834 <MyWrapper+0x1e8>)
   177c4:	881b      	ldrh	r3, [r3, #0]
   177c6:	4013      	ands	r3, r2
   177c8:	b29b      	uxth	r3, r3
   177ca:	2b00      	cmp	r3, #0
   177cc:	d022      	beq.n	17814 <MyWrapper+0x1c8>
   177ce:	687b      	ldr	r3, [r7, #4]
   177d0:	2b00      	cmp	r3, #0
   177d2:	d10b      	bne.n	177ec <MyWrapper+0x1a0>
   177d4:	6a3b      	ldr	r3, [r7, #32]
   177d6:	0018      	movs	r0, r3
   177d8:	4b17      	ldr	r3, [pc, #92]	; (17838 <MyWrapper+0x1ec>)
   177da:	4798      	blx	r3
   177dc:	0003      	movs	r3, r0
   177de:	001a      	movs	r2, r3
   177e0:	4b16      	ldr	r3, [pc, #88]	; (1783c <MyWrapper+0x1f0>)
   177e2:	5c9b      	ldrb	r3, [r3, r2]
   177e4:	3358      	adds	r3, #88	; 0x58
   177e6:	b2db      	uxtb	r3, r3
   177e8:	001d      	movs	r5, r3
   177ea:	e000      	b.n	177ee <MyWrapper+0x1a2>
   177ec:	255d      	movs	r5, #93	; 0x5d
   177ee:	6a3b      	ldr	r3, [r7, #32]
   177f0:	0018      	movs	r0, r3
   177f2:	4b11      	ldr	r3, [pc, #68]	; (17838 <MyWrapper+0x1ec>)
   177f4:	4798      	blx	r3
   177f6:	0003      	movs	r3, r0
   177f8:	001a      	movs	r2, r3
   177fa:	4b10      	ldr	r3, [pc, #64]	; (1783c <MyWrapper+0x1f0>)
   177fc:	5c9c      	ldrb	r4, [r3, r2]
   177fe:	6a3b      	ldr	r3, [r7, #32]
   17800:	0018      	movs	r0, r3
   17802:	4b0f      	ldr	r3, [pc, #60]	; (17840 <MyWrapper+0x1f4>)
   17804:	4798      	blx	r3
   17806:	0003      	movs	r3, r0
   17808:	b2db      	uxtb	r3, r3
   1780a:	001a      	movs	r2, r3
   1780c:	0021      	movs	r1, r4
   1780e:	0028      	movs	r0, r5
   17810:	4b0c      	ldr	r3, [pc, #48]	; (17844 <MyWrapper+0x1f8>)
   17812:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   17814:	2300      	movs	r3, #0
   17816:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17818:	69fb      	ldr	r3, [r7, #28]
   1781a:	0018      	movs	r0, r3
   1781c:	4b0d      	ldr	r3, [pc, #52]	; (17854 <MyWrapper+0x208>)
   1781e:	4798      	blx	r3

	return xReturn;
   17820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   17822:	0018      	movs	r0, r3
   17824:	46bd      	mov	sp, r7
   17826:	b00a      	add	sp, #40	; 0x28
   17828:	bdb0      	pop	{r4, r5, r7, pc}
   1782a:	46c0      	nop			; (mov r8, r8)
   1782c:	00016a5d 	.word	0x00016a5d
   17830:	00014ac1 	.word	0x00014ac1
   17834:	200000b4 	.word	0x200000b4
   17838:	000149c1 	.word	0x000149c1
   1783c:	200000a8 	.word	0x200000a8
   17840:	00014aa1 	.word	0x00014aa1
   17844:	000153f9 	.word	0x000153f9
   17848:	00015a55 	.word	0x00015a55
   1784c:	000184dd 	.word	0x000184dd
   17850:	0001929d 	.word	0x0001929d
   17854:	00016a69 	.word	0x00016a69

00017858 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   17858:	b5b0      	push	{r4, r5, r7, lr}
   1785a:	b08a      	sub	sp, #40	; 0x28
   1785c:	af00      	add	r7, sp, #0
   1785e:	60f8      	str	r0, [r7, #12]
   17860:	60b9      	str	r1, [r7, #8]
   17862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   17864:	2300      	movs	r3, #0
   17866:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   17868:	68fb      	ldr	r3, [r7, #12]
   1786a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1786c:	6a3b      	ldr	r3, [r7, #32]
   1786e:	2b00      	cmp	r3, #0
   17870:	d101      	bne.n	17876 <xQueueReceive+0x1e>
   17872:	b672      	cpsid	i
   17874:	e7fe      	b.n	17874 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17876:	68bb      	ldr	r3, [r7, #8]
   17878:	2b00      	cmp	r3, #0
   1787a:	d103      	bne.n	17884 <xQueueReceive+0x2c>
   1787c:	6a3b      	ldr	r3, [r7, #32]
   1787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17880:	2b00      	cmp	r3, #0
   17882:	d101      	bne.n	17888 <xQueueReceive+0x30>
   17884:	2301      	movs	r3, #1
   17886:	e000      	b.n	1788a <xQueueReceive+0x32>
   17888:	2300      	movs	r3, #0
   1788a:	2b00      	cmp	r3, #0
   1788c:	d101      	bne.n	17892 <xQueueReceive+0x3a>
   1788e:	b672      	cpsid	i
   17890:	e7fe      	b.n	17890 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   17892:	4bbf      	ldr	r3, [pc, #764]	; (17b90 <xQueueReceive+0x338>)
   17894:	4798      	blx	r3
   17896:	1e03      	subs	r3, r0, #0
   17898:	d102      	bne.n	178a0 <xQueueReceive+0x48>
   1789a:	687b      	ldr	r3, [r7, #4]
   1789c:	2b00      	cmp	r3, #0
   1789e:	d101      	bne.n	178a4 <xQueueReceive+0x4c>
   178a0:	2301      	movs	r3, #1
   178a2:	e000      	b.n	178a6 <xQueueReceive+0x4e>
   178a4:	2300      	movs	r3, #0
   178a6:	2b00      	cmp	r3, #0
   178a8:	d101      	bne.n	178ae <xQueueReceive+0x56>
   178aa:	b672      	cpsid	i
   178ac:	e7fe      	b.n	178ac <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   178ae:	4bb9      	ldr	r3, [pc, #740]	; (17b94 <xQueueReceive+0x33c>)
   178b0:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   178b2:	6a3b      	ldr	r3, [r7, #32]
   178b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   178b6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   178b8:	69fb      	ldr	r3, [r7, #28]
   178ba:	2b00      	cmp	r3, #0
   178bc:	d100      	bne.n	178c0 <xQueueReceive+0x68>
   178be:	e07d      	b.n	179bc <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   178c0:	68ba      	ldr	r2, [r7, #8]
   178c2:	6a3b      	ldr	r3, [r7, #32]
   178c4:	0011      	movs	r1, r2
   178c6:	0018      	movs	r0, r3
   178c8:	4bb3      	ldr	r3, [pc, #716]	; (17b98 <xQueueReceive+0x340>)
   178ca:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   178cc:	4bb3      	ldr	r3, [pc, #716]	; (17b9c <xQueueReceive+0x344>)
   178ce:	4798      	blx	r3
   178d0:	0003      	movs	r3, r0
   178d2:	0018      	movs	r0, r3
   178d4:	4bb2      	ldr	r3, [pc, #712]	; (17ba0 <xQueueReceive+0x348>)
   178d6:	4798      	blx	r3
   178d8:	0003      	movs	r3, r0
   178da:	001a      	movs	r2, r3
   178dc:	4bb1      	ldr	r3, [pc, #708]	; (17ba4 <xQueueReceive+0x34c>)
   178de:	881b      	ldrh	r3, [r3, #0]
   178e0:	4013      	ands	r3, r2
   178e2:	b29b      	uxth	r3, r3
   178e4:	2b00      	cmp	r3, #0
   178e6:	d029      	beq.n	1793c <xQueueReceive+0xe4>
   178e8:	6a3b      	ldr	r3, [r7, #32]
   178ea:	0018      	movs	r0, r3
   178ec:	4bae      	ldr	r3, [pc, #696]	; (17ba8 <xQueueReceive+0x350>)
   178ee:	4798      	blx	r3
   178f0:	0003      	movs	r3, r0
   178f2:	001a      	movs	r2, r3
   178f4:	4bab      	ldr	r3, [pc, #684]	; (17ba4 <xQueueReceive+0x34c>)
   178f6:	881b      	ldrh	r3, [r3, #0]
   178f8:	4013      	ands	r3, r2
   178fa:	b29b      	uxth	r3, r3
   178fc:	2b00      	cmp	r3, #0
   178fe:	d01d      	beq.n	1793c <xQueueReceive+0xe4>
   17900:	6a3b      	ldr	r3, [r7, #32]
   17902:	0018      	movs	r0, r3
   17904:	4ba9      	ldr	r3, [pc, #676]	; (17bac <xQueueReceive+0x354>)
   17906:	4798      	blx	r3
   17908:	0003      	movs	r3, r0
   1790a:	001a      	movs	r2, r3
   1790c:	4ba8      	ldr	r3, [pc, #672]	; (17bb0 <xQueueReceive+0x358>)
   1790e:	5c9b      	ldrb	r3, [r3, r2]
   17910:	3328      	adds	r3, #40	; 0x28
   17912:	b2db      	uxtb	r3, r3
   17914:	001d      	movs	r5, r3
   17916:	6a3b      	ldr	r3, [r7, #32]
   17918:	0018      	movs	r0, r3
   1791a:	4ba4      	ldr	r3, [pc, #656]	; (17bac <xQueueReceive+0x354>)
   1791c:	4798      	blx	r3
   1791e:	0003      	movs	r3, r0
   17920:	001a      	movs	r2, r3
   17922:	4ba3      	ldr	r3, [pc, #652]	; (17bb0 <xQueueReceive+0x358>)
   17924:	5c9c      	ldrb	r4, [r3, r2]
   17926:	6a3b      	ldr	r3, [r7, #32]
   17928:	0018      	movs	r0, r3
   1792a:	4ba2      	ldr	r3, [pc, #648]	; (17bb4 <xQueueReceive+0x35c>)
   1792c:	4798      	blx	r3
   1792e:	0003      	movs	r3, r0
   17930:	b2db      	uxtb	r3, r3
   17932:	001a      	movs	r2, r3
   17934:	0021      	movs	r1, r4
   17936:	0028      	movs	r0, r5
   17938:	4b9f      	ldr	r3, [pc, #636]	; (17bb8 <xQueueReceive+0x360>)
   1793a:	4798      	blx	r3
   1793c:	6a3b      	ldr	r3, [r7, #32]
   1793e:	0018      	movs	r0, r3
   17940:	4b9a      	ldr	r3, [pc, #616]	; (17bac <xQueueReceive+0x354>)
   17942:	4798      	blx	r3
   17944:	0003      	movs	r3, r0
   17946:	001a      	movs	r2, r3
   17948:	4b99      	ldr	r3, [pc, #612]	; (17bb0 <xQueueReceive+0x358>)
   1794a:	5c9c      	ldrb	r4, [r3, r2]
   1794c:	6a3b      	ldr	r3, [r7, #32]
   1794e:	0018      	movs	r0, r3
   17950:	4b98      	ldr	r3, [pc, #608]	; (17bb4 <xQueueReceive+0x35c>)
   17952:	4798      	blx	r3
   17954:	0003      	movs	r3, r0
   17956:	b2dd      	uxtb	r5, r3
   17958:	6a3b      	ldr	r3, [r7, #32]
   1795a:	0018      	movs	r0, r3
   1795c:	4b93      	ldr	r3, [pc, #588]	; (17bac <xQueueReceive+0x354>)
   1795e:	4798      	blx	r3
   17960:	0003      	movs	r3, r0
   17962:	001a      	movs	r2, r3
   17964:	4b92      	ldr	r3, [pc, #584]	; (17bb0 <xQueueReceive+0x358>)
   17966:	5c9b      	ldrb	r3, [r3, r2]
   17968:	2b02      	cmp	r3, #2
   1796a:	d108      	bne.n	1797e <xQueueReceive+0x126>
   1796c:	4b8b      	ldr	r3, [pc, #556]	; (17b9c <xQueueReceive+0x344>)
   1796e:	4798      	blx	r3
   17970:	0003      	movs	r3, r0
   17972:	0018      	movs	r0, r3
   17974:	4b91      	ldr	r3, [pc, #580]	; (17bbc <xQueueReceive+0x364>)
   17976:	4798      	blx	r3
   17978:	0003      	movs	r3, r0
   1797a:	b2db      	uxtb	r3, r3
   1797c:	e004      	b.n	17988 <xQueueReceive+0x130>
   1797e:	6a3b      	ldr	r3, [r7, #32]
   17980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17982:	b2db      	uxtb	r3, r3
   17984:	3b01      	subs	r3, #1
   17986:	b2db      	uxtb	r3, r3
   17988:	001a      	movs	r2, r3
   1798a:	0029      	movs	r1, r5
   1798c:	0020      	movs	r0, r4
   1798e:	4b8c      	ldr	r3, [pc, #560]	; (17bc0 <xQueueReceive+0x368>)
   17990:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   17992:	69fb      	ldr	r3, [r7, #28]
   17994:	1e5a      	subs	r2, r3, #1
   17996:	6a3b      	ldr	r3, [r7, #32]
   17998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1799a:	6a3b      	ldr	r3, [r7, #32]
   1799c:	691b      	ldr	r3, [r3, #16]
   1799e:	2b00      	cmp	r3, #0
   179a0:	d008      	beq.n	179b4 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   179a2:	6a3b      	ldr	r3, [r7, #32]
   179a4:	3310      	adds	r3, #16
   179a6:	0018      	movs	r0, r3
   179a8:	4b86      	ldr	r3, [pc, #536]	; (17bc4 <xQueueReceive+0x36c>)
   179aa:	4798      	blx	r3
   179ac:	1e03      	subs	r3, r0, #0
   179ae:	d001      	beq.n	179b4 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   179b0:	4b85      	ldr	r3, [pc, #532]	; (17bc8 <xQueueReceive+0x370>)
   179b2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   179b4:	4b85      	ldr	r3, [pc, #532]	; (17bcc <xQueueReceive+0x374>)
   179b6:	4798      	blx	r3
				return pdPASS;
   179b8:	2301      	movs	r3, #1
   179ba:	e15f      	b.n	17c7c <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   179bc:	687b      	ldr	r3, [r7, #4]
   179be:	2b00      	cmp	r3, #0
   179c0:	d13b      	bne.n	17a3a <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   179c2:	4b82      	ldr	r3, [pc, #520]	; (17bcc <xQueueReceive+0x374>)
   179c4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   179c6:	4b75      	ldr	r3, [pc, #468]	; (17b9c <xQueueReceive+0x344>)
   179c8:	4798      	blx	r3
   179ca:	0003      	movs	r3, r0
   179cc:	0018      	movs	r0, r3
   179ce:	4b74      	ldr	r3, [pc, #464]	; (17ba0 <xQueueReceive+0x348>)
   179d0:	4798      	blx	r3
   179d2:	0003      	movs	r3, r0
   179d4:	001a      	movs	r2, r3
   179d6:	4b73      	ldr	r3, [pc, #460]	; (17ba4 <xQueueReceive+0x34c>)
   179d8:	881b      	ldrh	r3, [r3, #0]
   179da:	4013      	ands	r3, r2
   179dc:	b29b      	uxth	r3, r3
   179de:	2b00      	cmp	r3, #0
   179e0:	d029      	beq.n	17a36 <xQueueReceive+0x1de>
   179e2:	6a3b      	ldr	r3, [r7, #32]
   179e4:	0018      	movs	r0, r3
   179e6:	4b70      	ldr	r3, [pc, #448]	; (17ba8 <xQueueReceive+0x350>)
   179e8:	4798      	blx	r3
   179ea:	0003      	movs	r3, r0
   179ec:	001a      	movs	r2, r3
   179ee:	4b6d      	ldr	r3, [pc, #436]	; (17ba4 <xQueueReceive+0x34c>)
   179f0:	881b      	ldrh	r3, [r3, #0]
   179f2:	4013      	ands	r3, r2
   179f4:	b29b      	uxth	r3, r3
   179f6:	2b00      	cmp	r3, #0
   179f8:	d01d      	beq.n	17a36 <xQueueReceive+0x1de>
   179fa:	6a3b      	ldr	r3, [r7, #32]
   179fc:	0018      	movs	r0, r3
   179fe:	4b6b      	ldr	r3, [pc, #428]	; (17bac <xQueueReceive+0x354>)
   17a00:	4798      	blx	r3
   17a02:	0003      	movs	r3, r0
   17a04:	001a      	movs	r2, r3
   17a06:	4b6a      	ldr	r3, [pc, #424]	; (17bb0 <xQueueReceive+0x358>)
   17a08:	5c9b      	ldrb	r3, [r3, r2]
   17a0a:	3350      	adds	r3, #80	; 0x50
   17a0c:	b2db      	uxtb	r3, r3
   17a0e:	001d      	movs	r5, r3
   17a10:	6a3b      	ldr	r3, [r7, #32]
   17a12:	0018      	movs	r0, r3
   17a14:	4b65      	ldr	r3, [pc, #404]	; (17bac <xQueueReceive+0x354>)
   17a16:	4798      	blx	r3
   17a18:	0003      	movs	r3, r0
   17a1a:	001a      	movs	r2, r3
   17a1c:	4b64      	ldr	r3, [pc, #400]	; (17bb0 <xQueueReceive+0x358>)
   17a1e:	5c9c      	ldrb	r4, [r3, r2]
   17a20:	6a3b      	ldr	r3, [r7, #32]
   17a22:	0018      	movs	r0, r3
   17a24:	4b63      	ldr	r3, [pc, #396]	; (17bb4 <xQueueReceive+0x35c>)
   17a26:	4798      	blx	r3
   17a28:	0003      	movs	r3, r0
   17a2a:	b2db      	uxtb	r3, r3
   17a2c:	001a      	movs	r2, r3
   17a2e:	0021      	movs	r1, r4
   17a30:	0028      	movs	r0, r5
   17a32:	4b61      	ldr	r3, [pc, #388]	; (17bb8 <xQueueReceive+0x360>)
   17a34:	4798      	blx	r3
					return errQUEUE_EMPTY;
   17a36:	2300      	movs	r3, #0
   17a38:	e120      	b.n	17c7c <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   17a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a3c:	2b00      	cmp	r3, #0
   17a3e:	d106      	bne.n	17a4e <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   17a40:	2314      	movs	r3, #20
   17a42:	18fb      	adds	r3, r7, r3
   17a44:	0018      	movs	r0, r3
   17a46:	4b62      	ldr	r3, [pc, #392]	; (17bd0 <xQueueReceive+0x378>)
   17a48:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   17a4a:	2301      	movs	r3, #1
   17a4c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   17a4e:	4b5f      	ldr	r3, [pc, #380]	; (17bcc <xQueueReceive+0x374>)
   17a50:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   17a52:	4b60      	ldr	r3, [pc, #384]	; (17bd4 <xQueueReceive+0x37c>)
   17a54:	4798      	blx	r3
		prvLockQueue( pxQueue );
   17a56:	4b4f      	ldr	r3, [pc, #316]	; (17b94 <xQueueReceive+0x33c>)
   17a58:	4798      	blx	r3
   17a5a:	6a3b      	ldr	r3, [r7, #32]
   17a5c:	2244      	movs	r2, #68	; 0x44
   17a5e:	5c9b      	ldrb	r3, [r3, r2]
   17a60:	b25b      	sxtb	r3, r3
   17a62:	3301      	adds	r3, #1
   17a64:	d103      	bne.n	17a6e <xQueueReceive+0x216>
   17a66:	6a3b      	ldr	r3, [r7, #32]
   17a68:	2244      	movs	r2, #68	; 0x44
   17a6a:	2100      	movs	r1, #0
   17a6c:	5499      	strb	r1, [r3, r2]
   17a6e:	6a3b      	ldr	r3, [r7, #32]
   17a70:	2245      	movs	r2, #69	; 0x45
   17a72:	5c9b      	ldrb	r3, [r3, r2]
   17a74:	b25b      	sxtb	r3, r3
   17a76:	3301      	adds	r3, #1
   17a78:	d103      	bne.n	17a82 <xQueueReceive+0x22a>
   17a7a:	6a3b      	ldr	r3, [r7, #32]
   17a7c:	2245      	movs	r2, #69	; 0x45
   17a7e:	2100      	movs	r1, #0
   17a80:	5499      	strb	r1, [r3, r2]
   17a82:	4b52      	ldr	r3, [pc, #328]	; (17bcc <xQueueReceive+0x374>)
   17a84:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   17a86:	1d3a      	adds	r2, r7, #4
   17a88:	2314      	movs	r3, #20
   17a8a:	18fb      	adds	r3, r7, r3
   17a8c:	0011      	movs	r1, r2
   17a8e:	0018      	movs	r0, r3
   17a90:	4b51      	ldr	r3, [pc, #324]	; (17bd8 <xQueueReceive+0x380>)
   17a92:	4798      	blx	r3
   17a94:	1e03      	subs	r3, r0, #0
   17a96:	d000      	beq.n	17a9a <xQueueReceive+0x242>
   17a98:	e0aa      	b.n	17bf0 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17a9a:	6a3b      	ldr	r3, [r7, #32]
   17a9c:	0018      	movs	r0, r3
   17a9e:	4b4f      	ldr	r3, [pc, #316]	; (17bdc <xQueueReceive+0x384>)
   17aa0:	4798      	blx	r3
   17aa2:	1e03      	subs	r3, r0, #0
   17aa4:	d06d      	beq.n	17b82 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17aa6:	4b3d      	ldr	r3, [pc, #244]	; (17b9c <xQueueReceive+0x344>)
   17aa8:	4798      	blx	r3
   17aaa:	0003      	movs	r3, r0
   17aac:	0018      	movs	r0, r3
   17aae:	4b3c      	ldr	r3, [pc, #240]	; (17ba0 <xQueueReceive+0x348>)
   17ab0:	4798      	blx	r3
   17ab2:	0003      	movs	r3, r0
   17ab4:	001a      	movs	r2, r3
   17ab6:	4b3b      	ldr	r3, [pc, #236]	; (17ba4 <xQueueReceive+0x34c>)
   17ab8:	881b      	ldrh	r3, [r3, #0]
   17aba:	4013      	ands	r3, r2
   17abc:	b29b      	uxth	r3, r3
   17abe:	2b00      	cmp	r3, #0
   17ac0:	d029      	beq.n	17b16 <xQueueReceive+0x2be>
   17ac2:	6a3b      	ldr	r3, [r7, #32]
   17ac4:	0018      	movs	r0, r3
   17ac6:	4b38      	ldr	r3, [pc, #224]	; (17ba8 <xQueueReceive+0x350>)
   17ac8:	4798      	blx	r3
   17aca:	0003      	movs	r3, r0
   17acc:	001a      	movs	r2, r3
   17ace:	4b35      	ldr	r3, [pc, #212]	; (17ba4 <xQueueReceive+0x34c>)
   17ad0:	881b      	ldrh	r3, [r3, #0]
   17ad2:	4013      	ands	r3, r2
   17ad4:	b29b      	uxth	r3, r3
   17ad6:	2b00      	cmp	r3, #0
   17ad8:	d01d      	beq.n	17b16 <xQueueReceive+0x2be>
   17ada:	6a3b      	ldr	r3, [r7, #32]
   17adc:	0018      	movs	r0, r3
   17ade:	4b33      	ldr	r3, [pc, #204]	; (17bac <xQueueReceive+0x354>)
   17ae0:	4798      	blx	r3
   17ae2:	0003      	movs	r3, r0
   17ae4:	001a      	movs	r2, r3
   17ae6:	4b32      	ldr	r3, [pc, #200]	; (17bb0 <xQueueReceive+0x358>)
   17ae8:	5c9b      	ldrb	r3, [r3, r2]
   17aea:	3368      	adds	r3, #104	; 0x68
   17aec:	b2db      	uxtb	r3, r3
   17aee:	001d      	movs	r5, r3
   17af0:	6a3b      	ldr	r3, [r7, #32]
   17af2:	0018      	movs	r0, r3
   17af4:	4b2d      	ldr	r3, [pc, #180]	; (17bac <xQueueReceive+0x354>)
   17af6:	4798      	blx	r3
   17af8:	0003      	movs	r3, r0
   17afa:	001a      	movs	r2, r3
   17afc:	4b2c      	ldr	r3, [pc, #176]	; (17bb0 <xQueueReceive+0x358>)
   17afe:	5c9c      	ldrb	r4, [r3, r2]
   17b00:	6a3b      	ldr	r3, [r7, #32]
   17b02:	0018      	movs	r0, r3
   17b04:	4b2b      	ldr	r3, [pc, #172]	; (17bb4 <xQueueReceive+0x35c>)
   17b06:	4798      	blx	r3
   17b08:	0003      	movs	r3, r0
   17b0a:	b2db      	uxtb	r3, r3
   17b0c:	001a      	movs	r2, r3
   17b0e:	0021      	movs	r1, r4
   17b10:	0028      	movs	r0, r5
   17b12:	4b29      	ldr	r3, [pc, #164]	; (17bb8 <xQueueReceive+0x360>)
   17b14:	4798      	blx	r3
   17b16:	6a3b      	ldr	r3, [r7, #32]
   17b18:	0018      	movs	r0, r3
   17b1a:	4b24      	ldr	r3, [pc, #144]	; (17bac <xQueueReceive+0x354>)
   17b1c:	4798      	blx	r3
   17b1e:	0003      	movs	r3, r0
   17b20:	001a      	movs	r2, r3
   17b22:	4b23      	ldr	r3, [pc, #140]	; (17bb0 <xQueueReceive+0x358>)
   17b24:	5c9b      	ldrb	r3, [r3, r2]
   17b26:	2b02      	cmp	r3, #2
   17b28:	d018      	beq.n	17b5c <xQueueReceive+0x304>
   17b2a:	4b1c      	ldr	r3, [pc, #112]	; (17b9c <xQueueReceive+0x344>)
   17b2c:	4798      	blx	r3
   17b2e:	0003      	movs	r3, r0
   17b30:	0018      	movs	r0, r3
   17b32:	4b1b      	ldr	r3, [pc, #108]	; (17ba0 <xQueueReceive+0x348>)
   17b34:	4798      	blx	r3
   17b36:	0003      	movs	r3, r0
   17b38:	001a      	movs	r2, r3
   17b3a:	4b1a      	ldr	r3, [pc, #104]	; (17ba4 <xQueueReceive+0x34c>)
   17b3c:	881b      	ldrh	r3, [r3, #0]
   17b3e:	4013      	ands	r3, r2
   17b40:	b29b      	uxth	r3, r3
   17b42:	2b00      	cmp	r3, #0
   17b44:	d00a      	beq.n	17b5c <xQueueReceive+0x304>
   17b46:	4b15      	ldr	r3, [pc, #84]	; (17b9c <xQueueReceive+0x344>)
   17b48:	4798      	blx	r3
   17b4a:	0003      	movs	r3, r0
   17b4c:	0018      	movs	r0, r3
   17b4e:	4b1b      	ldr	r3, [pc, #108]	; (17bbc <xQueueReceive+0x364>)
   17b50:	4798      	blx	r3
   17b52:	0003      	movs	r3, r0
   17b54:	b2db      	uxtb	r3, r3
   17b56:	0018      	movs	r0, r3
   17b58:	4b21      	ldr	r3, [pc, #132]	; (17be0 <xQueueReceive+0x388>)
   17b5a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   17b5c:	6a3b      	ldr	r3, [r7, #32]
   17b5e:	3324      	adds	r3, #36	; 0x24
   17b60:	687a      	ldr	r2, [r7, #4]
   17b62:	0011      	movs	r1, r2
   17b64:	0018      	movs	r0, r3
   17b66:	4b1f      	ldr	r3, [pc, #124]	; (17be4 <xQueueReceive+0x38c>)
   17b68:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   17b6a:	6a3b      	ldr	r3, [r7, #32]
   17b6c:	0018      	movs	r0, r3
   17b6e:	4b1e      	ldr	r3, [pc, #120]	; (17be8 <xQueueReceive+0x390>)
   17b70:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   17b72:	4b1e      	ldr	r3, [pc, #120]	; (17bec <xQueueReceive+0x394>)
   17b74:	4798      	blx	r3
   17b76:	1e03      	subs	r3, r0, #0
   17b78:	d000      	beq.n	17b7c <xQueueReceive+0x324>
   17b7a:	e698      	b.n	178ae <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   17b7c:	4b12      	ldr	r3, [pc, #72]	; (17bc8 <xQueueReceive+0x370>)
   17b7e:	4798      	blx	r3
   17b80:	e695      	b.n	178ae <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   17b82:	6a3b      	ldr	r3, [r7, #32]
   17b84:	0018      	movs	r0, r3
   17b86:	4b18      	ldr	r3, [pc, #96]	; (17be8 <xQueueReceive+0x390>)
   17b88:	4798      	blx	r3
				( void ) xTaskResumeAll();
   17b8a:	4b18      	ldr	r3, [pc, #96]	; (17bec <xQueueReceive+0x394>)
   17b8c:	4798      	blx	r3
   17b8e:	e68e      	b.n	178ae <xQueueReceive+0x56>
   17b90:	0001972d 	.word	0x0001972d
   17b94:	00016a09 	.word	0x00016a09
   17b98:	000182b9 	.word	0x000182b9
   17b9c:	00014c9d 	.word	0x00014c9d
   17ba0:	00014a01 	.word	0x00014a01
   17ba4:	200000b4 	.word	0x200000b4
   17ba8:	00014ac1 	.word	0x00014ac1
   17bac:	000149c1 	.word	0x000149c1
   17bb0:	200000a8 	.word	0x200000a8
   17bb4:	00014aa1 	.word	0x00014aa1
   17bb8:	000153f9 	.word	0x000153f9
   17bbc:	000149e1 	.word	0x000149e1
   17bc0:	00015a55 	.word	0x00015a55
   17bc4:	0001929d 	.word	0x0001929d
   17bc8:	000169f1 	.word	0x000169f1
   17bcc:	00016a2d 	.word	0x00016a2d
   17bd0:	000193dd 	.word	0x000193dd
   17bd4:	00018cc5 	.word	0x00018cc5
   17bd8:	00019405 	.word	0x00019405
   17bdc:	000183f9 	.word	0x000183f9
   17be0:	00015b91 	.word	0x00015b91
   17be4:	00019179 	.word	0x00019179
   17be8:	00018309 	.word	0x00018309
   17bec:	00018cdd 	.word	0x00018cdd
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   17bf0:	6a3b      	ldr	r3, [r7, #32]
   17bf2:	0018      	movs	r0, r3
   17bf4:	4b23      	ldr	r3, [pc, #140]	; (17c84 <xQueueReceive+0x42c>)
   17bf6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   17bf8:	4b23      	ldr	r3, [pc, #140]	; (17c88 <xQueueReceive+0x430>)
   17bfa:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17bfc:	6a3b      	ldr	r3, [r7, #32]
   17bfe:	0018      	movs	r0, r3
   17c00:	4b22      	ldr	r3, [pc, #136]	; (17c8c <xQueueReceive+0x434>)
   17c02:	4798      	blx	r3
   17c04:	1e03      	subs	r3, r0, #0
   17c06:	d100      	bne.n	17c0a <xQueueReceive+0x3b2>
   17c08:	e651      	b.n	178ae <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   17c0a:	4b21      	ldr	r3, [pc, #132]	; (17c90 <xQueueReceive+0x438>)
   17c0c:	4798      	blx	r3
   17c0e:	0003      	movs	r3, r0
   17c10:	0018      	movs	r0, r3
   17c12:	4b20      	ldr	r3, [pc, #128]	; (17c94 <xQueueReceive+0x43c>)
   17c14:	4798      	blx	r3
   17c16:	0003      	movs	r3, r0
   17c18:	001a      	movs	r2, r3
   17c1a:	4b1f      	ldr	r3, [pc, #124]	; (17c98 <xQueueReceive+0x440>)
   17c1c:	881b      	ldrh	r3, [r3, #0]
   17c1e:	4013      	ands	r3, r2
   17c20:	b29b      	uxth	r3, r3
   17c22:	2b00      	cmp	r3, #0
   17c24:	d029      	beq.n	17c7a <xQueueReceive+0x422>
   17c26:	6a3b      	ldr	r3, [r7, #32]
   17c28:	0018      	movs	r0, r3
   17c2a:	4b1c      	ldr	r3, [pc, #112]	; (17c9c <xQueueReceive+0x444>)
   17c2c:	4798      	blx	r3
   17c2e:	0003      	movs	r3, r0
   17c30:	001a      	movs	r2, r3
   17c32:	4b19      	ldr	r3, [pc, #100]	; (17c98 <xQueueReceive+0x440>)
   17c34:	881b      	ldrh	r3, [r3, #0]
   17c36:	4013      	ands	r3, r2
   17c38:	b29b      	uxth	r3, r3
   17c3a:	2b00      	cmp	r3, #0
   17c3c:	d01d      	beq.n	17c7a <xQueueReceive+0x422>
   17c3e:	6a3b      	ldr	r3, [r7, #32]
   17c40:	0018      	movs	r0, r3
   17c42:	4b17      	ldr	r3, [pc, #92]	; (17ca0 <xQueueReceive+0x448>)
   17c44:	4798      	blx	r3
   17c46:	0003      	movs	r3, r0
   17c48:	001a      	movs	r2, r3
   17c4a:	4b16      	ldr	r3, [pc, #88]	; (17ca4 <xQueueReceive+0x44c>)
   17c4c:	5c9b      	ldrb	r3, [r3, r2]
   17c4e:	3350      	adds	r3, #80	; 0x50
   17c50:	b2db      	uxtb	r3, r3
   17c52:	001d      	movs	r5, r3
   17c54:	6a3b      	ldr	r3, [r7, #32]
   17c56:	0018      	movs	r0, r3
   17c58:	4b11      	ldr	r3, [pc, #68]	; (17ca0 <xQueueReceive+0x448>)
   17c5a:	4798      	blx	r3
   17c5c:	0003      	movs	r3, r0
   17c5e:	001a      	movs	r2, r3
   17c60:	4b10      	ldr	r3, [pc, #64]	; (17ca4 <xQueueReceive+0x44c>)
   17c62:	5c9c      	ldrb	r4, [r3, r2]
   17c64:	6a3b      	ldr	r3, [r7, #32]
   17c66:	0018      	movs	r0, r3
   17c68:	4b0f      	ldr	r3, [pc, #60]	; (17ca8 <xQueueReceive+0x450>)
   17c6a:	4798      	blx	r3
   17c6c:	0003      	movs	r3, r0
   17c6e:	b2db      	uxtb	r3, r3
   17c70:	001a      	movs	r2, r3
   17c72:	0021      	movs	r1, r4
   17c74:	0028      	movs	r0, r5
   17c76:	4b0d      	ldr	r3, [pc, #52]	; (17cac <xQueueReceive+0x454>)
   17c78:	4798      	blx	r3
				return errQUEUE_EMPTY;
   17c7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   17c7c:	0018      	movs	r0, r3
   17c7e:	46bd      	mov	sp, r7
   17c80:	b00a      	add	sp, #40	; 0x28
   17c82:	bdb0      	pop	{r4, r5, r7, pc}
   17c84:	00018309 	.word	0x00018309
   17c88:	00018cdd 	.word	0x00018cdd
   17c8c:	000183f9 	.word	0x000183f9
   17c90:	00014c9d 	.word	0x00014c9d
   17c94:	00014a01 	.word	0x00014a01
   17c98:	200000b4 	.word	0x200000b4
   17c9c:	00014ac1 	.word	0x00014ac1
   17ca0:	000149c1 	.word	0x000149c1
   17ca4:	200000a8 	.word	0x200000a8
   17ca8:	00014aa1 	.word	0x00014aa1
   17cac:	000153f9 	.word	0x000153f9

00017cb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   17cb0:	b5b0      	push	{r4, r5, r7, lr}
   17cb2:	b08a      	sub	sp, #40	; 0x28
   17cb4:	af00      	add	r7, sp, #0
   17cb6:	6078      	str	r0, [r7, #4]
   17cb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   17cba:	2300      	movs	r3, #0
   17cbc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   17cbe:	687b      	ldr	r3, [r7, #4]
   17cc0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   17cc2:	2300      	movs	r3, #0
   17cc4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   17cc6:	69fb      	ldr	r3, [r7, #28]
   17cc8:	2b00      	cmp	r3, #0
   17cca:	d101      	bne.n	17cd0 <xQueueSemaphoreTake+0x20>
   17ccc:	b672      	cpsid	i
   17cce:	e7fe      	b.n	17cce <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   17cd0:	69fb      	ldr	r3, [r7, #28]
   17cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17cd4:	2b00      	cmp	r3, #0
   17cd6:	d001      	beq.n	17cdc <xQueueSemaphoreTake+0x2c>
   17cd8:	b672      	cpsid	i
   17cda:	e7fe      	b.n	17cda <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   17cdc:	4bcb      	ldr	r3, [pc, #812]	; (1800c <xQueueSemaphoreTake+0x35c>)
   17cde:	4798      	blx	r3
   17ce0:	1e03      	subs	r3, r0, #0
   17ce2:	d102      	bne.n	17cea <xQueueSemaphoreTake+0x3a>
   17ce4:	683b      	ldr	r3, [r7, #0]
   17ce6:	2b00      	cmp	r3, #0
   17ce8:	d101      	bne.n	17cee <xQueueSemaphoreTake+0x3e>
   17cea:	2301      	movs	r3, #1
   17cec:	e000      	b.n	17cf0 <xQueueSemaphoreTake+0x40>
   17cee:	2300      	movs	r3, #0
   17cf0:	2b00      	cmp	r3, #0
   17cf2:	d101      	bne.n	17cf8 <xQueueSemaphoreTake+0x48>
   17cf4:	b672      	cpsid	i
   17cf6:	e7fe      	b.n	17cf6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   17cf8:	4bc5      	ldr	r3, [pc, #788]	; (18010 <xQueueSemaphoreTake+0x360>)
   17cfa:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   17cfc:	69fb      	ldr	r3, [r7, #28]
   17cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17d00:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   17d02:	69bb      	ldr	r3, [r7, #24]
   17d04:	2b00      	cmp	r3, #0
   17d06:	d100      	bne.n	17d0a <xQueueSemaphoreTake+0x5a>
   17d08:	e080      	b.n	17e0c <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   17d0a:	4bc2      	ldr	r3, [pc, #776]	; (18014 <xQueueSemaphoreTake+0x364>)
   17d0c:	4798      	blx	r3
   17d0e:	0003      	movs	r3, r0
   17d10:	0018      	movs	r0, r3
   17d12:	4bc1      	ldr	r3, [pc, #772]	; (18018 <xQueueSemaphoreTake+0x368>)
   17d14:	4798      	blx	r3
   17d16:	0003      	movs	r3, r0
   17d18:	001a      	movs	r2, r3
   17d1a:	4bc0      	ldr	r3, [pc, #768]	; (1801c <xQueueSemaphoreTake+0x36c>)
   17d1c:	881b      	ldrh	r3, [r3, #0]
   17d1e:	4013      	ands	r3, r2
   17d20:	b29b      	uxth	r3, r3
   17d22:	2b00      	cmp	r3, #0
   17d24:	d029      	beq.n	17d7a <xQueueSemaphoreTake+0xca>
   17d26:	69fb      	ldr	r3, [r7, #28]
   17d28:	0018      	movs	r0, r3
   17d2a:	4bbd      	ldr	r3, [pc, #756]	; (18020 <xQueueSemaphoreTake+0x370>)
   17d2c:	4798      	blx	r3
   17d2e:	0003      	movs	r3, r0
   17d30:	001a      	movs	r2, r3
   17d32:	4bba      	ldr	r3, [pc, #744]	; (1801c <xQueueSemaphoreTake+0x36c>)
   17d34:	881b      	ldrh	r3, [r3, #0]
   17d36:	4013      	ands	r3, r2
   17d38:	b29b      	uxth	r3, r3
   17d3a:	2b00      	cmp	r3, #0
   17d3c:	d01d      	beq.n	17d7a <xQueueSemaphoreTake+0xca>
   17d3e:	69fb      	ldr	r3, [r7, #28]
   17d40:	0018      	movs	r0, r3
   17d42:	4bb8      	ldr	r3, [pc, #736]	; (18024 <xQueueSemaphoreTake+0x374>)
   17d44:	4798      	blx	r3
   17d46:	0003      	movs	r3, r0
   17d48:	001a      	movs	r2, r3
   17d4a:	4bb7      	ldr	r3, [pc, #732]	; (18028 <xQueueSemaphoreTake+0x378>)
   17d4c:	5c9b      	ldrb	r3, [r3, r2]
   17d4e:	3328      	adds	r3, #40	; 0x28
   17d50:	b2db      	uxtb	r3, r3
   17d52:	001d      	movs	r5, r3
   17d54:	69fb      	ldr	r3, [r7, #28]
   17d56:	0018      	movs	r0, r3
   17d58:	4bb2      	ldr	r3, [pc, #712]	; (18024 <xQueueSemaphoreTake+0x374>)
   17d5a:	4798      	blx	r3
   17d5c:	0003      	movs	r3, r0
   17d5e:	001a      	movs	r2, r3
   17d60:	4bb1      	ldr	r3, [pc, #708]	; (18028 <xQueueSemaphoreTake+0x378>)
   17d62:	5c9c      	ldrb	r4, [r3, r2]
   17d64:	69fb      	ldr	r3, [r7, #28]
   17d66:	0018      	movs	r0, r3
   17d68:	4bb0      	ldr	r3, [pc, #704]	; (1802c <xQueueSemaphoreTake+0x37c>)
   17d6a:	4798      	blx	r3
   17d6c:	0003      	movs	r3, r0
   17d6e:	b2db      	uxtb	r3, r3
   17d70:	001a      	movs	r2, r3
   17d72:	0021      	movs	r1, r4
   17d74:	0028      	movs	r0, r5
   17d76:	4bae      	ldr	r3, [pc, #696]	; (18030 <xQueueSemaphoreTake+0x380>)
   17d78:	4798      	blx	r3
   17d7a:	69fb      	ldr	r3, [r7, #28]
   17d7c:	0018      	movs	r0, r3
   17d7e:	4ba9      	ldr	r3, [pc, #676]	; (18024 <xQueueSemaphoreTake+0x374>)
   17d80:	4798      	blx	r3
   17d82:	0003      	movs	r3, r0
   17d84:	001a      	movs	r2, r3
   17d86:	4ba8      	ldr	r3, [pc, #672]	; (18028 <xQueueSemaphoreTake+0x378>)
   17d88:	5c9c      	ldrb	r4, [r3, r2]
   17d8a:	69fb      	ldr	r3, [r7, #28]
   17d8c:	0018      	movs	r0, r3
   17d8e:	4ba7      	ldr	r3, [pc, #668]	; (1802c <xQueueSemaphoreTake+0x37c>)
   17d90:	4798      	blx	r3
   17d92:	0003      	movs	r3, r0
   17d94:	b2dd      	uxtb	r5, r3
   17d96:	69fb      	ldr	r3, [r7, #28]
   17d98:	0018      	movs	r0, r3
   17d9a:	4ba2      	ldr	r3, [pc, #648]	; (18024 <xQueueSemaphoreTake+0x374>)
   17d9c:	4798      	blx	r3
   17d9e:	0003      	movs	r3, r0
   17da0:	001a      	movs	r2, r3
   17da2:	4ba1      	ldr	r3, [pc, #644]	; (18028 <xQueueSemaphoreTake+0x378>)
   17da4:	5c9b      	ldrb	r3, [r3, r2]
   17da6:	2b02      	cmp	r3, #2
   17da8:	d108      	bne.n	17dbc <xQueueSemaphoreTake+0x10c>
   17daa:	4b9a      	ldr	r3, [pc, #616]	; (18014 <xQueueSemaphoreTake+0x364>)
   17dac:	4798      	blx	r3
   17dae:	0003      	movs	r3, r0
   17db0:	0018      	movs	r0, r3
   17db2:	4ba0      	ldr	r3, [pc, #640]	; (18034 <xQueueSemaphoreTake+0x384>)
   17db4:	4798      	blx	r3
   17db6:	0003      	movs	r3, r0
   17db8:	b2db      	uxtb	r3, r3
   17dba:	e004      	b.n	17dc6 <xQueueSemaphoreTake+0x116>
   17dbc:	69fb      	ldr	r3, [r7, #28]
   17dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17dc0:	b2db      	uxtb	r3, r3
   17dc2:	3b01      	subs	r3, #1
   17dc4:	b2db      	uxtb	r3, r3
   17dc6:	001a      	movs	r2, r3
   17dc8:	0029      	movs	r1, r5
   17dca:	0020      	movs	r0, r4
   17dcc:	4b9a      	ldr	r3, [pc, #616]	; (18038 <xQueueSemaphoreTake+0x388>)
   17dce:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   17dd0:	69bb      	ldr	r3, [r7, #24]
   17dd2:	1e5a      	subs	r2, r3, #1
   17dd4:	69fb      	ldr	r3, [r7, #28]
   17dd6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   17dd8:	69fb      	ldr	r3, [r7, #28]
   17dda:	681b      	ldr	r3, [r3, #0]
   17ddc:	2b00      	cmp	r3, #0
   17dde:	d104      	bne.n	17dea <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   17de0:	4b96      	ldr	r3, [pc, #600]	; (1803c <xQueueSemaphoreTake+0x38c>)
   17de2:	4798      	blx	r3
   17de4:	0002      	movs	r2, r0
   17de6:	69fb      	ldr	r3, [r7, #28]
   17de8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   17dea:	69fb      	ldr	r3, [r7, #28]
   17dec:	691b      	ldr	r3, [r3, #16]
   17dee:	2b00      	cmp	r3, #0
   17df0:	d008      	beq.n	17e04 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   17df2:	69fb      	ldr	r3, [r7, #28]
   17df4:	3310      	adds	r3, #16
   17df6:	0018      	movs	r0, r3
   17df8:	4b91      	ldr	r3, [pc, #580]	; (18040 <xQueueSemaphoreTake+0x390>)
   17dfa:	4798      	blx	r3
   17dfc:	1e03      	subs	r3, r0, #0
   17dfe:	d001      	beq.n	17e04 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   17e00:	4b90      	ldr	r3, [pc, #576]	; (18044 <xQueueSemaphoreTake+0x394>)
   17e02:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   17e04:	4b90      	ldr	r3, [pc, #576]	; (18048 <xQueueSemaphoreTake+0x398>)
   17e06:	4798      	blx	r3
				return pdPASS;
   17e08:	2301      	movs	r3, #1
   17e0a:	e18b      	b.n	18124 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   17e0c:	683b      	ldr	r3, [r7, #0]
   17e0e:	2b00      	cmp	r3, #0
   17e10:	d140      	bne.n	17e94 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   17e12:	6a3b      	ldr	r3, [r7, #32]
   17e14:	2b00      	cmp	r3, #0
   17e16:	d001      	beq.n	17e1c <xQueueSemaphoreTake+0x16c>
   17e18:	b672      	cpsid	i
   17e1a:	e7fe      	b.n	17e1a <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   17e1c:	4b8a      	ldr	r3, [pc, #552]	; (18048 <xQueueSemaphoreTake+0x398>)
   17e1e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   17e20:	4b7c      	ldr	r3, [pc, #496]	; (18014 <xQueueSemaphoreTake+0x364>)
   17e22:	4798      	blx	r3
   17e24:	0003      	movs	r3, r0
   17e26:	0018      	movs	r0, r3
   17e28:	4b7b      	ldr	r3, [pc, #492]	; (18018 <xQueueSemaphoreTake+0x368>)
   17e2a:	4798      	blx	r3
   17e2c:	0003      	movs	r3, r0
   17e2e:	001a      	movs	r2, r3
   17e30:	4b7a      	ldr	r3, [pc, #488]	; (1801c <xQueueSemaphoreTake+0x36c>)
   17e32:	881b      	ldrh	r3, [r3, #0]
   17e34:	4013      	ands	r3, r2
   17e36:	b29b      	uxth	r3, r3
   17e38:	2b00      	cmp	r3, #0
   17e3a:	d029      	beq.n	17e90 <xQueueSemaphoreTake+0x1e0>
   17e3c:	69fb      	ldr	r3, [r7, #28]
   17e3e:	0018      	movs	r0, r3
   17e40:	4b77      	ldr	r3, [pc, #476]	; (18020 <xQueueSemaphoreTake+0x370>)
   17e42:	4798      	blx	r3
   17e44:	0003      	movs	r3, r0
   17e46:	001a      	movs	r2, r3
   17e48:	4b74      	ldr	r3, [pc, #464]	; (1801c <xQueueSemaphoreTake+0x36c>)
   17e4a:	881b      	ldrh	r3, [r3, #0]
   17e4c:	4013      	ands	r3, r2
   17e4e:	b29b      	uxth	r3, r3
   17e50:	2b00      	cmp	r3, #0
   17e52:	d01d      	beq.n	17e90 <xQueueSemaphoreTake+0x1e0>
   17e54:	69fb      	ldr	r3, [r7, #28]
   17e56:	0018      	movs	r0, r3
   17e58:	4b72      	ldr	r3, [pc, #456]	; (18024 <xQueueSemaphoreTake+0x374>)
   17e5a:	4798      	blx	r3
   17e5c:	0003      	movs	r3, r0
   17e5e:	001a      	movs	r2, r3
   17e60:	4b71      	ldr	r3, [pc, #452]	; (18028 <xQueueSemaphoreTake+0x378>)
   17e62:	5c9b      	ldrb	r3, [r3, r2]
   17e64:	3350      	adds	r3, #80	; 0x50
   17e66:	b2db      	uxtb	r3, r3
   17e68:	001d      	movs	r5, r3
   17e6a:	69fb      	ldr	r3, [r7, #28]
   17e6c:	0018      	movs	r0, r3
   17e6e:	4b6d      	ldr	r3, [pc, #436]	; (18024 <xQueueSemaphoreTake+0x374>)
   17e70:	4798      	blx	r3
   17e72:	0003      	movs	r3, r0
   17e74:	001a      	movs	r2, r3
   17e76:	4b6c      	ldr	r3, [pc, #432]	; (18028 <xQueueSemaphoreTake+0x378>)
   17e78:	5c9c      	ldrb	r4, [r3, r2]
   17e7a:	69fb      	ldr	r3, [r7, #28]
   17e7c:	0018      	movs	r0, r3
   17e7e:	4b6b      	ldr	r3, [pc, #428]	; (1802c <xQueueSemaphoreTake+0x37c>)
   17e80:	4798      	blx	r3
   17e82:	0003      	movs	r3, r0
   17e84:	b2db      	uxtb	r3, r3
   17e86:	001a      	movs	r2, r3
   17e88:	0021      	movs	r1, r4
   17e8a:	0028      	movs	r0, r5
   17e8c:	4b68      	ldr	r3, [pc, #416]	; (18030 <xQueueSemaphoreTake+0x380>)
   17e8e:	4798      	blx	r3
					return errQUEUE_EMPTY;
   17e90:	2300      	movs	r3, #0
   17e92:	e147      	b.n	18124 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   17e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17e96:	2b00      	cmp	r3, #0
   17e98:	d106      	bne.n	17ea8 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   17e9a:	230c      	movs	r3, #12
   17e9c:	18fb      	adds	r3, r7, r3
   17e9e:	0018      	movs	r0, r3
   17ea0:	4b6a      	ldr	r3, [pc, #424]	; (1804c <xQueueSemaphoreTake+0x39c>)
   17ea2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   17ea4:	2301      	movs	r3, #1
   17ea6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   17ea8:	4b67      	ldr	r3, [pc, #412]	; (18048 <xQueueSemaphoreTake+0x398>)
   17eaa:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   17eac:	4b68      	ldr	r3, [pc, #416]	; (18050 <xQueueSemaphoreTake+0x3a0>)
   17eae:	4798      	blx	r3
		prvLockQueue( pxQueue );
   17eb0:	4b57      	ldr	r3, [pc, #348]	; (18010 <xQueueSemaphoreTake+0x360>)
   17eb2:	4798      	blx	r3
   17eb4:	69fb      	ldr	r3, [r7, #28]
   17eb6:	2244      	movs	r2, #68	; 0x44
   17eb8:	5c9b      	ldrb	r3, [r3, r2]
   17eba:	b25b      	sxtb	r3, r3
   17ebc:	3301      	adds	r3, #1
   17ebe:	d103      	bne.n	17ec8 <xQueueSemaphoreTake+0x218>
   17ec0:	69fb      	ldr	r3, [r7, #28]
   17ec2:	2244      	movs	r2, #68	; 0x44
   17ec4:	2100      	movs	r1, #0
   17ec6:	5499      	strb	r1, [r3, r2]
   17ec8:	69fb      	ldr	r3, [r7, #28]
   17eca:	2245      	movs	r2, #69	; 0x45
   17ecc:	5c9b      	ldrb	r3, [r3, r2]
   17ece:	b25b      	sxtb	r3, r3
   17ed0:	3301      	adds	r3, #1
   17ed2:	d103      	bne.n	17edc <xQueueSemaphoreTake+0x22c>
   17ed4:	69fb      	ldr	r3, [r7, #28]
   17ed6:	2245      	movs	r2, #69	; 0x45
   17ed8:	2100      	movs	r1, #0
   17eda:	5499      	strb	r1, [r3, r2]
   17edc:	4b5a      	ldr	r3, [pc, #360]	; (18048 <xQueueSemaphoreTake+0x398>)
   17ede:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   17ee0:	003a      	movs	r2, r7
   17ee2:	230c      	movs	r3, #12
   17ee4:	18fb      	adds	r3, r7, r3
   17ee6:	0011      	movs	r1, r2
   17ee8:	0018      	movs	r0, r3
   17eea:	4b5a      	ldr	r3, [pc, #360]	; (18054 <xQueueSemaphoreTake+0x3a4>)
   17eec:	4798      	blx	r3
   17eee:	1e03      	subs	r3, r0, #0
   17ef0:	d000      	beq.n	17ef4 <xQueueSemaphoreTake+0x244>
   17ef2:	e0bd      	b.n	18070 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17ef4:	69fb      	ldr	r3, [r7, #28]
   17ef6:	0018      	movs	r0, r3
   17ef8:	4b57      	ldr	r3, [pc, #348]	; (18058 <xQueueSemaphoreTake+0x3a8>)
   17efa:	4798      	blx	r3
   17efc:	1e03      	subs	r3, r0, #0
   17efe:	d100      	bne.n	17f02 <xQueueSemaphoreTake+0x252>
   17f00:	e07c      	b.n	17ffc <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17f02:	4b44      	ldr	r3, [pc, #272]	; (18014 <xQueueSemaphoreTake+0x364>)
   17f04:	4798      	blx	r3
   17f06:	0003      	movs	r3, r0
   17f08:	0018      	movs	r0, r3
   17f0a:	4b43      	ldr	r3, [pc, #268]	; (18018 <xQueueSemaphoreTake+0x368>)
   17f0c:	4798      	blx	r3
   17f0e:	0003      	movs	r3, r0
   17f10:	001a      	movs	r2, r3
   17f12:	4b42      	ldr	r3, [pc, #264]	; (1801c <xQueueSemaphoreTake+0x36c>)
   17f14:	881b      	ldrh	r3, [r3, #0]
   17f16:	4013      	ands	r3, r2
   17f18:	b29b      	uxth	r3, r3
   17f1a:	2b00      	cmp	r3, #0
   17f1c:	d029      	beq.n	17f72 <xQueueSemaphoreTake+0x2c2>
   17f1e:	69fb      	ldr	r3, [r7, #28]
   17f20:	0018      	movs	r0, r3
   17f22:	4b3f      	ldr	r3, [pc, #252]	; (18020 <xQueueSemaphoreTake+0x370>)
   17f24:	4798      	blx	r3
   17f26:	0003      	movs	r3, r0
   17f28:	001a      	movs	r2, r3
   17f2a:	4b3c      	ldr	r3, [pc, #240]	; (1801c <xQueueSemaphoreTake+0x36c>)
   17f2c:	881b      	ldrh	r3, [r3, #0]
   17f2e:	4013      	ands	r3, r2
   17f30:	b29b      	uxth	r3, r3
   17f32:	2b00      	cmp	r3, #0
   17f34:	d01d      	beq.n	17f72 <xQueueSemaphoreTake+0x2c2>
   17f36:	69fb      	ldr	r3, [r7, #28]
   17f38:	0018      	movs	r0, r3
   17f3a:	4b3a      	ldr	r3, [pc, #232]	; (18024 <xQueueSemaphoreTake+0x374>)
   17f3c:	4798      	blx	r3
   17f3e:	0003      	movs	r3, r0
   17f40:	001a      	movs	r2, r3
   17f42:	4b39      	ldr	r3, [pc, #228]	; (18028 <xQueueSemaphoreTake+0x378>)
   17f44:	5c9b      	ldrb	r3, [r3, r2]
   17f46:	3368      	adds	r3, #104	; 0x68
   17f48:	b2db      	uxtb	r3, r3
   17f4a:	001d      	movs	r5, r3
   17f4c:	69fb      	ldr	r3, [r7, #28]
   17f4e:	0018      	movs	r0, r3
   17f50:	4b34      	ldr	r3, [pc, #208]	; (18024 <xQueueSemaphoreTake+0x374>)
   17f52:	4798      	blx	r3
   17f54:	0003      	movs	r3, r0
   17f56:	001a      	movs	r2, r3
   17f58:	4b33      	ldr	r3, [pc, #204]	; (18028 <xQueueSemaphoreTake+0x378>)
   17f5a:	5c9c      	ldrb	r4, [r3, r2]
   17f5c:	69fb      	ldr	r3, [r7, #28]
   17f5e:	0018      	movs	r0, r3
   17f60:	4b32      	ldr	r3, [pc, #200]	; (1802c <xQueueSemaphoreTake+0x37c>)
   17f62:	4798      	blx	r3
   17f64:	0003      	movs	r3, r0
   17f66:	b2db      	uxtb	r3, r3
   17f68:	001a      	movs	r2, r3
   17f6a:	0021      	movs	r1, r4
   17f6c:	0028      	movs	r0, r5
   17f6e:	4b30      	ldr	r3, [pc, #192]	; (18030 <xQueueSemaphoreTake+0x380>)
   17f70:	4798      	blx	r3
   17f72:	69fb      	ldr	r3, [r7, #28]
   17f74:	0018      	movs	r0, r3
   17f76:	4b2b      	ldr	r3, [pc, #172]	; (18024 <xQueueSemaphoreTake+0x374>)
   17f78:	4798      	blx	r3
   17f7a:	0003      	movs	r3, r0
   17f7c:	001a      	movs	r2, r3
   17f7e:	4b2a      	ldr	r3, [pc, #168]	; (18028 <xQueueSemaphoreTake+0x378>)
   17f80:	5c9b      	ldrb	r3, [r3, r2]
   17f82:	2b02      	cmp	r3, #2
   17f84:	d018      	beq.n	17fb8 <xQueueSemaphoreTake+0x308>
   17f86:	4b23      	ldr	r3, [pc, #140]	; (18014 <xQueueSemaphoreTake+0x364>)
   17f88:	4798      	blx	r3
   17f8a:	0003      	movs	r3, r0
   17f8c:	0018      	movs	r0, r3
   17f8e:	4b22      	ldr	r3, [pc, #136]	; (18018 <xQueueSemaphoreTake+0x368>)
   17f90:	4798      	blx	r3
   17f92:	0003      	movs	r3, r0
   17f94:	001a      	movs	r2, r3
   17f96:	4b21      	ldr	r3, [pc, #132]	; (1801c <xQueueSemaphoreTake+0x36c>)
   17f98:	881b      	ldrh	r3, [r3, #0]
   17f9a:	4013      	ands	r3, r2
   17f9c:	b29b      	uxth	r3, r3
   17f9e:	2b00      	cmp	r3, #0
   17fa0:	d00a      	beq.n	17fb8 <xQueueSemaphoreTake+0x308>
   17fa2:	4b1c      	ldr	r3, [pc, #112]	; (18014 <xQueueSemaphoreTake+0x364>)
   17fa4:	4798      	blx	r3
   17fa6:	0003      	movs	r3, r0
   17fa8:	0018      	movs	r0, r3
   17faa:	4b22      	ldr	r3, [pc, #136]	; (18034 <xQueueSemaphoreTake+0x384>)
   17fac:	4798      	blx	r3
   17fae:	0003      	movs	r3, r0
   17fb0:	b2db      	uxtb	r3, r3
   17fb2:	0018      	movs	r0, r3
   17fb4:	4b29      	ldr	r3, [pc, #164]	; (1805c <xQueueSemaphoreTake+0x3ac>)
   17fb6:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   17fb8:	69fb      	ldr	r3, [r7, #28]
   17fba:	681b      	ldr	r3, [r3, #0]
   17fbc:	2b00      	cmp	r3, #0
   17fbe:	d10a      	bne.n	17fd6 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   17fc0:	4b13      	ldr	r3, [pc, #76]	; (18010 <xQueueSemaphoreTake+0x360>)
   17fc2:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   17fc4:	69fb      	ldr	r3, [r7, #28]
   17fc6:	685b      	ldr	r3, [r3, #4]
   17fc8:	0018      	movs	r0, r3
   17fca:	4b25      	ldr	r3, [pc, #148]	; (18060 <xQueueSemaphoreTake+0x3b0>)
   17fcc:	4798      	blx	r3
   17fce:	0003      	movs	r3, r0
   17fd0:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   17fd2:	4b1d      	ldr	r3, [pc, #116]	; (18048 <xQueueSemaphoreTake+0x398>)
   17fd4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   17fd6:	69fb      	ldr	r3, [r7, #28]
   17fd8:	3324      	adds	r3, #36	; 0x24
   17fda:	683a      	ldr	r2, [r7, #0]
   17fdc:	0011      	movs	r1, r2
   17fde:	0018      	movs	r0, r3
   17fe0:	4b20      	ldr	r3, [pc, #128]	; (18064 <xQueueSemaphoreTake+0x3b4>)
   17fe2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   17fe4:	69fb      	ldr	r3, [r7, #28]
   17fe6:	0018      	movs	r0, r3
   17fe8:	4b1f      	ldr	r3, [pc, #124]	; (18068 <xQueueSemaphoreTake+0x3b8>)
   17fea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   17fec:	4b1f      	ldr	r3, [pc, #124]	; (1806c <xQueueSemaphoreTake+0x3bc>)
   17fee:	4798      	blx	r3
   17ff0:	1e03      	subs	r3, r0, #0
   17ff2:	d000      	beq.n	17ff6 <xQueueSemaphoreTake+0x346>
   17ff4:	e680      	b.n	17cf8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   17ff6:	4b13      	ldr	r3, [pc, #76]	; (18044 <xQueueSemaphoreTake+0x394>)
   17ff8:	4798      	blx	r3
   17ffa:	e67d      	b.n	17cf8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   17ffc:	69fb      	ldr	r3, [r7, #28]
   17ffe:	0018      	movs	r0, r3
   18000:	4b19      	ldr	r3, [pc, #100]	; (18068 <xQueueSemaphoreTake+0x3b8>)
   18002:	4798      	blx	r3
				( void ) xTaskResumeAll();
   18004:	4b19      	ldr	r3, [pc, #100]	; (1806c <xQueueSemaphoreTake+0x3bc>)
   18006:	4798      	blx	r3
   18008:	e676      	b.n	17cf8 <xQueueSemaphoreTake+0x48>
   1800a:	46c0      	nop			; (mov r8, r8)
   1800c:	0001972d 	.word	0x0001972d
   18010:	00016a09 	.word	0x00016a09
   18014:	00014c9d 	.word	0x00014c9d
   18018:	00014a01 	.word	0x00014a01
   1801c:	200000b4 	.word	0x200000b4
   18020:	00014ac1 	.word	0x00014ac1
   18024:	000149c1 	.word	0x000149c1
   18028:	200000a8 	.word	0x200000a8
   1802c:	00014aa1 	.word	0x00014aa1
   18030:	000153f9 	.word	0x000153f9
   18034:	000149e1 	.word	0x000149e1
   18038:	00015a55 	.word	0x00015a55
   1803c:	00019bf9 	.word	0x00019bf9
   18040:	0001929d 	.word	0x0001929d
   18044:	000169f1 	.word	0x000169f1
   18048:	00016a2d 	.word	0x00016a2d
   1804c:	000193dd 	.word	0x000193dd
   18050:	00018cc5 	.word	0x00018cc5
   18054:	00019405 	.word	0x00019405
   18058:	000183f9 	.word	0x000183f9
   1805c:	00015b91 	.word	0x00015b91
   18060:	00019765 	.word	0x00019765
   18064:	00019179 	.word	0x00019179
   18068:	00018309 	.word	0x00018309
   1806c:	00018cdd 	.word	0x00018cdd
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   18070:	69fb      	ldr	r3, [r7, #28]
   18072:	0018      	movs	r0, r3
   18074:	4b2d      	ldr	r3, [pc, #180]	; (1812c <xQueueSemaphoreTake+0x47c>)
   18076:	4798      	blx	r3
			( void ) xTaskResumeAll();
   18078:	4b2d      	ldr	r3, [pc, #180]	; (18130 <xQueueSemaphoreTake+0x480>)
   1807a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1807c:	69fb      	ldr	r3, [r7, #28]
   1807e:	0018      	movs	r0, r3
   18080:	4b2c      	ldr	r3, [pc, #176]	; (18134 <xQueueSemaphoreTake+0x484>)
   18082:	4798      	blx	r3
   18084:	1e03      	subs	r3, r0, #0
   18086:	d100      	bne.n	1808a <xQueueSemaphoreTake+0x3da>
   18088:	e636      	b.n	17cf8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1808a:	6a3b      	ldr	r3, [r7, #32]
   1808c:	2b00      	cmp	r3, #0
   1808e:	d010      	beq.n	180b2 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   18090:	4b29      	ldr	r3, [pc, #164]	; (18138 <xQueueSemaphoreTake+0x488>)
   18092:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   18094:	69fb      	ldr	r3, [r7, #28]
   18096:	0018      	movs	r0, r3
   18098:	4b28      	ldr	r3, [pc, #160]	; (1813c <xQueueSemaphoreTake+0x48c>)
   1809a:	4798      	blx	r3
   1809c:	0003      	movs	r3, r0
   1809e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   180a0:	69fb      	ldr	r3, [r7, #28]
   180a2:	685b      	ldr	r3, [r3, #4]
   180a4:	697a      	ldr	r2, [r7, #20]
   180a6:	0011      	movs	r1, r2
   180a8:	0018      	movs	r0, r3
   180aa:	4b25      	ldr	r3, [pc, #148]	; (18140 <xQueueSemaphoreTake+0x490>)
   180ac:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   180ae:	4b25      	ldr	r3, [pc, #148]	; (18144 <xQueueSemaphoreTake+0x494>)
   180b0:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   180b2:	4b25      	ldr	r3, [pc, #148]	; (18148 <xQueueSemaphoreTake+0x498>)
   180b4:	4798      	blx	r3
   180b6:	0003      	movs	r3, r0
   180b8:	0018      	movs	r0, r3
   180ba:	4b24      	ldr	r3, [pc, #144]	; (1814c <xQueueSemaphoreTake+0x49c>)
   180bc:	4798      	blx	r3
   180be:	0003      	movs	r3, r0
   180c0:	001a      	movs	r2, r3
   180c2:	4b23      	ldr	r3, [pc, #140]	; (18150 <xQueueSemaphoreTake+0x4a0>)
   180c4:	881b      	ldrh	r3, [r3, #0]
   180c6:	4013      	ands	r3, r2
   180c8:	b29b      	uxth	r3, r3
   180ca:	2b00      	cmp	r3, #0
   180cc:	d029      	beq.n	18122 <xQueueSemaphoreTake+0x472>
   180ce:	69fb      	ldr	r3, [r7, #28]
   180d0:	0018      	movs	r0, r3
   180d2:	4b20      	ldr	r3, [pc, #128]	; (18154 <xQueueSemaphoreTake+0x4a4>)
   180d4:	4798      	blx	r3
   180d6:	0003      	movs	r3, r0
   180d8:	001a      	movs	r2, r3
   180da:	4b1d      	ldr	r3, [pc, #116]	; (18150 <xQueueSemaphoreTake+0x4a0>)
   180dc:	881b      	ldrh	r3, [r3, #0]
   180de:	4013      	ands	r3, r2
   180e0:	b29b      	uxth	r3, r3
   180e2:	2b00      	cmp	r3, #0
   180e4:	d01d      	beq.n	18122 <xQueueSemaphoreTake+0x472>
   180e6:	69fb      	ldr	r3, [r7, #28]
   180e8:	0018      	movs	r0, r3
   180ea:	4b1b      	ldr	r3, [pc, #108]	; (18158 <xQueueSemaphoreTake+0x4a8>)
   180ec:	4798      	blx	r3
   180ee:	0003      	movs	r3, r0
   180f0:	001a      	movs	r2, r3
   180f2:	4b1a      	ldr	r3, [pc, #104]	; (1815c <xQueueSemaphoreTake+0x4ac>)
   180f4:	5c9b      	ldrb	r3, [r3, r2]
   180f6:	3350      	adds	r3, #80	; 0x50
   180f8:	b2db      	uxtb	r3, r3
   180fa:	001d      	movs	r5, r3
   180fc:	69fb      	ldr	r3, [r7, #28]
   180fe:	0018      	movs	r0, r3
   18100:	4b15      	ldr	r3, [pc, #84]	; (18158 <xQueueSemaphoreTake+0x4a8>)
   18102:	4798      	blx	r3
   18104:	0003      	movs	r3, r0
   18106:	001a      	movs	r2, r3
   18108:	4b14      	ldr	r3, [pc, #80]	; (1815c <xQueueSemaphoreTake+0x4ac>)
   1810a:	5c9c      	ldrb	r4, [r3, r2]
   1810c:	69fb      	ldr	r3, [r7, #28]
   1810e:	0018      	movs	r0, r3
   18110:	4b13      	ldr	r3, [pc, #76]	; (18160 <xQueueSemaphoreTake+0x4b0>)
   18112:	4798      	blx	r3
   18114:	0003      	movs	r3, r0
   18116:	b2db      	uxtb	r3, r3
   18118:	001a      	movs	r2, r3
   1811a:	0021      	movs	r1, r4
   1811c:	0028      	movs	r0, r5
   1811e:	4b11      	ldr	r3, [pc, #68]	; (18164 <xQueueSemaphoreTake+0x4b4>)
   18120:	4798      	blx	r3
				return errQUEUE_EMPTY;
   18122:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   18124:	0018      	movs	r0, r3
   18126:	46bd      	mov	sp, r7
   18128:	b00a      	add	sp, #40	; 0x28
   1812a:	bdb0      	pop	{r4, r5, r7, pc}
   1812c:	00018309 	.word	0x00018309
   18130:	00018cdd 	.word	0x00018cdd
   18134:	000183f9 	.word	0x000183f9
   18138:	00016a09 	.word	0x00016a09
   1813c:	000181ab 	.word	0x000181ab
   18140:	00019a5d 	.word	0x00019a5d
   18144:	00016a2d 	.word	0x00016a2d
   18148:	00014c9d 	.word	0x00014c9d
   1814c:	00014a01 	.word	0x00014a01
   18150:	200000b4 	.word	0x200000b4
   18154:	00014ac1 	.word	0x00014ac1
   18158:	000149c1 	.word	0x000149c1
   1815c:	200000a8 	.word	0x200000a8
   18160:	00014aa1 	.word	0x00014aa1
   18164:	000153f9 	.word	0x000153f9

00018168 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   18168:	b580      	push	{r7, lr}
   1816a:	b082      	sub	sp, #8
   1816c:	af00      	add	r7, sp, #0
   1816e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   18170:	687b      	ldr	r3, [r7, #4]
   18172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   18174:	0018      	movs	r0, r3
   18176:	46bd      	mov	sp, r7
   18178:	b002      	add	sp, #8
   1817a:	bd80      	pop	{r7, pc}

0001817c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1817c:	b580      	push	{r7, lr}
   1817e:	b082      	sub	sp, #8
   18180:	af00      	add	r7, sp, #0
   18182:	6078      	str	r0, [r7, #4]
   18184:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   18186:	687b      	ldr	r3, [r7, #4]
   18188:	683a      	ldr	r2, [r7, #0]
   1818a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1818c:	46c0      	nop			; (mov r8, r8)
   1818e:	46bd      	mov	sp, r7
   18190:	b002      	add	sp, #8
   18192:	bd80      	pop	{r7, pc}

00018194 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   18194:	b580      	push	{r7, lr}
   18196:	b082      	sub	sp, #8
   18198:	af00      	add	r7, sp, #0
   1819a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1819c:	687b      	ldr	r3, [r7, #4]
   1819e:	2250      	movs	r2, #80	; 0x50
   181a0:	5c9b      	ldrb	r3, [r3, r2]
	}
   181a2:	0018      	movs	r0, r3
   181a4:	46bd      	mov	sp, r7
   181a6:	b002      	add	sp, #8
   181a8:	bd80      	pop	{r7, pc}

000181aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   181aa:	b580      	push	{r7, lr}
   181ac:	b084      	sub	sp, #16
   181ae:	af00      	add	r7, sp, #0
   181b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   181b2:	687b      	ldr	r3, [r7, #4]
   181b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   181b6:	2b00      	cmp	r3, #0
   181b8:	d006      	beq.n	181c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   181ba:	687b      	ldr	r3, [r7, #4]
   181bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   181be:	681b      	ldr	r3, [r3, #0]
   181c0:	2205      	movs	r2, #5
   181c2:	1ad3      	subs	r3, r2, r3
   181c4:	60fb      	str	r3, [r7, #12]
   181c6:	e001      	b.n	181cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   181c8:	2300      	movs	r3, #0
   181ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   181cc:	68fb      	ldr	r3, [r7, #12]
	}
   181ce:	0018      	movs	r0, r3
   181d0:	46bd      	mov	sp, r7
   181d2:	b004      	add	sp, #16
   181d4:	bd80      	pop	{r7, pc}
	...

000181d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   181d8:	b580      	push	{r7, lr}
   181da:	b086      	sub	sp, #24
   181dc:	af00      	add	r7, sp, #0
   181de:	60f8      	str	r0, [r7, #12]
   181e0:	60b9      	str	r1, [r7, #8]
   181e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   181e4:	2300      	movs	r3, #0
   181e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   181e8:	68fb      	ldr	r3, [r7, #12]
   181ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   181ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   181ee:	68fb      	ldr	r3, [r7, #12]
   181f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   181f2:	2b00      	cmp	r3, #0
   181f4:	d10e      	bne.n	18214 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   181f6:	68fb      	ldr	r3, [r7, #12]
   181f8:	681b      	ldr	r3, [r3, #0]
   181fa:	2b00      	cmp	r3, #0
   181fc:	d14e      	bne.n	1829c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   181fe:	68fb      	ldr	r3, [r7, #12]
   18200:	685b      	ldr	r3, [r3, #4]
   18202:	0018      	movs	r0, r3
   18204:	4b2a      	ldr	r3, [pc, #168]	; (182b0 <prvCopyDataToQueue+0xd8>)
   18206:	4798      	blx	r3
   18208:	0003      	movs	r3, r0
   1820a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1820c:	68fb      	ldr	r3, [r7, #12]
   1820e:	2200      	movs	r2, #0
   18210:	605a      	str	r2, [r3, #4]
   18212:	e043      	b.n	1829c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   18214:	687b      	ldr	r3, [r7, #4]
   18216:	2b00      	cmp	r3, #0
   18218:	d119      	bne.n	1824e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1821a:	68fb      	ldr	r3, [r7, #12]
   1821c:	6898      	ldr	r0, [r3, #8]
   1821e:	68fb      	ldr	r3, [r7, #12]
   18220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   18222:	68bb      	ldr	r3, [r7, #8]
   18224:	0019      	movs	r1, r3
   18226:	4b23      	ldr	r3, [pc, #140]	; (182b4 <prvCopyDataToQueue+0xdc>)
   18228:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1822a:	68fb      	ldr	r3, [r7, #12]
   1822c:	689a      	ldr	r2, [r3, #8]
   1822e:	68fb      	ldr	r3, [r7, #12]
   18230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18232:	18d2      	adds	r2, r2, r3
   18234:	68fb      	ldr	r3, [r7, #12]
   18236:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   18238:	68fb      	ldr	r3, [r7, #12]
   1823a:	689a      	ldr	r2, [r3, #8]
   1823c:	68fb      	ldr	r3, [r7, #12]
   1823e:	685b      	ldr	r3, [r3, #4]
   18240:	429a      	cmp	r2, r3
   18242:	d32b      	bcc.n	1829c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   18244:	68fb      	ldr	r3, [r7, #12]
   18246:	681a      	ldr	r2, [r3, #0]
   18248:	68fb      	ldr	r3, [r7, #12]
   1824a:	609a      	str	r2, [r3, #8]
   1824c:	e026      	b.n	1829c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1824e:	68fb      	ldr	r3, [r7, #12]
   18250:	68d8      	ldr	r0, [r3, #12]
   18252:	68fb      	ldr	r3, [r7, #12]
   18254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   18256:	68bb      	ldr	r3, [r7, #8]
   18258:	0019      	movs	r1, r3
   1825a:	4b16      	ldr	r3, [pc, #88]	; (182b4 <prvCopyDataToQueue+0xdc>)
   1825c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1825e:	68fb      	ldr	r3, [r7, #12]
   18260:	68da      	ldr	r2, [r3, #12]
   18262:	68fb      	ldr	r3, [r7, #12]
   18264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18266:	425b      	negs	r3, r3
   18268:	18d2      	adds	r2, r2, r3
   1826a:	68fb      	ldr	r3, [r7, #12]
   1826c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1826e:	68fb      	ldr	r3, [r7, #12]
   18270:	68da      	ldr	r2, [r3, #12]
   18272:	68fb      	ldr	r3, [r7, #12]
   18274:	681b      	ldr	r3, [r3, #0]
   18276:	429a      	cmp	r2, r3
   18278:	d207      	bcs.n	1828a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1827a:	68fb      	ldr	r3, [r7, #12]
   1827c:	685a      	ldr	r2, [r3, #4]
   1827e:	68fb      	ldr	r3, [r7, #12]
   18280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18282:	425b      	negs	r3, r3
   18284:	18d2      	adds	r2, r2, r3
   18286:	68fb      	ldr	r3, [r7, #12]
   18288:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1828a:	687b      	ldr	r3, [r7, #4]
   1828c:	2b02      	cmp	r3, #2
   1828e:	d105      	bne.n	1829c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   18290:	693b      	ldr	r3, [r7, #16]
   18292:	2b00      	cmp	r3, #0
   18294:	d002      	beq.n	1829c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   18296:	693b      	ldr	r3, [r7, #16]
   18298:	3b01      	subs	r3, #1
   1829a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1829c:	693b      	ldr	r3, [r7, #16]
   1829e:	1c5a      	adds	r2, r3, #1
   182a0:	68fb      	ldr	r3, [r7, #12]
   182a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   182a4:	697b      	ldr	r3, [r7, #20]
}
   182a6:	0018      	movs	r0, r3
   182a8:	46bd      	mov	sp, r7
   182aa:	b006      	add	sp, #24
   182ac:	bd80      	pop	{r7, pc}
   182ae:	46c0      	nop			; (mov r8, r8)
   182b0:	000198f5 	.word	0x000198f5
   182b4:	00032871 	.word	0x00032871

000182b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   182b8:	b580      	push	{r7, lr}
   182ba:	b082      	sub	sp, #8
   182bc:	af00      	add	r7, sp, #0
   182be:	6078      	str	r0, [r7, #4]
   182c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   182c2:	687b      	ldr	r3, [r7, #4]
   182c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   182c6:	2b00      	cmp	r3, #0
   182c8:	d018      	beq.n	182fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   182ca:	687b      	ldr	r3, [r7, #4]
   182cc:	68da      	ldr	r2, [r3, #12]
   182ce:	687b      	ldr	r3, [r7, #4]
   182d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   182d2:	18d2      	adds	r2, r2, r3
   182d4:	687b      	ldr	r3, [r7, #4]
   182d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   182d8:	687b      	ldr	r3, [r7, #4]
   182da:	68da      	ldr	r2, [r3, #12]
   182dc:	687b      	ldr	r3, [r7, #4]
   182de:	685b      	ldr	r3, [r3, #4]
   182e0:	429a      	cmp	r2, r3
   182e2:	d303      	bcc.n	182ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   182e4:	687b      	ldr	r3, [r7, #4]
   182e6:	681a      	ldr	r2, [r3, #0]
   182e8:	687b      	ldr	r3, [r7, #4]
   182ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   182ec:	687b      	ldr	r3, [r7, #4]
   182ee:	68d9      	ldr	r1, [r3, #12]
   182f0:	687b      	ldr	r3, [r7, #4]
   182f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   182f4:	683b      	ldr	r3, [r7, #0]
   182f6:	0018      	movs	r0, r3
   182f8:	4b02      	ldr	r3, [pc, #8]	; (18304 <prvCopyDataFromQueue+0x4c>)
   182fa:	4798      	blx	r3
	}
}
   182fc:	46c0      	nop			; (mov r8, r8)
   182fe:	46bd      	mov	sp, r7
   18300:	b002      	add	sp, #8
   18302:	bd80      	pop	{r7, pc}
   18304:	00032871 	.word	0x00032871

00018308 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   18308:	b580      	push	{r7, lr}
   1830a:	b084      	sub	sp, #16
   1830c:	af00      	add	r7, sp, #0
   1830e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   18310:	4b34      	ldr	r3, [pc, #208]	; (183e4 <prvUnlockQueue+0xdc>)
   18312:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   18314:	230f      	movs	r3, #15
   18316:	18fb      	adds	r3, r7, r3
   18318:	687a      	ldr	r2, [r7, #4]
   1831a:	2145      	movs	r1, #69	; 0x45
   1831c:	5c52      	ldrb	r2, [r2, r1]
   1831e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   18320:	e022      	b.n	18368 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   18322:	687b      	ldr	r3, [r7, #4]
   18324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18326:	2b00      	cmp	r3, #0
   18328:	d009      	beq.n	1833e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1832a:	687b      	ldr	r3, [r7, #4]
   1832c:	2100      	movs	r1, #0
   1832e:	0018      	movs	r0, r3
   18330:	4b2d      	ldr	r3, [pc, #180]	; (183e8 <prvUnlockQueue+0xe0>)
   18332:	4798      	blx	r3
   18334:	1e03      	subs	r3, r0, #0
   18336:	d00f      	beq.n	18358 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   18338:	4b2c      	ldr	r3, [pc, #176]	; (183ec <prvUnlockQueue+0xe4>)
   1833a:	4798      	blx	r3
   1833c:	e00c      	b.n	18358 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1833e:	687b      	ldr	r3, [r7, #4]
   18340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18342:	2b00      	cmp	r3, #0
   18344:	d017      	beq.n	18376 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   18346:	687b      	ldr	r3, [r7, #4]
   18348:	3324      	adds	r3, #36	; 0x24
   1834a:	0018      	movs	r0, r3
   1834c:	4b28      	ldr	r3, [pc, #160]	; (183f0 <prvUnlockQueue+0xe8>)
   1834e:	4798      	blx	r3
   18350:	1e03      	subs	r3, r0, #0
   18352:	d001      	beq.n	18358 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   18354:	4b25      	ldr	r3, [pc, #148]	; (183ec <prvUnlockQueue+0xe4>)
   18356:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   18358:	230f      	movs	r3, #15
   1835a:	18fb      	adds	r3, r7, r3
   1835c:	781b      	ldrb	r3, [r3, #0]
   1835e:	3b01      	subs	r3, #1
   18360:	b2da      	uxtb	r2, r3
   18362:	230f      	movs	r3, #15
   18364:	18fb      	adds	r3, r7, r3
   18366:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   18368:	230f      	movs	r3, #15
   1836a:	18fb      	adds	r3, r7, r3
   1836c:	781b      	ldrb	r3, [r3, #0]
   1836e:	b25b      	sxtb	r3, r3
   18370:	2b00      	cmp	r3, #0
   18372:	dcd6      	bgt.n	18322 <prvUnlockQueue+0x1a>
   18374:	e000      	b.n	18378 <prvUnlockQueue+0x70>
						break;
   18376:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   18378:	687b      	ldr	r3, [r7, #4]
   1837a:	2245      	movs	r2, #69	; 0x45
   1837c:	21ff      	movs	r1, #255	; 0xff
   1837e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   18380:	4b1c      	ldr	r3, [pc, #112]	; (183f4 <prvUnlockQueue+0xec>)
   18382:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   18384:	4b17      	ldr	r3, [pc, #92]	; (183e4 <prvUnlockQueue+0xdc>)
   18386:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   18388:	230e      	movs	r3, #14
   1838a:	18fb      	adds	r3, r7, r3
   1838c:	687a      	ldr	r2, [r7, #4]
   1838e:	2144      	movs	r1, #68	; 0x44
   18390:	5c52      	ldrb	r2, [r2, r1]
   18392:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   18394:	e014      	b.n	183c0 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   18396:	687b      	ldr	r3, [r7, #4]
   18398:	691b      	ldr	r3, [r3, #16]
   1839a:	2b00      	cmp	r3, #0
   1839c:	d017      	beq.n	183ce <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1839e:	687b      	ldr	r3, [r7, #4]
   183a0:	3310      	adds	r3, #16
   183a2:	0018      	movs	r0, r3
   183a4:	4b12      	ldr	r3, [pc, #72]	; (183f0 <prvUnlockQueue+0xe8>)
   183a6:	4798      	blx	r3
   183a8:	1e03      	subs	r3, r0, #0
   183aa:	d001      	beq.n	183b0 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   183ac:	4b0f      	ldr	r3, [pc, #60]	; (183ec <prvUnlockQueue+0xe4>)
   183ae:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   183b0:	230e      	movs	r3, #14
   183b2:	18fb      	adds	r3, r7, r3
   183b4:	781b      	ldrb	r3, [r3, #0]
   183b6:	3b01      	subs	r3, #1
   183b8:	b2da      	uxtb	r2, r3
   183ba:	230e      	movs	r3, #14
   183bc:	18fb      	adds	r3, r7, r3
   183be:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   183c0:	230e      	movs	r3, #14
   183c2:	18fb      	adds	r3, r7, r3
   183c4:	781b      	ldrb	r3, [r3, #0]
   183c6:	b25b      	sxtb	r3, r3
   183c8:	2b00      	cmp	r3, #0
   183ca:	dce4      	bgt.n	18396 <prvUnlockQueue+0x8e>
   183cc:	e000      	b.n	183d0 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   183ce:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   183d0:	687b      	ldr	r3, [r7, #4]
   183d2:	2244      	movs	r2, #68	; 0x44
   183d4:	21ff      	movs	r1, #255	; 0xff
   183d6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   183d8:	4b06      	ldr	r3, [pc, #24]	; (183f4 <prvUnlockQueue+0xec>)
   183da:	4798      	blx	r3
}
   183dc:	46c0      	nop			; (mov r8, r8)
   183de:	46bd      	mov	sp, r7
   183e0:	b004      	add	sp, #16
   183e2:	bd80      	pop	{r7, pc}
   183e4:	00016a09 	.word	0x00016a09
   183e8:	000184dd 	.word	0x000184dd
   183ec:	000194b1 	.word	0x000194b1
   183f0:	0001929d 	.word	0x0001929d
   183f4:	00016a2d 	.word	0x00016a2d

000183f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   183f8:	b580      	push	{r7, lr}
   183fa:	b084      	sub	sp, #16
   183fc:	af00      	add	r7, sp, #0
   183fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   18400:	4b08      	ldr	r3, [pc, #32]	; (18424 <prvIsQueueEmpty+0x2c>)
   18402:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   18404:	687b      	ldr	r3, [r7, #4]
   18406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18408:	2b00      	cmp	r3, #0
   1840a:	d102      	bne.n	18412 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1840c:	2301      	movs	r3, #1
   1840e:	60fb      	str	r3, [r7, #12]
   18410:	e001      	b.n	18416 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   18412:	2300      	movs	r3, #0
   18414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   18416:	4b04      	ldr	r3, [pc, #16]	; (18428 <prvIsQueueEmpty+0x30>)
   18418:	4798      	blx	r3

	return xReturn;
   1841a:	68fb      	ldr	r3, [r7, #12]
}
   1841c:	0018      	movs	r0, r3
   1841e:	46bd      	mov	sp, r7
   18420:	b004      	add	sp, #16
   18422:	bd80      	pop	{r7, pc}
   18424:	00016a09 	.word	0x00016a09
   18428:	00016a2d 	.word	0x00016a2d

0001842c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1842c:	b580      	push	{r7, lr}
   1842e:	b084      	sub	sp, #16
   18430:	af00      	add	r7, sp, #0
   18432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   18434:	4b09      	ldr	r3, [pc, #36]	; (1845c <prvIsQueueFull+0x30>)
   18436:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   18438:	687b      	ldr	r3, [r7, #4]
   1843a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1843c:	687b      	ldr	r3, [r7, #4]
   1843e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18440:	429a      	cmp	r2, r3
   18442:	d102      	bne.n	1844a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   18444:	2301      	movs	r3, #1
   18446:	60fb      	str	r3, [r7, #12]
   18448:	e001      	b.n	1844e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1844a:	2300      	movs	r3, #0
   1844c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1844e:	4b04      	ldr	r3, [pc, #16]	; (18460 <prvIsQueueFull+0x34>)
   18450:	4798      	blx	r3

	return xReturn;
   18452:	68fb      	ldr	r3, [r7, #12]
}
   18454:	0018      	movs	r0, r3
   18456:	46bd      	mov	sp, r7
   18458:	b004      	add	sp, #16
   1845a:	bd80      	pop	{r7, pc}
   1845c:	00016a09 	.word	0x00016a09
   18460:	00016a2d 	.word	0x00016a2d

00018464 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   18464:	b580      	push	{r7, lr}
   18466:	b086      	sub	sp, #24
   18468:	af00      	add	r7, sp, #0
   1846a:	60f8      	str	r0, [r7, #12]
   1846c:	60b9      	str	r1, [r7, #8]
   1846e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18470:	68fb      	ldr	r3, [r7, #12]
   18472:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   18474:	4b15      	ldr	r3, [pc, #84]	; (184cc <vQueueWaitForMessageRestricted+0x68>)
   18476:	4798      	blx	r3
   18478:	697b      	ldr	r3, [r7, #20]
   1847a:	2244      	movs	r2, #68	; 0x44
   1847c:	5c9b      	ldrb	r3, [r3, r2]
   1847e:	b25b      	sxtb	r3, r3
   18480:	3301      	adds	r3, #1
   18482:	d103      	bne.n	1848c <vQueueWaitForMessageRestricted+0x28>
   18484:	697b      	ldr	r3, [r7, #20]
   18486:	2244      	movs	r2, #68	; 0x44
   18488:	2100      	movs	r1, #0
   1848a:	5499      	strb	r1, [r3, r2]
   1848c:	697b      	ldr	r3, [r7, #20]
   1848e:	2245      	movs	r2, #69	; 0x45
   18490:	5c9b      	ldrb	r3, [r3, r2]
   18492:	b25b      	sxtb	r3, r3
   18494:	3301      	adds	r3, #1
   18496:	d103      	bne.n	184a0 <vQueueWaitForMessageRestricted+0x3c>
   18498:	697b      	ldr	r3, [r7, #20]
   1849a:	2245      	movs	r2, #69	; 0x45
   1849c:	2100      	movs	r1, #0
   1849e:	5499      	strb	r1, [r3, r2]
   184a0:	4b0b      	ldr	r3, [pc, #44]	; (184d0 <vQueueWaitForMessageRestricted+0x6c>)
   184a2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   184a4:	697b      	ldr	r3, [r7, #20]
   184a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   184a8:	2b00      	cmp	r3, #0
   184aa:	d106      	bne.n	184ba <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   184ac:	697b      	ldr	r3, [r7, #20]
   184ae:	3324      	adds	r3, #36	; 0x24
   184b0:	687a      	ldr	r2, [r7, #4]
   184b2:	68b9      	ldr	r1, [r7, #8]
   184b4:	0018      	movs	r0, r3
   184b6:	4b07      	ldr	r3, [pc, #28]	; (184d4 <vQueueWaitForMessageRestricted+0x70>)
   184b8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   184ba:	697b      	ldr	r3, [r7, #20]
   184bc:	0018      	movs	r0, r3
   184be:	4b06      	ldr	r3, [pc, #24]	; (184d8 <vQueueWaitForMessageRestricted+0x74>)
   184c0:	4798      	blx	r3
	}
   184c2:	46c0      	nop			; (mov r8, r8)
   184c4:	46bd      	mov	sp, r7
   184c6:	b006      	add	sp, #24
   184c8:	bd80      	pop	{r7, pc}
   184ca:	46c0      	nop			; (mov r8, r8)
   184cc:	00016a09 	.word	0x00016a09
   184d0:	00016a2d 	.word	0x00016a2d
   184d4:	000191bd 	.word	0x000191bd
   184d8:	00018309 	.word	0x00018309

000184dc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   184dc:	b5b0      	push	{r4, r5, r7, lr}
   184de:	b086      	sub	sp, #24
   184e0:	af00      	add	r7, sp, #0
   184e2:	6078      	str	r0, [r7, #4]
   184e4:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   184e6:	687b      	ldr	r3, [r7, #4]
   184e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   184ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   184ec:	2300      	movs	r3, #0
   184ee:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   184f0:	693b      	ldr	r3, [r7, #16]
   184f2:	2b00      	cmp	r3, #0
   184f4:	d101      	bne.n	184fa <prvNotifyQueueSetContainer+0x1e>
   184f6:	b672      	cpsid	i
   184f8:	e7fe      	b.n	184f8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   184fa:	693b      	ldr	r3, [r7, #16]
   184fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   184fe:	693b      	ldr	r3, [r7, #16]
   18500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18502:	429a      	cmp	r2, r3
   18504:	d301      	bcc.n	1850a <prvNotifyQueueSetContainer+0x2e>
   18506:	b672      	cpsid	i
   18508:	e7fe      	b.n	18508 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1850a:	693b      	ldr	r3, [r7, #16]
   1850c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1850e:	693b      	ldr	r3, [r7, #16]
   18510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18512:	429a      	cmp	r2, r3
   18514:	d300      	bcc.n	18518 <prvNotifyQueueSetContainer+0x3c>
   18516:	e08b      	b.n	18630 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   18518:	230f      	movs	r3, #15
   1851a:	18fb      	adds	r3, r7, r3
   1851c:	693a      	ldr	r2, [r7, #16]
   1851e:	2145      	movs	r1, #69	; 0x45
   18520:	5c52      	ldrb	r2, [r2, r1]
   18522:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   18524:	4b45      	ldr	r3, [pc, #276]	; (1863c <prvNotifyQueueSetContainer+0x160>)
   18526:	4798      	blx	r3
   18528:	0003      	movs	r3, r0
   1852a:	0018      	movs	r0, r3
   1852c:	4b44      	ldr	r3, [pc, #272]	; (18640 <prvNotifyQueueSetContainer+0x164>)
   1852e:	4798      	blx	r3
   18530:	0003      	movs	r3, r0
   18532:	001a      	movs	r2, r3
   18534:	4b43      	ldr	r3, [pc, #268]	; (18644 <prvNotifyQueueSetContainer+0x168>)
   18536:	881b      	ldrh	r3, [r3, #0]
   18538:	4013      	ands	r3, r2
   1853a:	b29b      	uxth	r3, r3
   1853c:	2b00      	cmp	r3, #0
   1853e:	d02e      	beq.n	1859e <prvNotifyQueueSetContainer+0xc2>
   18540:	693b      	ldr	r3, [r7, #16]
   18542:	0018      	movs	r0, r3
   18544:	4b40      	ldr	r3, [pc, #256]	; (18648 <prvNotifyQueueSetContainer+0x16c>)
   18546:	4798      	blx	r3
   18548:	0003      	movs	r3, r0
   1854a:	001a      	movs	r2, r3
   1854c:	4b3d      	ldr	r3, [pc, #244]	; (18644 <prvNotifyQueueSetContainer+0x168>)
   1854e:	881b      	ldrh	r3, [r3, #0]
   18550:	4013      	ands	r3, r2
   18552:	b29b      	uxth	r3, r3
   18554:	2b00      	cmp	r3, #0
   18556:	d022      	beq.n	1859e <prvNotifyQueueSetContainer+0xc2>
   18558:	683b      	ldr	r3, [r7, #0]
   1855a:	2b00      	cmp	r3, #0
   1855c:	d10b      	bne.n	18576 <prvNotifyQueueSetContainer+0x9a>
   1855e:	693b      	ldr	r3, [r7, #16]
   18560:	0018      	movs	r0, r3
   18562:	4b3a      	ldr	r3, [pc, #232]	; (1864c <prvNotifyQueueSetContainer+0x170>)
   18564:	4798      	blx	r3
   18566:	0003      	movs	r3, r0
   18568:	001a      	movs	r2, r3
   1856a:	4b39      	ldr	r3, [pc, #228]	; (18650 <prvNotifyQueueSetContainer+0x174>)
   1856c:	5c9b      	ldrb	r3, [r3, r2]
   1856e:	3320      	adds	r3, #32
   18570:	b2db      	uxtb	r3, r3
   18572:	001d      	movs	r5, r3
   18574:	e000      	b.n	18578 <prvNotifyQueueSetContainer+0x9c>
   18576:	2525      	movs	r5, #37	; 0x25
   18578:	693b      	ldr	r3, [r7, #16]
   1857a:	0018      	movs	r0, r3
   1857c:	4b33      	ldr	r3, [pc, #204]	; (1864c <prvNotifyQueueSetContainer+0x170>)
   1857e:	4798      	blx	r3
   18580:	0003      	movs	r3, r0
   18582:	001a      	movs	r2, r3
   18584:	4b32      	ldr	r3, [pc, #200]	; (18650 <prvNotifyQueueSetContainer+0x174>)
   18586:	5c9c      	ldrb	r4, [r3, r2]
   18588:	693b      	ldr	r3, [r7, #16]
   1858a:	0018      	movs	r0, r3
   1858c:	4b31      	ldr	r3, [pc, #196]	; (18654 <prvNotifyQueueSetContainer+0x178>)
   1858e:	4798      	blx	r3
   18590:	0003      	movs	r3, r0
   18592:	b2db      	uxtb	r3, r3
   18594:	001a      	movs	r2, r3
   18596:	0021      	movs	r1, r4
   18598:	0028      	movs	r0, r5
   1859a:	4b2f      	ldr	r3, [pc, #188]	; (18658 <prvNotifyQueueSetContainer+0x17c>)
   1859c:	4798      	blx	r3
   1859e:	693b      	ldr	r3, [r7, #16]
   185a0:	0018      	movs	r0, r3
   185a2:	4b2a      	ldr	r3, [pc, #168]	; (1864c <prvNotifyQueueSetContainer+0x170>)
   185a4:	4798      	blx	r3
   185a6:	0003      	movs	r3, r0
   185a8:	001a      	movs	r2, r3
   185aa:	4b29      	ldr	r3, [pc, #164]	; (18650 <prvNotifyQueueSetContainer+0x174>)
   185ac:	5c9c      	ldrb	r4, [r3, r2]
   185ae:	693b      	ldr	r3, [r7, #16]
   185b0:	0018      	movs	r0, r3
   185b2:	4b28      	ldr	r3, [pc, #160]	; (18654 <prvNotifyQueueSetContainer+0x178>)
   185b4:	4798      	blx	r3
   185b6:	0003      	movs	r3, r0
   185b8:	b2dd      	uxtb	r5, r3
   185ba:	693b      	ldr	r3, [r7, #16]
   185bc:	0018      	movs	r0, r3
   185be:	4b23      	ldr	r3, [pc, #140]	; (1864c <prvNotifyQueueSetContainer+0x170>)
   185c0:	4798      	blx	r3
   185c2:	0003      	movs	r3, r0
   185c4:	001a      	movs	r2, r3
   185c6:	4b22      	ldr	r3, [pc, #136]	; (18650 <prvNotifyQueueSetContainer+0x174>)
   185c8:	5c9b      	ldrb	r3, [r3, r2]
   185ca:	2b02      	cmp	r3, #2
   185cc:	d005      	beq.n	185da <prvNotifyQueueSetContainer+0xfe>
   185ce:	693b      	ldr	r3, [r7, #16]
   185d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   185d2:	b2db      	uxtb	r3, r3
   185d4:	3301      	adds	r3, #1
   185d6:	b2db      	uxtb	r3, r3
   185d8:	e000      	b.n	185dc <prvNotifyQueueSetContainer+0x100>
   185da:	2300      	movs	r3, #0
   185dc:	001a      	movs	r2, r3
   185de:	0029      	movs	r1, r5
   185e0:	0020      	movs	r0, r4
   185e2:	4b1e      	ldr	r3, [pc, #120]	; (1865c <prvNotifyQueueSetContainer+0x180>)
   185e4:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   185e6:	683a      	ldr	r2, [r7, #0]
   185e8:	1d39      	adds	r1, r7, #4
   185ea:	693b      	ldr	r3, [r7, #16]
   185ec:	0018      	movs	r0, r3
   185ee:	4b1c      	ldr	r3, [pc, #112]	; (18660 <prvNotifyQueueSetContainer+0x184>)
   185f0:	4798      	blx	r3
   185f2:	0003      	movs	r3, r0
   185f4:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   185f6:	230f      	movs	r3, #15
   185f8:	18fb      	adds	r3, r7, r3
   185fa:	781b      	ldrb	r3, [r3, #0]
   185fc:	b25b      	sxtb	r3, r3
   185fe:	3301      	adds	r3, #1
   18600:	d10d      	bne.n	1861e <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   18602:	693b      	ldr	r3, [r7, #16]
   18604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18606:	2b00      	cmp	r3, #0
   18608:	d012      	beq.n	18630 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1860a:	693b      	ldr	r3, [r7, #16]
   1860c:	3324      	adds	r3, #36	; 0x24
   1860e:	0018      	movs	r0, r3
   18610:	4b14      	ldr	r3, [pc, #80]	; (18664 <prvNotifyQueueSetContainer+0x188>)
   18612:	4798      	blx	r3
   18614:	1e03      	subs	r3, r0, #0
   18616:	d00b      	beq.n	18630 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   18618:	2301      	movs	r3, #1
   1861a:	617b      	str	r3, [r7, #20]
   1861c:	e008      	b.n	18630 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1861e:	230f      	movs	r3, #15
   18620:	18fb      	adds	r3, r7, r3
   18622:	781b      	ldrb	r3, [r3, #0]
   18624:	3301      	adds	r3, #1
   18626:	b2db      	uxtb	r3, r3
   18628:	b259      	sxtb	r1, r3
   1862a:	693b      	ldr	r3, [r7, #16]
   1862c:	2245      	movs	r2, #69	; 0x45
   1862e:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   18630:	697b      	ldr	r3, [r7, #20]
	}
   18632:	0018      	movs	r0, r3
   18634:	46bd      	mov	sp, r7
   18636:	b006      	add	sp, #24
   18638:	bdb0      	pop	{r4, r5, r7, pc}
   1863a:	46c0      	nop			; (mov r8, r8)
   1863c:	00014c9d 	.word	0x00014c9d
   18640:	00014a01 	.word	0x00014a01
   18644:	200000b4 	.word	0x200000b4
   18648:	00014ac1 	.word	0x00014ac1
   1864c:	000149c1 	.word	0x000149c1
   18650:	200000a8 	.word	0x200000a8
   18654:	00014aa1 	.word	0x00014aa1
   18658:	000153f9 	.word	0x000153f9
   1865c:	00015a55 	.word	0x00015a55
   18660:	000181d9 	.word	0x000181d9
   18664:	0001929d 	.word	0x0001929d

00018668 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   18668:	b590      	push	{r4, r7, lr}
   1866a:	b08d      	sub	sp, #52	; 0x34
   1866c:	af04      	add	r7, sp, #16
   1866e:	60f8      	str	r0, [r7, #12]
   18670:	60b9      	str	r1, [r7, #8]
   18672:	603b      	str	r3, [r7, #0]
   18674:	1dbb      	adds	r3, r7, #6
   18676:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18678:	1dbb      	adds	r3, r7, #6
   1867a:	881b      	ldrh	r3, [r3, #0]
   1867c:	009b      	lsls	r3, r3, #2
   1867e:	0018      	movs	r0, r3
   18680:	4b1d      	ldr	r3, [pc, #116]	; (186f8 <xTaskCreate+0x90>)
   18682:	4798      	blx	r3
   18684:	0003      	movs	r3, r0
   18686:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   18688:	697b      	ldr	r3, [r7, #20]
   1868a:	2b00      	cmp	r3, #0
   1868c:	d010      	beq.n	186b0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1868e:	2054      	movs	r0, #84	; 0x54
   18690:	4b19      	ldr	r3, [pc, #100]	; (186f8 <xTaskCreate+0x90>)
   18692:	4798      	blx	r3
   18694:	0003      	movs	r3, r0
   18696:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   18698:	69fb      	ldr	r3, [r7, #28]
   1869a:	2b00      	cmp	r3, #0
   1869c:	d003      	beq.n	186a6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1869e:	69fb      	ldr	r3, [r7, #28]
   186a0:	697a      	ldr	r2, [r7, #20]
   186a2:	631a      	str	r2, [r3, #48]	; 0x30
   186a4:	e006      	b.n	186b4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   186a6:	697b      	ldr	r3, [r7, #20]
   186a8:	0018      	movs	r0, r3
   186aa:	4b14      	ldr	r3, [pc, #80]	; (186fc <xTaskCreate+0x94>)
   186ac:	4798      	blx	r3
   186ae:	e001      	b.n	186b4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   186b0:	2300      	movs	r3, #0
   186b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   186b4:	69fb      	ldr	r3, [r7, #28]
   186b6:	2b00      	cmp	r3, #0
   186b8:	d016      	beq.n	186e8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   186ba:	1dbb      	adds	r3, r7, #6
   186bc:	881a      	ldrh	r2, [r3, #0]
   186be:	683c      	ldr	r4, [r7, #0]
   186c0:	68b9      	ldr	r1, [r7, #8]
   186c2:	68f8      	ldr	r0, [r7, #12]
   186c4:	2300      	movs	r3, #0
   186c6:	9303      	str	r3, [sp, #12]
   186c8:	69fb      	ldr	r3, [r7, #28]
   186ca:	9302      	str	r3, [sp, #8]
   186cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   186ce:	9301      	str	r3, [sp, #4]
   186d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   186d2:	9300      	str	r3, [sp, #0]
   186d4:	0023      	movs	r3, r4
   186d6:	4c0a      	ldr	r4, [pc, #40]	; (18700 <xTaskCreate+0x98>)
   186d8:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   186da:	69fb      	ldr	r3, [r7, #28]
   186dc:	0018      	movs	r0, r3
   186de:	4b09      	ldr	r3, [pc, #36]	; (18704 <xTaskCreate+0x9c>)
   186e0:	4798      	blx	r3
			xReturn = pdPASS;
   186e2:	2301      	movs	r3, #1
   186e4:	61bb      	str	r3, [r7, #24]
   186e6:	e002      	b.n	186ee <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   186e8:	2301      	movs	r3, #1
   186ea:	425b      	negs	r3, r3
   186ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   186ee:	69bb      	ldr	r3, [r7, #24]
	}
   186f0:	0018      	movs	r0, r3
   186f2:	46bd      	mov	sp, r7
   186f4:	b009      	add	sp, #36	; 0x24
   186f6:	bd90      	pop	{r4, r7, pc}
   186f8:	00016b41 	.word	0x00016b41
   186fc:	00016c05 	.word	0x00016c05
   18700:	00018709 	.word	0x00018709
   18704:	00018819 	.word	0x00018819

00018708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   18708:	b580      	push	{r7, lr}
   1870a:	b086      	sub	sp, #24
   1870c:	af00      	add	r7, sp, #0
   1870e:	60f8      	str	r0, [r7, #12]
   18710:	60b9      	str	r1, [r7, #8]
   18712:	607a      	str	r2, [r7, #4]
   18714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   18716:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18718:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1871a:	687b      	ldr	r3, [r7, #4]
   1871c:	009b      	lsls	r3, r3, #2
   1871e:	001a      	movs	r2, r3
   18720:	21a5      	movs	r1, #165	; 0xa5
   18722:	4b39      	ldr	r3, [pc, #228]	; (18808 <prvInitialiseNewTask+0x100>)
   18724:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   18726:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1872a:	687b      	ldr	r3, [r7, #4]
   1872c:	4937      	ldr	r1, [pc, #220]	; (1880c <prvInitialiseNewTask+0x104>)
   1872e:	468c      	mov	ip, r1
   18730:	4463      	add	r3, ip
   18732:	009b      	lsls	r3, r3, #2
   18734:	18d3      	adds	r3, r2, r3
   18736:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   18738:	693b      	ldr	r3, [r7, #16]
   1873a:	2207      	movs	r2, #7
   1873c:	4393      	bics	r3, r2
   1873e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   18740:	693b      	ldr	r3, [r7, #16]
   18742:	2207      	movs	r2, #7
   18744:	4013      	ands	r3, r2
   18746:	d001      	beq.n	1874c <prvInitialiseNewTask+0x44>
   18748:	b672      	cpsid	i
   1874a:	e7fe      	b.n	1874a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1874c:	2300      	movs	r3, #0
   1874e:	617b      	str	r3, [r7, #20]
   18750:	e013      	b.n	1877a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   18752:	68ba      	ldr	r2, [r7, #8]
   18754:	697b      	ldr	r3, [r7, #20]
   18756:	18d3      	adds	r3, r2, r3
   18758:	7818      	ldrb	r0, [r3, #0]
   1875a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1875c:	2134      	movs	r1, #52	; 0x34
   1875e:	697b      	ldr	r3, [r7, #20]
   18760:	18d3      	adds	r3, r2, r3
   18762:	185b      	adds	r3, r3, r1
   18764:	1c02      	adds	r2, r0, #0
   18766:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   18768:	68ba      	ldr	r2, [r7, #8]
   1876a:	697b      	ldr	r3, [r7, #20]
   1876c:	18d3      	adds	r3, r2, r3
   1876e:	781b      	ldrb	r3, [r3, #0]
   18770:	2b00      	cmp	r3, #0
   18772:	d006      	beq.n	18782 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   18774:	697b      	ldr	r3, [r7, #20]
   18776:	3301      	adds	r3, #1
   18778:	617b      	str	r3, [r7, #20]
   1877a:	697b      	ldr	r3, [r7, #20]
   1877c:	2b07      	cmp	r3, #7
   1877e:	d9e8      	bls.n	18752 <prvInitialiseNewTask+0x4a>
   18780:	e000      	b.n	18784 <prvInitialiseNewTask+0x7c>
		{
			break;
   18782:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   18784:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18786:	223b      	movs	r2, #59	; 0x3b
   18788:	2100      	movs	r1, #0
   1878a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1878c:	6a3b      	ldr	r3, [r7, #32]
   1878e:	2b04      	cmp	r3, #4
   18790:	d901      	bls.n	18796 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   18792:	2304      	movs	r3, #4
   18794:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   18796:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18798:	6a3a      	ldr	r2, [r7, #32]
   1879a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1879e:	6a3a      	ldr	r2, [r7, #32]
   187a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   187a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187a4:	2200      	movs	r2, #0
   187a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   187a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187aa:	3304      	adds	r3, #4
   187ac:	0018      	movs	r0, r3
   187ae:	4b18      	ldr	r3, [pc, #96]	; (18810 <prvInitialiseNewTask+0x108>)
   187b0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   187b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187b4:	3318      	adds	r3, #24
   187b6:	0018      	movs	r0, r3
   187b8:	4b15      	ldr	r3, [pc, #84]	; (18810 <prvInitialiseNewTask+0x108>)
   187ba:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   187bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   187c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   187c2:	6a3b      	ldr	r3, [r7, #32]
   187c4:	2205      	movs	r2, #5
   187c6:	1ad2      	subs	r2, r2, r3
   187c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   187cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   187d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   187d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187d4:	2200      	movs	r2, #0
   187d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   187d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187da:	2250      	movs	r2, #80	; 0x50
   187dc:	2100      	movs	r1, #0
   187de:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   187e0:	683a      	ldr	r2, [r7, #0]
   187e2:	68f9      	ldr	r1, [r7, #12]
   187e4:	693b      	ldr	r3, [r7, #16]
   187e6:	0018      	movs	r0, r3
   187e8:	4b0a      	ldr	r3, [pc, #40]	; (18814 <prvInitialiseNewTask+0x10c>)
   187ea:	4798      	blx	r3
   187ec:	0002      	movs	r2, r0
   187ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187f0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   187f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   187f4:	2b00      	cmp	r3, #0
   187f6:	d002      	beq.n	187fe <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   187f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   187fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   187fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   187fe:	46c0      	nop			; (mov r8, r8)
   18800:	46bd      	mov	sp, r7
   18802:	b006      	add	sp, #24
   18804:	bd80      	pop	{r7, pc}
   18806:	46c0      	nop			; (mov r8, r8)
   18808:	000328a7 	.word	0x000328a7
   1880c:	3fffffff 	.word	0x3fffffff
   18810:	000167b5 	.word	0x000167b5
   18814:	000168cd 	.word	0x000168cd

00018818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   18818:	b580      	push	{r7, lr}
   1881a:	b082      	sub	sp, #8
   1881c:	af00      	add	r7, sp, #0
   1881e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   18820:	4b60      	ldr	r3, [pc, #384]	; (189a4 <prvAddNewTaskToReadyList+0x18c>)
   18822:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   18824:	4b60      	ldr	r3, [pc, #384]	; (189a8 <prvAddNewTaskToReadyList+0x190>)
   18826:	681b      	ldr	r3, [r3, #0]
   18828:	1c5a      	adds	r2, r3, #1
   1882a:	4b5f      	ldr	r3, [pc, #380]	; (189a8 <prvAddNewTaskToReadyList+0x190>)
   1882c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1882e:	4b5f      	ldr	r3, [pc, #380]	; (189ac <prvAddNewTaskToReadyList+0x194>)
   18830:	681b      	ldr	r3, [r3, #0]
   18832:	2b00      	cmp	r3, #0
   18834:	d109      	bne.n	1884a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   18836:	4b5d      	ldr	r3, [pc, #372]	; (189ac <prvAddNewTaskToReadyList+0x194>)
   18838:	687a      	ldr	r2, [r7, #4]
   1883a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1883c:	4b5a      	ldr	r3, [pc, #360]	; (189a8 <prvAddNewTaskToReadyList+0x190>)
   1883e:	681b      	ldr	r3, [r3, #0]
   18840:	2b01      	cmp	r3, #1
   18842:	d110      	bne.n	18866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   18844:	4b5a      	ldr	r3, [pc, #360]	; (189b0 <prvAddNewTaskToReadyList+0x198>)
   18846:	4798      	blx	r3
   18848:	e00d      	b.n	18866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1884a:	4b5a      	ldr	r3, [pc, #360]	; (189b4 <prvAddNewTaskToReadyList+0x19c>)
   1884c:	681b      	ldr	r3, [r3, #0]
   1884e:	2b00      	cmp	r3, #0
   18850:	d109      	bne.n	18866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   18852:	4b56      	ldr	r3, [pc, #344]	; (189ac <prvAddNewTaskToReadyList+0x194>)
   18854:	681b      	ldr	r3, [r3, #0]
   18856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18858:	687b      	ldr	r3, [r7, #4]
   1885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1885c:	429a      	cmp	r2, r3
   1885e:	d802      	bhi.n	18866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   18860:	4b52      	ldr	r3, [pc, #328]	; (189ac <prvAddNewTaskToReadyList+0x194>)
   18862:	687a      	ldr	r2, [r7, #4]
   18864:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   18866:	4b54      	ldr	r3, [pc, #336]	; (189b8 <prvAddNewTaskToReadyList+0x1a0>)
   18868:	681b      	ldr	r3, [r3, #0]
   1886a:	1c5a      	adds	r2, r3, #1
   1886c:	4b52      	ldr	r3, [pc, #328]	; (189b8 <prvAddNewTaskToReadyList+0x1a0>)
   1886e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   18870:	4b51      	ldr	r3, [pc, #324]	; (189b8 <prvAddNewTaskToReadyList+0x1a0>)
   18872:	681a      	ldr	r2, [r3, #0]
   18874:	687b      	ldr	r3, [r7, #4]
   18876:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   18878:	687b      	ldr	r3, [r7, #4]
   1887a:	2b00      	cmp	r3, #0
   1887c:	d052      	beq.n	18924 <prvAddNewTaskToReadyList+0x10c>
   1887e:	2003      	movs	r0, #3
   18880:	4b4e      	ldr	r3, [pc, #312]	; (189bc <prvAddNewTaskToReadyList+0x1a4>)
   18882:	4798      	blx	r3
   18884:	0003      	movs	r3, r0
   18886:	b29a      	uxth	r2, r3
   18888:	687b      	ldr	r3, [r7, #4]
   1888a:	0011      	movs	r1, r2
   1888c:	0018      	movs	r0, r3
   1888e:	4b4c      	ldr	r3, [pc, #304]	; (189c0 <prvAddNewTaskToReadyList+0x1a8>)
   18890:	4798      	blx	r3
   18892:	4b4c      	ldr	r3, [pc, #304]	; (189c4 <prvAddNewTaskToReadyList+0x1ac>)
   18894:	881a      	ldrh	r2, [r3, #0]
   18896:	687b      	ldr	r3, [r7, #4]
   18898:	0011      	movs	r1, r2
   1889a:	0018      	movs	r0, r3
   1889c:	4b4a      	ldr	r3, [pc, #296]	; (189c8 <prvAddNewTaskToReadyList+0x1b0>)
   1889e:	4798      	blx	r3
   188a0:	687b      	ldr	r3, [r7, #4]
   188a2:	0018      	movs	r0, r3
   188a4:	4b49      	ldr	r3, [pc, #292]	; (189cc <prvAddNewTaskToReadyList+0x1b4>)
   188a6:	4798      	blx	r3
   188a8:	0003      	movs	r3, r0
   188aa:	b2d9      	uxtb	r1, r3
   188ac:	687b      	ldr	r3, [r7, #4]
   188ae:	3334      	adds	r3, #52	; 0x34
   188b0:	001a      	movs	r2, r3
   188b2:	2003      	movs	r0, #3
   188b4:	4b46      	ldr	r3, [pc, #280]	; (189d0 <prvAddNewTaskToReadyList+0x1b8>)
   188b6:	4798      	blx	r3
   188b8:	687b      	ldr	r3, [r7, #4]
   188ba:	0018      	movs	r0, r3
   188bc:	4b43      	ldr	r3, [pc, #268]	; (189cc <prvAddNewTaskToReadyList+0x1b4>)
   188be:	4798      	blx	r3
   188c0:	0003      	movs	r3, r0
   188c2:	b2d9      	uxtb	r1, r3
   188c4:	687b      	ldr	r3, [r7, #4]
   188c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   188c8:	b2db      	uxtb	r3, r3
   188ca:	001a      	movs	r2, r3
   188cc:	2003      	movs	r0, #3
   188ce:	4b41      	ldr	r3, [pc, #260]	; (189d4 <prvAddNewTaskToReadyList+0x1bc>)
   188d0:	4798      	blx	r3
   188d2:	4b41      	ldr	r3, [pc, #260]	; (189d8 <prvAddNewTaskToReadyList+0x1c0>)
   188d4:	4798      	blx	r3
   188d6:	0003      	movs	r3, r0
   188d8:	0018      	movs	r0, r3
   188da:	4b40      	ldr	r3, [pc, #256]	; (189dc <prvAddNewTaskToReadyList+0x1c4>)
   188dc:	4798      	blx	r3
   188de:	0003      	movs	r3, r0
   188e0:	001a      	movs	r2, r3
   188e2:	4b3f      	ldr	r3, [pc, #252]	; (189e0 <prvAddNewTaskToReadyList+0x1c8>)
   188e4:	881b      	ldrh	r3, [r3, #0]
   188e6:	4013      	ands	r3, r2
   188e8:	b29b      	uxth	r3, r3
   188ea:	2b00      	cmp	r3, #0
   188ec:	d016      	beq.n	1891c <prvAddNewTaskToReadyList+0x104>
   188ee:	687b      	ldr	r3, [r7, #4]
   188f0:	0018      	movs	r0, r3
   188f2:	4b3a      	ldr	r3, [pc, #232]	; (189dc <prvAddNewTaskToReadyList+0x1c4>)
   188f4:	4798      	blx	r3
   188f6:	0003      	movs	r3, r0
   188f8:	001a      	movs	r2, r3
   188fa:	4b39      	ldr	r3, [pc, #228]	; (189e0 <prvAddNewTaskToReadyList+0x1c8>)
   188fc:	881b      	ldrh	r3, [r3, #0]
   188fe:	4013      	ands	r3, r2
   18900:	b29b      	uxth	r3, r3
   18902:	2b00      	cmp	r3, #0
   18904:	d00a      	beq.n	1891c <prvAddNewTaskToReadyList+0x104>
   18906:	687b      	ldr	r3, [r7, #4]
   18908:	0018      	movs	r0, r3
   1890a:	4b30      	ldr	r3, [pc, #192]	; (189cc <prvAddNewTaskToReadyList+0x1b4>)
   1890c:	4798      	blx	r3
   1890e:	0003      	movs	r3, r0
   18910:	b2db      	uxtb	r3, r3
   18912:	001a      	movs	r2, r3
   18914:	2103      	movs	r1, #3
   18916:	201b      	movs	r0, #27
   18918:	4b32      	ldr	r3, [pc, #200]	; (189e4 <prvAddNewTaskToReadyList+0x1cc>)
   1891a:	4798      	blx	r3
   1891c:	687b      	ldr	r3, [r7, #4]
   1891e:	0018      	movs	r0, r3
   18920:	4b31      	ldr	r3, [pc, #196]	; (189e8 <prvAddNewTaskToReadyList+0x1d0>)
   18922:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   18924:	687b      	ldr	r3, [r7, #4]
   18926:	0018      	movs	r0, r3
   18928:	4b2c      	ldr	r3, [pc, #176]	; (189dc <prvAddNewTaskToReadyList+0x1c4>)
   1892a:	4798      	blx	r3
   1892c:	0003      	movs	r3, r0
   1892e:	001a      	movs	r2, r3
   18930:	4b2b      	ldr	r3, [pc, #172]	; (189e0 <prvAddNewTaskToReadyList+0x1c8>)
   18932:	881b      	ldrh	r3, [r3, #0]
   18934:	4013      	ands	r3, r2
   18936:	b29b      	uxth	r3, r3
   18938:	2b00      	cmp	r3, #0
   1893a:	d008      	beq.n	1894e <prvAddNewTaskToReadyList+0x136>
   1893c:	687b      	ldr	r3, [r7, #4]
   1893e:	0018      	movs	r0, r3
   18940:	4b22      	ldr	r3, [pc, #136]	; (189cc <prvAddNewTaskToReadyList+0x1b4>)
   18942:	4798      	blx	r3
   18944:	0003      	movs	r3, r0
   18946:	b2db      	uxtb	r3, r3
   18948:	0018      	movs	r0, r3
   1894a:	4b28      	ldr	r3, [pc, #160]	; (189ec <prvAddNewTaskToReadyList+0x1d4>)
   1894c:	4798      	blx	r3
   1894e:	687b      	ldr	r3, [r7, #4]
   18950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18952:	4b27      	ldr	r3, [pc, #156]	; (189f0 <prvAddNewTaskToReadyList+0x1d8>)
   18954:	681b      	ldr	r3, [r3, #0]
   18956:	429a      	cmp	r2, r3
   18958:	d903      	bls.n	18962 <prvAddNewTaskToReadyList+0x14a>
   1895a:	687b      	ldr	r3, [r7, #4]
   1895c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1895e:	4b24      	ldr	r3, [pc, #144]	; (189f0 <prvAddNewTaskToReadyList+0x1d8>)
   18960:	601a      	str	r2, [r3, #0]
   18962:	687b      	ldr	r3, [r7, #4]
   18964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18966:	0013      	movs	r3, r2
   18968:	009b      	lsls	r3, r3, #2
   1896a:	189b      	adds	r3, r3, r2
   1896c:	009b      	lsls	r3, r3, #2
   1896e:	4a21      	ldr	r2, [pc, #132]	; (189f4 <prvAddNewTaskToReadyList+0x1dc>)
   18970:	189a      	adds	r2, r3, r2
   18972:	687b      	ldr	r3, [r7, #4]
   18974:	3304      	adds	r3, #4
   18976:	0019      	movs	r1, r3
   18978:	0010      	movs	r0, r2
   1897a:	4b1f      	ldr	r3, [pc, #124]	; (189f8 <prvAddNewTaskToReadyList+0x1e0>)
   1897c:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1897e:	4b1f      	ldr	r3, [pc, #124]	; (189fc <prvAddNewTaskToReadyList+0x1e4>)
   18980:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   18982:	4b0c      	ldr	r3, [pc, #48]	; (189b4 <prvAddNewTaskToReadyList+0x19c>)
   18984:	681b      	ldr	r3, [r3, #0]
   18986:	2b00      	cmp	r3, #0
   18988:	d008      	beq.n	1899c <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1898a:	4b08      	ldr	r3, [pc, #32]	; (189ac <prvAddNewTaskToReadyList+0x194>)
   1898c:	681b      	ldr	r3, [r3, #0]
   1898e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18990:	687b      	ldr	r3, [r7, #4]
   18992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18994:	429a      	cmp	r2, r3
   18996:	d201      	bcs.n	1899c <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   18998:	4b19      	ldr	r3, [pc, #100]	; (18a00 <prvAddNewTaskToReadyList+0x1e8>)
   1899a:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1899c:	46c0      	nop			; (mov r8, r8)
   1899e:	46bd      	mov	sp, r7
   189a0:	b002      	add	sp, #8
   189a2:	bd80      	pop	{r7, pc}
   189a4:	00016a09 	.word	0x00016a09
   189a8:	20003c2c 	.word	0x20003c2c
   189ac:	20003b54 	.word	0x20003b54
   189b0:	00019539 	.word	0x00019539
   189b4:	20003c38 	.word	0x20003c38
   189b8:	20003c48 	.word	0x20003c48
   189bc:	00015f81 	.word	0x00015f81
   189c0:	00014a25 	.word	0x00014a25
   189c4:	200000b6 	.word	0x200000b6
   189c8:	00014a61 	.word	0x00014a61
   189cc:	000149e1 	.word	0x000149e1
   189d0:	000161b1 	.word	0x000161b1
   189d4:	00015915 	.word	0x00015915
   189d8:	00014c9d 	.word	0x00014c9d
   189dc:	00014a01 	.word	0x00014a01
   189e0:	200000b4 	.word	0x200000b4
   189e4:	000153f9 	.word	0x000153f9
   189e8:	00014b61 	.word	0x00014b61
   189ec:	000151b1 	.word	0x000151b1
   189f0:	20003c34 	.word	0x20003c34
   189f4:	20003b58 	.word	0x20003b58
   189f8:	000167cb 	.word	0x000167cb
   189fc:	00016a2d 	.word	0x00016a2d
   18a00:	000169f1 	.word	0x000169f1

00018a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   18a04:	b580      	push	{r7, lr}
   18a06:	b084      	sub	sp, #16
   18a08:	af00      	add	r7, sp, #0
   18a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   18a0c:	2300      	movs	r3, #0
   18a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   18a10:	687b      	ldr	r3, [r7, #4]
   18a12:	2b00      	cmp	r3, #0
   18a14:	d045      	beq.n	18aa2 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   18a16:	4b27      	ldr	r3, [pc, #156]	; (18ab4 <vTaskDelay+0xb0>)
   18a18:	681b      	ldr	r3, [r3, #0]
   18a1a:	2b00      	cmp	r3, #0
   18a1c:	d001      	beq.n	18a22 <vTaskDelay+0x1e>
   18a1e:	b672      	cpsid	i
   18a20:	e7fe      	b.n	18a20 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   18a22:	4b25      	ldr	r3, [pc, #148]	; (18ab8 <vTaskDelay+0xb4>)
   18a24:	4798      	blx	r3
			{
				traceTASK_DELAY();
   18a26:	4b25      	ldr	r3, [pc, #148]	; (18abc <vTaskDelay+0xb8>)
   18a28:	681b      	ldr	r3, [r3, #0]
   18a2a:	0018      	movs	r0, r3
   18a2c:	4b24      	ldr	r3, [pc, #144]	; (18ac0 <vTaskDelay+0xbc>)
   18a2e:	4798      	blx	r3
   18a30:	0003      	movs	r3, r0
   18a32:	001a      	movs	r2, r3
   18a34:	4b23      	ldr	r3, [pc, #140]	; (18ac4 <vTaskDelay+0xc0>)
   18a36:	881b      	ldrh	r3, [r3, #0]
   18a38:	4013      	ands	r3, r2
   18a3a:	b29b      	uxth	r3, r3
   18a3c:	2b00      	cmp	r3, #0
   18a3e:	d00e      	beq.n	18a5e <vTaskDelay+0x5a>
   18a40:	687b      	ldr	r3, [r7, #4]
   18a42:	0019      	movs	r1, r3
   18a44:	2089      	movs	r0, #137	; 0x89
   18a46:	4b20      	ldr	r3, [pc, #128]	; (18ac8 <vTaskDelay+0xc4>)
   18a48:	4798      	blx	r3
   18a4a:	4b1c      	ldr	r3, [pc, #112]	; (18abc <vTaskDelay+0xb8>)
   18a4c:	681b      	ldr	r3, [r3, #0]
   18a4e:	0018      	movs	r0, r3
   18a50:	4b1e      	ldr	r3, [pc, #120]	; (18acc <vTaskDelay+0xc8>)
   18a52:	4798      	blx	r3
   18a54:	0003      	movs	r3, r0
   18a56:	b2db      	uxtb	r3, r3
   18a58:	0018      	movs	r0, r3
   18a5a:	4b1d      	ldr	r3, [pc, #116]	; (18ad0 <vTaskDelay+0xcc>)
   18a5c:	4798      	blx	r3
   18a5e:	4b1d      	ldr	r3, [pc, #116]	; (18ad4 <vTaskDelay+0xd0>)
   18a60:	4798      	blx	r3
   18a62:	0003      	movs	r3, r0
   18a64:	0018      	movs	r0, r3
   18a66:	4b16      	ldr	r3, [pc, #88]	; (18ac0 <vTaskDelay+0xbc>)
   18a68:	4798      	blx	r3
   18a6a:	0003      	movs	r3, r0
   18a6c:	001a      	movs	r2, r3
   18a6e:	4b15      	ldr	r3, [pc, #84]	; (18ac4 <vTaskDelay+0xc0>)
   18a70:	881b      	ldrh	r3, [r3, #0]
   18a72:	4013      	ands	r3, r2
   18a74:	b29b      	uxth	r3, r3
   18a76:	2b00      	cmp	r3, #0
   18a78:	d00a      	beq.n	18a90 <vTaskDelay+0x8c>
   18a7a:	4b16      	ldr	r3, [pc, #88]	; (18ad4 <vTaskDelay+0xd0>)
   18a7c:	4798      	blx	r3
   18a7e:	0003      	movs	r3, r0
   18a80:	0018      	movs	r0, r3
   18a82:	4b12      	ldr	r3, [pc, #72]	; (18acc <vTaskDelay+0xc8>)
   18a84:	4798      	blx	r3
   18a86:	0003      	movs	r3, r0
   18a88:	b2db      	uxtb	r3, r3
   18a8a:	0018      	movs	r0, r3
   18a8c:	4b10      	ldr	r3, [pc, #64]	; (18ad0 <vTaskDelay+0xcc>)
   18a8e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   18a90:	687b      	ldr	r3, [r7, #4]
   18a92:	2100      	movs	r1, #0
   18a94:	0018      	movs	r0, r3
   18a96:	4b10      	ldr	r3, [pc, #64]	; (18ad8 <vTaskDelay+0xd4>)
   18a98:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   18a9a:	4b10      	ldr	r3, [pc, #64]	; (18adc <vTaskDelay+0xd8>)
   18a9c:	4798      	blx	r3
   18a9e:	0003      	movs	r3, r0
   18aa0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   18aa2:	68fb      	ldr	r3, [r7, #12]
   18aa4:	2b00      	cmp	r3, #0
   18aa6:	d101      	bne.n	18aac <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   18aa8:	4b0d      	ldr	r3, [pc, #52]	; (18ae0 <vTaskDelay+0xdc>)
   18aaa:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   18aac:	46c0      	nop			; (mov r8, r8)
   18aae:	46bd      	mov	sp, r7
   18ab0:	b004      	add	sp, #16
   18ab2:	bd80      	pop	{r7, pc}
   18ab4:	20003c54 	.word	0x20003c54
   18ab8:	00018cc5 	.word	0x00018cc5
   18abc:	20003b54 	.word	0x20003b54
   18ac0:	00014a01 	.word	0x00014a01
   18ac4:	200000b4 	.word	0x200000b4
   18ac8:	00015701 	.word	0x00015701
   18acc:	000149e1 	.word	0x000149e1
   18ad0:	00015b91 	.word	0x00015b91
   18ad4:	00014c9d 	.word	0x00014c9d
   18ad8:	00019c1d 	.word	0x00019c1d
   18adc:	00018cdd 	.word	0x00018cdd
   18ae0:	000169f1 	.word	0x000169f1

00018ae4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   18ae4:	b580      	push	{r7, lr}
   18ae6:	b084      	sub	sp, #16
   18ae8:	af00      	add	r7, sp, #0
   18aea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   18aec:	4b42      	ldr	r3, [pc, #264]	; (18bf8 <vTaskSuspend+0x114>)
   18aee:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   18af0:	687b      	ldr	r3, [r7, #4]
   18af2:	2b00      	cmp	r3, #0
   18af4:	d102      	bne.n	18afc <vTaskSuspend+0x18>
   18af6:	4b41      	ldr	r3, [pc, #260]	; (18bfc <vTaskSuspend+0x118>)
   18af8:	681b      	ldr	r3, [r3, #0]
   18afa:	e000      	b.n	18afe <vTaskSuspend+0x1a>
   18afc:	687b      	ldr	r3, [r7, #4]
   18afe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   18b00:	4b3f      	ldr	r3, [pc, #252]	; (18c00 <vTaskSuspend+0x11c>)
   18b02:	4798      	blx	r3
   18b04:	0003      	movs	r3, r0
   18b06:	0018      	movs	r0, r3
   18b08:	4b3e      	ldr	r3, [pc, #248]	; (18c04 <vTaskSuspend+0x120>)
   18b0a:	4798      	blx	r3
   18b0c:	0003      	movs	r3, r0
   18b0e:	001a      	movs	r2, r3
   18b10:	4b3d      	ldr	r3, [pc, #244]	; (18c08 <vTaskSuspend+0x124>)
   18b12:	881b      	ldrh	r3, [r3, #0]
   18b14:	4013      	ands	r3, r2
   18b16:	b29b      	uxth	r3, r3
   18b18:	2b00      	cmp	r3, #0
   18b1a:	d016      	beq.n	18b4a <vTaskSuspend+0x66>
   18b1c:	68fb      	ldr	r3, [r7, #12]
   18b1e:	0018      	movs	r0, r3
   18b20:	4b38      	ldr	r3, [pc, #224]	; (18c04 <vTaskSuspend+0x120>)
   18b22:	4798      	blx	r3
   18b24:	0003      	movs	r3, r0
   18b26:	001a      	movs	r2, r3
   18b28:	4b37      	ldr	r3, [pc, #220]	; (18c08 <vTaskSuspend+0x124>)
   18b2a:	881b      	ldrh	r3, [r3, #0]
   18b2c:	4013      	ands	r3, r2
   18b2e:	b29b      	uxth	r3, r3
   18b30:	2b00      	cmp	r3, #0
   18b32:	d00a      	beq.n	18b4a <vTaskSuspend+0x66>
   18b34:	68fb      	ldr	r3, [r7, #12]
   18b36:	0018      	movs	r0, r3
   18b38:	4b34      	ldr	r3, [pc, #208]	; (18c0c <vTaskSuspend+0x128>)
   18b3a:	4798      	blx	r3
   18b3c:	0003      	movs	r3, r0
   18b3e:	b2db      	uxtb	r3, r3
   18b40:	001a      	movs	r2, r3
   18b42:	2103      	movs	r1, #3
   18b44:	208a      	movs	r0, #138	; 0x8a
   18b46:	4b32      	ldr	r3, [pc, #200]	; (18c10 <vTaskSuspend+0x12c>)
   18b48:	4798      	blx	r3
   18b4a:	68fb      	ldr	r3, [r7, #12]
   18b4c:	0018      	movs	r0, r3
   18b4e:	4b2f      	ldr	r3, [pc, #188]	; (18c0c <vTaskSuspend+0x128>)
   18b50:	4798      	blx	r3
   18b52:	0003      	movs	r3, r0
   18b54:	b2db      	uxtb	r3, r3
   18b56:	0018      	movs	r0, r3
   18b58:	4b2e      	ldr	r3, [pc, #184]	; (18c14 <vTaskSuspend+0x130>)
   18b5a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   18b5c:	68fb      	ldr	r3, [r7, #12]
   18b5e:	3304      	adds	r3, #4
   18b60:	0018      	movs	r0, r3
   18b62:	4b2d      	ldr	r3, [pc, #180]	; (18c18 <vTaskSuspend+0x134>)
   18b64:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   18b66:	68fb      	ldr	r3, [r7, #12]
   18b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	d004      	beq.n	18b78 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   18b6e:	68fb      	ldr	r3, [r7, #12]
   18b70:	3318      	adds	r3, #24
   18b72:	0018      	movs	r0, r3
   18b74:	4b28      	ldr	r3, [pc, #160]	; (18c18 <vTaskSuspend+0x134>)
   18b76:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   18b78:	68fb      	ldr	r3, [r7, #12]
   18b7a:	1d1a      	adds	r2, r3, #4
   18b7c:	4b27      	ldr	r3, [pc, #156]	; (18c1c <vTaskSuspend+0x138>)
   18b7e:	0011      	movs	r1, r2
   18b80:	0018      	movs	r0, r3
   18b82:	4b27      	ldr	r3, [pc, #156]	; (18c20 <vTaskSuspend+0x13c>)
   18b84:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   18b86:	68fb      	ldr	r3, [r7, #12]
   18b88:	2250      	movs	r2, #80	; 0x50
   18b8a:	5c9b      	ldrb	r3, [r3, r2]
   18b8c:	b2db      	uxtb	r3, r3
   18b8e:	2b01      	cmp	r3, #1
   18b90:	d103      	bne.n	18b9a <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   18b92:	68fb      	ldr	r3, [r7, #12]
   18b94:	2250      	movs	r2, #80	; 0x50
   18b96:	2100      	movs	r1, #0
   18b98:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   18b9a:	4b22      	ldr	r3, [pc, #136]	; (18c24 <vTaskSuspend+0x140>)
   18b9c:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   18b9e:	4b22      	ldr	r3, [pc, #136]	; (18c28 <vTaskSuspend+0x144>)
   18ba0:	681b      	ldr	r3, [r3, #0]
   18ba2:	2b00      	cmp	r3, #0
   18ba4:	d005      	beq.n	18bb2 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   18ba6:	4b14      	ldr	r3, [pc, #80]	; (18bf8 <vTaskSuspend+0x114>)
   18ba8:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   18baa:	4b20      	ldr	r3, [pc, #128]	; (18c2c <vTaskSuspend+0x148>)
   18bac:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   18bae:	4b1d      	ldr	r3, [pc, #116]	; (18c24 <vTaskSuspend+0x140>)
   18bb0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   18bb2:	4b12      	ldr	r3, [pc, #72]	; (18bfc <vTaskSuspend+0x118>)
   18bb4:	681b      	ldr	r3, [r3, #0]
   18bb6:	68fa      	ldr	r2, [r7, #12]
   18bb8:	429a      	cmp	r2, r3
   18bba:	d118      	bne.n	18bee <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   18bbc:	4b1a      	ldr	r3, [pc, #104]	; (18c28 <vTaskSuspend+0x144>)
   18bbe:	681b      	ldr	r3, [r3, #0]
   18bc0:	2b00      	cmp	r3, #0
   18bc2:	d008      	beq.n	18bd6 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   18bc4:	4b1a      	ldr	r3, [pc, #104]	; (18c30 <vTaskSuspend+0x14c>)
   18bc6:	681b      	ldr	r3, [r3, #0]
   18bc8:	2b00      	cmp	r3, #0
   18bca:	d001      	beq.n	18bd0 <vTaskSuspend+0xec>
   18bcc:	b672      	cpsid	i
   18bce:	e7fe      	b.n	18bce <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   18bd0:	4b18      	ldr	r3, [pc, #96]	; (18c34 <vTaskSuspend+0x150>)
   18bd2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   18bd4:	e00b      	b.n	18bee <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   18bd6:	4b11      	ldr	r3, [pc, #68]	; (18c1c <vTaskSuspend+0x138>)
   18bd8:	681a      	ldr	r2, [r3, #0]
   18bda:	4b17      	ldr	r3, [pc, #92]	; (18c38 <vTaskSuspend+0x154>)
   18bdc:	681b      	ldr	r3, [r3, #0]
   18bde:	429a      	cmp	r2, r3
   18be0:	d103      	bne.n	18bea <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   18be2:	4b06      	ldr	r3, [pc, #24]	; (18bfc <vTaskSuspend+0x118>)
   18be4:	2200      	movs	r2, #0
   18be6:	601a      	str	r2, [r3, #0]
	}
   18be8:	e001      	b.n	18bee <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   18bea:	4b14      	ldr	r3, [pc, #80]	; (18c3c <vTaskSuspend+0x158>)
   18bec:	4798      	blx	r3
	}
   18bee:	46c0      	nop			; (mov r8, r8)
   18bf0:	46bd      	mov	sp, r7
   18bf2:	b004      	add	sp, #16
   18bf4:	bd80      	pop	{r7, pc}
   18bf6:	46c0      	nop			; (mov r8, r8)
   18bf8:	00016a09 	.word	0x00016a09
   18bfc:	20003b54 	.word	0x20003b54
   18c00:	00014c9d 	.word	0x00014c9d
   18c04:	00014a01 	.word	0x00014a01
   18c08:	200000b4 	.word	0x200000b4
   18c0c:	000149e1 	.word	0x000149e1
   18c10:	000153f9 	.word	0x000153f9
   18c14:	00015b91 	.word	0x00015b91
   18c18:	0001687b 	.word	0x0001687b
   18c1c:	20003c18 	.word	0x20003c18
   18c20:	000167cb 	.word	0x000167cb
   18c24:	00016a2d 	.word	0x00016a2d
   18c28:	20003c38 	.word	0x20003c38
   18c2c:	000196c9 	.word	0x000196c9
   18c30:	20003c54 	.word	0x20003c54
   18c34:	000169f1 	.word	0x000169f1
   18c38:	20003c2c 	.word	0x20003c2c
   18c3c:	00019059 	.word	0x00019059

00018c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   18c40:	b590      	push	{r4, r7, lr}
   18c42:	b085      	sub	sp, #20
   18c44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   18c46:	4916      	ldr	r1, [pc, #88]	; (18ca0 <vTaskStartScheduler+0x60>)
   18c48:	4816      	ldr	r0, [pc, #88]	; (18ca4 <vTaskStartScheduler+0x64>)
   18c4a:	4b17      	ldr	r3, [pc, #92]	; (18ca8 <vTaskStartScheduler+0x68>)
   18c4c:	9301      	str	r3, [sp, #4]
   18c4e:	2300      	movs	r3, #0
   18c50:	9300      	str	r3, [sp, #0]
   18c52:	2300      	movs	r3, #0
   18c54:	2264      	movs	r2, #100	; 0x64
   18c56:	4c15      	ldr	r4, [pc, #84]	; (18cac <vTaskStartScheduler+0x6c>)
   18c58:	47a0      	blx	r4
   18c5a:	0003      	movs	r3, r0
   18c5c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   18c5e:	687b      	ldr	r3, [r7, #4]
   18c60:	2b01      	cmp	r3, #1
   18c62:	d103      	bne.n	18c6c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   18c64:	4b12      	ldr	r3, [pc, #72]	; (18cb0 <vTaskStartScheduler+0x70>)
   18c66:	4798      	blx	r3
   18c68:	0003      	movs	r3, r0
   18c6a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   18c6c:	687b      	ldr	r3, [r7, #4]
   18c6e:	2b01      	cmp	r3, #1
   18c70:	d10d      	bne.n	18c8e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   18c72:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   18c74:	4b0f      	ldr	r3, [pc, #60]	; (18cb4 <vTaskStartScheduler+0x74>)
   18c76:	2201      	movs	r2, #1
   18c78:	4252      	negs	r2, r2
   18c7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   18c7c:	4b0e      	ldr	r3, [pc, #56]	; (18cb8 <vTaskStartScheduler+0x78>)
   18c7e:	2201      	movs	r2, #1
   18c80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   18c82:	4b0e      	ldr	r3, [pc, #56]	; (18cbc <vTaskStartScheduler+0x7c>)
   18c84:	2200      	movs	r2, #0
   18c86:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   18c88:	4b0d      	ldr	r3, [pc, #52]	; (18cc0 <vTaskStartScheduler+0x80>)
   18c8a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   18c8c:	e004      	b.n	18c98 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   18c8e:	687b      	ldr	r3, [r7, #4]
   18c90:	3301      	adds	r3, #1
   18c92:	d101      	bne.n	18c98 <vTaskStartScheduler+0x58>
   18c94:	b672      	cpsid	i
   18c96:	e7fe      	b.n	18c96 <vTaskStartScheduler+0x56>
}
   18c98:	46c0      	nop			; (mov r8, r8)
   18c9a:	46bd      	mov	sp, r7
   18c9c:	b003      	add	sp, #12
   18c9e:	bd90      	pop	{r4, r7, pc}
   18ca0:	00036568 	.word	0x00036568
   18ca4:	00019511 	.word	0x00019511
   18ca8:	20003c50 	.word	0x20003c50
   18cac:	00018669 	.word	0x00018669
   18cb0:	00019cd1 	.word	0x00019cd1
   18cb4:	20003c4c 	.word	0x20003c4c
   18cb8:	20003c38 	.word	0x20003c38
   18cbc:	20003c30 	.word	0x20003c30
   18cc0:	00016999 	.word	0x00016999

00018cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   18cc4:	b580      	push	{r7, lr}
   18cc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   18cc8:	4b03      	ldr	r3, [pc, #12]	; (18cd8 <vTaskSuspendAll+0x14>)
   18cca:	681b      	ldr	r3, [r3, #0]
   18ccc:	1c5a      	adds	r2, r3, #1
   18cce:	4b02      	ldr	r3, [pc, #8]	; (18cd8 <vTaskSuspendAll+0x14>)
   18cd0:	601a      	str	r2, [r3, #0]
}
   18cd2:	46c0      	nop			; (mov r8, r8)
   18cd4:	46bd      	mov	sp, r7
   18cd6:	bd80      	pop	{r7, pc}
   18cd8:	20003c54 	.word	0x20003c54

00018cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   18cdc:	b580      	push	{r7, lr}
   18cde:	b084      	sub	sp, #16
   18ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   18ce2:	2300      	movs	r3, #0
   18ce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   18ce6:	2300      	movs	r3, #0
   18ce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   18cea:	4b45      	ldr	r3, [pc, #276]	; (18e00 <xTaskResumeAll+0x124>)
   18cec:	681b      	ldr	r3, [r3, #0]
   18cee:	2b00      	cmp	r3, #0
   18cf0:	d101      	bne.n	18cf6 <xTaskResumeAll+0x1a>
   18cf2:	b672      	cpsid	i
   18cf4:	e7fe      	b.n	18cf4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   18cf6:	4b43      	ldr	r3, [pc, #268]	; (18e04 <xTaskResumeAll+0x128>)
   18cf8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   18cfa:	4b41      	ldr	r3, [pc, #260]	; (18e00 <xTaskResumeAll+0x124>)
   18cfc:	681b      	ldr	r3, [r3, #0]
   18cfe:	1e5a      	subs	r2, r3, #1
   18d00:	4b3f      	ldr	r3, [pc, #252]	; (18e00 <xTaskResumeAll+0x124>)
   18d02:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18d04:	4b3e      	ldr	r3, [pc, #248]	; (18e00 <xTaskResumeAll+0x124>)
   18d06:	681b      	ldr	r3, [r3, #0]
   18d08:	2b00      	cmp	r3, #0
   18d0a:	d000      	beq.n	18d0e <xTaskResumeAll+0x32>
   18d0c:	e071      	b.n	18df2 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   18d0e:	4b3e      	ldr	r3, [pc, #248]	; (18e08 <xTaskResumeAll+0x12c>)
   18d10:	681b      	ldr	r3, [r3, #0]
   18d12:	2b00      	cmp	r3, #0
   18d14:	d100      	bne.n	18d18 <xTaskResumeAll+0x3c>
   18d16:	e06c      	b.n	18df2 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   18d18:	e044      	b.n	18da4 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   18d1a:	4b3c      	ldr	r3, [pc, #240]	; (18e0c <xTaskResumeAll+0x130>)
   18d1c:	68db      	ldr	r3, [r3, #12]
   18d1e:	68db      	ldr	r3, [r3, #12]
   18d20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   18d22:	68fb      	ldr	r3, [r7, #12]
   18d24:	3318      	adds	r3, #24
   18d26:	0018      	movs	r0, r3
   18d28:	4b39      	ldr	r3, [pc, #228]	; (18e10 <xTaskResumeAll+0x134>)
   18d2a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   18d2c:	68fb      	ldr	r3, [r7, #12]
   18d2e:	3304      	adds	r3, #4
   18d30:	0018      	movs	r0, r3
   18d32:	4b37      	ldr	r3, [pc, #220]	; (18e10 <xTaskResumeAll+0x134>)
   18d34:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   18d36:	68fb      	ldr	r3, [r7, #12]
   18d38:	0018      	movs	r0, r3
   18d3a:	4b36      	ldr	r3, [pc, #216]	; (18e14 <xTaskResumeAll+0x138>)
   18d3c:	4798      	blx	r3
   18d3e:	0003      	movs	r3, r0
   18d40:	001a      	movs	r2, r3
   18d42:	4b35      	ldr	r3, [pc, #212]	; (18e18 <xTaskResumeAll+0x13c>)
   18d44:	881b      	ldrh	r3, [r3, #0]
   18d46:	4013      	ands	r3, r2
   18d48:	b29b      	uxth	r3, r3
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	d008      	beq.n	18d60 <xTaskResumeAll+0x84>
   18d4e:	68fb      	ldr	r3, [r7, #12]
   18d50:	0018      	movs	r0, r3
   18d52:	4b32      	ldr	r3, [pc, #200]	; (18e1c <xTaskResumeAll+0x140>)
   18d54:	4798      	blx	r3
   18d56:	0003      	movs	r3, r0
   18d58:	b2db      	uxtb	r3, r3
   18d5a:	0018      	movs	r0, r3
   18d5c:	4b30      	ldr	r3, [pc, #192]	; (18e20 <xTaskResumeAll+0x144>)
   18d5e:	4798      	blx	r3
   18d60:	68fb      	ldr	r3, [r7, #12]
   18d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18d64:	4b2f      	ldr	r3, [pc, #188]	; (18e24 <xTaskResumeAll+0x148>)
   18d66:	681b      	ldr	r3, [r3, #0]
   18d68:	429a      	cmp	r2, r3
   18d6a:	d903      	bls.n	18d74 <xTaskResumeAll+0x98>
   18d6c:	68fb      	ldr	r3, [r7, #12]
   18d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18d70:	4b2c      	ldr	r3, [pc, #176]	; (18e24 <xTaskResumeAll+0x148>)
   18d72:	601a      	str	r2, [r3, #0]
   18d74:	68fb      	ldr	r3, [r7, #12]
   18d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18d78:	0013      	movs	r3, r2
   18d7a:	009b      	lsls	r3, r3, #2
   18d7c:	189b      	adds	r3, r3, r2
   18d7e:	009b      	lsls	r3, r3, #2
   18d80:	4a29      	ldr	r2, [pc, #164]	; (18e28 <xTaskResumeAll+0x14c>)
   18d82:	189a      	adds	r2, r3, r2
   18d84:	68fb      	ldr	r3, [r7, #12]
   18d86:	3304      	adds	r3, #4
   18d88:	0019      	movs	r1, r3
   18d8a:	0010      	movs	r0, r2
   18d8c:	4b27      	ldr	r3, [pc, #156]	; (18e2c <xTaskResumeAll+0x150>)
   18d8e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   18d90:	68fb      	ldr	r3, [r7, #12]
   18d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18d94:	4b26      	ldr	r3, [pc, #152]	; (18e30 <xTaskResumeAll+0x154>)
   18d96:	681b      	ldr	r3, [r3, #0]
   18d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18d9a:	429a      	cmp	r2, r3
   18d9c:	d302      	bcc.n	18da4 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   18d9e:	4b25      	ldr	r3, [pc, #148]	; (18e34 <xTaskResumeAll+0x158>)
   18da0:	2201      	movs	r2, #1
   18da2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   18da4:	4b19      	ldr	r3, [pc, #100]	; (18e0c <xTaskResumeAll+0x130>)
   18da6:	681b      	ldr	r3, [r3, #0]
   18da8:	2b00      	cmp	r3, #0
   18daa:	d1b6      	bne.n	18d1a <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   18dac:	68fb      	ldr	r3, [r7, #12]
   18dae:	2b00      	cmp	r3, #0
   18db0:	d001      	beq.n	18db6 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   18db2:	4b21      	ldr	r3, [pc, #132]	; (18e38 <xTaskResumeAll+0x15c>)
   18db4:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   18db6:	4b21      	ldr	r3, [pc, #132]	; (18e3c <xTaskResumeAll+0x160>)
   18db8:	681b      	ldr	r3, [r3, #0]
   18dba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   18dbc:	687b      	ldr	r3, [r7, #4]
   18dbe:	2b00      	cmp	r3, #0
   18dc0:	d00f      	beq.n	18de2 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   18dc2:	4b1f      	ldr	r3, [pc, #124]	; (18e40 <xTaskResumeAll+0x164>)
   18dc4:	4798      	blx	r3
   18dc6:	1e03      	subs	r3, r0, #0
   18dc8:	d002      	beq.n	18dd0 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   18dca:	4b1a      	ldr	r3, [pc, #104]	; (18e34 <xTaskResumeAll+0x158>)
   18dcc:	2201      	movs	r2, #1
   18dce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   18dd0:	687b      	ldr	r3, [r7, #4]
   18dd2:	3b01      	subs	r3, #1
   18dd4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   18dd6:	687b      	ldr	r3, [r7, #4]
   18dd8:	2b00      	cmp	r3, #0
   18dda:	d1f2      	bne.n	18dc2 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   18ddc:	4b17      	ldr	r3, [pc, #92]	; (18e3c <xTaskResumeAll+0x160>)
   18dde:	2200      	movs	r2, #0
   18de0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   18de2:	4b14      	ldr	r3, [pc, #80]	; (18e34 <xTaskResumeAll+0x158>)
   18de4:	681b      	ldr	r3, [r3, #0]
   18de6:	2b00      	cmp	r3, #0
   18de8:	d003      	beq.n	18df2 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   18dea:	2301      	movs	r3, #1
   18dec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   18dee:	4b15      	ldr	r3, [pc, #84]	; (18e44 <xTaskResumeAll+0x168>)
   18df0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   18df2:	4b15      	ldr	r3, [pc, #84]	; (18e48 <xTaskResumeAll+0x16c>)
   18df4:	4798      	blx	r3

	return xAlreadyYielded;
   18df6:	68bb      	ldr	r3, [r7, #8]
}
   18df8:	0018      	movs	r0, r3
   18dfa:	46bd      	mov	sp, r7
   18dfc:	b004      	add	sp, #16
   18dfe:	bd80      	pop	{r7, pc}
   18e00:	20003c54 	.word	0x20003c54
   18e04:	00016a09 	.word	0x00016a09
   18e08:	20003c2c 	.word	0x20003c2c
   18e0c:	20003bec 	.word	0x20003bec
   18e10:	0001687b 	.word	0x0001687b
   18e14:	00014a01 	.word	0x00014a01
   18e18:	200000b4 	.word	0x200000b4
   18e1c:	000149e1 	.word	0x000149e1
   18e20:	000151b1 	.word	0x000151b1
   18e24:	20003c34 	.word	0x20003c34
   18e28:	20003b58 	.word	0x20003b58
   18e2c:	000167cb 	.word	0x000167cb
   18e30:	20003b54 	.word	0x20003b54
   18e34:	20003c40 	.word	0x20003c40
   18e38:	000196c9 	.word	0x000196c9
   18e3c:	20003c3c 	.word	0x20003c3c
   18e40:	00018e69 	.word	0x00018e69
   18e44:	000169f1 	.word	0x000169f1
   18e48:	00016a2d 	.word	0x00016a2d

00018e4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   18e4c:	b580      	push	{r7, lr}
   18e4e:	b082      	sub	sp, #8
   18e50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   18e52:	4b04      	ldr	r3, [pc, #16]	; (18e64 <xTaskGetTickCount+0x18>)
   18e54:	681b      	ldr	r3, [r3, #0]
   18e56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   18e58:	687b      	ldr	r3, [r7, #4]
}
   18e5a:	0018      	movs	r0, r3
   18e5c:	46bd      	mov	sp, r7
   18e5e:	b002      	add	sp, #8
   18e60:	bd80      	pop	{r7, pc}
   18e62:	46c0      	nop			; (mov r8, r8)
   18e64:	20003c30 	.word	0x20003c30

00018e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   18e68:	b580      	push	{r7, lr}
   18e6a:	b086      	sub	sp, #24
   18e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   18e6e:	2300      	movs	r3, #0
   18e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   18e72:	4b64      	ldr	r3, [pc, #400]	; (19004 <xTaskIncrementTick+0x19c>)
   18e74:	681b      	ldr	r3, [r3, #0]
   18e76:	2b01      	cmp	r3, #1
   18e78:	d003      	beq.n	18e82 <xTaskIncrementTick+0x1a>
   18e7a:	4b63      	ldr	r3, [pc, #396]	; (19008 <xTaskIncrementTick+0x1a0>)
   18e7c:	681b      	ldr	r3, [r3, #0]
   18e7e:	2b00      	cmp	r3, #0
   18e80:	d107      	bne.n	18e92 <xTaskIncrementTick+0x2a>
   18e82:	4b62      	ldr	r3, [pc, #392]	; (1900c <xTaskIncrementTick+0x1a4>)
   18e84:	681b      	ldr	r3, [r3, #0]
   18e86:	1c5a      	adds	r2, r3, #1
   18e88:	4b60      	ldr	r3, [pc, #384]	; (1900c <xTaskIncrementTick+0x1a4>)
   18e8a:	601a      	str	r2, [r3, #0]
   18e8c:	2000      	movs	r0, #0
   18e8e:	4b60      	ldr	r3, [pc, #384]	; (19010 <xTaskIncrementTick+0x1a8>)
   18e90:	4798      	blx	r3
   18e92:	4b5c      	ldr	r3, [pc, #368]	; (19004 <xTaskIncrementTick+0x19c>)
   18e94:	681b      	ldr	r3, [r3, #0]
   18e96:	2b00      	cmp	r3, #0
   18e98:	d106      	bne.n	18ea8 <xTaskIncrementTick+0x40>
   18e9a:	4b5e      	ldr	r3, [pc, #376]	; (19014 <xTaskIncrementTick+0x1ac>)
   18e9c:	681b      	ldr	r3, [r3, #0]
   18e9e:	3301      	adds	r3, #1
   18ea0:	0019      	movs	r1, r3
   18ea2:	2003      	movs	r0, #3
   18ea4:	4b5c      	ldr	r3, [pc, #368]	; (19018 <xTaskIncrementTick+0x1b0>)
   18ea6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18ea8:	4b56      	ldr	r3, [pc, #344]	; (19004 <xTaskIncrementTick+0x19c>)
   18eaa:	681b      	ldr	r3, [r3, #0]
   18eac:	2b00      	cmp	r3, #0
   18eae:	d000      	beq.n	18eb2 <xTaskIncrementTick+0x4a>
   18eb0:	e098      	b.n	18fe4 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   18eb2:	4b58      	ldr	r3, [pc, #352]	; (19014 <xTaskIncrementTick+0x1ac>)
   18eb4:	681b      	ldr	r3, [r3, #0]
   18eb6:	3301      	adds	r3, #1
   18eb8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   18eba:	4b56      	ldr	r3, [pc, #344]	; (19014 <xTaskIncrementTick+0x1ac>)
   18ebc:	693a      	ldr	r2, [r7, #16]
   18ebe:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   18ec0:	693b      	ldr	r3, [r7, #16]
   18ec2:	2b00      	cmp	r3, #0
   18ec4:	d117      	bne.n	18ef6 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   18ec6:	4b55      	ldr	r3, [pc, #340]	; (1901c <xTaskIncrementTick+0x1b4>)
   18ec8:	681b      	ldr	r3, [r3, #0]
   18eca:	681b      	ldr	r3, [r3, #0]
   18ecc:	2b00      	cmp	r3, #0
   18ece:	d001      	beq.n	18ed4 <xTaskIncrementTick+0x6c>
   18ed0:	b672      	cpsid	i
   18ed2:	e7fe      	b.n	18ed2 <xTaskIncrementTick+0x6a>
   18ed4:	4b51      	ldr	r3, [pc, #324]	; (1901c <xTaskIncrementTick+0x1b4>)
   18ed6:	681b      	ldr	r3, [r3, #0]
   18ed8:	60fb      	str	r3, [r7, #12]
   18eda:	4b51      	ldr	r3, [pc, #324]	; (19020 <xTaskIncrementTick+0x1b8>)
   18edc:	681a      	ldr	r2, [r3, #0]
   18ede:	4b4f      	ldr	r3, [pc, #316]	; (1901c <xTaskIncrementTick+0x1b4>)
   18ee0:	601a      	str	r2, [r3, #0]
   18ee2:	4b4f      	ldr	r3, [pc, #316]	; (19020 <xTaskIncrementTick+0x1b8>)
   18ee4:	68fa      	ldr	r2, [r7, #12]
   18ee6:	601a      	str	r2, [r3, #0]
   18ee8:	4b4e      	ldr	r3, [pc, #312]	; (19024 <xTaskIncrementTick+0x1bc>)
   18eea:	681b      	ldr	r3, [r3, #0]
   18eec:	1c5a      	adds	r2, r3, #1
   18eee:	4b4d      	ldr	r3, [pc, #308]	; (19024 <xTaskIncrementTick+0x1bc>)
   18ef0:	601a      	str	r2, [r3, #0]
   18ef2:	4b4d      	ldr	r3, [pc, #308]	; (19028 <xTaskIncrementTick+0x1c0>)
   18ef4:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   18ef6:	4b4d      	ldr	r3, [pc, #308]	; (1902c <xTaskIncrementTick+0x1c4>)
   18ef8:	681b      	ldr	r3, [r3, #0]
   18efa:	693a      	ldr	r2, [r7, #16]
   18efc:	429a      	cmp	r2, r3
   18efe:	d363      	bcc.n	18fc8 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   18f00:	4b46      	ldr	r3, [pc, #280]	; (1901c <xTaskIncrementTick+0x1b4>)
   18f02:	681b      	ldr	r3, [r3, #0]
   18f04:	681b      	ldr	r3, [r3, #0]
   18f06:	2b00      	cmp	r3, #0
   18f08:	d101      	bne.n	18f0e <xTaskIncrementTick+0xa6>
   18f0a:	2301      	movs	r3, #1
   18f0c:	e000      	b.n	18f10 <xTaskIncrementTick+0xa8>
   18f0e:	2300      	movs	r3, #0
   18f10:	2b00      	cmp	r3, #0
   18f12:	d004      	beq.n	18f1e <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18f14:	4b45      	ldr	r3, [pc, #276]	; (1902c <xTaskIncrementTick+0x1c4>)
   18f16:	2201      	movs	r2, #1
   18f18:	4252      	negs	r2, r2
   18f1a:	601a      	str	r2, [r3, #0]
					break;
   18f1c:	e054      	b.n	18fc8 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   18f1e:	4b3f      	ldr	r3, [pc, #252]	; (1901c <xTaskIncrementTick+0x1b4>)
   18f20:	681b      	ldr	r3, [r3, #0]
   18f22:	68db      	ldr	r3, [r3, #12]
   18f24:	68db      	ldr	r3, [r3, #12]
   18f26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   18f28:	68bb      	ldr	r3, [r7, #8]
   18f2a:	685b      	ldr	r3, [r3, #4]
   18f2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   18f2e:	693a      	ldr	r2, [r7, #16]
   18f30:	687b      	ldr	r3, [r7, #4]
   18f32:	429a      	cmp	r2, r3
   18f34:	d203      	bcs.n	18f3e <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   18f36:	4b3d      	ldr	r3, [pc, #244]	; (1902c <xTaskIncrementTick+0x1c4>)
   18f38:	687a      	ldr	r2, [r7, #4]
   18f3a:	601a      	str	r2, [r3, #0]
						break;
   18f3c:	e044      	b.n	18fc8 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   18f3e:	68bb      	ldr	r3, [r7, #8]
   18f40:	3304      	adds	r3, #4
   18f42:	0018      	movs	r0, r3
   18f44:	4b3a      	ldr	r3, [pc, #232]	; (19030 <xTaskIncrementTick+0x1c8>)
   18f46:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   18f48:	68bb      	ldr	r3, [r7, #8]
   18f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18f4c:	2b00      	cmp	r3, #0
   18f4e:	d004      	beq.n	18f5a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   18f50:	68bb      	ldr	r3, [r7, #8]
   18f52:	3318      	adds	r3, #24
   18f54:	0018      	movs	r0, r3
   18f56:	4b36      	ldr	r3, [pc, #216]	; (19030 <xTaskIncrementTick+0x1c8>)
   18f58:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   18f5a:	68bb      	ldr	r3, [r7, #8]
   18f5c:	0018      	movs	r0, r3
   18f5e:	4b35      	ldr	r3, [pc, #212]	; (19034 <xTaskIncrementTick+0x1cc>)
   18f60:	4798      	blx	r3
   18f62:	0003      	movs	r3, r0
   18f64:	001a      	movs	r2, r3
   18f66:	4b34      	ldr	r3, [pc, #208]	; (19038 <xTaskIncrementTick+0x1d0>)
   18f68:	881b      	ldrh	r3, [r3, #0]
   18f6a:	4013      	ands	r3, r2
   18f6c:	b29b      	uxth	r3, r3
   18f6e:	2b00      	cmp	r3, #0
   18f70:	d008      	beq.n	18f84 <xTaskIncrementTick+0x11c>
   18f72:	68bb      	ldr	r3, [r7, #8]
   18f74:	0018      	movs	r0, r3
   18f76:	4b31      	ldr	r3, [pc, #196]	; (1903c <xTaskIncrementTick+0x1d4>)
   18f78:	4798      	blx	r3
   18f7a:	0003      	movs	r3, r0
   18f7c:	b2db      	uxtb	r3, r3
   18f7e:	0018      	movs	r0, r3
   18f80:	4b2f      	ldr	r3, [pc, #188]	; (19040 <xTaskIncrementTick+0x1d8>)
   18f82:	4798      	blx	r3
   18f84:	68bb      	ldr	r3, [r7, #8]
   18f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18f88:	4b2e      	ldr	r3, [pc, #184]	; (19044 <xTaskIncrementTick+0x1dc>)
   18f8a:	681b      	ldr	r3, [r3, #0]
   18f8c:	429a      	cmp	r2, r3
   18f8e:	d903      	bls.n	18f98 <xTaskIncrementTick+0x130>
   18f90:	68bb      	ldr	r3, [r7, #8]
   18f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18f94:	4b2b      	ldr	r3, [pc, #172]	; (19044 <xTaskIncrementTick+0x1dc>)
   18f96:	601a      	str	r2, [r3, #0]
   18f98:	68bb      	ldr	r3, [r7, #8]
   18f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18f9c:	0013      	movs	r3, r2
   18f9e:	009b      	lsls	r3, r3, #2
   18fa0:	189b      	adds	r3, r3, r2
   18fa2:	009b      	lsls	r3, r3, #2
   18fa4:	4a28      	ldr	r2, [pc, #160]	; (19048 <xTaskIncrementTick+0x1e0>)
   18fa6:	189a      	adds	r2, r3, r2
   18fa8:	68bb      	ldr	r3, [r7, #8]
   18faa:	3304      	adds	r3, #4
   18fac:	0019      	movs	r1, r3
   18fae:	0010      	movs	r0, r2
   18fb0:	4b26      	ldr	r3, [pc, #152]	; (1904c <xTaskIncrementTick+0x1e4>)
   18fb2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   18fb4:	68bb      	ldr	r3, [r7, #8]
   18fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18fb8:	4b25      	ldr	r3, [pc, #148]	; (19050 <xTaskIncrementTick+0x1e8>)
   18fba:	681b      	ldr	r3, [r3, #0]
   18fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18fbe:	429a      	cmp	r2, r3
   18fc0:	d39e      	bcc.n	18f00 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   18fc2:	2301      	movs	r3, #1
   18fc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   18fc6:	e79b      	b.n	18f00 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   18fc8:	4b21      	ldr	r3, [pc, #132]	; (19050 <xTaskIncrementTick+0x1e8>)
   18fca:	681b      	ldr	r3, [r3, #0]
   18fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18fce:	491e      	ldr	r1, [pc, #120]	; (19048 <xTaskIncrementTick+0x1e0>)
   18fd0:	0013      	movs	r3, r2
   18fd2:	009b      	lsls	r3, r3, #2
   18fd4:	189b      	adds	r3, r3, r2
   18fd6:	009b      	lsls	r3, r3, #2
   18fd8:	585b      	ldr	r3, [r3, r1]
   18fda:	2b01      	cmp	r3, #1
   18fdc:	d907      	bls.n	18fee <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   18fde:	2301      	movs	r3, #1
   18fe0:	617b      	str	r3, [r7, #20]
   18fe2:	e004      	b.n	18fee <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   18fe4:	4b08      	ldr	r3, [pc, #32]	; (19008 <xTaskIncrementTick+0x1a0>)
   18fe6:	681b      	ldr	r3, [r3, #0]
   18fe8:	1c5a      	adds	r2, r3, #1
   18fea:	4b07      	ldr	r3, [pc, #28]	; (19008 <xTaskIncrementTick+0x1a0>)
   18fec:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   18fee:	4b19      	ldr	r3, [pc, #100]	; (19054 <xTaskIncrementTick+0x1ec>)
   18ff0:	681b      	ldr	r3, [r3, #0]
   18ff2:	2b00      	cmp	r3, #0
   18ff4:	d001      	beq.n	18ffa <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   18ff6:	2301      	movs	r3, #1
   18ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   18ffa:	697b      	ldr	r3, [r7, #20]
}
   18ffc:	0018      	movs	r0, r3
   18ffe:	46bd      	mov	sp, r7
   19000:	b006      	add	sp, #24
   19002:	bd80      	pop	{r7, pc}
   19004:	20003c54 	.word	0x20003c54
   19008:	20003c3c 	.word	0x20003c3c
   1900c:	20000b9c 	.word	0x20000b9c
   19010:	00016695 	.word	0x00016695
   19014:	20003c30 	.word	0x20003c30
   19018:	00015701 	.word	0x00015701
   1901c:	20003be4 	.word	0x20003be4
   19020:	20003be8 	.word	0x20003be8
   19024:	20003c44 	.word	0x20003c44
   19028:	000196c9 	.word	0x000196c9
   1902c:	20003c4c 	.word	0x20003c4c
   19030:	0001687b 	.word	0x0001687b
   19034:	00014a01 	.word	0x00014a01
   19038:	200000b4 	.word	0x200000b4
   1903c:	000149e1 	.word	0x000149e1
   19040:	000151b1 	.word	0x000151b1
   19044:	20003c34 	.word	0x20003c34
   19048:	20003b58 	.word	0x20003b58
   1904c:	000167cb 	.word	0x000167cb
   19050:	20003b54 	.word	0x20003b54
   19054:	20003c40 	.word	0x20003c40

00019058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   19058:	b580      	push	{r7, lr}
   1905a:	b082      	sub	sp, #8
   1905c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1905e:	4b3a      	ldr	r3, [pc, #232]	; (19148 <vTaskSwitchContext+0xf0>)
   19060:	681b      	ldr	r3, [r3, #0]
   19062:	2b00      	cmp	r3, #0
   19064:	d003      	beq.n	1906e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   19066:	4b39      	ldr	r3, [pc, #228]	; (1914c <vTaskSwitchContext+0xf4>)
   19068:	2201      	movs	r2, #1
   1906a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1906c:	e067      	b.n	1913e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1906e:	4b37      	ldr	r3, [pc, #220]	; (1914c <vTaskSwitchContext+0xf4>)
   19070:	2200      	movs	r2, #0
   19072:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   19074:	4b36      	ldr	r3, [pc, #216]	; (19150 <vTaskSwitchContext+0xf8>)
   19076:	681b      	ldr	r3, [r3, #0]
   19078:	681a      	ldr	r2, [r3, #0]
   1907a:	4b35      	ldr	r3, [pc, #212]	; (19150 <vTaskSwitchContext+0xf8>)
   1907c:	681b      	ldr	r3, [r3, #0]
   1907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19080:	429a      	cmp	r2, r3
   19082:	d808      	bhi.n	19096 <vTaskSwitchContext+0x3e>
   19084:	4b32      	ldr	r3, [pc, #200]	; (19150 <vTaskSwitchContext+0xf8>)
   19086:	681a      	ldr	r2, [r3, #0]
   19088:	4b31      	ldr	r3, [pc, #196]	; (19150 <vTaskSwitchContext+0xf8>)
   1908a:	681b      	ldr	r3, [r3, #0]
   1908c:	3334      	adds	r3, #52	; 0x34
   1908e:	0019      	movs	r1, r3
   19090:	0010      	movs	r0, r2
   19092:	4b30      	ldr	r3, [pc, #192]	; (19154 <vTaskSwitchContext+0xfc>)
   19094:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   19096:	4b30      	ldr	r3, [pc, #192]	; (19158 <vTaskSwitchContext+0x100>)
   19098:	681b      	ldr	r3, [r3, #0]
   1909a:	607b      	str	r3, [r7, #4]
   1909c:	e007      	b.n	190ae <vTaskSwitchContext+0x56>
   1909e:	687b      	ldr	r3, [r7, #4]
   190a0:	2b00      	cmp	r3, #0
   190a2:	d101      	bne.n	190a8 <vTaskSwitchContext+0x50>
   190a4:	b672      	cpsid	i
   190a6:	e7fe      	b.n	190a6 <vTaskSwitchContext+0x4e>
   190a8:	687b      	ldr	r3, [r7, #4]
   190aa:	3b01      	subs	r3, #1
   190ac:	607b      	str	r3, [r7, #4]
   190ae:	492b      	ldr	r1, [pc, #172]	; (1915c <vTaskSwitchContext+0x104>)
   190b0:	687a      	ldr	r2, [r7, #4]
   190b2:	0013      	movs	r3, r2
   190b4:	009b      	lsls	r3, r3, #2
   190b6:	189b      	adds	r3, r3, r2
   190b8:	009b      	lsls	r3, r3, #2
   190ba:	585b      	ldr	r3, [r3, r1]
   190bc:	2b00      	cmp	r3, #0
   190be:	d0ee      	beq.n	1909e <vTaskSwitchContext+0x46>
   190c0:	687a      	ldr	r2, [r7, #4]
   190c2:	0013      	movs	r3, r2
   190c4:	009b      	lsls	r3, r3, #2
   190c6:	189b      	adds	r3, r3, r2
   190c8:	009b      	lsls	r3, r3, #2
   190ca:	4a24      	ldr	r2, [pc, #144]	; (1915c <vTaskSwitchContext+0x104>)
   190cc:	189b      	adds	r3, r3, r2
   190ce:	603b      	str	r3, [r7, #0]
   190d0:	683b      	ldr	r3, [r7, #0]
   190d2:	685b      	ldr	r3, [r3, #4]
   190d4:	685a      	ldr	r2, [r3, #4]
   190d6:	683b      	ldr	r3, [r7, #0]
   190d8:	605a      	str	r2, [r3, #4]
   190da:	683b      	ldr	r3, [r7, #0]
   190dc:	685a      	ldr	r2, [r3, #4]
   190de:	683b      	ldr	r3, [r7, #0]
   190e0:	3308      	adds	r3, #8
   190e2:	429a      	cmp	r2, r3
   190e4:	d104      	bne.n	190f0 <vTaskSwitchContext+0x98>
   190e6:	683b      	ldr	r3, [r7, #0]
   190e8:	685b      	ldr	r3, [r3, #4]
   190ea:	685a      	ldr	r2, [r3, #4]
   190ec:	683b      	ldr	r3, [r7, #0]
   190ee:	605a      	str	r2, [r3, #4]
   190f0:	683b      	ldr	r3, [r7, #0]
   190f2:	685b      	ldr	r3, [r3, #4]
   190f4:	68da      	ldr	r2, [r3, #12]
   190f6:	4b16      	ldr	r3, [pc, #88]	; (19150 <vTaskSwitchContext+0xf8>)
   190f8:	601a      	str	r2, [r3, #0]
   190fa:	4b17      	ldr	r3, [pc, #92]	; (19158 <vTaskSwitchContext+0x100>)
   190fc:	687a      	ldr	r2, [r7, #4]
   190fe:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   19100:	4b17      	ldr	r3, [pc, #92]	; (19160 <vTaskSwitchContext+0x108>)
   19102:	2201      	movs	r2, #1
   19104:	601a      	str	r2, [r3, #0]
   19106:	4b17      	ldr	r3, [pc, #92]	; (19164 <vTaskSwitchContext+0x10c>)
   19108:	4798      	blx	r3
   1910a:	0003      	movs	r3, r0
   1910c:	0018      	movs	r0, r3
   1910e:	4b16      	ldr	r3, [pc, #88]	; (19168 <vTaskSwitchContext+0x110>)
   19110:	4798      	blx	r3
   19112:	0003      	movs	r3, r0
   19114:	001a      	movs	r2, r3
   19116:	4b15      	ldr	r3, [pc, #84]	; (1916c <vTaskSwitchContext+0x114>)
   19118:	881b      	ldrh	r3, [r3, #0]
   1911a:	4013      	ands	r3, r2
   1911c:	b29b      	uxth	r3, r3
   1911e:	2b00      	cmp	r3, #0
   19120:	d00a      	beq.n	19138 <vTaskSwitchContext+0xe0>
   19122:	4b10      	ldr	r3, [pc, #64]	; (19164 <vTaskSwitchContext+0x10c>)
   19124:	4798      	blx	r3
   19126:	0003      	movs	r3, r0
   19128:	0018      	movs	r0, r3
   1912a:	4b11      	ldr	r3, [pc, #68]	; (19170 <vTaskSwitchContext+0x118>)
   1912c:	4798      	blx	r3
   1912e:	0003      	movs	r3, r0
   19130:	b2db      	uxtb	r3, r3
   19132:	0018      	movs	r0, r3
   19134:	4b0f      	ldr	r3, [pc, #60]	; (19174 <vTaskSwitchContext+0x11c>)
   19136:	4798      	blx	r3
   19138:	4b09      	ldr	r3, [pc, #36]	; (19160 <vTaskSwitchContext+0x108>)
   1913a:	2202      	movs	r2, #2
   1913c:	601a      	str	r2, [r3, #0]
}
   1913e:	46c0      	nop			; (mov r8, r8)
   19140:	46bd      	mov	sp, r7
   19142:	b002      	add	sp, #8
   19144:	bd80      	pop	{r7, pc}
   19146:	46c0      	nop			; (mov r8, r8)
   19148:	20003c54 	.word	0x20003c54
   1914c:	20003c40 	.word	0x20003c40
   19150:	20003b54 	.word	0x20003b54
   19154:	0002fdd5 	.word	0x0002fdd5
   19158:	20003c34 	.word	0x20003c34
   1915c:	20003b58 	.word	0x20003b58
   19160:	20000ba8 	.word	0x20000ba8
   19164:	00014c9d 	.word	0x00014c9d
   19168:	00014a01 	.word	0x00014a01
   1916c:	200000b4 	.word	0x200000b4
   19170:	000149e1 	.word	0x000149e1
   19174:	000157fd 	.word	0x000157fd

00019178 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   19178:	b580      	push	{r7, lr}
   1917a:	b082      	sub	sp, #8
   1917c:	af00      	add	r7, sp, #0
   1917e:	6078      	str	r0, [r7, #4]
   19180:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   19182:	687b      	ldr	r3, [r7, #4]
   19184:	2b00      	cmp	r3, #0
   19186:	d101      	bne.n	1918c <vTaskPlaceOnEventList+0x14>
   19188:	b672      	cpsid	i
   1918a:	e7fe      	b.n	1918a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1918c:	4b08      	ldr	r3, [pc, #32]	; (191b0 <vTaskPlaceOnEventList+0x38>)
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	3318      	adds	r3, #24
   19192:	001a      	movs	r2, r3
   19194:	687b      	ldr	r3, [r7, #4]
   19196:	0011      	movs	r1, r2
   19198:	0018      	movs	r0, r3
   1919a:	4b06      	ldr	r3, [pc, #24]	; (191b4 <vTaskPlaceOnEventList+0x3c>)
   1919c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1919e:	683b      	ldr	r3, [r7, #0]
   191a0:	2101      	movs	r1, #1
   191a2:	0018      	movs	r0, r3
   191a4:	4b04      	ldr	r3, [pc, #16]	; (191b8 <vTaskPlaceOnEventList+0x40>)
   191a6:	4798      	blx	r3
}
   191a8:	46c0      	nop			; (mov r8, r8)
   191aa:	46bd      	mov	sp, r7
   191ac:	b002      	add	sp, #8
   191ae:	bd80      	pop	{r7, pc}
   191b0:	20003b54 	.word	0x20003b54
   191b4:	0001680f 	.word	0x0001680f
   191b8:	00019c1d 	.word	0x00019c1d

000191bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   191bc:	b580      	push	{r7, lr}
   191be:	b084      	sub	sp, #16
   191c0:	af00      	add	r7, sp, #0
   191c2:	60f8      	str	r0, [r7, #12]
   191c4:	60b9      	str	r1, [r7, #8]
   191c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   191c8:	68fb      	ldr	r3, [r7, #12]
   191ca:	2b00      	cmp	r3, #0
   191cc:	d101      	bne.n	191d2 <vTaskPlaceOnEventListRestricted+0x16>
   191ce:	b672      	cpsid	i
   191d0:	e7fe      	b.n	191d0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   191d2:	4b28      	ldr	r3, [pc, #160]	; (19274 <vTaskPlaceOnEventListRestricted+0xb8>)
   191d4:	681b      	ldr	r3, [r3, #0]
   191d6:	3318      	adds	r3, #24
   191d8:	001a      	movs	r2, r3
   191da:	68fb      	ldr	r3, [r7, #12]
   191dc:	0011      	movs	r1, r2
   191de:	0018      	movs	r0, r3
   191e0:	4b25      	ldr	r3, [pc, #148]	; (19278 <vTaskPlaceOnEventListRestricted+0xbc>)
   191e2:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   191e4:	687b      	ldr	r3, [r7, #4]
   191e6:	2b00      	cmp	r3, #0
   191e8:	d002      	beq.n	191f0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   191ea:	2301      	movs	r3, #1
   191ec:	425b      	negs	r3, r3
   191ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   191f0:	4b20      	ldr	r3, [pc, #128]	; (19274 <vTaskPlaceOnEventListRestricted+0xb8>)
   191f2:	681b      	ldr	r3, [r3, #0]
   191f4:	0018      	movs	r0, r3
   191f6:	4b21      	ldr	r3, [pc, #132]	; (1927c <vTaskPlaceOnEventListRestricted+0xc0>)
   191f8:	4798      	blx	r3
   191fa:	0003      	movs	r3, r0
   191fc:	001a      	movs	r2, r3
   191fe:	4b20      	ldr	r3, [pc, #128]	; (19280 <vTaskPlaceOnEventListRestricted+0xc4>)
   19200:	881b      	ldrh	r3, [r3, #0]
   19202:	4013      	ands	r3, r2
   19204:	b29b      	uxth	r3, r3
   19206:	2b00      	cmp	r3, #0
   19208:	d011      	beq.n	1922e <vTaskPlaceOnEventListRestricted+0x72>
   1920a:	4b1e      	ldr	r3, [pc, #120]	; (19284 <vTaskPlaceOnEventListRestricted+0xc8>)
   1920c:	681a      	ldr	r2, [r3, #0]
   1920e:	68bb      	ldr	r3, [r7, #8]
   19210:	18d3      	adds	r3, r2, r3
   19212:	0019      	movs	r1, r3
   19214:	2088      	movs	r0, #136	; 0x88
   19216:	4b1c      	ldr	r3, [pc, #112]	; (19288 <vTaskPlaceOnEventListRestricted+0xcc>)
   19218:	4798      	blx	r3
   1921a:	4b16      	ldr	r3, [pc, #88]	; (19274 <vTaskPlaceOnEventListRestricted+0xb8>)
   1921c:	681b      	ldr	r3, [r3, #0]
   1921e:	0018      	movs	r0, r3
   19220:	4b1a      	ldr	r3, [pc, #104]	; (1928c <vTaskPlaceOnEventListRestricted+0xd0>)
   19222:	4798      	blx	r3
   19224:	0003      	movs	r3, r0
   19226:	b2db      	uxtb	r3, r3
   19228:	0018      	movs	r0, r3
   1922a:	4b19      	ldr	r3, [pc, #100]	; (19290 <vTaskPlaceOnEventListRestricted+0xd4>)
   1922c:	4798      	blx	r3
   1922e:	4b19      	ldr	r3, [pc, #100]	; (19294 <vTaskPlaceOnEventListRestricted+0xd8>)
   19230:	4798      	blx	r3
   19232:	0003      	movs	r3, r0
   19234:	0018      	movs	r0, r3
   19236:	4b11      	ldr	r3, [pc, #68]	; (1927c <vTaskPlaceOnEventListRestricted+0xc0>)
   19238:	4798      	blx	r3
   1923a:	0003      	movs	r3, r0
   1923c:	001a      	movs	r2, r3
   1923e:	4b10      	ldr	r3, [pc, #64]	; (19280 <vTaskPlaceOnEventListRestricted+0xc4>)
   19240:	881b      	ldrh	r3, [r3, #0]
   19242:	4013      	ands	r3, r2
   19244:	b29b      	uxth	r3, r3
   19246:	2b00      	cmp	r3, #0
   19248:	d00a      	beq.n	19260 <vTaskPlaceOnEventListRestricted+0xa4>
   1924a:	4b12      	ldr	r3, [pc, #72]	; (19294 <vTaskPlaceOnEventListRestricted+0xd8>)
   1924c:	4798      	blx	r3
   1924e:	0003      	movs	r3, r0
   19250:	0018      	movs	r0, r3
   19252:	4b0e      	ldr	r3, [pc, #56]	; (1928c <vTaskPlaceOnEventListRestricted+0xd0>)
   19254:	4798      	blx	r3
   19256:	0003      	movs	r3, r0
   19258:	b2db      	uxtb	r3, r3
   1925a:	0018      	movs	r0, r3
   1925c:	4b0c      	ldr	r3, [pc, #48]	; (19290 <vTaskPlaceOnEventListRestricted+0xd4>)
   1925e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   19260:	687a      	ldr	r2, [r7, #4]
   19262:	68bb      	ldr	r3, [r7, #8]
   19264:	0011      	movs	r1, r2
   19266:	0018      	movs	r0, r3
   19268:	4b0b      	ldr	r3, [pc, #44]	; (19298 <vTaskPlaceOnEventListRestricted+0xdc>)
   1926a:	4798      	blx	r3
	}
   1926c:	46c0      	nop			; (mov r8, r8)
   1926e:	46bd      	mov	sp, r7
   19270:	b004      	add	sp, #16
   19272:	bd80      	pop	{r7, pc}
   19274:	20003b54 	.word	0x20003b54
   19278:	000167cb 	.word	0x000167cb
   1927c:	00014a01 	.word	0x00014a01
   19280:	200000b4 	.word	0x200000b4
   19284:	20003c30 	.word	0x20003c30
   19288:	00015701 	.word	0x00015701
   1928c:	000149e1 	.word	0x000149e1
   19290:	00015b91 	.word	0x00015b91
   19294:	00014c9d 	.word	0x00014c9d
   19298:	00019c1d 	.word	0x00019c1d

0001929c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1929c:	b580      	push	{r7, lr}
   1929e:	b084      	sub	sp, #16
   192a0:	af00      	add	r7, sp, #0
   192a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   192a4:	687b      	ldr	r3, [r7, #4]
   192a6:	68db      	ldr	r3, [r3, #12]
   192a8:	68db      	ldr	r3, [r3, #12]
   192aa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   192ac:	68bb      	ldr	r3, [r7, #8]
   192ae:	2b00      	cmp	r3, #0
   192b0:	d101      	bne.n	192b6 <xTaskRemoveFromEventList+0x1a>
   192b2:	b672      	cpsid	i
   192b4:	e7fe      	b.n	192b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   192b6:	68bb      	ldr	r3, [r7, #8]
   192b8:	3318      	adds	r3, #24
   192ba:	0018      	movs	r0, r3
   192bc:	4b2a      	ldr	r3, [pc, #168]	; (19368 <xTaskRemoveFromEventList+0xcc>)
   192be:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   192c0:	4b2a      	ldr	r3, [pc, #168]	; (1936c <xTaskRemoveFromEventList+0xd0>)
   192c2:	681b      	ldr	r3, [r3, #0]
   192c4:	2b00      	cmp	r3, #0
   192c6:	d132      	bne.n	1932e <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   192c8:	68bb      	ldr	r3, [r7, #8]
   192ca:	3304      	adds	r3, #4
   192cc:	0018      	movs	r0, r3
   192ce:	4b26      	ldr	r3, [pc, #152]	; (19368 <xTaskRemoveFromEventList+0xcc>)
   192d0:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   192d2:	68bb      	ldr	r3, [r7, #8]
   192d4:	0018      	movs	r0, r3
   192d6:	4b26      	ldr	r3, [pc, #152]	; (19370 <xTaskRemoveFromEventList+0xd4>)
   192d8:	4798      	blx	r3
   192da:	0003      	movs	r3, r0
   192dc:	001a      	movs	r2, r3
   192de:	4b25      	ldr	r3, [pc, #148]	; (19374 <xTaskRemoveFromEventList+0xd8>)
   192e0:	881b      	ldrh	r3, [r3, #0]
   192e2:	4013      	ands	r3, r2
   192e4:	b29b      	uxth	r3, r3
   192e6:	2b00      	cmp	r3, #0
   192e8:	d008      	beq.n	192fc <xTaskRemoveFromEventList+0x60>
   192ea:	68bb      	ldr	r3, [r7, #8]
   192ec:	0018      	movs	r0, r3
   192ee:	4b22      	ldr	r3, [pc, #136]	; (19378 <xTaskRemoveFromEventList+0xdc>)
   192f0:	4798      	blx	r3
   192f2:	0003      	movs	r3, r0
   192f4:	b2db      	uxtb	r3, r3
   192f6:	0018      	movs	r0, r3
   192f8:	4b20      	ldr	r3, [pc, #128]	; (1937c <xTaskRemoveFromEventList+0xe0>)
   192fa:	4798      	blx	r3
   192fc:	68bb      	ldr	r3, [r7, #8]
   192fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19300:	4b1f      	ldr	r3, [pc, #124]	; (19380 <xTaskRemoveFromEventList+0xe4>)
   19302:	681b      	ldr	r3, [r3, #0]
   19304:	429a      	cmp	r2, r3
   19306:	d903      	bls.n	19310 <xTaskRemoveFromEventList+0x74>
   19308:	68bb      	ldr	r3, [r7, #8]
   1930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1930c:	4b1c      	ldr	r3, [pc, #112]	; (19380 <xTaskRemoveFromEventList+0xe4>)
   1930e:	601a      	str	r2, [r3, #0]
   19310:	68bb      	ldr	r3, [r7, #8]
   19312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19314:	0013      	movs	r3, r2
   19316:	009b      	lsls	r3, r3, #2
   19318:	189b      	adds	r3, r3, r2
   1931a:	009b      	lsls	r3, r3, #2
   1931c:	4a19      	ldr	r2, [pc, #100]	; (19384 <xTaskRemoveFromEventList+0xe8>)
   1931e:	189a      	adds	r2, r3, r2
   19320:	68bb      	ldr	r3, [r7, #8]
   19322:	3304      	adds	r3, #4
   19324:	0019      	movs	r1, r3
   19326:	0010      	movs	r0, r2
   19328:	4b17      	ldr	r3, [pc, #92]	; (19388 <xTaskRemoveFromEventList+0xec>)
   1932a:	4798      	blx	r3
   1932c:	e007      	b.n	1933e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1932e:	68bb      	ldr	r3, [r7, #8]
   19330:	3318      	adds	r3, #24
   19332:	001a      	movs	r2, r3
   19334:	4b15      	ldr	r3, [pc, #84]	; (1938c <xTaskRemoveFromEventList+0xf0>)
   19336:	0011      	movs	r1, r2
   19338:	0018      	movs	r0, r3
   1933a:	4b13      	ldr	r3, [pc, #76]	; (19388 <xTaskRemoveFromEventList+0xec>)
   1933c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1933e:	68bb      	ldr	r3, [r7, #8]
   19340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19342:	4b13      	ldr	r3, [pc, #76]	; (19390 <xTaskRemoveFromEventList+0xf4>)
   19344:	681b      	ldr	r3, [r3, #0]
   19346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19348:	429a      	cmp	r2, r3
   1934a:	d905      	bls.n	19358 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1934c:	2301      	movs	r3, #1
   1934e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   19350:	4b10      	ldr	r3, [pc, #64]	; (19394 <xTaskRemoveFromEventList+0xf8>)
   19352:	2201      	movs	r2, #1
   19354:	601a      	str	r2, [r3, #0]
   19356:	e001      	b.n	1935c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   19358:	2300      	movs	r3, #0
   1935a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1935c:	68fb      	ldr	r3, [r7, #12]
}
   1935e:	0018      	movs	r0, r3
   19360:	46bd      	mov	sp, r7
   19362:	b004      	add	sp, #16
   19364:	bd80      	pop	{r7, pc}
   19366:	46c0      	nop			; (mov r8, r8)
   19368:	0001687b 	.word	0x0001687b
   1936c:	20003c54 	.word	0x20003c54
   19370:	00014a01 	.word	0x00014a01
   19374:	200000b4 	.word	0x200000b4
   19378:	000149e1 	.word	0x000149e1
   1937c:	000151b1 	.word	0x000151b1
   19380:	20003c34 	.word	0x20003c34
   19384:	20003b58 	.word	0x20003b58
   19388:	000167cb 	.word	0x000167cb
   1938c:	20003bec 	.word	0x20003bec
   19390:	20003b54 	.word	0x20003b54
   19394:	20003c40 	.word	0x20003c40

00019398 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   19398:	b580      	push	{r7, lr}
   1939a:	b082      	sub	sp, #8
   1939c:	af00      	add	r7, sp, #0
   1939e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   193a0:	687b      	ldr	r3, [r7, #4]
   193a2:	2b00      	cmp	r3, #0
   193a4:	d101      	bne.n	193aa <vTaskSetTimeOutState+0x12>
   193a6:	b672      	cpsid	i
   193a8:	e7fe      	b.n	193a8 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   193aa:	4b08      	ldr	r3, [pc, #32]	; (193cc <vTaskSetTimeOutState+0x34>)
   193ac:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   193ae:	4b08      	ldr	r3, [pc, #32]	; (193d0 <vTaskSetTimeOutState+0x38>)
   193b0:	681a      	ldr	r2, [r3, #0]
   193b2:	687b      	ldr	r3, [r7, #4]
   193b4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   193b6:	4b07      	ldr	r3, [pc, #28]	; (193d4 <vTaskSetTimeOutState+0x3c>)
   193b8:	681a      	ldr	r2, [r3, #0]
   193ba:	687b      	ldr	r3, [r7, #4]
   193bc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   193be:	4b06      	ldr	r3, [pc, #24]	; (193d8 <vTaskSetTimeOutState+0x40>)
   193c0:	4798      	blx	r3
}
   193c2:	46c0      	nop			; (mov r8, r8)
   193c4:	46bd      	mov	sp, r7
   193c6:	b002      	add	sp, #8
   193c8:	bd80      	pop	{r7, pc}
   193ca:	46c0      	nop			; (mov r8, r8)
   193cc:	00016a09 	.word	0x00016a09
   193d0:	20003c44 	.word	0x20003c44
   193d4:	20003c30 	.word	0x20003c30
   193d8:	00016a2d 	.word	0x00016a2d

000193dc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   193dc:	b580      	push	{r7, lr}
   193de:	b082      	sub	sp, #8
   193e0:	af00      	add	r7, sp, #0
   193e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   193e4:	4b05      	ldr	r3, [pc, #20]	; (193fc <vTaskInternalSetTimeOutState+0x20>)
   193e6:	681a      	ldr	r2, [r3, #0]
   193e8:	687b      	ldr	r3, [r7, #4]
   193ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   193ec:	4b04      	ldr	r3, [pc, #16]	; (19400 <vTaskInternalSetTimeOutState+0x24>)
   193ee:	681a      	ldr	r2, [r3, #0]
   193f0:	687b      	ldr	r3, [r7, #4]
   193f2:	605a      	str	r2, [r3, #4]
}
   193f4:	46c0      	nop			; (mov r8, r8)
   193f6:	46bd      	mov	sp, r7
   193f8:	b002      	add	sp, #8
   193fa:	bd80      	pop	{r7, pc}
   193fc:	20003c44 	.word	0x20003c44
   19400:	20003c30 	.word	0x20003c30

00019404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   19404:	b580      	push	{r7, lr}
   19406:	b086      	sub	sp, #24
   19408:	af00      	add	r7, sp, #0
   1940a:	6078      	str	r0, [r7, #4]
   1940c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1940e:	687b      	ldr	r3, [r7, #4]
   19410:	2b00      	cmp	r3, #0
   19412:	d101      	bne.n	19418 <xTaskCheckForTimeOut+0x14>
   19414:	b672      	cpsid	i
   19416:	e7fe      	b.n	19416 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   19418:	683b      	ldr	r3, [r7, #0]
   1941a:	2b00      	cmp	r3, #0
   1941c:	d101      	bne.n	19422 <xTaskCheckForTimeOut+0x1e>
   1941e:	b672      	cpsid	i
   19420:	e7fe      	b.n	19420 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   19422:	4b1e      	ldr	r3, [pc, #120]	; (1949c <xTaskCheckForTimeOut+0x98>)
   19424:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   19426:	4b1e      	ldr	r3, [pc, #120]	; (194a0 <xTaskCheckForTimeOut+0x9c>)
   19428:	681b      	ldr	r3, [r3, #0]
   1942a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1942c:	687b      	ldr	r3, [r7, #4]
   1942e:	685b      	ldr	r3, [r3, #4]
   19430:	693a      	ldr	r2, [r7, #16]
   19432:	1ad3      	subs	r3, r2, r3
   19434:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   19436:	683b      	ldr	r3, [r7, #0]
   19438:	681b      	ldr	r3, [r3, #0]
   1943a:	3301      	adds	r3, #1
   1943c:	d102      	bne.n	19444 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1943e:	2300      	movs	r3, #0
   19440:	617b      	str	r3, [r7, #20]
   19442:	e024      	b.n	1948e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   19444:	687b      	ldr	r3, [r7, #4]
   19446:	681a      	ldr	r2, [r3, #0]
   19448:	4b16      	ldr	r3, [pc, #88]	; (194a4 <xTaskCheckForTimeOut+0xa0>)
   1944a:	681b      	ldr	r3, [r3, #0]
   1944c:	429a      	cmp	r2, r3
   1944e:	d007      	beq.n	19460 <xTaskCheckForTimeOut+0x5c>
   19450:	687b      	ldr	r3, [r7, #4]
   19452:	685a      	ldr	r2, [r3, #4]
   19454:	693b      	ldr	r3, [r7, #16]
   19456:	429a      	cmp	r2, r3
   19458:	d802      	bhi.n	19460 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1945a:	2301      	movs	r3, #1
   1945c:	617b      	str	r3, [r7, #20]
   1945e:	e016      	b.n	1948e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   19460:	683b      	ldr	r3, [r7, #0]
   19462:	681a      	ldr	r2, [r3, #0]
   19464:	68fb      	ldr	r3, [r7, #12]
   19466:	429a      	cmp	r2, r3
   19468:	d90c      	bls.n	19484 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1946a:	683b      	ldr	r3, [r7, #0]
   1946c:	681a      	ldr	r2, [r3, #0]
   1946e:	68fb      	ldr	r3, [r7, #12]
   19470:	1ad2      	subs	r2, r2, r3
   19472:	683b      	ldr	r3, [r7, #0]
   19474:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   19476:	687b      	ldr	r3, [r7, #4]
   19478:	0018      	movs	r0, r3
   1947a:	4b0b      	ldr	r3, [pc, #44]	; (194a8 <xTaskCheckForTimeOut+0xa4>)
   1947c:	4798      	blx	r3
			xReturn = pdFALSE;
   1947e:	2300      	movs	r3, #0
   19480:	617b      	str	r3, [r7, #20]
   19482:	e004      	b.n	1948e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   19484:	683b      	ldr	r3, [r7, #0]
   19486:	2200      	movs	r2, #0
   19488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1948a:	2301      	movs	r3, #1
   1948c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1948e:	4b07      	ldr	r3, [pc, #28]	; (194ac <xTaskCheckForTimeOut+0xa8>)
   19490:	4798      	blx	r3

	return xReturn;
   19492:	697b      	ldr	r3, [r7, #20]
}
   19494:	0018      	movs	r0, r3
   19496:	46bd      	mov	sp, r7
   19498:	b006      	add	sp, #24
   1949a:	bd80      	pop	{r7, pc}
   1949c:	00016a09 	.word	0x00016a09
   194a0:	20003c30 	.word	0x20003c30
   194a4:	20003c44 	.word	0x20003c44
   194a8:	000193dd 	.word	0x000193dd
   194ac:	00016a2d 	.word	0x00016a2d

000194b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   194b0:	b580      	push	{r7, lr}
   194b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   194b4:	4b02      	ldr	r3, [pc, #8]	; (194c0 <vTaskMissedYield+0x10>)
   194b6:	2201      	movs	r2, #1
   194b8:	601a      	str	r2, [r3, #0]
}
   194ba:	46c0      	nop			; (mov r8, r8)
   194bc:	46bd      	mov	sp, r7
   194be:	bd80      	pop	{r7, pc}
   194c0:	20003c40 	.word	0x20003c40

000194c4 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   194c4:	b580      	push	{r7, lr}
   194c6:	b084      	sub	sp, #16
   194c8:	af00      	add	r7, sp, #0
   194ca:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   194cc:	687b      	ldr	r3, [r7, #4]
   194ce:	2b00      	cmp	r3, #0
   194d0:	d005      	beq.n	194de <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   194d2:	687b      	ldr	r3, [r7, #4]
   194d4:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   194d6:	68bb      	ldr	r3, [r7, #8]
   194d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   194da:	60fb      	str	r3, [r7, #12]
   194dc:	e001      	b.n	194e2 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   194de:	2300      	movs	r3, #0
   194e0:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   194e2:	68fb      	ldr	r3, [r7, #12]
	}
   194e4:	0018      	movs	r0, r3
   194e6:	46bd      	mov	sp, r7
   194e8:	b004      	add	sp, #16
   194ea:	bd80      	pop	{r7, pc}

000194ec <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   194ec:	b580      	push	{r7, lr}
   194ee:	b084      	sub	sp, #16
   194f0:	af00      	add	r7, sp, #0
   194f2:	6078      	str	r0, [r7, #4]
   194f4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   194f6:	687b      	ldr	r3, [r7, #4]
   194f8:	2b00      	cmp	r3, #0
   194fa:	d004      	beq.n	19506 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   194fc:	687b      	ldr	r3, [r7, #4]
   194fe:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   19500:	68fb      	ldr	r3, [r7, #12]
   19502:	683a      	ldr	r2, [r7, #0]
   19504:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   19506:	46c0      	nop			; (mov r8, r8)
   19508:	46bd      	mov	sp, r7
   1950a:	b004      	add	sp, #16
   1950c:	bd80      	pop	{r7, pc}
	...

00019510 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   19510:	b580      	push	{r7, lr}
   19512:	b082      	sub	sp, #8
   19514:	af00      	add	r7, sp, #0
   19516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   19518:	4b04      	ldr	r3, [pc, #16]	; (1952c <prvIdleTask+0x1c>)
   1951a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1951c:	4b04      	ldr	r3, [pc, #16]	; (19530 <prvIdleTask+0x20>)
   1951e:	681b      	ldr	r3, [r3, #0]
   19520:	2b01      	cmp	r3, #1
   19522:	d9f9      	bls.n	19518 <prvIdleTask+0x8>
			{
				taskYIELD();
   19524:	4b03      	ldr	r3, [pc, #12]	; (19534 <prvIdleTask+0x24>)
   19526:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   19528:	e7f6      	b.n	19518 <prvIdleTask+0x8>
   1952a:	46c0      	nop			; (mov r8, r8)
   1952c:	000195c5 	.word	0x000195c5
   19530:	20003b58 	.word	0x20003b58
   19534:	000169f1 	.word	0x000169f1

00019538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   19538:	b580      	push	{r7, lr}
   1953a:	b082      	sub	sp, #8
   1953c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1953e:	2300      	movs	r3, #0
   19540:	607b      	str	r3, [r7, #4]
   19542:	e00c      	b.n	1955e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   19544:	687a      	ldr	r2, [r7, #4]
   19546:	0013      	movs	r3, r2
   19548:	009b      	lsls	r3, r3, #2
   1954a:	189b      	adds	r3, r3, r2
   1954c:	009b      	lsls	r3, r3, #2
   1954e:	4a14      	ldr	r2, [pc, #80]	; (195a0 <prvInitialiseTaskLists+0x68>)
   19550:	189b      	adds	r3, r3, r2
   19552:	0018      	movs	r0, r3
   19554:	4b13      	ldr	r3, [pc, #76]	; (195a4 <prvInitialiseTaskLists+0x6c>)
   19556:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   19558:	687b      	ldr	r3, [r7, #4]
   1955a:	3301      	adds	r3, #1
   1955c:	607b      	str	r3, [r7, #4]
   1955e:	687b      	ldr	r3, [r7, #4]
   19560:	2b04      	cmp	r3, #4
   19562:	d9ef      	bls.n	19544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   19564:	4b10      	ldr	r3, [pc, #64]	; (195a8 <prvInitialiseTaskLists+0x70>)
   19566:	0018      	movs	r0, r3
   19568:	4b0e      	ldr	r3, [pc, #56]	; (195a4 <prvInitialiseTaskLists+0x6c>)
   1956a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1956c:	4b0f      	ldr	r3, [pc, #60]	; (195ac <prvInitialiseTaskLists+0x74>)
   1956e:	0018      	movs	r0, r3
   19570:	4b0c      	ldr	r3, [pc, #48]	; (195a4 <prvInitialiseTaskLists+0x6c>)
   19572:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   19574:	4b0e      	ldr	r3, [pc, #56]	; (195b0 <prvInitialiseTaskLists+0x78>)
   19576:	0018      	movs	r0, r3
   19578:	4b0a      	ldr	r3, [pc, #40]	; (195a4 <prvInitialiseTaskLists+0x6c>)
   1957a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1957c:	4b0d      	ldr	r3, [pc, #52]	; (195b4 <prvInitialiseTaskLists+0x7c>)
   1957e:	0018      	movs	r0, r3
   19580:	4b08      	ldr	r3, [pc, #32]	; (195a4 <prvInitialiseTaskLists+0x6c>)
   19582:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   19584:	4b0c      	ldr	r3, [pc, #48]	; (195b8 <prvInitialiseTaskLists+0x80>)
   19586:	0018      	movs	r0, r3
   19588:	4b06      	ldr	r3, [pc, #24]	; (195a4 <prvInitialiseTaskLists+0x6c>)
   1958a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1958c:	4b0b      	ldr	r3, [pc, #44]	; (195bc <prvInitialiseTaskLists+0x84>)
   1958e:	4a06      	ldr	r2, [pc, #24]	; (195a8 <prvInitialiseTaskLists+0x70>)
   19590:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   19592:	4b0b      	ldr	r3, [pc, #44]	; (195c0 <prvInitialiseTaskLists+0x88>)
   19594:	4a05      	ldr	r2, [pc, #20]	; (195ac <prvInitialiseTaskLists+0x74>)
   19596:	601a      	str	r2, [r3, #0]
}
   19598:	46c0      	nop			; (mov r8, r8)
   1959a:	46bd      	mov	sp, r7
   1959c:	b002      	add	sp, #8
   1959e:	bd80      	pop	{r7, pc}
   195a0:	20003b58 	.word	0x20003b58
   195a4:	00016779 	.word	0x00016779
   195a8:	20003bbc 	.word	0x20003bbc
   195ac:	20003bd0 	.word	0x20003bd0
   195b0:	20003bec 	.word	0x20003bec
   195b4:	20003c00 	.word	0x20003c00
   195b8:	20003c18 	.word	0x20003c18
   195bc:	20003be4 	.word	0x20003be4
   195c0:	20003be8 	.word	0x20003be8

000195c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   195c4:	b580      	push	{r7, lr}
   195c6:	b082      	sub	sp, #8
   195c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   195ca:	e01a      	b.n	19602 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   195cc:	4b11      	ldr	r3, [pc, #68]	; (19614 <prvCheckTasksWaitingTermination+0x50>)
   195ce:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   195d0:	4b11      	ldr	r3, [pc, #68]	; (19618 <prvCheckTasksWaitingTermination+0x54>)
   195d2:	68db      	ldr	r3, [r3, #12]
   195d4:	68db      	ldr	r3, [r3, #12]
   195d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   195d8:	687b      	ldr	r3, [r7, #4]
   195da:	3304      	adds	r3, #4
   195dc:	0018      	movs	r0, r3
   195de:	4b0f      	ldr	r3, [pc, #60]	; (1961c <prvCheckTasksWaitingTermination+0x58>)
   195e0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   195e2:	4b0f      	ldr	r3, [pc, #60]	; (19620 <prvCheckTasksWaitingTermination+0x5c>)
   195e4:	681b      	ldr	r3, [r3, #0]
   195e6:	1e5a      	subs	r2, r3, #1
   195e8:	4b0d      	ldr	r3, [pc, #52]	; (19620 <prvCheckTasksWaitingTermination+0x5c>)
   195ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   195ec:	4b0d      	ldr	r3, [pc, #52]	; (19624 <prvCheckTasksWaitingTermination+0x60>)
   195ee:	681b      	ldr	r3, [r3, #0]
   195f0:	1e5a      	subs	r2, r3, #1
   195f2:	4b0c      	ldr	r3, [pc, #48]	; (19624 <prvCheckTasksWaitingTermination+0x60>)
   195f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   195f6:	4b0c      	ldr	r3, [pc, #48]	; (19628 <prvCheckTasksWaitingTermination+0x64>)
   195f8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   195fa:	687b      	ldr	r3, [r7, #4]
   195fc:	0018      	movs	r0, r3
   195fe:	4b0b      	ldr	r3, [pc, #44]	; (1962c <prvCheckTasksWaitingTermination+0x68>)
   19600:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   19602:	4b08      	ldr	r3, [pc, #32]	; (19624 <prvCheckTasksWaitingTermination+0x60>)
   19604:	681b      	ldr	r3, [r3, #0]
   19606:	2b00      	cmp	r3, #0
   19608:	d1e0      	bne.n	195cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1960a:	46c0      	nop			; (mov r8, r8)
   1960c:	46bd      	mov	sp, r7
   1960e:	b002      	add	sp, #8
   19610:	bd80      	pop	{r7, pc}
   19612:	46c0      	nop			; (mov r8, r8)
   19614:	00016a09 	.word	0x00016a09
   19618:	20003c00 	.word	0x20003c00
   1961c:	0001687b 	.word	0x0001687b
   19620:	20003c2c 	.word	0x20003c2c
   19624:	20003c14 	.word	0x20003c14
   19628:	00016a2d 	.word	0x00016a2d
   1962c:	000196a1 	.word	0x000196a1

00019630 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   19630:	b580      	push	{r7, lr}
   19632:	b084      	sub	sp, #16
   19634:	af00      	add	r7, sp, #0
   19636:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   19638:	2300      	movs	r3, #0
   1963a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1963c:	e005      	b.n	1964a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1963e:	687b      	ldr	r3, [r7, #4]
   19640:	3301      	adds	r3, #1
   19642:	607b      	str	r3, [r7, #4]
			ulCount++;
   19644:	68fb      	ldr	r3, [r7, #12]
   19646:	3301      	adds	r3, #1
   19648:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1964a:	687b      	ldr	r3, [r7, #4]
   1964c:	781b      	ldrb	r3, [r3, #0]
   1964e:	2ba5      	cmp	r3, #165	; 0xa5
   19650:	d0f5      	beq.n	1963e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   19652:	68fb      	ldr	r3, [r7, #12]
   19654:	089b      	lsrs	r3, r3, #2
   19656:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   19658:	68fb      	ldr	r3, [r7, #12]
   1965a:	b29b      	uxth	r3, r3
	}
   1965c:	0018      	movs	r0, r3
   1965e:	46bd      	mov	sp, r7
   19660:	b004      	add	sp, #16
   19662:	bd80      	pop	{r7, pc}

00019664 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   19664:	b580      	push	{r7, lr}
   19666:	b086      	sub	sp, #24
   19668:	af00      	add	r7, sp, #0
   1966a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1966c:	687b      	ldr	r3, [r7, #4]
   1966e:	2b00      	cmp	r3, #0
   19670:	d102      	bne.n	19678 <uxTaskGetStackHighWaterMark+0x14>
   19672:	4b09      	ldr	r3, [pc, #36]	; (19698 <uxTaskGetStackHighWaterMark+0x34>)
   19674:	681b      	ldr	r3, [r3, #0]
   19676:	e000      	b.n	1967a <uxTaskGetStackHighWaterMark+0x16>
   19678:	687b      	ldr	r3, [r7, #4]
   1967a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1967c:	697b      	ldr	r3, [r7, #20]
   1967e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19680:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   19682:	693b      	ldr	r3, [r7, #16]
   19684:	0018      	movs	r0, r3
   19686:	4b05      	ldr	r3, [pc, #20]	; (1969c <uxTaskGetStackHighWaterMark+0x38>)
   19688:	4798      	blx	r3
   1968a:	0003      	movs	r3, r0
   1968c:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1968e:	68fb      	ldr	r3, [r7, #12]
	}
   19690:	0018      	movs	r0, r3
   19692:	46bd      	mov	sp, r7
   19694:	b006      	add	sp, #24
   19696:	bd80      	pop	{r7, pc}
   19698:	20003b54 	.word	0x20003b54
   1969c:	00019631 	.word	0x00019631

000196a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   196a0:	b580      	push	{r7, lr}
   196a2:	b082      	sub	sp, #8
   196a4:	af00      	add	r7, sp, #0
   196a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   196a8:	687b      	ldr	r3, [r7, #4]
   196aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   196ac:	0018      	movs	r0, r3
   196ae:	4b05      	ldr	r3, [pc, #20]	; (196c4 <prvDeleteTCB+0x24>)
   196b0:	4798      	blx	r3
			vPortFree( pxTCB );
   196b2:	687b      	ldr	r3, [r7, #4]
   196b4:	0018      	movs	r0, r3
   196b6:	4b03      	ldr	r3, [pc, #12]	; (196c4 <prvDeleteTCB+0x24>)
   196b8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   196ba:	46c0      	nop			; (mov r8, r8)
   196bc:	46bd      	mov	sp, r7
   196be:	b002      	add	sp, #8
   196c0:	bd80      	pop	{r7, pc}
   196c2:	46c0      	nop			; (mov r8, r8)
   196c4:	00016c05 	.word	0x00016c05

000196c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   196c8:	b580      	push	{r7, lr}
   196ca:	b082      	sub	sp, #8
   196cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   196ce:	4b0e      	ldr	r3, [pc, #56]	; (19708 <prvResetNextTaskUnblockTime+0x40>)
   196d0:	681b      	ldr	r3, [r3, #0]
   196d2:	681b      	ldr	r3, [r3, #0]
   196d4:	2b00      	cmp	r3, #0
   196d6:	d101      	bne.n	196dc <prvResetNextTaskUnblockTime+0x14>
   196d8:	2301      	movs	r3, #1
   196da:	e000      	b.n	196de <prvResetNextTaskUnblockTime+0x16>
   196dc:	2300      	movs	r3, #0
   196de:	2b00      	cmp	r3, #0
   196e0:	d004      	beq.n	196ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   196e2:	4b0a      	ldr	r3, [pc, #40]	; (1970c <prvResetNextTaskUnblockTime+0x44>)
   196e4:	2201      	movs	r2, #1
   196e6:	4252      	negs	r2, r2
   196e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   196ea:	e008      	b.n	196fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   196ec:	4b06      	ldr	r3, [pc, #24]	; (19708 <prvResetNextTaskUnblockTime+0x40>)
   196ee:	681b      	ldr	r3, [r3, #0]
   196f0:	68db      	ldr	r3, [r3, #12]
   196f2:	68db      	ldr	r3, [r3, #12]
   196f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   196f6:	687b      	ldr	r3, [r7, #4]
   196f8:	685a      	ldr	r2, [r3, #4]
   196fa:	4b04      	ldr	r3, [pc, #16]	; (1970c <prvResetNextTaskUnblockTime+0x44>)
   196fc:	601a      	str	r2, [r3, #0]
}
   196fe:	46c0      	nop			; (mov r8, r8)
   19700:	46bd      	mov	sp, r7
   19702:	b002      	add	sp, #8
   19704:	bd80      	pop	{r7, pc}
   19706:	46c0      	nop			; (mov r8, r8)
   19708:	20003be4 	.word	0x20003be4
   1970c:	20003c4c 	.word	0x20003c4c

00019710 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   19710:	b580      	push	{r7, lr}
   19712:	b082      	sub	sp, #8
   19714:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   19716:	4b04      	ldr	r3, [pc, #16]	; (19728 <xTaskGetCurrentTaskHandle+0x18>)
   19718:	681b      	ldr	r3, [r3, #0]
   1971a:	607b      	str	r3, [r7, #4]

		return xReturn;
   1971c:	687b      	ldr	r3, [r7, #4]
	}
   1971e:	0018      	movs	r0, r3
   19720:	46bd      	mov	sp, r7
   19722:	b002      	add	sp, #8
   19724:	bd80      	pop	{r7, pc}
   19726:	46c0      	nop			; (mov r8, r8)
   19728:	20003b54 	.word	0x20003b54

0001972c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1972c:	b580      	push	{r7, lr}
   1972e:	b082      	sub	sp, #8
   19730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   19732:	4b0a      	ldr	r3, [pc, #40]	; (1975c <xTaskGetSchedulerState+0x30>)
   19734:	681b      	ldr	r3, [r3, #0]
   19736:	2b00      	cmp	r3, #0
   19738:	d102      	bne.n	19740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1973a:	2301      	movs	r3, #1
   1973c:	607b      	str	r3, [r7, #4]
   1973e:	e008      	b.n	19752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   19740:	4b07      	ldr	r3, [pc, #28]	; (19760 <xTaskGetSchedulerState+0x34>)
   19742:	681b      	ldr	r3, [r3, #0]
   19744:	2b00      	cmp	r3, #0
   19746:	d102      	bne.n	1974e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   19748:	2302      	movs	r3, #2
   1974a:	607b      	str	r3, [r7, #4]
   1974c:	e001      	b.n	19752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1974e:	2300      	movs	r3, #0
   19750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   19752:	687b      	ldr	r3, [r7, #4]
	}
   19754:	0018      	movs	r0, r3
   19756:	46bd      	mov	sp, r7
   19758:	b002      	add	sp, #8
   1975a:	bd80      	pop	{r7, pc}
   1975c:	20003c38 	.word	0x20003c38
   19760:	20003c54 	.word	0x20003c54

00019764 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   19764:	b590      	push	{r4, r7, lr}
   19766:	b085      	sub	sp, #20
   19768:	af00      	add	r7, sp, #0
   1976a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1976c:	687b      	ldr	r3, [r7, #4]
   1976e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   19770:	2300      	movs	r3, #0
   19772:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   19774:	687b      	ldr	r3, [r7, #4]
   19776:	2b00      	cmp	r3, #0
   19778:	d100      	bne.n	1977c <xTaskPriorityInherit+0x18>
   1977a:	e09d      	b.n	198b8 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1977c:	68bb      	ldr	r3, [r7, #8]
   1977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19780:	4b50      	ldr	r3, [pc, #320]	; (198c4 <xTaskPriorityInherit+0x160>)
   19782:	681b      	ldr	r3, [r3, #0]
   19784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19786:	429a      	cmp	r2, r3
   19788:	d300      	bcc.n	1978c <xTaskPriorityInherit+0x28>
   1978a:	e08c      	b.n	198a6 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1978c:	68bb      	ldr	r3, [r7, #8]
   1978e:	699b      	ldr	r3, [r3, #24]
   19790:	2b00      	cmp	r3, #0
   19792:	db06      	blt.n	197a2 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19794:	4b4b      	ldr	r3, [pc, #300]	; (198c4 <xTaskPriorityInherit+0x160>)
   19796:	681b      	ldr	r3, [r3, #0]
   19798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1979a:	2205      	movs	r2, #5
   1979c:	1ad2      	subs	r2, r2, r3
   1979e:	68bb      	ldr	r3, [r7, #8]
   197a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   197a2:	68bb      	ldr	r3, [r7, #8]
   197a4:	6959      	ldr	r1, [r3, #20]
   197a6:	68bb      	ldr	r3, [r7, #8]
   197a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   197aa:	0013      	movs	r3, r2
   197ac:	009b      	lsls	r3, r3, #2
   197ae:	189b      	adds	r3, r3, r2
   197b0:	009b      	lsls	r3, r3, #2
   197b2:	4a45      	ldr	r2, [pc, #276]	; (198c8 <xTaskPriorityInherit+0x164>)
   197b4:	189b      	adds	r3, r3, r2
   197b6:	4299      	cmp	r1, r3
   197b8:	d101      	bne.n	197be <xTaskPriorityInherit+0x5a>
   197ba:	2301      	movs	r3, #1
   197bc:	e000      	b.n	197c0 <xTaskPriorityInherit+0x5c>
   197be:	2300      	movs	r3, #0
   197c0:	2b00      	cmp	r3, #0
   197c2:	d037      	beq.n	19834 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   197c4:	68bb      	ldr	r3, [r7, #8]
   197c6:	3304      	adds	r3, #4
   197c8:	0018      	movs	r0, r3
   197ca:	4b40      	ldr	r3, [pc, #256]	; (198cc <xTaskPriorityInherit+0x168>)
   197cc:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   197ce:	4b3d      	ldr	r3, [pc, #244]	; (198c4 <xTaskPriorityInherit+0x160>)
   197d0:	681b      	ldr	r3, [r3, #0]
   197d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   197d4:	68bb      	ldr	r3, [r7, #8]
   197d6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   197d8:	68bb      	ldr	r3, [r7, #8]
   197da:	0018      	movs	r0, r3
   197dc:	4b3c      	ldr	r3, [pc, #240]	; (198d0 <xTaskPriorityInherit+0x16c>)
   197de:	4798      	blx	r3
   197e0:	0003      	movs	r3, r0
   197e2:	001a      	movs	r2, r3
   197e4:	4b3b      	ldr	r3, [pc, #236]	; (198d4 <xTaskPriorityInherit+0x170>)
   197e6:	881b      	ldrh	r3, [r3, #0]
   197e8:	4013      	ands	r3, r2
   197ea:	b29b      	uxth	r3, r3
   197ec:	2b00      	cmp	r3, #0
   197ee:	d008      	beq.n	19802 <xTaskPriorityInherit+0x9e>
   197f0:	68bb      	ldr	r3, [r7, #8]
   197f2:	0018      	movs	r0, r3
   197f4:	4b38      	ldr	r3, [pc, #224]	; (198d8 <xTaskPriorityInherit+0x174>)
   197f6:	4798      	blx	r3
   197f8:	0003      	movs	r3, r0
   197fa:	b2db      	uxtb	r3, r3
   197fc:	0018      	movs	r0, r3
   197fe:	4b37      	ldr	r3, [pc, #220]	; (198dc <xTaskPriorityInherit+0x178>)
   19800:	4798      	blx	r3
   19802:	68bb      	ldr	r3, [r7, #8]
   19804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19806:	4b36      	ldr	r3, [pc, #216]	; (198e0 <xTaskPriorityInherit+0x17c>)
   19808:	681b      	ldr	r3, [r3, #0]
   1980a:	429a      	cmp	r2, r3
   1980c:	d903      	bls.n	19816 <xTaskPriorityInherit+0xb2>
   1980e:	68bb      	ldr	r3, [r7, #8]
   19810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19812:	4b33      	ldr	r3, [pc, #204]	; (198e0 <xTaskPriorityInherit+0x17c>)
   19814:	601a      	str	r2, [r3, #0]
   19816:	68bb      	ldr	r3, [r7, #8]
   19818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1981a:	0013      	movs	r3, r2
   1981c:	009b      	lsls	r3, r3, #2
   1981e:	189b      	adds	r3, r3, r2
   19820:	009b      	lsls	r3, r3, #2
   19822:	4a29      	ldr	r2, [pc, #164]	; (198c8 <xTaskPriorityInherit+0x164>)
   19824:	189a      	adds	r2, r3, r2
   19826:	68bb      	ldr	r3, [r7, #8]
   19828:	3304      	adds	r3, #4
   1982a:	0019      	movs	r1, r3
   1982c:	0010      	movs	r0, r2
   1982e:	4b2d      	ldr	r3, [pc, #180]	; (198e4 <xTaskPriorityInherit+0x180>)
   19830:	4798      	blx	r3
   19832:	e004      	b.n	1983e <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   19834:	4b23      	ldr	r3, [pc, #140]	; (198c4 <xTaskPriorityInherit+0x160>)
   19836:	681b      	ldr	r3, [r3, #0]
   19838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1983a:	68bb      	ldr	r3, [r7, #8]
   1983c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1983e:	68bb      	ldr	r3, [r7, #8]
   19840:	0018      	movs	r0, r3
   19842:	4b23      	ldr	r3, [pc, #140]	; (198d0 <xTaskPriorityInherit+0x16c>)
   19844:	4798      	blx	r3
   19846:	0003      	movs	r3, r0
   19848:	001a      	movs	r2, r3
   1984a:	4b22      	ldr	r3, [pc, #136]	; (198d4 <xTaskPriorityInherit+0x170>)
   1984c:	881b      	ldrh	r3, [r3, #0]
   1984e:	4013      	ands	r3, r2
   19850:	b29b      	uxth	r3, r3
   19852:	2b00      	cmp	r3, #0
   19854:	d024      	beq.n	198a0 <xTaskPriorityInherit+0x13c>
   19856:	68bb      	ldr	r3, [r7, #8]
   19858:	0018      	movs	r0, r3
   1985a:	4b1f      	ldr	r3, [pc, #124]	; (198d8 <xTaskPriorityInherit+0x174>)
   1985c:	4798      	blx	r3
   1985e:	0003      	movs	r3, r0
   19860:	b2db      	uxtb	r3, r3
   19862:	001c      	movs	r4, r3
   19864:	68bb      	ldr	r3, [r7, #8]
   19866:	0018      	movs	r0, r3
   19868:	4b1b      	ldr	r3, [pc, #108]	; (198d8 <xTaskPriorityInherit+0x174>)
   1986a:	4798      	blx	r3
   1986c:	0003      	movs	r3, r0
   1986e:	b2db      	uxtb	r3, r3
   19870:	0019      	movs	r1, r3
   19872:	2003      	movs	r0, #3
   19874:	4b1c      	ldr	r3, [pc, #112]	; (198e8 <xTaskPriorityInherit+0x184>)
   19876:	4798      	blx	r3
   19878:	0003      	movs	r3, r0
   1987a:	0022      	movs	r2, r4
   1987c:	2103      	movs	r1, #3
   1987e:	208e      	movs	r0, #142	; 0x8e
   19880:	4c1a      	ldr	r4, [pc, #104]	; (198ec <xTaskPriorityInherit+0x188>)
   19882:	47a0      	blx	r4
   19884:	68bb      	ldr	r3, [r7, #8]
   19886:	0018      	movs	r0, r3
   19888:	4b13      	ldr	r3, [pc, #76]	; (198d8 <xTaskPriorityInherit+0x174>)
   1988a:	4798      	blx	r3
   1988c:	0003      	movs	r3, r0
   1988e:	b2d9      	uxtb	r1, r3
   19890:	4b0c      	ldr	r3, [pc, #48]	; (198c4 <xTaskPriorityInherit+0x160>)
   19892:	681b      	ldr	r3, [r3, #0]
   19894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19896:	b2db      	uxtb	r3, r3
   19898:	001a      	movs	r2, r3
   1989a:	2003      	movs	r0, #3
   1989c:	4b14      	ldr	r3, [pc, #80]	; (198f0 <xTaskPriorityInherit+0x18c>)
   1989e:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   198a0:	2301      	movs	r3, #1
   198a2:	60fb      	str	r3, [r7, #12]
   198a4:	e008      	b.n	198b8 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   198a6:	68bb      	ldr	r3, [r7, #8]
   198a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   198aa:	4b06      	ldr	r3, [pc, #24]	; (198c4 <xTaskPriorityInherit+0x160>)
   198ac:	681b      	ldr	r3, [r3, #0]
   198ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   198b0:	429a      	cmp	r2, r3
   198b2:	d201      	bcs.n	198b8 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   198b4:	2301      	movs	r3, #1
   198b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   198b8:	68fb      	ldr	r3, [r7, #12]
	}
   198ba:	0018      	movs	r0, r3
   198bc:	46bd      	mov	sp, r7
   198be:	b005      	add	sp, #20
   198c0:	bd90      	pop	{r4, r7, pc}
   198c2:	46c0      	nop			; (mov r8, r8)
   198c4:	20003b54 	.word	0x20003b54
   198c8:	20003b58 	.word	0x20003b58
   198cc:	0001687b 	.word	0x0001687b
   198d0:	00014a01 	.word	0x00014a01
   198d4:	200000b4 	.word	0x200000b4
   198d8:	000149e1 	.word	0x000149e1
   198dc:	000151b1 	.word	0x000151b1
   198e0:	20003c34 	.word	0x20003c34
   198e4:	000167cb 	.word	0x000167cb
   198e8:	000159b9 	.word	0x000159b9
   198ec:	00015529 	.word	0x00015529
   198f0:	00015915 	.word	0x00015915

000198f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   198f4:	b590      	push	{r4, r7, lr}
   198f6:	b085      	sub	sp, #20
   198f8:	af00      	add	r7, sp, #0
   198fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   198fc:	687b      	ldr	r3, [r7, #4]
   198fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   19900:	2300      	movs	r3, #0
   19902:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   19904:	687b      	ldr	r3, [r7, #4]
   19906:	2b00      	cmp	r3, #0
   19908:	d100      	bne.n	1990c <xTaskPriorityDisinherit+0x18>
   1990a:	e089      	b.n	19a20 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1990c:	4b47      	ldr	r3, [pc, #284]	; (19a2c <xTaskPriorityDisinherit+0x138>)
   1990e:	681b      	ldr	r3, [r3, #0]
   19910:	68ba      	ldr	r2, [r7, #8]
   19912:	429a      	cmp	r2, r3
   19914:	d001      	beq.n	1991a <xTaskPriorityDisinherit+0x26>
   19916:	b672      	cpsid	i
   19918:	e7fe      	b.n	19918 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1991a:	68bb      	ldr	r3, [r7, #8]
   1991c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1991e:	2b00      	cmp	r3, #0
   19920:	d101      	bne.n	19926 <xTaskPriorityDisinherit+0x32>
   19922:	b672      	cpsid	i
   19924:	e7fe      	b.n	19924 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   19926:	68bb      	ldr	r3, [r7, #8]
   19928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1992a:	1e5a      	subs	r2, r3, #1
   1992c:	68bb      	ldr	r3, [r7, #8]
   1992e:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   19930:	68bb      	ldr	r3, [r7, #8]
   19932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19934:	68bb      	ldr	r3, [r7, #8]
   19936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   19938:	429a      	cmp	r2, r3
   1993a:	d071      	beq.n	19a20 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1993c:	68bb      	ldr	r3, [r7, #8]
   1993e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19940:	2b00      	cmp	r3, #0
   19942:	d16d      	bne.n	19a20 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   19944:	68bb      	ldr	r3, [r7, #8]
   19946:	3304      	adds	r3, #4
   19948:	0018      	movs	r0, r3
   1994a:	4b39      	ldr	r3, [pc, #228]	; (19a30 <xTaskPriorityDisinherit+0x13c>)
   1994c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1994e:	68bb      	ldr	r3, [r7, #8]
   19950:	0018      	movs	r0, r3
   19952:	4b38      	ldr	r3, [pc, #224]	; (19a34 <xTaskPriorityDisinherit+0x140>)
   19954:	4798      	blx	r3
   19956:	0003      	movs	r3, r0
   19958:	001a      	movs	r2, r3
   1995a:	4b37      	ldr	r3, [pc, #220]	; (19a38 <xTaskPriorityDisinherit+0x144>)
   1995c:	881b      	ldrh	r3, [r3, #0]
   1995e:	4013      	ands	r3, r2
   19960:	b29b      	uxth	r3, r3
   19962:	2b00      	cmp	r3, #0
   19964:	d023      	beq.n	199ae <xTaskPriorityDisinherit+0xba>
   19966:	68bb      	ldr	r3, [r7, #8]
   19968:	0018      	movs	r0, r3
   1996a:	4b34      	ldr	r3, [pc, #208]	; (19a3c <xTaskPriorityDisinherit+0x148>)
   1996c:	4798      	blx	r3
   1996e:	0003      	movs	r3, r0
   19970:	b2db      	uxtb	r3, r3
   19972:	001c      	movs	r4, r3
   19974:	68bb      	ldr	r3, [r7, #8]
   19976:	0018      	movs	r0, r3
   19978:	4b30      	ldr	r3, [pc, #192]	; (19a3c <xTaskPriorityDisinherit+0x148>)
   1997a:	4798      	blx	r3
   1997c:	0003      	movs	r3, r0
   1997e:	b2db      	uxtb	r3, r3
   19980:	0019      	movs	r1, r3
   19982:	2003      	movs	r0, #3
   19984:	4b2e      	ldr	r3, [pc, #184]	; (19a40 <xTaskPriorityDisinherit+0x14c>)
   19986:	4798      	blx	r3
   19988:	0003      	movs	r3, r0
   1998a:	0022      	movs	r2, r4
   1998c:	2103      	movs	r1, #3
   1998e:	208f      	movs	r0, #143	; 0x8f
   19990:	4c2c      	ldr	r4, [pc, #176]	; (19a44 <xTaskPriorityDisinherit+0x150>)
   19992:	47a0      	blx	r4
   19994:	68bb      	ldr	r3, [r7, #8]
   19996:	0018      	movs	r0, r3
   19998:	4b28      	ldr	r3, [pc, #160]	; (19a3c <xTaskPriorityDisinherit+0x148>)
   1999a:	4798      	blx	r3
   1999c:	0003      	movs	r3, r0
   1999e:	b2d9      	uxtb	r1, r3
   199a0:	68bb      	ldr	r3, [r7, #8]
   199a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   199a4:	b2db      	uxtb	r3, r3
   199a6:	001a      	movs	r2, r3
   199a8:	2003      	movs	r0, #3
   199aa:	4b27      	ldr	r3, [pc, #156]	; (19a48 <xTaskPriorityDisinherit+0x154>)
   199ac:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   199ae:	68bb      	ldr	r3, [r7, #8]
   199b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   199b2:	68bb      	ldr	r3, [r7, #8]
   199b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   199b6:	68bb      	ldr	r3, [r7, #8]
   199b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   199ba:	2205      	movs	r2, #5
   199bc:	1ad2      	subs	r2, r2, r3
   199be:	68bb      	ldr	r3, [r7, #8]
   199c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   199c2:	68bb      	ldr	r3, [r7, #8]
   199c4:	0018      	movs	r0, r3
   199c6:	4b1b      	ldr	r3, [pc, #108]	; (19a34 <xTaskPriorityDisinherit+0x140>)
   199c8:	4798      	blx	r3
   199ca:	0003      	movs	r3, r0
   199cc:	001a      	movs	r2, r3
   199ce:	4b1a      	ldr	r3, [pc, #104]	; (19a38 <xTaskPriorityDisinherit+0x144>)
   199d0:	881b      	ldrh	r3, [r3, #0]
   199d2:	4013      	ands	r3, r2
   199d4:	b29b      	uxth	r3, r3
   199d6:	2b00      	cmp	r3, #0
   199d8:	d008      	beq.n	199ec <xTaskPriorityDisinherit+0xf8>
   199da:	68bb      	ldr	r3, [r7, #8]
   199dc:	0018      	movs	r0, r3
   199de:	4b17      	ldr	r3, [pc, #92]	; (19a3c <xTaskPriorityDisinherit+0x148>)
   199e0:	4798      	blx	r3
   199e2:	0003      	movs	r3, r0
   199e4:	b2db      	uxtb	r3, r3
   199e6:	0018      	movs	r0, r3
   199e8:	4b18      	ldr	r3, [pc, #96]	; (19a4c <xTaskPriorityDisinherit+0x158>)
   199ea:	4798      	blx	r3
   199ec:	68bb      	ldr	r3, [r7, #8]
   199ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   199f0:	4b17      	ldr	r3, [pc, #92]	; (19a50 <xTaskPriorityDisinherit+0x15c>)
   199f2:	681b      	ldr	r3, [r3, #0]
   199f4:	429a      	cmp	r2, r3
   199f6:	d903      	bls.n	19a00 <xTaskPriorityDisinherit+0x10c>
   199f8:	68bb      	ldr	r3, [r7, #8]
   199fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   199fc:	4b14      	ldr	r3, [pc, #80]	; (19a50 <xTaskPriorityDisinherit+0x15c>)
   199fe:	601a      	str	r2, [r3, #0]
   19a00:	68bb      	ldr	r3, [r7, #8]
   19a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19a04:	0013      	movs	r3, r2
   19a06:	009b      	lsls	r3, r3, #2
   19a08:	189b      	adds	r3, r3, r2
   19a0a:	009b      	lsls	r3, r3, #2
   19a0c:	4a11      	ldr	r2, [pc, #68]	; (19a54 <xTaskPriorityDisinherit+0x160>)
   19a0e:	189a      	adds	r2, r3, r2
   19a10:	68bb      	ldr	r3, [r7, #8]
   19a12:	3304      	adds	r3, #4
   19a14:	0019      	movs	r1, r3
   19a16:	0010      	movs	r0, r2
   19a18:	4b0f      	ldr	r3, [pc, #60]	; (19a58 <xTaskPriorityDisinherit+0x164>)
   19a1a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   19a1c:	2301      	movs	r3, #1
   19a1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   19a20:	68fb      	ldr	r3, [r7, #12]
	}
   19a22:	0018      	movs	r0, r3
   19a24:	46bd      	mov	sp, r7
   19a26:	b005      	add	sp, #20
   19a28:	bd90      	pop	{r4, r7, pc}
   19a2a:	46c0      	nop			; (mov r8, r8)
   19a2c:	20003b54 	.word	0x20003b54
   19a30:	0001687b 	.word	0x0001687b
   19a34:	00014a01 	.word	0x00014a01
   19a38:	200000b4 	.word	0x200000b4
   19a3c:	000149e1 	.word	0x000149e1
   19a40:	000159b9 	.word	0x000159b9
   19a44:	00015529 	.word	0x00015529
   19a48:	00015915 	.word	0x00015915
   19a4c:	000151b1 	.word	0x000151b1
   19a50:	20003c34 	.word	0x20003c34
   19a54:	20003b58 	.word	0x20003b58
   19a58:	000167cb 	.word	0x000167cb

00019a5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   19a5c:	b590      	push	{r4, r7, lr}
   19a5e:	b087      	sub	sp, #28
   19a60:	af00      	add	r7, sp, #0
   19a62:	6078      	str	r0, [r7, #4]
   19a64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   19a66:	687b      	ldr	r3, [r7, #4]
   19a68:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   19a6a:	2301      	movs	r3, #1
   19a6c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   19a6e:	687b      	ldr	r3, [r7, #4]
   19a70:	2b00      	cmp	r3, #0
   19a72:	d100      	bne.n	19a76 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   19a74:	e0a4      	b.n	19bc0 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   19a76:	693b      	ldr	r3, [r7, #16]
   19a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19a7a:	2b00      	cmp	r3, #0
   19a7c:	d101      	bne.n	19a82 <vTaskPriorityDisinheritAfterTimeout+0x26>
   19a7e:	b672      	cpsid	i
   19a80:	e7fe      	b.n	19a80 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   19a82:	693b      	ldr	r3, [r7, #16]
   19a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   19a86:	683b      	ldr	r3, [r7, #0]
   19a88:	429a      	cmp	r2, r3
   19a8a:	d202      	bcs.n	19a92 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   19a8c:	683b      	ldr	r3, [r7, #0]
   19a8e:	617b      	str	r3, [r7, #20]
   19a90:	e002      	b.n	19a98 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   19a92:	693b      	ldr	r3, [r7, #16]
   19a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   19a96:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   19a98:	693b      	ldr	r3, [r7, #16]
   19a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19a9c:	697b      	ldr	r3, [r7, #20]
   19a9e:	429a      	cmp	r2, r3
   19aa0:	d100      	bne.n	19aa4 <vTaskPriorityDisinheritAfterTimeout+0x48>
   19aa2:	e08d      	b.n	19bc0 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   19aa4:	693b      	ldr	r3, [r7, #16]
   19aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19aa8:	68fb      	ldr	r3, [r7, #12]
   19aaa:	429a      	cmp	r2, r3
   19aac:	d000      	beq.n	19ab0 <vTaskPriorityDisinheritAfterTimeout+0x54>
   19aae:	e087      	b.n	19bc0 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   19ab0:	4b45      	ldr	r3, [pc, #276]	; (19bc8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   19ab2:	681b      	ldr	r3, [r3, #0]
   19ab4:	693a      	ldr	r2, [r7, #16]
   19ab6:	429a      	cmp	r2, r3
   19ab8:	d101      	bne.n	19abe <vTaskPriorityDisinheritAfterTimeout+0x62>
   19aba:	b672      	cpsid	i
   19abc:	e7fe      	b.n	19abc <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   19abe:	693b      	ldr	r3, [r7, #16]
   19ac0:	0018      	movs	r0, r3
   19ac2:	4b42      	ldr	r3, [pc, #264]	; (19bcc <vTaskPriorityDisinheritAfterTimeout+0x170>)
   19ac4:	4798      	blx	r3
   19ac6:	0003      	movs	r3, r0
   19ac8:	001a      	movs	r2, r3
   19aca:	4b41      	ldr	r3, [pc, #260]	; (19bd0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   19acc:	881b      	ldrh	r3, [r3, #0]
   19ace:	4013      	ands	r3, r2
   19ad0:	b29b      	uxth	r3, r3
   19ad2:	2b00      	cmp	r3, #0
   19ad4:	d023      	beq.n	19b1e <vTaskPriorityDisinheritAfterTimeout+0xc2>
   19ad6:	693b      	ldr	r3, [r7, #16]
   19ad8:	0018      	movs	r0, r3
   19ada:	4b3e      	ldr	r3, [pc, #248]	; (19bd4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   19adc:	4798      	blx	r3
   19ade:	0003      	movs	r3, r0
   19ae0:	b2db      	uxtb	r3, r3
   19ae2:	001c      	movs	r4, r3
   19ae4:	693b      	ldr	r3, [r7, #16]
   19ae6:	0018      	movs	r0, r3
   19ae8:	4b3a      	ldr	r3, [pc, #232]	; (19bd4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   19aea:	4798      	blx	r3
   19aec:	0003      	movs	r3, r0
   19aee:	b2db      	uxtb	r3, r3
   19af0:	0019      	movs	r1, r3
   19af2:	2003      	movs	r0, #3
   19af4:	4b38      	ldr	r3, [pc, #224]	; (19bd8 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   19af6:	4798      	blx	r3
   19af8:	0003      	movs	r3, r0
   19afa:	0022      	movs	r2, r4
   19afc:	2103      	movs	r1, #3
   19afe:	208f      	movs	r0, #143	; 0x8f
   19b00:	4c36      	ldr	r4, [pc, #216]	; (19bdc <vTaskPriorityDisinheritAfterTimeout+0x180>)
   19b02:	47a0      	blx	r4
   19b04:	693b      	ldr	r3, [r7, #16]
   19b06:	0018      	movs	r0, r3
   19b08:	4b32      	ldr	r3, [pc, #200]	; (19bd4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   19b0a:	4798      	blx	r3
   19b0c:	0003      	movs	r3, r0
   19b0e:	b2d9      	uxtb	r1, r3
   19b10:	693b      	ldr	r3, [r7, #16]
   19b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   19b14:	b2db      	uxtb	r3, r3
   19b16:	001a      	movs	r2, r3
   19b18:	2003      	movs	r0, #3
   19b1a:	4b31      	ldr	r3, [pc, #196]	; (19be0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   19b1c:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   19b1e:	693b      	ldr	r3, [r7, #16]
   19b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19b22:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   19b24:	693b      	ldr	r3, [r7, #16]
   19b26:	697a      	ldr	r2, [r7, #20]
   19b28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   19b2a:	693b      	ldr	r3, [r7, #16]
   19b2c:	699b      	ldr	r3, [r3, #24]
   19b2e:	2b00      	cmp	r3, #0
   19b30:	db04      	blt.n	19b3c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19b32:	697b      	ldr	r3, [r7, #20]
   19b34:	2205      	movs	r2, #5
   19b36:	1ad2      	subs	r2, r2, r3
   19b38:	693b      	ldr	r3, [r7, #16]
   19b3a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   19b3c:	693b      	ldr	r3, [r7, #16]
   19b3e:	6959      	ldr	r1, [r3, #20]
   19b40:	68ba      	ldr	r2, [r7, #8]
   19b42:	0013      	movs	r3, r2
   19b44:	009b      	lsls	r3, r3, #2
   19b46:	189b      	adds	r3, r3, r2
   19b48:	009b      	lsls	r3, r3, #2
   19b4a:	4a26      	ldr	r2, [pc, #152]	; (19be4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   19b4c:	189b      	adds	r3, r3, r2
   19b4e:	4299      	cmp	r1, r3
   19b50:	d101      	bne.n	19b56 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   19b52:	2301      	movs	r3, #1
   19b54:	e000      	b.n	19b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   19b56:	2300      	movs	r3, #0
   19b58:	2b00      	cmp	r3, #0
   19b5a:	d031      	beq.n	19bc0 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   19b5c:	693b      	ldr	r3, [r7, #16]
   19b5e:	3304      	adds	r3, #4
   19b60:	0018      	movs	r0, r3
   19b62:	4b21      	ldr	r3, [pc, #132]	; (19be8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   19b64:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   19b66:	693b      	ldr	r3, [r7, #16]
   19b68:	0018      	movs	r0, r3
   19b6a:	4b18      	ldr	r3, [pc, #96]	; (19bcc <vTaskPriorityDisinheritAfterTimeout+0x170>)
   19b6c:	4798      	blx	r3
   19b6e:	0003      	movs	r3, r0
   19b70:	001a      	movs	r2, r3
   19b72:	4b17      	ldr	r3, [pc, #92]	; (19bd0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   19b74:	881b      	ldrh	r3, [r3, #0]
   19b76:	4013      	ands	r3, r2
   19b78:	b29b      	uxth	r3, r3
   19b7a:	2b00      	cmp	r3, #0
   19b7c:	d008      	beq.n	19b90 <vTaskPriorityDisinheritAfterTimeout+0x134>
   19b7e:	693b      	ldr	r3, [r7, #16]
   19b80:	0018      	movs	r0, r3
   19b82:	4b14      	ldr	r3, [pc, #80]	; (19bd4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   19b84:	4798      	blx	r3
   19b86:	0003      	movs	r3, r0
   19b88:	b2db      	uxtb	r3, r3
   19b8a:	0018      	movs	r0, r3
   19b8c:	4b17      	ldr	r3, [pc, #92]	; (19bec <vTaskPriorityDisinheritAfterTimeout+0x190>)
   19b8e:	4798      	blx	r3
   19b90:	693b      	ldr	r3, [r7, #16]
   19b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19b94:	4b16      	ldr	r3, [pc, #88]	; (19bf0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   19b96:	681b      	ldr	r3, [r3, #0]
   19b98:	429a      	cmp	r2, r3
   19b9a:	d903      	bls.n	19ba4 <vTaskPriorityDisinheritAfterTimeout+0x148>
   19b9c:	693b      	ldr	r3, [r7, #16]
   19b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19ba0:	4b13      	ldr	r3, [pc, #76]	; (19bf0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   19ba2:	601a      	str	r2, [r3, #0]
   19ba4:	693b      	ldr	r3, [r7, #16]
   19ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19ba8:	0013      	movs	r3, r2
   19baa:	009b      	lsls	r3, r3, #2
   19bac:	189b      	adds	r3, r3, r2
   19bae:	009b      	lsls	r3, r3, #2
   19bb0:	4a0c      	ldr	r2, [pc, #48]	; (19be4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   19bb2:	189a      	adds	r2, r3, r2
   19bb4:	693b      	ldr	r3, [r7, #16]
   19bb6:	3304      	adds	r3, #4
   19bb8:	0019      	movs	r1, r3
   19bba:	0010      	movs	r0, r2
   19bbc:	4b0d      	ldr	r3, [pc, #52]	; (19bf4 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   19bbe:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   19bc0:	46c0      	nop			; (mov r8, r8)
   19bc2:	46bd      	mov	sp, r7
   19bc4:	b007      	add	sp, #28
   19bc6:	bd90      	pop	{r4, r7, pc}
   19bc8:	20003b54 	.word	0x20003b54
   19bcc:	00014a01 	.word	0x00014a01
   19bd0:	200000b4 	.word	0x200000b4
   19bd4:	000149e1 	.word	0x000149e1
   19bd8:	000159b9 	.word	0x000159b9
   19bdc:	00015529 	.word	0x00015529
   19be0:	00015915 	.word	0x00015915
   19be4:	20003b58 	.word	0x20003b58
   19be8:	0001687b 	.word	0x0001687b
   19bec:	000151b1 	.word	0x000151b1
   19bf0:	20003c34 	.word	0x20003c34
   19bf4:	000167cb 	.word	0x000167cb

00019bf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   19bf8:	b580      	push	{r7, lr}
   19bfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   19bfc:	4b06      	ldr	r3, [pc, #24]	; (19c18 <pvTaskIncrementMutexHeldCount+0x20>)
   19bfe:	681b      	ldr	r3, [r3, #0]
   19c00:	2b00      	cmp	r3, #0
   19c02:	d004      	beq.n	19c0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   19c04:	4b04      	ldr	r3, [pc, #16]	; (19c18 <pvTaskIncrementMutexHeldCount+0x20>)
   19c06:	681b      	ldr	r3, [r3, #0]
   19c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19c0a:	3201      	adds	r2, #1
   19c0c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   19c0e:	4b02      	ldr	r3, [pc, #8]	; (19c18 <pvTaskIncrementMutexHeldCount+0x20>)
   19c10:	681b      	ldr	r3, [r3, #0]
	}
   19c12:	0018      	movs	r0, r3
   19c14:	46bd      	mov	sp, r7
   19c16:	bd80      	pop	{r7, pc}
   19c18:	20003b54 	.word	0x20003b54

00019c1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   19c1c:	b580      	push	{r7, lr}
   19c1e:	b084      	sub	sp, #16
   19c20:	af00      	add	r7, sp, #0
   19c22:	6078      	str	r0, [r7, #4]
   19c24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   19c26:	4b21      	ldr	r3, [pc, #132]	; (19cac <prvAddCurrentTaskToDelayedList+0x90>)
   19c28:	681b      	ldr	r3, [r3, #0]
   19c2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   19c2c:	4b20      	ldr	r3, [pc, #128]	; (19cb0 <prvAddCurrentTaskToDelayedList+0x94>)
   19c2e:	681b      	ldr	r3, [r3, #0]
   19c30:	3304      	adds	r3, #4
   19c32:	0018      	movs	r0, r3
   19c34:	4b1f      	ldr	r3, [pc, #124]	; (19cb4 <prvAddCurrentTaskToDelayedList+0x98>)
   19c36:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   19c38:	687b      	ldr	r3, [r7, #4]
   19c3a:	3301      	adds	r3, #1
   19c3c:	d10b      	bne.n	19c56 <prvAddCurrentTaskToDelayedList+0x3a>
   19c3e:	683b      	ldr	r3, [r7, #0]
   19c40:	2b00      	cmp	r3, #0
   19c42:	d008      	beq.n	19c56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   19c44:	4b1a      	ldr	r3, [pc, #104]	; (19cb0 <prvAddCurrentTaskToDelayedList+0x94>)
   19c46:	681b      	ldr	r3, [r3, #0]
   19c48:	1d1a      	adds	r2, r3, #4
   19c4a:	4b1b      	ldr	r3, [pc, #108]	; (19cb8 <prvAddCurrentTaskToDelayedList+0x9c>)
   19c4c:	0011      	movs	r1, r2
   19c4e:	0018      	movs	r0, r3
   19c50:	4b1a      	ldr	r3, [pc, #104]	; (19cbc <prvAddCurrentTaskToDelayedList+0xa0>)
   19c52:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   19c54:	e026      	b.n	19ca4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   19c56:	68fa      	ldr	r2, [r7, #12]
   19c58:	687b      	ldr	r3, [r7, #4]
   19c5a:	18d3      	adds	r3, r2, r3
   19c5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   19c5e:	4b14      	ldr	r3, [pc, #80]	; (19cb0 <prvAddCurrentTaskToDelayedList+0x94>)
   19c60:	681b      	ldr	r3, [r3, #0]
   19c62:	68ba      	ldr	r2, [r7, #8]
   19c64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   19c66:	68ba      	ldr	r2, [r7, #8]
   19c68:	68fb      	ldr	r3, [r7, #12]
   19c6a:	429a      	cmp	r2, r3
   19c6c:	d209      	bcs.n	19c82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   19c6e:	4b14      	ldr	r3, [pc, #80]	; (19cc0 <prvAddCurrentTaskToDelayedList+0xa4>)
   19c70:	681a      	ldr	r2, [r3, #0]
   19c72:	4b0f      	ldr	r3, [pc, #60]	; (19cb0 <prvAddCurrentTaskToDelayedList+0x94>)
   19c74:	681b      	ldr	r3, [r3, #0]
   19c76:	3304      	adds	r3, #4
   19c78:	0019      	movs	r1, r3
   19c7a:	0010      	movs	r0, r2
   19c7c:	4b11      	ldr	r3, [pc, #68]	; (19cc4 <prvAddCurrentTaskToDelayedList+0xa8>)
   19c7e:	4798      	blx	r3
}
   19c80:	e010      	b.n	19ca4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   19c82:	4b11      	ldr	r3, [pc, #68]	; (19cc8 <prvAddCurrentTaskToDelayedList+0xac>)
   19c84:	681a      	ldr	r2, [r3, #0]
   19c86:	4b0a      	ldr	r3, [pc, #40]	; (19cb0 <prvAddCurrentTaskToDelayedList+0x94>)
   19c88:	681b      	ldr	r3, [r3, #0]
   19c8a:	3304      	adds	r3, #4
   19c8c:	0019      	movs	r1, r3
   19c8e:	0010      	movs	r0, r2
   19c90:	4b0c      	ldr	r3, [pc, #48]	; (19cc4 <prvAddCurrentTaskToDelayedList+0xa8>)
   19c92:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   19c94:	4b0d      	ldr	r3, [pc, #52]	; (19ccc <prvAddCurrentTaskToDelayedList+0xb0>)
   19c96:	681b      	ldr	r3, [r3, #0]
   19c98:	68ba      	ldr	r2, [r7, #8]
   19c9a:	429a      	cmp	r2, r3
   19c9c:	d202      	bcs.n	19ca4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   19c9e:	4b0b      	ldr	r3, [pc, #44]	; (19ccc <prvAddCurrentTaskToDelayedList+0xb0>)
   19ca0:	68ba      	ldr	r2, [r7, #8]
   19ca2:	601a      	str	r2, [r3, #0]
}
   19ca4:	46c0      	nop			; (mov r8, r8)
   19ca6:	46bd      	mov	sp, r7
   19ca8:	b004      	add	sp, #16
   19caa:	bd80      	pop	{r7, pc}
   19cac:	20003c30 	.word	0x20003c30
   19cb0:	20003b54 	.word	0x20003b54
   19cb4:	0001687b 	.word	0x0001687b
   19cb8:	20003c18 	.word	0x20003c18
   19cbc:	000167cb 	.word	0x000167cb
   19cc0:	20003be8 	.word	0x20003be8
   19cc4:	0001680f 	.word	0x0001680f
   19cc8:	20003be4 	.word	0x20003be4
   19ccc:	20003c4c 	.word	0x20003c4c

00019cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   19cd0:	b590      	push	{r4, r7, lr}
   19cd2:	b085      	sub	sp, #20
   19cd4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   19cd6:	2300      	movs	r3, #0
   19cd8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   19cda:	4b0e      	ldr	r3, [pc, #56]	; (19d14 <xTimerCreateTimerTask+0x44>)
   19cdc:	4798      	blx	r3

	if( xTimerQueue != NULL )
   19cde:	4b0e      	ldr	r3, [pc, #56]	; (19d18 <xTimerCreateTimerTask+0x48>)
   19ce0:	681b      	ldr	r3, [r3, #0]
   19ce2:	2b00      	cmp	r3, #0
   19ce4:	d00b      	beq.n	19cfe <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   19ce6:	490d      	ldr	r1, [pc, #52]	; (19d1c <xTimerCreateTimerTask+0x4c>)
   19ce8:	480d      	ldr	r0, [pc, #52]	; (19d20 <xTimerCreateTimerTask+0x50>)
   19cea:	4b0e      	ldr	r3, [pc, #56]	; (19d24 <xTimerCreateTimerTask+0x54>)
   19cec:	9301      	str	r3, [sp, #4]
   19cee:	2302      	movs	r3, #2
   19cf0:	9300      	str	r3, [sp, #0]
   19cf2:	2300      	movs	r3, #0
   19cf4:	2280      	movs	r2, #128	; 0x80
   19cf6:	4c0c      	ldr	r4, [pc, #48]	; (19d28 <xTimerCreateTimerTask+0x58>)
   19cf8:	47a0      	blx	r4
   19cfa:	0003      	movs	r3, r0
   19cfc:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   19cfe:	687b      	ldr	r3, [r7, #4]
   19d00:	2b00      	cmp	r3, #0
   19d02:	d101      	bne.n	19d08 <xTimerCreateTimerTask+0x38>
   19d04:	b672      	cpsid	i
   19d06:	e7fe      	b.n	19d06 <xTimerCreateTimerTask+0x36>
	return xReturn;
   19d08:	687b      	ldr	r3, [r7, #4]
}
   19d0a:	0018      	movs	r0, r3
   19d0c:	46bd      	mov	sp, r7
   19d0e:	b003      	add	sp, #12
   19d10:	bd90      	pop	{r4, r7, pc}
   19d12:	46c0      	nop			; (mov r8, r8)
   19d14:	0001a219 	.word	0x0001a219
   19d18:	20003c88 	.word	0x20003c88
   19d1c:	00036570 	.word	0x00036570
   19d20:	00019e51 	.word	0x00019e51
   19d24:	20003c8c 	.word	0x20003c8c
   19d28:	00018669 	.word	0x00018669

00019d2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   19d2c:	b590      	push	{r4, r7, lr}
   19d2e:	b089      	sub	sp, #36	; 0x24
   19d30:	af00      	add	r7, sp, #0
   19d32:	60f8      	str	r0, [r7, #12]
   19d34:	60b9      	str	r1, [r7, #8]
   19d36:	607a      	str	r2, [r7, #4]
   19d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   19d3a:	2300      	movs	r3, #0
   19d3c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   19d3e:	68fb      	ldr	r3, [r7, #12]
   19d40:	2b00      	cmp	r3, #0
   19d42:	d101      	bne.n	19d48 <xTimerGenericCommand+0x1c>
   19d44:	b672      	cpsid	i
   19d46:	e7fe      	b.n	19d46 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   19d48:	4b1e      	ldr	r3, [pc, #120]	; (19dc4 <xTimerGenericCommand+0x98>)
   19d4a:	681b      	ldr	r3, [r3, #0]
   19d4c:	2b00      	cmp	r3, #0
   19d4e:	d033      	beq.n	19db8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   19d50:	2310      	movs	r3, #16
   19d52:	18fb      	adds	r3, r7, r3
   19d54:	68ba      	ldr	r2, [r7, #8]
   19d56:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   19d58:	2310      	movs	r3, #16
   19d5a:	18fb      	adds	r3, r7, r3
   19d5c:	687a      	ldr	r2, [r7, #4]
   19d5e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   19d60:	2310      	movs	r3, #16
   19d62:	18fb      	adds	r3, r7, r3
   19d64:	68fa      	ldr	r2, [r7, #12]
   19d66:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   19d68:	68bb      	ldr	r3, [r7, #8]
   19d6a:	2b05      	cmp	r3, #5
   19d6c:	dc1a      	bgt.n	19da4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   19d6e:	4b16      	ldr	r3, [pc, #88]	; (19dc8 <xTimerGenericCommand+0x9c>)
   19d70:	4798      	blx	r3
   19d72:	0003      	movs	r3, r0
   19d74:	2b02      	cmp	r3, #2
   19d76:	d10a      	bne.n	19d8e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   19d78:	4b12      	ldr	r3, [pc, #72]	; (19dc4 <xTimerGenericCommand+0x98>)
   19d7a:	6818      	ldr	r0, [r3, #0]
   19d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19d7e:	2310      	movs	r3, #16
   19d80:	18f9      	adds	r1, r7, r3
   19d82:	2300      	movs	r3, #0
   19d84:	4c11      	ldr	r4, [pc, #68]	; (19dcc <xTimerGenericCommand+0xa0>)
   19d86:	47a0      	blx	r4
   19d88:	0003      	movs	r3, r0
   19d8a:	61fb      	str	r3, [r7, #28]
   19d8c:	e014      	b.n	19db8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   19d8e:	4b0d      	ldr	r3, [pc, #52]	; (19dc4 <xTimerGenericCommand+0x98>)
   19d90:	6818      	ldr	r0, [r3, #0]
   19d92:	2310      	movs	r3, #16
   19d94:	18f9      	adds	r1, r7, r3
   19d96:	2300      	movs	r3, #0
   19d98:	2200      	movs	r2, #0
   19d9a:	4c0c      	ldr	r4, [pc, #48]	; (19dcc <xTimerGenericCommand+0xa0>)
   19d9c:	47a0      	blx	r4
   19d9e:	0003      	movs	r3, r0
   19da0:	61fb      	str	r3, [r7, #28]
   19da2:	e009      	b.n	19db8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   19da4:	4b07      	ldr	r3, [pc, #28]	; (19dc4 <xTimerGenericCommand+0x98>)
   19da6:	6818      	ldr	r0, [r3, #0]
   19da8:	683a      	ldr	r2, [r7, #0]
   19daa:	2310      	movs	r3, #16
   19dac:	18f9      	adds	r1, r7, r3
   19dae:	2300      	movs	r3, #0
   19db0:	4c07      	ldr	r4, [pc, #28]	; (19dd0 <xTimerGenericCommand+0xa4>)
   19db2:	47a0      	blx	r4
   19db4:	0003      	movs	r3, r0
   19db6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   19db8:	69fb      	ldr	r3, [r7, #28]
}
   19dba:	0018      	movs	r0, r3
   19dbc:	46bd      	mov	sp, r7
   19dbe:	b009      	add	sp, #36	; 0x24
   19dc0:	bd90      	pop	{r4, r7, pc}
   19dc2:	46c0      	nop			; (mov r8, r8)
   19dc4:	20003c88 	.word	0x20003c88
   19dc8:	0001972d 	.word	0x0001972d
   19dcc:	00016fa1 	.word	0x00016fa1
   19dd0:	00017401 	.word	0x00017401

00019dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   19dd4:	b590      	push	{r4, r7, lr}
   19dd6:	b087      	sub	sp, #28
   19dd8:	af02      	add	r7, sp, #8
   19dda:	6078      	str	r0, [r7, #4]
   19ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   19dde:	4b18      	ldr	r3, [pc, #96]	; (19e40 <prvProcessExpiredTimer+0x6c>)
   19de0:	681b      	ldr	r3, [r3, #0]
   19de2:	68db      	ldr	r3, [r3, #12]
   19de4:	68db      	ldr	r3, [r3, #12]
   19de6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   19de8:	68fb      	ldr	r3, [r7, #12]
   19dea:	3304      	adds	r3, #4
   19dec:	0018      	movs	r0, r3
   19dee:	4b15      	ldr	r3, [pc, #84]	; (19e44 <prvProcessExpiredTimer+0x70>)
   19df0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   19df2:	68fb      	ldr	r3, [r7, #12]
   19df4:	69db      	ldr	r3, [r3, #28]
   19df6:	2b01      	cmp	r3, #1
   19df8:	d119      	bne.n	19e2e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   19dfa:	68fb      	ldr	r3, [r7, #12]
   19dfc:	699a      	ldr	r2, [r3, #24]
   19dfe:	687b      	ldr	r3, [r7, #4]
   19e00:	18d1      	adds	r1, r2, r3
   19e02:	687b      	ldr	r3, [r7, #4]
   19e04:	683a      	ldr	r2, [r7, #0]
   19e06:	68f8      	ldr	r0, [r7, #12]
   19e08:	4c0f      	ldr	r4, [pc, #60]	; (19e48 <prvProcessExpiredTimer+0x74>)
   19e0a:	47a0      	blx	r4
   19e0c:	1e03      	subs	r3, r0, #0
   19e0e:	d00e      	beq.n	19e2e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   19e10:	687a      	ldr	r2, [r7, #4]
   19e12:	68f8      	ldr	r0, [r7, #12]
   19e14:	2300      	movs	r3, #0
   19e16:	9300      	str	r3, [sp, #0]
   19e18:	2300      	movs	r3, #0
   19e1a:	2100      	movs	r1, #0
   19e1c:	4c0b      	ldr	r4, [pc, #44]	; (19e4c <prvProcessExpiredTimer+0x78>)
   19e1e:	47a0      	blx	r4
   19e20:	0003      	movs	r3, r0
   19e22:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   19e24:	68bb      	ldr	r3, [r7, #8]
   19e26:	2b00      	cmp	r3, #0
   19e28:	d101      	bne.n	19e2e <prvProcessExpiredTimer+0x5a>
   19e2a:	b672      	cpsid	i
   19e2c:	e7fe      	b.n	19e2c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   19e2e:	68fb      	ldr	r3, [r7, #12]
   19e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19e32:	68fa      	ldr	r2, [r7, #12]
   19e34:	0010      	movs	r0, r2
   19e36:	4798      	blx	r3
}
   19e38:	46c0      	nop			; (mov r8, r8)
   19e3a:	46bd      	mov	sp, r7
   19e3c:	b005      	add	sp, #20
   19e3e:	bd90      	pop	{r4, r7, pc}
   19e40:	20003c80 	.word	0x20003c80
   19e44:	0001687b 	.word	0x0001687b
   19e48:	00019fb9 	.word	0x00019fb9
   19e4c:	00019d2d 	.word	0x00019d2d

00019e50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   19e50:	b580      	push	{r7, lr}
   19e52:	b084      	sub	sp, #16
   19e54:	af00      	add	r7, sp, #0
   19e56:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   19e58:	4b08      	ldr	r3, [pc, #32]	; (19e7c <prvTimerTask+0x2c>)
   19e5a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   19e5c:	2308      	movs	r3, #8
   19e5e:	18fb      	adds	r3, r7, r3
   19e60:	0018      	movs	r0, r3
   19e62:	4b07      	ldr	r3, [pc, #28]	; (19e80 <prvTimerTask+0x30>)
   19e64:	4798      	blx	r3
   19e66:	0003      	movs	r3, r0
   19e68:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   19e6a:	68ba      	ldr	r2, [r7, #8]
   19e6c:	68fb      	ldr	r3, [r7, #12]
   19e6e:	0011      	movs	r1, r2
   19e70:	0018      	movs	r0, r3
   19e72:	4b04      	ldr	r3, [pc, #16]	; (19e84 <prvTimerTask+0x34>)
   19e74:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   19e76:	4b04      	ldr	r3, [pc, #16]	; (19e88 <prvTimerTask+0x38>)
   19e78:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   19e7a:	e7ef      	b.n	19e5c <prvTimerTask+0xc>
   19e7c:	0002fbe1 	.word	0x0002fbe1
   19e80:	00019f31 	.word	0x00019f31
   19e84:	00019e8d 	.word	0x00019e8d
   19e88:	0001a041 	.word	0x0001a041

00019e8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   19e8c:	b580      	push	{r7, lr}
   19e8e:	b084      	sub	sp, #16
   19e90:	af00      	add	r7, sp, #0
   19e92:	6078      	str	r0, [r7, #4]
   19e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   19e96:	4b1e      	ldr	r3, [pc, #120]	; (19f10 <prvProcessTimerOrBlockTask+0x84>)
   19e98:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   19e9a:	2308      	movs	r3, #8
   19e9c:	18fb      	adds	r3, r7, r3
   19e9e:	0018      	movs	r0, r3
   19ea0:	4b1c      	ldr	r3, [pc, #112]	; (19f14 <prvProcessTimerOrBlockTask+0x88>)
   19ea2:	4798      	blx	r3
   19ea4:	0003      	movs	r3, r0
   19ea6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   19ea8:	68bb      	ldr	r3, [r7, #8]
   19eaa:	2b00      	cmp	r3, #0
   19eac:	d129      	bne.n	19f02 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   19eae:	683b      	ldr	r3, [r7, #0]
   19eb0:	2b00      	cmp	r3, #0
   19eb2:	d10c      	bne.n	19ece <prvProcessTimerOrBlockTask+0x42>
   19eb4:	687a      	ldr	r2, [r7, #4]
   19eb6:	68fb      	ldr	r3, [r7, #12]
   19eb8:	429a      	cmp	r2, r3
   19eba:	d808      	bhi.n	19ece <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   19ebc:	4b16      	ldr	r3, [pc, #88]	; (19f18 <prvProcessTimerOrBlockTask+0x8c>)
   19ebe:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   19ec0:	68fa      	ldr	r2, [r7, #12]
   19ec2:	687b      	ldr	r3, [r7, #4]
   19ec4:	0011      	movs	r1, r2
   19ec6:	0018      	movs	r0, r3
   19ec8:	4b14      	ldr	r3, [pc, #80]	; (19f1c <prvProcessTimerOrBlockTask+0x90>)
   19eca:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   19ecc:	e01b      	b.n	19f06 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   19ece:	683b      	ldr	r3, [r7, #0]
   19ed0:	2b00      	cmp	r3, #0
   19ed2:	d006      	beq.n	19ee2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   19ed4:	4b12      	ldr	r3, [pc, #72]	; (19f20 <prvProcessTimerOrBlockTask+0x94>)
   19ed6:	681b      	ldr	r3, [r3, #0]
   19ed8:	681b      	ldr	r3, [r3, #0]
   19eda:	425a      	negs	r2, r3
   19edc:	4153      	adcs	r3, r2
   19ede:	b2db      	uxtb	r3, r3
   19ee0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   19ee2:	4b10      	ldr	r3, [pc, #64]	; (19f24 <prvProcessTimerOrBlockTask+0x98>)
   19ee4:	6818      	ldr	r0, [r3, #0]
   19ee6:	687a      	ldr	r2, [r7, #4]
   19ee8:	68fb      	ldr	r3, [r7, #12]
   19eea:	1ad3      	subs	r3, r2, r3
   19eec:	683a      	ldr	r2, [r7, #0]
   19eee:	0019      	movs	r1, r3
   19ef0:	4b0d      	ldr	r3, [pc, #52]	; (19f28 <prvProcessTimerOrBlockTask+0x9c>)
   19ef2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   19ef4:	4b08      	ldr	r3, [pc, #32]	; (19f18 <prvProcessTimerOrBlockTask+0x8c>)
   19ef6:	4798      	blx	r3
   19ef8:	1e03      	subs	r3, r0, #0
   19efa:	d104      	bne.n	19f06 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   19efc:	4b0b      	ldr	r3, [pc, #44]	; (19f2c <prvProcessTimerOrBlockTask+0xa0>)
   19efe:	4798      	blx	r3
}
   19f00:	e001      	b.n	19f06 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   19f02:	4b05      	ldr	r3, [pc, #20]	; (19f18 <prvProcessTimerOrBlockTask+0x8c>)
   19f04:	4798      	blx	r3
}
   19f06:	46c0      	nop			; (mov r8, r8)
   19f08:	46bd      	mov	sp, r7
   19f0a:	b004      	add	sp, #16
   19f0c:	bd80      	pop	{r7, pc}
   19f0e:	46c0      	nop			; (mov r8, r8)
   19f10:	00018cc5 	.word	0x00018cc5
   19f14:	00019f71 	.word	0x00019f71
   19f18:	00018cdd 	.word	0x00018cdd
   19f1c:	00019dd5 	.word	0x00019dd5
   19f20:	20003c84 	.word	0x20003c84
   19f24:	20003c88 	.word	0x20003c88
   19f28:	00018465 	.word	0x00018465
   19f2c:	000169f1 	.word	0x000169f1

00019f30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   19f30:	b580      	push	{r7, lr}
   19f32:	b084      	sub	sp, #16
   19f34:	af00      	add	r7, sp, #0
   19f36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   19f38:	4b0c      	ldr	r3, [pc, #48]	; (19f6c <prvGetNextExpireTime+0x3c>)
   19f3a:	681b      	ldr	r3, [r3, #0]
   19f3c:	681b      	ldr	r3, [r3, #0]
   19f3e:	425a      	negs	r2, r3
   19f40:	4153      	adcs	r3, r2
   19f42:	b2db      	uxtb	r3, r3
   19f44:	001a      	movs	r2, r3
   19f46:	687b      	ldr	r3, [r7, #4]
   19f48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   19f4a:	687b      	ldr	r3, [r7, #4]
   19f4c:	681b      	ldr	r3, [r3, #0]
   19f4e:	2b00      	cmp	r3, #0
   19f50:	d105      	bne.n	19f5e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   19f52:	4b06      	ldr	r3, [pc, #24]	; (19f6c <prvGetNextExpireTime+0x3c>)
   19f54:	681b      	ldr	r3, [r3, #0]
   19f56:	68db      	ldr	r3, [r3, #12]
   19f58:	681b      	ldr	r3, [r3, #0]
   19f5a:	60fb      	str	r3, [r7, #12]
   19f5c:	e001      	b.n	19f62 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   19f5e:	2300      	movs	r3, #0
   19f60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   19f62:	68fb      	ldr	r3, [r7, #12]
}
   19f64:	0018      	movs	r0, r3
   19f66:	46bd      	mov	sp, r7
   19f68:	b004      	add	sp, #16
   19f6a:	bd80      	pop	{r7, pc}
   19f6c:	20003c80 	.word	0x20003c80

00019f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   19f70:	b580      	push	{r7, lr}
   19f72:	b084      	sub	sp, #16
   19f74:	af00      	add	r7, sp, #0
   19f76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   19f78:	4b0c      	ldr	r3, [pc, #48]	; (19fac <prvSampleTimeNow+0x3c>)
   19f7a:	4798      	blx	r3
   19f7c:	0003      	movs	r3, r0
   19f7e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   19f80:	4b0b      	ldr	r3, [pc, #44]	; (19fb0 <prvSampleTimeNow+0x40>)
   19f82:	681b      	ldr	r3, [r3, #0]
   19f84:	68fa      	ldr	r2, [r7, #12]
   19f86:	429a      	cmp	r2, r3
   19f88:	d205      	bcs.n	19f96 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   19f8a:	4b0a      	ldr	r3, [pc, #40]	; (19fb4 <prvSampleTimeNow+0x44>)
   19f8c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   19f8e:	687b      	ldr	r3, [r7, #4]
   19f90:	2201      	movs	r2, #1
   19f92:	601a      	str	r2, [r3, #0]
   19f94:	e002      	b.n	19f9c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   19f96:	687b      	ldr	r3, [r7, #4]
   19f98:	2200      	movs	r2, #0
   19f9a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   19f9c:	4b04      	ldr	r3, [pc, #16]	; (19fb0 <prvSampleTimeNow+0x40>)
   19f9e:	68fa      	ldr	r2, [r7, #12]
   19fa0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   19fa2:	68fb      	ldr	r3, [r7, #12]
}
   19fa4:	0018      	movs	r0, r3
   19fa6:	46bd      	mov	sp, r7
   19fa8:	b004      	add	sp, #16
   19faa:	bd80      	pop	{r7, pc}
   19fac:	00018e4d 	.word	0x00018e4d
   19fb0:	20003c90 	.word	0x20003c90
   19fb4:	0001a159 	.word	0x0001a159

00019fb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   19fb8:	b580      	push	{r7, lr}
   19fba:	b086      	sub	sp, #24
   19fbc:	af00      	add	r7, sp, #0
   19fbe:	60f8      	str	r0, [r7, #12]
   19fc0:	60b9      	str	r1, [r7, #8]
   19fc2:	607a      	str	r2, [r7, #4]
   19fc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   19fc6:	2300      	movs	r3, #0
   19fc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   19fca:	68fb      	ldr	r3, [r7, #12]
   19fcc:	68ba      	ldr	r2, [r7, #8]
   19fce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   19fd0:	68fb      	ldr	r3, [r7, #12]
   19fd2:	68fa      	ldr	r2, [r7, #12]
   19fd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   19fd6:	68ba      	ldr	r2, [r7, #8]
   19fd8:	687b      	ldr	r3, [r7, #4]
   19fda:	429a      	cmp	r2, r3
   19fdc:	d812      	bhi.n	1a004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19fde:	687a      	ldr	r2, [r7, #4]
   19fe0:	683b      	ldr	r3, [r7, #0]
   19fe2:	1ad2      	subs	r2, r2, r3
   19fe4:	68fb      	ldr	r3, [r7, #12]
   19fe6:	699b      	ldr	r3, [r3, #24]
   19fe8:	429a      	cmp	r2, r3
   19fea:	d302      	bcc.n	19ff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   19fec:	2301      	movs	r3, #1
   19fee:	617b      	str	r3, [r7, #20]
   19ff0:	e01b      	b.n	1a02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   19ff2:	4b10      	ldr	r3, [pc, #64]	; (1a034 <prvInsertTimerInActiveList+0x7c>)
   19ff4:	681a      	ldr	r2, [r3, #0]
   19ff6:	68fb      	ldr	r3, [r7, #12]
   19ff8:	3304      	adds	r3, #4
   19ffa:	0019      	movs	r1, r3
   19ffc:	0010      	movs	r0, r2
   19ffe:	4b0e      	ldr	r3, [pc, #56]	; (1a038 <prvInsertTimerInActiveList+0x80>)
   1a000:	4798      	blx	r3
   1a002:	e012      	b.n	1a02a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1a004:	687a      	ldr	r2, [r7, #4]
   1a006:	683b      	ldr	r3, [r7, #0]
   1a008:	429a      	cmp	r2, r3
   1a00a:	d206      	bcs.n	1a01a <prvInsertTimerInActiveList+0x62>
   1a00c:	68ba      	ldr	r2, [r7, #8]
   1a00e:	683b      	ldr	r3, [r7, #0]
   1a010:	429a      	cmp	r2, r3
   1a012:	d302      	bcc.n	1a01a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1a014:	2301      	movs	r3, #1
   1a016:	617b      	str	r3, [r7, #20]
   1a018:	e007      	b.n	1a02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1a01a:	4b08      	ldr	r3, [pc, #32]	; (1a03c <prvInsertTimerInActiveList+0x84>)
   1a01c:	681a      	ldr	r2, [r3, #0]
   1a01e:	68fb      	ldr	r3, [r7, #12]
   1a020:	3304      	adds	r3, #4
   1a022:	0019      	movs	r1, r3
   1a024:	0010      	movs	r0, r2
   1a026:	4b04      	ldr	r3, [pc, #16]	; (1a038 <prvInsertTimerInActiveList+0x80>)
   1a028:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1a02a:	697b      	ldr	r3, [r7, #20]
}
   1a02c:	0018      	movs	r0, r3
   1a02e:	46bd      	mov	sp, r7
   1a030:	b006      	add	sp, #24
   1a032:	bd80      	pop	{r7, pc}
   1a034:	20003c84 	.word	0x20003c84
   1a038:	0001680f 	.word	0x0001680f
   1a03c:	20003c80 	.word	0x20003c80

0001a040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1a040:	b590      	push	{r4, r7, lr}
   1a042:	b08b      	sub	sp, #44	; 0x2c
   1a044:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1a046:	e068      	b.n	1a11a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1a048:	2308      	movs	r3, #8
   1a04a:	18fb      	adds	r3, r7, r3
   1a04c:	681b      	ldr	r3, [r3, #0]
   1a04e:	2b00      	cmp	r3, #0
   1a050:	db63      	blt.n	1a11a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1a052:	2308      	movs	r3, #8
   1a054:	18fb      	adds	r3, r7, r3
   1a056:	689b      	ldr	r3, [r3, #8]
   1a058:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1a05a:	69fb      	ldr	r3, [r7, #28]
   1a05c:	695b      	ldr	r3, [r3, #20]
   1a05e:	2b00      	cmp	r3, #0
   1a060:	d004      	beq.n	1a06c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1a062:	69fb      	ldr	r3, [r7, #28]
   1a064:	3304      	adds	r3, #4
   1a066:	0018      	movs	r0, r3
   1a068:	4b33      	ldr	r3, [pc, #204]	; (1a138 <prvProcessReceivedCommands+0xf8>)
   1a06a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1a06c:	1d3b      	adds	r3, r7, #4
   1a06e:	0018      	movs	r0, r3
   1a070:	4b32      	ldr	r3, [pc, #200]	; (1a13c <prvProcessReceivedCommands+0xfc>)
   1a072:	4798      	blx	r3
   1a074:	0003      	movs	r3, r0
   1a076:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1a078:	2308      	movs	r3, #8
   1a07a:	18fb      	adds	r3, r7, r3
   1a07c:	681b      	ldr	r3, [r3, #0]
   1a07e:	2b09      	cmp	r3, #9
   1a080:	d84a      	bhi.n	1a118 <prvProcessReceivedCommands+0xd8>
   1a082:	009a      	lsls	r2, r3, #2
   1a084:	4b2e      	ldr	r3, [pc, #184]	; (1a140 <prvProcessReceivedCommands+0x100>)
   1a086:	18d3      	adds	r3, r2, r3
   1a088:	681b      	ldr	r3, [r3, #0]
   1a08a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1a08c:	2308      	movs	r3, #8
   1a08e:	18fb      	adds	r3, r7, r3
   1a090:	685a      	ldr	r2, [r3, #4]
   1a092:	69fb      	ldr	r3, [r7, #28]
   1a094:	699b      	ldr	r3, [r3, #24]
   1a096:	18d1      	adds	r1, r2, r3
   1a098:	2308      	movs	r3, #8
   1a09a:	18fb      	adds	r3, r7, r3
   1a09c:	685b      	ldr	r3, [r3, #4]
   1a09e:	69ba      	ldr	r2, [r7, #24]
   1a0a0:	69f8      	ldr	r0, [r7, #28]
   1a0a2:	4c28      	ldr	r4, [pc, #160]	; (1a144 <prvProcessReceivedCommands+0x104>)
   1a0a4:	47a0      	blx	r4
   1a0a6:	1e03      	subs	r3, r0, #0
   1a0a8:	d037      	beq.n	1a11a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1a0aa:	69fb      	ldr	r3, [r7, #28]
   1a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a0ae:	69fa      	ldr	r2, [r7, #28]
   1a0b0:	0010      	movs	r0, r2
   1a0b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1a0b4:	69fb      	ldr	r3, [r7, #28]
   1a0b6:	69db      	ldr	r3, [r3, #28]
   1a0b8:	2b01      	cmp	r3, #1
   1a0ba:	d12e      	bne.n	1a11a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1a0bc:	2308      	movs	r3, #8
   1a0be:	18fb      	adds	r3, r7, r3
   1a0c0:	685a      	ldr	r2, [r3, #4]
   1a0c2:	69fb      	ldr	r3, [r7, #28]
   1a0c4:	699b      	ldr	r3, [r3, #24]
   1a0c6:	18d2      	adds	r2, r2, r3
   1a0c8:	69f8      	ldr	r0, [r7, #28]
   1a0ca:	2300      	movs	r3, #0
   1a0cc:	9300      	str	r3, [sp, #0]
   1a0ce:	2300      	movs	r3, #0
   1a0d0:	2100      	movs	r1, #0
   1a0d2:	4c1d      	ldr	r4, [pc, #116]	; (1a148 <prvProcessReceivedCommands+0x108>)
   1a0d4:	47a0      	blx	r4
   1a0d6:	0003      	movs	r3, r0
   1a0d8:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1a0da:	697b      	ldr	r3, [r7, #20]
   1a0dc:	2b00      	cmp	r3, #0
   1a0de:	d11c      	bne.n	1a11a <prvProcessReceivedCommands+0xda>
   1a0e0:	b672      	cpsid	i
   1a0e2:	e7fe      	b.n	1a0e2 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1a0e4:	2308      	movs	r3, #8
   1a0e6:	18fb      	adds	r3, r7, r3
   1a0e8:	685a      	ldr	r2, [r3, #4]
   1a0ea:	69fb      	ldr	r3, [r7, #28]
   1a0ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1a0ee:	69fb      	ldr	r3, [r7, #28]
   1a0f0:	699b      	ldr	r3, [r3, #24]
   1a0f2:	2b00      	cmp	r3, #0
   1a0f4:	d101      	bne.n	1a0fa <prvProcessReceivedCommands+0xba>
   1a0f6:	b672      	cpsid	i
   1a0f8:	e7fe      	b.n	1a0f8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1a0fa:	69fb      	ldr	r3, [r7, #28]
   1a0fc:	699a      	ldr	r2, [r3, #24]
   1a0fe:	69bb      	ldr	r3, [r7, #24]
   1a100:	18d1      	adds	r1, r2, r3
   1a102:	69bb      	ldr	r3, [r7, #24]
   1a104:	69ba      	ldr	r2, [r7, #24]
   1a106:	69f8      	ldr	r0, [r7, #28]
   1a108:	4c0e      	ldr	r4, [pc, #56]	; (1a144 <prvProcessReceivedCommands+0x104>)
   1a10a:	47a0      	blx	r4
					break;
   1a10c:	e005      	b.n	1a11a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1a10e:	69fb      	ldr	r3, [r7, #28]
   1a110:	0018      	movs	r0, r3
   1a112:	4b0e      	ldr	r3, [pc, #56]	; (1a14c <prvProcessReceivedCommands+0x10c>)
   1a114:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1a116:	e000      	b.n	1a11a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1a118:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1a11a:	4b0d      	ldr	r3, [pc, #52]	; (1a150 <prvProcessReceivedCommands+0x110>)
   1a11c:	681b      	ldr	r3, [r3, #0]
   1a11e:	2208      	movs	r2, #8
   1a120:	18b9      	adds	r1, r7, r2
   1a122:	2200      	movs	r2, #0
   1a124:	0018      	movs	r0, r3
   1a126:	4b0b      	ldr	r3, [pc, #44]	; (1a154 <prvProcessReceivedCommands+0x114>)
   1a128:	4798      	blx	r3
   1a12a:	1e03      	subs	r3, r0, #0
   1a12c:	d18c      	bne.n	1a048 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1a12e:	46c0      	nop			; (mov r8, r8)
   1a130:	46bd      	mov	sp, r7
   1a132:	b009      	add	sp, #36	; 0x24
   1a134:	bd90      	pop	{r4, r7, pc}
   1a136:	46c0      	nop			; (mov r8, r8)
   1a138:	0001687b 	.word	0x0001687b
   1a13c:	00019f71 	.word	0x00019f71
   1a140:	00036578 	.word	0x00036578
   1a144:	00019fb9 	.word	0x00019fb9
   1a148:	00019d2d 	.word	0x00019d2d
   1a14c:	00016c05 	.word	0x00016c05
   1a150:	20003c88 	.word	0x20003c88
   1a154:	00017859 	.word	0x00017859

0001a158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1a158:	b590      	push	{r4, r7, lr}
   1a15a:	b089      	sub	sp, #36	; 0x24
   1a15c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1a15e:	e03e      	b.n	1a1de <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1a160:	4b28      	ldr	r3, [pc, #160]	; (1a204 <prvSwitchTimerLists+0xac>)
   1a162:	681b      	ldr	r3, [r3, #0]
   1a164:	68db      	ldr	r3, [r3, #12]
   1a166:	681b      	ldr	r3, [r3, #0]
   1a168:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1a16a:	4b26      	ldr	r3, [pc, #152]	; (1a204 <prvSwitchTimerLists+0xac>)
   1a16c:	681b      	ldr	r3, [r3, #0]
   1a16e:	68db      	ldr	r3, [r3, #12]
   1a170:	68db      	ldr	r3, [r3, #12]
   1a172:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1a174:	693b      	ldr	r3, [r7, #16]
   1a176:	3304      	adds	r3, #4
   1a178:	0018      	movs	r0, r3
   1a17a:	4b23      	ldr	r3, [pc, #140]	; (1a208 <prvSwitchTimerLists+0xb0>)
   1a17c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1a17e:	693b      	ldr	r3, [r7, #16]
   1a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a182:	693a      	ldr	r2, [r7, #16]
   1a184:	0010      	movs	r0, r2
   1a186:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1a188:	693b      	ldr	r3, [r7, #16]
   1a18a:	69db      	ldr	r3, [r3, #28]
   1a18c:	2b01      	cmp	r3, #1
   1a18e:	d126      	bne.n	1a1de <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1a190:	693b      	ldr	r3, [r7, #16]
   1a192:	699a      	ldr	r2, [r3, #24]
   1a194:	697b      	ldr	r3, [r7, #20]
   1a196:	18d3      	adds	r3, r2, r3
   1a198:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1a19a:	68fa      	ldr	r2, [r7, #12]
   1a19c:	697b      	ldr	r3, [r7, #20]
   1a19e:	429a      	cmp	r2, r3
   1a1a0:	d90e      	bls.n	1a1c0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1a1a2:	693b      	ldr	r3, [r7, #16]
   1a1a4:	68fa      	ldr	r2, [r7, #12]
   1a1a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1a1a8:	693b      	ldr	r3, [r7, #16]
   1a1aa:	693a      	ldr	r2, [r7, #16]
   1a1ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1a1ae:	4b15      	ldr	r3, [pc, #84]	; (1a204 <prvSwitchTimerLists+0xac>)
   1a1b0:	681a      	ldr	r2, [r3, #0]
   1a1b2:	693b      	ldr	r3, [r7, #16]
   1a1b4:	3304      	adds	r3, #4
   1a1b6:	0019      	movs	r1, r3
   1a1b8:	0010      	movs	r0, r2
   1a1ba:	4b14      	ldr	r3, [pc, #80]	; (1a20c <prvSwitchTimerLists+0xb4>)
   1a1bc:	4798      	blx	r3
   1a1be:	e00e      	b.n	1a1de <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1a1c0:	697a      	ldr	r2, [r7, #20]
   1a1c2:	6938      	ldr	r0, [r7, #16]
   1a1c4:	2300      	movs	r3, #0
   1a1c6:	9300      	str	r3, [sp, #0]
   1a1c8:	2300      	movs	r3, #0
   1a1ca:	2100      	movs	r1, #0
   1a1cc:	4c10      	ldr	r4, [pc, #64]	; (1a210 <prvSwitchTimerLists+0xb8>)
   1a1ce:	47a0      	blx	r4
   1a1d0:	0003      	movs	r3, r0
   1a1d2:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1a1d4:	68bb      	ldr	r3, [r7, #8]
   1a1d6:	2b00      	cmp	r3, #0
   1a1d8:	d101      	bne.n	1a1de <prvSwitchTimerLists+0x86>
   1a1da:	b672      	cpsid	i
   1a1dc:	e7fe      	b.n	1a1dc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1a1de:	4b09      	ldr	r3, [pc, #36]	; (1a204 <prvSwitchTimerLists+0xac>)
   1a1e0:	681b      	ldr	r3, [r3, #0]
   1a1e2:	681b      	ldr	r3, [r3, #0]
   1a1e4:	2b00      	cmp	r3, #0
   1a1e6:	d1bb      	bne.n	1a160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1a1e8:	4b06      	ldr	r3, [pc, #24]	; (1a204 <prvSwitchTimerLists+0xac>)
   1a1ea:	681b      	ldr	r3, [r3, #0]
   1a1ec:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1a1ee:	4b09      	ldr	r3, [pc, #36]	; (1a214 <prvSwitchTimerLists+0xbc>)
   1a1f0:	681a      	ldr	r2, [r3, #0]
   1a1f2:	4b04      	ldr	r3, [pc, #16]	; (1a204 <prvSwitchTimerLists+0xac>)
   1a1f4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1a1f6:	4b07      	ldr	r3, [pc, #28]	; (1a214 <prvSwitchTimerLists+0xbc>)
   1a1f8:	687a      	ldr	r2, [r7, #4]
   1a1fa:	601a      	str	r2, [r3, #0]
}
   1a1fc:	46c0      	nop			; (mov r8, r8)
   1a1fe:	46bd      	mov	sp, r7
   1a200:	b007      	add	sp, #28
   1a202:	bd90      	pop	{r4, r7, pc}
   1a204:	20003c80 	.word	0x20003c80
   1a208:	0001687b 	.word	0x0001687b
   1a20c:	0001680f 	.word	0x0001680f
   1a210:	00019d2d 	.word	0x00019d2d
   1a214:	20003c84 	.word	0x20003c84

0001a218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1a218:	b580      	push	{r7, lr}
   1a21a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1a21c:	4b10      	ldr	r3, [pc, #64]	; (1a260 <prvCheckForValidListAndQueue+0x48>)
   1a21e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1a220:	4b10      	ldr	r3, [pc, #64]	; (1a264 <prvCheckForValidListAndQueue+0x4c>)
   1a222:	681b      	ldr	r3, [r3, #0]
   1a224:	2b00      	cmp	r3, #0
   1a226:	d115      	bne.n	1a254 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1a228:	4b0f      	ldr	r3, [pc, #60]	; (1a268 <prvCheckForValidListAndQueue+0x50>)
   1a22a:	0018      	movs	r0, r3
   1a22c:	4b0f      	ldr	r3, [pc, #60]	; (1a26c <prvCheckForValidListAndQueue+0x54>)
   1a22e:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1a230:	4b0f      	ldr	r3, [pc, #60]	; (1a270 <prvCheckForValidListAndQueue+0x58>)
   1a232:	0018      	movs	r0, r3
   1a234:	4b0d      	ldr	r3, [pc, #52]	; (1a26c <prvCheckForValidListAndQueue+0x54>)
   1a236:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1a238:	4b0e      	ldr	r3, [pc, #56]	; (1a274 <prvCheckForValidListAndQueue+0x5c>)
   1a23a:	4a0b      	ldr	r2, [pc, #44]	; (1a268 <prvCheckForValidListAndQueue+0x50>)
   1a23c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1a23e:	4b0e      	ldr	r3, [pc, #56]	; (1a278 <prvCheckForValidListAndQueue+0x60>)
   1a240:	4a0b      	ldr	r2, [pc, #44]	; (1a270 <prvCheckForValidListAndQueue+0x58>)
   1a242:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1a244:	2200      	movs	r2, #0
   1a246:	210c      	movs	r1, #12
   1a248:	2005      	movs	r0, #5
   1a24a:	4b0c      	ldr	r3, [pc, #48]	; (1a27c <prvCheckForValidListAndQueue+0x64>)
   1a24c:	4798      	blx	r3
   1a24e:	0002      	movs	r2, r0
   1a250:	4b04      	ldr	r3, [pc, #16]	; (1a264 <prvCheckForValidListAndQueue+0x4c>)
   1a252:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1a254:	4b0a      	ldr	r3, [pc, #40]	; (1a280 <prvCheckForValidListAndQueue+0x68>)
   1a256:	4798      	blx	r3
}
   1a258:	46c0      	nop			; (mov r8, r8)
   1a25a:	46bd      	mov	sp, r7
   1a25c:	bd80      	pop	{r7, pc}
   1a25e:	46c0      	nop			; (mov r8, r8)
   1a260:	00016a09 	.word	0x00016a09
   1a264:	20003c88 	.word	0x20003c88
   1a268:	20003c58 	.word	0x20003c58
   1a26c:	00016779 	.word	0x00016779
   1a270:	20003c6c 	.word	0x20003c6c
   1a274:	20003c80 	.word	0x20003c80
   1a278:	20003c84 	.word	0x20003c84
   1a27c:	00016cf9 	.word	0x00016cf9
   1a280:	00016a2d 	.word	0x00016a2d

0001a284 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1a284:	b580      	push	{r7, lr}
   1a286:	b082      	sub	sp, #8
   1a288:	af00      	add	r7, sp, #0
   1a28a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1a28c:	687b      	ldr	r3, [r7, #4]
   1a28e:	7c1b      	ldrb	r3, [r3, #16]
   1a290:	2b00      	cmp	r3, #0
   1a292:	d00b      	beq.n	1a2ac <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1a294:	687b      	ldr	r3, [r7, #4]
   1a296:	689b      	ldr	r3, [r3, #8]
   1a298:	1c5a      	adds	r2, r3, #1
   1a29a:	687b      	ldr	r3, [r7, #4]
   1a29c:	68d9      	ldr	r1, [r3, #12]
   1a29e:	4b10      	ldr	r3, [pc, #64]	; (1a2e0 <advance_pointer+0x5c>)
   1a2a0:	0010      	movs	r0, r2
   1a2a2:	4798      	blx	r3
   1a2a4:	000b      	movs	r3, r1
   1a2a6:	001a      	movs	r2, r3
   1a2a8:	687b      	ldr	r3, [r7, #4]
   1a2aa:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1a2ac:	687b      	ldr	r3, [r7, #4]
   1a2ae:	685b      	ldr	r3, [r3, #4]
   1a2b0:	1c5a      	adds	r2, r3, #1
   1a2b2:	687b      	ldr	r3, [r7, #4]
   1a2b4:	68d9      	ldr	r1, [r3, #12]
   1a2b6:	4b0a      	ldr	r3, [pc, #40]	; (1a2e0 <advance_pointer+0x5c>)
   1a2b8:	0010      	movs	r0, r2
   1a2ba:	4798      	blx	r3
   1a2bc:	000b      	movs	r3, r1
   1a2be:	001a      	movs	r2, r3
   1a2c0:	687b      	ldr	r3, [r7, #4]
   1a2c2:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1a2c4:	687b      	ldr	r3, [r7, #4]
   1a2c6:	685a      	ldr	r2, [r3, #4]
   1a2c8:	687b      	ldr	r3, [r7, #4]
   1a2ca:	689b      	ldr	r3, [r3, #8]
   1a2cc:	1ad3      	subs	r3, r2, r3
   1a2ce:	425a      	negs	r2, r3
   1a2d0:	4153      	adcs	r3, r2
   1a2d2:	b2da      	uxtb	r2, r3
   1a2d4:	687b      	ldr	r3, [r7, #4]
   1a2d6:	741a      	strb	r2, [r3, #16]
 }
   1a2d8:	46c0      	nop			; (mov r8, r8)
   1a2da:	46bd      	mov	sp, r7
   1a2dc:	b002      	add	sp, #8
   1a2de:	bd80      	pop	{r7, pc}
   1a2e0:	0002fef9 	.word	0x0002fef9

0001a2e4 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1a2e4:	b580      	push	{r7, lr}
   1a2e6:	b082      	sub	sp, #8
   1a2e8:	af00      	add	r7, sp, #0
   1a2ea:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1a2ec:	687b      	ldr	r3, [r7, #4]
   1a2ee:	2200      	movs	r2, #0
   1a2f0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1a2f2:	687b      	ldr	r3, [r7, #4]
   1a2f4:	689b      	ldr	r3, [r3, #8]
   1a2f6:	1c5a      	adds	r2, r3, #1
   1a2f8:	687b      	ldr	r3, [r7, #4]
   1a2fa:	68d9      	ldr	r1, [r3, #12]
   1a2fc:	4b05      	ldr	r3, [pc, #20]	; (1a314 <retreat_pointer+0x30>)
   1a2fe:	0010      	movs	r0, r2
   1a300:	4798      	blx	r3
   1a302:	000b      	movs	r3, r1
   1a304:	001a      	movs	r2, r3
   1a306:	687b      	ldr	r3, [r7, #4]
   1a308:	609a      	str	r2, [r3, #8]
 }
   1a30a:	46c0      	nop			; (mov r8, r8)
   1a30c:	46bd      	mov	sp, r7
   1a30e:	b002      	add	sp, #8
   1a310:	bd80      	pop	{r7, pc}
   1a312:	46c0      	nop			; (mov r8, r8)
   1a314:	0002fef9 	.word	0x0002fef9

0001a318 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1a318:	b580      	push	{r7, lr}
   1a31a:	b084      	sub	sp, #16
   1a31c:	af00      	add	r7, sp, #0
   1a31e:	6078      	str	r0, [r7, #4]
   1a320:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1a322:	2014      	movs	r0, #20
   1a324:	4b09      	ldr	r3, [pc, #36]	; (1a34c <circular_buf_init+0x34>)
   1a326:	4798      	blx	r3
   1a328:	0003      	movs	r3, r0
   1a32a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1a32c:	68fb      	ldr	r3, [r7, #12]
   1a32e:	687a      	ldr	r2, [r7, #4]
   1a330:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1a332:	68fb      	ldr	r3, [r7, #12]
   1a334:	683a      	ldr	r2, [r7, #0]
   1a336:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1a338:	68fb      	ldr	r3, [r7, #12]
   1a33a:	0018      	movs	r0, r3
   1a33c:	4b04      	ldr	r3, [pc, #16]	; (1a350 <circular_buf_init+0x38>)
   1a33e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1a340:	68fb      	ldr	r3, [r7, #12]
 }
   1a342:	0018      	movs	r0, r3
   1a344:	46bd      	mov	sp, r7
   1a346:	b004      	add	sp, #16
   1a348:	bd80      	pop	{r7, pc}
   1a34a:	46c0      	nop			; (mov r8, r8)
   1a34c:	00032849 	.word	0x00032849
   1a350:	0001a355 	.word	0x0001a355

0001a354 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1a354:	b580      	push	{r7, lr}
   1a356:	b082      	sub	sp, #8
   1a358:	af00      	add	r7, sp, #0
   1a35a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1a35c:	687b      	ldr	r3, [r7, #4]
   1a35e:	2200      	movs	r2, #0
   1a360:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1a362:	687b      	ldr	r3, [r7, #4]
   1a364:	2200      	movs	r2, #0
   1a366:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1a368:	687b      	ldr	r3, [r7, #4]
   1a36a:	2200      	movs	r2, #0
   1a36c:	741a      	strb	r2, [r3, #16]
 }
   1a36e:	46c0      	nop			; (mov r8, r8)
   1a370:	46bd      	mov	sp, r7
   1a372:	b002      	add	sp, #8
   1a374:	bd80      	pop	{r7, pc}
	...

0001a378 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1a378:	b580      	push	{r7, lr}
   1a37a:	b082      	sub	sp, #8
   1a37c:	af00      	add	r7, sp, #0
   1a37e:	6078      	str	r0, [r7, #4]
   1a380:	000a      	movs	r2, r1
   1a382:	1cfb      	adds	r3, r7, #3
   1a384:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1a386:	687b      	ldr	r3, [r7, #4]
   1a388:	681a      	ldr	r2, [r3, #0]
   1a38a:	687b      	ldr	r3, [r7, #4]
   1a38c:	685b      	ldr	r3, [r3, #4]
   1a38e:	18d3      	adds	r3, r2, r3
   1a390:	1cfa      	adds	r2, r7, #3
   1a392:	7812      	ldrb	r2, [r2, #0]
   1a394:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1a396:	687b      	ldr	r3, [r7, #4]
   1a398:	0018      	movs	r0, r3
   1a39a:	4b03      	ldr	r3, [pc, #12]	; (1a3a8 <circular_buf_put+0x30>)
   1a39c:	4798      	blx	r3
 }
   1a39e:	46c0      	nop			; (mov r8, r8)
   1a3a0:	46bd      	mov	sp, r7
   1a3a2:	b002      	add	sp, #8
   1a3a4:	bd80      	pop	{r7, pc}
   1a3a6:	46c0      	nop			; (mov r8, r8)
   1a3a8:	0001a285 	.word	0x0001a285

0001a3ac <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1a3ac:	b580      	push	{r7, lr}
   1a3ae:	b084      	sub	sp, #16
   1a3b0:	af00      	add	r7, sp, #0
   1a3b2:	6078      	str	r0, [r7, #4]
   1a3b4:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1a3b6:	2301      	movs	r3, #1
   1a3b8:	425b      	negs	r3, r3
   1a3ba:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1a3bc:	687b      	ldr	r3, [r7, #4]
   1a3be:	0018      	movs	r0, r3
   1a3c0:	4b0d      	ldr	r3, [pc, #52]	; (1a3f8 <circular_buf_get+0x4c>)
   1a3c2:	4798      	blx	r3
   1a3c4:	0003      	movs	r3, r0
   1a3c6:	001a      	movs	r2, r3
   1a3c8:	2301      	movs	r3, #1
   1a3ca:	4053      	eors	r3, r2
   1a3cc:	b2db      	uxtb	r3, r3
   1a3ce:	2b00      	cmp	r3, #0
   1a3d0:	d00d      	beq.n	1a3ee <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1a3d2:	687b      	ldr	r3, [r7, #4]
   1a3d4:	681a      	ldr	r2, [r3, #0]
   1a3d6:	687b      	ldr	r3, [r7, #4]
   1a3d8:	689b      	ldr	r3, [r3, #8]
   1a3da:	18d3      	adds	r3, r2, r3
   1a3dc:	781a      	ldrb	r2, [r3, #0]
   1a3de:	683b      	ldr	r3, [r7, #0]
   1a3e0:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1a3e2:	687b      	ldr	r3, [r7, #4]
   1a3e4:	0018      	movs	r0, r3
   1a3e6:	4b05      	ldr	r3, [pc, #20]	; (1a3fc <circular_buf_get+0x50>)
   1a3e8:	4798      	blx	r3

		 r = 0;
   1a3ea:	2300      	movs	r3, #0
   1a3ec:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1a3ee:	68fb      	ldr	r3, [r7, #12]
 }
   1a3f0:	0018      	movs	r0, r3
   1a3f2:	46bd      	mov	sp, r7
   1a3f4:	b004      	add	sp, #16
   1a3f6:	bd80      	pop	{r7, pc}
   1a3f8:	0001a401 	.word	0x0001a401
   1a3fc:	0001a2e5 	.word	0x0001a2e5

0001a400 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1a400:	b580      	push	{r7, lr}
   1a402:	b082      	sub	sp, #8
   1a404:	af00      	add	r7, sp, #0
   1a406:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1a408:	687b      	ldr	r3, [r7, #4]
   1a40a:	7c1b      	ldrb	r3, [r3, #16]
   1a40c:	2201      	movs	r2, #1
   1a40e:	4053      	eors	r3, r2
   1a410:	b2db      	uxtb	r3, r3
   1a412:	2b00      	cmp	r3, #0
   1a414:	d007      	beq.n	1a426 <circular_buf_empty+0x26>
   1a416:	687b      	ldr	r3, [r7, #4]
   1a418:	685a      	ldr	r2, [r3, #4]
   1a41a:	687b      	ldr	r3, [r7, #4]
   1a41c:	689b      	ldr	r3, [r3, #8]
   1a41e:	429a      	cmp	r2, r3
   1a420:	d101      	bne.n	1a426 <circular_buf_empty+0x26>
   1a422:	2301      	movs	r3, #1
   1a424:	e000      	b.n	1a428 <circular_buf_empty+0x28>
   1a426:	2300      	movs	r3, #0
   1a428:	1c1a      	adds	r2, r3, #0
   1a42a:	2301      	movs	r3, #1
   1a42c:	4013      	ands	r3, r2
   1a42e:	b2db      	uxtb	r3, r3
 }
   1a430:	0018      	movs	r0, r3
   1a432:	46bd      	mov	sp, r7
   1a434:	b002      	add	sp, #8
   1a436:	bd80      	pop	{r7, pc}

0001a438 <system_interrupt_enable>:
{
   1a438:	b580      	push	{r7, lr}
   1a43a:	b082      	sub	sp, #8
   1a43c:	af00      	add	r7, sp, #0
   1a43e:	0002      	movs	r2, r0
   1a440:	1dfb      	adds	r3, r7, #7
   1a442:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a444:	4b06      	ldr	r3, [pc, #24]	; (1a460 <system_interrupt_enable+0x28>)
   1a446:	1dfa      	adds	r2, r7, #7
   1a448:	7812      	ldrb	r2, [r2, #0]
   1a44a:	0011      	movs	r1, r2
   1a44c:	221f      	movs	r2, #31
   1a44e:	400a      	ands	r2, r1
   1a450:	2101      	movs	r1, #1
   1a452:	4091      	lsls	r1, r2
   1a454:	000a      	movs	r2, r1
   1a456:	601a      	str	r2, [r3, #0]
}
   1a458:	46c0      	nop			; (mov r8, r8)
   1a45a:	46bd      	mov	sp, r7
   1a45c:	b002      	add	sp, #8
   1a45e:	bd80      	pop	{r7, pc}
   1a460:	e000e100 	.word	0xe000e100

0001a464 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1a464:	b580      	push	{r7, lr}
   1a466:	b084      	sub	sp, #16
   1a468:	af00      	add	r7, sp, #0
   1a46a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1a46c:	687b      	ldr	r3, [r7, #4]
   1a46e:	681b      	ldr	r3, [r3, #0]
   1a470:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1a472:	68fb      	ldr	r3, [r7, #12]
   1a474:	69db      	ldr	r3, [r3, #28]
   1a476:	1e5a      	subs	r2, r3, #1
   1a478:	4193      	sbcs	r3, r2
   1a47a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1a47c:	0018      	movs	r0, r3
   1a47e:	46bd      	mov	sp, r7
   1a480:	b004      	add	sp, #16
   1a482:	bd80      	pop	{r7, pc}

0001a484 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1a484:	b580      	push	{r7, lr}
   1a486:	b082      	sub	sp, #8
   1a488:	af00      	add	r7, sp, #0
   1a48a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1a48c:	46c0      	nop			; (mov r8, r8)
   1a48e:	687b      	ldr	r3, [r7, #4]
   1a490:	0018      	movs	r0, r3
   1a492:	4b04      	ldr	r3, [pc, #16]	; (1a4a4 <_usart_wait_for_sync+0x20>)
   1a494:	4798      	blx	r3
   1a496:	1e03      	subs	r3, r0, #0
   1a498:	d1f9      	bne.n	1a48e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1a49a:	46c0      	nop			; (mov r8, r8)
   1a49c:	46bd      	mov	sp, r7
   1a49e:	b002      	add	sp, #8
   1a4a0:	bd80      	pop	{r7, pc}
   1a4a2:	46c0      	nop			; (mov r8, r8)
   1a4a4:	0001a465 	.word	0x0001a465

0001a4a8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1a4a8:	b580      	push	{r7, lr}
   1a4aa:	b082      	sub	sp, #8
   1a4ac:	af00      	add	r7, sp, #0
   1a4ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1a4b0:	687b      	ldr	r3, [r7, #4]
   1a4b2:	2280      	movs	r2, #128	; 0x80
   1a4b4:	05d2      	lsls	r2, r2, #23
   1a4b6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1a4b8:	687b      	ldr	r3, [r7, #4]
   1a4ba:	2200      	movs	r2, #0
   1a4bc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1a4be:	687b      	ldr	r3, [r7, #4]
   1a4c0:	22ff      	movs	r2, #255	; 0xff
   1a4c2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1a4c4:	687b      	ldr	r3, [r7, #4]
   1a4c6:	2200      	movs	r2, #0
   1a4c8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1a4ca:	687b      	ldr	r3, [r7, #4]
   1a4cc:	2200      	movs	r2, #0
   1a4ce:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1a4d0:	687b      	ldr	r3, [r7, #4]
   1a4d2:	2296      	movs	r2, #150	; 0x96
   1a4d4:	0192      	lsls	r2, r2, #6
   1a4d6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1a4d8:	687b      	ldr	r3, [r7, #4]
   1a4da:	2224      	movs	r2, #36	; 0x24
   1a4dc:	2101      	movs	r1, #1
   1a4de:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1a4e0:	687b      	ldr	r3, [r7, #4]
   1a4e2:	2225      	movs	r2, #37	; 0x25
   1a4e4:	2101      	movs	r1, #1
   1a4e6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1a4e8:	687b      	ldr	r3, [r7, #4]
   1a4ea:	2226      	movs	r2, #38	; 0x26
   1a4ec:	2100      	movs	r1, #0
   1a4ee:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1a4f0:	687b      	ldr	r3, [r7, #4]
   1a4f2:	2227      	movs	r2, #39	; 0x27
   1a4f4:	2100      	movs	r1, #0
   1a4f6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1a4f8:	687b      	ldr	r3, [r7, #4]
   1a4fa:	2200      	movs	r2, #0
   1a4fc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1a4fe:	687b      	ldr	r3, [r7, #4]
   1a500:	2288      	movs	r2, #136	; 0x88
   1a502:	0352      	lsls	r2, r2, #13
   1a504:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1a506:	687b      	ldr	r3, [r7, #4]
   1a508:	222c      	movs	r2, #44	; 0x2c
   1a50a:	2100      	movs	r1, #0
   1a50c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1a50e:	687b      	ldr	r3, [r7, #4]
   1a510:	222d      	movs	r2, #45	; 0x2d
   1a512:	2100      	movs	r1, #0
   1a514:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1a516:	687b      	ldr	r3, [r7, #4]
   1a518:	2200      	movs	r2, #0
   1a51a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1a51c:	687b      	ldr	r3, [r7, #4]
   1a51e:	2200      	movs	r2, #0
   1a520:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1a522:	687b      	ldr	r3, [r7, #4]
   1a524:	2200      	movs	r2, #0
   1a526:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1a528:	687b      	ldr	r3, [r7, #4]
   1a52a:	2200      	movs	r2, #0
   1a52c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1a52e:	687b      	ldr	r3, [r7, #4]
   1a530:	2200      	movs	r2, #0
   1a532:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1a534:	687b      	ldr	r3, [r7, #4]
   1a536:	2200      	movs	r2, #0
   1a538:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1a53a:	687b      	ldr	r3, [r7, #4]
   1a53c:	2200      	movs	r2, #0
   1a53e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1a540:	687b      	ldr	r3, [r7, #4]
   1a542:	2200      	movs	r2, #0
   1a544:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1a546:	687b      	ldr	r3, [r7, #4]
   1a548:	2200      	movs	r2, #0
   1a54a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1a54c:	687b      	ldr	r3, [r7, #4]
   1a54e:	2200      	movs	r2, #0
   1a550:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1a552:	687b      	ldr	r3, [r7, #4]
   1a554:	2213      	movs	r2, #19
   1a556:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1a558:	687b      	ldr	r3, [r7, #4]
   1a55a:	2200      	movs	r2, #0
   1a55c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1a55e:	46c0      	nop			; (mov r8, r8)
   1a560:	46bd      	mov	sp, r7
   1a562:	b002      	add	sp, #8
   1a564:	bd80      	pop	{r7, pc}
	...

0001a568 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1a568:	b580      	push	{r7, lr}
   1a56a:	b084      	sub	sp, #16
   1a56c:	af00      	add	r7, sp, #0
   1a56e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1a570:	687b      	ldr	r3, [r7, #4]
   1a572:	681b      	ldr	r3, [r3, #0]
   1a574:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1a576:	687b      	ldr	r3, [r7, #4]
   1a578:	681b      	ldr	r3, [r3, #0]
   1a57a:	0018      	movs	r0, r3
   1a57c:	4b09      	ldr	r3, [pc, #36]	; (1a5a4 <usart_enable+0x3c>)
   1a57e:	4798      	blx	r3
   1a580:	0003      	movs	r3, r0
   1a582:	0018      	movs	r0, r3
   1a584:	4b08      	ldr	r3, [pc, #32]	; (1a5a8 <usart_enable+0x40>)
   1a586:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1a588:	687b      	ldr	r3, [r7, #4]
   1a58a:	0018      	movs	r0, r3
   1a58c:	4b07      	ldr	r3, [pc, #28]	; (1a5ac <usart_enable+0x44>)
   1a58e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1a590:	68fb      	ldr	r3, [r7, #12]
   1a592:	681b      	ldr	r3, [r3, #0]
   1a594:	2202      	movs	r2, #2
   1a596:	431a      	orrs	r2, r3
   1a598:	68fb      	ldr	r3, [r7, #12]
   1a59a:	601a      	str	r2, [r3, #0]
}
   1a59c:	46c0      	nop			; (mov r8, r8)
   1a59e:	46bd      	mov	sp, r7
   1a5a0:	b004      	add	sp, #16
   1a5a2:	bd80      	pop	{r7, pc}
   1a5a4:	00023fcd 	.word	0x00023fcd
   1a5a8:	0001a439 	.word	0x0001a439
   1a5ac:	0001a485 	.word	0x0001a485

0001a5b0 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1a5b0:	b580      	push	{r7, lr}
   1a5b2:	b082      	sub	sp, #8
   1a5b4:	af00      	add	r7, sp, #0
   1a5b6:	6078      	str	r0, [r7, #4]
   1a5b8:	000a      	movs	r2, r1
   1a5ba:	1cfb      	adds	r3, r7, #3
   1a5bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1a5be:	687b      	ldr	r3, [r7, #4]
   1a5c0:	2231      	movs	r2, #49	; 0x31
   1a5c2:	5c9b      	ldrb	r3, [r3, r2]
   1a5c4:	b25a      	sxtb	r2, r3
   1a5c6:	1cfb      	adds	r3, r7, #3
   1a5c8:	781b      	ldrb	r3, [r3, #0]
   1a5ca:	2101      	movs	r1, #1
   1a5cc:	4099      	lsls	r1, r3
   1a5ce:	000b      	movs	r3, r1
   1a5d0:	b25b      	sxtb	r3, r3
   1a5d2:	4313      	orrs	r3, r2
   1a5d4:	b25b      	sxtb	r3, r3
   1a5d6:	b2d9      	uxtb	r1, r3
   1a5d8:	687b      	ldr	r3, [r7, #4]
   1a5da:	2231      	movs	r2, #49	; 0x31
   1a5dc:	5499      	strb	r1, [r3, r2]

}
   1a5de:	46c0      	nop			; (mov r8, r8)
   1a5e0:	46bd      	mov	sp, r7
   1a5e2:	b002      	add	sp, #8
   1a5e4:	bd80      	pop	{r7, pc}
	...

0001a5e8 <LogMessageDebug>:
/**
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...) { LogMessage(LOG_DEBUG_LVL, format); };
   1a5e8:	b40f      	push	{r0, r1, r2, r3}
   1a5ea:	b580      	push	{r7, lr}
   1a5ec:	af00      	add	r7, sp, #0
   1a5ee:	68bb      	ldr	r3, [r7, #8]
   1a5f0:	0019      	movs	r1, r3
   1a5f2:	2001      	movs	r0, #1
   1a5f4:	4b03      	ldr	r3, [pc, #12]	; (1a604 <LogMessageDebug+0x1c>)
   1a5f6:	4798      	blx	r3
   1a5f8:	46c0      	nop			; (mov r8, r8)
   1a5fa:	46bd      	mov	sp, r7
   1a5fc:	bc80      	pop	{r7}
   1a5fe:	bc08      	pop	{r3}
   1a600:	b004      	add	sp, #16
   1a602:	4718      	bx	r3
   1a604:	0001a761 	.word	0x0001a761

0001a608 <InitializeSerialConsole>:

/******************************************************************************
 * Global Functions
 ******************************************************************************/
void InitializeSerialConsole(void)
{
   1a608:	b580      	push	{r7, lr}
   1a60a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1a60c:	2380      	movs	r3, #128	; 0x80
   1a60e:	009a      	lsls	r2, r3, #2
   1a610:	4b13      	ldr	r3, [pc, #76]	; (1a660 <InitializeSerialConsole+0x58>)
   1a612:	0011      	movs	r1, r2
   1a614:	0018      	movs	r0, r3
   1a616:	4b13      	ldr	r3, [pc, #76]	; (1a664 <InitializeSerialConsole+0x5c>)
   1a618:	4798      	blx	r3
   1a61a:	0002      	movs	r2, r0
   1a61c:	4b12      	ldr	r3, [pc, #72]	; (1a668 <InitializeSerialConsole+0x60>)
   1a61e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, TX_BUFFER_SIZE);
   1a620:	2380      	movs	r3, #128	; 0x80
   1a622:	009a      	lsls	r2, r3, #2
   1a624:	4b11      	ldr	r3, [pc, #68]	; (1a66c <InitializeSerialConsole+0x64>)
   1a626:	0011      	movs	r1, r2
   1a628:	0018      	movs	r0, r3
   1a62a:	4b0e      	ldr	r3, [pc, #56]	; (1a664 <InitializeSerialConsole+0x5c>)
   1a62c:	4798      	blx	r3
   1a62e:	0002      	movs	r2, r0
   1a630:	4b0f      	ldr	r3, [pc, #60]	; (1a670 <InitializeSerialConsole+0x68>)
   1a632:	601a      	str	r2, [r3, #0]

    // If the CLI thread is expected to block until data is received, create a semaphore here
    // and use xSemaphoreGiveFromISR() inside the RX callback to notify it
    xRxSemaphore = xSemaphoreCreateBinary();
   1a634:	2203      	movs	r2, #3
   1a636:	2100      	movs	r1, #0
   1a638:	2001      	movs	r0, #1
   1a63a:	4b0e      	ldr	r3, [pc, #56]	; (1a674 <InitializeSerialConsole+0x6c>)
   1a63c:	4798      	blx	r3
   1a63e:	0002      	movs	r2, r0
   1a640:	4b0d      	ldr	r3, [pc, #52]	; (1a678 <InitializeSerialConsole+0x70>)
   1a642:	601a      	str	r2, [r3, #0]

    // Configure USART and register callbacks
    configure_usart();
   1a644:	4b0d      	ldr	r3, [pc, #52]	; (1a67c <InitializeSerialConsole+0x74>)
   1a646:	4798      	blx	r3
    configure_usart_callbacks();
   1a648:	4b0d      	ldr	r3, [pc, #52]	; (1a680 <InitializeSerialConsole+0x78>)
   1a64a:	4798      	blx	r3

    // Start asynchronous read (1 byte at a time); usart_read_callback() will be triggered on completion
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);
   1a64c:	490d      	ldr	r1, [pc, #52]	; (1a684 <InitializeSerialConsole+0x7c>)
   1a64e:	4b0e      	ldr	r3, [pc, #56]	; (1a688 <InitializeSerialConsole+0x80>)
   1a650:	2201      	movs	r2, #1
   1a652:	0018      	movs	r0, r3
   1a654:	4b0d      	ldr	r3, [pc, #52]	; (1a68c <InitializeSerialConsole+0x84>)
   1a656:	4798      	blx	r3
}
   1a658:	46c0      	nop			; (mov r8, r8)
   1a65a:	46bd      	mov	sp, r7
   1a65c:	bd80      	pop	{r7, pc}
   1a65e:	46c0      	nop			; (mov r8, r8)
   1a660:	200052bc 	.word	0x200052bc
   1a664:	0001a319 	.word	0x0001a319
   1a668:	200050b4 	.word	0x200050b4
   1a66c:	200050bc 	.word	0x200050bc
   1a670:	200054c0 	.word	0x200054c0
   1a674:	00016cf9 	.word	0x00016cf9
   1a678:	20003c98 	.word	0x20003c98
   1a67c:	0001a7f5 	.word	0x0001a7f5
   1a680:	0001a86d 	.word	0x0001a86d
   1a684:	200050b8 	.word	0x200050b8
   1a688:	20005080 	.word	0x20005080
   1a68c:	00025a75 	.word	0x00025a75

0001a690 <SerialConsoleWriteString>:
{
    usart_disable(&usart_instance);
}

void SerialConsoleWriteString(char *string)
{
   1a690:	b580      	push	{r7, lr}
   1a692:	b084      	sub	sp, #16
   1a694:	af00      	add	r7, sp, #0
   1a696:	6078      	str	r0, [r7, #4]
    if (string == NULL)
   1a698:	687b      	ldr	r3, [r7, #4]
   1a69a:	2b00      	cmp	r3, #0
   1a69c:	d02d      	beq.n	1a6fa <SerialConsoleWriteString+0x6a>
    {
        return;
    }

    // Push all characters into the TX circular buffer
    for (size_t iter = 0; iter < strlen(string); iter++)
   1a69e:	2300      	movs	r3, #0
   1a6a0:	60fb      	str	r3, [r7, #12]
   1a6a2:	e00b      	b.n	1a6bc <SerialConsoleWriteString+0x2c>
    {
        circular_buf_put(cbufTx, (uint8_t)string[iter]);
   1a6a4:	4b17      	ldr	r3, [pc, #92]	; (1a704 <SerialConsoleWriteString+0x74>)
   1a6a6:	6818      	ldr	r0, [r3, #0]
   1a6a8:	687a      	ldr	r2, [r7, #4]
   1a6aa:	68fb      	ldr	r3, [r7, #12]
   1a6ac:	18d3      	adds	r3, r2, r3
   1a6ae:	781b      	ldrb	r3, [r3, #0]
   1a6b0:	0019      	movs	r1, r3
   1a6b2:	4b15      	ldr	r3, [pc, #84]	; (1a708 <SerialConsoleWriteString+0x78>)
   1a6b4:	4798      	blx	r3
    for (size_t iter = 0; iter < strlen(string); iter++)
   1a6b6:	68fb      	ldr	r3, [r7, #12]
   1a6b8:	3301      	adds	r3, #1
   1a6ba:	60fb      	str	r3, [r7, #12]
   1a6bc:	687b      	ldr	r3, [r7, #4]
   1a6be:	0018      	movs	r0, r3
   1a6c0:	4b12      	ldr	r3, [pc, #72]	; (1a70c <SerialConsoleWriteString+0x7c>)
   1a6c2:	4798      	blx	r3
   1a6c4:	0002      	movs	r2, r0
   1a6c6:	68fb      	ldr	r3, [r7, #12]
   1a6c8:	429a      	cmp	r2, r3
   1a6ca:	d8eb      	bhi.n	1a6a4 <SerialConsoleWriteString+0x14>
    }

    // If USART is not busy, trigger the write immediately
    if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   1a6cc:	4b10      	ldr	r3, [pc, #64]	; (1a710 <SerialConsoleWriteString+0x80>)
   1a6ce:	2101      	movs	r1, #1
   1a6d0:	0018      	movs	r0, r3
   1a6d2:	4b10      	ldr	r3, [pc, #64]	; (1a714 <SerialConsoleWriteString+0x84>)
   1a6d4:	4798      	blx	r3
   1a6d6:	1e03      	subs	r3, r0, #0
   1a6d8:	d110      	bne.n	1a6fc <SerialConsoleWriteString+0x6c>
    {
        // Fetch one byte from the buffer and start transmission
        if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) == 0)
   1a6da:	4b0a      	ldr	r3, [pc, #40]	; (1a704 <SerialConsoleWriteString+0x74>)
   1a6dc:	681b      	ldr	r3, [r3, #0]
   1a6de:	4a0e      	ldr	r2, [pc, #56]	; (1a718 <SerialConsoleWriteString+0x88>)
   1a6e0:	0011      	movs	r1, r2
   1a6e2:	0018      	movs	r0, r3
   1a6e4:	4b0d      	ldr	r3, [pc, #52]	; (1a71c <SerialConsoleWriteString+0x8c>)
   1a6e6:	4798      	blx	r3
   1a6e8:	1e03      	subs	r3, r0, #0
   1a6ea:	d107      	bne.n	1a6fc <SerialConsoleWriteString+0x6c>
        {
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1a6ec:	490a      	ldr	r1, [pc, #40]	; (1a718 <SerialConsoleWriteString+0x88>)
   1a6ee:	4b08      	ldr	r3, [pc, #32]	; (1a710 <SerialConsoleWriteString+0x80>)
   1a6f0:	2201      	movs	r2, #1
   1a6f2:	0018      	movs	r0, r3
   1a6f4:	4b0a      	ldr	r3, [pc, #40]	; (1a720 <SerialConsoleWriteString+0x90>)
   1a6f6:	4798      	blx	r3
   1a6f8:	e000      	b.n	1a6fc <SerialConsoleWriteString+0x6c>
        return;
   1a6fa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1a6fc:	46bd      	mov	sp, r7
   1a6fe:	b004      	add	sp, #16
   1a700:	bd80      	pop	{r7, pc}
   1a702:	46c0      	nop			; (mov r8, r8)
   1a704:	200054c0 	.word	0x200054c0
   1a708:	0001a379 	.word	0x0001a379
   1a70c:	00032c5f 	.word	0x00032c5f
   1a710:	20005080 	.word	0x20005080
   1a714:	00025abd 	.word	0x00025abd
   1a718:	200054bc 	.word	0x200054bc
   1a71c:	0001a3ad 	.word	0x0001a3ad
   1a720:	00025a2d 	.word	0x00025a2d

0001a724 <SerialConsoleReadCharacter>:

int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1a724:	b580      	push	{r7, lr}
   1a726:	b084      	sub	sp, #16
   1a728:	af00      	add	r7, sp, #0
   1a72a:	6078      	str	r0, [r7, #4]
    // If there is thread contention, consider using critical sections or locks
    vTaskSuspendAll();
   1a72c:	4b08      	ldr	r3, [pc, #32]	; (1a750 <SerialConsoleReadCharacter+0x2c>)
   1a72e:	4798      	blx	r3
    int ret = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1a730:	4b08      	ldr	r3, [pc, #32]	; (1a754 <SerialConsoleReadCharacter+0x30>)
   1a732:	681b      	ldr	r3, [r3, #0]
   1a734:	687a      	ldr	r2, [r7, #4]
   1a736:	0011      	movs	r1, r2
   1a738:	0018      	movs	r0, r3
   1a73a:	4b07      	ldr	r3, [pc, #28]	; (1a758 <SerialConsoleReadCharacter+0x34>)
   1a73c:	4798      	blx	r3
   1a73e:	0003      	movs	r3, r0
   1a740:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1a742:	4b06      	ldr	r3, [pc, #24]	; (1a75c <SerialConsoleReadCharacter+0x38>)
   1a744:	4798      	blx	r3
    return ret;
   1a746:	68fb      	ldr	r3, [r7, #12]
}
   1a748:	0018      	movs	r0, r3
   1a74a:	46bd      	mov	sp, r7
   1a74c:	b004      	add	sp, #16
   1a74e:	bd80      	pop	{r7, pc}
   1a750:	00018cc5 	.word	0x00018cc5
   1a754:	200050b4 	.word	0x200050b4
   1a758:	0001a3ad 	.word	0x0001a3ad
   1a75c:	00018cdd 	.word	0x00018cdd

0001a760 <LogMessage>:
{
    currentDebugLevel = debugLevel;
}

void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1a760:	b40e      	push	{r1, r2, r3}
   1a762:	b590      	push	{r4, r7, lr}
   1a764:	b0c4      	sub	sp, #272	; 0x110
   1a766:	af00      	add	r7, sp, #0
   1a768:	0002      	movs	r2, r0
   1a76a:	4b1d      	ldr	r3, [pc, #116]	; (1a7e0 <LogMessage+0x80>)
   1a76c:	2188      	movs	r1, #136	; 0x88
   1a76e:	0049      	lsls	r1, r1, #1
   1a770:	468c      	mov	ip, r1
   1a772:	44bc      	add	ip, r7
   1a774:	4463      	add	r3, ip
   1a776:	701a      	strb	r2, [r3, #0]
    if (level < currentDebugLevel || currentDebugLevel == LOG_OFF_LVL)
   1a778:	4b1a      	ldr	r3, [pc, #104]	; (1a7e4 <LogMessage+0x84>)
   1a77a:	781b      	ldrb	r3, [r3, #0]
   1a77c:	4a18      	ldr	r2, [pc, #96]	; (1a7e0 <LogMessage+0x80>)
   1a77e:	2188      	movs	r1, #136	; 0x88
   1a780:	0049      	lsls	r1, r1, #1
   1a782:	468c      	mov	ip, r1
   1a784:	44bc      	add	ip, r7
   1a786:	4462      	add	r2, ip
   1a788:	7812      	ldrb	r2, [r2, #0]
   1a78a:	429a      	cmp	r2, r3
   1a78c:	d321      	bcc.n	1a7d2 <LogMessage+0x72>
   1a78e:	4b15      	ldr	r3, [pc, #84]	; (1a7e4 <LogMessage+0x84>)
   1a790:	781b      	ldrb	r3, [r3, #0]
   1a792:	2b05      	cmp	r3, #5
   1a794:	d01d      	beq.n	1a7d2 <LogMessage+0x72>
    {
        return;
    }

    char buffer[256];
    memset(buffer, 0, sizeof(buffer));
   1a796:	2380      	movs	r3, #128	; 0x80
   1a798:	005a      	lsls	r2, r3, #1
   1a79a:	2310      	movs	r3, #16
   1a79c:	18fb      	adds	r3, r7, r3
   1a79e:	2100      	movs	r1, #0
   1a7a0:	0018      	movs	r0, r3
   1a7a2:	4b11      	ldr	r3, [pc, #68]	; (1a7e8 <LogMessage+0x88>)
   1a7a4:	4798      	blx	r3

    va_list args;
    va_start(args, format);
   1a7a6:	2390      	movs	r3, #144	; 0x90
   1a7a8:	005b      	lsls	r3, r3, #1
   1a7aa:	18fb      	adds	r3, r7, r3
   1a7ac:	60fb      	str	r3, [r7, #12]
    vsnprintf(buffer, sizeof(buffer), format, args);
   1a7ae:	68fc      	ldr	r4, [r7, #12]
   1a7b0:	238e      	movs	r3, #142	; 0x8e
   1a7b2:	005b      	lsls	r3, r3, #1
   1a7b4:	18fb      	adds	r3, r7, r3
   1a7b6:	681a      	ldr	r2, [r3, #0]
   1a7b8:	2380      	movs	r3, #128	; 0x80
   1a7ba:	0059      	lsls	r1, r3, #1
   1a7bc:	2310      	movs	r3, #16
   1a7be:	18f8      	adds	r0, r7, r3
   1a7c0:	0023      	movs	r3, r4
   1a7c2:	4c0a      	ldr	r4, [pc, #40]	; (1a7ec <LogMessage+0x8c>)
   1a7c4:	47a0      	blx	r4
    va_end(args);

    SerialConsoleWriteString(buffer);
   1a7c6:	2310      	movs	r3, #16
   1a7c8:	18fb      	adds	r3, r7, r3
   1a7ca:	0018      	movs	r0, r3
   1a7cc:	4b08      	ldr	r3, [pc, #32]	; (1a7f0 <LogMessage+0x90>)
   1a7ce:	4798      	blx	r3
   1a7d0:	e000      	b.n	1a7d4 <LogMessage+0x74>
        return;
   1a7d2:	46c0      	nop			; (mov r8, r8)
}
   1a7d4:	46bd      	mov	sp, r7
   1a7d6:	b044      	add	sp, #272	; 0x110
   1a7d8:	bc90      	pop	{r4, r7}
   1a7da:	bc08      	pop	{r3}
   1a7dc:	b003      	add	sp, #12
   1a7de:	4718      	bx	r3
   1a7e0:	fffffef7 	.word	0xfffffef7
   1a7e4:	20003c94 	.word	0x20003c94
   1a7e8:	000328a7 	.word	0x000328a7
   1a7ec:	00032ee1 	.word	0x00032ee1
   1a7f0:	0001a691 	.word	0x0001a691

0001a7f4 <configure_usart>:

/******************************************************************************
 * Local Functions
 ******************************************************************************/
static void configure_usart(void)
{
   1a7f4:	b580      	push	{r7, lr}
   1a7f6:	b090      	sub	sp, #64	; 0x40
   1a7f8:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1a7fa:	003b      	movs	r3, r7
   1a7fc:	0018      	movs	r0, r3
   1a7fe:	4b14      	ldr	r3, [pc, #80]	; (1a850 <configure_usart+0x5c>)
   1a800:	4798      	blx	r3

    config_usart.baudrate    = 115200;
   1a802:	003b      	movs	r3, r7
   1a804:	22e1      	movs	r2, #225	; 0xe1
   1a806:	0252      	lsls	r2, r2, #9
   1a808:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1a80a:	003b      	movs	r3, r7
   1a80c:	22c4      	movs	r2, #196	; 0xc4
   1a80e:	0392      	lsls	r2, r2, #14
   1a810:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1a812:	003b      	movs	r3, r7
   1a814:	2201      	movs	r2, #1
   1a816:	4252      	negs	r2, r2
   1a818:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1a81a:	003b      	movs	r3, r7
   1a81c:	2201      	movs	r2, #1
   1a81e:	4252      	negs	r2, r2
   1a820:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1a822:	003b      	movs	r3, r7
   1a824:	4a0b      	ldr	r2, [pc, #44]	; (1a854 <configure_usart+0x60>)
   1a826:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1a828:	003b      	movs	r3, r7
   1a82a:	4a0b      	ldr	r2, [pc, #44]	; (1a858 <configure_usart+0x64>)
   1a82c:	63da      	str	r2, [r3, #60]	; 0x3c

    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK)
   1a82e:	46c0      	nop			; (mov r8, r8)
   1a830:	003a      	movs	r2, r7
   1a832:	490a      	ldr	r1, [pc, #40]	; (1a85c <configure_usart+0x68>)
   1a834:	4b0a      	ldr	r3, [pc, #40]	; (1a860 <configure_usart+0x6c>)
   1a836:	0018      	movs	r0, r3
   1a838:	4b0a      	ldr	r3, [pc, #40]	; (1a864 <configure_usart+0x70>)
   1a83a:	4798      	blx	r3
   1a83c:	1e03      	subs	r3, r0, #0
   1a83e:	d1f7      	bne.n	1a830 <configure_usart+0x3c>
    {
        // Keep trying until successful
    }

    usart_enable(&usart_instance);
   1a840:	4b07      	ldr	r3, [pc, #28]	; (1a860 <configure_usart+0x6c>)
   1a842:	0018      	movs	r0, r3
   1a844:	4b08      	ldr	r3, [pc, #32]	; (1a868 <configure_usart+0x74>)
   1a846:	4798      	blx	r3
}
   1a848:	46c0      	nop			; (mov r8, r8)
   1a84a:	46bd      	mov	sp, r7
   1a84c:	b010      	add	sp, #64	; 0x40
   1a84e:	bd80      	pop	{r7, pc}
   1a850:	0001a4a9 	.word	0x0001a4a9
   1a854:	002a0003 	.word	0x002a0003
   1a858:	002b0003 	.word	0x002b0003
   1a85c:	42001800 	.word	0x42001800
   1a860:	20005080 	.word	0x20005080
   1a864:	00025631 	.word	0x00025631
   1a868:	0001a569 	.word	0x0001a569

0001a86c <configure_usart_callbacks>:

static void configure_usart_callbacks(void)
{
   1a86c:	b580      	push	{r7, lr}
   1a86e:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance,
   1a870:	490c      	ldr	r1, [pc, #48]	; (1a8a4 <configure_usart_callbacks+0x38>)
   1a872:	4b0d      	ldr	r3, [pc, #52]	; (1a8a8 <configure_usart_callbacks+0x3c>)
   1a874:	2200      	movs	r2, #0
   1a876:	0018      	movs	r0, r3
   1a878:	4b0c      	ldr	r3, [pc, #48]	; (1a8ac <configure_usart_callbacks+0x40>)
   1a87a:	4798      	blx	r3
                            usart_write_callback,
                            USART_CALLBACK_BUFFER_TRANSMITTED);
    usart_register_callback(&usart_instance,
   1a87c:	490c      	ldr	r1, [pc, #48]	; (1a8b0 <configure_usart_callbacks+0x44>)
   1a87e:	4b0a      	ldr	r3, [pc, #40]	; (1a8a8 <configure_usart_callbacks+0x3c>)
   1a880:	2201      	movs	r2, #1
   1a882:	0018      	movs	r0, r3
   1a884:	4b09      	ldr	r3, [pc, #36]	; (1a8ac <configure_usart_callbacks+0x40>)
   1a886:	4798      	blx	r3
                            usart_read_callback,
                            USART_CALLBACK_BUFFER_RECEIVED);

    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1a888:	4b07      	ldr	r3, [pc, #28]	; (1a8a8 <configure_usart_callbacks+0x3c>)
   1a88a:	2100      	movs	r1, #0
   1a88c:	0018      	movs	r0, r3
   1a88e:	4b09      	ldr	r3, [pc, #36]	; (1a8b4 <configure_usart_callbacks+0x48>)
   1a890:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1a892:	4b05      	ldr	r3, [pc, #20]	; (1a8a8 <configure_usart_callbacks+0x3c>)
   1a894:	2101      	movs	r1, #1
   1a896:	0018      	movs	r0, r3
   1a898:	4b06      	ldr	r3, [pc, #24]	; (1a8b4 <configure_usart_callbacks+0x48>)
   1a89a:	4798      	blx	r3
}
   1a89c:	46c0      	nop			; (mov r8, r8)
   1a89e:	46bd      	mov	sp, r7
   1a8a0:	bd80      	pop	{r7, pc}
   1a8a2:	46c0      	nop			; (mov r8, r8)
   1a8a4:	0001a929 	.word	0x0001a929
   1a8a8:	20005080 	.word	0x20005080
   1a8ac:	000259e5 	.word	0x000259e5
   1a8b0:	0001a8b9 	.word	0x0001a8b9
   1a8b4:	0001a5b1 	.word	0x0001a5b1

0001a8b8 <usart_read_callback>:

/******************************************************************************
 * Callback Functions
 ******************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   1a8b8:	b580      	push	{r7, lr}
   1a8ba:	b084      	sub	sp, #16
   1a8bc:	af00      	add	r7, sp, #0
   1a8be:	6078      	str	r0, [r7, #4]
    // Place the latest received character into the RX circular buffer
    circular_buf_put(cbufRx, (uint8_t)latestRx);
   1a8c0:	4b11      	ldr	r3, [pc, #68]	; (1a908 <usart_read_callback+0x50>)
   1a8c2:	681a      	ldr	r2, [r3, #0]
   1a8c4:	4b11      	ldr	r3, [pc, #68]	; (1a90c <usart_read_callback+0x54>)
   1a8c6:	781b      	ldrb	r3, [r3, #0]
   1a8c8:	0019      	movs	r1, r3
   1a8ca:	0010      	movs	r0, r2
   1a8cc:	4b10      	ldr	r3, [pc, #64]	; (1a910 <usart_read_callback+0x58>)
   1a8ce:	4798      	blx	r3

    // If the CLI thread waits on a semaphore for input, notify it here
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1a8d0:	2300      	movs	r3, #0
   1a8d2:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(xRxSemaphore, &xHigherPriorityTaskWoken);
   1a8d4:	4b0f      	ldr	r3, [pc, #60]	; (1a914 <usart_read_callback+0x5c>)
   1a8d6:	681b      	ldr	r3, [r3, #0]
   1a8d8:	220c      	movs	r2, #12
   1a8da:	18ba      	adds	r2, r7, r2
   1a8dc:	0011      	movs	r1, r2
   1a8de:	0018      	movs	r0, r3
   1a8e0:	4b0d      	ldr	r3, [pc, #52]	; (1a918 <usart_read_callback+0x60>)
   1a8e2:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1a8e4:	68fb      	ldr	r3, [r7, #12]
   1a8e6:	2b00      	cmp	r3, #0
   1a8e8:	d003      	beq.n	1a8f2 <usart_read_callback+0x3a>
   1a8ea:	4b0c      	ldr	r3, [pc, #48]	; (1a91c <usart_read_callback+0x64>)
   1a8ec:	2280      	movs	r2, #128	; 0x80
   1a8ee:	0552      	lsls	r2, r2, #21
   1a8f0:	601a      	str	r2, [r3, #0]

    // Start another read job to keep receiving data
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);
   1a8f2:	4906      	ldr	r1, [pc, #24]	; (1a90c <usart_read_callback+0x54>)
   1a8f4:	4b0a      	ldr	r3, [pc, #40]	; (1a920 <usart_read_callback+0x68>)
   1a8f6:	2201      	movs	r2, #1
   1a8f8:	0018      	movs	r0, r3
   1a8fa:	4b0a      	ldr	r3, [pc, #40]	; (1a924 <usart_read_callback+0x6c>)
   1a8fc:	4798      	blx	r3
}
   1a8fe:	46c0      	nop			; (mov r8, r8)
   1a900:	46bd      	mov	sp, r7
   1a902:	b004      	add	sp, #16
   1a904:	bd80      	pop	{r7, pc}
   1a906:	46c0      	nop			; (mov r8, r8)
   1a908:	200050b4 	.word	0x200050b4
   1a90c:	200050b8 	.word	0x200050b8
   1a910:	0001a379 	.word	0x0001a379
   1a914:	20003c98 	.word	0x20003c98
   1a918:	00017629 	.word	0x00017629
   1a91c:	e000ed04 	.word	0xe000ed04
   1a920:	20005080 	.word	0x20005080
   1a924:	00025a75 	.word	0x00025a75

0001a928 <usart_write_callback>:

void usart_write_callback(struct usart_module *const usart_module)
{
   1a928:	b580      	push	{r7, lr}
   1a92a:	b082      	sub	sp, #8
   1a92c:	af00      	add	r7, sp, #0
   1a92e:	6078      	str	r0, [r7, #4]
    // Continue transmission if there are still bytes in the TX buffer
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) == 0)
   1a930:	4b09      	ldr	r3, [pc, #36]	; (1a958 <usart_write_callback+0x30>)
   1a932:	681b      	ldr	r3, [r3, #0]
   1a934:	4a09      	ldr	r2, [pc, #36]	; (1a95c <usart_write_callback+0x34>)
   1a936:	0011      	movs	r1, r2
   1a938:	0018      	movs	r0, r3
   1a93a:	4b09      	ldr	r3, [pc, #36]	; (1a960 <usart_write_callback+0x38>)
   1a93c:	4798      	blx	r3
   1a93e:	1e03      	subs	r3, r0, #0
   1a940:	d105      	bne.n	1a94e <usart_write_callback+0x26>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1a942:	4906      	ldr	r1, [pc, #24]	; (1a95c <usart_write_callback+0x34>)
   1a944:	4b07      	ldr	r3, [pc, #28]	; (1a964 <usart_write_callback+0x3c>)
   1a946:	2201      	movs	r2, #1
   1a948:	0018      	movs	r0, r3
   1a94a:	4b07      	ldr	r3, [pc, #28]	; (1a968 <usart_write_callback+0x40>)
   1a94c:	4798      	blx	r3
    }
}
   1a94e:	46c0      	nop			; (mov r8, r8)
   1a950:	46bd      	mov	sp, r7
   1a952:	b002      	add	sp, #8
   1a954:	bd80      	pop	{r7, pc}
   1a956:	46c0      	nop			; (mov r8, r8)
   1a958:	200054c0 	.word	0x200054c0
   1a95c:	200054bc 	.word	0x200054bc
   1a960:	0001a3ad 	.word	0x0001a3ad
   1a964:	20005080 	.word	0x20005080
   1a968:	00025a2d 	.word	0x00025a2d

0001a96c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1a96c:	b590      	push	{r4, r7, lr}
   1a96e:	b087      	sub	sp, #28
   1a970:	af00      	add	r7, sp, #0
   1a972:	60f8      	str	r0, [r7, #12]
   1a974:	000c      	movs	r4, r1
   1a976:	0010      	movs	r0, r2
   1a978:	0019      	movs	r1, r3
   1a97a:	230a      	movs	r3, #10
   1a97c:	18fb      	adds	r3, r7, r3
   1a97e:	1c22      	adds	r2, r4, #0
   1a980:	801a      	strh	r2, [r3, #0]
   1a982:	2308      	movs	r3, #8
   1a984:	18fb      	adds	r3, r7, r3
   1a986:	1c02      	adds	r2, r0, #0
   1a988:	801a      	strh	r2, [r3, #0]
   1a98a:	1dfb      	adds	r3, r7, #7
   1a98c:	1c0a      	adds	r2, r1, #0
   1a98e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1a990:	230a      	movs	r3, #10
   1a992:	18fb      	adds	r3, r7, r3
   1a994:	881a      	ldrh	r2, [r3, #0]
   1a996:	2308      	movs	r3, #8
   1a998:	18fb      	adds	r3, r7, r3
   1a99a:	881b      	ldrh	r3, [r3, #0]
   1a99c:	1ad3      	subs	r3, r2, r3
   1a99e:	3307      	adds	r3, #7
   1a9a0:	2b00      	cmp	r3, #0
   1a9a2:	da00      	bge.n	1a9a6 <SDMMC_UNSTUFF_BITS+0x3a>
   1a9a4:	3307      	adds	r3, #7
   1a9a6:	10db      	asrs	r3, r3, #3
   1a9a8:	3b01      	subs	r3, #1
   1a9aa:	68fa      	ldr	r2, [r7, #12]
   1a9ac:	18d3      	adds	r3, r2, r3
   1a9ae:	781b      	ldrb	r3, [r3, #0]
   1a9b0:	0019      	movs	r1, r3
   1a9b2:	2308      	movs	r3, #8
   1a9b4:	18fb      	adds	r3, r7, r3
   1a9b6:	881b      	ldrh	r3, [r3, #0]
   1a9b8:	2207      	movs	r2, #7
   1a9ba:	4013      	ands	r3, r2
   1a9bc:	4119      	asrs	r1, r3
   1a9be:	000b      	movs	r3, r1
   1a9c0:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1a9c2:	2308      	movs	r3, #8
   1a9c4:	18fb      	adds	r3, r7, r3
   1a9c6:	881b      	ldrh	r3, [r3, #0]
   1a9c8:	2207      	movs	r2, #7
   1a9ca:	401a      	ands	r2, r3
   1a9cc:	1dfb      	adds	r3, r7, #7
   1a9ce:	781b      	ldrb	r3, [r3, #0]
   1a9d0:	18d3      	adds	r3, r2, r3
   1a9d2:	2b08      	cmp	r3, #8
   1a9d4:	dd1c      	ble.n	1aa10 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1a9d6:	230a      	movs	r3, #10
   1a9d8:	18fb      	adds	r3, r7, r3
   1a9da:	881a      	ldrh	r2, [r3, #0]
   1a9dc:	2308      	movs	r3, #8
   1a9de:	18fb      	adds	r3, r7, r3
   1a9e0:	881b      	ldrh	r3, [r3, #0]
   1a9e2:	1ad3      	subs	r3, r2, r3
   1a9e4:	3307      	adds	r3, #7
   1a9e6:	2b00      	cmp	r3, #0
   1a9e8:	da00      	bge.n	1a9ec <SDMMC_UNSTUFF_BITS+0x80>
   1a9ea:	3307      	adds	r3, #7
   1a9ec:	10db      	asrs	r3, r3, #3
   1a9ee:	3b02      	subs	r3, #2
   1a9f0:	68fa      	ldr	r2, [r7, #12]
   1a9f2:	18d3      	adds	r3, r2, r3
   1a9f4:	781b      	ldrb	r3, [r3, #0]
   1a9f6:	0019      	movs	r1, r3
   1a9f8:	2308      	movs	r3, #8
   1a9fa:	18fb      	adds	r3, r7, r3
   1a9fc:	881b      	ldrh	r3, [r3, #0]
   1a9fe:	2207      	movs	r2, #7
   1aa00:	4013      	ands	r3, r2
   1aa02:	2208      	movs	r2, #8
   1aa04:	1ad3      	subs	r3, r2, r3
   1aa06:	4099      	lsls	r1, r3
   1aa08:	000b      	movs	r3, r1
   1aa0a:	697a      	ldr	r2, [r7, #20]
   1aa0c:	4313      	orrs	r3, r2
   1aa0e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1aa10:	2308      	movs	r3, #8
   1aa12:	18fb      	adds	r3, r7, r3
   1aa14:	881b      	ldrh	r3, [r3, #0]
   1aa16:	2207      	movs	r2, #7
   1aa18:	401a      	ands	r2, r3
   1aa1a:	1dfb      	adds	r3, r7, #7
   1aa1c:	781b      	ldrb	r3, [r3, #0]
   1aa1e:	18d3      	adds	r3, r2, r3
   1aa20:	2b10      	cmp	r3, #16
   1aa22:	dd1c      	ble.n	1aa5e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1aa24:	230a      	movs	r3, #10
   1aa26:	18fb      	adds	r3, r7, r3
   1aa28:	881a      	ldrh	r2, [r3, #0]
   1aa2a:	2308      	movs	r3, #8
   1aa2c:	18fb      	adds	r3, r7, r3
   1aa2e:	881b      	ldrh	r3, [r3, #0]
   1aa30:	1ad3      	subs	r3, r2, r3
   1aa32:	3307      	adds	r3, #7
   1aa34:	2b00      	cmp	r3, #0
   1aa36:	da00      	bge.n	1aa3a <SDMMC_UNSTUFF_BITS+0xce>
   1aa38:	3307      	adds	r3, #7
   1aa3a:	10db      	asrs	r3, r3, #3
   1aa3c:	3b03      	subs	r3, #3
   1aa3e:	68fa      	ldr	r2, [r7, #12]
   1aa40:	18d3      	adds	r3, r2, r3
   1aa42:	781b      	ldrb	r3, [r3, #0]
   1aa44:	0019      	movs	r1, r3
   1aa46:	2308      	movs	r3, #8
   1aa48:	18fb      	adds	r3, r7, r3
   1aa4a:	881b      	ldrh	r3, [r3, #0]
   1aa4c:	2207      	movs	r2, #7
   1aa4e:	4013      	ands	r3, r2
   1aa50:	2210      	movs	r2, #16
   1aa52:	1ad3      	subs	r3, r2, r3
   1aa54:	4099      	lsls	r1, r3
   1aa56:	000b      	movs	r3, r1
   1aa58:	697a      	ldr	r2, [r7, #20]
   1aa5a:	4313      	orrs	r3, r2
   1aa5c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1aa5e:	2308      	movs	r3, #8
   1aa60:	18fb      	adds	r3, r7, r3
   1aa62:	881b      	ldrh	r3, [r3, #0]
   1aa64:	2207      	movs	r2, #7
   1aa66:	401a      	ands	r2, r3
   1aa68:	1dfb      	adds	r3, r7, #7
   1aa6a:	781b      	ldrb	r3, [r3, #0]
   1aa6c:	18d3      	adds	r3, r2, r3
   1aa6e:	2b10      	cmp	r3, #16
   1aa70:	dd1c      	ble.n	1aaac <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1aa72:	230a      	movs	r3, #10
   1aa74:	18fb      	adds	r3, r7, r3
   1aa76:	881a      	ldrh	r2, [r3, #0]
   1aa78:	2308      	movs	r3, #8
   1aa7a:	18fb      	adds	r3, r7, r3
   1aa7c:	881b      	ldrh	r3, [r3, #0]
   1aa7e:	1ad3      	subs	r3, r2, r3
   1aa80:	3307      	adds	r3, #7
   1aa82:	2b00      	cmp	r3, #0
   1aa84:	da00      	bge.n	1aa88 <SDMMC_UNSTUFF_BITS+0x11c>
   1aa86:	3307      	adds	r3, #7
   1aa88:	10db      	asrs	r3, r3, #3
   1aa8a:	3b03      	subs	r3, #3
   1aa8c:	68fa      	ldr	r2, [r7, #12]
   1aa8e:	18d3      	adds	r3, r2, r3
   1aa90:	781b      	ldrb	r3, [r3, #0]
   1aa92:	0019      	movs	r1, r3
   1aa94:	2308      	movs	r3, #8
   1aa96:	18fb      	adds	r3, r7, r3
   1aa98:	881b      	ldrh	r3, [r3, #0]
   1aa9a:	2207      	movs	r2, #7
   1aa9c:	4013      	ands	r3, r2
   1aa9e:	2210      	movs	r2, #16
   1aaa0:	1ad3      	subs	r3, r2, r3
   1aaa2:	4099      	lsls	r1, r3
   1aaa4:	000b      	movs	r3, r1
   1aaa6:	697a      	ldr	r2, [r7, #20]
   1aaa8:	4313      	orrs	r3, r2
   1aaaa:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1aaac:	1dfb      	adds	r3, r7, #7
   1aaae:	781b      	ldrb	r3, [r3, #0]
   1aab0:	2201      	movs	r2, #1
   1aab2:	409a      	lsls	r2, r3
   1aab4:	0013      	movs	r3, r2
   1aab6:	1e5a      	subs	r2, r3, #1
   1aab8:	697b      	ldr	r3, [r7, #20]
   1aaba:	4013      	ands	r3, r2
   1aabc:	617b      	str	r3, [r7, #20]
	return value;
   1aabe:	697b      	ldr	r3, [r7, #20]
}
   1aac0:	0018      	movs	r0, r3
   1aac2:	46bd      	mov	sp, r7
   1aac4:	b007      	add	sp, #28
   1aac6:	bd90      	pop	{r4, r7, pc}

0001aac8 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1aac8:	b580      	push	{r7, lr}
   1aaca:	b082      	sub	sp, #8
   1aacc:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1aace:	4b23      	ldr	r3, [pc, #140]	; (1ab5c <mmc_spi_op_cond+0x94>)
   1aad0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1aad2:	4b23      	ldr	r3, [pc, #140]	; (1ab60 <mmc_spi_op_cond+0x98>)
   1aad4:	2100      	movs	r1, #0
   1aad6:	0018      	movs	r0, r3
   1aad8:	4b22      	ldr	r3, [pc, #136]	; (1ab64 <mmc_spi_op_cond+0x9c>)
   1aada:	4798      	blx	r3
   1aadc:	0003      	movs	r3, r0
   1aade:	001a      	movs	r2, r3
   1aae0:	2301      	movs	r3, #1
   1aae2:	4053      	eors	r3, r2
   1aae4:	b2db      	uxtb	r3, r3
   1aae6:	2b00      	cmp	r3, #0
   1aae8:	d001      	beq.n	1aaee <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1aaea:	2300      	movs	r3, #0
   1aaec:	e031      	b.n	1ab52 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1aaee:	4b1e      	ldr	r3, [pc, #120]	; (1ab68 <mmc_spi_op_cond+0xa0>)
   1aaf0:	4798      	blx	r3
   1aaf2:	0003      	movs	r3, r0
   1aaf4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1aaf6:	683b      	ldr	r3, [r7, #0]
   1aaf8:	2201      	movs	r2, #1
   1aafa:	4013      	ands	r3, r2
   1aafc:	d006      	beq.n	1ab0c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1aafe:	687b      	ldr	r3, [r7, #4]
   1ab00:	1e5a      	subs	r2, r3, #1
   1ab02:	607a      	str	r2, [r7, #4]
   1ab04:	2b00      	cmp	r3, #0
   1ab06:	d1e4      	bne.n	1aad2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1ab08:	2300      	movs	r3, #0
   1ab0a:	e022      	b.n	1ab52 <mmc_spi_op_cond+0x8a>
			break;
   1ab0c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ab0e:	4b17      	ldr	r3, [pc, #92]	; (1ab6c <mmc_spi_op_cond+0xa4>)
   1ab10:	2100      	movs	r1, #0
   1ab12:	0018      	movs	r0, r3
   1ab14:	4b13      	ldr	r3, [pc, #76]	; (1ab64 <mmc_spi_op_cond+0x9c>)
   1ab16:	4798      	blx	r3
   1ab18:	0003      	movs	r3, r0
   1ab1a:	001a      	movs	r2, r3
   1ab1c:	2301      	movs	r3, #1
   1ab1e:	4053      	eors	r3, r2
   1ab20:	b2db      	uxtb	r3, r3
   1ab22:	2b00      	cmp	r3, #0
   1ab24:	d001      	beq.n	1ab2a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ab26:	2300      	movs	r3, #0
   1ab28:	e013      	b.n	1ab52 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1ab2a:	4b0f      	ldr	r3, [pc, #60]	; (1ab68 <mmc_spi_op_cond+0xa0>)
   1ab2c:	4798      	blx	r3
   1ab2e:	0002      	movs	r2, r0
   1ab30:	23c0      	movs	r3, #192	; 0xc0
   1ab32:	05db      	lsls	r3, r3, #23
   1ab34:	401a      	ands	r2, r3
   1ab36:	2380      	movs	r3, #128	; 0x80
   1ab38:	05db      	lsls	r3, r3, #23
   1ab3a:	429a      	cmp	r2, r3
   1ab3c:	d108      	bne.n	1ab50 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ab3e:	4b0c      	ldr	r3, [pc, #48]	; (1ab70 <mmc_spi_op_cond+0xa8>)
   1ab40:	681a      	ldr	r2, [r3, #0]
   1ab42:	4b0b      	ldr	r3, [pc, #44]	; (1ab70 <mmc_spi_op_cond+0xa8>)
   1ab44:	681b      	ldr	r3, [r3, #0]
   1ab46:	7adb      	ldrb	r3, [r3, #11]
   1ab48:	2108      	movs	r1, #8
   1ab4a:	430b      	orrs	r3, r1
   1ab4c:	b2db      	uxtb	r3, r3
   1ab4e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ab50:	2301      	movs	r3, #1
}
   1ab52:	0018      	movs	r0, r3
   1ab54:	46bd      	mov	sp, r7
   1ab56:	b002      	add	sp, #8
   1ab58:	bd80      	pop	{r7, pc}
   1ab5a:	46c0      	nop			; (mov r8, r8)
   1ab5c:	00001bee 	.word	0x00001bee
   1ab60:	00001101 	.word	0x00001101
   1ab64:	0001c545 	.word	0x0001c545
   1ab68:	0001c785 	.word	0x0001c785
   1ab6c:	0000053a 	.word	0x0000053a
   1ab70:	20003cc0 	.word	0x20003cc0

0001ab74 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1ab74:	b580      	push	{r7, lr}
   1ab76:	b086      	sub	sp, #24
   1ab78:	af00      	add	r7, sp, #0
   1ab7a:	0002      	movs	r2, r0
   1ab7c:	1dfb      	adds	r3, r7, #7
   1ab7e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ab80:	4b2e      	ldr	r3, [pc, #184]	; (1ac3c <sd_spi_op_cond+0xc8>)
   1ab82:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1ab84:	4b2e      	ldr	r3, [pc, #184]	; (1ac40 <sd_spi_op_cond+0xcc>)
   1ab86:	2100      	movs	r1, #0
   1ab88:	0018      	movs	r0, r3
   1ab8a:	4b2e      	ldr	r3, [pc, #184]	; (1ac44 <sd_spi_op_cond+0xd0>)
   1ab8c:	4798      	blx	r3
   1ab8e:	0003      	movs	r3, r0
   1ab90:	001a      	movs	r2, r3
   1ab92:	2301      	movs	r3, #1
   1ab94:	4053      	eors	r3, r2
   1ab96:	b2db      	uxtb	r3, r3
   1ab98:	2b00      	cmp	r3, #0
   1ab9a:	d001      	beq.n	1aba0 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1ab9c:	2300      	movs	r3, #0
   1ab9e:	e048      	b.n	1ac32 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1aba0:	2300      	movs	r3, #0
   1aba2:	617b      	str	r3, [r7, #20]
		if (v2) {
   1aba4:	1dfb      	adds	r3, r7, #7
   1aba6:	781b      	ldrb	r3, [r3, #0]
   1aba8:	2b00      	cmp	r3, #0
   1abaa:	d004      	beq.n	1abb6 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1abac:	697b      	ldr	r3, [r7, #20]
   1abae:	2280      	movs	r2, #128	; 0x80
   1abb0:	05d2      	lsls	r2, r2, #23
   1abb2:	4313      	orrs	r3, r2
   1abb4:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1abb6:	697b      	ldr	r3, [r7, #20]
   1abb8:	4a23      	ldr	r2, [pc, #140]	; (1ac48 <sd_spi_op_cond+0xd4>)
   1abba:	0019      	movs	r1, r3
   1abbc:	0010      	movs	r0, r2
   1abbe:	4b21      	ldr	r3, [pc, #132]	; (1ac44 <sd_spi_op_cond+0xd0>)
   1abc0:	4798      	blx	r3
   1abc2:	0003      	movs	r3, r0
   1abc4:	001a      	movs	r2, r3
   1abc6:	2301      	movs	r3, #1
   1abc8:	4053      	eors	r3, r2
   1abca:	b2db      	uxtb	r3, r3
   1abcc:	2b00      	cmp	r3, #0
   1abce:	d001      	beq.n	1abd4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1abd0:	2300      	movs	r3, #0
   1abd2:	e02e      	b.n	1ac32 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1abd4:	4b1d      	ldr	r3, [pc, #116]	; (1ac4c <sd_spi_op_cond+0xd8>)
   1abd6:	4798      	blx	r3
   1abd8:	0003      	movs	r3, r0
   1abda:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1abdc:	68fb      	ldr	r3, [r7, #12]
   1abde:	2201      	movs	r2, #1
   1abe0:	4013      	ands	r3, r2
   1abe2:	d006      	beq.n	1abf2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1abe4:	693b      	ldr	r3, [r7, #16]
   1abe6:	1e5a      	subs	r2, r3, #1
   1abe8:	613a      	str	r2, [r7, #16]
   1abea:	2b00      	cmp	r3, #0
   1abec:	d1ca      	bne.n	1ab84 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1abee:	2300      	movs	r3, #0
   1abf0:	e01f      	b.n	1ac32 <sd_spi_op_cond+0xbe>
			break;
   1abf2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1abf4:	4b16      	ldr	r3, [pc, #88]	; (1ac50 <sd_spi_op_cond+0xdc>)
   1abf6:	2100      	movs	r1, #0
   1abf8:	0018      	movs	r0, r3
   1abfa:	4b12      	ldr	r3, [pc, #72]	; (1ac44 <sd_spi_op_cond+0xd0>)
   1abfc:	4798      	blx	r3
   1abfe:	0003      	movs	r3, r0
   1ac00:	001a      	movs	r2, r3
   1ac02:	2301      	movs	r3, #1
   1ac04:	4053      	eors	r3, r2
   1ac06:	b2db      	uxtb	r3, r3
   1ac08:	2b00      	cmp	r3, #0
   1ac0a:	d001      	beq.n	1ac10 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ac0c:	2300      	movs	r3, #0
   1ac0e:	e010      	b.n	1ac32 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1ac10:	4b0e      	ldr	r3, [pc, #56]	; (1ac4c <sd_spi_op_cond+0xd8>)
   1ac12:	4798      	blx	r3
   1ac14:	0002      	movs	r2, r0
   1ac16:	2380      	movs	r3, #128	; 0x80
   1ac18:	05db      	lsls	r3, r3, #23
   1ac1a:	4013      	ands	r3, r2
   1ac1c:	d008      	beq.n	1ac30 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ac1e:	4b0d      	ldr	r3, [pc, #52]	; (1ac54 <sd_spi_op_cond+0xe0>)
   1ac20:	681a      	ldr	r2, [r3, #0]
   1ac22:	4b0c      	ldr	r3, [pc, #48]	; (1ac54 <sd_spi_op_cond+0xe0>)
   1ac24:	681b      	ldr	r3, [r3, #0]
   1ac26:	7adb      	ldrb	r3, [r3, #11]
   1ac28:	2108      	movs	r1, #8
   1ac2a:	430b      	orrs	r3, r1
   1ac2c:	b2db      	uxtb	r3, r3
   1ac2e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ac30:	2301      	movs	r3, #1
}
   1ac32:	0018      	movs	r0, r3
   1ac34:	46bd      	mov	sp, r7
   1ac36:	b006      	add	sp, #24
   1ac38:	bd80      	pop	{r7, pc}
   1ac3a:	46c0      	nop			; (mov r8, r8)
   1ac3c:	00001bee 	.word	0x00001bee
   1ac40:	00001137 	.word	0x00001137
   1ac44:	0001c545 	.word	0x0001c545
   1ac48:	00001129 	.word	0x00001129
   1ac4c:	0001c785 	.word	0x0001c785
   1ac50:	0000053a 	.word	0x0000053a
   1ac54:	20003cc0 	.word	0x20003cc0

0001ac58 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1ac58:	b580      	push	{r7, lr}
   1ac5a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1ac5c:	2301      	movs	r3, #1
}
   1ac5e:	0018      	movs	r0, r3
   1ac60:	46bd      	mov	sp, r7
   1ac62:	bd80      	pop	{r7, pc}

0001ac64 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1ac64:	b580      	push	{r7, lr}
   1ac66:	b084      	sub	sp, #16
   1ac68:	af00      	add	r7, sp, #0
   1ac6a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1ac6c:	687b      	ldr	r3, [r7, #4]
   1ac6e:	2200      	movs	r2, #0
   1ac70:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1ac72:	23d5      	movs	r3, #213	; 0xd5
   1ac74:	005b      	lsls	r3, r3, #1
   1ac76:	4a14      	ldr	r2, [pc, #80]	; (1acc8 <sd_cmd8+0x64>)
   1ac78:	0019      	movs	r1, r3
   1ac7a:	0010      	movs	r0, r2
   1ac7c:	4b13      	ldr	r3, [pc, #76]	; (1accc <sd_cmd8+0x68>)
   1ac7e:	4798      	blx	r3
   1ac80:	0003      	movs	r3, r0
   1ac82:	001a      	movs	r2, r3
   1ac84:	2301      	movs	r3, #1
   1ac86:	4053      	eors	r3, r2
   1ac88:	b2db      	uxtb	r3, r3
   1ac8a:	2b00      	cmp	r3, #0
   1ac8c:	d001      	beq.n	1ac92 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1ac8e:	2301      	movs	r3, #1
   1ac90:	e015      	b.n	1acbe <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1ac92:	4b0f      	ldr	r3, [pc, #60]	; (1acd0 <sd_cmd8+0x6c>)
   1ac94:	4798      	blx	r3
   1ac96:	0003      	movs	r3, r0
   1ac98:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1ac9a:	68fb      	ldr	r3, [r7, #12]
   1ac9c:	3301      	adds	r3, #1
   1ac9e:	d101      	bne.n	1aca4 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1aca0:	2301      	movs	r3, #1
   1aca2:	e00c      	b.n	1acbe <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1aca4:	68fb      	ldr	r3, [r7, #12]
   1aca6:	051b      	lsls	r3, r3, #20
   1aca8:	0d1a      	lsrs	r2, r3, #20
   1acaa:	23d5      	movs	r3, #213	; 0xd5
   1acac:	005b      	lsls	r3, r3, #1
   1acae:	429a      	cmp	r2, r3
   1acb0:	d001      	beq.n	1acb6 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1acb2:	2300      	movs	r3, #0
   1acb4:	e003      	b.n	1acbe <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1acb6:	687b      	ldr	r3, [r7, #4]
   1acb8:	2201      	movs	r2, #1
   1acba:	701a      	strb	r2, [r3, #0]
	return true;
   1acbc:	2301      	movs	r3, #1
}
   1acbe:	0018      	movs	r0, r3
   1acc0:	46bd      	mov	sp, r7
   1acc2:	b004      	add	sp, #16
   1acc4:	bd80      	pop	{r7, pc}
   1acc6:	46c0      	nop			; (mov r8, r8)
   1acc8:	00005508 	.word	0x00005508
   1accc:	0001c545 	.word	0x0001c545
   1acd0:	0001c785 	.word	0x0001c785

0001acd4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1acd4:	b590      	push	{r4, r7, lr}
   1acd6:	b089      	sub	sp, #36	; 0x24
   1acd8:	af02      	add	r7, sp, #8
   1acda:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1acdc:	2380      	movs	r3, #128	; 0x80
   1acde:	009a      	lsls	r2, r3, #2
   1ace0:	4841      	ldr	r0, [pc, #260]	; (1ade8 <mmc_cmd8+0x114>)
   1ace2:	2300      	movs	r3, #0
   1ace4:	9300      	str	r3, [sp, #0]
   1ace6:	2301      	movs	r3, #1
   1ace8:	2100      	movs	r1, #0
   1acea:	4c40      	ldr	r4, [pc, #256]	; (1adec <mmc_cmd8+0x118>)
   1acec:	47a0      	blx	r4
   1acee:	0003      	movs	r3, r0
   1acf0:	001a      	movs	r2, r3
   1acf2:	2301      	movs	r3, #1
   1acf4:	4053      	eors	r3, r2
   1acf6:	b2db      	uxtb	r3, r3
   1acf8:	2b00      	cmp	r3, #0
   1acfa:	d001      	beq.n	1ad00 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1acfc:	2300      	movs	r3, #0
   1acfe:	e06e      	b.n	1adde <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ad00:	2316      	movs	r3, #22
   1ad02:	18fb      	adds	r3, r7, r3
   1ad04:	2200      	movs	r2, #0
   1ad06:	801a      	strh	r2, [r3, #0]
   1ad08:	e014      	b.n	1ad34 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1ad0a:	2310      	movs	r3, #16
   1ad0c:	18fb      	adds	r3, r7, r3
   1ad0e:	0018      	movs	r0, r3
   1ad10:	4b37      	ldr	r3, [pc, #220]	; (1adf0 <mmc_cmd8+0x11c>)
   1ad12:	4798      	blx	r3
   1ad14:	0003      	movs	r3, r0
   1ad16:	001a      	movs	r2, r3
   1ad18:	2301      	movs	r3, #1
   1ad1a:	4053      	eors	r3, r2
   1ad1c:	b2db      	uxtb	r3, r3
   1ad1e:	2b00      	cmp	r3, #0
   1ad20:	d001      	beq.n	1ad26 <mmc_cmd8+0x52>
			return false;
   1ad22:	2300      	movs	r3, #0
   1ad24:	e05b      	b.n	1adde <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ad26:	2316      	movs	r3, #22
   1ad28:	18fb      	adds	r3, r7, r3
   1ad2a:	881a      	ldrh	r2, [r3, #0]
   1ad2c:	2316      	movs	r3, #22
   1ad2e:	18fb      	adds	r3, r7, r3
   1ad30:	3201      	adds	r2, #1
   1ad32:	801a      	strh	r2, [r3, #0]
   1ad34:	2316      	movs	r3, #22
   1ad36:	18fb      	adds	r3, r7, r3
   1ad38:	881b      	ldrh	r3, [r3, #0]
   1ad3a:	2b31      	cmp	r3, #49	; 0x31
   1ad3c:	d9e5      	bls.n	1ad0a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1ad3e:	693b      	ldr	r3, [r7, #16]
   1ad40:	b2db      	uxtb	r3, r3
   1ad42:	2202      	movs	r2, #2
   1ad44:	4013      	ands	r3, r2
   1ad46:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1ad48:	687b      	ldr	r3, [r7, #4]
   1ad4a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1ad4c:	4b29      	ldr	r3, [pc, #164]	; (1adf4 <mmc_cmd8+0x120>)
   1ad4e:	681b      	ldr	r3, [r3, #0]
   1ad50:	330e      	adds	r3, #14
   1ad52:	0018      	movs	r0, r3
   1ad54:	230c      	movs	r3, #12
   1ad56:	223e      	movs	r2, #62	; 0x3e
   1ad58:	2180      	movs	r1, #128	; 0x80
   1ad5a:	4c27      	ldr	r4, [pc, #156]	; (1adf8 <mmc_cmd8+0x124>)
   1ad5c:	47a0      	blx	r4
   1ad5e:	0002      	movs	r2, r0
   1ad60:	4b26      	ldr	r3, [pc, #152]	; (1adfc <mmc_cmd8+0x128>)
   1ad62:	429a      	cmp	r2, r3
   1ad64:	d135      	bne.n	1add2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ad66:	e014      	b.n	1ad92 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1ad68:	230c      	movs	r3, #12
   1ad6a:	18fb      	adds	r3, r7, r3
   1ad6c:	0018      	movs	r0, r3
   1ad6e:	4b20      	ldr	r3, [pc, #128]	; (1adf0 <mmc_cmd8+0x11c>)
   1ad70:	4798      	blx	r3
   1ad72:	0003      	movs	r3, r0
   1ad74:	001a      	movs	r2, r3
   1ad76:	2301      	movs	r3, #1
   1ad78:	4053      	eors	r3, r2
   1ad7a:	b2db      	uxtb	r3, r3
   1ad7c:	2b00      	cmp	r3, #0
   1ad7e:	d001      	beq.n	1ad84 <mmc_cmd8+0xb0>
				return false;
   1ad80:	2300      	movs	r3, #0
   1ad82:	e02c      	b.n	1adde <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ad84:	2316      	movs	r3, #22
   1ad86:	18fb      	adds	r3, r7, r3
   1ad88:	881a      	ldrh	r2, [r3, #0]
   1ad8a:	2316      	movs	r3, #22
   1ad8c:	18fb      	adds	r3, r7, r3
   1ad8e:	3201      	adds	r2, #1
   1ad90:	801a      	strh	r2, [r3, #0]
   1ad92:	2316      	movs	r3, #22
   1ad94:	18fb      	adds	r3, r7, r3
   1ad96:	881b      	ldrh	r3, [r3, #0]
   1ad98:	2b35      	cmp	r3, #53	; 0x35
   1ad9a:	d9e5      	bls.n	1ad68 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1ad9c:	4b15      	ldr	r3, [pc, #84]	; (1adf4 <mmc_cmd8+0x120>)
   1ad9e:	681b      	ldr	r3, [r3, #0]
   1ada0:	68fa      	ldr	r2, [r7, #12]
   1ada2:	0852      	lsrs	r2, r2, #1
   1ada4:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1ada6:	e014      	b.n	1add2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1ada8:	230c      	movs	r3, #12
   1adaa:	18fb      	adds	r3, r7, r3
   1adac:	0018      	movs	r0, r3
   1adae:	4b10      	ldr	r3, [pc, #64]	; (1adf0 <mmc_cmd8+0x11c>)
   1adb0:	4798      	blx	r3
   1adb2:	0003      	movs	r3, r0
   1adb4:	001a      	movs	r2, r3
   1adb6:	2301      	movs	r3, #1
   1adb8:	4053      	eors	r3, r2
   1adba:	b2db      	uxtb	r3, r3
   1adbc:	2b00      	cmp	r3, #0
   1adbe:	d001      	beq.n	1adc4 <mmc_cmd8+0xf0>
			return false;
   1adc0:	2300      	movs	r3, #0
   1adc2:	e00c      	b.n	1adde <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1adc4:	2316      	movs	r3, #22
   1adc6:	18fb      	adds	r3, r7, r3
   1adc8:	881a      	ldrh	r2, [r3, #0]
   1adca:	2316      	movs	r3, #22
   1adcc:	18fb      	adds	r3, r7, r3
   1adce:	3201      	adds	r2, #1
   1add0:	801a      	strh	r2, [r3, #0]
   1add2:	2316      	movs	r3, #22
   1add4:	18fb      	adds	r3, r7, r3
   1add6:	881b      	ldrh	r3, [r3, #0]
   1add8:	2b7f      	cmp	r3, #127	; 0x7f
   1adda:	d9e5      	bls.n	1ada8 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1addc:	2301      	movs	r3, #1
}
   1adde:	0018      	movs	r0, r3
   1ade0:	46bd      	mov	sp, r7
   1ade2:	b007      	add	sp, #28
   1ade4:	bd90      	pop	{r4, r7, pc}
   1ade6:	46c0      	nop			; (mov r8, r8)
   1ade8:	00081108 	.word	0x00081108
   1adec:	0001c56d 	.word	0x0001c56d
   1adf0:	0001c799 	.word	0x0001c799
   1adf4:	20003cc0 	.word	0x20003cc0
   1adf8:	0001a96d 	.word	0x0001a96d
   1adfc:	00000fff 	.word	0x00000fff

0001ae00 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1ae00:	b590      	push	{r4, r7, lr}
   1ae02:	b083      	sub	sp, #12
   1ae04:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1ae06:	4b15      	ldr	r3, [pc, #84]	; (1ae5c <sd_mmc_cmd9_spi+0x5c>)
   1ae08:	681b      	ldr	r3, [r3, #0]
   1ae0a:	891b      	ldrh	r3, [r3, #8]
   1ae0c:	0419      	lsls	r1, r3, #16
   1ae0e:	4814      	ldr	r0, [pc, #80]	; (1ae60 <sd_mmc_cmd9_spi+0x60>)
   1ae10:	2301      	movs	r3, #1
   1ae12:	9300      	str	r3, [sp, #0]
   1ae14:	2301      	movs	r3, #1
   1ae16:	2210      	movs	r2, #16
   1ae18:	4c12      	ldr	r4, [pc, #72]	; (1ae64 <sd_mmc_cmd9_spi+0x64>)
   1ae1a:	47a0      	blx	r4
   1ae1c:	0003      	movs	r3, r0
   1ae1e:	001a      	movs	r2, r3
   1ae20:	2301      	movs	r3, #1
   1ae22:	4053      	eors	r3, r2
   1ae24:	b2db      	uxtb	r3, r3
   1ae26:	2b00      	cmp	r3, #0
   1ae28:	d001      	beq.n	1ae2e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1ae2a:	2300      	movs	r3, #0
   1ae2c:	e012      	b.n	1ae54 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1ae2e:	4b0b      	ldr	r3, [pc, #44]	; (1ae5c <sd_mmc_cmd9_spi+0x5c>)
   1ae30:	681b      	ldr	r3, [r3, #0]
   1ae32:	330e      	adds	r3, #14
   1ae34:	2101      	movs	r1, #1
   1ae36:	0018      	movs	r0, r3
   1ae38:	4b0b      	ldr	r3, [pc, #44]	; (1ae68 <sd_mmc_cmd9_spi+0x68>)
   1ae3a:	4798      	blx	r3
   1ae3c:	0003      	movs	r3, r0
   1ae3e:	001a      	movs	r2, r3
   1ae40:	2301      	movs	r3, #1
   1ae42:	4053      	eors	r3, r2
   1ae44:	b2db      	uxtb	r3, r3
   1ae46:	2b00      	cmp	r3, #0
   1ae48:	d001      	beq.n	1ae4e <sd_mmc_cmd9_spi+0x4e>
		return false;
   1ae4a:	2300      	movs	r3, #0
   1ae4c:	e002      	b.n	1ae54 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1ae4e:	4b07      	ldr	r3, [pc, #28]	; (1ae6c <sd_mmc_cmd9_spi+0x6c>)
   1ae50:	4798      	blx	r3
   1ae52:	0003      	movs	r3, r0
}
   1ae54:	0018      	movs	r0, r3
   1ae56:	46bd      	mov	sp, r7
   1ae58:	b001      	add	sp, #4
   1ae5a:	bd90      	pop	{r4, r7, pc}
   1ae5c:	20003cc0 	.word	0x20003cc0
   1ae60:	00081109 	.word	0x00081109
   1ae64:	0001c56d 	.word	0x0001c56d
   1ae68:	0001c83d 	.word	0x0001c83d
   1ae6c:	0001c8e1 	.word	0x0001c8e1

0001ae70 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1ae70:	b5b0      	push	{r4, r5, r7, lr}
   1ae72:	b084      	sub	sp, #16
   1ae74:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1ae76:	4b45      	ldr	r3, [pc, #276]	; (1af8c <mmc_decode_csd+0x11c>)
   1ae78:	681b      	ldr	r3, [r3, #0]
   1ae7a:	330e      	adds	r3, #14
   1ae7c:	0018      	movs	r0, r3
   1ae7e:	2304      	movs	r3, #4
   1ae80:	227a      	movs	r2, #122	; 0x7a
   1ae82:	2180      	movs	r1, #128	; 0x80
   1ae84:	4c42      	ldr	r4, [pc, #264]	; (1af90 <mmc_decode_csd+0x120>)
   1ae86:	47a0      	blx	r4
   1ae88:	0003      	movs	r3, r0
   1ae8a:	2b02      	cmp	r3, #2
   1ae8c:	d011      	beq.n	1aeb2 <mmc_decode_csd+0x42>
   1ae8e:	d802      	bhi.n	1ae96 <mmc_decode_csd+0x26>
   1ae90:	2b01      	cmp	r3, #1
   1ae92:	d009      	beq.n	1aea8 <mmc_decode_csd+0x38>
   1ae94:	e003      	b.n	1ae9e <mmc_decode_csd+0x2e>
   1ae96:	2b03      	cmp	r3, #3
   1ae98:	d010      	beq.n	1aebc <mmc_decode_csd+0x4c>
   1ae9a:	2b04      	cmp	r3, #4
   1ae9c:	d013      	beq.n	1aec6 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1ae9e:	4b3b      	ldr	r3, [pc, #236]	; (1af8c <mmc_decode_csd+0x11c>)
   1aea0:	681b      	ldr	r3, [r3, #0]
   1aea2:	2212      	movs	r2, #18
   1aea4:	731a      	strb	r2, [r3, #12]
		break;
   1aea6:	e013      	b.n	1aed0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1aea8:	4b38      	ldr	r3, [pc, #224]	; (1af8c <mmc_decode_csd+0x11c>)
   1aeaa:	681b      	ldr	r3, [r3, #0]
   1aeac:	2214      	movs	r2, #20
   1aeae:	731a      	strb	r2, [r3, #12]
		break;
   1aeb0:	e00e      	b.n	1aed0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1aeb2:	4b36      	ldr	r3, [pc, #216]	; (1af8c <mmc_decode_csd+0x11c>)
   1aeb4:	681b      	ldr	r3, [r3, #0]
   1aeb6:	2222      	movs	r2, #34	; 0x22
   1aeb8:	731a      	strb	r2, [r3, #12]
		break;
   1aeba:	e009      	b.n	1aed0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1aebc:	4b33      	ldr	r3, [pc, #204]	; (1af8c <mmc_decode_csd+0x11c>)
   1aebe:	681b      	ldr	r3, [r3, #0]
   1aec0:	2230      	movs	r2, #48	; 0x30
   1aec2:	731a      	strb	r2, [r3, #12]
		break;
   1aec4:	e004      	b.n	1aed0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1aec6:	4b31      	ldr	r3, [pc, #196]	; (1af8c <mmc_decode_csd+0x11c>)
   1aec8:	681b      	ldr	r3, [r3, #0]
   1aeca:	2240      	movs	r2, #64	; 0x40
   1aecc:	731a      	strb	r2, [r3, #12]
		break;
   1aece:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1aed0:	4b2e      	ldr	r3, [pc, #184]	; (1af8c <mmc_decode_csd+0x11c>)
   1aed2:	681b      	ldr	r3, [r3, #0]
   1aed4:	330e      	adds	r3, #14
   1aed6:	0018      	movs	r0, r3
   1aed8:	2308      	movs	r3, #8
   1aeda:	2260      	movs	r2, #96	; 0x60
   1aedc:	2180      	movs	r1, #128	; 0x80
   1aede:	4c2c      	ldr	r4, [pc, #176]	; (1af90 <mmc_decode_csd+0x120>)
   1aee0:	47a0      	blx	r4
   1aee2:	0003      	movs	r3, r0
   1aee4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1aee6:	68fb      	ldr	r3, [r7, #12]
   1aee8:	2207      	movs	r2, #7
   1aeea:	401a      	ands	r2, r3
   1aeec:	4b29      	ldr	r3, [pc, #164]	; (1af94 <mmc_decode_csd+0x124>)
   1aeee:	0092      	lsls	r2, r2, #2
   1aef0:	58d3      	ldr	r3, [r2, r3]
   1aef2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1aef4:	68fb      	ldr	r3, [r7, #12]
   1aef6:	08db      	lsrs	r3, r3, #3
   1aef8:	220f      	movs	r2, #15
   1aefa:	401a      	ands	r2, r3
   1aefc:	4b26      	ldr	r3, [pc, #152]	; (1af98 <mmc_decode_csd+0x128>)
   1aefe:	0092      	lsls	r2, r2, #2
   1af00:	58d3      	ldr	r3, [r2, r3]
   1af02:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1af04:	4b21      	ldr	r3, [pc, #132]	; (1af8c <mmc_decode_csd+0x11c>)
   1af06:	681b      	ldr	r3, [r3, #0]
   1af08:	68ba      	ldr	r2, [r7, #8]
   1af0a:	6879      	ldr	r1, [r7, #4]
   1af0c:	434a      	muls	r2, r1
   1af0e:	21fa      	movs	r1, #250	; 0xfa
   1af10:	0089      	lsls	r1, r1, #2
   1af12:	434a      	muls	r2, r1
   1af14:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1af16:	4b1d      	ldr	r3, [pc, #116]	; (1af8c <mmc_decode_csd+0x11c>)
   1af18:	681b      	ldr	r3, [r3, #0]
   1af1a:	330e      	adds	r3, #14
   1af1c:	0018      	movs	r0, r3
   1af1e:	230c      	movs	r3, #12
   1af20:	223e      	movs	r2, #62	; 0x3e
   1af22:	2180      	movs	r1, #128	; 0x80
   1af24:	4c1a      	ldr	r4, [pc, #104]	; (1af90 <mmc_decode_csd+0x120>)
   1af26:	47a0      	blx	r4
   1af28:	0002      	movs	r2, r0
   1af2a:	4b1c      	ldr	r3, [pc, #112]	; (1af9c <mmc_decode_csd+0x12c>)
   1af2c:	429a      	cmp	r2, r3
   1af2e:	d028      	beq.n	1af82 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1af30:	4b16      	ldr	r3, [pc, #88]	; (1af8c <mmc_decode_csd+0x11c>)
   1af32:	681b      	ldr	r3, [r3, #0]
   1af34:	330e      	adds	r3, #14
   1af36:	0018      	movs	r0, r3
   1af38:	230c      	movs	r3, #12
   1af3a:	223e      	movs	r2, #62	; 0x3e
   1af3c:	2180      	movs	r1, #128	; 0x80
   1af3e:	4c14      	ldr	r4, [pc, #80]	; (1af90 <mmc_decode_csd+0x120>)
   1af40:	47a0      	blx	r4
   1af42:	0003      	movs	r3, r0
   1af44:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1af46:	4b11      	ldr	r3, [pc, #68]	; (1af8c <mmc_decode_csd+0x11c>)
   1af48:	681b      	ldr	r3, [r3, #0]
   1af4a:	330e      	adds	r3, #14
   1af4c:	0018      	movs	r0, r3
   1af4e:	2303      	movs	r3, #3
   1af50:	222f      	movs	r2, #47	; 0x2f
   1af52:	2180      	movs	r1, #128	; 0x80
   1af54:	4d0e      	ldr	r5, [pc, #56]	; (1af90 <mmc_decode_csd+0x120>)
   1af56:	47a8      	blx	r5
   1af58:	0003      	movs	r3, r0
   1af5a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1af5c:	409c      	lsls	r4, r3
   1af5e:	0023      	movs	r3, r4
   1af60:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1af62:	4b0a      	ldr	r3, [pc, #40]	; (1af8c <mmc_decode_csd+0x11c>)
   1af64:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1af66:	4b09      	ldr	r3, [pc, #36]	; (1af8c <mmc_decode_csd+0x11c>)
   1af68:	681b      	ldr	r3, [r3, #0]
   1af6a:	330e      	adds	r3, #14
   1af6c:	0018      	movs	r0, r3
   1af6e:	2304      	movs	r3, #4
   1af70:	2250      	movs	r2, #80	; 0x50
   1af72:	2180      	movs	r1, #128	; 0x80
   1af74:	4d06      	ldr	r5, [pc, #24]	; (1af90 <mmc_decode_csd+0x120>)
   1af76:	47a8      	blx	r5
   1af78:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1af7a:	683b      	ldr	r3, [r7, #0]
   1af7c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1af7e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1af80:	6063      	str	r3, [r4, #4]
	}
}
   1af82:	46c0      	nop			; (mov r8, r8)
   1af84:	46bd      	mov	sp, r7
   1af86:	b004      	add	sp, #16
   1af88:	bdb0      	pop	{r4, r5, r7, pc}
   1af8a:	46c0      	nop			; (mov r8, r8)
   1af8c:	20003cc0 	.word	0x20003cc0
   1af90:	0001a96d 	.word	0x0001a96d
   1af94:	000365a0 	.word	0x000365a0
   1af98:	000365fc 	.word	0x000365fc
   1af9c:	00000fff 	.word	0x00000fff

0001afa0 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1afa0:	b5b0      	push	{r4, r5, r7, lr}
   1afa2:	b084      	sub	sp, #16
   1afa4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1afa6:	4b35      	ldr	r3, [pc, #212]	; (1b07c <sd_decode_csd+0xdc>)
   1afa8:	681b      	ldr	r3, [r3, #0]
   1afaa:	330e      	adds	r3, #14
   1afac:	0018      	movs	r0, r3
   1afae:	2308      	movs	r3, #8
   1afb0:	2260      	movs	r2, #96	; 0x60
   1afb2:	2180      	movs	r1, #128	; 0x80
   1afb4:	4c32      	ldr	r4, [pc, #200]	; (1b080 <sd_decode_csd+0xe0>)
   1afb6:	47a0      	blx	r4
   1afb8:	0003      	movs	r3, r0
   1afba:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1afbc:	68fb      	ldr	r3, [r7, #12]
   1afbe:	2207      	movs	r2, #7
   1afc0:	401a      	ands	r2, r3
   1afc2:	4b30      	ldr	r3, [pc, #192]	; (1b084 <sd_decode_csd+0xe4>)
   1afc4:	0092      	lsls	r2, r2, #2
   1afc6:	58d3      	ldr	r3, [r2, r3]
   1afc8:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1afca:	68fb      	ldr	r3, [r7, #12]
   1afcc:	08db      	lsrs	r3, r3, #3
   1afce:	220f      	movs	r2, #15
   1afd0:	401a      	ands	r2, r3
   1afd2:	4b2d      	ldr	r3, [pc, #180]	; (1b088 <sd_decode_csd+0xe8>)
   1afd4:	0092      	lsls	r2, r2, #2
   1afd6:	58d3      	ldr	r3, [r2, r3]
   1afd8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1afda:	4b28      	ldr	r3, [pc, #160]	; (1b07c <sd_decode_csd+0xdc>)
   1afdc:	681b      	ldr	r3, [r3, #0]
   1afde:	68ba      	ldr	r2, [r7, #8]
   1afe0:	6879      	ldr	r1, [r7, #4]
   1afe2:	434a      	muls	r2, r1
   1afe4:	21fa      	movs	r1, #250	; 0xfa
   1afe6:	0089      	lsls	r1, r1, #2
   1afe8:	434a      	muls	r2, r1
   1afea:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1afec:	4b23      	ldr	r3, [pc, #140]	; (1b07c <sd_decode_csd+0xdc>)
   1afee:	681b      	ldr	r3, [r3, #0]
   1aff0:	330e      	adds	r3, #14
   1aff2:	0018      	movs	r0, r3
   1aff4:	2302      	movs	r3, #2
   1aff6:	227e      	movs	r2, #126	; 0x7e
   1aff8:	2180      	movs	r1, #128	; 0x80
   1affa:	4c21      	ldr	r4, [pc, #132]	; (1b080 <sd_decode_csd+0xe0>)
   1affc:	47a0      	blx	r4
   1affe:	1e03      	subs	r3, r0, #0
   1b000:	d00f      	beq.n	1b022 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1b002:	4b1e      	ldr	r3, [pc, #120]	; (1b07c <sd_decode_csd+0xdc>)
   1b004:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1b006:	4b1d      	ldr	r3, [pc, #116]	; (1b07c <sd_decode_csd+0xdc>)
   1b008:	681b      	ldr	r3, [r3, #0]
   1b00a:	330e      	adds	r3, #14
   1b00c:	0018      	movs	r0, r3
   1b00e:	2316      	movs	r3, #22
   1b010:	2230      	movs	r2, #48	; 0x30
   1b012:	2180      	movs	r1, #128	; 0x80
   1b014:	4d1a      	ldr	r5, [pc, #104]	; (1b080 <sd_decode_csd+0xe0>)
   1b016:	47a8      	blx	r5
   1b018:	0003      	movs	r3, r0
				* 512;
   1b01a:	3301      	adds	r3, #1
   1b01c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1b01e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1b020:	e028      	b.n	1b074 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1b022:	4b16      	ldr	r3, [pc, #88]	; (1b07c <sd_decode_csd+0xdc>)
   1b024:	681b      	ldr	r3, [r3, #0]
   1b026:	330e      	adds	r3, #14
   1b028:	0018      	movs	r0, r3
   1b02a:	230c      	movs	r3, #12
   1b02c:	223e      	movs	r2, #62	; 0x3e
   1b02e:	2180      	movs	r1, #128	; 0x80
   1b030:	4c13      	ldr	r4, [pc, #76]	; (1b080 <sd_decode_csd+0xe0>)
   1b032:	47a0      	blx	r4
   1b034:	0003      	movs	r3, r0
   1b036:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1b038:	4b10      	ldr	r3, [pc, #64]	; (1b07c <sd_decode_csd+0xdc>)
   1b03a:	681b      	ldr	r3, [r3, #0]
   1b03c:	330e      	adds	r3, #14
   1b03e:	0018      	movs	r0, r3
   1b040:	2303      	movs	r3, #3
   1b042:	222f      	movs	r2, #47	; 0x2f
   1b044:	2180      	movs	r1, #128	; 0x80
   1b046:	4d0e      	ldr	r5, [pc, #56]	; (1b080 <sd_decode_csd+0xe0>)
   1b048:	47a8      	blx	r5
   1b04a:	0003      	movs	r3, r0
   1b04c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1b04e:	409c      	lsls	r4, r3
   1b050:	0023      	movs	r3, r4
   1b052:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1b054:	4b09      	ldr	r3, [pc, #36]	; (1b07c <sd_decode_csd+0xdc>)
   1b056:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1b058:	4b08      	ldr	r3, [pc, #32]	; (1b07c <sd_decode_csd+0xdc>)
   1b05a:	681b      	ldr	r3, [r3, #0]
   1b05c:	330e      	adds	r3, #14
   1b05e:	0018      	movs	r0, r3
   1b060:	2304      	movs	r3, #4
   1b062:	2250      	movs	r2, #80	; 0x50
   1b064:	2180      	movs	r1, #128	; 0x80
   1b066:	4d06      	ldr	r5, [pc, #24]	; (1b080 <sd_decode_csd+0xe0>)
   1b068:	47a8      	blx	r5
   1b06a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1b06c:	683b      	ldr	r3, [r7, #0]
   1b06e:	4093      	lsls	r3, r2
				/ 1024;
   1b070:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1b072:	6063      	str	r3, [r4, #4]
}
   1b074:	46c0      	nop			; (mov r8, r8)
   1b076:	46bd      	mov	sp, r7
   1b078:	b004      	add	sp, #16
   1b07a:	bdb0      	pop	{r4, r5, r7, pc}
   1b07c:	20003cc0 	.word	0x20003cc0
   1b080:	0001a96d 	.word	0x0001a96d
   1b084:	000365a0 	.word	0x000365a0
   1b088:	000365bc 	.word	0x000365bc

0001b08c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1b08c:	b580      	push	{r7, lr}
   1b08e:	b082      	sub	sp, #8
   1b090:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1b092:	4b11      	ldr	r3, [pc, #68]	; (1b0d8 <sd_mmc_cmd13+0x4c>)
   1b094:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1b096:	4b11      	ldr	r3, [pc, #68]	; (1b0dc <sd_mmc_cmd13+0x50>)
   1b098:	2100      	movs	r1, #0
   1b09a:	0018      	movs	r0, r3
   1b09c:	4b10      	ldr	r3, [pc, #64]	; (1b0e0 <sd_mmc_cmd13+0x54>)
   1b09e:	4798      	blx	r3
   1b0a0:	0003      	movs	r3, r0
   1b0a2:	001a      	movs	r2, r3
   1b0a4:	2301      	movs	r3, #1
   1b0a6:	4053      	eors	r3, r2
   1b0a8:	b2db      	uxtb	r3, r3
   1b0aa:	2b00      	cmp	r3, #0
   1b0ac:	d001      	beq.n	1b0b2 <sd_mmc_cmd13+0x26>
				return false;
   1b0ae:	2300      	movs	r3, #0
   1b0b0:	e00e      	b.n	1b0d0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1b0b2:	4b0c      	ldr	r3, [pc, #48]	; (1b0e4 <sd_mmc_cmd13+0x58>)
   1b0b4:	4798      	blx	r3
   1b0b6:	0002      	movs	r2, r0
   1b0b8:	23ff      	movs	r3, #255	; 0xff
   1b0ba:	4013      	ands	r3, r2
   1b0bc:	d006      	beq.n	1b0cc <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1b0be:	687b      	ldr	r3, [r7, #4]
   1b0c0:	1e5a      	subs	r2, r3, #1
   1b0c2:	607a      	str	r2, [r7, #4]
   1b0c4:	2b00      	cmp	r3, #0
   1b0c6:	d1e6      	bne.n	1b096 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1b0c8:	2300      	movs	r3, #0
   1b0ca:	e001      	b.n	1b0d0 <sd_mmc_cmd13+0x44>
				break;
   1b0cc:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1b0ce:	2301      	movs	r3, #1
}
   1b0d0:	0018      	movs	r0, r3
   1b0d2:	46bd      	mov	sp, r7
   1b0d4:	b002      	add	sp, #8
   1b0d6:	bd80      	pop	{r7, pc}
   1b0d8:	00030d40 	.word	0x00030d40
   1b0dc:	00001b0d 	.word	0x00001b0d
   1b0e0:	0001c545 	.word	0x0001c545
   1b0e4:	0001c785 	.word	0x0001c785

0001b0e8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1b0e8:	b590      	push	{r4, r7, lr}
   1b0ea:	b085      	sub	sp, #20
   1b0ec:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1b0ee:	4b38      	ldr	r3, [pc, #224]	; (1b1d0 <sd_acmd51+0xe8>)
   1b0f0:	681b      	ldr	r3, [r3, #0]
   1b0f2:	891b      	ldrh	r3, [r3, #8]
   1b0f4:	041b      	lsls	r3, r3, #16
   1b0f6:	4a37      	ldr	r2, [pc, #220]	; (1b1d4 <sd_acmd51+0xec>)
   1b0f8:	0019      	movs	r1, r3
   1b0fa:	0010      	movs	r0, r2
   1b0fc:	4b36      	ldr	r3, [pc, #216]	; (1b1d8 <sd_acmd51+0xf0>)
   1b0fe:	4798      	blx	r3
   1b100:	0003      	movs	r3, r0
   1b102:	001a      	movs	r2, r3
   1b104:	2301      	movs	r3, #1
   1b106:	4053      	eors	r3, r2
   1b108:	b2db      	uxtb	r3, r3
   1b10a:	2b00      	cmp	r3, #0
   1b10c:	d001      	beq.n	1b112 <sd_acmd51+0x2a>
		return false;
   1b10e:	2300      	movs	r3, #0
   1b110:	e059      	b.n	1b1c6 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1b112:	4832      	ldr	r0, [pc, #200]	; (1b1dc <sd_acmd51+0xf4>)
   1b114:	2301      	movs	r3, #1
   1b116:	9300      	str	r3, [sp, #0]
   1b118:	2301      	movs	r3, #1
   1b11a:	2208      	movs	r2, #8
   1b11c:	2100      	movs	r1, #0
   1b11e:	4c30      	ldr	r4, [pc, #192]	; (1b1e0 <sd_acmd51+0xf8>)
   1b120:	47a0      	blx	r4
   1b122:	0003      	movs	r3, r0
   1b124:	001a      	movs	r2, r3
   1b126:	2301      	movs	r3, #1
   1b128:	4053      	eors	r3, r2
   1b12a:	b2db      	uxtb	r3, r3
   1b12c:	2b00      	cmp	r3, #0
   1b12e:	d001      	beq.n	1b134 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1b130:	2300      	movs	r3, #0
   1b132:	e048      	b.n	1b1c6 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1b134:	003b      	movs	r3, r7
   1b136:	2101      	movs	r1, #1
   1b138:	0018      	movs	r0, r3
   1b13a:	4b2a      	ldr	r3, [pc, #168]	; (1b1e4 <sd_acmd51+0xfc>)
   1b13c:	4798      	blx	r3
   1b13e:	0003      	movs	r3, r0
   1b140:	001a      	movs	r2, r3
   1b142:	2301      	movs	r3, #1
   1b144:	4053      	eors	r3, r2
   1b146:	b2db      	uxtb	r3, r3
   1b148:	2b00      	cmp	r3, #0
   1b14a:	d001      	beq.n	1b150 <sd_acmd51+0x68>
		return false;
   1b14c:	2300      	movs	r3, #0
   1b14e:	e03a      	b.n	1b1c6 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1b150:	4b25      	ldr	r3, [pc, #148]	; (1b1e8 <sd_acmd51+0x100>)
   1b152:	4798      	blx	r3
   1b154:	0003      	movs	r3, r0
   1b156:	001a      	movs	r2, r3
   1b158:	2301      	movs	r3, #1
   1b15a:	4053      	eors	r3, r2
   1b15c:	b2db      	uxtb	r3, r3
   1b15e:	2b00      	cmp	r3, #0
   1b160:	d001      	beq.n	1b166 <sd_acmd51+0x7e>
		return false;
   1b162:	2300      	movs	r3, #0
   1b164:	e02f      	b.n	1b1c6 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1b166:	0038      	movs	r0, r7
   1b168:	2304      	movs	r3, #4
   1b16a:	2238      	movs	r2, #56	; 0x38
   1b16c:	2140      	movs	r1, #64	; 0x40
   1b16e:	4c1f      	ldr	r4, [pc, #124]	; (1b1ec <sd_acmd51+0x104>)
   1b170:	47a0      	blx	r4
   1b172:	0003      	movs	r3, r0
   1b174:	2b01      	cmp	r3, #1
   1b176:	d008      	beq.n	1b18a <sd_acmd51+0xa2>
   1b178:	d302      	bcc.n	1b180 <sd_acmd51+0x98>
   1b17a:	2b02      	cmp	r3, #2
   1b17c:	d00a      	beq.n	1b194 <sd_acmd51+0xac>
   1b17e:	e01c      	b.n	1b1ba <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1b180:	4b13      	ldr	r3, [pc, #76]	; (1b1d0 <sd_acmd51+0xe8>)
   1b182:	681b      	ldr	r3, [r3, #0]
   1b184:	2210      	movs	r2, #16
   1b186:	731a      	strb	r2, [r3, #12]
		break;
   1b188:	e01c      	b.n	1b1c4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1b18a:	4b11      	ldr	r3, [pc, #68]	; (1b1d0 <sd_acmd51+0xe8>)
   1b18c:	681b      	ldr	r3, [r3, #0]
   1b18e:	221a      	movs	r2, #26
   1b190:	731a      	strb	r2, [r3, #12]
		break;
   1b192:	e017      	b.n	1b1c4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1b194:	0038      	movs	r0, r7
   1b196:	2301      	movs	r3, #1
   1b198:	222f      	movs	r2, #47	; 0x2f
   1b19a:	2140      	movs	r1, #64	; 0x40
   1b19c:	4c13      	ldr	r4, [pc, #76]	; (1b1ec <sd_acmd51+0x104>)
   1b19e:	47a0      	blx	r4
   1b1a0:	0003      	movs	r3, r0
   1b1a2:	2b01      	cmp	r3, #1
   1b1a4:	d104      	bne.n	1b1b0 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1b1a6:	4b0a      	ldr	r3, [pc, #40]	; (1b1d0 <sd_acmd51+0xe8>)
   1b1a8:	681b      	ldr	r3, [r3, #0]
   1b1aa:	2230      	movs	r2, #48	; 0x30
   1b1ac:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1b1ae:	e009      	b.n	1b1c4 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1b1b0:	4b07      	ldr	r3, [pc, #28]	; (1b1d0 <sd_acmd51+0xe8>)
   1b1b2:	681b      	ldr	r3, [r3, #0]
   1b1b4:	2220      	movs	r2, #32
   1b1b6:	731a      	strb	r2, [r3, #12]
		break;
   1b1b8:	e004      	b.n	1b1c4 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1b1ba:	4b05      	ldr	r3, [pc, #20]	; (1b1d0 <sd_acmd51+0xe8>)
   1b1bc:	681b      	ldr	r3, [r3, #0]
   1b1be:	2210      	movs	r2, #16
   1b1c0:	731a      	strb	r2, [r3, #12]
		break;
   1b1c2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1b1c4:	2301      	movs	r3, #1
}
   1b1c6:	0018      	movs	r0, r3
   1b1c8:	46bd      	mov	sp, r7
   1b1ca:	b003      	add	sp, #12
   1b1cc:	bd90      	pop	{r4, r7, pc}
   1b1ce:	46c0      	nop			; (mov r8, r8)
   1b1d0:	20003cc0 	.word	0x20003cc0
   1b1d4:	00001137 	.word	0x00001137
   1b1d8:	0001c545 	.word	0x0001c545
   1b1dc:	00081133 	.word	0x00081133
   1b1e0:	0001c56d 	.word	0x0001c56d
   1b1e4:	0001c83d 	.word	0x0001c83d
   1b1e8:	0001c8e1 	.word	0x0001c8e1
   1b1ec:	0001a96d 	.word	0x0001a96d

0001b1f0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1b1f0:	b580      	push	{r7, lr}
   1b1f2:	b082      	sub	sp, #8
   1b1f4:	af00      	add	r7, sp, #0
   1b1f6:	0002      	movs	r2, r0
   1b1f8:	1dfb      	adds	r3, r7, #7
   1b1fa:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1b1fc:	1dfb      	adds	r3, r7, #7
   1b1fe:	781b      	ldrb	r3, [r3, #0]
   1b200:	2b00      	cmp	r3, #0
   1b202:	d001      	beq.n	1b208 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1b204:	2304      	movs	r3, #4
   1b206:	e047      	b.n	1b298 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1b208:	1dfb      	adds	r3, r7, #7
   1b20a:	781b      	ldrb	r3, [r3, #0]
   1b20c:	4a24      	ldr	r2, [pc, #144]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b20e:	015b      	lsls	r3, r3, #5
   1b210:	18d3      	adds	r3, r2, r3
   1b212:	330a      	adds	r3, #10
   1b214:	781b      	ldrb	r3, [r3, #0]
   1b216:	2b04      	cmp	r3, #4
   1b218:	d008      	beq.n	1b22c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1b21a:	1dfb      	adds	r3, r7, #7
   1b21c:	781b      	ldrb	r3, [r3, #0]
   1b21e:	4a20      	ldr	r2, [pc, #128]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b220:	015b      	lsls	r3, r3, #5
   1b222:	18d3      	adds	r3, r2, r3
   1b224:	330a      	adds	r3, #10
   1b226:	781b      	ldrb	r3, [r3, #0]
   1b228:	2b03      	cmp	r3, #3
   1b22a:	d11d      	bne.n	1b268 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1b22c:	1dfb      	adds	r3, r7, #7
   1b22e:	781b      	ldrb	r3, [r3, #0]
   1b230:	4a1b      	ldr	r2, [pc, #108]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b232:	015b      	lsls	r3, r3, #5
   1b234:	18d3      	adds	r3, r2, r3
   1b236:	330a      	adds	r3, #10
   1b238:	2202      	movs	r2, #2
   1b23a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1b23c:	1dfb      	adds	r3, r7, #7
   1b23e:	781a      	ldrb	r2, [r3, #0]
   1b240:	4b17      	ldr	r3, [pc, #92]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b242:	0152      	lsls	r2, r2, #5
   1b244:	4917      	ldr	r1, [pc, #92]	; (1b2a4 <sd_mmc_select_slot+0xb4>)
   1b246:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1b248:	1dfb      	adds	r3, r7, #7
   1b24a:	781b      	ldrb	r3, [r3, #0]
   1b24c:	4a14      	ldr	r2, [pc, #80]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b24e:	015b      	lsls	r3, r3, #5
   1b250:	18d3      	adds	r3, r2, r3
   1b252:	330d      	adds	r3, #13
   1b254:	2201      	movs	r2, #1
   1b256:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1b258:	1dfb      	adds	r3, r7, #7
   1b25a:	781b      	ldrb	r3, [r3, #0]
   1b25c:	4a10      	ldr	r2, [pc, #64]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b25e:	015b      	lsls	r3, r3, #5
   1b260:	18d3      	adds	r3, r2, r3
   1b262:	331e      	adds	r3, #30
   1b264:	2200      	movs	r2, #0
   1b266:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1b268:	4b0f      	ldr	r3, [pc, #60]	; (1b2a8 <sd_mmc_select_slot+0xb8>)
   1b26a:	1dfa      	adds	r2, r7, #7
   1b26c:	7812      	ldrb	r2, [r2, #0]
   1b26e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1b270:	1dfb      	adds	r3, r7, #7
   1b272:	781b      	ldrb	r3, [r3, #0]
   1b274:	015a      	lsls	r2, r3, #5
   1b276:	4b0a      	ldr	r3, [pc, #40]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b278:	18d2      	adds	r2, r2, r3
   1b27a:	4b0c      	ldr	r3, [pc, #48]	; (1b2ac <sd_mmc_select_slot+0xbc>)
   1b27c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1b27e:	4b0c      	ldr	r3, [pc, #48]	; (1b2b0 <sd_mmc_select_slot+0xc0>)
   1b280:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1b282:	1dfb      	adds	r3, r7, #7
   1b284:	781b      	ldrb	r3, [r3, #0]
   1b286:	4a06      	ldr	r2, [pc, #24]	; (1b2a0 <sd_mmc_select_slot+0xb0>)
   1b288:	015b      	lsls	r3, r3, #5
   1b28a:	18d3      	adds	r3, r2, r3
   1b28c:	330a      	adds	r3, #10
   1b28e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1b290:	3b02      	subs	r3, #2
   1b292:	425a      	negs	r2, r3
   1b294:	4153      	adcs	r3, r2
   1b296:	b2db      	uxtb	r3, r3
}
   1b298:	0018      	movs	r0, r3
   1b29a:	46bd      	mov	sp, r7
   1b29c:	b002      	add	sp, #8
   1b29e:	bd80      	pop	{r7, pc}
   1b2a0:	20003c9c 	.word	0x20003c9c
   1b2a4:	00061a80 	.word	0x00061a80
   1b2a8:	20003cbc 	.word	0x20003cbc
   1b2ac:	20003cc0 	.word	0x20003cc0
   1b2b0:	0001b2b5 	.word	0x0001b2b5

0001b2b4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1b2b4:	b5b0      	push	{r4, r5, r7, lr}
   1b2b6:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1b2b8:	4b09      	ldr	r3, [pc, #36]	; (1b2e0 <sd_mmc_configure_slot+0x2c>)
   1b2ba:	7818      	ldrb	r0, [r3, #0]
   1b2bc:	4b09      	ldr	r3, [pc, #36]	; (1b2e4 <sd_mmc_configure_slot+0x30>)
   1b2be:	681b      	ldr	r3, [r3, #0]
   1b2c0:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1b2c2:	4b08      	ldr	r3, [pc, #32]	; (1b2e4 <sd_mmc_configure_slot+0x30>)
   1b2c4:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1b2c6:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1b2c8:	4b06      	ldr	r3, [pc, #24]	; (1b2e4 <sd_mmc_configure_slot+0x30>)
   1b2ca:	681b      	ldr	r3, [r3, #0]
   1b2cc:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1b2ce:	1e5c      	subs	r4, r3, #1
   1b2d0:	41a3      	sbcs	r3, r4
   1b2d2:	b2db      	uxtb	r3, r3
   1b2d4:	4c04      	ldr	r4, [pc, #16]	; (1b2e8 <sd_mmc_configure_slot+0x34>)
   1b2d6:	47a0      	blx	r4
}
   1b2d8:	46c0      	nop			; (mov r8, r8)
   1b2da:	46bd      	mov	sp, r7
   1b2dc:	bdb0      	pop	{r4, r5, r7, pc}
   1b2de:	46c0      	nop			; (mov r8, r8)
   1b2e0:	20003cbc 	.word	0x20003cbc
   1b2e4:	20003cc0 	.word	0x20003cc0
   1b2e8:	0001c42d 	.word	0x0001c42d

0001b2ec <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1b2ec:	b580      	push	{r7, lr}
   1b2ee:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1b2f0:	4b05      	ldr	r3, [pc, #20]	; (1b308 <sd_mmc_deselect_slot+0x1c>)
   1b2f2:	781b      	ldrb	r3, [r3, #0]
   1b2f4:	2b00      	cmp	r3, #0
   1b2f6:	d104      	bne.n	1b302 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1b2f8:	4b03      	ldr	r3, [pc, #12]	; (1b308 <sd_mmc_deselect_slot+0x1c>)
   1b2fa:	781b      	ldrb	r3, [r3, #0]
   1b2fc:	0018      	movs	r0, r3
   1b2fe:	4b03      	ldr	r3, [pc, #12]	; (1b30c <sd_mmc_deselect_slot+0x20>)
   1b300:	4798      	blx	r3
	}
}
   1b302:	46c0      	nop			; (mov r8, r8)
   1b304:	46bd      	mov	sp, r7
   1b306:	bd80      	pop	{r7, pc}
   1b308:	20003cbc 	.word	0x20003cbc
   1b30c:	0001c4b5 	.word	0x0001c4b5

0001b310 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1b310:	b580      	push	{r7, lr}
   1b312:	b082      	sub	sp, #8
   1b314:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1b316:	1dfb      	adds	r3, r7, #7
   1b318:	2200      	movs	r2, #0
   1b31a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1b31c:	4b59      	ldr	r3, [pc, #356]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b31e:	681b      	ldr	r3, [r3, #0]
   1b320:	2201      	movs	r2, #1
   1b322:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1b324:	4b57      	ldr	r3, [pc, #348]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b326:	681b      	ldr	r3, [r3, #0]
   1b328:	2200      	movs	r2, #0
   1b32a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1b32c:	4b55      	ldr	r3, [pc, #340]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b32e:	681b      	ldr	r3, [r3, #0]
   1b330:	2200      	movs	r2, #0
   1b332:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1b334:	4b54      	ldr	r3, [pc, #336]	; (1b488 <sd_mmc_spi_card_init+0x178>)
   1b336:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1b338:	2388      	movs	r3, #136	; 0x88
   1b33a:	015b      	lsls	r3, r3, #5
   1b33c:	2100      	movs	r1, #0
   1b33e:	0018      	movs	r0, r3
   1b340:	4b52      	ldr	r3, [pc, #328]	; (1b48c <sd_mmc_spi_card_init+0x17c>)
   1b342:	4798      	blx	r3
   1b344:	0003      	movs	r3, r0
   1b346:	001a      	movs	r2, r3
   1b348:	2301      	movs	r3, #1
   1b34a:	4053      	eors	r3, r2
   1b34c:	b2db      	uxtb	r3, r3
   1b34e:	2b00      	cmp	r3, #0
   1b350:	d001      	beq.n	1b356 <sd_mmc_spi_card_init+0x46>
		return false;
   1b352:	2300      	movs	r3, #0
   1b354:	e092      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1b356:	1dfb      	adds	r3, r7, #7
   1b358:	0018      	movs	r0, r3
   1b35a:	4b4d      	ldr	r3, [pc, #308]	; (1b490 <sd_mmc_spi_card_init+0x180>)
   1b35c:	4798      	blx	r3
   1b35e:	0003      	movs	r3, r0
   1b360:	001a      	movs	r2, r3
   1b362:	2301      	movs	r3, #1
   1b364:	4053      	eors	r3, r2
   1b366:	b2db      	uxtb	r3, r3
   1b368:	2b00      	cmp	r3, #0
   1b36a:	d001      	beq.n	1b370 <sd_mmc_spi_card_init+0x60>
		return false;
   1b36c:	2300      	movs	r3, #0
   1b36e:	e085      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1b370:	4b48      	ldr	r3, [pc, #288]	; (1b494 <sd_mmc_spi_card_init+0x184>)
   1b372:	4798      	blx	r3
   1b374:	0003      	movs	r3, r0
   1b376:	001a      	movs	r2, r3
   1b378:	2301      	movs	r3, #1
   1b37a:	4053      	eors	r3, r2
   1b37c:	b2db      	uxtb	r3, r3
   1b37e:	2b00      	cmp	r3, #0
   1b380:	d001      	beq.n	1b386 <sd_mmc_spi_card_init+0x76>
		return false;
   1b382:	2300      	movs	r3, #0
   1b384:	e07a      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1b386:	4b3f      	ldr	r3, [pc, #252]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b388:	681b      	ldr	r3, [r3, #0]
   1b38a:	7adb      	ldrb	r3, [r3, #11]
   1b38c:	001a      	movs	r2, r3
   1b38e:	2301      	movs	r3, #1
   1b390:	4013      	ands	r3, r2
   1b392:	d021      	beq.n	1b3d8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1b394:	1dfb      	adds	r3, r7, #7
   1b396:	781b      	ldrb	r3, [r3, #0]
   1b398:	0018      	movs	r0, r3
   1b39a:	4b3f      	ldr	r3, [pc, #252]	; (1b498 <sd_mmc_spi_card_init+0x188>)
   1b39c:	4798      	blx	r3
   1b39e:	0003      	movs	r3, r0
   1b3a0:	001a      	movs	r2, r3
   1b3a2:	2301      	movs	r3, #1
   1b3a4:	4053      	eors	r3, r2
   1b3a6:	b2db      	uxtb	r3, r3
   1b3a8:	2b00      	cmp	r3, #0
   1b3aa:	d007      	beq.n	1b3bc <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1b3ac:	4b35      	ldr	r3, [pc, #212]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b3ae:	681b      	ldr	r3, [r3, #0]
   1b3b0:	2202      	movs	r2, #2
   1b3b2:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1b3b4:	4b39      	ldr	r3, [pc, #228]	; (1b49c <sd_mmc_spi_card_init+0x18c>)
   1b3b6:	4798      	blx	r3
   1b3b8:	0003      	movs	r3, r0
   1b3ba:	e05f      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1b3bc:	4b38      	ldr	r3, [pc, #224]	; (1b4a0 <sd_mmc_spi_card_init+0x190>)
   1b3be:	2100      	movs	r1, #0
   1b3c0:	0018      	movs	r0, r3
   1b3c2:	4b32      	ldr	r3, [pc, #200]	; (1b48c <sd_mmc_spi_card_init+0x17c>)
   1b3c4:	4798      	blx	r3
   1b3c6:	0003      	movs	r3, r0
   1b3c8:	001a      	movs	r2, r3
   1b3ca:	2301      	movs	r3, #1
   1b3cc:	4053      	eors	r3, r2
   1b3ce:	b2db      	uxtb	r3, r3
   1b3d0:	2b00      	cmp	r3, #0
   1b3d2:	d001      	beq.n	1b3d8 <sd_mmc_spi_card_init+0xc8>
			return false;
   1b3d4:	2300      	movs	r3, #0
   1b3d6:	e051      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1b3d8:	4b2a      	ldr	r3, [pc, #168]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b3da:	681b      	ldr	r3, [r3, #0]
   1b3dc:	7adb      	ldrb	r3, [r3, #11]
   1b3de:	001a      	movs	r2, r3
   1b3e0:	2301      	movs	r3, #1
   1b3e2:	4013      	ands	r3, r2
   1b3e4:	d017      	beq.n	1b416 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1b3e6:	4b2f      	ldr	r3, [pc, #188]	; (1b4a4 <sd_mmc_spi_card_init+0x194>)
   1b3e8:	4798      	blx	r3
   1b3ea:	0003      	movs	r3, r0
   1b3ec:	001a      	movs	r2, r3
   1b3ee:	2301      	movs	r3, #1
   1b3f0:	4053      	eors	r3, r2
   1b3f2:	b2db      	uxtb	r3, r3
   1b3f4:	2b00      	cmp	r3, #0
   1b3f6:	d001      	beq.n	1b3fc <sd_mmc_spi_card_init+0xec>
			return false;
   1b3f8:	2300      	movs	r3, #0
   1b3fa:	e03f      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1b3fc:	4b2a      	ldr	r3, [pc, #168]	; (1b4a8 <sd_mmc_spi_card_init+0x198>)
   1b3fe:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1b400:	4b2a      	ldr	r3, [pc, #168]	; (1b4ac <sd_mmc_spi_card_init+0x19c>)
   1b402:	4798      	blx	r3
   1b404:	0003      	movs	r3, r0
   1b406:	001a      	movs	r2, r3
   1b408:	2301      	movs	r3, #1
   1b40a:	4053      	eors	r3, r2
   1b40c:	b2db      	uxtb	r3, r3
   1b40e:	2b00      	cmp	r3, #0
   1b410:	d001      	beq.n	1b416 <sd_mmc_spi_card_init+0x106>
			return false;
   1b412:	2300      	movs	r3, #0
   1b414:	e032      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1b416:	4b1b      	ldr	r3, [pc, #108]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b418:	681b      	ldr	r3, [r3, #0]
   1b41a:	7adb      	ldrb	r3, [r3, #11]
   1b41c:	001a      	movs	r2, r3
   1b41e:	2301      	movs	r3, #1
   1b420:	4013      	ands	r3, r2
   1b422:	d016      	beq.n	1b452 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1b424:	4b17      	ldr	r3, [pc, #92]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b426:	681b      	ldr	r3, [r3, #0]
   1b428:	7adb      	ldrb	r3, [r3, #11]
   1b42a:	001a      	movs	r2, r3
   1b42c:	2308      	movs	r3, #8
   1b42e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1b430:	d10f      	bne.n	1b452 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1b432:	2380      	movs	r3, #128	; 0x80
   1b434:	009b      	lsls	r3, r3, #2
   1b436:	4a1e      	ldr	r2, [pc, #120]	; (1b4b0 <sd_mmc_spi_card_init+0x1a0>)
   1b438:	0019      	movs	r1, r3
   1b43a:	0010      	movs	r0, r2
   1b43c:	4b13      	ldr	r3, [pc, #76]	; (1b48c <sd_mmc_spi_card_init+0x17c>)
   1b43e:	4798      	blx	r3
   1b440:	0003      	movs	r3, r0
   1b442:	001a      	movs	r2, r3
   1b444:	2301      	movs	r3, #1
   1b446:	4053      	eors	r3, r2
   1b448:	b2db      	uxtb	r3, r3
   1b44a:	2b00      	cmp	r3, #0
   1b44c:	d001      	beq.n	1b452 <sd_mmc_spi_card_init+0x142>
			return false;
   1b44e:	2300      	movs	r3, #0
   1b450:	e014      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1b452:	4b0c      	ldr	r3, [pc, #48]	; (1b484 <sd_mmc_spi_card_init+0x174>)
   1b454:	681b      	ldr	r3, [r3, #0]
   1b456:	7adb      	ldrb	r3, [r3, #11]
   1b458:	001a      	movs	r2, r3
   1b45a:	2301      	movs	r3, #1
   1b45c:	4013      	ands	r3, r2
   1b45e:	d00a      	beq.n	1b476 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1b460:	4b14      	ldr	r3, [pc, #80]	; (1b4b4 <sd_mmc_spi_card_init+0x1a4>)
   1b462:	4798      	blx	r3
   1b464:	0003      	movs	r3, r0
   1b466:	001a      	movs	r2, r3
   1b468:	2301      	movs	r3, #1
   1b46a:	4053      	eors	r3, r2
   1b46c:	b2db      	uxtb	r3, r3
   1b46e:	2b00      	cmp	r3, #0
   1b470:	d001      	beq.n	1b476 <sd_mmc_spi_card_init+0x166>
			return false;
   1b472:	2300      	movs	r3, #0
   1b474:	e002      	b.n	1b47c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1b476:	4b10      	ldr	r3, [pc, #64]	; (1b4b8 <sd_mmc_spi_card_init+0x1a8>)
   1b478:	4798      	blx	r3
	return true;
   1b47a:	2301      	movs	r3, #1
}
   1b47c:	0018      	movs	r0, r3
   1b47e:	46bd      	mov	sp, r7
   1b480:	b002      	add	sp, #8
   1b482:	bd80      	pop	{r7, pc}
   1b484:	20003cc0 	.word	0x20003cc0
   1b488:	0001c4f9 	.word	0x0001c4f9
   1b48c:	0001c545 	.word	0x0001c545
   1b490:	0001ac65 	.word	0x0001ac65
   1b494:	0001ac59 	.word	0x0001ac59
   1b498:	0001ab75 	.word	0x0001ab75
   1b49c:	0001b4bd 	.word	0x0001b4bd
   1b4a0:	0000113b 	.word	0x0000113b
   1b4a4:	0001ae01 	.word	0x0001ae01
   1b4a8:	0001afa1 	.word	0x0001afa1
   1b4ac:	0001b0e9 	.word	0x0001b0e9
   1b4b0:	00001110 	.word	0x00001110
   1b4b4:	0001b08d 	.word	0x0001b08d
   1b4b8:	0001b2b5 	.word	0x0001b2b5

0001b4bc <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1b4bc:	b580      	push	{r7, lr}
   1b4be:	b082      	sub	sp, #8
   1b4c0:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1b4c2:	2388      	movs	r3, #136	; 0x88
   1b4c4:	015b      	lsls	r3, r3, #5
   1b4c6:	2100      	movs	r1, #0
   1b4c8:	0018      	movs	r0, r3
   1b4ca:	4b32      	ldr	r3, [pc, #200]	; (1b594 <sd_mmc_spi_install_mmc+0xd8>)
   1b4cc:	4798      	blx	r3
   1b4ce:	0003      	movs	r3, r0
   1b4d0:	001a      	movs	r2, r3
   1b4d2:	2301      	movs	r3, #1
   1b4d4:	4053      	eors	r3, r2
   1b4d6:	b2db      	uxtb	r3, r3
   1b4d8:	2b00      	cmp	r3, #0
   1b4da:	d001      	beq.n	1b4e0 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1b4dc:	2300      	movs	r3, #0
   1b4de:	e055      	b.n	1b58c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1b4e0:	4b2d      	ldr	r3, [pc, #180]	; (1b598 <sd_mmc_spi_install_mmc+0xdc>)
   1b4e2:	4798      	blx	r3
   1b4e4:	0003      	movs	r3, r0
   1b4e6:	001a      	movs	r2, r3
   1b4e8:	2301      	movs	r3, #1
   1b4ea:	4053      	eors	r3, r2
   1b4ec:	b2db      	uxtb	r3, r3
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d001      	beq.n	1b4f6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1b4f2:	2300      	movs	r3, #0
   1b4f4:	e04a      	b.n	1b58c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1b4f6:	4b29      	ldr	r3, [pc, #164]	; (1b59c <sd_mmc_spi_install_mmc+0xe0>)
   1b4f8:	2100      	movs	r1, #0
   1b4fa:	0018      	movs	r0, r3
   1b4fc:	4b25      	ldr	r3, [pc, #148]	; (1b594 <sd_mmc_spi_install_mmc+0xd8>)
   1b4fe:	4798      	blx	r3
   1b500:	0003      	movs	r3, r0
   1b502:	001a      	movs	r2, r3
   1b504:	2301      	movs	r3, #1
   1b506:	4053      	eors	r3, r2
   1b508:	b2db      	uxtb	r3, r3
   1b50a:	2b00      	cmp	r3, #0
   1b50c:	d001      	beq.n	1b512 <sd_mmc_spi_install_mmc+0x56>
		return false;
   1b50e:	2300      	movs	r3, #0
   1b510:	e03c      	b.n	1b58c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1b512:	4b23      	ldr	r3, [pc, #140]	; (1b5a0 <sd_mmc_spi_install_mmc+0xe4>)
   1b514:	4798      	blx	r3
   1b516:	0003      	movs	r3, r0
   1b518:	001a      	movs	r2, r3
   1b51a:	2301      	movs	r3, #1
   1b51c:	4053      	eors	r3, r2
   1b51e:	b2db      	uxtb	r3, r3
   1b520:	2b00      	cmp	r3, #0
   1b522:	d001      	beq.n	1b528 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1b524:	2300      	movs	r3, #0
   1b526:	e031      	b.n	1b58c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1b528:	4b1e      	ldr	r3, [pc, #120]	; (1b5a4 <sd_mmc_spi_install_mmc+0xe8>)
   1b52a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1b52c:	4b1e      	ldr	r3, [pc, #120]	; (1b5a8 <sd_mmc_spi_install_mmc+0xec>)
   1b52e:	681b      	ldr	r3, [r3, #0]
   1b530:	7b1b      	ldrb	r3, [r3, #12]
   1b532:	2b3f      	cmp	r3, #63	; 0x3f
   1b534:	d90c      	bls.n	1b550 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1b536:	1dfb      	adds	r3, r7, #7
   1b538:	0018      	movs	r0, r3
   1b53a:	4b1c      	ldr	r3, [pc, #112]	; (1b5ac <sd_mmc_spi_install_mmc+0xf0>)
   1b53c:	4798      	blx	r3
   1b53e:	0003      	movs	r3, r0
   1b540:	001a      	movs	r2, r3
   1b542:	2301      	movs	r3, #1
   1b544:	4053      	eors	r3, r2
   1b546:	b2db      	uxtb	r3, r3
   1b548:	2b00      	cmp	r3, #0
   1b54a:	d001      	beq.n	1b550 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1b54c:	2300      	movs	r3, #0
   1b54e:	e01d      	b.n	1b58c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1b550:	2380      	movs	r3, #128	; 0x80
   1b552:	009b      	lsls	r3, r3, #2
   1b554:	4a16      	ldr	r2, [pc, #88]	; (1b5b0 <sd_mmc_spi_install_mmc+0xf4>)
   1b556:	0019      	movs	r1, r3
   1b558:	0010      	movs	r0, r2
   1b55a:	4b0e      	ldr	r3, [pc, #56]	; (1b594 <sd_mmc_spi_install_mmc+0xd8>)
   1b55c:	4798      	blx	r3
   1b55e:	0003      	movs	r3, r0
   1b560:	001a      	movs	r2, r3
   1b562:	2301      	movs	r3, #1
   1b564:	4053      	eors	r3, r2
   1b566:	b2db      	uxtb	r3, r3
   1b568:	2b00      	cmp	r3, #0
   1b56a:	d001      	beq.n	1b570 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1b56c:	2300      	movs	r3, #0
   1b56e:	e00d      	b.n	1b58c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1b570:	4b10      	ldr	r3, [pc, #64]	; (1b5b4 <sd_mmc_spi_install_mmc+0xf8>)
   1b572:	4798      	blx	r3
   1b574:	0003      	movs	r3, r0
   1b576:	001a      	movs	r2, r3
   1b578:	2301      	movs	r3, #1
   1b57a:	4053      	eors	r3, r2
   1b57c:	b2db      	uxtb	r3, r3
   1b57e:	2b00      	cmp	r3, #0
   1b580:	d001      	beq.n	1b586 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1b582:	2300      	movs	r3, #0
   1b584:	e002      	b.n	1b58c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1b586:	4b0c      	ldr	r3, [pc, #48]	; (1b5b8 <sd_mmc_spi_install_mmc+0xfc>)
   1b588:	4798      	blx	r3
	return true;
   1b58a:	2301      	movs	r3, #1
}
   1b58c:	0018      	movs	r0, r3
   1b58e:	46bd      	mov	sp, r7
   1b590:	b002      	add	sp, #8
   1b592:	bd80      	pop	{r7, pc}
   1b594:	0001c545 	.word	0x0001c545
   1b598:	0001aac9 	.word	0x0001aac9
   1b59c:	0000113b 	.word	0x0000113b
   1b5a0:	0001ae01 	.word	0x0001ae01
   1b5a4:	0001ae71 	.word	0x0001ae71
   1b5a8:	20003cc0 	.word	0x20003cc0
   1b5ac:	0001acd5 	.word	0x0001acd5
   1b5b0:	00001110 	.word	0x00001110
   1b5b4:	0001b08d 	.word	0x0001b08d
   1b5b8:	0001b2b5 	.word	0x0001b2b5

0001b5bc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1b5bc:	b580      	push	{r7, lr}
   1b5be:	b082      	sub	sp, #8
   1b5c0:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1b5c2:	1dfb      	adds	r3, r7, #7
   1b5c4:	2200      	movs	r2, #0
   1b5c6:	701a      	strb	r2, [r3, #0]
   1b5c8:	e00c      	b.n	1b5e4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1b5ca:	1dfb      	adds	r3, r7, #7
   1b5cc:	781b      	ldrb	r3, [r3, #0]
   1b5ce:	4a0c      	ldr	r2, [pc, #48]	; (1b600 <sd_mmc_init+0x44>)
   1b5d0:	015b      	lsls	r3, r3, #5
   1b5d2:	18d3      	adds	r3, r2, r3
   1b5d4:	330a      	adds	r3, #10
   1b5d6:	2204      	movs	r2, #4
   1b5d8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1b5da:	1dfb      	adds	r3, r7, #7
   1b5dc:	781a      	ldrb	r2, [r3, #0]
   1b5de:	1dfb      	adds	r3, r7, #7
   1b5e0:	3201      	adds	r2, #1
   1b5e2:	701a      	strb	r2, [r3, #0]
   1b5e4:	1dfb      	adds	r3, r7, #7
   1b5e6:	781b      	ldrb	r3, [r3, #0]
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	d0ee      	beq.n	1b5ca <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1b5ec:	4b05      	ldr	r3, [pc, #20]	; (1b604 <sd_mmc_init+0x48>)
   1b5ee:	22ff      	movs	r2, #255	; 0xff
   1b5f0:	701a      	strb	r2, [r3, #0]
	driver_init();
   1b5f2:	4b05      	ldr	r3, [pc, #20]	; (1b608 <sd_mmc_init+0x4c>)
   1b5f4:	4798      	blx	r3
}
   1b5f6:	46c0      	nop			; (mov r8, r8)
   1b5f8:	46bd      	mov	sp, r7
   1b5fa:	b002      	add	sp, #8
   1b5fc:	bd80      	pop	{r7, pc}
   1b5fe:	46c0      	nop			; (mov r8, r8)
   1b600:	20003c9c 	.word	0x20003c9c
   1b604:	20003cbc 	.word	0x20003cbc
   1b608:	0001c365 	.word	0x0001c365

0001b60c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1b60c:	b590      	push	{r4, r7, lr}
   1b60e:	b085      	sub	sp, #20
   1b610:	af00      	add	r7, sp, #0
   1b612:	0002      	movs	r2, r0
   1b614:	1dfb      	adds	r3, r7, #7
   1b616:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1b618:	230f      	movs	r3, #15
   1b61a:	18fc      	adds	r4, r7, r3
   1b61c:	1dfb      	adds	r3, r7, #7
   1b61e:	781b      	ldrb	r3, [r3, #0]
   1b620:	0018      	movs	r0, r3
   1b622:	4b13      	ldr	r3, [pc, #76]	; (1b670 <sd_mmc_check+0x64>)
   1b624:	4798      	blx	r3
   1b626:	0003      	movs	r3, r0
   1b628:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1b62a:	230f      	movs	r3, #15
   1b62c:	18fb      	adds	r3, r7, r3
   1b62e:	781b      	ldrb	r3, [r3, #0]
   1b630:	2b01      	cmp	r3, #1
   1b632:	d005      	beq.n	1b640 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1b634:	4b0f      	ldr	r3, [pc, #60]	; (1b674 <sd_mmc_check+0x68>)
   1b636:	4798      	blx	r3
		return sd_mmc_err;
   1b638:	230f      	movs	r3, #15
   1b63a:	18fb      	adds	r3, r7, r3
   1b63c:	781b      	ldrb	r3, [r3, #0]
   1b63e:	e012      	b.n	1b666 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1b640:	4b0d      	ldr	r3, [pc, #52]	; (1b678 <sd_mmc_check+0x6c>)
   1b642:	4798      	blx	r3
   1b644:	1e03      	subs	r3, r0, #0
   1b646:	d007      	beq.n	1b658 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1b648:	4b0c      	ldr	r3, [pc, #48]	; (1b67c <sd_mmc_check+0x70>)
   1b64a:	681b      	ldr	r3, [r3, #0]
   1b64c:	2200      	movs	r2, #0
   1b64e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1b650:	4b08      	ldr	r3, [pc, #32]	; (1b674 <sd_mmc_check+0x68>)
   1b652:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1b654:	2301      	movs	r3, #1
   1b656:	e006      	b.n	1b666 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1b658:	4b08      	ldr	r3, [pc, #32]	; (1b67c <sd_mmc_check+0x70>)
   1b65a:	681b      	ldr	r3, [r3, #0]
   1b65c:	2203      	movs	r2, #3
   1b65e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1b660:	4b04      	ldr	r3, [pc, #16]	; (1b674 <sd_mmc_check+0x68>)
   1b662:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1b664:	2303      	movs	r3, #3
}
   1b666:	0018      	movs	r0, r3
   1b668:	46bd      	mov	sp, r7
   1b66a:	b005      	add	sp, #20
   1b66c:	bd90      	pop	{r4, r7, pc}
   1b66e:	46c0      	nop			; (mov r8, r8)
   1b670:	0001b1f1 	.word	0x0001b1f1
   1b674:	0001b2ed 	.word	0x0001b2ed
   1b678:	0001b311 	.word	0x0001b311
   1b67c:	20003cc0 	.word	0x20003cc0

0001b680 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1b680:	b580      	push	{r7, lr}
   1b682:	b082      	sub	sp, #8
   1b684:	af00      	add	r7, sp, #0
   1b686:	0002      	movs	r2, r0
   1b688:	1dfb      	adds	r3, r7, #7
   1b68a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1b68c:	1dfb      	adds	r3, r7, #7
   1b68e:	781b      	ldrb	r3, [r3, #0]
   1b690:	0018      	movs	r0, r3
   1b692:	4b07      	ldr	r3, [pc, #28]	; (1b6b0 <sd_mmc_get_type+0x30>)
   1b694:	4798      	blx	r3
   1b696:	1e03      	subs	r3, r0, #0
   1b698:	d001      	beq.n	1b69e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1b69a:	2300      	movs	r3, #0
   1b69c:	e004      	b.n	1b6a8 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1b69e:	4b05      	ldr	r3, [pc, #20]	; (1b6b4 <sd_mmc_get_type+0x34>)
   1b6a0:	4798      	blx	r3
	return sd_mmc_card->type;
   1b6a2:	4b05      	ldr	r3, [pc, #20]	; (1b6b8 <sd_mmc_get_type+0x38>)
   1b6a4:	681b      	ldr	r3, [r3, #0]
   1b6a6:	7adb      	ldrb	r3, [r3, #11]
}
   1b6a8:	0018      	movs	r0, r3
   1b6aa:	46bd      	mov	sp, r7
   1b6ac:	b002      	add	sp, #8
   1b6ae:	bd80      	pop	{r7, pc}
   1b6b0:	0001b1f1 	.word	0x0001b1f1
   1b6b4:	0001b2ed 	.word	0x0001b2ed
   1b6b8:	20003cc0 	.word	0x20003cc0

0001b6bc <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1b6bc:	b580      	push	{r7, lr}
   1b6be:	b082      	sub	sp, #8
   1b6c0:	af00      	add	r7, sp, #0
   1b6c2:	0002      	movs	r2, r0
   1b6c4:	1dfb      	adds	r3, r7, #7
   1b6c6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1b6c8:	1dfb      	adds	r3, r7, #7
   1b6ca:	781b      	ldrb	r3, [r3, #0]
   1b6cc:	0018      	movs	r0, r3
   1b6ce:	4b07      	ldr	r3, [pc, #28]	; (1b6ec <sd_mmc_get_capacity+0x30>)
   1b6d0:	4798      	blx	r3
   1b6d2:	1e03      	subs	r3, r0, #0
   1b6d4:	d001      	beq.n	1b6da <sd_mmc_get_capacity+0x1e>
		return 0;
   1b6d6:	2300      	movs	r3, #0
   1b6d8:	e004      	b.n	1b6e4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1b6da:	4b05      	ldr	r3, [pc, #20]	; (1b6f0 <sd_mmc_get_capacity+0x34>)
   1b6dc:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1b6de:	4b05      	ldr	r3, [pc, #20]	; (1b6f4 <sd_mmc_get_capacity+0x38>)
   1b6e0:	681b      	ldr	r3, [r3, #0]
   1b6e2:	685b      	ldr	r3, [r3, #4]
}
   1b6e4:	0018      	movs	r0, r3
   1b6e6:	46bd      	mov	sp, r7
   1b6e8:	b002      	add	sp, #8
   1b6ea:	bd80      	pop	{r7, pc}
   1b6ec:	0001b1f1 	.word	0x0001b1f1
   1b6f0:	0001b2ed 	.word	0x0001b2ed
   1b6f4:	20003cc0 	.word	0x20003cc0

0001b6f8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1b6f8:	b580      	push	{r7, lr}
   1b6fa:	b082      	sub	sp, #8
   1b6fc:	af00      	add	r7, sp, #0
   1b6fe:	0002      	movs	r2, r0
   1b700:	1dfb      	adds	r3, r7, #7
   1b702:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1b704:	2300      	movs	r3, #0
}
   1b706:	0018      	movs	r0, r3
   1b708:	46bd      	mov	sp, r7
   1b70a:	b002      	add	sp, #8
   1b70c:	bd80      	pop	{r7, pc}
	...

0001b710 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1b710:	b590      	push	{r4, r7, lr}
   1b712:	b089      	sub	sp, #36	; 0x24
   1b714:	af02      	add	r7, sp, #8
   1b716:	6039      	str	r1, [r7, #0]
   1b718:	0011      	movs	r1, r2
   1b71a:	1dfb      	adds	r3, r7, #7
   1b71c:	1c02      	adds	r2, r0, #0
   1b71e:	701a      	strb	r2, [r3, #0]
   1b720:	1d3b      	adds	r3, r7, #4
   1b722:	1c0a      	adds	r2, r1, #0
   1b724:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1b726:	230f      	movs	r3, #15
   1b728:	18fc      	adds	r4, r7, r3
   1b72a:	1dfb      	adds	r3, r7, #7
   1b72c:	781b      	ldrb	r3, [r3, #0]
   1b72e:	0018      	movs	r0, r3
   1b730:	4b29      	ldr	r3, [pc, #164]	; (1b7d8 <sd_mmc_init_read_blocks+0xc8>)
   1b732:	4798      	blx	r3
   1b734:	0003      	movs	r3, r0
   1b736:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1b738:	230f      	movs	r3, #15
   1b73a:	18fb      	adds	r3, r7, r3
   1b73c:	781b      	ldrb	r3, [r3, #0]
   1b73e:	2b00      	cmp	r3, #0
   1b740:	d003      	beq.n	1b74a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1b742:	230f      	movs	r3, #15
   1b744:	18fb      	adds	r3, r7, r3
   1b746:	781b      	ldrb	r3, [r3, #0]
   1b748:	e041      	b.n	1b7ce <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1b74a:	4b24      	ldr	r3, [pc, #144]	; (1b7dc <sd_mmc_init_read_blocks+0xcc>)
   1b74c:	4798      	blx	r3
   1b74e:	0003      	movs	r3, r0
   1b750:	001a      	movs	r2, r3
   1b752:	2301      	movs	r3, #1
   1b754:	4053      	eors	r3, r2
   1b756:	b2db      	uxtb	r3, r3
   1b758:	2b00      	cmp	r3, #0
   1b75a:	d003      	beq.n	1b764 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1b75c:	4b20      	ldr	r3, [pc, #128]	; (1b7e0 <sd_mmc_init_read_blocks+0xd0>)
   1b75e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1b760:	2305      	movs	r3, #5
   1b762:	e034      	b.n	1b7ce <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1b764:	1d3b      	adds	r3, r7, #4
   1b766:	881b      	ldrh	r3, [r3, #0]
   1b768:	2b01      	cmp	r3, #1
   1b76a:	d902      	bls.n	1b772 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1b76c:	4b1d      	ldr	r3, [pc, #116]	; (1b7e4 <sd_mmc_init_read_blocks+0xd4>)
   1b76e:	617b      	str	r3, [r7, #20]
   1b770:	e001      	b.n	1b776 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1b772:	4b1d      	ldr	r3, [pc, #116]	; (1b7e8 <sd_mmc_init_read_blocks+0xd8>)
   1b774:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1b776:	4b1d      	ldr	r3, [pc, #116]	; (1b7ec <sd_mmc_init_read_blocks+0xdc>)
   1b778:	681b      	ldr	r3, [r3, #0]
   1b77a:	7adb      	ldrb	r3, [r3, #11]
   1b77c:	001a      	movs	r2, r3
   1b77e:	2308      	movs	r3, #8
   1b780:	4013      	ands	r3, r2
   1b782:	d002      	beq.n	1b78a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1b784:	683b      	ldr	r3, [r7, #0]
   1b786:	613b      	str	r3, [r7, #16]
   1b788:	e002      	b.n	1b790 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1b78a:	683b      	ldr	r3, [r7, #0]
   1b78c:	025b      	lsls	r3, r3, #9
   1b78e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1b790:	1d3b      	adds	r3, r7, #4
   1b792:	881c      	ldrh	r4, [r3, #0]
   1b794:	2380      	movs	r3, #128	; 0x80
   1b796:	009a      	lsls	r2, r3, #2
   1b798:	6939      	ldr	r1, [r7, #16]
   1b79a:	6978      	ldr	r0, [r7, #20]
   1b79c:	2301      	movs	r3, #1
   1b79e:	9300      	str	r3, [sp, #0]
   1b7a0:	0023      	movs	r3, r4
   1b7a2:	4c13      	ldr	r4, [pc, #76]	; (1b7f0 <sd_mmc_init_read_blocks+0xe0>)
   1b7a4:	47a0      	blx	r4
   1b7a6:	0003      	movs	r3, r0
   1b7a8:	001a      	movs	r2, r3
   1b7aa:	2301      	movs	r3, #1
   1b7ac:	4053      	eors	r3, r2
   1b7ae:	b2db      	uxtb	r3, r3
   1b7b0:	2b00      	cmp	r3, #0
   1b7b2:	d003      	beq.n	1b7bc <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1b7b4:	4b0a      	ldr	r3, [pc, #40]	; (1b7e0 <sd_mmc_init_read_blocks+0xd0>)
   1b7b6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1b7b8:	2305      	movs	r3, #5
   1b7ba:	e008      	b.n	1b7ce <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1b7bc:	4b0d      	ldr	r3, [pc, #52]	; (1b7f4 <sd_mmc_init_read_blocks+0xe4>)
   1b7be:	1d3a      	adds	r2, r7, #4
   1b7c0:	8812      	ldrh	r2, [r2, #0]
   1b7c2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1b7c4:	4b0c      	ldr	r3, [pc, #48]	; (1b7f8 <sd_mmc_init_read_blocks+0xe8>)
   1b7c6:	1d3a      	adds	r2, r7, #4
   1b7c8:	8812      	ldrh	r2, [r2, #0]
   1b7ca:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1b7cc:	2300      	movs	r3, #0
}
   1b7ce:	0018      	movs	r0, r3
   1b7d0:	46bd      	mov	sp, r7
   1b7d2:	b007      	add	sp, #28
   1b7d4:	bd90      	pop	{r4, r7, pc}
   1b7d6:	46c0      	nop			; (mov r8, r8)
   1b7d8:	0001b1f1 	.word	0x0001b1f1
   1b7dc:	0001b08d 	.word	0x0001b08d
   1b7e0:	0001b2ed 	.word	0x0001b2ed
   1b7e4:	00101112 	.word	0x00101112
   1b7e8:	00081111 	.word	0x00081111
   1b7ec:	20003cc0 	.word	0x20003cc0
   1b7f0:	0001c56d 	.word	0x0001c56d
   1b7f4:	20003cc6 	.word	0x20003cc6
   1b7f8:	20003cc4 	.word	0x20003cc4

0001b7fc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1b7fc:	b580      	push	{r7, lr}
   1b7fe:	b082      	sub	sp, #8
   1b800:	af00      	add	r7, sp, #0
   1b802:	6078      	str	r0, [r7, #4]
   1b804:	000a      	movs	r2, r1
   1b806:	1cbb      	adds	r3, r7, #2
   1b808:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1b80a:	1cbb      	adds	r3, r7, #2
   1b80c:	881a      	ldrh	r2, [r3, #0]
   1b80e:	687b      	ldr	r3, [r7, #4]
   1b810:	0011      	movs	r1, r2
   1b812:	0018      	movs	r0, r3
   1b814:	4b0d      	ldr	r3, [pc, #52]	; (1b84c <sd_mmc_start_read_blocks+0x50>)
   1b816:	4798      	blx	r3
   1b818:	0003      	movs	r3, r0
   1b81a:	001a      	movs	r2, r3
   1b81c:	2301      	movs	r3, #1
   1b81e:	4053      	eors	r3, r2
   1b820:	b2db      	uxtb	r3, r3
   1b822:	2b00      	cmp	r3, #0
   1b824:	d004      	beq.n	1b830 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1b826:	4b0a      	ldr	r3, [pc, #40]	; (1b850 <sd_mmc_start_read_blocks+0x54>)
   1b828:	2200      	movs	r2, #0
   1b82a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1b82c:	2305      	movs	r3, #5
   1b82e:	e008      	b.n	1b842 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1b830:	4b07      	ldr	r3, [pc, #28]	; (1b850 <sd_mmc_start_read_blocks+0x54>)
   1b832:	881a      	ldrh	r2, [r3, #0]
   1b834:	1cbb      	adds	r3, r7, #2
   1b836:	881b      	ldrh	r3, [r3, #0]
   1b838:	1ad3      	subs	r3, r2, r3
   1b83a:	b29a      	uxth	r2, r3
   1b83c:	4b04      	ldr	r3, [pc, #16]	; (1b850 <sd_mmc_start_read_blocks+0x54>)
   1b83e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1b840:	2300      	movs	r3, #0
}
   1b842:	0018      	movs	r0, r3
   1b844:	46bd      	mov	sp, r7
   1b846:	b002      	add	sp, #8
   1b848:	bd80      	pop	{r7, pc}
   1b84a:	46c0      	nop			; (mov r8, r8)
   1b84c:	0001c83d 	.word	0x0001c83d
   1b850:	20003cc6 	.word	0x20003cc6

0001b854 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1b854:	b580      	push	{r7, lr}
   1b856:	b082      	sub	sp, #8
   1b858:	af00      	add	r7, sp, #0
   1b85a:	0002      	movs	r2, r0
   1b85c:	1dfb      	adds	r3, r7, #7
   1b85e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1b860:	4b1c      	ldr	r3, [pc, #112]	; (1b8d4 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1b862:	4798      	blx	r3
   1b864:	0003      	movs	r3, r0
   1b866:	001a      	movs	r2, r3
   1b868:	2301      	movs	r3, #1
   1b86a:	4053      	eors	r3, r2
   1b86c:	b2db      	uxtb	r3, r3
   1b86e:	2b00      	cmp	r3, #0
   1b870:	d001      	beq.n	1b876 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1b872:	2305      	movs	r3, #5
   1b874:	e029      	b.n	1b8ca <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1b876:	1dfb      	adds	r3, r7, #7
   1b878:	781b      	ldrb	r3, [r3, #0]
   1b87a:	2b00      	cmp	r3, #0
   1b87c:	d003      	beq.n	1b886 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1b87e:	4b16      	ldr	r3, [pc, #88]	; (1b8d8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1b880:	2200      	movs	r2, #0
   1b882:	801a      	strh	r2, [r3, #0]
   1b884:	e005      	b.n	1b892 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1b886:	4b14      	ldr	r3, [pc, #80]	; (1b8d8 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1b888:	881b      	ldrh	r3, [r3, #0]
   1b88a:	2b00      	cmp	r3, #0
   1b88c:	d001      	beq.n	1b892 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1b88e:	2300      	movs	r3, #0
   1b890:	e01b      	b.n	1b8ca <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1b892:	4b12      	ldr	r3, [pc, #72]	; (1b8dc <sd_mmc_wait_end_of_read_blocks+0x88>)
   1b894:	881b      	ldrh	r3, [r3, #0]
   1b896:	2b01      	cmp	r3, #1
   1b898:	d103      	bne.n	1b8a2 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1b89a:	4b11      	ldr	r3, [pc, #68]	; (1b8e0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1b89c:	4798      	blx	r3
		return SD_MMC_OK;
   1b89e:	2300      	movs	r3, #0
   1b8a0:	e013      	b.n	1b8ca <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1b8a2:	4b10      	ldr	r3, [pc, #64]	; (1b8e4 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1b8a4:	2100      	movs	r1, #0
   1b8a6:	0018      	movs	r0, r3
   1b8a8:	4b0f      	ldr	r3, [pc, #60]	; (1b8e8 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1b8aa:	4798      	blx	r3
   1b8ac:	0003      	movs	r3, r0
   1b8ae:	001a      	movs	r2, r3
   1b8b0:	2301      	movs	r3, #1
   1b8b2:	4053      	eors	r3, r2
   1b8b4:	b2db      	uxtb	r3, r3
   1b8b6:	2b00      	cmp	r3, #0
   1b8b8:	d004      	beq.n	1b8c4 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1b8ba:	4b0a      	ldr	r3, [pc, #40]	; (1b8e4 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1b8bc:	2100      	movs	r1, #0
   1b8be:	0018      	movs	r0, r3
   1b8c0:	4b09      	ldr	r3, [pc, #36]	; (1b8e8 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1b8c2:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1b8c4:	4b06      	ldr	r3, [pc, #24]	; (1b8e0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1b8c6:	4798      	blx	r3
	return SD_MMC_OK;
   1b8c8:	2300      	movs	r3, #0
}
   1b8ca:	0018      	movs	r0, r3
   1b8cc:	46bd      	mov	sp, r7
   1b8ce:	b002      	add	sp, #8
   1b8d0:	bd80      	pop	{r7, pc}
   1b8d2:	46c0      	nop			; (mov r8, r8)
   1b8d4:	0001c8e1 	.word	0x0001c8e1
   1b8d8:	20003cc6 	.word	0x20003cc6
   1b8dc:	20003cc4 	.word	0x20003cc4
   1b8e0:	0001b2ed 	.word	0x0001b2ed
   1b8e4:	0000310c 	.word	0x0000310c
   1b8e8:	0001c545 	.word	0x0001c545

0001b8ec <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1b8ec:	b590      	push	{r4, r7, lr}
   1b8ee:	b089      	sub	sp, #36	; 0x24
   1b8f0:	af02      	add	r7, sp, #8
   1b8f2:	6039      	str	r1, [r7, #0]
   1b8f4:	0011      	movs	r1, r2
   1b8f6:	1dfb      	adds	r3, r7, #7
   1b8f8:	1c02      	adds	r2, r0, #0
   1b8fa:	701a      	strb	r2, [r3, #0]
   1b8fc:	1d3b      	adds	r3, r7, #4
   1b8fe:	1c0a      	adds	r2, r1, #0
   1b900:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1b902:	230f      	movs	r3, #15
   1b904:	18fc      	adds	r4, r7, r3
   1b906:	1dfb      	adds	r3, r7, #7
   1b908:	781b      	ldrb	r3, [r3, #0]
   1b90a:	0018      	movs	r0, r3
   1b90c:	4b28      	ldr	r3, [pc, #160]	; (1b9b0 <sd_mmc_init_write_blocks+0xc4>)
   1b90e:	4798      	blx	r3
   1b910:	0003      	movs	r3, r0
   1b912:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1b914:	230f      	movs	r3, #15
   1b916:	18fb      	adds	r3, r7, r3
   1b918:	781b      	ldrb	r3, [r3, #0]
   1b91a:	2b00      	cmp	r3, #0
   1b91c:	d003      	beq.n	1b926 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1b91e:	230f      	movs	r3, #15
   1b920:	18fb      	adds	r3, r7, r3
   1b922:	781b      	ldrb	r3, [r3, #0]
   1b924:	e03f      	b.n	1b9a6 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1b926:	1dfb      	adds	r3, r7, #7
   1b928:	781b      	ldrb	r3, [r3, #0]
   1b92a:	0018      	movs	r0, r3
   1b92c:	4b21      	ldr	r3, [pc, #132]	; (1b9b4 <sd_mmc_init_write_blocks+0xc8>)
   1b92e:	4798      	blx	r3
   1b930:	1e03      	subs	r3, r0, #0
   1b932:	d003      	beq.n	1b93c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1b934:	4b20      	ldr	r3, [pc, #128]	; (1b9b8 <sd_mmc_init_write_blocks+0xcc>)
   1b936:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1b938:	2307      	movs	r3, #7
   1b93a:	e034      	b.n	1b9a6 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1b93c:	1d3b      	adds	r3, r7, #4
   1b93e:	881b      	ldrh	r3, [r3, #0]
   1b940:	2b01      	cmp	r3, #1
   1b942:	d902      	bls.n	1b94a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1b944:	4b1d      	ldr	r3, [pc, #116]	; (1b9bc <sd_mmc_init_write_blocks+0xd0>)
   1b946:	617b      	str	r3, [r7, #20]
   1b948:	e001      	b.n	1b94e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1b94a:	4b1d      	ldr	r3, [pc, #116]	; (1b9c0 <sd_mmc_init_write_blocks+0xd4>)
   1b94c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1b94e:	4b1d      	ldr	r3, [pc, #116]	; (1b9c4 <sd_mmc_init_write_blocks+0xd8>)
   1b950:	681b      	ldr	r3, [r3, #0]
   1b952:	7adb      	ldrb	r3, [r3, #11]
   1b954:	001a      	movs	r2, r3
   1b956:	2308      	movs	r3, #8
   1b958:	4013      	ands	r3, r2
   1b95a:	d002      	beq.n	1b962 <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1b95c:	683b      	ldr	r3, [r7, #0]
   1b95e:	613b      	str	r3, [r7, #16]
   1b960:	e002      	b.n	1b968 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1b962:	683b      	ldr	r3, [r7, #0]
   1b964:	025b      	lsls	r3, r3, #9
   1b966:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1b968:	1d3b      	adds	r3, r7, #4
   1b96a:	881c      	ldrh	r4, [r3, #0]
   1b96c:	2380      	movs	r3, #128	; 0x80
   1b96e:	009a      	lsls	r2, r3, #2
   1b970:	6939      	ldr	r1, [r7, #16]
   1b972:	6978      	ldr	r0, [r7, #20]
   1b974:	2301      	movs	r3, #1
   1b976:	9300      	str	r3, [sp, #0]
   1b978:	0023      	movs	r3, r4
   1b97a:	4c13      	ldr	r4, [pc, #76]	; (1b9c8 <sd_mmc_init_write_blocks+0xdc>)
   1b97c:	47a0      	blx	r4
   1b97e:	0003      	movs	r3, r0
   1b980:	001a      	movs	r2, r3
   1b982:	2301      	movs	r3, #1
   1b984:	4053      	eors	r3, r2
   1b986:	b2db      	uxtb	r3, r3
   1b988:	2b00      	cmp	r3, #0
   1b98a:	d003      	beq.n	1b994 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1b98c:	4b0a      	ldr	r3, [pc, #40]	; (1b9b8 <sd_mmc_init_write_blocks+0xcc>)
   1b98e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1b990:	2305      	movs	r3, #5
   1b992:	e008      	b.n	1b9a6 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1b994:	4b0d      	ldr	r3, [pc, #52]	; (1b9cc <sd_mmc_init_write_blocks+0xe0>)
   1b996:	1d3a      	adds	r2, r7, #4
   1b998:	8812      	ldrh	r2, [r2, #0]
   1b99a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1b99c:	4b0c      	ldr	r3, [pc, #48]	; (1b9d0 <sd_mmc_init_write_blocks+0xe4>)
   1b99e:	1d3a      	adds	r2, r7, #4
   1b9a0:	8812      	ldrh	r2, [r2, #0]
   1b9a2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1b9a4:	2300      	movs	r3, #0
}
   1b9a6:	0018      	movs	r0, r3
   1b9a8:	46bd      	mov	sp, r7
   1b9aa:	b007      	add	sp, #28
   1b9ac:	bd90      	pop	{r4, r7, pc}
   1b9ae:	46c0      	nop			; (mov r8, r8)
   1b9b0:	0001b1f1 	.word	0x0001b1f1
   1b9b4:	0001b6f9 	.word	0x0001b6f9
   1b9b8:	0001b2ed 	.word	0x0001b2ed
   1b9bc:	00109119 	.word	0x00109119
   1b9c0:	00089118 	.word	0x00089118
   1b9c4:	20003cc0 	.word	0x20003cc0
   1b9c8:	0001c56d 	.word	0x0001c56d
   1b9cc:	20003cc6 	.word	0x20003cc6
   1b9d0:	20003cc4 	.word	0x20003cc4

0001b9d4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1b9d4:	b580      	push	{r7, lr}
   1b9d6:	b082      	sub	sp, #8
   1b9d8:	af00      	add	r7, sp, #0
   1b9da:	6078      	str	r0, [r7, #4]
   1b9dc:	000a      	movs	r2, r1
   1b9de:	1cbb      	adds	r3, r7, #2
   1b9e0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1b9e2:	1cbb      	adds	r3, r7, #2
   1b9e4:	881a      	ldrh	r2, [r3, #0]
   1b9e6:	687b      	ldr	r3, [r7, #4]
   1b9e8:	0011      	movs	r1, r2
   1b9ea:	0018      	movs	r0, r3
   1b9ec:	4b0d      	ldr	r3, [pc, #52]	; (1ba24 <sd_mmc_start_write_blocks+0x50>)
   1b9ee:	4798      	blx	r3
   1b9f0:	0003      	movs	r3, r0
   1b9f2:	001a      	movs	r2, r3
   1b9f4:	2301      	movs	r3, #1
   1b9f6:	4053      	eors	r3, r2
   1b9f8:	b2db      	uxtb	r3, r3
   1b9fa:	2b00      	cmp	r3, #0
   1b9fc:	d004      	beq.n	1ba08 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1b9fe:	4b0a      	ldr	r3, [pc, #40]	; (1ba28 <sd_mmc_start_write_blocks+0x54>)
   1ba00:	2200      	movs	r2, #0
   1ba02:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ba04:	2305      	movs	r3, #5
   1ba06:	e008      	b.n	1ba1a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ba08:	4b07      	ldr	r3, [pc, #28]	; (1ba28 <sd_mmc_start_write_blocks+0x54>)
   1ba0a:	881a      	ldrh	r2, [r3, #0]
   1ba0c:	1cbb      	adds	r3, r7, #2
   1ba0e:	881b      	ldrh	r3, [r3, #0]
   1ba10:	1ad3      	subs	r3, r2, r3
   1ba12:	b29a      	uxth	r2, r3
   1ba14:	4b04      	ldr	r3, [pc, #16]	; (1ba28 <sd_mmc_start_write_blocks+0x54>)
   1ba16:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ba18:	2300      	movs	r3, #0
}
   1ba1a:	0018      	movs	r0, r3
   1ba1c:	46bd      	mov	sp, r7
   1ba1e:	b002      	add	sp, #8
   1ba20:	bd80      	pop	{r7, pc}
   1ba22:	46c0      	nop			; (mov r8, r8)
   1ba24:	0001c8ed 	.word	0x0001c8ed
   1ba28:	20003cc6 	.word	0x20003cc6

0001ba2c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ba2c:	b580      	push	{r7, lr}
   1ba2e:	b082      	sub	sp, #8
   1ba30:	af00      	add	r7, sp, #0
   1ba32:	0002      	movs	r2, r0
   1ba34:	1dfb      	adds	r3, r7, #7
   1ba36:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1ba38:	4b13      	ldr	r3, [pc, #76]	; (1ba88 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1ba3a:	4798      	blx	r3
   1ba3c:	0003      	movs	r3, r0
   1ba3e:	001a      	movs	r2, r3
   1ba40:	2301      	movs	r3, #1
   1ba42:	4053      	eors	r3, r2
   1ba44:	b2db      	uxtb	r3, r3
   1ba46:	2b00      	cmp	r3, #0
   1ba48:	d001      	beq.n	1ba4e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ba4a:	2305      	movs	r3, #5
   1ba4c:	e018      	b.n	1ba80 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1ba4e:	1dfb      	adds	r3, r7, #7
   1ba50:	781b      	ldrb	r3, [r3, #0]
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	d003      	beq.n	1ba5e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ba56:	4b0d      	ldr	r3, [pc, #52]	; (1ba8c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ba58:	2200      	movs	r2, #0
   1ba5a:	801a      	strh	r2, [r3, #0]
   1ba5c:	e005      	b.n	1ba6a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ba5e:	4b0b      	ldr	r3, [pc, #44]	; (1ba8c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ba60:	881b      	ldrh	r3, [r3, #0]
   1ba62:	2b00      	cmp	r3, #0
   1ba64:	d001      	beq.n	1ba6a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1ba66:	2300      	movs	r3, #0
   1ba68:	e00a      	b.n	1ba80 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ba6a:	4b09      	ldr	r3, [pc, #36]	; (1ba90 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1ba6c:	881b      	ldrh	r3, [r3, #0]
   1ba6e:	2b01      	cmp	r3, #1
   1ba70:	d103      	bne.n	1ba7a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ba72:	4b08      	ldr	r3, [pc, #32]	; (1ba94 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ba74:	4798      	blx	r3
		return SD_MMC_OK;
   1ba76:	2300      	movs	r3, #0
   1ba78:	e002      	b.n	1ba80 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1ba7a:	4b06      	ldr	r3, [pc, #24]	; (1ba94 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ba7c:	4798      	blx	r3
	return SD_MMC_OK;
   1ba7e:	2300      	movs	r3, #0
}
   1ba80:	0018      	movs	r0, r3
   1ba82:	46bd      	mov	sp, r7
   1ba84:	b002      	add	sp, #8
   1ba86:	bd80      	pop	{r7, pc}
   1ba88:	0001c9ad 	.word	0x0001c9ad
   1ba8c:	20003cc6 	.word	0x20003cc6
   1ba90:	20003cc4 	.word	0x20003cc4
   1ba94:	0001b2ed 	.word	0x0001b2ed

0001ba98 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1ba98:	b580      	push	{r7, lr}
   1ba9a:	b082      	sub	sp, #8
   1ba9c:	af00      	add	r7, sp, #0
   1ba9e:	0002      	movs	r2, r0
   1baa0:	1dfb      	adds	r3, r7, #7
   1baa2:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1baa4:	1dfb      	adds	r3, r7, #7
   1baa6:	781b      	ldrb	r3, [r3, #0]
   1baa8:	0018      	movs	r0, r3
   1baaa:	4b16      	ldr	r3, [pc, #88]	; (1bb04 <sd_mmc_test_unit_ready+0x6c>)
   1baac:	4798      	blx	r3
   1baae:	0003      	movs	r3, r0
   1bab0:	2b01      	cmp	r3, #1
   1bab2:	d019      	beq.n	1bae8 <sd_mmc_test_unit_ready+0x50>
   1bab4:	2b02      	cmp	r3, #2
   1bab6:	d019      	beq.n	1baec <sd_mmc_test_unit_ready+0x54>
   1bab8:	2b00      	cmp	r3, #0
   1baba:	d11e      	bne.n	1bafa <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1babc:	1dfb      	adds	r3, r7, #7
   1babe:	781b      	ldrb	r3, [r3, #0]
   1bac0:	4a11      	ldr	r2, [pc, #68]	; (1bb08 <sd_mmc_test_unit_ready+0x70>)
   1bac2:	5cd3      	ldrb	r3, [r2, r3]
   1bac4:	2b00      	cmp	r3, #0
   1bac6:	d001      	beq.n	1bacc <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1bac8:	2302      	movs	r3, #2
   1baca:	e017      	b.n	1bafc <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1bacc:	1dfb      	adds	r3, r7, #7
   1bace:	781b      	ldrb	r3, [r3, #0]
   1bad0:	0018      	movs	r0, r3
   1bad2:	4b0e      	ldr	r3, [pc, #56]	; (1bb0c <sd_mmc_test_unit_ready+0x74>)
   1bad4:	4798      	blx	r3
   1bad6:	0003      	movs	r3, r0
   1bad8:	001a      	movs	r2, r3
   1bada:	2303      	movs	r3, #3
   1badc:	4013      	ands	r3, r2
   1bade:	d001      	beq.n	1bae4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1bae0:	2300      	movs	r3, #0
   1bae2:	e00b      	b.n	1bafc <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1bae4:	2302      	movs	r3, #2
   1bae6:	e009      	b.n	1bafc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1bae8:	2303      	movs	r3, #3
   1baea:	e007      	b.n	1bafc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1baec:	1dfb      	adds	r3, r7, #7
   1baee:	781b      	ldrb	r3, [r3, #0]
   1baf0:	4a05      	ldr	r2, [pc, #20]	; (1bb08 <sd_mmc_test_unit_ready+0x70>)
   1baf2:	2100      	movs	r1, #0
   1baf4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1baf6:	2302      	movs	r3, #2
   1baf8:	e000      	b.n	1bafc <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1bafa:	2301      	movs	r3, #1
	}
}
   1bafc:	0018      	movs	r0, r3
   1bafe:	46bd      	mov	sp, r7
   1bb00:	b002      	add	sp, #8
   1bb02:	bd80      	pop	{r7, pc}
   1bb04:	0001b60d 	.word	0x0001b60d
   1bb08:	20003cc8 	.word	0x20003cc8
   1bb0c:	0001b681 	.word	0x0001b681

0001bb10 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1bb10:	b580      	push	{r7, lr}
   1bb12:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1bb14:	2000      	movs	r0, #0
   1bb16:	4b03      	ldr	r3, [pc, #12]	; (1bb24 <sd_mmc_test_unit_ready_0+0x14>)
   1bb18:	4798      	blx	r3
   1bb1a:	0003      	movs	r3, r0
}
   1bb1c:	0018      	movs	r0, r3
   1bb1e:	46bd      	mov	sp, r7
   1bb20:	bd80      	pop	{r7, pc}
   1bb22:	46c0      	nop			; (mov r8, r8)
   1bb24:	0001ba99 	.word	0x0001ba99

0001bb28 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1bb28:	b580      	push	{r7, lr}
   1bb2a:	b082      	sub	sp, #8
   1bb2c:	af00      	add	r7, sp, #0
   1bb2e:	0002      	movs	r2, r0
   1bb30:	6039      	str	r1, [r7, #0]
   1bb32:	1dfb      	adds	r3, r7, #7
   1bb34:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1bb36:	1dfb      	adds	r3, r7, #7
   1bb38:	781b      	ldrb	r3, [r3, #0]
   1bb3a:	0018      	movs	r0, r3
   1bb3c:	4b08      	ldr	r3, [pc, #32]	; (1bb60 <sd_mmc_read_capacity+0x38>)
   1bb3e:	4798      	blx	r3
   1bb40:	0003      	movs	r3, r0
   1bb42:	005b      	lsls	r3, r3, #1
   1bb44:	1e5a      	subs	r2, r3, #1
   1bb46:	683b      	ldr	r3, [r7, #0]
   1bb48:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1bb4a:	1dfb      	adds	r3, r7, #7
   1bb4c:	781b      	ldrb	r3, [r3, #0]
   1bb4e:	0018      	movs	r0, r3
   1bb50:	4b04      	ldr	r3, [pc, #16]	; (1bb64 <sd_mmc_read_capacity+0x3c>)
   1bb52:	4798      	blx	r3
   1bb54:	0003      	movs	r3, r0
}
   1bb56:	0018      	movs	r0, r3
   1bb58:	46bd      	mov	sp, r7
   1bb5a:	b002      	add	sp, #8
   1bb5c:	bd80      	pop	{r7, pc}
   1bb5e:	46c0      	nop			; (mov r8, r8)
   1bb60:	0001b6bd 	.word	0x0001b6bd
   1bb64:	0001ba99 	.word	0x0001ba99

0001bb68 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1bb68:	b580      	push	{r7, lr}
   1bb6a:	b082      	sub	sp, #8
   1bb6c:	af00      	add	r7, sp, #0
   1bb6e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1bb70:	687b      	ldr	r3, [r7, #4]
   1bb72:	0019      	movs	r1, r3
   1bb74:	2000      	movs	r0, #0
   1bb76:	4b03      	ldr	r3, [pc, #12]	; (1bb84 <sd_mmc_read_capacity_0+0x1c>)
   1bb78:	4798      	blx	r3
   1bb7a:	0003      	movs	r3, r0
}
   1bb7c:	0018      	movs	r0, r3
   1bb7e:	46bd      	mov	sp, r7
   1bb80:	b002      	add	sp, #8
   1bb82:	bd80      	pop	{r7, pc}
   1bb84:	0001bb29 	.word	0x0001bb29

0001bb88 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1bb88:	b580      	push	{r7, lr}
   1bb8a:	b082      	sub	sp, #8
   1bb8c:	af00      	add	r7, sp, #0
   1bb8e:	0002      	movs	r2, r0
   1bb90:	1dfb      	adds	r3, r7, #7
   1bb92:	701a      	strb	r2, [r3, #0]
   1bb94:	1dbb      	adds	r3, r7, #6
   1bb96:	1c0a      	adds	r2, r1, #0
   1bb98:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1bb9a:	1dfb      	adds	r3, r7, #7
   1bb9c:	781b      	ldrb	r3, [r3, #0]
   1bb9e:	4a04      	ldr	r2, [pc, #16]	; (1bbb0 <sd_mmc_unload+0x28>)
   1bba0:	1db9      	adds	r1, r7, #6
   1bba2:	7809      	ldrb	r1, [r1, #0]
   1bba4:	54d1      	strb	r1, [r2, r3]
	return true;
   1bba6:	2301      	movs	r3, #1
}
   1bba8:	0018      	movs	r0, r3
   1bbaa:	46bd      	mov	sp, r7
   1bbac:	b002      	add	sp, #8
   1bbae:	bd80      	pop	{r7, pc}
   1bbb0:	20003cc8 	.word	0x20003cc8

0001bbb4 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1bbb4:	b580      	push	{r7, lr}
   1bbb6:	b082      	sub	sp, #8
   1bbb8:	af00      	add	r7, sp, #0
   1bbba:	0002      	movs	r2, r0
   1bbbc:	1dfb      	adds	r3, r7, #7
   1bbbe:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1bbc0:	1dfb      	adds	r3, r7, #7
   1bbc2:	781b      	ldrb	r3, [r3, #0]
   1bbc4:	0019      	movs	r1, r3
   1bbc6:	2000      	movs	r0, #0
   1bbc8:	4b03      	ldr	r3, [pc, #12]	; (1bbd8 <sd_mmc_unload_0+0x24>)
   1bbca:	4798      	blx	r3
   1bbcc:	0003      	movs	r3, r0
}
   1bbce:	0018      	movs	r0, r3
   1bbd0:	46bd      	mov	sp, r7
   1bbd2:	b002      	add	sp, #8
   1bbd4:	bd80      	pop	{r7, pc}
   1bbd6:	46c0      	nop			; (mov r8, r8)
   1bbd8:	0001bb89 	.word	0x0001bb89

0001bbdc <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1bbdc:	b580      	push	{r7, lr}
   1bbde:	b082      	sub	sp, #8
   1bbe0:	af00      	add	r7, sp, #0
   1bbe2:	0002      	movs	r2, r0
   1bbe4:	1dfb      	adds	r3, r7, #7
   1bbe6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1bbe8:	1dfb      	adds	r3, r7, #7
   1bbea:	781b      	ldrb	r3, [r3, #0]
   1bbec:	0018      	movs	r0, r3
   1bbee:	4b03      	ldr	r3, [pc, #12]	; (1bbfc <sd_mmc_wr_protect+0x20>)
   1bbf0:	4798      	blx	r3
   1bbf2:	0003      	movs	r3, r0
}
   1bbf4:	0018      	movs	r0, r3
   1bbf6:	46bd      	mov	sp, r7
   1bbf8:	b002      	add	sp, #8
   1bbfa:	bd80      	pop	{r7, pc}
   1bbfc:	0001b6f9 	.word	0x0001b6f9

0001bc00 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1bc00:	b580      	push	{r7, lr}
   1bc02:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1bc04:	2000      	movs	r0, #0
   1bc06:	4b03      	ldr	r3, [pc, #12]	; (1bc14 <sd_mmc_wr_protect_0+0x14>)
   1bc08:	4798      	blx	r3
   1bc0a:	0003      	movs	r3, r0
}
   1bc0c:	0018      	movs	r0, r3
   1bc0e:	46bd      	mov	sp, r7
   1bc10:	bd80      	pop	{r7, pc}
   1bc12:	46c0      	nop			; (mov r8, r8)
   1bc14:	0001bbdd 	.word	0x0001bbdd

0001bc18 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1bc18:	b580      	push	{r7, lr}
   1bc1a:	b082      	sub	sp, #8
   1bc1c:	af00      	add	r7, sp, #0
   1bc1e:	0002      	movs	r2, r0
   1bc20:	1dfb      	adds	r3, r7, #7
   1bc22:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1bc24:	2301      	movs	r3, #1
}
   1bc26:	0018      	movs	r0, r3
   1bc28:	46bd      	mov	sp, r7
   1bc2a:	b002      	add	sp, #8
   1bc2c:	bd80      	pop	{r7, pc}
	...

0001bc30 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1bc30:	b580      	push	{r7, lr}
   1bc32:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1bc34:	2000      	movs	r0, #0
   1bc36:	4b03      	ldr	r3, [pc, #12]	; (1bc44 <sd_mmc_removal_0+0x14>)
   1bc38:	4798      	blx	r3
   1bc3a:	0003      	movs	r3, r0
}
   1bc3c:	0018      	movs	r0, r3
   1bc3e:	46bd      	mov	sp, r7
   1bc40:	bd80      	pop	{r7, pc}
   1bc42:	46c0      	nop			; (mov r8, r8)
   1bc44:	0001bc19 	.word	0x0001bc19

0001bc48 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1bc48:	b580      	push	{r7, lr}
   1bc4a:	b084      	sub	sp, #16
   1bc4c:	af00      	add	r7, sp, #0
   1bc4e:	60b9      	str	r1, [r7, #8]
   1bc50:	607a      	str	r2, [r7, #4]
   1bc52:	230f      	movs	r3, #15
   1bc54:	18fb      	adds	r3, r7, r3
   1bc56:	1c02      	adds	r2, r0, #0
   1bc58:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1bc5a:	68b9      	ldr	r1, [r7, #8]
   1bc5c:	230f      	movs	r3, #15
   1bc5e:	18fb      	adds	r3, r7, r3
   1bc60:	781b      	ldrb	r3, [r3, #0]
   1bc62:	2201      	movs	r2, #1
   1bc64:	0018      	movs	r0, r3
   1bc66:	4b10      	ldr	r3, [pc, #64]	; (1bca8 <sd_mmc_mem_2_ram+0x60>)
   1bc68:	4798      	blx	r3
   1bc6a:	1e03      	subs	r3, r0, #0
   1bc6c:	d005      	beq.n	1bc7a <sd_mmc_mem_2_ram+0x32>
   1bc6e:	2b02      	cmp	r3, #2
   1bc70:	d101      	bne.n	1bc76 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1bc72:	2302      	movs	r3, #2
   1bc74:	e013      	b.n	1bc9e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1bc76:	2301      	movs	r3, #1
   1bc78:	e011      	b.n	1bc9e <sd_mmc_mem_2_ram+0x56>
		break;
   1bc7a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1bc7c:	687b      	ldr	r3, [r7, #4]
   1bc7e:	2101      	movs	r1, #1
   1bc80:	0018      	movs	r0, r3
   1bc82:	4b0a      	ldr	r3, [pc, #40]	; (1bcac <sd_mmc_mem_2_ram+0x64>)
   1bc84:	4798      	blx	r3
   1bc86:	1e03      	subs	r3, r0, #0
   1bc88:	d001      	beq.n	1bc8e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1bc8a:	2301      	movs	r3, #1
   1bc8c:	e007      	b.n	1bc9e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1bc8e:	2000      	movs	r0, #0
   1bc90:	4b07      	ldr	r3, [pc, #28]	; (1bcb0 <sd_mmc_mem_2_ram+0x68>)
   1bc92:	4798      	blx	r3
   1bc94:	1e03      	subs	r3, r0, #0
   1bc96:	d001      	beq.n	1bc9c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1bc98:	2301      	movs	r3, #1
   1bc9a:	e000      	b.n	1bc9e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1bc9c:	2300      	movs	r3, #0
}
   1bc9e:	0018      	movs	r0, r3
   1bca0:	46bd      	mov	sp, r7
   1bca2:	b004      	add	sp, #16
   1bca4:	bd80      	pop	{r7, pc}
   1bca6:	46c0      	nop			; (mov r8, r8)
   1bca8:	0001b711 	.word	0x0001b711
   1bcac:	0001b7fd 	.word	0x0001b7fd
   1bcb0:	0001b855 	.word	0x0001b855

0001bcb4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1bcb4:	b580      	push	{r7, lr}
   1bcb6:	b082      	sub	sp, #8
   1bcb8:	af00      	add	r7, sp, #0
   1bcba:	6078      	str	r0, [r7, #4]
   1bcbc:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1bcbe:	683a      	ldr	r2, [r7, #0]
   1bcc0:	687b      	ldr	r3, [r7, #4]
   1bcc2:	0019      	movs	r1, r3
   1bcc4:	2000      	movs	r0, #0
   1bcc6:	4b03      	ldr	r3, [pc, #12]	; (1bcd4 <sd_mmc_mem_2_ram_0+0x20>)
   1bcc8:	4798      	blx	r3
   1bcca:	0003      	movs	r3, r0
}
   1bccc:	0018      	movs	r0, r3
   1bcce:	46bd      	mov	sp, r7
   1bcd0:	b002      	add	sp, #8
   1bcd2:	bd80      	pop	{r7, pc}
   1bcd4:	0001bc49 	.word	0x0001bc49

0001bcd8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1bcd8:	b580      	push	{r7, lr}
   1bcda:	b084      	sub	sp, #16
   1bcdc:	af00      	add	r7, sp, #0
   1bcde:	60b9      	str	r1, [r7, #8]
   1bce0:	607a      	str	r2, [r7, #4]
   1bce2:	230f      	movs	r3, #15
   1bce4:	18fb      	adds	r3, r7, r3
   1bce6:	1c02      	adds	r2, r0, #0
   1bce8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1bcea:	68b9      	ldr	r1, [r7, #8]
   1bcec:	230f      	movs	r3, #15
   1bcee:	18fb      	adds	r3, r7, r3
   1bcf0:	781b      	ldrb	r3, [r3, #0]
   1bcf2:	2201      	movs	r2, #1
   1bcf4:	0018      	movs	r0, r3
   1bcf6:	4b10      	ldr	r3, [pc, #64]	; (1bd38 <sd_mmc_ram_2_mem+0x60>)
   1bcf8:	4798      	blx	r3
   1bcfa:	1e03      	subs	r3, r0, #0
   1bcfc:	d005      	beq.n	1bd0a <sd_mmc_ram_2_mem+0x32>
   1bcfe:	2b02      	cmp	r3, #2
   1bd00:	d101      	bne.n	1bd06 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1bd02:	2302      	movs	r3, #2
   1bd04:	e013      	b.n	1bd2e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1bd06:	2301      	movs	r3, #1
   1bd08:	e011      	b.n	1bd2e <sd_mmc_ram_2_mem+0x56>
		break;
   1bd0a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1bd0c:	687b      	ldr	r3, [r7, #4]
   1bd0e:	2101      	movs	r1, #1
   1bd10:	0018      	movs	r0, r3
   1bd12:	4b0a      	ldr	r3, [pc, #40]	; (1bd3c <sd_mmc_ram_2_mem+0x64>)
   1bd14:	4798      	blx	r3
   1bd16:	1e03      	subs	r3, r0, #0
   1bd18:	d001      	beq.n	1bd1e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1bd1a:	2301      	movs	r3, #1
   1bd1c:	e007      	b.n	1bd2e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1bd1e:	2000      	movs	r0, #0
   1bd20:	4b07      	ldr	r3, [pc, #28]	; (1bd40 <sd_mmc_ram_2_mem+0x68>)
   1bd22:	4798      	blx	r3
   1bd24:	1e03      	subs	r3, r0, #0
   1bd26:	d001      	beq.n	1bd2c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1bd28:	2301      	movs	r3, #1
   1bd2a:	e000      	b.n	1bd2e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1bd2c:	2300      	movs	r3, #0
}
   1bd2e:	0018      	movs	r0, r3
   1bd30:	46bd      	mov	sp, r7
   1bd32:	b004      	add	sp, #16
   1bd34:	bd80      	pop	{r7, pc}
   1bd36:	46c0      	nop			; (mov r8, r8)
   1bd38:	0001b8ed 	.word	0x0001b8ed
   1bd3c:	0001b9d5 	.word	0x0001b9d5
   1bd40:	0001ba2d 	.word	0x0001ba2d

0001bd44 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1bd44:	b580      	push	{r7, lr}
   1bd46:	b082      	sub	sp, #8
   1bd48:	af00      	add	r7, sp, #0
   1bd4a:	6078      	str	r0, [r7, #4]
   1bd4c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1bd4e:	683a      	ldr	r2, [r7, #0]
   1bd50:	687b      	ldr	r3, [r7, #4]
   1bd52:	0019      	movs	r1, r3
   1bd54:	2000      	movs	r0, #0
   1bd56:	4b03      	ldr	r3, [pc, #12]	; (1bd64 <sd_mmc_ram_2_mem_0+0x20>)
   1bd58:	4798      	blx	r3
   1bd5a:	0003      	movs	r3, r0
}
   1bd5c:	0018      	movs	r0, r3
   1bd5e:	46bd      	mov	sp, r7
   1bd60:	b002      	add	sp, #8
   1bd62:	bd80      	pop	{r7, pc}
   1bd64:	0001bcd9 	.word	0x0001bcd9

0001bd68 <system_pinmux_get_group_from_gpio_pin>:
{
   1bd68:	b580      	push	{r7, lr}
   1bd6a:	b084      	sub	sp, #16
   1bd6c:	af00      	add	r7, sp, #0
   1bd6e:	0002      	movs	r2, r0
   1bd70:	1dfb      	adds	r3, r7, #7
   1bd72:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1bd74:	230f      	movs	r3, #15
   1bd76:	18fb      	adds	r3, r7, r3
   1bd78:	1dfa      	adds	r2, r7, #7
   1bd7a:	7812      	ldrb	r2, [r2, #0]
   1bd7c:	09d2      	lsrs	r2, r2, #7
   1bd7e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1bd80:	230e      	movs	r3, #14
   1bd82:	18fb      	adds	r3, r7, r3
   1bd84:	1dfa      	adds	r2, r7, #7
   1bd86:	7812      	ldrb	r2, [r2, #0]
   1bd88:	0952      	lsrs	r2, r2, #5
   1bd8a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1bd8c:	4b0d      	ldr	r3, [pc, #52]	; (1bdc4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1bd8e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1bd90:	230f      	movs	r3, #15
   1bd92:	18fb      	adds	r3, r7, r3
   1bd94:	781b      	ldrb	r3, [r3, #0]
   1bd96:	2b00      	cmp	r3, #0
   1bd98:	d10f      	bne.n	1bdba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1bd9a:	230f      	movs	r3, #15
   1bd9c:	18fb      	adds	r3, r7, r3
   1bd9e:	781b      	ldrb	r3, [r3, #0]
   1bda0:	009b      	lsls	r3, r3, #2
   1bda2:	2210      	movs	r2, #16
   1bda4:	4694      	mov	ip, r2
   1bda6:	44bc      	add	ip, r7
   1bda8:	4463      	add	r3, ip
   1bdaa:	3b08      	subs	r3, #8
   1bdac:	681a      	ldr	r2, [r3, #0]
   1bdae:	230e      	movs	r3, #14
   1bdb0:	18fb      	adds	r3, r7, r3
   1bdb2:	781b      	ldrb	r3, [r3, #0]
   1bdb4:	01db      	lsls	r3, r3, #7
   1bdb6:	18d3      	adds	r3, r2, r3
   1bdb8:	e000      	b.n	1bdbc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1bdba:	2300      	movs	r3, #0
}
   1bdbc:	0018      	movs	r0, r3
   1bdbe:	46bd      	mov	sp, r7
   1bdc0:	b004      	add	sp, #16
   1bdc2:	bd80      	pop	{r7, pc}
   1bdc4:	41004400 	.word	0x41004400

0001bdc8 <system_interrupt_enable>:
{
   1bdc8:	b580      	push	{r7, lr}
   1bdca:	b082      	sub	sp, #8
   1bdcc:	af00      	add	r7, sp, #0
   1bdce:	0002      	movs	r2, r0
   1bdd0:	1dfb      	adds	r3, r7, #7
   1bdd2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1bdd4:	4b06      	ldr	r3, [pc, #24]	; (1bdf0 <system_interrupt_enable+0x28>)
   1bdd6:	1dfa      	adds	r2, r7, #7
   1bdd8:	7812      	ldrb	r2, [r2, #0]
   1bdda:	0011      	movs	r1, r2
   1bddc:	221f      	movs	r2, #31
   1bdde:	400a      	ands	r2, r1
   1bde0:	2101      	movs	r1, #1
   1bde2:	4091      	lsls	r1, r2
   1bde4:	000a      	movs	r2, r1
   1bde6:	601a      	str	r2, [r3, #0]
}
   1bde8:	46c0      	nop			; (mov r8, r8)
   1bdea:	46bd      	mov	sp, r7
   1bdec:	b002      	add	sp, #8
   1bdee:	bd80      	pop	{r7, pc}
   1bdf0:	e000e100 	.word	0xe000e100

0001bdf4 <port_get_group_from_gpio_pin>:
{
   1bdf4:	b580      	push	{r7, lr}
   1bdf6:	b082      	sub	sp, #8
   1bdf8:	af00      	add	r7, sp, #0
   1bdfa:	0002      	movs	r2, r0
   1bdfc:	1dfb      	adds	r3, r7, #7
   1bdfe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1be00:	1dfb      	adds	r3, r7, #7
   1be02:	781b      	ldrb	r3, [r3, #0]
   1be04:	0018      	movs	r0, r3
   1be06:	4b03      	ldr	r3, [pc, #12]	; (1be14 <port_get_group_from_gpio_pin+0x20>)
   1be08:	4798      	blx	r3
   1be0a:	0003      	movs	r3, r0
}
   1be0c:	0018      	movs	r0, r3
   1be0e:	46bd      	mov	sp, r7
   1be10:	b002      	add	sp, #8
   1be12:	bd80      	pop	{r7, pc}
   1be14:	0001bd69 	.word	0x0001bd69

0001be18 <port_get_config_defaults>:
{
   1be18:	b580      	push	{r7, lr}
   1be1a:	b082      	sub	sp, #8
   1be1c:	af00      	add	r7, sp, #0
   1be1e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1be20:	687b      	ldr	r3, [r7, #4]
   1be22:	2200      	movs	r2, #0
   1be24:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1be26:	687b      	ldr	r3, [r7, #4]
   1be28:	2201      	movs	r2, #1
   1be2a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1be2c:	687b      	ldr	r3, [r7, #4]
   1be2e:	2200      	movs	r2, #0
   1be30:	709a      	strb	r2, [r3, #2]
}
   1be32:	46c0      	nop			; (mov r8, r8)
   1be34:	46bd      	mov	sp, r7
   1be36:	b002      	add	sp, #8
   1be38:	bd80      	pop	{r7, pc}
	...

0001be3c <port_pin_set_output_level>:
{
   1be3c:	b580      	push	{r7, lr}
   1be3e:	b084      	sub	sp, #16
   1be40:	af00      	add	r7, sp, #0
   1be42:	0002      	movs	r2, r0
   1be44:	1dfb      	adds	r3, r7, #7
   1be46:	701a      	strb	r2, [r3, #0]
   1be48:	1dbb      	adds	r3, r7, #6
   1be4a:	1c0a      	adds	r2, r1, #0
   1be4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1be4e:	1dfb      	adds	r3, r7, #7
   1be50:	781b      	ldrb	r3, [r3, #0]
   1be52:	0018      	movs	r0, r3
   1be54:	4b0d      	ldr	r3, [pc, #52]	; (1be8c <port_pin_set_output_level+0x50>)
   1be56:	4798      	blx	r3
   1be58:	0003      	movs	r3, r0
   1be5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1be5c:	1dfb      	adds	r3, r7, #7
   1be5e:	781b      	ldrb	r3, [r3, #0]
   1be60:	221f      	movs	r2, #31
   1be62:	4013      	ands	r3, r2
   1be64:	2201      	movs	r2, #1
   1be66:	409a      	lsls	r2, r3
   1be68:	0013      	movs	r3, r2
   1be6a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1be6c:	1dbb      	adds	r3, r7, #6
   1be6e:	781b      	ldrb	r3, [r3, #0]
   1be70:	2b00      	cmp	r3, #0
   1be72:	d003      	beq.n	1be7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1be74:	68fb      	ldr	r3, [r7, #12]
   1be76:	68ba      	ldr	r2, [r7, #8]
   1be78:	619a      	str	r2, [r3, #24]
}
   1be7a:	e002      	b.n	1be82 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1be7c:	68fb      	ldr	r3, [r7, #12]
   1be7e:	68ba      	ldr	r2, [r7, #8]
   1be80:	615a      	str	r2, [r3, #20]
}
   1be82:	46c0      	nop			; (mov r8, r8)
   1be84:	46bd      	mov	sp, r7
   1be86:	b004      	add	sp, #16
   1be88:	bd80      	pop	{r7, pc}
   1be8a:	46c0      	nop			; (mov r8, r8)
   1be8c:	0001bdf5 	.word	0x0001bdf5

0001be90 <spi_is_syncing>:
{
   1be90:	b580      	push	{r7, lr}
   1be92:	b084      	sub	sp, #16
   1be94:	af00      	add	r7, sp, #0
   1be96:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1be98:	687b      	ldr	r3, [r7, #4]
   1be9a:	681b      	ldr	r3, [r3, #0]
   1be9c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1be9e:	68fb      	ldr	r3, [r7, #12]
   1bea0:	69db      	ldr	r3, [r3, #28]
   1bea2:	1e5a      	subs	r2, r3, #1
   1bea4:	4193      	sbcs	r3, r2
   1bea6:	b2db      	uxtb	r3, r3
}
   1bea8:	0018      	movs	r0, r3
   1beaa:	46bd      	mov	sp, r7
   1beac:	b004      	add	sp, #16
   1beae:	bd80      	pop	{r7, pc}

0001beb0 <spi_get_config_defaults>:
{
   1beb0:	b580      	push	{r7, lr}
   1beb2:	b082      	sub	sp, #8
   1beb4:	af00      	add	r7, sp, #0
   1beb6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1beb8:	687b      	ldr	r3, [r7, #4]
   1beba:	2201      	movs	r2, #1
   1bebc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1bebe:	687b      	ldr	r3, [r7, #4]
   1bec0:	2200      	movs	r2, #0
   1bec2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1bec4:	687b      	ldr	r3, [r7, #4]
   1bec6:	2200      	movs	r2, #0
   1bec8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1beca:	687b      	ldr	r3, [r7, #4]
   1becc:	22c0      	movs	r2, #192	; 0xc0
   1bece:	0392      	lsls	r2, r2, #14
   1bed0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1bed2:	687b      	ldr	r3, [r7, #4]
   1bed4:	2200      	movs	r2, #0
   1bed6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1bed8:	687b      	ldr	r3, [r7, #4]
   1beda:	2200      	movs	r2, #0
   1bedc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1bede:	687b      	ldr	r3, [r7, #4]
   1bee0:	2201      	movs	r2, #1
   1bee2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1bee4:	687b      	ldr	r3, [r7, #4]
   1bee6:	2201      	movs	r2, #1
   1bee8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1beea:	687b      	ldr	r3, [r7, #4]
   1beec:	2200      	movs	r2, #0
   1beee:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1bef0:	687b      	ldr	r3, [r7, #4]
   1bef2:	2224      	movs	r2, #36	; 0x24
   1bef4:	2100      	movs	r1, #0
   1bef6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1bef8:	687b      	ldr	r3, [r7, #4]
   1befa:	3318      	adds	r3, #24
   1befc:	220c      	movs	r2, #12
   1befe:	2100      	movs	r1, #0
   1bf00:	0018      	movs	r0, r3
   1bf02:	4b0a      	ldr	r3, [pc, #40]	; (1bf2c <spi_get_config_defaults+0x7c>)
   1bf04:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1bf06:	687b      	ldr	r3, [r7, #4]
   1bf08:	4a09      	ldr	r2, [pc, #36]	; (1bf30 <spi_get_config_defaults+0x80>)
   1bf0a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1bf0c:	687b      	ldr	r3, [r7, #4]
   1bf0e:	2200      	movs	r2, #0
   1bf10:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1bf12:	687b      	ldr	r3, [r7, #4]
   1bf14:	2200      	movs	r2, #0
   1bf16:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1bf18:	687b      	ldr	r3, [r7, #4]
   1bf1a:	2200      	movs	r2, #0
   1bf1c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1bf1e:	687b      	ldr	r3, [r7, #4]
   1bf20:	2200      	movs	r2, #0
   1bf22:	635a      	str	r2, [r3, #52]	; 0x34
};
   1bf24:	46c0      	nop			; (mov r8, r8)
   1bf26:	46bd      	mov	sp, r7
   1bf28:	b002      	add	sp, #8
   1bf2a:	bd80      	pop	{r7, pc}
   1bf2c:	000328a7 	.word	0x000328a7
   1bf30:	000186a0 	.word	0x000186a0

0001bf34 <spi_slave_inst_get_config_defaults>:
{
   1bf34:	b580      	push	{r7, lr}
   1bf36:	b082      	sub	sp, #8
   1bf38:	af00      	add	r7, sp, #0
   1bf3a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1bf3c:	687b      	ldr	r3, [r7, #4]
   1bf3e:	220a      	movs	r2, #10
   1bf40:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1bf42:	687b      	ldr	r3, [r7, #4]
   1bf44:	2200      	movs	r2, #0
   1bf46:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1bf48:	687b      	ldr	r3, [r7, #4]
   1bf4a:	2200      	movs	r2, #0
   1bf4c:	709a      	strb	r2, [r3, #2]
}
   1bf4e:	46c0      	nop			; (mov r8, r8)
   1bf50:	46bd      	mov	sp, r7
   1bf52:	b002      	add	sp, #8
   1bf54:	bd80      	pop	{r7, pc}
	...

0001bf58 <spi_attach_slave>:
{
   1bf58:	b580      	push	{r7, lr}
   1bf5a:	b084      	sub	sp, #16
   1bf5c:	af00      	add	r7, sp, #0
   1bf5e:	6078      	str	r0, [r7, #4]
   1bf60:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1bf62:	683b      	ldr	r3, [r7, #0]
   1bf64:	781a      	ldrb	r2, [r3, #0]
   1bf66:	687b      	ldr	r3, [r7, #4]
   1bf68:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1bf6a:	683b      	ldr	r3, [r7, #0]
   1bf6c:	785a      	ldrb	r2, [r3, #1]
   1bf6e:	687b      	ldr	r3, [r7, #4]
   1bf70:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1bf72:	683b      	ldr	r3, [r7, #0]
   1bf74:	789a      	ldrb	r2, [r3, #2]
   1bf76:	687b      	ldr	r3, [r7, #4]
   1bf78:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1bf7a:	230c      	movs	r3, #12
   1bf7c:	18fb      	adds	r3, r7, r3
   1bf7e:	0018      	movs	r0, r3
   1bf80:	4b0b      	ldr	r3, [pc, #44]	; (1bfb0 <spi_attach_slave+0x58>)
   1bf82:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1bf84:	230c      	movs	r3, #12
   1bf86:	18fb      	adds	r3, r7, r3
   1bf88:	2201      	movs	r2, #1
   1bf8a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1bf8c:	687b      	ldr	r3, [r7, #4]
   1bf8e:	781b      	ldrb	r3, [r3, #0]
   1bf90:	220c      	movs	r2, #12
   1bf92:	18ba      	adds	r2, r7, r2
   1bf94:	0011      	movs	r1, r2
   1bf96:	0018      	movs	r0, r3
   1bf98:	4b06      	ldr	r3, [pc, #24]	; (1bfb4 <spi_attach_slave+0x5c>)
   1bf9a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1bf9c:	687b      	ldr	r3, [r7, #4]
   1bf9e:	781b      	ldrb	r3, [r3, #0]
   1bfa0:	2101      	movs	r1, #1
   1bfa2:	0018      	movs	r0, r3
   1bfa4:	4b04      	ldr	r3, [pc, #16]	; (1bfb8 <spi_attach_slave+0x60>)
   1bfa6:	4798      	blx	r3
}
   1bfa8:	46c0      	nop			; (mov r8, r8)
   1bfaa:	46bd      	mov	sp, r7
   1bfac:	b004      	add	sp, #16
   1bfae:	bd80      	pop	{r7, pc}
   1bfb0:	0001be19 	.word	0x0001be19
   1bfb4:	000232fd 	.word	0x000232fd
   1bfb8:	0001be3d 	.word	0x0001be3d

0001bfbc <spi_enable>:
{
   1bfbc:	b580      	push	{r7, lr}
   1bfbe:	b084      	sub	sp, #16
   1bfc0:	af00      	add	r7, sp, #0
   1bfc2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1bfc4:	687b      	ldr	r3, [r7, #4]
   1bfc6:	681b      	ldr	r3, [r3, #0]
   1bfc8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1bfca:	687b      	ldr	r3, [r7, #4]
   1bfcc:	681b      	ldr	r3, [r3, #0]
   1bfce:	0018      	movs	r0, r3
   1bfd0:	4b0b      	ldr	r3, [pc, #44]	; (1c000 <spi_enable+0x44>)
   1bfd2:	4798      	blx	r3
   1bfd4:	0003      	movs	r3, r0
   1bfd6:	0018      	movs	r0, r3
   1bfd8:	4b0a      	ldr	r3, [pc, #40]	; (1c004 <spi_enable+0x48>)
   1bfda:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1bfdc:	46c0      	nop			; (mov r8, r8)
   1bfde:	687b      	ldr	r3, [r7, #4]
   1bfe0:	0018      	movs	r0, r3
   1bfe2:	4b09      	ldr	r3, [pc, #36]	; (1c008 <spi_enable+0x4c>)
   1bfe4:	4798      	blx	r3
   1bfe6:	1e03      	subs	r3, r0, #0
   1bfe8:	d1f9      	bne.n	1bfde <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1bfea:	68fb      	ldr	r3, [r7, #12]
   1bfec:	681b      	ldr	r3, [r3, #0]
   1bfee:	2202      	movs	r2, #2
   1bff0:	431a      	orrs	r2, r3
   1bff2:	68fb      	ldr	r3, [r7, #12]
   1bff4:	601a      	str	r2, [r3, #0]
}
   1bff6:	46c0      	nop			; (mov r8, r8)
   1bff8:	46bd      	mov	sp, r7
   1bffa:	b004      	add	sp, #16
   1bffc:	bd80      	pop	{r7, pc}
   1bffe:	46c0      	nop			; (mov r8, r8)
   1c000:	00023fcd 	.word	0x00023fcd
   1c004:	0001bdc9 	.word	0x0001bdc9
   1c008:	0001be91 	.word	0x0001be91

0001c00c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1c00c:	b580      	push	{r7, lr}
   1c00e:	b084      	sub	sp, #16
   1c010:	af00      	add	r7, sp, #0
   1c012:	6078      	str	r0, [r7, #4]
   1c014:	000a      	movs	r2, r1
   1c016:	1cfb      	adds	r3, r7, #3
   1c018:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1c01a:	230f      	movs	r3, #15
   1c01c:	18fb      	adds	r3, r7, r3
   1c01e:	2200      	movs	r2, #0
   1c020:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1c022:	e038      	b.n	1c096 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1c024:	687b      	ldr	r3, [r7, #4]
   1c026:	1c5a      	adds	r2, r3, #1
   1c028:	607a      	str	r2, [r7, #4]
   1c02a:	220e      	movs	r2, #14
   1c02c:	18ba      	adds	r2, r7, r2
   1c02e:	781b      	ldrb	r3, [r3, #0]
   1c030:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1c032:	230d      	movs	r3, #13
   1c034:	18fb      	adds	r3, r7, r3
   1c036:	2200      	movs	r2, #0
   1c038:	701a      	strb	r2, [r3, #0]
   1c03a:	e027      	b.n	1c08c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1c03c:	230f      	movs	r3, #15
   1c03e:	18fa      	adds	r2, r7, r3
   1c040:	230f      	movs	r3, #15
   1c042:	18fb      	adds	r3, r7, r3
   1c044:	781b      	ldrb	r3, [r3, #0]
   1c046:	18db      	adds	r3, r3, r3
   1c048:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1c04a:	230e      	movs	r3, #14
   1c04c:	18fa      	adds	r2, r7, r3
   1c04e:	230f      	movs	r3, #15
   1c050:	18fb      	adds	r3, r7, r3
   1c052:	7812      	ldrb	r2, [r2, #0]
   1c054:	781b      	ldrb	r3, [r3, #0]
   1c056:	4053      	eors	r3, r2
   1c058:	b2db      	uxtb	r3, r3
   1c05a:	b25b      	sxtb	r3, r3
   1c05c:	2b00      	cmp	r3, #0
   1c05e:	da07      	bge.n	1c070 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1c060:	230f      	movs	r3, #15
   1c062:	18fb      	adds	r3, r7, r3
   1c064:	220f      	movs	r2, #15
   1c066:	18ba      	adds	r2, r7, r2
   1c068:	7812      	ldrb	r2, [r2, #0]
   1c06a:	2109      	movs	r1, #9
   1c06c:	404a      	eors	r2, r1
   1c06e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1c070:	230e      	movs	r3, #14
   1c072:	18fa      	adds	r2, r7, r3
   1c074:	230e      	movs	r3, #14
   1c076:	18fb      	adds	r3, r7, r3
   1c078:	781b      	ldrb	r3, [r3, #0]
   1c07a:	18db      	adds	r3, r3, r3
   1c07c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1c07e:	230d      	movs	r3, #13
   1c080:	18fb      	adds	r3, r7, r3
   1c082:	781a      	ldrb	r2, [r3, #0]
   1c084:	230d      	movs	r3, #13
   1c086:	18fb      	adds	r3, r7, r3
   1c088:	3201      	adds	r2, #1
   1c08a:	701a      	strb	r2, [r3, #0]
   1c08c:	230d      	movs	r3, #13
   1c08e:	18fb      	adds	r3, r7, r3
   1c090:	781b      	ldrb	r3, [r3, #0]
   1c092:	2b07      	cmp	r3, #7
   1c094:	d9d2      	bls.n	1c03c <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1c096:	1cfb      	adds	r3, r7, #3
   1c098:	781b      	ldrb	r3, [r3, #0]
   1c09a:	1cfa      	adds	r2, r7, #3
   1c09c:	1e59      	subs	r1, r3, #1
   1c09e:	7011      	strb	r1, [r2, #0]
   1c0a0:	2b00      	cmp	r3, #0
   1c0a2:	d1bf      	bne.n	1c024 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1c0a4:	230f      	movs	r3, #15
   1c0a6:	18fb      	adds	r3, r7, r3
   1c0a8:	781b      	ldrb	r3, [r3, #0]
   1c0aa:	005b      	lsls	r3, r3, #1
   1c0ac:	b25b      	sxtb	r3, r3
   1c0ae:	2201      	movs	r2, #1
   1c0b0:	4313      	orrs	r3, r2
   1c0b2:	b25a      	sxtb	r2, r3
   1c0b4:	230f      	movs	r3, #15
   1c0b6:	18fb      	adds	r3, r7, r3
   1c0b8:	701a      	strb	r2, [r3, #0]
	return crc;
   1c0ba:	230f      	movs	r3, #15
   1c0bc:	18fb      	adds	r3, r7, r3
   1c0be:	781b      	ldrb	r3, [r3, #0]
}
   1c0c0:	0018      	movs	r0, r3
   1c0c2:	46bd      	mov	sp, r7
   1c0c4:	b004      	add	sp, #16
   1c0c6:	bd80      	pop	{r7, pc}

0001c0c8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1c0c8:	b590      	push	{r4, r7, lr}
   1c0ca:	b083      	sub	sp, #12
   1c0cc:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1c0ce:	1c7b      	adds	r3, r7, #1
   1c0d0:	22ff      	movs	r2, #255	; 0xff
   1c0d2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1c0d4:	1cbb      	adds	r3, r7, #2
   1c0d6:	22ff      	movs	r2, #255	; 0xff
   1c0d8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1c0da:	1cbb      	adds	r3, r7, #2
   1c0dc:	881b      	ldrh	r3, [r3, #0]
   1c0de:	1c79      	adds	r1, r7, #1
   1c0e0:	4811      	ldr	r0, [pc, #68]	; (1c128 <sd_mmc_spi_wait_busy+0x60>)
   1c0e2:	2201      	movs	r2, #1
   1c0e4:	4c11      	ldr	r4, [pc, #68]	; (1c12c <sd_mmc_spi_wait_busy+0x64>)
   1c0e6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1c0e8:	4b11      	ldr	r3, [pc, #68]	; (1c130 <sd_mmc_spi_wait_busy+0x68>)
   1c0ea:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1c0ec:	1cbb      	adds	r3, r7, #2
   1c0ee:	881b      	ldrh	r3, [r3, #0]
   1c0f0:	1c79      	adds	r1, r7, #1
   1c0f2:	480d      	ldr	r0, [pc, #52]	; (1c128 <sd_mmc_spi_wait_busy+0x60>)
   1c0f4:	2201      	movs	r2, #1
   1c0f6:	4c0d      	ldr	r4, [pc, #52]	; (1c12c <sd_mmc_spi_wait_busy+0x64>)
   1c0f8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1c0fa:	1cbb      	adds	r3, r7, #2
   1c0fc:	881b      	ldrh	r3, [r3, #0]
   1c0fe:	1c79      	adds	r1, r7, #1
   1c100:	4809      	ldr	r0, [pc, #36]	; (1c128 <sd_mmc_spi_wait_busy+0x60>)
   1c102:	2201      	movs	r2, #1
   1c104:	4c09      	ldr	r4, [pc, #36]	; (1c12c <sd_mmc_spi_wait_busy+0x64>)
   1c106:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1c108:	687b      	ldr	r3, [r7, #4]
   1c10a:	1e5a      	subs	r2, r3, #1
   1c10c:	607a      	str	r2, [r7, #4]
   1c10e:	2b00      	cmp	r3, #0
   1c110:	d101      	bne.n	1c116 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1c112:	2300      	movs	r3, #0
   1c114:	e004      	b.n	1c120 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1c116:	1c7b      	adds	r3, r7, #1
   1c118:	781b      	ldrb	r3, [r3, #0]
   1c11a:	2bff      	cmp	r3, #255	; 0xff
   1c11c:	d1ed      	bne.n	1c0fa <sd_mmc_spi_wait_busy+0x32>
	return true;
   1c11e:	2301      	movs	r3, #1
}
   1c120:	0018      	movs	r0, r3
   1c122:	46bd      	mov	sp, r7
   1c124:	b003      	add	sp, #12
   1c126:	bd90      	pop	{r4, r7, pc}
   1c128:	20003ccc 	.word	0x20003ccc
   1c12c:	0002494d 	.word	0x0002494d
   1c130:	00030d40 	.word	0x00030d40

0001c134 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1c134:	b590      	push	{r4, r7, lr}
   1c136:	b083      	sub	sp, #12
   1c138:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1c13a:	1cbb      	adds	r3, r7, #2
   1c13c:	22ff      	movs	r2, #255	; 0xff
   1c13e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1c140:	1c7b      	adds	r3, r7, #1
   1c142:	2200      	movs	r2, #0
   1c144:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1c146:	4b18      	ldr	r3, [pc, #96]	; (1c1a8 <sd_mmc_spi_start_read_block+0x74>)
   1c148:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1c14a:	687b      	ldr	r3, [r7, #4]
   1c14c:	1e5a      	subs	r2, r3, #1
   1c14e:	607a      	str	r2, [r7, #4]
   1c150:	2b00      	cmp	r3, #0
   1c152:	d104      	bne.n	1c15e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1c154:	4b15      	ldr	r3, [pc, #84]	; (1c1ac <sd_mmc_spi_start_read_block+0x78>)
   1c156:	2204      	movs	r2, #4
   1c158:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1c15a:	2300      	movs	r3, #0
   1c15c:	e020      	b.n	1c1a0 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1c15e:	1cbb      	adds	r3, r7, #2
   1c160:	881b      	ldrh	r3, [r3, #0]
   1c162:	1c79      	adds	r1, r7, #1
   1c164:	4812      	ldr	r0, [pc, #72]	; (1c1b0 <sd_mmc_spi_start_read_block+0x7c>)
   1c166:	2201      	movs	r2, #1
   1c168:	4c12      	ldr	r4, [pc, #72]	; (1c1b4 <sd_mmc_spi_start_read_block+0x80>)
   1c16a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1c16c:	1c7b      	adds	r3, r7, #1
   1c16e:	781b      	ldrb	r3, [r3, #0]
   1c170:	001a      	movs	r2, r3
   1c172:	23f0      	movs	r3, #240	; 0xf0
   1c174:	4013      	ands	r3, r2
   1c176:	d10e      	bne.n	1c196 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1c178:	1c7b      	adds	r3, r7, #1
   1c17a:	781b      	ldrb	r3, [r3, #0]
   1c17c:	001a      	movs	r2, r3
   1c17e:	2307      	movs	r3, #7
   1c180:	4013      	ands	r3, r2
   1c182:	d003      	beq.n	1c18c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1c184:	4b09      	ldr	r3, [pc, #36]	; (1c1ac <sd_mmc_spi_start_read_block+0x78>)
   1c186:	2207      	movs	r2, #7
   1c188:	701a      	strb	r2, [r3, #0]
   1c18a:	e002      	b.n	1c192 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1c18c:	4b07      	ldr	r3, [pc, #28]	; (1c1ac <sd_mmc_spi_start_read_block+0x78>)
   1c18e:	220b      	movs	r2, #11
   1c190:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1c192:	2300      	movs	r3, #0
   1c194:	e004      	b.n	1c1a0 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1c196:	1c7b      	adds	r3, r7, #1
   1c198:	781b      	ldrb	r3, [r3, #0]
   1c19a:	2bfe      	cmp	r3, #254	; 0xfe
   1c19c:	d1d5      	bne.n	1c14a <sd_mmc_spi_start_read_block+0x16>

	return true;
   1c19e:	2301      	movs	r3, #1
}
   1c1a0:	0018      	movs	r0, r3
   1c1a2:	46bd      	mov	sp, r7
   1c1a4:	b003      	add	sp, #12
   1c1a6:	bd90      	pop	{r4, r7, pc}
   1c1a8:	0007a120 	.word	0x0007a120
   1c1ac:	20003d0f 	.word	0x20003d0f
   1c1b0:	20003ccc 	.word	0x20003ccc
   1c1b4:	0002494d 	.word	0x0002494d

0001c1b8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1c1b8:	b590      	push	{r4, r7, lr}
   1c1ba:	b083      	sub	sp, #12
   1c1bc:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1c1be:	1dbb      	adds	r3, r7, #6
   1c1c0:	22ff      	movs	r2, #255	; 0xff
   1c1c2:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1c1c4:	1dbb      	adds	r3, r7, #6
   1c1c6:	881b      	ldrh	r3, [r3, #0]
   1c1c8:	1d39      	adds	r1, r7, #4
   1c1ca:	4804      	ldr	r0, [pc, #16]	; (1c1dc <sd_mmc_spi_stop_read_block+0x24>)
   1c1cc:	2202      	movs	r2, #2
   1c1ce:	4c04      	ldr	r4, [pc, #16]	; (1c1e0 <sd_mmc_spi_stop_read_block+0x28>)
   1c1d0:	47a0      	blx	r4
			dummy);
}
   1c1d2:	46c0      	nop			; (mov r8, r8)
   1c1d4:	46bd      	mov	sp, r7
   1c1d6:	b003      	add	sp, #12
   1c1d8:	bd90      	pop	{r4, r7, pc}
   1c1da:	46c0      	nop			; (mov r8, r8)
   1c1dc:	20003ccc 	.word	0x20003ccc
   1c1e0:	0002494d 	.word	0x0002494d

0001c1e4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1c1e4:	b580      	push	{r7, lr}
   1c1e6:	b082      	sub	sp, #8
   1c1e8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1c1ea:	1dfb      	adds	r3, r7, #7
   1c1ec:	22ff      	movs	r2, #255	; 0xff
   1c1ee:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1c1f0:	1df9      	adds	r1, r7, #7
   1c1f2:	4b0d      	ldr	r3, [pc, #52]	; (1c228 <sd_mmc_spi_start_write_block+0x44>)
   1c1f4:	2201      	movs	r2, #1
   1c1f6:	0018      	movs	r0, r3
   1c1f8:	4b0c      	ldr	r3, [pc, #48]	; (1c22c <sd_mmc_spi_start_write_block+0x48>)
   1c1fa:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1c1fc:	4b0c      	ldr	r3, [pc, #48]	; (1c230 <sd_mmc_spi_start_write_block+0x4c>)
   1c1fe:	881b      	ldrh	r3, [r3, #0]
   1c200:	2b01      	cmp	r3, #1
   1c202:	d103      	bne.n	1c20c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1c204:	1dbb      	adds	r3, r7, #6
   1c206:	22fe      	movs	r2, #254	; 0xfe
   1c208:	701a      	strb	r2, [r3, #0]
   1c20a:	e002      	b.n	1c212 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1c20c:	1dbb      	adds	r3, r7, #6
   1c20e:	22fc      	movs	r2, #252	; 0xfc
   1c210:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1c212:	1db9      	adds	r1, r7, #6
   1c214:	4b04      	ldr	r3, [pc, #16]	; (1c228 <sd_mmc_spi_start_write_block+0x44>)
   1c216:	2201      	movs	r2, #1
   1c218:	0018      	movs	r0, r3
   1c21a:	4b04      	ldr	r3, [pc, #16]	; (1c22c <sd_mmc_spi_start_write_block+0x48>)
   1c21c:	4798      	blx	r3
}
   1c21e:	46c0      	nop			; (mov r8, r8)
   1c220:	46bd      	mov	sp, r7
   1c222:	b002      	add	sp, #8
   1c224:	bd80      	pop	{r7, pc}
   1c226:	46c0      	nop			; (mov r8, r8)
   1c228:	20003ccc 	.word	0x20003ccc
   1c22c:	00024b71 	.word	0x00024b71
   1c230:	20003d1a 	.word	0x20003d1a

0001c234 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1c234:	b590      	push	{r4, r7, lr}
   1c236:	b083      	sub	sp, #12
   1c238:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1c23a:	1dbb      	adds	r3, r7, #6
   1c23c:	22ff      	movs	r2, #255	; 0xff
   1c23e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1c240:	1cbb      	adds	r3, r7, #2
   1c242:	2201      	movs	r2, #1
   1c244:	4252      	negs	r2, r2
   1c246:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1c248:	1cb9      	adds	r1, r7, #2
   1c24a:	4b1b      	ldr	r3, [pc, #108]	; (1c2b8 <sd_mmc_spi_stop_write_block+0x84>)
   1c24c:	2202      	movs	r2, #2
   1c24e:	0018      	movs	r0, r3
   1c250:	4b1a      	ldr	r3, [pc, #104]	; (1c2bc <sd_mmc_spi_stop_write_block+0x88>)
   1c252:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1c254:	1dbb      	adds	r3, r7, #6
   1c256:	881b      	ldrh	r3, [r3, #0]
   1c258:	1d79      	adds	r1, r7, #5
   1c25a:	4817      	ldr	r0, [pc, #92]	; (1c2b8 <sd_mmc_spi_stop_write_block+0x84>)
   1c25c:	2201      	movs	r2, #1
   1c25e:	4c18      	ldr	r4, [pc, #96]	; (1c2c0 <sd_mmc_spi_stop_write_block+0x8c>)
   1c260:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1c262:	1d7b      	adds	r3, r7, #5
   1c264:	781b      	ldrb	r3, [r3, #0]
   1c266:	001a      	movs	r2, r3
   1c268:	2310      	movs	r3, #16
   1c26a:	4013      	ands	r3, r2
   1c26c:	d105      	bne.n	1c27a <sd_mmc_spi_stop_write_block+0x46>
   1c26e:	1d7b      	adds	r3, r7, #5
   1c270:	781b      	ldrb	r3, [r3, #0]
   1c272:	001a      	movs	r2, r3
   1c274:	2301      	movs	r3, #1
   1c276:	4013      	ands	r3, r2
   1c278:	d104      	bne.n	1c284 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1c27a:	4b12      	ldr	r3, [pc, #72]	; (1c2c4 <sd_mmc_spi_stop_write_block+0x90>)
   1c27c:	2201      	movs	r2, #1
   1c27e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1c280:	2300      	movs	r3, #0
   1c282:	e014      	b.n	1c2ae <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1c284:	1d7b      	adds	r3, r7, #5
   1c286:	781b      	ldrb	r3, [r3, #0]
   1c288:	001a      	movs	r2, r3
   1c28a:	231e      	movs	r3, #30
   1c28c:	4013      	ands	r3, r2
   1c28e:	2b04      	cmp	r3, #4
   1c290:	d00b      	beq.n	1c2aa <sd_mmc_spi_stop_write_block+0x76>
   1c292:	2b0a      	cmp	r3, #10
   1c294:	d104      	bne.n	1c2a0 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1c296:	4b0b      	ldr	r3, [pc, #44]	; (1c2c4 <sd_mmc_spi_stop_write_block+0x90>)
   1c298:	2208      	movs	r2, #8
   1c29a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1c29c:	2300      	movs	r3, #0
   1c29e:	e006      	b.n	1c2ae <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1c2a0:	4b08      	ldr	r3, [pc, #32]	; (1c2c4 <sd_mmc_spi_stop_write_block+0x90>)
   1c2a2:	220a      	movs	r2, #10
   1c2a4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1c2a6:	2300      	movs	r3, #0
   1c2a8:	e001      	b.n	1c2ae <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1c2aa:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1c2ac:	2301      	movs	r3, #1
}
   1c2ae:	0018      	movs	r0, r3
   1c2b0:	46bd      	mov	sp, r7
   1c2b2:	b003      	add	sp, #12
   1c2b4:	bd90      	pop	{r4, r7, pc}
   1c2b6:	46c0      	nop			; (mov r8, r8)
   1c2b8:	20003ccc 	.word	0x20003ccc
   1c2bc:	00024b71 	.word	0x00024b71
   1c2c0:	0002494d 	.word	0x0002494d
   1c2c4:	20003d0f 	.word	0x20003d0f

0001c2c8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1c2c8:	b590      	push	{r4, r7, lr}
   1c2ca:	b083      	sub	sp, #12
   1c2cc:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1c2ce:	4b1d      	ldr	r3, [pc, #116]	; (1c344 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1c2d0:	881b      	ldrh	r3, [r3, #0]
   1c2d2:	2b01      	cmp	r3, #1
   1c2d4:	d101      	bne.n	1c2da <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1c2d6:	2301      	movs	r3, #1
   1c2d8:	e030      	b.n	1c33c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1c2da:	4b1a      	ldr	r3, [pc, #104]	; (1c344 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1c2dc:	881b      	ldrh	r3, [r3, #0]
   1c2de:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1c2e0:	4b19      	ldr	r3, [pc, #100]	; (1c348 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1c2e2:	681a      	ldr	r2, [r3, #0]
   1c2e4:	4b19      	ldr	r3, [pc, #100]	; (1c34c <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1c2e6:	881b      	ldrh	r3, [r3, #0]
   1c2e8:	0019      	movs	r1, r3
   1c2ea:	4b19      	ldr	r3, [pc, #100]	; (1c350 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1c2ec:	0010      	movs	r0, r2
   1c2ee:	4798      	blx	r3
   1c2f0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1c2f2:	429c      	cmp	r4, r3
   1c2f4:	d901      	bls.n	1c2fa <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1c2f6:	2301      	movs	r3, #1
   1c2f8:	e020      	b.n	1c33c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1c2fa:	1dfb      	adds	r3, r7, #7
   1c2fc:	22ff      	movs	r2, #255	; 0xff
   1c2fe:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1c300:	1df9      	adds	r1, r7, #7
   1c302:	4b14      	ldr	r3, [pc, #80]	; (1c354 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1c304:	2201      	movs	r2, #1
   1c306:	0018      	movs	r0, r3
   1c308:	4b13      	ldr	r3, [pc, #76]	; (1c358 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1c30a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1c30c:	1dfb      	adds	r3, r7, #7
   1c30e:	22fd      	movs	r2, #253	; 0xfd
   1c310:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1c312:	1df9      	adds	r1, r7, #7
   1c314:	4b0f      	ldr	r3, [pc, #60]	; (1c354 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1c316:	2201      	movs	r2, #1
   1c318:	0018      	movs	r0, r3
   1c31a:	4b0f      	ldr	r3, [pc, #60]	; (1c358 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1c31c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1c31e:	4b0f      	ldr	r3, [pc, #60]	; (1c35c <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1c320:	4798      	blx	r3
   1c322:	0003      	movs	r3, r0
   1c324:	001a      	movs	r2, r3
   1c326:	2301      	movs	r3, #1
   1c328:	4053      	eors	r3, r2
   1c32a:	b2db      	uxtb	r3, r3
   1c32c:	2b00      	cmp	r3, #0
   1c32e:	d004      	beq.n	1c33a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1c330:	4b0b      	ldr	r3, [pc, #44]	; (1c360 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1c332:	2205      	movs	r2, #5
   1c334:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1c336:	2300      	movs	r3, #0
   1c338:	e000      	b.n	1c33c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1c33a:	2301      	movs	r3, #1
}
   1c33c:	0018      	movs	r0, r3
   1c33e:	46bd      	mov	sp, r7
   1c340:	b003      	add	sp, #12
   1c342:	bd90      	pop	{r4, r7, pc}
   1c344:	20003d1a 	.word	0x20003d1a
   1c348:	20003d14 	.word	0x20003d14
   1c34c:	20003d18 	.word	0x20003d18
   1c350:	0002fded 	.word	0x0002fded
   1c354:	20003ccc 	.word	0x20003ccc
   1c358:	00024b71 	.word	0x00024b71
   1c35c:	0001c0c9 	.word	0x0001c0c9
   1c360:	20003d0f 	.word	0x20003d0f

0001c364 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1c364:	b580      	push	{r7, lr}
   1c366:	b090      	sub	sp, #64	; 0x40
   1c368:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c36a:	4b1f      	ldr	r3, [pc, #124]	; (1c3e8 <sd_mmc_spi_init+0x84>)
   1c36c:	2200      	movs	r2, #0
   1c36e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1c370:	233c      	movs	r3, #60	; 0x3c
   1c372:	18fb      	adds	r3, r7, r3
   1c374:	0018      	movs	r0, r3
   1c376:	4b1d      	ldr	r3, [pc, #116]	; (1c3ec <sd_mmc_spi_init+0x88>)
   1c378:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1c37a:	1d3b      	adds	r3, r7, #4
   1c37c:	0018      	movs	r0, r3
   1c37e:	4b1c      	ldr	r3, [pc, #112]	; (1c3f0 <sd_mmc_spi_init+0x8c>)
   1c380:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1c382:	1d3b      	adds	r3, r7, #4
   1c384:	2280      	movs	r2, #128	; 0x80
   1c386:	0252      	lsls	r2, r2, #9
   1c388:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1c38a:	1d3b      	adds	r3, r7, #4
   1c38c:	4a19      	ldr	r2, [pc, #100]	; (1c3f4 <sd_mmc_spi_init+0x90>)
   1c38e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1c390:	1d3b      	adds	r3, r7, #4
   1c392:	4a19      	ldr	r2, [pc, #100]	; (1c3f8 <sd_mmc_spi_init+0x94>)
   1c394:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1c396:	1d3b      	adds	r3, r7, #4
   1c398:	4a18      	ldr	r2, [pc, #96]	; (1c3fc <sd_mmc_spi_init+0x98>)
   1c39a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1c39c:	1d3b      	adds	r3, r7, #4
   1c39e:	4a18      	ldr	r2, [pc, #96]	; (1c400 <sd_mmc_spi_init+0x9c>)
   1c3a0:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1c3a2:	1d3b      	adds	r3, r7, #4
   1c3a4:	2224      	movs	r2, #36	; 0x24
   1c3a6:	2100      	movs	r1, #0
   1c3a8:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1c3aa:	1d3b      	adds	r3, r7, #4
   1c3ac:	4a15      	ldr	r2, [pc, #84]	; (1c404 <sd_mmc_spi_init+0xa0>)
   1c3ae:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1c3b0:	1d3a      	adds	r2, r7, #4
   1c3b2:	4915      	ldr	r1, [pc, #84]	; (1c408 <sd_mmc_spi_init+0xa4>)
   1c3b4:	4b15      	ldr	r3, [pc, #84]	; (1c40c <sd_mmc_spi_init+0xa8>)
   1c3b6:	0018      	movs	r0, r3
   1c3b8:	4b15      	ldr	r3, [pc, #84]	; (1c410 <sd_mmc_spi_init+0xac>)
   1c3ba:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1c3bc:	4b13      	ldr	r3, [pc, #76]	; (1c40c <sd_mmc_spi_init+0xa8>)
   1c3be:	0018      	movs	r0, r3
   1c3c0:	4b14      	ldr	r3, [pc, #80]	; (1c414 <sd_mmc_spi_init+0xb0>)
   1c3c2:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1c3c4:	4b14      	ldr	r3, [pc, #80]	; (1c418 <sd_mmc_spi_init+0xb4>)
   1c3c6:	0018      	movs	r0, r3
   1c3c8:	4b14      	ldr	r3, [pc, #80]	; (1c41c <sd_mmc_spi_init+0xb8>)
   1c3ca:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1c3cc:	4b14      	ldr	r3, [pc, #80]	; (1c420 <sd_mmc_spi_init+0xbc>)
   1c3ce:	781a      	ldrb	r2, [r3, #0]
   1c3d0:	4b11      	ldr	r3, [pc, #68]	; (1c418 <sd_mmc_spi_init+0xb4>)
   1c3d2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1c3d4:	4a10      	ldr	r2, [pc, #64]	; (1c418 <sd_mmc_spi_init+0xb4>)
   1c3d6:	4b13      	ldr	r3, [pc, #76]	; (1c424 <sd_mmc_spi_init+0xc0>)
   1c3d8:	0011      	movs	r1, r2
   1c3da:	0018      	movs	r0, r3
   1c3dc:	4b12      	ldr	r3, [pc, #72]	; (1c428 <sd_mmc_spi_init+0xc4>)
   1c3de:	4798      	blx	r3
}
   1c3e0:	46c0      	nop			; (mov r8, r8)
   1c3e2:	46bd      	mov	sp, r7
   1c3e4:	b010      	add	sp, #64	; 0x40
   1c3e6:	bd80      	pop	{r7, pc}
   1c3e8:	20003d0f 	.word	0x20003d0f
   1c3ec:	0001be19 	.word	0x0001be19
   1c3f0:	0001beb1 	.word	0x0001beb1
   1c3f4:	00100002 	.word	0x00100002
   1c3f8:	00110002 	.word	0x00110002
   1c3fc:	00120002 	.word	0x00120002
   1c400:	00130002 	.word	0x00130002
   1c404:	00061a80 	.word	0x00061a80
   1c408:	42000c00 	.word	0x42000c00
   1c40c:	20003ccc 	.word	0x20003ccc
   1c410:	000247bd 	.word	0x000247bd
   1c414:	0001bfbd 	.word	0x0001bfbd
   1c418:	20003d0c 	.word	0x20003d0c
   1c41c:	0001bf35 	.word	0x0001bf35
   1c420:	200000bc 	.word	0x200000bc
   1c424:	20003d08 	.word	0x20003d08
   1c428:	0001bf59 	.word	0x0001bf59

0001c42c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1c42c:	b590      	push	{r4, r7, lr}
   1c42e:	b083      	sub	sp, #12
   1c430:	af00      	add	r7, sp, #0
   1c432:	0004      	movs	r4, r0
   1c434:	6039      	str	r1, [r7, #0]
   1c436:	0010      	movs	r0, r2
   1c438:	0019      	movs	r1, r3
   1c43a:	1dfb      	adds	r3, r7, #7
   1c43c:	1c22      	adds	r2, r4, #0
   1c43e:	701a      	strb	r2, [r3, #0]
   1c440:	1dbb      	adds	r3, r7, #6
   1c442:	1c02      	adds	r2, r0, #0
   1c444:	701a      	strb	r2, [r3, #0]
   1c446:	1d7b      	adds	r3, r7, #5
   1c448:	1c0a      	adds	r2, r1, #0
   1c44a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c44c:	4b13      	ldr	r3, [pc, #76]	; (1c49c <sd_mmc_spi_select_device+0x70>)
   1c44e:	2200      	movs	r2, #0
   1c450:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1c452:	683b      	ldr	r3, [r7, #0]
   1c454:	4a12      	ldr	r2, [pc, #72]	; (1c4a0 <sd_mmc_spi_select_device+0x74>)
   1c456:	4293      	cmp	r3, r2
   1c458:	d907      	bls.n	1c46a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1c45a:	4b11      	ldr	r3, [pc, #68]	; (1c4a0 <sd_mmc_spi_select_device+0x74>)
   1c45c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1c45e:	e004      	b.n	1c46a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1c460:	683b      	ldr	r3, [r7, #0]
   1c462:	08db      	lsrs	r3, r3, #3
   1c464:	683a      	ldr	r2, [r7, #0]
   1c466:	1ad3      	subs	r3, r2, r3
   1c468:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1c46a:	683a      	ldr	r2, [r7, #0]
   1c46c:	4b0d      	ldr	r3, [pc, #52]	; (1c4a4 <sd_mmc_spi_select_device+0x78>)
   1c46e:	0011      	movs	r1, r2
   1c470:	0018      	movs	r0, r3
   1c472:	4b0d      	ldr	r3, [pc, #52]	; (1c4a8 <sd_mmc_spi_select_device+0x7c>)
   1c474:	4798      	blx	r3
   1c476:	0003      	movs	r3, r0
   1c478:	2b17      	cmp	r3, #23
   1c47a:	d0f1      	beq.n	1c460 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1c47c:	1dfb      	adds	r3, r7, #7
   1c47e:	781a      	ldrb	r2, [r3, #0]
   1c480:	0013      	movs	r3, r2
   1c482:	005b      	lsls	r3, r3, #1
   1c484:	189b      	adds	r3, r3, r2
   1c486:	4a09      	ldr	r2, [pc, #36]	; (1c4ac <sd_mmc_spi_select_device+0x80>)
   1c488:	1899      	adds	r1, r3, r2
   1c48a:	4b06      	ldr	r3, [pc, #24]	; (1c4a4 <sd_mmc_spi_select_device+0x78>)
   1c48c:	2201      	movs	r2, #1
   1c48e:	0018      	movs	r0, r3
   1c490:	4b07      	ldr	r3, [pc, #28]	; (1c4b0 <sd_mmc_spi_select_device+0x84>)
   1c492:	4798      	blx	r3
}
   1c494:	46c0      	nop			; (mov r8, r8)
   1c496:	46bd      	mov	sp, r7
   1c498:	b003      	add	sp, #12
   1c49a:	bd90      	pop	{r4, r7, pc}
   1c49c:	20003d0f 	.word	0x20003d0f
   1c4a0:	00989680 	.word	0x00989680
   1c4a4:	20003ccc 	.word	0x20003ccc
   1c4a8:	000244e5 	.word	0x000244e5
   1c4ac:	20003d08 	.word	0x20003d08
   1c4b0:	00024a81 	.word	0x00024a81

0001c4b4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1c4b4:	b580      	push	{r7, lr}
   1c4b6:	b082      	sub	sp, #8
   1c4b8:	af00      	add	r7, sp, #0
   1c4ba:	0002      	movs	r2, r0
   1c4bc:	1dfb      	adds	r3, r7, #7
   1c4be:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c4c0:	4b09      	ldr	r3, [pc, #36]	; (1c4e8 <sd_mmc_spi_deselect_device+0x34>)
   1c4c2:	2200      	movs	r2, #0
   1c4c4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1c4c6:	1dfb      	adds	r3, r7, #7
   1c4c8:	781a      	ldrb	r2, [r3, #0]
   1c4ca:	0013      	movs	r3, r2
   1c4cc:	005b      	lsls	r3, r3, #1
   1c4ce:	189b      	adds	r3, r3, r2
   1c4d0:	4a06      	ldr	r2, [pc, #24]	; (1c4ec <sd_mmc_spi_deselect_device+0x38>)
   1c4d2:	1899      	adds	r1, r3, r2
   1c4d4:	4b06      	ldr	r3, [pc, #24]	; (1c4f0 <sd_mmc_spi_deselect_device+0x3c>)
   1c4d6:	2200      	movs	r2, #0
   1c4d8:	0018      	movs	r0, r3
   1c4da:	4b06      	ldr	r3, [pc, #24]	; (1c4f4 <sd_mmc_spi_deselect_device+0x40>)
   1c4dc:	4798      	blx	r3
}
   1c4de:	46c0      	nop			; (mov r8, r8)
   1c4e0:	46bd      	mov	sp, r7
   1c4e2:	b002      	add	sp, #8
   1c4e4:	bd80      	pop	{r7, pc}
   1c4e6:	46c0      	nop			; (mov r8, r8)
   1c4e8:	20003d0f 	.word	0x20003d0f
   1c4ec:	20003d08 	.word	0x20003d08
   1c4f0:	20003ccc 	.word	0x20003ccc
   1c4f4:	00024a81 	.word	0x00024a81

0001c4f8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1c4f8:	b580      	push	{r7, lr}
   1c4fa:	b082      	sub	sp, #8
   1c4fc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1c4fe:	1dbb      	adds	r3, r7, #6
   1c500:	22ff      	movs	r2, #255	; 0xff
   1c502:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c504:	4b0c      	ldr	r3, [pc, #48]	; (1c538 <sd_mmc_spi_send_clock+0x40>)
   1c506:	2200      	movs	r2, #0
   1c508:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1c50a:	1dfb      	adds	r3, r7, #7
   1c50c:	2200      	movs	r2, #0
   1c50e:	701a      	strb	r2, [r3, #0]
   1c510:	e00a      	b.n	1c528 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1c512:	1db9      	adds	r1, r7, #6
   1c514:	4b09      	ldr	r3, [pc, #36]	; (1c53c <sd_mmc_spi_send_clock+0x44>)
   1c516:	2201      	movs	r2, #1
   1c518:	0018      	movs	r0, r3
   1c51a:	4b09      	ldr	r3, [pc, #36]	; (1c540 <sd_mmc_spi_send_clock+0x48>)
   1c51c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1c51e:	1dfb      	adds	r3, r7, #7
   1c520:	781a      	ldrb	r2, [r3, #0]
   1c522:	1dfb      	adds	r3, r7, #7
   1c524:	3201      	adds	r2, #1
   1c526:	701a      	strb	r2, [r3, #0]
   1c528:	1dfb      	adds	r3, r7, #7
   1c52a:	781b      	ldrb	r3, [r3, #0]
   1c52c:	2b09      	cmp	r3, #9
   1c52e:	d9f0      	bls.n	1c512 <sd_mmc_spi_send_clock+0x1a>
	}
}
   1c530:	46c0      	nop			; (mov r8, r8)
   1c532:	46bd      	mov	sp, r7
   1c534:	b002      	add	sp, #8
   1c536:	bd80      	pop	{r7, pc}
   1c538:	20003d0f 	.word	0x20003d0f
   1c53c:	20003ccc 	.word	0x20003ccc
   1c540:	00024b71 	.word	0x00024b71

0001c544 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1c544:	b590      	push	{r4, r7, lr}
   1c546:	b085      	sub	sp, #20
   1c548:	af02      	add	r7, sp, #8
   1c54a:	6078      	str	r0, [r7, #4]
   1c54c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1c54e:	6839      	ldr	r1, [r7, #0]
   1c550:	6878      	ldr	r0, [r7, #4]
   1c552:	2300      	movs	r3, #0
   1c554:	9300      	str	r3, [sp, #0]
   1c556:	2300      	movs	r3, #0
   1c558:	2200      	movs	r2, #0
   1c55a:	4c03      	ldr	r4, [pc, #12]	; (1c568 <sd_mmc_spi_send_cmd+0x24>)
   1c55c:	47a0      	blx	r4
   1c55e:	0003      	movs	r3, r0
}
   1c560:	0018      	movs	r0, r3
   1c562:	46bd      	mov	sp, r7
   1c564:	b003      	add	sp, #12
   1c566:	bd90      	pop	{r4, r7, pc}
   1c568:	0001c56d 	.word	0x0001c56d

0001c56c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1c56c:	b590      	push	{r4, r7, lr}
   1c56e:	b089      	sub	sp, #36	; 0x24
   1c570:	af00      	add	r7, sp, #0
   1c572:	60f8      	str	r0, [r7, #12]
   1c574:	60b9      	str	r1, [r7, #8]
   1c576:	0019      	movs	r1, r3
   1c578:	1dbb      	adds	r3, r7, #6
   1c57a:	801a      	strh	r2, [r3, #0]
   1c57c:	1d3b      	adds	r3, r7, #4
   1c57e:	1c0a      	adds	r2, r1, #0
   1c580:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1c582:	231b      	movs	r3, #27
   1c584:	18fb      	adds	r3, r7, r3
   1c586:	22ff      	movs	r2, #255	; 0xff
   1c588:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1c58a:	231c      	movs	r3, #28
   1c58c:	18fb      	adds	r3, r7, r3
   1c58e:	22ff      	movs	r2, #255	; 0xff
   1c590:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c592:	4b72      	ldr	r3, [pc, #456]	; (1c75c <sd_mmc_spi_adtc_start+0x1f0>)
   1c594:	2200      	movs	r2, #0
   1c596:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1c598:	68fb      	ldr	r3, [r7, #12]
   1c59a:	b2db      	uxtb	r3, r3
   1c59c:	223f      	movs	r2, #63	; 0x3f
   1c59e:	4013      	ands	r3, r2
   1c5a0:	b2db      	uxtb	r3, r3
   1c5a2:	2240      	movs	r2, #64	; 0x40
   1c5a4:	4313      	orrs	r3, r2
   1c5a6:	b2da      	uxtb	r2, r3
   1c5a8:	2314      	movs	r3, #20
   1c5aa:	18fb      	adds	r3, r7, r3
   1c5ac:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1c5ae:	68bb      	ldr	r3, [r7, #8]
   1c5b0:	0e1b      	lsrs	r3, r3, #24
   1c5b2:	b2da      	uxtb	r2, r3
   1c5b4:	2314      	movs	r3, #20
   1c5b6:	18fb      	adds	r3, r7, r3
   1c5b8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1c5ba:	68bb      	ldr	r3, [r7, #8]
   1c5bc:	0c1b      	lsrs	r3, r3, #16
   1c5be:	b2da      	uxtb	r2, r3
   1c5c0:	2314      	movs	r3, #20
   1c5c2:	18fb      	adds	r3, r7, r3
   1c5c4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1c5c6:	68bb      	ldr	r3, [r7, #8]
   1c5c8:	0a1b      	lsrs	r3, r3, #8
   1c5ca:	b2da      	uxtb	r2, r3
   1c5cc:	2314      	movs	r3, #20
   1c5ce:	18fb      	adds	r3, r7, r3
   1c5d0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1c5d2:	68bb      	ldr	r3, [r7, #8]
   1c5d4:	b2da      	uxtb	r2, r3
   1c5d6:	2314      	movs	r3, #20
   1c5d8:	18fb      	adds	r3, r7, r3
   1c5da:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1c5dc:	2314      	movs	r3, #20
   1c5de:	18fb      	adds	r3, r7, r3
   1c5e0:	2105      	movs	r1, #5
   1c5e2:	0018      	movs	r0, r3
   1c5e4:	4b5e      	ldr	r3, [pc, #376]	; (1c760 <sd_mmc_spi_adtc_start+0x1f4>)
   1c5e6:	4798      	blx	r3
   1c5e8:	0003      	movs	r3, r0
   1c5ea:	001a      	movs	r2, r3
   1c5ec:	2314      	movs	r3, #20
   1c5ee:	18fb      	adds	r3, r7, r3
   1c5f0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1c5f2:	231b      	movs	r3, #27
   1c5f4:	18f9      	adds	r1, r7, r3
   1c5f6:	4b5b      	ldr	r3, [pc, #364]	; (1c764 <sd_mmc_spi_adtc_start+0x1f8>)
   1c5f8:	2201      	movs	r2, #1
   1c5fa:	0018      	movs	r0, r3
   1c5fc:	4b5a      	ldr	r3, [pc, #360]	; (1c768 <sd_mmc_spi_adtc_start+0x1fc>)
   1c5fe:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1c600:	2314      	movs	r3, #20
   1c602:	18f9      	adds	r1, r7, r3
   1c604:	4b57      	ldr	r3, [pc, #348]	; (1c764 <sd_mmc_spi_adtc_start+0x1f8>)
   1c606:	2206      	movs	r2, #6
   1c608:	0018      	movs	r0, r3
   1c60a:	4b57      	ldr	r3, [pc, #348]	; (1c768 <sd_mmc_spi_adtc_start+0x1fc>)
   1c60c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1c60e:	2313      	movs	r3, #19
   1c610:	18fb      	adds	r3, r7, r3
   1c612:	22ff      	movs	r2, #255	; 0xff
   1c614:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1c616:	231c      	movs	r3, #28
   1c618:	18fb      	adds	r3, r7, r3
   1c61a:	881b      	ldrh	r3, [r3, #0]
   1c61c:	2213      	movs	r2, #19
   1c61e:	18b9      	adds	r1, r7, r2
   1c620:	4850      	ldr	r0, [pc, #320]	; (1c764 <sd_mmc_spi_adtc_start+0x1f8>)
   1c622:	2201      	movs	r2, #1
   1c624:	4c51      	ldr	r4, [pc, #324]	; (1c76c <sd_mmc_spi_adtc_start+0x200>)
   1c626:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1c628:	231f      	movs	r3, #31
   1c62a:	18fb      	adds	r3, r7, r3
   1c62c:	2207      	movs	r2, #7
   1c62e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1c630:	231c      	movs	r3, #28
   1c632:	18fb      	adds	r3, r7, r3
   1c634:	881b      	ldrh	r3, [r3, #0]
   1c636:	2213      	movs	r2, #19
   1c638:	18b9      	adds	r1, r7, r2
   1c63a:	484a      	ldr	r0, [pc, #296]	; (1c764 <sd_mmc_spi_adtc_start+0x1f8>)
   1c63c:	2201      	movs	r2, #1
   1c63e:	4c4b      	ldr	r4, [pc, #300]	; (1c76c <sd_mmc_spi_adtc_start+0x200>)
   1c640:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1c642:	2313      	movs	r3, #19
   1c644:	18fb      	adds	r3, r7, r3
   1c646:	781b      	ldrb	r3, [r3, #0]
   1c648:	b25b      	sxtb	r3, r3
   1c64a:	2b00      	cmp	r3, #0
   1c64c:	da10      	bge.n	1c670 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1c64e:	231f      	movs	r3, #31
   1c650:	18fb      	adds	r3, r7, r3
   1c652:	221f      	movs	r2, #31
   1c654:	18ba      	adds	r2, r7, r2
   1c656:	7812      	ldrb	r2, [r2, #0]
   1c658:	3a01      	subs	r2, #1
   1c65a:	701a      	strb	r2, [r3, #0]
   1c65c:	231f      	movs	r3, #31
   1c65e:	18fb      	adds	r3, r7, r3
   1c660:	781b      	ldrb	r3, [r3, #0]
   1c662:	2b00      	cmp	r3, #0
   1c664:	d1e4      	bne.n	1c630 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1c666:	4b3d      	ldr	r3, [pc, #244]	; (1c75c <sd_mmc_spi_adtc_start+0x1f0>)
   1c668:	2202      	movs	r2, #2
   1c66a:	701a      	strb	r2, [r3, #0]
			return false;
   1c66c:	2300      	movs	r3, #0
   1c66e:	e070      	b.n	1c752 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1c670:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1c672:	2313      	movs	r3, #19
   1c674:	18fb      	adds	r3, r7, r3
   1c676:	781b      	ldrb	r3, [r3, #0]
   1c678:	001a      	movs	r2, r3
   1c67a:	4b3d      	ldr	r3, [pc, #244]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c67c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1c67e:	2313      	movs	r3, #19
   1c680:	18fb      	adds	r3, r7, r3
   1c682:	781b      	ldrb	r3, [r3, #0]
   1c684:	001a      	movs	r2, r3
   1c686:	2308      	movs	r3, #8
   1c688:	4013      	ands	r3, r2
   1c68a:	d004      	beq.n	1c696 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1c68c:	4b33      	ldr	r3, [pc, #204]	; (1c75c <sd_mmc_spi_adtc_start+0x1f0>)
   1c68e:	2206      	movs	r2, #6
   1c690:	701a      	strb	r2, [r3, #0]
		return false;
   1c692:	2300      	movs	r3, #0
   1c694:	e05d      	b.n	1c752 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1c696:	2313      	movs	r3, #19
   1c698:	18fb      	adds	r3, r7, r3
   1c69a:	781b      	ldrb	r3, [r3, #0]
   1c69c:	001a      	movs	r2, r3
   1c69e:	2304      	movs	r3, #4
   1c6a0:	4013      	ands	r3, r2
   1c6a2:	d004      	beq.n	1c6ae <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1c6a4:	4b2d      	ldr	r3, [pc, #180]	; (1c75c <sd_mmc_spi_adtc_start+0x1f0>)
   1c6a6:	2209      	movs	r2, #9
   1c6a8:	701a      	strb	r2, [r3, #0]
		return false;
   1c6aa:	2300      	movs	r3, #0
   1c6ac:	e051      	b.n	1c752 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1c6ae:	2313      	movs	r3, #19
   1c6b0:	18fb      	adds	r3, r7, r3
   1c6b2:	781b      	ldrb	r3, [r3, #0]
   1c6b4:	001a      	movs	r2, r3
   1c6b6:	2301      	movs	r3, #1
   1c6b8:	439a      	bics	r2, r3
   1c6ba:	1e13      	subs	r3, r2, #0
   1c6bc:	d004      	beq.n	1c6c8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1c6be:	4b27      	ldr	r3, [pc, #156]	; (1c75c <sd_mmc_spi_adtc_start+0x1f0>)
   1c6c0:	2201      	movs	r2, #1
   1c6c2:	701a      	strb	r2, [r3, #0]
		return false;
   1c6c4:	2300      	movs	r3, #0
   1c6c6:	e044      	b.n	1c752 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1c6c8:	68fa      	ldr	r2, [r7, #12]
   1c6ca:	2380      	movs	r3, #128	; 0x80
   1c6cc:	019b      	lsls	r3, r3, #6
   1c6ce:	4013      	ands	r3, r2
   1c6d0:	d00d      	beq.n	1c6ee <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1c6d2:	4b28      	ldr	r3, [pc, #160]	; (1c774 <sd_mmc_spi_adtc_start+0x208>)
   1c6d4:	4798      	blx	r3
   1c6d6:	0003      	movs	r3, r0
   1c6d8:	001a      	movs	r2, r3
   1c6da:	2301      	movs	r3, #1
   1c6dc:	4053      	eors	r3, r2
   1c6de:	b2db      	uxtb	r3, r3
   1c6e0:	2b00      	cmp	r3, #0
   1c6e2:	d004      	beq.n	1c6ee <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1c6e4:	4b1d      	ldr	r3, [pc, #116]	; (1c75c <sd_mmc_spi_adtc_start+0x1f0>)
   1c6e6:	2203      	movs	r2, #3
   1c6e8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1c6ea:	2300      	movs	r3, #0
   1c6ec:	e031      	b.n	1c752 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1c6ee:	68fa      	ldr	r2, [r7, #12]
   1c6f0:	2380      	movs	r3, #128	; 0x80
   1c6f2:	009b      	lsls	r3, r3, #2
   1c6f4:	4013      	ands	r3, r2
   1c6f6:	d00e      	beq.n	1c716 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1c6f8:	4b1d      	ldr	r3, [pc, #116]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c6fa:	2200      	movs	r2, #0
   1c6fc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1c6fe:	231c      	movs	r3, #28
   1c700:	18fb      	adds	r3, r7, r3
   1c702:	881b      	ldrh	r3, [r3, #0]
   1c704:	491a      	ldr	r1, [pc, #104]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c706:	4817      	ldr	r0, [pc, #92]	; (1c764 <sd_mmc_spi_adtc_start+0x1f8>)
   1c708:	2201      	movs	r2, #1
   1c70a:	4c18      	ldr	r4, [pc, #96]	; (1c76c <sd_mmc_spi_adtc_start+0x200>)
   1c70c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1c70e:	4b18      	ldr	r3, [pc, #96]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c710:	681a      	ldr	r2, [r3, #0]
   1c712:	4b17      	ldr	r3, [pc, #92]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c714:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1c716:	68fa      	ldr	r2, [r7, #12]
   1c718:	2380      	movs	r3, #128	; 0x80
   1c71a:	00db      	lsls	r3, r3, #3
   1c71c:	4013      	ands	r3, r2
   1c71e:	d00c      	beq.n	1c73a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1c720:	231c      	movs	r3, #28
   1c722:	18fb      	adds	r3, r7, r3
   1c724:	881b      	ldrh	r3, [r3, #0]
   1c726:	4912      	ldr	r1, [pc, #72]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c728:	480e      	ldr	r0, [pc, #56]	; (1c764 <sd_mmc_spi_adtc_start+0x1f8>)
   1c72a:	2204      	movs	r2, #4
   1c72c:	4c0f      	ldr	r4, [pc, #60]	; (1c76c <sd_mmc_spi_adtc_start+0x200>)
   1c72e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1c730:	4b0f      	ldr	r3, [pc, #60]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c732:	681b      	ldr	r3, [r3, #0]
   1c734:	ba1a      	rev	r2, r3
   1c736:	4b0e      	ldr	r3, [pc, #56]	; (1c770 <sd_mmc_spi_adtc_start+0x204>)
   1c738:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1c73a:	4b0f      	ldr	r3, [pc, #60]	; (1c778 <sd_mmc_spi_adtc_start+0x20c>)
   1c73c:	1dba      	adds	r2, r7, #6
   1c73e:	8812      	ldrh	r2, [r2, #0]
   1c740:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1c742:	4b0e      	ldr	r3, [pc, #56]	; (1c77c <sd_mmc_spi_adtc_start+0x210>)
   1c744:	1d3a      	adds	r2, r7, #4
   1c746:	8812      	ldrh	r2, [r2, #0]
   1c748:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1c74a:	4b0d      	ldr	r3, [pc, #52]	; (1c780 <sd_mmc_spi_adtc_start+0x214>)
   1c74c:	2200      	movs	r2, #0
   1c74e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1c750:	2301      	movs	r3, #1
}
   1c752:	0018      	movs	r0, r3
   1c754:	46bd      	mov	sp, r7
   1c756:	b009      	add	sp, #36	; 0x24
   1c758:	bd90      	pop	{r4, r7, pc}
   1c75a:	46c0      	nop			; (mov r8, r8)
   1c75c:	20003d0f 	.word	0x20003d0f
   1c760:	0001c00d 	.word	0x0001c00d
   1c764:	20003ccc 	.word	0x20003ccc
   1c768:	00024b71 	.word	0x00024b71
   1c76c:	0002494d 	.word	0x0002494d
   1c770:	20003d10 	.word	0x20003d10
   1c774:	0001c0c9 	.word	0x0001c0c9
   1c778:	20003d18 	.word	0x20003d18
   1c77c:	20003d1a 	.word	0x20003d1a
   1c780:	20003d14 	.word	0x20003d14

0001c784 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1c784:	b580      	push	{r7, lr}
   1c786:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1c788:	4b02      	ldr	r3, [pc, #8]	; (1c794 <sd_mmc_spi_get_response+0x10>)
   1c78a:	681b      	ldr	r3, [r3, #0]
}
   1c78c:	0018      	movs	r0, r3
   1c78e:	46bd      	mov	sp, r7
   1c790:	bd80      	pop	{r7, pc}
   1c792:	46c0      	nop			; (mov r8, r8)
   1c794:	20003d10 	.word	0x20003d10

0001c798 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1c798:	b590      	push	{r4, r7, lr}
   1c79a:	b085      	sub	sp, #20
   1c79c:	af00      	add	r7, sp, #0
   1c79e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1c7a0:	230e      	movs	r3, #14
   1c7a2:	18fb      	adds	r3, r7, r3
   1c7a4:	22ff      	movs	r2, #255	; 0xff
   1c7a6:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c7a8:	4b1c      	ldr	r3, [pc, #112]	; (1c81c <sd_mmc_spi_read_word+0x84>)
   1c7aa:	2200      	movs	r2, #0
   1c7ac:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1c7ae:	4b1c      	ldr	r3, [pc, #112]	; (1c820 <sd_mmc_spi_read_word+0x88>)
   1c7b0:	681a      	ldr	r2, [r3, #0]
   1c7b2:	4b1c      	ldr	r3, [pc, #112]	; (1c824 <sd_mmc_spi_read_word+0x8c>)
   1c7b4:	881b      	ldrh	r3, [r3, #0]
   1c7b6:	0019      	movs	r1, r3
   1c7b8:	4b1b      	ldr	r3, [pc, #108]	; (1c828 <sd_mmc_spi_read_word+0x90>)
   1c7ba:	0010      	movs	r0, r2
   1c7bc:	4798      	blx	r3
   1c7be:	1e0b      	subs	r3, r1, #0
   1c7c0:	d10a      	bne.n	1c7d8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1c7c2:	4b1a      	ldr	r3, [pc, #104]	; (1c82c <sd_mmc_spi_read_word+0x94>)
   1c7c4:	4798      	blx	r3
   1c7c6:	0003      	movs	r3, r0
   1c7c8:	001a      	movs	r2, r3
   1c7ca:	2301      	movs	r3, #1
   1c7cc:	4053      	eors	r3, r2
   1c7ce:	b2db      	uxtb	r3, r3
   1c7d0:	2b00      	cmp	r3, #0
   1c7d2:	d001      	beq.n	1c7d8 <sd_mmc_spi_read_word+0x40>
			return false;
   1c7d4:	2300      	movs	r3, #0
   1c7d6:	e01d      	b.n	1c814 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1c7d8:	230e      	movs	r3, #14
   1c7da:	18fb      	adds	r3, r7, r3
   1c7dc:	881b      	ldrh	r3, [r3, #0]
   1c7de:	1d39      	adds	r1, r7, #4
   1c7e0:	4813      	ldr	r0, [pc, #76]	; (1c830 <sd_mmc_spi_read_word+0x98>)
   1c7e2:	2204      	movs	r2, #4
   1c7e4:	4c13      	ldr	r4, [pc, #76]	; (1c834 <sd_mmc_spi_read_word+0x9c>)
   1c7e6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1c7e8:	687b      	ldr	r3, [r7, #4]
   1c7ea:	687a      	ldr	r2, [r7, #4]
   1c7ec:	6812      	ldr	r2, [r2, #0]
   1c7ee:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1c7f0:	4b0b      	ldr	r3, [pc, #44]	; (1c820 <sd_mmc_spi_read_word+0x88>)
   1c7f2:	681b      	ldr	r3, [r3, #0]
   1c7f4:	1d1a      	adds	r2, r3, #4
   1c7f6:	4b0a      	ldr	r3, [pc, #40]	; (1c820 <sd_mmc_spi_read_word+0x88>)
   1c7f8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1c7fa:	4b09      	ldr	r3, [pc, #36]	; (1c820 <sd_mmc_spi_read_word+0x88>)
   1c7fc:	681a      	ldr	r2, [r3, #0]
   1c7fe:	4b09      	ldr	r3, [pc, #36]	; (1c824 <sd_mmc_spi_read_word+0x8c>)
   1c800:	881b      	ldrh	r3, [r3, #0]
   1c802:	0019      	movs	r1, r3
   1c804:	4b08      	ldr	r3, [pc, #32]	; (1c828 <sd_mmc_spi_read_word+0x90>)
   1c806:	0010      	movs	r0, r2
   1c808:	4798      	blx	r3
   1c80a:	1e0b      	subs	r3, r1, #0
   1c80c:	d101      	bne.n	1c812 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1c80e:	4b0a      	ldr	r3, [pc, #40]	; (1c838 <sd_mmc_spi_read_word+0xa0>)
   1c810:	4798      	blx	r3
	}
	return true;
   1c812:	2301      	movs	r3, #1
}
   1c814:	0018      	movs	r0, r3
   1c816:	46bd      	mov	sp, r7
   1c818:	b005      	add	sp, #20
   1c81a:	bd90      	pop	{r4, r7, pc}
   1c81c:	20003d0f 	.word	0x20003d0f
   1c820:	20003d14 	.word	0x20003d14
   1c824:	20003d18 	.word	0x20003d18
   1c828:	0002fef9 	.word	0x0002fef9
   1c82c:	0001c135 	.word	0x0001c135
   1c830:	20003ccc 	.word	0x20003ccc
   1c834:	0002494d 	.word	0x0002494d
   1c838:	0001c1b9 	.word	0x0001c1b9

0001c83c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1c83c:	b590      	push	{r4, r7, lr}
   1c83e:	b085      	sub	sp, #20
   1c840:	af00      	add	r7, sp, #0
   1c842:	6078      	str	r0, [r7, #4]
   1c844:	000a      	movs	r2, r1
   1c846:	1cbb      	adds	r3, r7, #2
   1c848:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1c84a:	230a      	movs	r3, #10
   1c84c:	18fb      	adds	r3, r7, r3
   1c84e:	22ff      	movs	r2, #255	; 0xff
   1c850:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c852:	4b1c      	ldr	r3, [pc, #112]	; (1c8c4 <sd_mmc_spi_start_read_blocks+0x88>)
   1c854:	2200      	movs	r2, #0
   1c856:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1c858:	2300      	movs	r3, #0
   1c85a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1c85c:	e025      	b.n	1c8aa <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1c85e:	4b1a      	ldr	r3, [pc, #104]	; (1c8c8 <sd_mmc_spi_start_read_blocks+0x8c>)
   1c860:	4798      	blx	r3
   1c862:	0003      	movs	r3, r0
   1c864:	001a      	movs	r2, r3
   1c866:	2301      	movs	r3, #1
   1c868:	4053      	eors	r3, r2
   1c86a:	b2db      	uxtb	r3, r3
   1c86c:	2b00      	cmp	r3, #0
   1c86e:	d001      	beq.n	1c874 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1c870:	2300      	movs	r3, #0
   1c872:	e022      	b.n	1c8ba <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1c874:	687a      	ldr	r2, [r7, #4]
   1c876:	68fb      	ldr	r3, [r7, #12]
   1c878:	18d1      	adds	r1, r2, r3
   1c87a:	4b14      	ldr	r3, [pc, #80]	; (1c8cc <sd_mmc_spi_start_read_blocks+0x90>)
   1c87c:	881a      	ldrh	r2, [r3, #0]
   1c87e:	230a      	movs	r3, #10
   1c880:	18fb      	adds	r3, r7, r3
   1c882:	881b      	ldrh	r3, [r3, #0]
   1c884:	4812      	ldr	r0, [pc, #72]	; (1c8d0 <sd_mmc_spi_start_read_blocks+0x94>)
   1c886:	4c13      	ldr	r4, [pc, #76]	; (1c8d4 <sd_mmc_spi_start_read_blocks+0x98>)
   1c888:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1c88a:	4b10      	ldr	r3, [pc, #64]	; (1c8cc <sd_mmc_spi_start_read_blocks+0x90>)
   1c88c:	881b      	ldrh	r3, [r3, #0]
   1c88e:	001a      	movs	r2, r3
   1c890:	68fb      	ldr	r3, [r7, #12]
   1c892:	189b      	adds	r3, r3, r2
   1c894:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1c896:	4b0d      	ldr	r3, [pc, #52]	; (1c8cc <sd_mmc_spi_start_read_blocks+0x90>)
   1c898:	881b      	ldrh	r3, [r3, #0]
   1c89a:	001a      	movs	r2, r3
   1c89c:	4b0e      	ldr	r3, [pc, #56]	; (1c8d8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1c89e:	681b      	ldr	r3, [r3, #0]
   1c8a0:	18d2      	adds	r2, r2, r3
   1c8a2:	4b0d      	ldr	r3, [pc, #52]	; (1c8d8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1c8a4:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1c8a6:	4b0d      	ldr	r3, [pc, #52]	; (1c8dc <sd_mmc_spi_start_read_blocks+0xa0>)
   1c8a8:	4798      	blx	r3
	while (nb_block--) {
   1c8aa:	1cbb      	adds	r3, r7, #2
   1c8ac:	881b      	ldrh	r3, [r3, #0]
   1c8ae:	1cba      	adds	r2, r7, #2
   1c8b0:	1e59      	subs	r1, r3, #1
   1c8b2:	8011      	strh	r1, [r2, #0]
   1c8b4:	2b00      	cmp	r3, #0
   1c8b6:	d1d2      	bne.n	1c85e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1c8b8:	2301      	movs	r3, #1
}
   1c8ba:	0018      	movs	r0, r3
   1c8bc:	46bd      	mov	sp, r7
   1c8be:	b005      	add	sp, #20
   1c8c0:	bd90      	pop	{r4, r7, pc}
   1c8c2:	46c0      	nop			; (mov r8, r8)
   1c8c4:	20003d0f 	.word	0x20003d0f
   1c8c8:	0001c135 	.word	0x0001c135
   1c8cc:	20003d18 	.word	0x20003d18
   1c8d0:	20003ccc 	.word	0x20003ccc
   1c8d4:	0002494d 	.word	0x0002494d
   1c8d8:	20003d14 	.word	0x20003d14
   1c8dc:	0001c1b9 	.word	0x0001c1b9

0001c8e0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1c8e0:	b580      	push	{r7, lr}
   1c8e2:	af00      	add	r7, sp, #0
	return true;
   1c8e4:	2301      	movs	r3, #1
}
   1c8e6:	0018      	movs	r0, r3
   1c8e8:	46bd      	mov	sp, r7
   1c8ea:	bd80      	pop	{r7, pc}

0001c8ec <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1c8ec:	b580      	push	{r7, lr}
   1c8ee:	b084      	sub	sp, #16
   1c8f0:	af00      	add	r7, sp, #0
   1c8f2:	6078      	str	r0, [r7, #4]
   1c8f4:	000a      	movs	r2, r1
   1c8f6:	1cbb      	adds	r3, r7, #2
   1c8f8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1c8fa:	4b24      	ldr	r3, [pc, #144]	; (1c98c <sd_mmc_spi_start_write_blocks+0xa0>)
   1c8fc:	2200      	movs	r2, #0
   1c8fe:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1c900:	2300      	movs	r3, #0
   1c902:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1c904:	e035      	b.n	1c972 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1c906:	4b22      	ldr	r3, [pc, #136]	; (1c990 <sd_mmc_spi_start_write_blocks+0xa4>)
   1c908:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1c90a:	687a      	ldr	r2, [r7, #4]
   1c90c:	68fb      	ldr	r3, [r7, #12]
   1c90e:	18d1      	adds	r1, r2, r3
   1c910:	4b20      	ldr	r3, [pc, #128]	; (1c994 <sd_mmc_spi_start_write_blocks+0xa8>)
   1c912:	881a      	ldrh	r2, [r3, #0]
   1c914:	4b20      	ldr	r3, [pc, #128]	; (1c998 <sd_mmc_spi_start_write_blocks+0xac>)
   1c916:	0018      	movs	r0, r3
   1c918:	4b20      	ldr	r3, [pc, #128]	; (1c99c <sd_mmc_spi_start_write_blocks+0xb0>)
   1c91a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1c91c:	4b1d      	ldr	r3, [pc, #116]	; (1c994 <sd_mmc_spi_start_write_blocks+0xa8>)
   1c91e:	881b      	ldrh	r3, [r3, #0]
   1c920:	001a      	movs	r2, r3
   1c922:	68fb      	ldr	r3, [r7, #12]
   1c924:	189b      	adds	r3, r3, r2
   1c926:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1c928:	4b1a      	ldr	r3, [pc, #104]	; (1c994 <sd_mmc_spi_start_write_blocks+0xa8>)
   1c92a:	881b      	ldrh	r3, [r3, #0]
   1c92c:	001a      	movs	r2, r3
   1c92e:	4b1c      	ldr	r3, [pc, #112]	; (1c9a0 <sd_mmc_spi_start_write_blocks+0xb4>)
   1c930:	681b      	ldr	r3, [r3, #0]
   1c932:	18d2      	adds	r2, r2, r3
   1c934:	4b1a      	ldr	r3, [pc, #104]	; (1c9a0 <sd_mmc_spi_start_write_blocks+0xb4>)
   1c936:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1c938:	4b1a      	ldr	r3, [pc, #104]	; (1c9a4 <sd_mmc_spi_start_write_blocks+0xb8>)
   1c93a:	4798      	blx	r3
   1c93c:	0003      	movs	r3, r0
   1c93e:	001a      	movs	r2, r3
   1c940:	2301      	movs	r3, #1
   1c942:	4053      	eors	r3, r2
   1c944:	b2db      	uxtb	r3, r3
   1c946:	2b00      	cmp	r3, #0
   1c948:	d001      	beq.n	1c94e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1c94a:	2300      	movs	r3, #0
   1c94c:	e019      	b.n	1c982 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1c94e:	1cbb      	adds	r3, r7, #2
   1c950:	881b      	ldrh	r3, [r3, #0]
   1c952:	2b00      	cmp	r3, #0
   1c954:	d00d      	beq.n	1c972 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1c956:	4b14      	ldr	r3, [pc, #80]	; (1c9a8 <sd_mmc_spi_start_write_blocks+0xbc>)
   1c958:	4798      	blx	r3
   1c95a:	0003      	movs	r3, r0
   1c95c:	001a      	movs	r2, r3
   1c95e:	2301      	movs	r3, #1
   1c960:	4053      	eors	r3, r2
   1c962:	b2db      	uxtb	r3, r3
   1c964:	2b00      	cmp	r3, #0
   1c966:	d004      	beq.n	1c972 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1c968:	4b08      	ldr	r3, [pc, #32]	; (1c98c <sd_mmc_spi_start_write_blocks+0xa0>)
   1c96a:	2205      	movs	r2, #5
   1c96c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1c96e:	2300      	movs	r3, #0
   1c970:	e007      	b.n	1c982 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1c972:	1cbb      	adds	r3, r7, #2
   1c974:	881b      	ldrh	r3, [r3, #0]
   1c976:	1cba      	adds	r2, r7, #2
   1c978:	1e59      	subs	r1, r3, #1
   1c97a:	8011      	strh	r1, [r2, #0]
   1c97c:	2b00      	cmp	r3, #0
   1c97e:	d1c2      	bne.n	1c906 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1c980:	2301      	movs	r3, #1
}
   1c982:	0018      	movs	r0, r3
   1c984:	46bd      	mov	sp, r7
   1c986:	b004      	add	sp, #16
   1c988:	bd80      	pop	{r7, pc}
   1c98a:	46c0      	nop			; (mov r8, r8)
   1c98c:	20003d0f 	.word	0x20003d0f
   1c990:	0001c1e5 	.word	0x0001c1e5
   1c994:	20003d18 	.word	0x20003d18
   1c998:	20003ccc 	.word	0x20003ccc
   1c99c:	00024b71 	.word	0x00024b71
   1c9a0:	20003d14 	.word	0x20003d14
   1c9a4:	0001c235 	.word	0x0001c235
   1c9a8:	0001c0c9 	.word	0x0001c0c9

0001c9ac <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1c9ac:	b580      	push	{r7, lr}
   1c9ae:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1c9b0:	4b09      	ldr	r3, [pc, #36]	; (1c9d8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1c9b2:	4798      	blx	r3
   1c9b4:	0003      	movs	r3, r0
   1c9b6:	001a      	movs	r2, r3
   1c9b8:	2301      	movs	r3, #1
   1c9ba:	4053      	eors	r3, r2
   1c9bc:	b2db      	uxtb	r3, r3
   1c9be:	2b00      	cmp	r3, #0
   1c9c0:	d004      	beq.n	1c9cc <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1c9c2:	4b06      	ldr	r3, [pc, #24]	; (1c9dc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1c9c4:	2205      	movs	r2, #5
   1c9c6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1c9c8:	2300      	movs	r3, #0
   1c9ca:	e002      	b.n	1c9d2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1c9cc:	4b04      	ldr	r3, [pc, #16]	; (1c9e0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1c9ce:	4798      	blx	r3
   1c9d0:	0003      	movs	r3, r0
}
   1c9d2:	0018      	movs	r0, r3
   1c9d4:	46bd      	mov	sp, r7
   1c9d6:	bd80      	pop	{r7, pc}
   1c9d8:	0001c0c9 	.word	0x0001c0c9
   1c9dc:	20003d0f 	.word	0x20003d0f
   1c9e0:	0001c2c9 	.word	0x0001c2c9

0001c9e4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1c9e4:	b580      	push	{r7, lr}
   1c9e6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1c9e8:	2000      	movs	r0, #0
   1c9ea:	4b0f      	ldr	r3, [pc, #60]	; (1ca28 <delay_init+0x44>)
   1c9ec:	4798      	blx	r3
   1c9ee:	0002      	movs	r2, r0
   1c9f0:	4b0e      	ldr	r3, [pc, #56]	; (1ca2c <delay_init+0x48>)
   1c9f2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1c9f4:	4b0d      	ldr	r3, [pc, #52]	; (1ca2c <delay_init+0x48>)
   1c9f6:	6818      	ldr	r0, [r3, #0]
   1c9f8:	4b0d      	ldr	r3, [pc, #52]	; (1ca30 <delay_init+0x4c>)
   1c9fa:	22fa      	movs	r2, #250	; 0xfa
   1c9fc:	0091      	lsls	r1, r2, #2
   1c9fe:	4798      	blx	r3
   1ca00:	0003      	movs	r3, r0
   1ca02:	001a      	movs	r2, r3
   1ca04:	4b09      	ldr	r3, [pc, #36]	; (1ca2c <delay_init+0x48>)
   1ca06:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1ca08:	4b08      	ldr	r3, [pc, #32]	; (1ca2c <delay_init+0x48>)
   1ca0a:	6818      	ldr	r0, [r3, #0]
   1ca0c:	4b08      	ldr	r3, [pc, #32]	; (1ca30 <delay_init+0x4c>)
   1ca0e:	22fa      	movs	r2, #250	; 0xfa
   1ca10:	0091      	lsls	r1, r2, #2
   1ca12:	4798      	blx	r3
   1ca14:	0003      	movs	r3, r0
   1ca16:	001a      	movs	r2, r3
   1ca18:	4b06      	ldr	r3, [pc, #24]	; (1ca34 <delay_init+0x50>)
   1ca1a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1ca1c:	4b06      	ldr	r3, [pc, #24]	; (1ca38 <delay_init+0x54>)
   1ca1e:	2205      	movs	r2, #5
   1ca20:	601a      	str	r2, [r3, #0]
}
   1ca22:	46c0      	nop			; (mov r8, r8)
   1ca24:	46bd      	mov	sp, r7
   1ca26:	bd80      	pop	{r7, pc}
   1ca28:	000268b5 	.word	0x000268b5
   1ca2c:	200000c0 	.word	0x200000c0
   1ca30:	0002fded 	.word	0x0002fded
   1ca34:	200000c4 	.word	0x200000c4
   1ca38:	e000e010 	.word	0xe000e010

0001ca3c <system_pinmux_get_group_from_gpio_pin>:
{
   1ca3c:	b580      	push	{r7, lr}
   1ca3e:	b084      	sub	sp, #16
   1ca40:	af00      	add	r7, sp, #0
   1ca42:	0002      	movs	r2, r0
   1ca44:	1dfb      	adds	r3, r7, #7
   1ca46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ca48:	230f      	movs	r3, #15
   1ca4a:	18fb      	adds	r3, r7, r3
   1ca4c:	1dfa      	adds	r2, r7, #7
   1ca4e:	7812      	ldrb	r2, [r2, #0]
   1ca50:	09d2      	lsrs	r2, r2, #7
   1ca52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ca54:	230e      	movs	r3, #14
   1ca56:	18fb      	adds	r3, r7, r3
   1ca58:	1dfa      	adds	r2, r7, #7
   1ca5a:	7812      	ldrb	r2, [r2, #0]
   1ca5c:	0952      	lsrs	r2, r2, #5
   1ca5e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ca60:	4b0d      	ldr	r3, [pc, #52]	; (1ca98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ca62:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1ca64:	230f      	movs	r3, #15
   1ca66:	18fb      	adds	r3, r7, r3
   1ca68:	781b      	ldrb	r3, [r3, #0]
   1ca6a:	2b00      	cmp	r3, #0
   1ca6c:	d10f      	bne.n	1ca8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ca6e:	230f      	movs	r3, #15
   1ca70:	18fb      	adds	r3, r7, r3
   1ca72:	781b      	ldrb	r3, [r3, #0]
   1ca74:	009b      	lsls	r3, r3, #2
   1ca76:	2210      	movs	r2, #16
   1ca78:	4694      	mov	ip, r2
   1ca7a:	44bc      	add	ip, r7
   1ca7c:	4463      	add	r3, ip
   1ca7e:	3b08      	subs	r3, #8
   1ca80:	681a      	ldr	r2, [r3, #0]
   1ca82:	230e      	movs	r3, #14
   1ca84:	18fb      	adds	r3, r7, r3
   1ca86:	781b      	ldrb	r3, [r3, #0]
   1ca88:	01db      	lsls	r3, r3, #7
   1ca8a:	18d3      	adds	r3, r2, r3
   1ca8c:	e000      	b.n	1ca90 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1ca8e:	2300      	movs	r3, #0
}
   1ca90:	0018      	movs	r0, r3
   1ca92:	46bd      	mov	sp, r7
   1ca94:	b004      	add	sp, #16
   1ca96:	bd80      	pop	{r7, pc}
   1ca98:	41004400 	.word	0x41004400

0001ca9c <system_interrupt_enable_global>:
{
   1ca9c:	b580      	push	{r7, lr}
   1ca9e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1caa0:	4b04      	ldr	r3, [pc, #16]	; (1cab4 <system_interrupt_enable_global+0x18>)
   1caa2:	2201      	movs	r2, #1
   1caa4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1caa6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1caaa:	b662      	cpsie	i
}
   1caac:	46c0      	nop			; (mov r8, r8)
   1caae:	46bd      	mov	sp, r7
   1cab0:	bd80      	pop	{r7, pc}
   1cab2:	46c0      	nop			; (mov r8, r8)
   1cab4:	200000ca 	.word	0x200000ca

0001cab8 <port_get_group_from_gpio_pin>:
{
   1cab8:	b580      	push	{r7, lr}
   1caba:	b082      	sub	sp, #8
   1cabc:	af00      	add	r7, sp, #0
   1cabe:	0002      	movs	r2, r0
   1cac0:	1dfb      	adds	r3, r7, #7
   1cac2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1cac4:	1dfb      	adds	r3, r7, #7
   1cac6:	781b      	ldrb	r3, [r3, #0]
   1cac8:	0018      	movs	r0, r3
   1caca:	4b03      	ldr	r3, [pc, #12]	; (1cad8 <port_get_group_from_gpio_pin+0x20>)
   1cacc:	4798      	blx	r3
   1cace:	0003      	movs	r3, r0
}
   1cad0:	0018      	movs	r0, r3
   1cad2:	46bd      	mov	sp, r7
   1cad4:	b002      	add	sp, #8
   1cad6:	bd80      	pop	{r7, pc}
   1cad8:	0001ca3d 	.word	0x0001ca3d

0001cadc <port_get_config_defaults>:
{
   1cadc:	b580      	push	{r7, lr}
   1cade:	b082      	sub	sp, #8
   1cae0:	af00      	add	r7, sp, #0
   1cae2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1cae4:	687b      	ldr	r3, [r7, #4]
   1cae6:	2200      	movs	r2, #0
   1cae8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1caea:	687b      	ldr	r3, [r7, #4]
   1caec:	2201      	movs	r2, #1
   1caee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1caf0:	687b      	ldr	r3, [r7, #4]
   1caf2:	2200      	movs	r2, #0
   1caf4:	709a      	strb	r2, [r3, #2]
}
   1caf6:	46c0      	nop			; (mov r8, r8)
   1caf8:	46bd      	mov	sp, r7
   1cafa:	b002      	add	sp, #8
   1cafc:	bd80      	pop	{r7, pc}
	...

0001cb00 <port_pin_set_output_level>:
{
   1cb00:	b580      	push	{r7, lr}
   1cb02:	b084      	sub	sp, #16
   1cb04:	af00      	add	r7, sp, #0
   1cb06:	0002      	movs	r2, r0
   1cb08:	1dfb      	adds	r3, r7, #7
   1cb0a:	701a      	strb	r2, [r3, #0]
   1cb0c:	1dbb      	adds	r3, r7, #6
   1cb0e:	1c0a      	adds	r2, r1, #0
   1cb10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1cb12:	1dfb      	adds	r3, r7, #7
   1cb14:	781b      	ldrb	r3, [r3, #0]
   1cb16:	0018      	movs	r0, r3
   1cb18:	4b0d      	ldr	r3, [pc, #52]	; (1cb50 <port_pin_set_output_level+0x50>)
   1cb1a:	4798      	blx	r3
   1cb1c:	0003      	movs	r3, r0
   1cb1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1cb20:	1dfb      	adds	r3, r7, #7
   1cb22:	781b      	ldrb	r3, [r3, #0]
   1cb24:	221f      	movs	r2, #31
   1cb26:	4013      	ands	r3, r2
   1cb28:	2201      	movs	r2, #1
   1cb2a:	409a      	lsls	r2, r3
   1cb2c:	0013      	movs	r3, r2
   1cb2e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1cb30:	1dbb      	adds	r3, r7, #6
   1cb32:	781b      	ldrb	r3, [r3, #0]
   1cb34:	2b00      	cmp	r3, #0
   1cb36:	d003      	beq.n	1cb40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1cb38:	68fb      	ldr	r3, [r7, #12]
   1cb3a:	68ba      	ldr	r2, [r7, #8]
   1cb3c:	619a      	str	r2, [r3, #24]
}
   1cb3e:	e002      	b.n	1cb46 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1cb40:	68fb      	ldr	r3, [r7, #12]
   1cb42:	68ba      	ldr	r2, [r7, #8]
   1cb44:	615a      	str	r2, [r3, #20]
}
   1cb46:	46c0      	nop			; (mov r8, r8)
   1cb48:	46bd      	mov	sp, r7
   1cb4a:	b004      	add	sp, #16
   1cb4c:	bd80      	pop	{r7, pc}
   1cb4e:	46c0      	nop			; (mov r8, r8)
   1cb50:	0001cab9 	.word	0x0001cab9

0001cb54 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1cb54:	b580      	push	{r7, lr}
   1cb56:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1cb58:	4b04      	ldr	r3, [pc, #16]	; (1cb6c <chip_isr+0x18>)
   1cb5a:	681b      	ldr	r3, [r3, #0]
   1cb5c:	2b00      	cmp	r3, #0
   1cb5e:	d002      	beq.n	1cb66 <chip_isr+0x12>
		gpfIsr();
   1cb60:	4b02      	ldr	r3, [pc, #8]	; (1cb6c <chip_isr+0x18>)
   1cb62:	681b      	ldr	r3, [r3, #0]
   1cb64:	4798      	blx	r3
	}
}
   1cb66:	46c0      	nop			; (mov r8, r8)
   1cb68:	46bd      	mov	sp, r7
   1cb6a:	bd80      	pop	{r7, pc}
   1cb6c:	20003d1c 	.word	0x20003d1c

0001cb70 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1cb70:	b580      	push	{r7, lr}
   1cb72:	b082      	sub	sp, #8
   1cb74:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1cb76:	1d3b      	adds	r3, r7, #4
   1cb78:	0018      	movs	r0, r3
   1cb7a:	4b10      	ldr	r3, [pc, #64]	; (1cbbc <init_chip_pins+0x4c>)
   1cb7c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1cb7e:	1d3b      	adds	r3, r7, #4
   1cb80:	2201      	movs	r2, #1
   1cb82:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1cb84:	1d3b      	adds	r3, r7, #4
   1cb86:	0019      	movs	r1, r3
   1cb88:	201b      	movs	r0, #27
   1cb8a:	4b0d      	ldr	r3, [pc, #52]	; (1cbc0 <init_chip_pins+0x50>)
   1cb8c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1cb8e:	1d3b      	adds	r3, r7, #4
   1cb90:	0019      	movs	r1, r3
   1cb92:	201c      	movs	r0, #28
   1cb94:	4b0a      	ldr	r3, [pc, #40]	; (1cbc0 <init_chip_pins+0x50>)
   1cb96:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1cb98:	1d3b      	adds	r3, r7, #4
   1cb9a:	0019      	movs	r1, r3
   1cb9c:	2028      	movs	r0, #40	; 0x28
   1cb9e:	4b08      	ldr	r3, [pc, #32]	; (1cbc0 <init_chip_pins+0x50>)
   1cba0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1cba2:	2100      	movs	r1, #0
   1cba4:	201c      	movs	r0, #28
   1cba6:	4b07      	ldr	r3, [pc, #28]	; (1cbc4 <init_chip_pins+0x54>)
   1cba8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1cbaa:	2100      	movs	r1, #0
   1cbac:	201b      	movs	r0, #27
   1cbae:	4b05      	ldr	r3, [pc, #20]	; (1cbc4 <init_chip_pins+0x54>)
   1cbb0:	4798      	blx	r3
}
   1cbb2:	46c0      	nop			; (mov r8, r8)
   1cbb4:	46bd      	mov	sp, r7
   1cbb6:	b002      	add	sp, #8
   1cbb8:	bd80      	pop	{r7, pc}
   1cbba:	46c0      	nop			; (mov r8, r8)
   1cbbc:	0001cadd 	.word	0x0001cadd
   1cbc0:	000232fd 	.word	0x000232fd
   1cbc4:	0001cb01 	.word	0x0001cb01

0001cbc8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1cbc8:	b580      	push	{r7, lr}
   1cbca:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1cbcc:	4b0b      	ldr	r3, [pc, #44]	; (1cbfc <nm_bsp_init+0x34>)
   1cbce:	2200      	movs	r2, #0
   1cbd0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1cbd2:	4b0b      	ldr	r3, [pc, #44]	; (1cc00 <nm_bsp_init+0x38>)
   1cbd4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1cbd6:	4b0b      	ldr	r3, [pc, #44]	; (1cc04 <nm_bsp_init+0x3c>)
   1cbd8:	681b      	ldr	r3, [r3, #0]
   1cbda:	2201      	movs	r2, #1
   1cbdc:	4013      	ands	r3, r2
   1cbde:	d004      	beq.n	1cbea <nm_bsp_init+0x22>
   1cbe0:	4b08      	ldr	r3, [pc, #32]	; (1cc04 <nm_bsp_init+0x3c>)
   1cbe2:	681b      	ldr	r3, [r3, #0]
   1cbe4:	2202      	movs	r2, #2
   1cbe6:	4013      	ands	r3, r2
   1cbe8:	d101      	bne.n	1cbee <nm_bsp_init+0x26>
	    delay_init();
   1cbea:	4b07      	ldr	r3, [pc, #28]	; (1cc08 <nm_bsp_init+0x40>)
   1cbec:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1cbee:	4b07      	ldr	r3, [pc, #28]	; (1cc0c <nm_bsp_init+0x44>)
   1cbf0:	4798      	blx	r3

	return M2M_SUCCESS;
   1cbf2:	2300      	movs	r3, #0
}
   1cbf4:	0018      	movs	r0, r3
   1cbf6:	46bd      	mov	sp, r7
   1cbf8:	bd80      	pop	{r7, pc}
   1cbfa:	46c0      	nop			; (mov r8, r8)
   1cbfc:	20003d1c 	.word	0x20003d1c
   1cc00:	0001cb71 	.word	0x0001cb71
   1cc04:	e000e010 	.word	0xe000e010
   1cc08:	0001c9e5 	.word	0x0001c9e5
   1cc0c:	0001ca9d 	.word	0x0001ca9d

0001cc10 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1cc10:	b580      	push	{r7, lr}
   1cc12:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1cc14:	2100      	movs	r1, #0
   1cc16:	201c      	movs	r0, #28
   1cc18:	4b0b      	ldr	r3, [pc, #44]	; (1cc48 <nm_bsp_reset+0x38>)
   1cc1a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1cc1c:	2100      	movs	r1, #0
   1cc1e:	201b      	movs	r0, #27
   1cc20:	4b09      	ldr	r3, [pc, #36]	; (1cc48 <nm_bsp_reset+0x38>)
   1cc22:	4798      	blx	r3
	nm_bsp_sleep(1);
   1cc24:	2001      	movs	r0, #1
   1cc26:	4b09      	ldr	r3, [pc, #36]	; (1cc4c <nm_bsp_reset+0x3c>)
   1cc28:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1cc2a:	2101      	movs	r1, #1
   1cc2c:	201c      	movs	r0, #28
   1cc2e:	4b06      	ldr	r3, [pc, #24]	; (1cc48 <nm_bsp_reset+0x38>)
   1cc30:	4798      	blx	r3
	nm_bsp_sleep(10);
   1cc32:	200a      	movs	r0, #10
   1cc34:	4b05      	ldr	r3, [pc, #20]	; (1cc4c <nm_bsp_reset+0x3c>)
   1cc36:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1cc38:	2101      	movs	r1, #1
   1cc3a:	201b      	movs	r0, #27
   1cc3c:	4b02      	ldr	r3, [pc, #8]	; (1cc48 <nm_bsp_reset+0x38>)
   1cc3e:	4798      	blx	r3
}
   1cc40:	46c0      	nop			; (mov r8, r8)
   1cc42:	46bd      	mov	sp, r7
   1cc44:	bd80      	pop	{r7, pc}
   1cc46:	46c0      	nop			; (mov r8, r8)
   1cc48:	0001cb01 	.word	0x0001cb01
   1cc4c:	0001cc51 	.word	0x0001cc51

0001cc50 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1cc50:	b580      	push	{r7, lr}
   1cc52:	b082      	sub	sp, #8
   1cc54:	af00      	add	r7, sp, #0
   1cc56:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1cc58:	687b      	ldr	r3, [r7, #4]
   1cc5a:	0018      	movs	r0, r3
   1cc5c:	4b02      	ldr	r3, [pc, #8]	; (1cc68 <nm_bsp_sleep+0x18>)
   1cc5e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1cc60:	46c0      	nop			; (mov r8, r8)
   1cc62:	46bd      	mov	sp, r7
   1cc64:	b002      	add	sp, #8
   1cc66:	bd80      	pop	{r7, pc}
   1cc68:	00018a05 	.word	0x00018a05

0001cc6c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1cc6c:	b580      	push	{r7, lr}
   1cc6e:	b086      	sub	sp, #24
   1cc70:	af00      	add	r7, sp, #0
   1cc72:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1cc74:	4b15      	ldr	r3, [pc, #84]	; (1cccc <nm_bsp_register_isr+0x60>)
   1cc76:	687a      	ldr	r2, [r7, #4]
   1cc78:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1cc7a:	230c      	movs	r3, #12
   1cc7c:	18fb      	adds	r3, r7, r3
   1cc7e:	0018      	movs	r0, r3
   1cc80:	4b13      	ldr	r3, [pc, #76]	; (1ccd0 <nm_bsp_register_isr+0x64>)
   1cc82:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1cc84:	230c      	movs	r3, #12
   1cc86:	18fb      	adds	r3, r7, r3
   1cc88:	2229      	movs	r2, #41	; 0x29
   1cc8a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1cc8c:	230c      	movs	r3, #12
   1cc8e:	18fb      	adds	r3, r7, r3
   1cc90:	2200      	movs	r2, #0
   1cc92:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1cc94:	230c      	movs	r3, #12
   1cc96:	18fb      	adds	r3, r7, r3
   1cc98:	2201      	movs	r2, #1
   1cc9a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1cc9c:	230c      	movs	r3, #12
   1cc9e:	18fb      	adds	r3, r7, r3
   1cca0:	2202      	movs	r2, #2
   1cca2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1cca4:	230c      	movs	r3, #12
   1cca6:	18fb      	adds	r3, r7, r3
   1cca8:	0019      	movs	r1, r3
   1ccaa:	2009      	movs	r0, #9
   1ccac:	4b09      	ldr	r3, [pc, #36]	; (1ccd4 <nm_bsp_register_isr+0x68>)
   1ccae:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1ccb0:	4b09      	ldr	r3, [pc, #36]	; (1ccd8 <nm_bsp_register_isr+0x6c>)
   1ccb2:	2200      	movs	r2, #0
   1ccb4:	2109      	movs	r1, #9
   1ccb6:	0018      	movs	r0, r3
   1ccb8:	4b08      	ldr	r3, [pc, #32]	; (1ccdc <nm_bsp_register_isr+0x70>)
   1ccba:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1ccbc:	2100      	movs	r1, #0
   1ccbe:	2009      	movs	r0, #9
   1ccc0:	4b07      	ldr	r3, [pc, #28]	; (1cce0 <nm_bsp_register_isr+0x74>)
   1ccc2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1ccc4:	46c0      	nop			; (mov r8, r8)
   1ccc6:	46bd      	mov	sp, r7
   1ccc8:	b006      	add	sp, #24
   1ccca:	bd80      	pop	{r7, pc}
   1cccc:	20003d1c 	.word	0x20003d1c
   1ccd0:	000231a5 	.word	0x000231a5
   1ccd4:	000231d9 	.word	0x000231d9
   1ccd8:	0001cb55 	.word	0x0001cb55
   1ccdc:	00022da5 	.word	0x00022da5
   1cce0:	00022e09 	.word	0x00022e09

0001cce4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1cce4:	b580      	push	{r7, lr}
   1cce6:	b082      	sub	sp, #8
   1cce8:	af00      	add	r7, sp, #0
   1ccea:	0002      	movs	r2, r0
   1ccec:	1dfb      	adds	r3, r7, #7
   1ccee:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1ccf0:	1dfb      	adds	r3, r7, #7
   1ccf2:	781b      	ldrb	r3, [r3, #0]
   1ccf4:	2b00      	cmp	r3, #0
   1ccf6:	d004      	beq.n	1cd02 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1ccf8:	2100      	movs	r1, #0
   1ccfa:	2009      	movs	r0, #9
   1ccfc:	4b05      	ldr	r3, [pc, #20]	; (1cd14 <nm_bsp_interrupt_ctrl+0x30>)
   1ccfe:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1cd00:	e003      	b.n	1cd0a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1cd02:	2100      	movs	r1, #0
   1cd04:	2009      	movs	r0, #9
   1cd06:	4b04      	ldr	r3, [pc, #16]	; (1cd18 <nm_bsp_interrupt_ctrl+0x34>)
   1cd08:	4798      	blx	r3
}
   1cd0a:	46c0      	nop			; (mov r8, r8)
   1cd0c:	46bd      	mov	sp, r7
   1cd0e:	b002      	add	sp, #8
   1cd10:	bd80      	pop	{r7, pc}
   1cd12:	46c0      	nop			; (mov r8, r8)
   1cd14:	00022e09 	.word	0x00022e09
   1cd18:	00022e51 	.word	0x00022e51

0001cd1c <system_pinmux_get_group_from_gpio_pin>:
{
   1cd1c:	b580      	push	{r7, lr}
   1cd1e:	b084      	sub	sp, #16
   1cd20:	af00      	add	r7, sp, #0
   1cd22:	0002      	movs	r2, r0
   1cd24:	1dfb      	adds	r3, r7, #7
   1cd26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1cd28:	230f      	movs	r3, #15
   1cd2a:	18fb      	adds	r3, r7, r3
   1cd2c:	1dfa      	adds	r2, r7, #7
   1cd2e:	7812      	ldrb	r2, [r2, #0]
   1cd30:	09d2      	lsrs	r2, r2, #7
   1cd32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1cd34:	230e      	movs	r3, #14
   1cd36:	18fb      	adds	r3, r7, r3
   1cd38:	1dfa      	adds	r2, r7, #7
   1cd3a:	7812      	ldrb	r2, [r2, #0]
   1cd3c:	0952      	lsrs	r2, r2, #5
   1cd3e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1cd40:	4b0d      	ldr	r3, [pc, #52]	; (1cd78 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1cd42:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1cd44:	230f      	movs	r3, #15
   1cd46:	18fb      	adds	r3, r7, r3
   1cd48:	781b      	ldrb	r3, [r3, #0]
   1cd4a:	2b00      	cmp	r3, #0
   1cd4c:	d10f      	bne.n	1cd6e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1cd4e:	230f      	movs	r3, #15
   1cd50:	18fb      	adds	r3, r7, r3
   1cd52:	781b      	ldrb	r3, [r3, #0]
   1cd54:	009b      	lsls	r3, r3, #2
   1cd56:	2210      	movs	r2, #16
   1cd58:	4694      	mov	ip, r2
   1cd5a:	44bc      	add	ip, r7
   1cd5c:	4463      	add	r3, ip
   1cd5e:	3b08      	subs	r3, #8
   1cd60:	681a      	ldr	r2, [r3, #0]
   1cd62:	230e      	movs	r3, #14
   1cd64:	18fb      	adds	r3, r7, r3
   1cd66:	781b      	ldrb	r3, [r3, #0]
   1cd68:	01db      	lsls	r3, r3, #7
   1cd6a:	18d3      	adds	r3, r2, r3
   1cd6c:	e000      	b.n	1cd70 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1cd6e:	2300      	movs	r3, #0
}
   1cd70:	0018      	movs	r0, r3
   1cd72:	46bd      	mov	sp, r7
   1cd74:	b004      	add	sp, #16
   1cd76:	bd80      	pop	{r7, pc}
   1cd78:	41004400 	.word	0x41004400

0001cd7c <system_interrupt_enable>:
{
   1cd7c:	b580      	push	{r7, lr}
   1cd7e:	b082      	sub	sp, #8
   1cd80:	af00      	add	r7, sp, #0
   1cd82:	0002      	movs	r2, r0
   1cd84:	1dfb      	adds	r3, r7, #7
   1cd86:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1cd88:	4b06      	ldr	r3, [pc, #24]	; (1cda4 <system_interrupt_enable+0x28>)
   1cd8a:	1dfa      	adds	r2, r7, #7
   1cd8c:	7812      	ldrb	r2, [r2, #0]
   1cd8e:	0011      	movs	r1, r2
   1cd90:	221f      	movs	r2, #31
   1cd92:	400a      	ands	r2, r1
   1cd94:	2101      	movs	r1, #1
   1cd96:	4091      	lsls	r1, r2
   1cd98:	000a      	movs	r2, r1
   1cd9a:	601a      	str	r2, [r3, #0]
}
   1cd9c:	46c0      	nop			; (mov r8, r8)
   1cd9e:	46bd      	mov	sp, r7
   1cda0:	b002      	add	sp, #8
   1cda2:	bd80      	pop	{r7, pc}
   1cda4:	e000e100 	.word	0xe000e100

0001cda8 <system_interrupt_disable>:
{
   1cda8:	b580      	push	{r7, lr}
   1cdaa:	b082      	sub	sp, #8
   1cdac:	af00      	add	r7, sp, #0
   1cdae:	0002      	movs	r2, r0
   1cdb0:	1dfb      	adds	r3, r7, #7
   1cdb2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1cdb4:	4a07      	ldr	r2, [pc, #28]	; (1cdd4 <system_interrupt_disable+0x2c>)
   1cdb6:	1dfb      	adds	r3, r7, #7
   1cdb8:	781b      	ldrb	r3, [r3, #0]
   1cdba:	0019      	movs	r1, r3
   1cdbc:	231f      	movs	r3, #31
   1cdbe:	400b      	ands	r3, r1
   1cdc0:	2101      	movs	r1, #1
   1cdc2:	4099      	lsls	r1, r3
   1cdc4:	000b      	movs	r3, r1
   1cdc6:	0019      	movs	r1, r3
   1cdc8:	2380      	movs	r3, #128	; 0x80
   1cdca:	50d1      	str	r1, [r2, r3]
}
   1cdcc:	46c0      	nop			; (mov r8, r8)
   1cdce:	46bd      	mov	sp, r7
   1cdd0:	b002      	add	sp, #8
   1cdd2:	bd80      	pop	{r7, pc}
   1cdd4:	e000e100 	.word	0xe000e100

0001cdd8 <port_get_group_from_gpio_pin>:
{
   1cdd8:	b580      	push	{r7, lr}
   1cdda:	b082      	sub	sp, #8
   1cddc:	af00      	add	r7, sp, #0
   1cdde:	0002      	movs	r2, r0
   1cde0:	1dfb      	adds	r3, r7, #7
   1cde2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1cde4:	1dfb      	adds	r3, r7, #7
   1cde6:	781b      	ldrb	r3, [r3, #0]
   1cde8:	0018      	movs	r0, r3
   1cdea:	4b03      	ldr	r3, [pc, #12]	; (1cdf8 <port_get_group_from_gpio_pin+0x20>)
   1cdec:	4798      	blx	r3
   1cdee:	0003      	movs	r3, r0
}
   1cdf0:	0018      	movs	r0, r3
   1cdf2:	46bd      	mov	sp, r7
   1cdf4:	b002      	add	sp, #8
   1cdf6:	bd80      	pop	{r7, pc}
   1cdf8:	0001cd1d 	.word	0x0001cd1d

0001cdfc <port_get_config_defaults>:
{
   1cdfc:	b580      	push	{r7, lr}
   1cdfe:	b082      	sub	sp, #8
   1ce00:	af00      	add	r7, sp, #0
   1ce02:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1ce04:	687b      	ldr	r3, [r7, #4]
   1ce06:	2200      	movs	r2, #0
   1ce08:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1ce0a:	687b      	ldr	r3, [r7, #4]
   1ce0c:	2201      	movs	r2, #1
   1ce0e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1ce10:	687b      	ldr	r3, [r7, #4]
   1ce12:	2200      	movs	r2, #0
   1ce14:	709a      	strb	r2, [r3, #2]
}
   1ce16:	46c0      	nop			; (mov r8, r8)
   1ce18:	46bd      	mov	sp, r7
   1ce1a:	b002      	add	sp, #8
   1ce1c:	bd80      	pop	{r7, pc}
	...

0001ce20 <port_pin_set_output_level>:
{
   1ce20:	b580      	push	{r7, lr}
   1ce22:	b084      	sub	sp, #16
   1ce24:	af00      	add	r7, sp, #0
   1ce26:	0002      	movs	r2, r0
   1ce28:	1dfb      	adds	r3, r7, #7
   1ce2a:	701a      	strb	r2, [r3, #0]
   1ce2c:	1dbb      	adds	r3, r7, #6
   1ce2e:	1c0a      	adds	r2, r1, #0
   1ce30:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1ce32:	1dfb      	adds	r3, r7, #7
   1ce34:	781b      	ldrb	r3, [r3, #0]
   1ce36:	0018      	movs	r0, r3
   1ce38:	4b0d      	ldr	r3, [pc, #52]	; (1ce70 <port_pin_set_output_level+0x50>)
   1ce3a:	4798      	blx	r3
   1ce3c:	0003      	movs	r3, r0
   1ce3e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ce40:	1dfb      	adds	r3, r7, #7
   1ce42:	781b      	ldrb	r3, [r3, #0]
   1ce44:	221f      	movs	r2, #31
   1ce46:	4013      	ands	r3, r2
   1ce48:	2201      	movs	r2, #1
   1ce4a:	409a      	lsls	r2, r3
   1ce4c:	0013      	movs	r3, r2
   1ce4e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ce50:	1dbb      	adds	r3, r7, #6
   1ce52:	781b      	ldrb	r3, [r3, #0]
   1ce54:	2b00      	cmp	r3, #0
   1ce56:	d003      	beq.n	1ce60 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ce58:	68fb      	ldr	r3, [r7, #12]
   1ce5a:	68ba      	ldr	r2, [r7, #8]
   1ce5c:	619a      	str	r2, [r3, #24]
}
   1ce5e:	e002      	b.n	1ce66 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ce60:	68fb      	ldr	r3, [r7, #12]
   1ce62:	68ba      	ldr	r2, [r7, #8]
   1ce64:	615a      	str	r2, [r3, #20]
}
   1ce66:	46c0      	nop			; (mov r8, r8)
   1ce68:	46bd      	mov	sp, r7
   1ce6a:	b004      	add	sp, #16
   1ce6c:	bd80      	pop	{r7, pc}
   1ce6e:	46c0      	nop			; (mov r8, r8)
   1ce70:	0001cdd9 	.word	0x0001cdd9

0001ce74 <spi_is_syncing>:
{
   1ce74:	b580      	push	{r7, lr}
   1ce76:	b084      	sub	sp, #16
   1ce78:	af00      	add	r7, sp, #0
   1ce7a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1ce7c:	687b      	ldr	r3, [r7, #4]
   1ce7e:	681b      	ldr	r3, [r3, #0]
   1ce80:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1ce82:	68fb      	ldr	r3, [r7, #12]
   1ce84:	69db      	ldr	r3, [r3, #28]
   1ce86:	1e5a      	subs	r2, r3, #1
   1ce88:	4193      	sbcs	r3, r2
   1ce8a:	b2db      	uxtb	r3, r3
}
   1ce8c:	0018      	movs	r0, r3
   1ce8e:	46bd      	mov	sp, r7
   1ce90:	b004      	add	sp, #16
   1ce92:	bd80      	pop	{r7, pc}

0001ce94 <spi_get_config_defaults>:
{
   1ce94:	b580      	push	{r7, lr}
   1ce96:	b082      	sub	sp, #8
   1ce98:	af00      	add	r7, sp, #0
   1ce9a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1ce9c:	687b      	ldr	r3, [r7, #4]
   1ce9e:	2201      	movs	r2, #1
   1cea0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1cea2:	687b      	ldr	r3, [r7, #4]
   1cea4:	2200      	movs	r2, #0
   1cea6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1cea8:	687b      	ldr	r3, [r7, #4]
   1ceaa:	2200      	movs	r2, #0
   1ceac:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1ceae:	687b      	ldr	r3, [r7, #4]
   1ceb0:	22c0      	movs	r2, #192	; 0xc0
   1ceb2:	0392      	lsls	r2, r2, #14
   1ceb4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1ceb6:	687b      	ldr	r3, [r7, #4]
   1ceb8:	2200      	movs	r2, #0
   1ceba:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1cebc:	687b      	ldr	r3, [r7, #4]
   1cebe:	2200      	movs	r2, #0
   1cec0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1cec2:	687b      	ldr	r3, [r7, #4]
   1cec4:	2201      	movs	r2, #1
   1cec6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1cec8:	687b      	ldr	r3, [r7, #4]
   1ceca:	2201      	movs	r2, #1
   1cecc:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1cece:	687b      	ldr	r3, [r7, #4]
   1ced0:	2200      	movs	r2, #0
   1ced2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1ced4:	687b      	ldr	r3, [r7, #4]
   1ced6:	2224      	movs	r2, #36	; 0x24
   1ced8:	2100      	movs	r1, #0
   1ceda:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1cedc:	687b      	ldr	r3, [r7, #4]
   1cede:	3318      	adds	r3, #24
   1cee0:	220c      	movs	r2, #12
   1cee2:	2100      	movs	r1, #0
   1cee4:	0018      	movs	r0, r3
   1cee6:	4b0a      	ldr	r3, [pc, #40]	; (1cf10 <spi_get_config_defaults+0x7c>)
   1cee8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1ceea:	687b      	ldr	r3, [r7, #4]
   1ceec:	4a09      	ldr	r2, [pc, #36]	; (1cf14 <spi_get_config_defaults+0x80>)
   1ceee:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1cef0:	687b      	ldr	r3, [r7, #4]
   1cef2:	2200      	movs	r2, #0
   1cef4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1cef6:	687b      	ldr	r3, [r7, #4]
   1cef8:	2200      	movs	r2, #0
   1cefa:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1cefc:	687b      	ldr	r3, [r7, #4]
   1cefe:	2200      	movs	r2, #0
   1cf00:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1cf02:	687b      	ldr	r3, [r7, #4]
   1cf04:	2200      	movs	r2, #0
   1cf06:	635a      	str	r2, [r3, #52]	; 0x34
};
   1cf08:	46c0      	nop			; (mov r8, r8)
   1cf0a:	46bd      	mov	sp, r7
   1cf0c:	b002      	add	sp, #8
   1cf0e:	bd80      	pop	{r7, pc}
   1cf10:	000328a7 	.word	0x000328a7
   1cf14:	000186a0 	.word	0x000186a0

0001cf18 <spi_slave_inst_get_config_defaults>:
{
   1cf18:	b580      	push	{r7, lr}
   1cf1a:	b082      	sub	sp, #8
   1cf1c:	af00      	add	r7, sp, #0
   1cf1e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1cf20:	687b      	ldr	r3, [r7, #4]
   1cf22:	220a      	movs	r2, #10
   1cf24:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1cf26:	687b      	ldr	r3, [r7, #4]
   1cf28:	2200      	movs	r2, #0
   1cf2a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1cf2c:	687b      	ldr	r3, [r7, #4]
   1cf2e:	2200      	movs	r2, #0
   1cf30:	709a      	strb	r2, [r3, #2]
}
   1cf32:	46c0      	nop			; (mov r8, r8)
   1cf34:	46bd      	mov	sp, r7
   1cf36:	b002      	add	sp, #8
   1cf38:	bd80      	pop	{r7, pc}
	...

0001cf3c <spi_attach_slave>:
{
   1cf3c:	b580      	push	{r7, lr}
   1cf3e:	b084      	sub	sp, #16
   1cf40:	af00      	add	r7, sp, #0
   1cf42:	6078      	str	r0, [r7, #4]
   1cf44:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1cf46:	683b      	ldr	r3, [r7, #0]
   1cf48:	781a      	ldrb	r2, [r3, #0]
   1cf4a:	687b      	ldr	r3, [r7, #4]
   1cf4c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1cf4e:	683b      	ldr	r3, [r7, #0]
   1cf50:	785a      	ldrb	r2, [r3, #1]
   1cf52:	687b      	ldr	r3, [r7, #4]
   1cf54:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1cf56:	683b      	ldr	r3, [r7, #0]
   1cf58:	789a      	ldrb	r2, [r3, #2]
   1cf5a:	687b      	ldr	r3, [r7, #4]
   1cf5c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1cf5e:	230c      	movs	r3, #12
   1cf60:	18fb      	adds	r3, r7, r3
   1cf62:	0018      	movs	r0, r3
   1cf64:	4b0b      	ldr	r3, [pc, #44]	; (1cf94 <spi_attach_slave+0x58>)
   1cf66:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1cf68:	230c      	movs	r3, #12
   1cf6a:	18fb      	adds	r3, r7, r3
   1cf6c:	2201      	movs	r2, #1
   1cf6e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1cf70:	687b      	ldr	r3, [r7, #4]
   1cf72:	781b      	ldrb	r3, [r3, #0]
   1cf74:	220c      	movs	r2, #12
   1cf76:	18ba      	adds	r2, r7, r2
   1cf78:	0011      	movs	r1, r2
   1cf7a:	0018      	movs	r0, r3
   1cf7c:	4b06      	ldr	r3, [pc, #24]	; (1cf98 <spi_attach_slave+0x5c>)
   1cf7e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1cf80:	687b      	ldr	r3, [r7, #4]
   1cf82:	781b      	ldrb	r3, [r3, #0]
   1cf84:	2101      	movs	r1, #1
   1cf86:	0018      	movs	r0, r3
   1cf88:	4b04      	ldr	r3, [pc, #16]	; (1cf9c <spi_attach_slave+0x60>)
   1cf8a:	4798      	blx	r3
}
   1cf8c:	46c0      	nop			; (mov r8, r8)
   1cf8e:	46bd      	mov	sp, r7
   1cf90:	b004      	add	sp, #16
   1cf92:	bd80      	pop	{r7, pc}
   1cf94:	0001cdfd 	.word	0x0001cdfd
   1cf98:	000232fd 	.word	0x000232fd
   1cf9c:	0001ce21 	.word	0x0001ce21

0001cfa0 <spi_enable>:
{
   1cfa0:	b580      	push	{r7, lr}
   1cfa2:	b084      	sub	sp, #16
   1cfa4:	af00      	add	r7, sp, #0
   1cfa6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1cfa8:	687b      	ldr	r3, [r7, #4]
   1cfaa:	681b      	ldr	r3, [r3, #0]
   1cfac:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1cfae:	687b      	ldr	r3, [r7, #4]
   1cfb0:	681b      	ldr	r3, [r3, #0]
   1cfb2:	0018      	movs	r0, r3
   1cfb4:	4b0b      	ldr	r3, [pc, #44]	; (1cfe4 <spi_enable+0x44>)
   1cfb6:	4798      	blx	r3
   1cfb8:	0003      	movs	r3, r0
   1cfba:	0018      	movs	r0, r3
   1cfbc:	4b0a      	ldr	r3, [pc, #40]	; (1cfe8 <spi_enable+0x48>)
   1cfbe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1cfc0:	46c0      	nop			; (mov r8, r8)
   1cfc2:	687b      	ldr	r3, [r7, #4]
   1cfc4:	0018      	movs	r0, r3
   1cfc6:	4b09      	ldr	r3, [pc, #36]	; (1cfec <spi_enable+0x4c>)
   1cfc8:	4798      	blx	r3
   1cfca:	1e03      	subs	r3, r0, #0
   1cfcc:	d1f9      	bne.n	1cfc2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1cfce:	68fb      	ldr	r3, [r7, #12]
   1cfd0:	681b      	ldr	r3, [r3, #0]
   1cfd2:	2202      	movs	r2, #2
   1cfd4:	431a      	orrs	r2, r3
   1cfd6:	68fb      	ldr	r3, [r7, #12]
   1cfd8:	601a      	str	r2, [r3, #0]
}
   1cfda:	46c0      	nop			; (mov r8, r8)
   1cfdc:	46bd      	mov	sp, r7
   1cfde:	b004      	add	sp, #16
   1cfe0:	bd80      	pop	{r7, pc}
   1cfe2:	46c0      	nop			; (mov r8, r8)
   1cfe4:	00023fcd 	.word	0x00023fcd
   1cfe8:	0001cd7d 	.word	0x0001cd7d
   1cfec:	0001ce75 	.word	0x0001ce75

0001cff0 <spi_disable>:
{
   1cff0:	b580      	push	{r7, lr}
   1cff2:	b084      	sub	sp, #16
   1cff4:	af00      	add	r7, sp, #0
   1cff6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1cff8:	687b      	ldr	r3, [r7, #4]
   1cffa:	681b      	ldr	r3, [r3, #0]
   1cffc:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1cffe:	687b      	ldr	r3, [r7, #4]
   1d000:	681b      	ldr	r3, [r3, #0]
   1d002:	0018      	movs	r0, r3
   1d004:	4b0e      	ldr	r3, [pc, #56]	; (1d040 <spi_disable+0x50>)
   1d006:	4798      	blx	r3
   1d008:	0003      	movs	r3, r0
   1d00a:	0018      	movs	r0, r3
   1d00c:	4b0d      	ldr	r3, [pc, #52]	; (1d044 <spi_disable+0x54>)
   1d00e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1d010:	46c0      	nop			; (mov r8, r8)
   1d012:	687b      	ldr	r3, [r7, #4]
   1d014:	0018      	movs	r0, r3
   1d016:	4b0c      	ldr	r3, [pc, #48]	; (1d048 <spi_disable+0x58>)
   1d018:	4798      	blx	r3
   1d01a:	1e03      	subs	r3, r0, #0
   1d01c:	d1f9      	bne.n	1d012 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1d01e:	68fb      	ldr	r3, [r7, #12]
   1d020:	228f      	movs	r2, #143	; 0x8f
   1d022:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1d024:	68fb      	ldr	r3, [r7, #12]
   1d026:	228f      	movs	r2, #143	; 0x8f
   1d028:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1d02a:	68fb      	ldr	r3, [r7, #12]
   1d02c:	681b      	ldr	r3, [r3, #0]
   1d02e:	2202      	movs	r2, #2
   1d030:	4393      	bics	r3, r2
   1d032:	001a      	movs	r2, r3
   1d034:	68fb      	ldr	r3, [r7, #12]
   1d036:	601a      	str	r2, [r3, #0]
}
   1d038:	46c0      	nop			; (mov r8, r8)
   1d03a:	46bd      	mov	sp, r7
   1d03c:	b004      	add	sp, #16
   1d03e:	bd80      	pop	{r7, pc}
   1d040:	00023fcd 	.word	0x00023fcd
   1d044:	0001cda9 	.word	0x0001cda9
   1d048:	0001ce75 	.word	0x0001ce75

0001d04c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1d04c:	b580      	push	{r7, lr}
   1d04e:	b084      	sub	sp, #16
   1d050:	af00      	add	r7, sp, #0
   1d052:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d054:	687b      	ldr	r3, [r7, #4]
   1d056:	681b      	ldr	r3, [r3, #0]
   1d058:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1d05a:	68fb      	ldr	r3, [r7, #12]
   1d05c:	7e1b      	ldrb	r3, [r3, #24]
   1d05e:	b2db      	uxtb	r3, r3
   1d060:	001a      	movs	r2, r3
   1d062:	2302      	movs	r3, #2
   1d064:	4013      	ands	r3, r2
   1d066:	1e5a      	subs	r2, r3, #1
   1d068:	4193      	sbcs	r3, r2
   1d06a:	b2db      	uxtb	r3, r3
}
   1d06c:	0018      	movs	r0, r3
   1d06e:	46bd      	mov	sp, r7
   1d070:	b004      	add	sp, #16
   1d072:	bd80      	pop	{r7, pc}

0001d074 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1d074:	b580      	push	{r7, lr}
   1d076:	b084      	sub	sp, #16
   1d078:	af00      	add	r7, sp, #0
   1d07a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d07c:	687b      	ldr	r3, [r7, #4]
   1d07e:	681b      	ldr	r3, [r3, #0]
   1d080:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1d082:	68fb      	ldr	r3, [r7, #12]
   1d084:	7e1b      	ldrb	r3, [r3, #24]
   1d086:	b2db      	uxtb	r3, r3
   1d088:	001a      	movs	r2, r3
   1d08a:	2301      	movs	r3, #1
   1d08c:	4013      	ands	r3, r2
   1d08e:	1e5a      	subs	r2, r3, #1
   1d090:	4193      	sbcs	r3, r2
   1d092:	b2db      	uxtb	r3, r3
}
   1d094:	0018      	movs	r0, r3
   1d096:	46bd      	mov	sp, r7
   1d098:	b004      	add	sp, #16
   1d09a:	bd80      	pop	{r7, pc}

0001d09c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1d09c:	b580      	push	{r7, lr}
   1d09e:	b084      	sub	sp, #16
   1d0a0:	af00      	add	r7, sp, #0
   1d0a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d0a4:	687b      	ldr	r3, [r7, #4]
   1d0a6:	681b      	ldr	r3, [r3, #0]
   1d0a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1d0aa:	68fb      	ldr	r3, [r7, #12]
   1d0ac:	7e1b      	ldrb	r3, [r3, #24]
   1d0ae:	b2db      	uxtb	r3, r3
   1d0b0:	001a      	movs	r2, r3
   1d0b2:	2304      	movs	r3, #4
   1d0b4:	4013      	ands	r3, r2
   1d0b6:	1e5a      	subs	r2, r3, #1
   1d0b8:	4193      	sbcs	r3, r2
   1d0ba:	b2db      	uxtb	r3, r3
}
   1d0bc:	0018      	movs	r0, r3
   1d0be:	46bd      	mov	sp, r7
   1d0c0:	b004      	add	sp, #16
   1d0c2:	bd80      	pop	{r7, pc}

0001d0c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1d0c4:	b580      	push	{r7, lr}
   1d0c6:	b084      	sub	sp, #16
   1d0c8:	af00      	add	r7, sp, #0
   1d0ca:	6078      	str	r0, [r7, #4]
   1d0cc:	000a      	movs	r2, r1
   1d0ce:	1cbb      	adds	r3, r7, #2
   1d0d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d0d2:	687b      	ldr	r3, [r7, #4]
   1d0d4:	681b      	ldr	r3, [r3, #0]
   1d0d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1d0d8:	687b      	ldr	r3, [r7, #4]
   1d0da:	0018      	movs	r0, r3
   1d0dc:	4b0a      	ldr	r3, [pc, #40]	; (1d108 <spi_write+0x44>)
   1d0de:	4798      	blx	r3
   1d0e0:	0003      	movs	r3, r0
   1d0e2:	001a      	movs	r2, r3
   1d0e4:	2301      	movs	r3, #1
   1d0e6:	4053      	eors	r3, r2
   1d0e8:	b2db      	uxtb	r3, r3
   1d0ea:	2b00      	cmp	r3, #0
   1d0ec:	d001      	beq.n	1d0f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1d0ee:	2305      	movs	r3, #5
   1d0f0:	e006      	b.n	1d100 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1d0f2:	1cbb      	adds	r3, r7, #2
   1d0f4:	881b      	ldrh	r3, [r3, #0]
   1d0f6:	05db      	lsls	r3, r3, #23
   1d0f8:	0dda      	lsrs	r2, r3, #23
   1d0fa:	68fb      	ldr	r3, [r7, #12]
   1d0fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1d0fe:	2300      	movs	r3, #0
}
   1d100:	0018      	movs	r0, r3
   1d102:	46bd      	mov	sp, r7
   1d104:	b004      	add	sp, #16
   1d106:	bd80      	pop	{r7, pc}
   1d108:	0001d075 	.word	0x0001d075

0001d10c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1d10c:	b580      	push	{r7, lr}
   1d10e:	b084      	sub	sp, #16
   1d110:	af00      	add	r7, sp, #0
   1d112:	6078      	str	r0, [r7, #4]
   1d114:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1d116:	687b      	ldr	r3, [r7, #4]
   1d118:	681b      	ldr	r3, [r3, #0]
   1d11a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1d11c:	687b      	ldr	r3, [r7, #4]
   1d11e:	0018      	movs	r0, r3
   1d120:	4b1b      	ldr	r3, [pc, #108]	; (1d190 <spi_read+0x84>)
   1d122:	4798      	blx	r3
   1d124:	0003      	movs	r3, r0
   1d126:	001a      	movs	r2, r3
   1d128:	2301      	movs	r3, #1
   1d12a:	4053      	eors	r3, r2
   1d12c:	b2db      	uxtb	r3, r3
   1d12e:	2b00      	cmp	r3, #0
   1d130:	d001      	beq.n	1d136 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1d132:	2310      	movs	r3, #16
   1d134:	e027      	b.n	1d186 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1d136:	230f      	movs	r3, #15
   1d138:	18fb      	adds	r3, r7, r3
   1d13a:	2200      	movs	r2, #0
   1d13c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1d13e:	68bb      	ldr	r3, [r7, #8]
   1d140:	8b5b      	ldrh	r3, [r3, #26]
   1d142:	b29b      	uxth	r3, r3
   1d144:	001a      	movs	r2, r3
   1d146:	2304      	movs	r3, #4
   1d148:	4013      	ands	r3, r2
   1d14a:	d006      	beq.n	1d15a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1d14c:	230f      	movs	r3, #15
   1d14e:	18fb      	adds	r3, r7, r3
   1d150:	221e      	movs	r2, #30
   1d152:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1d154:	68bb      	ldr	r3, [r7, #8]
   1d156:	2204      	movs	r2, #4
   1d158:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1d15a:	687b      	ldr	r3, [r7, #4]
   1d15c:	799b      	ldrb	r3, [r3, #6]
   1d15e:	2b01      	cmp	r3, #1
   1d160:	d108      	bne.n	1d174 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1d162:	68bb      	ldr	r3, [r7, #8]
   1d164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d166:	b29b      	uxth	r3, r3
   1d168:	05db      	lsls	r3, r3, #23
   1d16a:	0ddb      	lsrs	r3, r3, #23
   1d16c:	b29a      	uxth	r2, r3
   1d16e:	683b      	ldr	r3, [r7, #0]
   1d170:	801a      	strh	r2, [r3, #0]
   1d172:	e005      	b.n	1d180 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1d174:	68bb      	ldr	r3, [r7, #8]
   1d176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d178:	b2db      	uxtb	r3, r3
   1d17a:	b29a      	uxth	r2, r3
   1d17c:	683b      	ldr	r3, [r7, #0]
   1d17e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1d180:	230f      	movs	r3, #15
   1d182:	18fb      	adds	r3, r7, r3
   1d184:	781b      	ldrb	r3, [r3, #0]
}
   1d186:	0018      	movs	r0, r3
   1d188:	46bd      	mov	sp, r7
   1d18a:	b004      	add	sp, #16
   1d18c:	bd80      	pop	{r7, pc}
   1d18e:	46c0      	nop			; (mov r8, r8)
   1d190:	0001d09d 	.word	0x0001d09d

0001d194 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1d194:	b580      	push	{r7, lr}
   1d196:	b086      	sub	sp, #24
   1d198:	af00      	add	r7, sp, #0
   1d19a:	60f8      	str	r0, [r7, #12]
   1d19c:	60b9      	str	r1, [r7, #8]
   1d19e:	1dbb      	adds	r3, r7, #6
   1d1a0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1d1a2:	2313      	movs	r3, #19
   1d1a4:	18fb      	adds	r3, r7, r3
   1d1a6:	22ff      	movs	r2, #255	; 0xff
   1d1a8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1d1aa:	2317      	movs	r3, #23
   1d1ac:	18fb      	adds	r3, r7, r3
   1d1ae:	2200      	movs	r2, #0
   1d1b0:	701a      	strb	r2, [r3, #0]
   1d1b2:	2316      	movs	r3, #22
   1d1b4:	18fb      	adds	r3, r7, r3
   1d1b6:	2200      	movs	r2, #0
   1d1b8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1d1ba:	2314      	movs	r3, #20
   1d1bc:	18fb      	adds	r3, r7, r3
   1d1be:	2200      	movs	r2, #0
   1d1c0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1d1c2:	2310      	movs	r3, #16
   1d1c4:	18fb      	adds	r3, r7, r3
   1d1c6:	2200      	movs	r2, #0
   1d1c8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1d1ca:	68bb      	ldr	r3, [r7, #8]
   1d1cc:	2b00      	cmp	r3, #0
   1d1ce:	d102      	bne.n	1d1d6 <spi_rw+0x42>
   1d1d0:	68fb      	ldr	r3, [r7, #12]
   1d1d2:	2b00      	cmp	r3, #0
   1d1d4:	d003      	beq.n	1d1de <spi_rw+0x4a>
   1d1d6:	1dbb      	adds	r3, r7, #6
   1d1d8:	881b      	ldrh	r3, [r3, #0]
   1d1da:	2b00      	cmp	r3, #0
   1d1dc:	d102      	bne.n	1d1e4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1d1de:	230f      	movs	r3, #15
   1d1e0:	425b      	negs	r3, r3
   1d1e2:	e07e      	b.n	1d2e2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1d1e4:	68fb      	ldr	r3, [r7, #12]
   1d1e6:	2b00      	cmp	r3, #0
   1d1e8:	d106      	bne.n	1d1f8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1d1ea:	2313      	movs	r3, #19
   1d1ec:	18fb      	adds	r3, r7, r3
   1d1ee:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1d1f0:	2317      	movs	r3, #23
   1d1f2:	18fb      	adds	r3, r7, r3
   1d1f4:	2201      	movs	r2, #1
   1d1f6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1d1f8:	68bb      	ldr	r3, [r7, #8]
   1d1fa:	2b00      	cmp	r3, #0
   1d1fc:	d106      	bne.n	1d20c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1d1fe:	2313      	movs	r3, #19
   1d200:	18fb      	adds	r3, r7, r3
   1d202:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1d204:	2316      	movs	r3, #22
   1d206:	18fb      	adds	r3, r7, r3
   1d208:	2201      	movs	r2, #1
   1d20a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1d20c:	4937      	ldr	r1, [pc, #220]	; (1d2ec <spi_rw+0x158>)
   1d20e:	4b38      	ldr	r3, [pc, #224]	; (1d2f0 <spi_rw+0x15c>)
   1d210:	2201      	movs	r2, #1
   1d212:	0018      	movs	r0, r3
   1d214:	4b37      	ldr	r3, [pc, #220]	; (1d2f4 <spi_rw+0x160>)
   1d216:	4798      	blx	r3

	while (u16Sz) {
   1d218:	e04c      	b.n	1d2b4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1d21a:	68fb      	ldr	r3, [r7, #12]
   1d21c:	781a      	ldrb	r2, [r3, #0]
   1d21e:	2314      	movs	r3, #20
   1d220:	18fb      	adds	r3, r7, r3
   1d222:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1d224:	46c0      	nop			; (mov r8, r8)
   1d226:	4b32      	ldr	r3, [pc, #200]	; (1d2f0 <spi_rw+0x15c>)
   1d228:	0018      	movs	r0, r3
   1d22a:	4b33      	ldr	r3, [pc, #204]	; (1d2f8 <spi_rw+0x164>)
   1d22c:	4798      	blx	r3
   1d22e:	0003      	movs	r3, r0
   1d230:	001a      	movs	r2, r3
   1d232:	2301      	movs	r3, #1
   1d234:	4053      	eors	r3, r2
   1d236:	b2db      	uxtb	r3, r3
   1d238:	2b00      	cmp	r3, #0
   1d23a:	d1f4      	bne.n	1d226 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1d23c:	46c0      	nop			; (mov r8, r8)
   1d23e:	2314      	movs	r3, #20
   1d240:	18fb      	adds	r3, r7, r3
   1d242:	881a      	ldrh	r2, [r3, #0]
   1d244:	4b2a      	ldr	r3, [pc, #168]	; (1d2f0 <spi_rw+0x15c>)
   1d246:	0011      	movs	r1, r2
   1d248:	0018      	movs	r0, r3
   1d24a:	4b2c      	ldr	r3, [pc, #176]	; (1d2fc <spi_rw+0x168>)
   1d24c:	4798      	blx	r3
   1d24e:	1e03      	subs	r3, r0, #0
   1d250:	d1f5      	bne.n	1d23e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1d252:	46c0      	nop			; (mov r8, r8)
   1d254:	4b26      	ldr	r3, [pc, #152]	; (1d2f0 <spi_rw+0x15c>)
   1d256:	0018      	movs	r0, r3
   1d258:	4b29      	ldr	r3, [pc, #164]	; (1d300 <spi_rw+0x16c>)
   1d25a:	4798      	blx	r3
   1d25c:	0003      	movs	r3, r0
   1d25e:	001a      	movs	r2, r3
   1d260:	2301      	movs	r3, #1
   1d262:	4053      	eors	r3, r2
   1d264:	b2db      	uxtb	r3, r3
   1d266:	2b00      	cmp	r3, #0
   1d268:	d1f4      	bne.n	1d254 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1d26a:	46c0      	nop			; (mov r8, r8)
   1d26c:	2310      	movs	r3, #16
   1d26e:	18fa      	adds	r2, r7, r3
   1d270:	4b1f      	ldr	r3, [pc, #124]	; (1d2f0 <spi_rw+0x15c>)
   1d272:	0011      	movs	r1, r2
   1d274:	0018      	movs	r0, r3
   1d276:	4b23      	ldr	r3, [pc, #140]	; (1d304 <spi_rw+0x170>)
   1d278:	4798      	blx	r3
   1d27a:	1e03      	subs	r3, r0, #0
   1d27c:	d1f6      	bne.n	1d26c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1d27e:	2310      	movs	r3, #16
   1d280:	18fb      	adds	r3, r7, r3
   1d282:	881b      	ldrh	r3, [r3, #0]
   1d284:	b2da      	uxtb	r2, r3
   1d286:	68bb      	ldr	r3, [r7, #8]
   1d288:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1d28a:	1dbb      	adds	r3, r7, #6
   1d28c:	881a      	ldrh	r2, [r3, #0]
   1d28e:	1dbb      	adds	r3, r7, #6
   1d290:	3a01      	subs	r2, #1
   1d292:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1d294:	2316      	movs	r3, #22
   1d296:	18fb      	adds	r3, r7, r3
   1d298:	781b      	ldrb	r3, [r3, #0]
   1d29a:	2b00      	cmp	r3, #0
   1d29c:	d102      	bne.n	1d2a4 <spi_rw+0x110>
			pu8Miso++;
   1d29e:	68bb      	ldr	r3, [r7, #8]
   1d2a0:	3301      	adds	r3, #1
   1d2a2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1d2a4:	2317      	movs	r3, #23
   1d2a6:	18fb      	adds	r3, r7, r3
   1d2a8:	781b      	ldrb	r3, [r3, #0]
   1d2aa:	2b00      	cmp	r3, #0
   1d2ac:	d102      	bne.n	1d2b4 <spi_rw+0x120>
			pu8Mosi++;
   1d2ae:	68fb      	ldr	r3, [r7, #12]
   1d2b0:	3301      	adds	r3, #1
   1d2b2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1d2b4:	1dbb      	adds	r3, r7, #6
   1d2b6:	881b      	ldrh	r3, [r3, #0]
   1d2b8:	2b00      	cmp	r3, #0
   1d2ba:	d1ae      	bne.n	1d21a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1d2bc:	46c0      	nop			; (mov r8, r8)
   1d2be:	4b0c      	ldr	r3, [pc, #48]	; (1d2f0 <spi_rw+0x15c>)
   1d2c0:	0018      	movs	r0, r3
   1d2c2:	4b11      	ldr	r3, [pc, #68]	; (1d308 <spi_rw+0x174>)
   1d2c4:	4798      	blx	r3
   1d2c6:	0003      	movs	r3, r0
   1d2c8:	001a      	movs	r2, r3
   1d2ca:	2301      	movs	r3, #1
   1d2cc:	4053      	eors	r3, r2
   1d2ce:	b2db      	uxtb	r3, r3
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	d1f4      	bne.n	1d2be <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1d2d4:	4905      	ldr	r1, [pc, #20]	; (1d2ec <spi_rw+0x158>)
   1d2d6:	4b06      	ldr	r3, [pc, #24]	; (1d2f0 <spi_rw+0x15c>)
   1d2d8:	2200      	movs	r2, #0
   1d2da:	0018      	movs	r0, r3
   1d2dc:	4b05      	ldr	r3, [pc, #20]	; (1d2f4 <spi_rw+0x160>)
   1d2de:	4798      	blx	r3

	return M2M_SUCCESS;
   1d2e0:	2300      	movs	r3, #0
}
   1d2e2:	0018      	movs	r0, r3
   1d2e4:	46bd      	mov	sp, r7
   1d2e6:	b006      	add	sp, #24
   1d2e8:	bd80      	pop	{r7, pc}
   1d2ea:	46c0      	nop			; (mov r8, r8)
   1d2ec:	200054c4 	.word	0x200054c4
   1d2f0:	200054c8 	.word	0x200054c8
   1d2f4:	00024a81 	.word	0x00024a81
   1d2f8:	0001d075 	.word	0x0001d075
   1d2fc:	0001d0c5 	.word	0x0001d0c5
   1d300:	0001d09d 	.word	0x0001d09d
   1d304:	0001d10d 	.word	0x0001d10d
   1d308:	0001d04d 	.word	0x0001d04d

0001d30c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1d30c:	b580      	push	{r7, lr}
   1d30e:	b092      	sub	sp, #72	; 0x48
   1d310:	af00      	add	r7, sp, #0
   1d312:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1d314:	2347      	movs	r3, #71	; 0x47
   1d316:	18fb      	adds	r3, r7, r3
   1d318:	2200      	movs	r2, #0
   1d31a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1d31c:	2308      	movs	r3, #8
   1d31e:	18fb      	adds	r3, r7, r3
   1d320:	0018      	movs	r0, r3
   1d322:	4b26      	ldr	r3, [pc, #152]	; (1d3bc <nm_bus_init+0xb0>)
   1d324:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1d326:	2308      	movs	r3, #8
   1d328:	18fb      	adds	r3, r7, r3
   1d32a:	220e      	movs	r2, #14
   1d32c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1d32e:	2308      	movs	r3, #8
   1d330:	18fa      	adds	r2, r7, r3
   1d332:	4b23      	ldr	r3, [pc, #140]	; (1d3c0 <nm_bus_init+0xb4>)
   1d334:	0011      	movs	r1, r2
   1d336:	0018      	movs	r0, r3
   1d338:	4b22      	ldr	r3, [pc, #136]	; (1d3c4 <nm_bus_init+0xb8>)
   1d33a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1d33c:	230c      	movs	r3, #12
   1d33e:	18fb      	adds	r3, r7, r3
   1d340:	0018      	movs	r0, r3
   1d342:	4b21      	ldr	r3, [pc, #132]	; (1d3c8 <nm_bus_init+0xbc>)
   1d344:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1d346:	230c      	movs	r3, #12
   1d348:	18fb      	adds	r3, r7, r3
   1d34a:	22c0      	movs	r2, #192	; 0xc0
   1d34c:	0392      	lsls	r2, r2, #14
   1d34e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1d350:	230c      	movs	r3, #12
   1d352:	18fb      	adds	r3, r7, r3
   1d354:	4a1d      	ldr	r2, [pc, #116]	; (1d3cc <nm_bus_init+0xc0>)
   1d356:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1d358:	230c      	movs	r3, #12
   1d35a:	18fb      	adds	r3, r7, r3
   1d35c:	4a1c      	ldr	r2, [pc, #112]	; (1d3d0 <nm_bus_init+0xc4>)
   1d35e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1d360:	230c      	movs	r3, #12
   1d362:	18fb      	adds	r3, r7, r3
   1d364:	2201      	movs	r2, #1
   1d366:	4252      	negs	r2, r2
   1d368:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1d36a:	230c      	movs	r3, #12
   1d36c:	18fb      	adds	r3, r7, r3
   1d36e:	4a19      	ldr	r2, [pc, #100]	; (1d3d4 <nm_bus_init+0xc8>)
   1d370:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1d372:	230c      	movs	r3, #12
   1d374:	18fb      	adds	r3, r7, r3
   1d376:	2200      	movs	r2, #0
   1d378:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1d37a:	230c      	movs	r3, #12
   1d37c:	18fb      	adds	r3, r7, r3
   1d37e:	4a16      	ldr	r2, [pc, #88]	; (1d3d8 <nm_bus_init+0xcc>)
   1d380:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1d382:	230c      	movs	r3, #12
   1d384:	18fa      	adds	r2, r7, r3
   1d386:	4915      	ldr	r1, [pc, #84]	; (1d3dc <nm_bus_init+0xd0>)
   1d388:	4b15      	ldr	r3, [pc, #84]	; (1d3e0 <nm_bus_init+0xd4>)
   1d38a:	0018      	movs	r0, r3
   1d38c:	4b15      	ldr	r3, [pc, #84]	; (1d3e4 <nm_bus_init+0xd8>)
   1d38e:	4798      	blx	r3
   1d390:	1e03      	subs	r3, r0, #0
   1d392:	d002      	beq.n	1d39a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1d394:	2306      	movs	r3, #6
   1d396:	425b      	negs	r3, r3
   1d398:	e00c      	b.n	1d3b4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1d39a:	4b11      	ldr	r3, [pc, #68]	; (1d3e0 <nm_bus_init+0xd4>)
   1d39c:	0018      	movs	r0, r3
   1d39e:	4b12      	ldr	r3, [pc, #72]	; (1d3e8 <nm_bus_init+0xdc>)
   1d3a0:	4798      	blx	r3

	nm_bsp_reset();
   1d3a2:	4b12      	ldr	r3, [pc, #72]	; (1d3ec <nm_bus_init+0xe0>)
   1d3a4:	4798      	blx	r3
	nm_bsp_sleep(1);
   1d3a6:	2001      	movs	r0, #1
   1d3a8:	4b11      	ldr	r3, [pc, #68]	; (1d3f0 <nm_bus_init+0xe4>)
   1d3aa:	4798      	blx	r3
#endif
	return result;
   1d3ac:	2347      	movs	r3, #71	; 0x47
   1d3ae:	18fb      	adds	r3, r7, r3
   1d3b0:	781b      	ldrb	r3, [r3, #0]
   1d3b2:	b25b      	sxtb	r3, r3
}
   1d3b4:	0018      	movs	r0, r3
   1d3b6:	46bd      	mov	sp, r7
   1d3b8:	b012      	add	sp, #72	; 0x48
   1d3ba:	bd80      	pop	{r7, pc}
   1d3bc:	0001cf19 	.word	0x0001cf19
   1d3c0:	200054c4 	.word	0x200054c4
   1d3c4:	0001cf3d 	.word	0x0001cf3d
   1d3c8:	0001ce95 	.word	0x0001ce95
   1d3cc:	000c0002 	.word	0x000c0002
   1d3d0:	000d0002 	.word	0x000d0002
   1d3d4:	000f0002 	.word	0x000f0002
   1d3d8:	00124f80 	.word	0x00124f80
   1d3dc:	42001000 	.word	0x42001000
   1d3e0:	200054c8 	.word	0x200054c8
   1d3e4:	000247bd 	.word	0x000247bd
   1d3e8:	0001cfa1 	.word	0x0001cfa1
   1d3ec:	0001cc11 	.word	0x0001cc11
   1d3f0:	0001cc51 	.word	0x0001cc51

0001d3f4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1d3f4:	b590      	push	{r4, r7, lr}
   1d3f6:	b085      	sub	sp, #20
   1d3f8:	af00      	add	r7, sp, #0
   1d3fa:	0002      	movs	r2, r0
   1d3fc:	6039      	str	r1, [r7, #0]
   1d3fe:	1dfb      	adds	r3, r7, #7
   1d400:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1d402:	230f      	movs	r3, #15
   1d404:	18fb      	adds	r3, r7, r3
   1d406:	2200      	movs	r2, #0
   1d408:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1d40a:	1dfb      	adds	r3, r7, #7
   1d40c:	781b      	ldrb	r3, [r3, #0]
   1d40e:	2b03      	cmp	r3, #3
   1d410:	d10f      	bne.n	1d432 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1d412:	683b      	ldr	r3, [r7, #0]
   1d414:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1d416:	68bb      	ldr	r3, [r7, #8]
   1d418:	6818      	ldr	r0, [r3, #0]
   1d41a:	68bb      	ldr	r3, [r7, #8]
   1d41c:	6859      	ldr	r1, [r3, #4]
   1d41e:	68bb      	ldr	r3, [r7, #8]
   1d420:	891b      	ldrh	r3, [r3, #8]
   1d422:	220f      	movs	r2, #15
   1d424:	18bc      	adds	r4, r7, r2
   1d426:	001a      	movs	r2, r3
   1d428:	4b10      	ldr	r3, [pc, #64]	; (1d46c <nm_bus_ioctl+0x78>)
   1d42a:	4798      	blx	r3
   1d42c:	0003      	movs	r3, r0
   1d42e:	7023      	strb	r3, [r4, #0]
		}
		break;
   1d430:	e013      	b.n	1d45a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1d432:	230f      	movs	r3, #15
   1d434:	18fb      	adds	r3, r7, r3
   1d436:	22ff      	movs	r2, #255	; 0xff
   1d438:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1d43a:	2383      	movs	r3, #131	; 0x83
   1d43c:	005a      	lsls	r2, r3, #1
   1d43e:	490c      	ldr	r1, [pc, #48]	; (1d470 <nm_bus_ioctl+0x7c>)
   1d440:	4b0c      	ldr	r3, [pc, #48]	; (1d474 <nm_bus_ioctl+0x80>)
   1d442:	0018      	movs	r0, r3
   1d444:	4b0c      	ldr	r3, [pc, #48]	; (1d478 <nm_bus_ioctl+0x84>)
   1d446:	4798      	blx	r3
   1d448:	4b0c      	ldr	r3, [pc, #48]	; (1d47c <nm_bus_ioctl+0x88>)
   1d44a:	0018      	movs	r0, r3
   1d44c:	4b0a      	ldr	r3, [pc, #40]	; (1d478 <nm_bus_ioctl+0x84>)
   1d44e:	4798      	blx	r3
   1d450:	4b0b      	ldr	r3, [pc, #44]	; (1d480 <nm_bus_ioctl+0x8c>)
   1d452:	0018      	movs	r0, r3
   1d454:	4b08      	ldr	r3, [pc, #32]	; (1d478 <nm_bus_ioctl+0x84>)
   1d456:	4798      	blx	r3
			break;
   1d458:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1d45a:	230f      	movs	r3, #15
   1d45c:	18fb      	adds	r3, r7, r3
   1d45e:	781b      	ldrb	r3, [r3, #0]
   1d460:	b25b      	sxtb	r3, r3
}
   1d462:	0018      	movs	r0, r3
   1d464:	46bd      	mov	sp, r7
   1d466:	b005      	add	sp, #20
   1d468:	bd90      	pop	{r4, r7, pc}
   1d46a:	46c0      	nop			; (mov r8, r8)
   1d46c:	0001d195 	.word	0x0001d195
   1d470:	00036668 	.word	0x00036668
   1d474:	0003663c 	.word	0x0003663c
   1d478:	0001a5e9 	.word	0x0001a5e9
   1d47c:	00036650 	.word	0x00036650
   1d480:	00036664 	.word	0x00036664

0001d484 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1d484:	b580      	push	{r7, lr}
   1d486:	b082      	sub	sp, #8
   1d488:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1d48a:	1dfb      	adds	r3, r7, #7
   1d48c:	2200      	movs	r2, #0
   1d48e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1d490:	1d3b      	adds	r3, r7, #4
   1d492:	0018      	movs	r0, r3
   1d494:	4b13      	ldr	r3, [pc, #76]	; (1d4e4 <nm_bus_deinit+0x60>)
   1d496:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1d498:	1d3b      	adds	r3, r7, #4
   1d49a:	2200      	movs	r2, #0
   1d49c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1d49e:	1d3b      	adds	r3, r7, #4
   1d4a0:	2200      	movs	r2, #0
   1d4a2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1d4a4:	4b10      	ldr	r3, [pc, #64]	; (1d4e8 <nm_bus_deinit+0x64>)
   1d4a6:	0018      	movs	r0, r3
   1d4a8:	4b10      	ldr	r3, [pc, #64]	; (1d4ec <nm_bus_deinit+0x68>)
   1d4aa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1d4ac:	1d3b      	adds	r3, r7, #4
   1d4ae:	0019      	movs	r1, r3
   1d4b0:	200c      	movs	r0, #12
   1d4b2:	4b0f      	ldr	r3, [pc, #60]	; (1d4f0 <nm_bus_deinit+0x6c>)
   1d4b4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1d4b6:	1d3b      	adds	r3, r7, #4
   1d4b8:	0019      	movs	r1, r3
   1d4ba:	200f      	movs	r0, #15
   1d4bc:	4b0c      	ldr	r3, [pc, #48]	; (1d4f0 <nm_bus_deinit+0x6c>)
   1d4be:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1d4c0:	1d3b      	adds	r3, r7, #4
   1d4c2:	0019      	movs	r1, r3
   1d4c4:	200d      	movs	r0, #13
   1d4c6:	4b0a      	ldr	r3, [pc, #40]	; (1d4f0 <nm_bus_deinit+0x6c>)
   1d4c8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1d4ca:	1d3b      	adds	r3, r7, #4
   1d4cc:	0019      	movs	r1, r3
   1d4ce:	200e      	movs	r0, #14
   1d4d0:	4b07      	ldr	r3, [pc, #28]	; (1d4f0 <nm_bus_deinit+0x6c>)
   1d4d2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1d4d4:	1dfb      	adds	r3, r7, #7
   1d4d6:	781b      	ldrb	r3, [r3, #0]
   1d4d8:	b25b      	sxtb	r3, r3
}
   1d4da:	0018      	movs	r0, r3
   1d4dc:	46bd      	mov	sp, r7
   1d4de:	b002      	add	sp, #8
   1d4e0:	bd80      	pop	{r7, pc}
   1d4e2:	46c0      	nop			; (mov r8, r8)
   1d4e4:	0001cdfd 	.word	0x0001cdfd
   1d4e8:	200054c8 	.word	0x200054c8
   1d4ec:	0001cff1 	.word	0x0001cff1
   1d4f0:	000232fd 	.word	0x000232fd

0001d4f4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1d4f4:	b580      	push	{r7, lr}
   1d4f6:	b084      	sub	sp, #16
   1d4f8:	af00      	add	r7, sp, #0
   1d4fa:	60f8      	str	r0, [r7, #12]
   1d4fc:	60b9      	str	r1, [r7, #8]
   1d4fe:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1d500:	687b      	ldr	r3, [r7, #4]
   1d502:	2b00      	cmp	r3, #0
   1d504:	d010      	beq.n	1d528 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1d506:	68bb      	ldr	r3, [r7, #8]
   1d508:	781a      	ldrb	r2, [r3, #0]
   1d50a:	68fb      	ldr	r3, [r7, #12]
   1d50c:	701a      	strb	r2, [r3, #0]
		pDst++;
   1d50e:	68fb      	ldr	r3, [r7, #12]
   1d510:	3301      	adds	r3, #1
   1d512:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1d514:	68bb      	ldr	r3, [r7, #8]
   1d516:	3301      	adds	r3, #1
   1d518:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1d51a:	687b      	ldr	r3, [r7, #4]
   1d51c:	3b01      	subs	r3, #1
   1d51e:	607b      	str	r3, [r7, #4]
   1d520:	687b      	ldr	r3, [r7, #4]
   1d522:	2b00      	cmp	r3, #0
   1d524:	d1ef      	bne.n	1d506 <m2m_memcpy+0x12>
   1d526:	e000      	b.n	1d52a <m2m_memcpy+0x36>
	if(sz == 0) return;
   1d528:	46c0      	nop			; (mov r8, r8)
}
   1d52a:	46bd      	mov	sp, r7
   1d52c:	b004      	add	sp, #16
   1d52e:	bd80      	pop	{r7, pc}

0001d530 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1d530:	b580      	push	{r7, lr}
   1d532:	b084      	sub	sp, #16
   1d534:	af00      	add	r7, sp, #0
   1d536:	60f8      	str	r0, [r7, #12]
   1d538:	607a      	str	r2, [r7, #4]
   1d53a:	230b      	movs	r3, #11
   1d53c:	18fb      	adds	r3, r7, r3
   1d53e:	1c0a      	adds	r2, r1, #0
   1d540:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1d542:	687b      	ldr	r3, [r7, #4]
   1d544:	2b00      	cmp	r3, #0
   1d546:	d00e      	beq.n	1d566 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1d548:	68fb      	ldr	r3, [r7, #12]
   1d54a:	220b      	movs	r2, #11
   1d54c:	18ba      	adds	r2, r7, r2
   1d54e:	7812      	ldrb	r2, [r2, #0]
   1d550:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1d552:	68fb      	ldr	r3, [r7, #12]
   1d554:	3301      	adds	r3, #1
   1d556:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1d558:	687b      	ldr	r3, [r7, #4]
   1d55a:	3b01      	subs	r3, #1
   1d55c:	607b      	str	r3, [r7, #4]
   1d55e:	687b      	ldr	r3, [r7, #4]
   1d560:	2b00      	cmp	r3, #0
   1d562:	d1f1      	bne.n	1d548 <m2m_memset+0x18>
   1d564:	e000      	b.n	1d568 <m2m_memset+0x38>
	if(sz == 0) return;
   1d566:	46c0      	nop			; (mov r8, r8)
}
   1d568:	46bd      	mov	sp, r7
   1d56a:	b004      	add	sp, #16
   1d56c:	bd80      	pop	{r7, pc}

0001d56e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1d56e:	b580      	push	{r7, lr}
   1d570:	b084      	sub	sp, #16
   1d572:	af00      	add	r7, sp, #0
   1d574:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1d576:	230e      	movs	r3, #14
   1d578:	18fb      	adds	r3, r7, r3
   1d57a:	2200      	movs	r2, #0
   1d57c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1d57e:	e009      	b.n	1d594 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1d580:	230e      	movs	r3, #14
   1d582:	18fb      	adds	r3, r7, r3
   1d584:	881a      	ldrh	r2, [r3, #0]
   1d586:	230e      	movs	r3, #14
   1d588:	18fb      	adds	r3, r7, r3
   1d58a:	3201      	adds	r2, #1
   1d58c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1d58e:	687b      	ldr	r3, [r7, #4]
   1d590:	3301      	adds	r3, #1
   1d592:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1d594:	687b      	ldr	r3, [r7, #4]
   1d596:	781b      	ldrb	r3, [r3, #0]
   1d598:	2b00      	cmp	r3, #0
   1d59a:	d1f1      	bne.n	1d580 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1d59c:	230e      	movs	r3, #14
   1d59e:	18fb      	adds	r3, r7, r3
   1d5a0:	881b      	ldrh	r3, [r3, #0]
}
   1d5a2:	0018      	movs	r0, r3
   1d5a4:	46bd      	mov	sp, r7
   1d5a6:	b004      	add	sp, #16
   1d5a8:	bd80      	pop	{r7, pc}
	...

0001d5ac <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1d5ac:	b580      	push	{r7, lr}
   1d5ae:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1d5b0:	4b04      	ldr	r3, [pc, #16]	; (1d5c4 <isr+0x18>)
   1d5b2:	78db      	ldrb	r3, [r3, #3]
   1d5b4:	b2db      	uxtb	r3, r3
   1d5b6:	3301      	adds	r3, #1
   1d5b8:	b2da      	uxtb	r2, r3
   1d5ba:	4b02      	ldr	r3, [pc, #8]	; (1d5c4 <isr+0x18>)
   1d5bc:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1d5be:	46c0      	nop			; (mov r8, r8)
   1d5c0:	46bd      	mov	sp, r7
   1d5c2:	bd80      	pop	{r7, pc}
   1d5c4:	20005504 	.word	0x20005504

0001d5c8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1d5c8:	b590      	push	{r4, r7, lr}
   1d5ca:	b083      	sub	sp, #12
   1d5cc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1d5ce:	1dfb      	adds	r3, r7, #7
   1d5d0:	2200      	movs	r2, #0
   1d5d2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1d5d4:	4b14      	ldr	r3, [pc, #80]	; (1d628 <hif_set_rx_done+0x60>)
   1d5d6:	2200      	movs	r2, #0
   1d5d8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1d5da:	2001      	movs	r0, #1
   1d5dc:	4b13      	ldr	r3, [pc, #76]	; (1d62c <hif_set_rx_done+0x64>)
   1d5de:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1d5e0:	1dfc      	adds	r4, r7, #7
   1d5e2:	003b      	movs	r3, r7
   1d5e4:	4a12      	ldr	r2, [pc, #72]	; (1d630 <hif_set_rx_done+0x68>)
   1d5e6:	0019      	movs	r1, r3
   1d5e8:	0010      	movs	r0, r2
   1d5ea:	4b12      	ldr	r3, [pc, #72]	; (1d634 <hif_set_rx_done+0x6c>)
   1d5ec:	4798      	blx	r3
   1d5ee:	0003      	movs	r3, r0
   1d5f0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1d5f2:	1dfb      	adds	r3, r7, #7
   1d5f4:	781b      	ldrb	r3, [r3, #0]
   1d5f6:	b25b      	sxtb	r3, r3
   1d5f8:	2b00      	cmp	r3, #0
   1d5fa:	d10d      	bne.n	1d618 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1d5fc:	683b      	ldr	r3, [r7, #0]
   1d5fe:	2202      	movs	r2, #2
   1d600:	4313      	orrs	r3, r2
   1d602:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1d604:	683b      	ldr	r3, [r7, #0]
   1d606:	1dfc      	adds	r4, r7, #7
   1d608:	4a09      	ldr	r2, [pc, #36]	; (1d630 <hif_set_rx_done+0x68>)
   1d60a:	0019      	movs	r1, r3
   1d60c:	0010      	movs	r0, r2
   1d60e:	4b0a      	ldr	r3, [pc, #40]	; (1d638 <hif_set_rx_done+0x70>)
   1d610:	4798      	blx	r3
   1d612:	0003      	movs	r3, r0
   1d614:	7023      	strb	r3, [r4, #0]
   1d616:	e000      	b.n	1d61a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1d618:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1d61a:	1dfb      	adds	r3, r7, #7
   1d61c:	781b      	ldrb	r3, [r3, #0]
   1d61e:	b25b      	sxtb	r3, r3

}
   1d620:	0018      	movs	r0, r3
   1d622:	46bd      	mov	sp, r7
   1d624:	b003      	add	sp, #12
   1d626:	bd90      	pop	{r4, r7, pc}
   1d628:	20005504 	.word	0x20005504
   1d62c:	0001cce5 	.word	0x0001cce5
   1d630:	00001070 	.word	0x00001070
   1d634:	0001f5c1 	.word	0x0001f5c1
   1d638:	0001f5e5 	.word	0x0001f5e5

0001d63c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1d63c:	b580      	push	{r7, lr}
   1d63e:	b082      	sub	sp, #8
   1d640:	af00      	add	r7, sp, #0
   1d642:	603a      	str	r2, [r7, #0]
   1d644:	1dfb      	adds	r3, r7, #7
   1d646:	1c02      	adds	r2, r0, #0
   1d648:	701a      	strb	r2, [r3, #0]
   1d64a:	1d3b      	adds	r3, r7, #4
   1d64c:	1c0a      	adds	r2, r1, #0
   1d64e:	801a      	strh	r2, [r3, #0]


}
   1d650:	46c0      	nop			; (mov r8, r8)
   1d652:	46bd      	mov	sp, r7
   1d654:	b002      	add	sp, #8
   1d656:	bd80      	pop	{r7, pc}

0001d658 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1d658:	b590      	push	{r4, r7, lr}
   1d65a:	b083      	sub	sp, #12
   1d65c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1d65e:	1dfb      	adds	r3, r7, #7
   1d660:	2200      	movs	r2, #0
   1d662:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1d664:	4b16      	ldr	r3, [pc, #88]	; (1d6c0 <hif_chip_wake+0x68>)
   1d666:	789b      	ldrb	r3, [r3, #2]
   1d668:	b2db      	uxtb	r3, r3
   1d66a:	2b00      	cmp	r3, #0
   1d66c:	d003      	beq.n	1d676 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1d66e:	1dfb      	adds	r3, r7, #7
   1d670:	781b      	ldrb	r3, [r3, #0]
   1d672:	b25b      	sxtb	r3, r3
   1d674:	e01f      	b.n	1d6b6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1d676:	4b12      	ldr	r3, [pc, #72]	; (1d6c0 <hif_chip_wake+0x68>)
   1d678:	785b      	ldrb	r3, [r3, #1]
   1d67a:	b2db      	uxtb	r3, r3
   1d67c:	2b00      	cmp	r3, #0
   1d67e:	d10e      	bne.n	1d69e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1d680:	4b0f      	ldr	r3, [pc, #60]	; (1d6c0 <hif_chip_wake+0x68>)
   1d682:	781b      	ldrb	r3, [r3, #0]
   1d684:	b2db      	uxtb	r3, r3
   1d686:	2b00      	cmp	r3, #0
   1d688:	d009      	beq.n	1d69e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1d68a:	1dfc      	adds	r4, r7, #7
   1d68c:	4b0d      	ldr	r3, [pc, #52]	; (1d6c4 <hif_chip_wake+0x6c>)
   1d68e:	4798      	blx	r3
   1d690:	0003      	movs	r3, r0
   1d692:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1d694:	1dfb      	adds	r3, r7, #7
   1d696:	781b      	ldrb	r3, [r3, #0]
   1d698:	b25b      	sxtb	r3, r3
   1d69a:	2b00      	cmp	r3, #0
   1d69c:	d107      	bne.n	1d6ae <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1d69e:	4b08      	ldr	r3, [pc, #32]	; (1d6c0 <hif_chip_wake+0x68>)
   1d6a0:	785b      	ldrb	r3, [r3, #1]
   1d6a2:	b2db      	uxtb	r3, r3
   1d6a4:	3301      	adds	r3, #1
   1d6a6:	b2da      	uxtb	r2, r3
   1d6a8:	4b05      	ldr	r3, [pc, #20]	; (1d6c0 <hif_chip_wake+0x68>)
   1d6aa:	705a      	strb	r2, [r3, #1]
   1d6ac:	e000      	b.n	1d6b0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1d6ae:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1d6b0:	1dfb      	adds	r3, r7, #7
   1d6b2:	781b      	ldrb	r3, [r3, #0]
   1d6b4:	b25b      	sxtb	r3, r3
}
   1d6b6:	0018      	movs	r0, r3
   1d6b8:	46bd      	mov	sp, r7
   1d6ba:	b003      	add	sp, #12
   1d6bc:	bd90      	pop	{r4, r7, pc}
   1d6be:	46c0      	nop			; (mov r8, r8)
   1d6c0:	20005504 	.word	0x20005504
   1d6c4:	0001f091 	.word	0x0001f091

0001d6c8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1d6c8:	b580      	push	{r7, lr}
   1d6ca:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1d6cc:	4b07      	ldr	r3, [pc, #28]	; (1d6ec <hif_chip_sleep_sc+0x24>)
   1d6ce:	785b      	ldrb	r3, [r3, #1]
   1d6d0:	b2db      	uxtb	r3, r3
   1d6d2:	2b00      	cmp	r3, #0
   1d6d4:	d006      	beq.n	1d6e4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1d6d6:	4b05      	ldr	r3, [pc, #20]	; (1d6ec <hif_chip_sleep_sc+0x24>)
   1d6d8:	785b      	ldrb	r3, [r3, #1]
   1d6da:	b2db      	uxtb	r3, r3
   1d6dc:	3b01      	subs	r3, #1
   1d6de:	b2da      	uxtb	r2, r3
   1d6e0:	4b02      	ldr	r3, [pc, #8]	; (1d6ec <hif_chip_sleep_sc+0x24>)
   1d6e2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1d6e4:	2300      	movs	r3, #0
}
   1d6e6:	0018      	movs	r0, r3
   1d6e8:	46bd      	mov	sp, r7
   1d6ea:	bd80      	pop	{r7, pc}
   1d6ec:	20005504 	.word	0x20005504

0001d6f0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1d6f0:	b590      	push	{r4, r7, lr}
   1d6f2:	b083      	sub	sp, #12
   1d6f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1d6f6:	1dfb      	adds	r3, r7, #7
   1d6f8:	2200      	movs	r2, #0
   1d6fa:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1d6fc:	4b10      	ldr	r3, [pc, #64]	; (1d740 <hif_chip_sleep+0x50>)
   1d6fe:	785b      	ldrb	r3, [r3, #1]
   1d700:	b2db      	uxtb	r3, r3
   1d702:	2b00      	cmp	r3, #0
   1d704:	d006      	beq.n	1d714 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1d706:	4b0e      	ldr	r3, [pc, #56]	; (1d740 <hif_chip_sleep+0x50>)
   1d708:	785b      	ldrb	r3, [r3, #1]
   1d70a:	b2db      	uxtb	r3, r3
   1d70c:	3b01      	subs	r3, #1
   1d70e:	b2da      	uxtb	r2, r3
   1d710:	4b0b      	ldr	r3, [pc, #44]	; (1d740 <hif_chip_sleep+0x50>)
   1d712:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1d714:	4b0a      	ldr	r3, [pc, #40]	; (1d740 <hif_chip_sleep+0x50>)
   1d716:	785b      	ldrb	r3, [r3, #1]
   1d718:	b2db      	uxtb	r3, r3
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	d109      	bne.n	1d732 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1d71e:	4b08      	ldr	r3, [pc, #32]	; (1d740 <hif_chip_sleep+0x50>)
   1d720:	781b      	ldrb	r3, [r3, #0]
   1d722:	b2db      	uxtb	r3, r3
   1d724:	2b00      	cmp	r3, #0
   1d726:	d004      	beq.n	1d732 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1d728:	1dfc      	adds	r4, r7, #7
   1d72a:	4b06      	ldr	r3, [pc, #24]	; (1d744 <hif_chip_sleep+0x54>)
   1d72c:	4798      	blx	r3
   1d72e:	0003      	movs	r3, r0
   1d730:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1d732:	1dfb      	adds	r3, r7, #7
   1d734:	781b      	ldrb	r3, [r3, #0]
   1d736:	b25b      	sxtb	r3, r3
}
   1d738:	0018      	movs	r0, r3
   1d73a:	46bd      	mov	sp, r7
   1d73c:	b003      	add	sp, #12
   1d73e:	bd90      	pop	{r4, r7, pc}
   1d740:	20005504 	.word	0x20005504
   1d744:	0001efb9 	.word	0x0001efb9

0001d748 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1d748:	b580      	push	{r7, lr}
   1d74a:	b082      	sub	sp, #8
   1d74c:	af00      	add	r7, sp, #0
   1d74e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1d750:	4b09      	ldr	r3, [pc, #36]	; (1d778 <hif_init+0x30>)
   1d752:	222c      	movs	r2, #44	; 0x2c
   1d754:	2100      	movs	r1, #0
   1d756:	0018      	movs	r0, r3
   1d758:	4b08      	ldr	r3, [pc, #32]	; (1d77c <hif_init+0x34>)
   1d75a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1d75c:	4b08      	ldr	r3, [pc, #32]	; (1d780 <hif_init+0x38>)
   1d75e:	0018      	movs	r0, r3
   1d760:	4b08      	ldr	r3, [pc, #32]	; (1d784 <hif_init+0x3c>)
   1d762:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1d764:	4b08      	ldr	r3, [pc, #32]	; (1d788 <hif_init+0x40>)
   1d766:	0019      	movs	r1, r3
   1d768:	2003      	movs	r0, #3
   1d76a:	4b08      	ldr	r3, [pc, #32]	; (1d78c <hif_init+0x44>)
   1d76c:	4798      	blx	r3
	return M2M_SUCCESS;
   1d76e:	2300      	movs	r3, #0
}
   1d770:	0018      	movs	r0, r3
   1d772:	46bd      	mov	sp, r7
   1d774:	b002      	add	sp, #8
   1d776:	bd80      	pop	{r7, pc}
   1d778:	20005504 	.word	0x20005504
   1d77c:	0001d531 	.word	0x0001d531
   1d780:	0001d5ad 	.word	0x0001d5ad
   1d784:	0001cc6d 	.word	0x0001cc6d
   1d788:	0001d63d 	.word	0x0001d63d
   1d78c:	0001e22d 	.word	0x0001e22d

0001d790 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1d790:	b590      	push	{r4, r7, lr}
   1d792:	b089      	sub	sp, #36	; 0x24
   1d794:	af00      	add	r7, sp, #0
   1d796:	0004      	movs	r4, r0
   1d798:	0008      	movs	r0, r1
   1d79a:	603a      	str	r2, [r7, #0]
   1d79c:	0019      	movs	r1, r3
   1d79e:	1dfb      	adds	r3, r7, #7
   1d7a0:	1c22      	adds	r2, r4, #0
   1d7a2:	701a      	strb	r2, [r3, #0]
   1d7a4:	1dbb      	adds	r3, r7, #6
   1d7a6:	1c02      	adds	r2, r0, #0
   1d7a8:	701a      	strb	r2, [r3, #0]
   1d7aa:	1d3b      	adds	r3, r7, #4
   1d7ac:	1c0a      	adds	r2, r1, #0
   1d7ae:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1d7b0:	231f      	movs	r3, #31
   1d7b2:	18fb      	adds	r3, r7, r3
   1d7b4:	22ff      	movs	r2, #255	; 0xff
   1d7b6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1d7b8:	1dbb      	adds	r3, r7, #6
   1d7ba:	781b      	ldrb	r3, [r3, #0]
   1d7bc:	227f      	movs	r2, #127	; 0x7f
   1d7be:	4013      	ands	r3, r2
   1d7c0:	b2da      	uxtb	r2, r3
   1d7c2:	2318      	movs	r3, #24
   1d7c4:	18fb      	adds	r3, r7, r3
   1d7c6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1d7c8:	2318      	movs	r3, #24
   1d7ca:	18fb      	adds	r3, r7, r3
   1d7cc:	1dfa      	adds	r2, r7, #7
   1d7ce:	7812      	ldrb	r2, [r2, #0]
   1d7d0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1d7d2:	2318      	movs	r3, #24
   1d7d4:	18fb      	adds	r3, r7, r3
   1d7d6:	2208      	movs	r2, #8
   1d7d8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d7dc:	2b00      	cmp	r3, #0
   1d7de:	d011      	beq.n	1d804 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1d7e0:	2318      	movs	r3, #24
   1d7e2:	18fb      	adds	r3, r7, r3
   1d7e4:	885b      	ldrh	r3, [r3, #2]
   1d7e6:	b29a      	uxth	r2, r3
   1d7e8:	2338      	movs	r3, #56	; 0x38
   1d7ea:	18f9      	adds	r1, r7, r3
   1d7ec:	2334      	movs	r3, #52	; 0x34
   1d7ee:	18fb      	adds	r3, r7, r3
   1d7f0:	8809      	ldrh	r1, [r1, #0]
   1d7f2:	881b      	ldrh	r3, [r3, #0]
   1d7f4:	18cb      	adds	r3, r1, r3
   1d7f6:	b29b      	uxth	r3, r3
   1d7f8:	18d3      	adds	r3, r2, r3
   1d7fa:	b29a      	uxth	r2, r3
   1d7fc:	2318      	movs	r3, #24
   1d7fe:	18fb      	adds	r3, r7, r3
   1d800:	805a      	strh	r2, [r3, #2]
   1d802:	e00a      	b.n	1d81a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1d804:	2318      	movs	r3, #24
   1d806:	18fb      	adds	r3, r7, r3
   1d808:	885b      	ldrh	r3, [r3, #2]
   1d80a:	b29a      	uxth	r2, r3
   1d80c:	1d3b      	adds	r3, r7, #4
   1d80e:	881b      	ldrh	r3, [r3, #0]
   1d810:	18d3      	adds	r3, r2, r3
   1d812:	b29a      	uxth	r2, r3
   1d814:	2318      	movs	r3, #24
   1d816:	18fb      	adds	r3, r7, r3
   1d818:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1d81a:	231f      	movs	r3, #31
   1d81c:	18fc      	adds	r4, r7, r3
   1d81e:	4bb2      	ldr	r3, [pc, #712]	; (1dae8 <hif_send+0x358>)
   1d820:	4798      	blx	r3
   1d822:	0003      	movs	r3, r0
   1d824:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   1d826:	231f      	movs	r3, #31
   1d828:	18fb      	adds	r3, r7, r3
   1d82a:	781b      	ldrb	r3, [r3, #0]
   1d82c:	b25b      	sxtb	r3, r3
   1d82e:	2b00      	cmp	r3, #0
   1d830:	d000      	beq.n	1d834 <hif_send+0xa4>
   1d832:	e129      	b.n	1da88 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   1d834:	2300      	movs	r3, #0
   1d836:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   1d838:	230e      	movs	r3, #14
   1d83a:	18fb      	adds	r3, r7, r3
   1d83c:	2200      	movs	r2, #0
   1d83e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1d840:	2300      	movs	r3, #0
   1d842:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   1d844:	1dfb      	adds	r3, r7, #7
   1d846:	781a      	ldrb	r2, [r3, #0]
   1d848:	697b      	ldr	r3, [r7, #20]
   1d84a:	4313      	orrs	r3, r2
   1d84c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   1d84e:	1dbb      	adds	r3, r7, #6
   1d850:	781b      	ldrb	r3, [r3, #0]
   1d852:	021a      	lsls	r2, r3, #8
   1d854:	697b      	ldr	r3, [r7, #20]
   1d856:	4313      	orrs	r3, r2
   1d858:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   1d85a:	2318      	movs	r3, #24
   1d85c:	18fb      	adds	r3, r7, r3
   1d85e:	885b      	ldrh	r3, [r3, #2]
   1d860:	b29b      	uxth	r3, r3
   1d862:	041a      	lsls	r2, r3, #16
   1d864:	697b      	ldr	r3, [r7, #20]
   1d866:	4313      	orrs	r3, r2
   1d868:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1d86a:	697b      	ldr	r3, [r7, #20]
   1d86c:	221f      	movs	r2, #31
   1d86e:	18bc      	adds	r4, r7, r2
   1d870:	4a9e      	ldr	r2, [pc, #632]	; (1daec <hif_send+0x35c>)
   1d872:	0019      	movs	r1, r3
   1d874:	0010      	movs	r0, r2
   1d876:	4b9e      	ldr	r3, [pc, #632]	; (1daf0 <hif_send+0x360>)
   1d878:	4798      	blx	r3
   1d87a:	0003      	movs	r3, r0
   1d87c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1d87e:	231f      	movs	r3, #31
   1d880:	18fb      	adds	r3, r7, r3
   1d882:	781b      	ldrb	r3, [r3, #0]
   1d884:	b25b      	sxtb	r3, r3
   1d886:	2b00      	cmp	r3, #0
   1d888:	d000      	beq.n	1d88c <hif_send+0xfc>
   1d88a:	e119      	b.n	1dac0 <hif_send+0x330>

		reg = 0UL;
   1d88c:	2300      	movs	r3, #0
   1d88e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   1d890:	697b      	ldr	r3, [r7, #20]
   1d892:	2202      	movs	r2, #2
   1d894:	4313      	orrs	r3, r2
   1d896:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1d898:	697b      	ldr	r3, [r7, #20]
   1d89a:	221f      	movs	r2, #31
   1d89c:	18bc      	adds	r4, r7, r2
   1d89e:	4a95      	ldr	r2, [pc, #596]	; (1daf4 <hif_send+0x364>)
   1d8a0:	0019      	movs	r1, r3
   1d8a2:	0010      	movs	r0, r2
   1d8a4:	4b92      	ldr	r3, [pc, #584]	; (1daf0 <hif_send+0x360>)
   1d8a6:	4798      	blx	r3
   1d8a8:	0003      	movs	r3, r0
   1d8aa:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1d8ac:	231f      	movs	r3, #31
   1d8ae:	18fb      	adds	r3, r7, r3
   1d8b0:	781b      	ldrb	r3, [r3, #0]
   1d8b2:	b25b      	sxtb	r3, r3
   1d8b4:	2b00      	cmp	r3, #0
   1d8b6:	d000      	beq.n	1d8ba <hif_send+0x12a>
   1d8b8:	e104      	b.n	1dac4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1d8ba:	2300      	movs	r3, #0
   1d8bc:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1d8be:	230e      	movs	r3, #14
   1d8c0:	18fb      	adds	r3, r7, r3
   1d8c2:	2200      	movs	r2, #0
   1d8c4:	801a      	strh	r2, [r3, #0]
   1d8c6:	e050      	b.n	1d96a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1d8c8:	231f      	movs	r3, #31
   1d8ca:	18fc      	adds	r4, r7, r3
   1d8cc:	2314      	movs	r3, #20
   1d8ce:	18fb      	adds	r3, r7, r3
   1d8d0:	4a88      	ldr	r2, [pc, #544]	; (1daf4 <hif_send+0x364>)
   1d8d2:	0019      	movs	r1, r3
   1d8d4:	0010      	movs	r0, r2
   1d8d6:	4b88      	ldr	r3, [pc, #544]	; (1daf8 <hif_send+0x368>)
   1d8d8:	4798      	blx	r3
   1d8da:	0003      	movs	r3, r0
   1d8dc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   1d8de:	231f      	movs	r3, #31
   1d8e0:	18fb      	adds	r3, r7, r3
   1d8e2:	781b      	ldrb	r3, [r3, #0]
   1d8e4:	b25b      	sxtb	r3, r3
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	d147      	bne.n	1d97a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   1d8ea:	230e      	movs	r3, #14
   1d8ec:	18fb      	adds	r3, r7, r3
   1d8ee:	881b      	ldrh	r3, [r3, #0]
   1d8f0:	b29a      	uxth	r2, r3
   1d8f2:	23f4      	movs	r3, #244	; 0xf4
   1d8f4:	33ff      	adds	r3, #255	; 0xff
   1d8f6:	429a      	cmp	r2, r3
   1d8f8:	d916      	bls.n	1d928 <hif_send+0x198>
				if(cnt < 501) {
   1d8fa:	230e      	movs	r3, #14
   1d8fc:	18fb      	adds	r3, r7, r3
   1d8fe:	881b      	ldrh	r3, [r3, #0]
   1d900:	b29a      	uxth	r2, r3
   1d902:	23fa      	movs	r3, #250	; 0xfa
   1d904:	005b      	lsls	r3, r3, #1
   1d906:	429a      	cmp	r2, r3
   1d908:	d80b      	bhi.n	1d922 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   1d90a:	4b7c      	ldr	r3, [pc, #496]	; (1dafc <hif_send+0x36c>)
   1d90c:	0018      	movs	r0, r3
   1d90e:	4b7c      	ldr	r3, [pc, #496]	; (1db00 <hif_send+0x370>)
   1d910:	4798      	blx	r3
   1d912:	4b7c      	ldr	r3, [pc, #496]	; (1db04 <hif_send+0x374>)
   1d914:	0018      	movs	r0, r3
   1d916:	4b7a      	ldr	r3, [pc, #488]	; (1db00 <hif_send+0x370>)
   1d918:	4798      	blx	r3
   1d91a:	4b7b      	ldr	r3, [pc, #492]	; (1db08 <hif_send+0x378>)
   1d91c:	0018      	movs	r0, r3
   1d91e:	4b78      	ldr	r3, [pc, #480]	; (1db00 <hif_send+0x370>)
   1d920:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   1d922:	2001      	movs	r0, #1
   1d924:	4b79      	ldr	r3, [pc, #484]	; (1db0c <hif_send+0x37c>)
   1d926:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   1d928:	697b      	ldr	r3, [r7, #20]
   1d92a:	2202      	movs	r2, #2
   1d92c:	4013      	ands	r3, r2
   1d92e:	d113      	bne.n	1d958 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1d930:	231f      	movs	r3, #31
   1d932:	18fc      	adds	r4, r7, r3
   1d934:	2310      	movs	r3, #16
   1d936:	18fb      	adds	r3, r7, r3
   1d938:	4a75      	ldr	r2, [pc, #468]	; (1db10 <hif_send+0x380>)
   1d93a:	0019      	movs	r1, r3
   1d93c:	0010      	movs	r0, r2
   1d93e:	4b6e      	ldr	r3, [pc, #440]	; (1daf8 <hif_send+0x368>)
   1d940:	4798      	blx	r3
   1d942:	0003      	movs	r3, r0
   1d944:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   1d946:	231f      	movs	r3, #31
   1d948:	18fb      	adds	r3, r7, r3
   1d94a:	781b      	ldrb	r3, [r3, #0]
   1d94c:	b25b      	sxtb	r3, r3
   1d94e:	2b00      	cmp	r3, #0
   1d950:	d015      	beq.n	1d97e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1d952:	2300      	movs	r3, #0
   1d954:	613b      	str	r3, [r7, #16]
					goto ERR1;
   1d956:	e0bc      	b.n	1dad2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   1d958:	230e      	movs	r3, #14
   1d95a:	18fb      	adds	r3, r7, r3
   1d95c:	881b      	ldrh	r3, [r3, #0]
   1d95e:	b29b      	uxth	r3, r3
   1d960:	3301      	adds	r3, #1
   1d962:	b29a      	uxth	r2, r3
   1d964:	230e      	movs	r3, #14
   1d966:	18fb      	adds	r3, r7, r3
   1d968:	801a      	strh	r2, [r3, #0]
   1d96a:	230e      	movs	r3, #14
   1d96c:	18fb      	adds	r3, r7, r3
   1d96e:	881b      	ldrh	r3, [r3, #0]
   1d970:	b29b      	uxth	r3, r3
   1d972:	4a68      	ldr	r2, [pc, #416]	; (1db14 <hif_send+0x384>)
   1d974:	4293      	cmp	r3, r2
   1d976:	d9a7      	bls.n	1d8c8 <hif_send+0x138>
   1d978:	e002      	b.n	1d980 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   1d97a:	46c0      	nop			; (mov r8, r8)
   1d97c:	e000      	b.n	1d980 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   1d97e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   1d980:	693b      	ldr	r3, [r7, #16]
   1d982:	2b00      	cmp	r3, #0
   1d984:	d100      	bne.n	1d988 <hif_send+0x1f8>
   1d986:	e074      	b.n	1da72 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   1d988:	693b      	ldr	r3, [r7, #16]
   1d98a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1d98c:	2318      	movs	r3, #24
   1d98e:	18fb      	adds	r3, r7, r3
   1d990:	885b      	ldrh	r3, [r3, #2]
   1d992:	b29a      	uxth	r2, r3
   1d994:	2318      	movs	r3, #24
   1d996:	18fb      	adds	r3, r7, r3
   1d998:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1d99a:	68bb      	ldr	r3, [r7, #8]
   1d99c:	221f      	movs	r2, #31
   1d99e:	18bc      	adds	r4, r7, r2
   1d9a0:	2218      	movs	r2, #24
   1d9a2:	18b9      	adds	r1, r7, r2
   1d9a4:	2208      	movs	r2, #8
   1d9a6:	0018      	movs	r0, r3
   1d9a8:	4b5b      	ldr	r3, [pc, #364]	; (1db18 <hif_send+0x388>)
   1d9aa:	4798      	blx	r3
   1d9ac:	0003      	movs	r3, r0
   1d9ae:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1d9b0:	231f      	movs	r3, #31
   1d9b2:	18fb      	adds	r3, r7, r3
   1d9b4:	781b      	ldrb	r3, [r3, #0]
   1d9b6:	b25b      	sxtb	r3, r3
   1d9b8:	2b00      	cmp	r3, #0
   1d9ba:	d000      	beq.n	1d9be <hif_send+0x22e>
   1d9bc:	e084      	b.n	1dac8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1d9be:	68bb      	ldr	r3, [r7, #8]
   1d9c0:	3308      	adds	r3, #8
   1d9c2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   1d9c4:	683b      	ldr	r3, [r7, #0]
   1d9c6:	2b00      	cmp	r3, #0
   1d9c8:	d016      	beq.n	1d9f8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1d9ca:	68b8      	ldr	r0, [r7, #8]
   1d9cc:	1d3b      	adds	r3, r7, #4
   1d9ce:	881a      	ldrh	r2, [r3, #0]
   1d9d0:	231f      	movs	r3, #31
   1d9d2:	18fc      	adds	r4, r7, r3
   1d9d4:	683b      	ldr	r3, [r7, #0]
   1d9d6:	0019      	movs	r1, r3
   1d9d8:	4b4f      	ldr	r3, [pc, #316]	; (1db18 <hif_send+0x388>)
   1d9da:	4798      	blx	r3
   1d9dc:	0003      	movs	r3, r0
   1d9de:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1d9e0:	231f      	movs	r3, #31
   1d9e2:	18fb      	adds	r3, r7, r3
   1d9e4:	781b      	ldrb	r3, [r3, #0]
   1d9e6:	b25b      	sxtb	r3, r3
   1d9e8:	2b00      	cmp	r3, #0
   1d9ea:	d000      	beq.n	1d9ee <hif_send+0x25e>
   1d9ec:	e06e      	b.n	1dacc <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   1d9ee:	1d3b      	adds	r3, r7, #4
   1d9f0:	881a      	ldrh	r2, [r3, #0]
   1d9f2:	68bb      	ldr	r3, [r7, #8]
   1d9f4:	18d3      	adds	r3, r2, r3
   1d9f6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   1d9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d9fa:	2b00      	cmp	r3, #0
   1d9fc:	d021      	beq.n	1da42 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1d9fe:	2338      	movs	r3, #56	; 0x38
   1da00:	18fb      	adds	r3, r7, r3
   1da02:	881a      	ldrh	r2, [r3, #0]
   1da04:	1d3b      	adds	r3, r7, #4
   1da06:	881b      	ldrh	r3, [r3, #0]
   1da08:	1ad3      	subs	r3, r2, r3
   1da0a:	001a      	movs	r2, r3
   1da0c:	68bb      	ldr	r3, [r7, #8]
   1da0e:	18d3      	adds	r3, r2, r3
   1da10:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1da12:	68b8      	ldr	r0, [r7, #8]
   1da14:	2334      	movs	r3, #52	; 0x34
   1da16:	18fb      	adds	r3, r7, r3
   1da18:	881a      	ldrh	r2, [r3, #0]
   1da1a:	231f      	movs	r3, #31
   1da1c:	18fc      	adds	r4, r7, r3
   1da1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1da20:	0019      	movs	r1, r3
   1da22:	4b3d      	ldr	r3, [pc, #244]	; (1db18 <hif_send+0x388>)
   1da24:	4798      	blx	r3
   1da26:	0003      	movs	r3, r0
   1da28:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1da2a:	231f      	movs	r3, #31
   1da2c:	18fb      	adds	r3, r7, r3
   1da2e:	781b      	ldrb	r3, [r3, #0]
   1da30:	b25b      	sxtb	r3, r3
   1da32:	2b00      	cmp	r3, #0
   1da34:	d14c      	bne.n	1dad0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   1da36:	2334      	movs	r3, #52	; 0x34
   1da38:	18fb      	adds	r3, r7, r3
   1da3a:	881a      	ldrh	r2, [r3, #0]
   1da3c:	68bb      	ldr	r3, [r7, #8]
   1da3e:	18d3      	adds	r3, r2, r3
   1da40:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   1da42:	693b      	ldr	r3, [r7, #16]
   1da44:	009b      	lsls	r3, r3, #2
   1da46:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   1da48:	697b      	ldr	r3, [r7, #20]
   1da4a:	2202      	movs	r2, #2
   1da4c:	4313      	orrs	r3, r2
   1da4e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1da50:	697b      	ldr	r3, [r7, #20]
   1da52:	221f      	movs	r2, #31
   1da54:	18bc      	adds	r4, r7, r2
   1da56:	4a31      	ldr	r2, [pc, #196]	; (1db1c <hif_send+0x38c>)
   1da58:	0019      	movs	r1, r3
   1da5a:	0010      	movs	r0, r2
   1da5c:	4b24      	ldr	r3, [pc, #144]	; (1daf0 <hif_send+0x360>)
   1da5e:	4798      	blx	r3
   1da60:	0003      	movs	r3, r0
   1da62:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1da64:	231f      	movs	r3, #31
   1da66:	18fb      	adds	r3, r7, r3
   1da68:	781b      	ldrb	r3, [r3, #0]
   1da6a:	b25b      	sxtb	r3, r3
   1da6c:	2b00      	cmp	r3, #0
   1da6e:	d01c      	beq.n	1daaa <hif_send+0x31a>
   1da70:	e02f      	b.n	1dad2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   1da72:	231f      	movs	r3, #31
   1da74:	18fc      	adds	r4, r7, r3
   1da76:	4b2a      	ldr	r3, [pc, #168]	; (1db20 <hif_send+0x390>)
   1da78:	4798      	blx	r3
   1da7a:	0003      	movs	r3, r0
   1da7c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   1da7e:	231f      	movs	r3, #31
   1da80:	18fb      	adds	r3, r7, r3
   1da82:	22fd      	movs	r2, #253	; 0xfd
   1da84:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   1da86:	e026      	b.n	1dad6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1da88:	2398      	movs	r3, #152	; 0x98
   1da8a:	33ff      	adds	r3, #255	; 0xff
   1da8c:	001a      	movs	r2, r3
   1da8e:	4925      	ldr	r1, [pc, #148]	; (1db24 <hif_send+0x394>)
   1da90:	4b25      	ldr	r3, [pc, #148]	; (1db28 <hif_send+0x398>)
   1da92:	0018      	movs	r0, r3
   1da94:	4b1a      	ldr	r3, [pc, #104]	; (1db00 <hif_send+0x370>)
   1da96:	4798      	blx	r3
   1da98:	4b24      	ldr	r3, [pc, #144]	; (1db2c <hif_send+0x39c>)
   1da9a:	0018      	movs	r0, r3
   1da9c:	4b18      	ldr	r3, [pc, #96]	; (1db00 <hif_send+0x370>)
   1da9e:	4798      	blx	r3
   1daa0:	4b19      	ldr	r3, [pc, #100]	; (1db08 <hif_send+0x378>)
   1daa2:	0018      	movs	r0, r3
   1daa4:	4b16      	ldr	r3, [pc, #88]	; (1db00 <hif_send+0x370>)
   1daa6:	4798      	blx	r3
		goto ERR2;
   1daa8:	e015      	b.n	1dad6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   1daaa:	231f      	movs	r3, #31
   1daac:	18fc      	adds	r4, r7, r3
   1daae:	4b1c      	ldr	r3, [pc, #112]	; (1db20 <hif_send+0x390>)
   1dab0:	4798      	blx	r3
   1dab2:	0003      	movs	r3, r0
   1dab4:	7023      	strb	r3, [r4, #0]
	return ret;
   1dab6:	231f      	movs	r3, #31
   1dab8:	18fb      	adds	r3, r7, r3
   1daba:	781b      	ldrb	r3, [r3, #0]
   1dabc:	b25b      	sxtb	r3, r3
   1dabe:	e00e      	b.n	1dade <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   1dac0:	46c0      	nop			; (mov r8, r8)
   1dac2:	e006      	b.n	1dad2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   1dac4:	46c0      	nop			; (mov r8, r8)
   1dac6:	e004      	b.n	1dad2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   1dac8:	46c0      	nop			; (mov r8, r8)
   1daca:	e002      	b.n	1dad2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1dacc:	46c0      	nop			; (mov r8, r8)
   1dace:	e000      	b.n	1dad2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1dad0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1dad2:	4b17      	ldr	r3, [pc, #92]	; (1db30 <hif_send+0x3a0>)
   1dad4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   1dad6:	231f      	movs	r3, #31
   1dad8:	18fb      	adds	r3, r7, r3
   1dada:	781b      	ldrb	r3, [r3, #0]
   1dadc:	b25b      	sxtb	r3, r3
}
   1dade:	0018      	movs	r0, r3
   1dae0:	46bd      	mov	sp, r7
   1dae2:	b009      	add	sp, #36	; 0x24
   1dae4:	bd90      	pop	{r4, r7, pc}
   1dae6:	46c0      	nop			; (mov r8, r8)
   1dae8:	0001d659 	.word	0x0001d659
   1daec:	0000108c 	.word	0x0000108c
   1daf0:	0001f5e5 	.word	0x0001f5e5
   1daf4:	00001078 	.word	0x00001078
   1daf8:	0001f5c1 	.word	0x0001f5c1
   1dafc:	00036678 	.word	0x00036678
   1db00:	0001a5e9 	.word	0x0001a5e9
   1db04:	00036684 	.word	0x00036684
   1db08:	00036698 	.word	0x00036698
   1db0c:	0001cc51 	.word	0x0001cc51
   1db10:	00150400 	.word	0x00150400
   1db14:	000003e7 	.word	0x000003e7
   1db18:	0001f72d 	.word	0x0001f72d
   1db1c:	0000106c 	.word	0x0000106c
   1db20:	0001d6f1 	.word	0x0001d6f1
   1db24:	000369a0 	.word	0x000369a0
   1db28:	0003669c 	.word	0x0003669c
   1db2c:	000366b0 	.word	0x000366b0
   1db30:	0001d6c9 	.word	0x0001d6c9

0001db34 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   1db34:	b590      	push	{r4, r7, lr}
   1db36:	b087      	sub	sp, #28
   1db38:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   1db3a:	230f      	movs	r3, #15
   1db3c:	18fb      	adds	r3, r7, r3
   1db3e:	2200      	movs	r2, #0
   1db40:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1db42:	230f      	movs	r3, #15
   1db44:	18fc      	adds	r4, r7, r3
   1db46:	2308      	movs	r3, #8
   1db48:	18fb      	adds	r3, r7, r3
   1db4a:	4adc      	ldr	r2, [pc, #880]	; (1debc <hif_isr+0x388>)
   1db4c:	0019      	movs	r1, r3
   1db4e:	0010      	movs	r0, r2
   1db50:	4bdb      	ldr	r3, [pc, #876]	; (1dec0 <hif_isr+0x38c>)
   1db52:	4798      	blx	r3
   1db54:	0003      	movs	r3, r0
   1db56:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   1db58:	230f      	movs	r3, #15
   1db5a:	18fb      	adds	r3, r7, r3
   1db5c:	781b      	ldrb	r3, [r3, #0]
   1db5e:	b25b      	sxtb	r3, r3
   1db60:	2b00      	cmp	r3, #0
   1db62:	d000      	beq.n	1db66 <hif_isr+0x32>
   1db64:	e21e      	b.n	1dfa4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   1db66:	68bb      	ldr	r3, [r7, #8]
   1db68:	2201      	movs	r2, #1
   1db6a:	4013      	ands	r3, r2
   1db6c:	d100      	bne.n	1db70 <hif_isr+0x3c>
   1db6e:	e204      	b.n	1df7a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   1db70:	2000      	movs	r0, #0
   1db72:	4bd4      	ldr	r3, [pc, #848]	; (1dec4 <hif_isr+0x390>)
   1db74:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   1db76:	68bb      	ldr	r3, [r7, #8]
   1db78:	2201      	movs	r2, #1
   1db7a:	4393      	bics	r3, r2
   1db7c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1db7e:	68bb      	ldr	r3, [r7, #8]
   1db80:	220f      	movs	r2, #15
   1db82:	18bc      	adds	r4, r7, r2
   1db84:	4acd      	ldr	r2, [pc, #820]	; (1debc <hif_isr+0x388>)
   1db86:	0019      	movs	r1, r3
   1db88:	0010      	movs	r0, r2
   1db8a:	4bcf      	ldr	r3, [pc, #828]	; (1dec8 <hif_isr+0x394>)
   1db8c:	4798      	blx	r3
   1db8e:	0003      	movs	r3, r0
   1db90:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1db92:	230f      	movs	r3, #15
   1db94:	18fb      	adds	r3, r7, r3
   1db96:	781b      	ldrb	r3, [r3, #0]
   1db98:	b25b      	sxtb	r3, r3
   1db9a:	2b00      	cmp	r3, #0
   1db9c:	d000      	beq.n	1dba0 <hif_isr+0x6c>
   1db9e:	e210      	b.n	1dfc2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   1dba0:	4bca      	ldr	r3, [pc, #808]	; (1decc <hif_isr+0x398>)
   1dba2:	2201      	movs	r2, #1
   1dba4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1dba6:	68bb      	ldr	r3, [r7, #8]
   1dba8:	089b      	lsrs	r3, r3, #2
   1dbaa:	b29a      	uxth	r2, r3
   1dbac:	230c      	movs	r3, #12
   1dbae:	18fb      	adds	r3, r7, r3
   1dbb0:	0512      	lsls	r2, r2, #20
   1dbb2:	0d12      	lsrs	r2, r2, #20
   1dbb4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   1dbb6:	230c      	movs	r3, #12
   1dbb8:	18fb      	adds	r3, r7, r3
   1dbba:	881b      	ldrh	r3, [r3, #0]
   1dbbc:	2b00      	cmp	r3, #0
   1dbbe:	d100      	bne.n	1dbc2 <hif_isr+0x8e>
   1dbc0:	e1c8      	b.n	1df54 <hif_isr+0x420>
				uint32 address = 0;
   1dbc2:	2300      	movs	r3, #0
   1dbc4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1dbc6:	230f      	movs	r3, #15
   1dbc8:	18fc      	adds	r4, r7, r3
   1dbca:	003b      	movs	r3, r7
   1dbcc:	4ac0      	ldr	r2, [pc, #768]	; (1ded0 <hif_isr+0x39c>)
   1dbce:	0019      	movs	r1, r3
   1dbd0:	0010      	movs	r0, r2
   1dbd2:	4bbb      	ldr	r3, [pc, #748]	; (1dec0 <hif_isr+0x38c>)
   1dbd4:	4798      	blx	r3
   1dbd6:	0003      	movs	r3, r0
   1dbd8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   1dbda:	230f      	movs	r3, #15
   1dbdc:	18fb      	adds	r3, r7, r3
   1dbde:	781b      	ldrb	r3, [r3, #0]
   1dbe0:	b25b      	sxtb	r3, r3
   1dbe2:	2b00      	cmp	r3, #0
   1dbe4:	d012      	beq.n	1dc0c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1dbe6:	23e4      	movs	r3, #228	; 0xe4
   1dbe8:	005a      	lsls	r2, r3, #1
   1dbea:	49ba      	ldr	r1, [pc, #744]	; (1ded4 <hif_isr+0x3a0>)
   1dbec:	4bba      	ldr	r3, [pc, #744]	; (1ded8 <hif_isr+0x3a4>)
   1dbee:	0018      	movs	r0, r3
   1dbf0:	4bba      	ldr	r3, [pc, #744]	; (1dedc <hif_isr+0x3a8>)
   1dbf2:	4798      	blx	r3
   1dbf4:	4bba      	ldr	r3, [pc, #744]	; (1dee0 <hif_isr+0x3ac>)
   1dbf6:	0018      	movs	r0, r3
   1dbf8:	4bb8      	ldr	r3, [pc, #736]	; (1dedc <hif_isr+0x3a8>)
   1dbfa:	4798      	blx	r3
   1dbfc:	4bb9      	ldr	r3, [pc, #740]	; (1dee4 <hif_isr+0x3b0>)
   1dbfe:	0018      	movs	r0, r3
   1dc00:	4bb6      	ldr	r3, [pc, #728]	; (1dedc <hif_isr+0x3a8>)
   1dc02:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1dc04:	2001      	movs	r0, #1
   1dc06:	4baf      	ldr	r3, [pc, #700]	; (1dec4 <hif_isr+0x390>)
   1dc08:	4798      	blx	r3
					goto ERR1;
   1dc0a:	e1db      	b.n	1dfc4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   1dc0c:	683a      	ldr	r2, [r7, #0]
   1dc0e:	4baf      	ldr	r3, [pc, #700]	; (1decc <hif_isr+0x398>)
   1dc10:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1dc12:	230c      	movs	r3, #12
   1dc14:	18fb      	adds	r3, r7, r3
   1dc16:	881a      	ldrh	r2, [r3, #0]
   1dc18:	4bac      	ldr	r3, [pc, #688]	; (1decc <hif_isr+0x398>)
   1dc1a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1dc1c:	683b      	ldr	r3, [r7, #0]
   1dc1e:	220f      	movs	r2, #15
   1dc20:	18bc      	adds	r4, r7, r2
   1dc22:	1d39      	adds	r1, r7, #4
   1dc24:	2204      	movs	r2, #4
   1dc26:	0018      	movs	r0, r3
   1dc28:	4baf      	ldr	r3, [pc, #700]	; (1dee8 <hif_isr+0x3b4>)
   1dc2a:	4798      	blx	r3
   1dc2c:	0003      	movs	r3, r0
   1dc2e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1dc30:	1d3b      	adds	r3, r7, #4
   1dc32:	885b      	ldrh	r3, [r3, #2]
   1dc34:	b29a      	uxth	r2, r3
   1dc36:	1d3b      	adds	r3, r7, #4
   1dc38:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   1dc3a:	230f      	movs	r3, #15
   1dc3c:	18fb      	adds	r3, r7, r3
   1dc3e:	781b      	ldrb	r3, [r3, #0]
   1dc40:	b25b      	sxtb	r3, r3
   1dc42:	2b00      	cmp	r3, #0
   1dc44:	d012      	beq.n	1dc6c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   1dc46:	23e9      	movs	r3, #233	; 0xe9
   1dc48:	005a      	lsls	r2, r3, #1
   1dc4a:	49a2      	ldr	r1, [pc, #648]	; (1ded4 <hif_isr+0x3a0>)
   1dc4c:	4ba2      	ldr	r3, [pc, #648]	; (1ded8 <hif_isr+0x3a4>)
   1dc4e:	0018      	movs	r0, r3
   1dc50:	4ba2      	ldr	r3, [pc, #648]	; (1dedc <hif_isr+0x3a8>)
   1dc52:	4798      	blx	r3
   1dc54:	4ba5      	ldr	r3, [pc, #660]	; (1deec <hif_isr+0x3b8>)
   1dc56:	0018      	movs	r0, r3
   1dc58:	4ba0      	ldr	r3, [pc, #640]	; (1dedc <hif_isr+0x3a8>)
   1dc5a:	4798      	blx	r3
   1dc5c:	4ba1      	ldr	r3, [pc, #644]	; (1dee4 <hif_isr+0x3b0>)
   1dc5e:	0018      	movs	r0, r3
   1dc60:	4b9e      	ldr	r3, [pc, #632]	; (1dedc <hif_isr+0x3a8>)
   1dc62:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1dc64:	2001      	movs	r0, #1
   1dc66:	4b97      	ldr	r3, [pc, #604]	; (1dec4 <hif_isr+0x390>)
   1dc68:	4798      	blx	r3
					goto ERR1;
   1dc6a:	e1ab      	b.n	1dfc4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   1dc6c:	1d3b      	adds	r3, r7, #4
   1dc6e:	885b      	ldrh	r3, [r3, #2]
   1dc70:	b29b      	uxth	r3, r3
   1dc72:	220c      	movs	r2, #12
   1dc74:	18ba      	adds	r2, r7, r2
   1dc76:	8812      	ldrh	r2, [r2, #0]
   1dc78:	429a      	cmp	r2, r3
   1dc7a:	d02f      	beq.n	1dcdc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   1dc7c:	230c      	movs	r3, #12
   1dc7e:	18fb      	adds	r3, r7, r3
   1dc80:	881b      	ldrh	r3, [r3, #0]
   1dc82:	1d3a      	adds	r2, r7, #4
   1dc84:	8852      	ldrh	r2, [r2, #2]
   1dc86:	b292      	uxth	r2, r2
   1dc88:	1a9b      	subs	r3, r3, r2
   1dc8a:	2b04      	cmp	r3, #4
   1dc8c:	dd26      	ble.n	1dcdc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1dc8e:	23dc      	movs	r3, #220	; 0xdc
   1dc90:	33ff      	adds	r3, #255	; 0xff
   1dc92:	001a      	movs	r2, r3
   1dc94:	498f      	ldr	r1, [pc, #572]	; (1ded4 <hif_isr+0x3a0>)
   1dc96:	4b90      	ldr	r3, [pc, #576]	; (1ded8 <hif_isr+0x3a4>)
   1dc98:	0018      	movs	r0, r3
   1dc9a:	4b90      	ldr	r3, [pc, #576]	; (1dedc <hif_isr+0x3a8>)
   1dc9c:	4798      	blx	r3
   1dc9e:	230c      	movs	r3, #12
   1dca0:	18fb      	adds	r3, r7, r3
   1dca2:	8819      	ldrh	r1, [r3, #0]
   1dca4:	1d3b      	adds	r3, r7, #4
   1dca6:	885b      	ldrh	r3, [r3, #2]
   1dca8:	b29b      	uxth	r3, r3
   1dcaa:	001a      	movs	r2, r3
   1dcac:	1d3b      	adds	r3, r7, #4
   1dcae:	781b      	ldrb	r3, [r3, #0]
   1dcb0:	b2db      	uxtb	r3, r3
   1dcb2:	001c      	movs	r4, r3
   1dcb4:	1d3b      	adds	r3, r7, #4
   1dcb6:	785b      	ldrb	r3, [r3, #1]
   1dcb8:	b2db      	uxtb	r3, r3
   1dcba:	488d      	ldr	r0, [pc, #564]	; (1def0 <hif_isr+0x3bc>)
   1dcbc:	9300      	str	r3, [sp, #0]
   1dcbe:	0023      	movs	r3, r4
   1dcc0:	4c86      	ldr	r4, [pc, #536]	; (1dedc <hif_isr+0x3a8>)
   1dcc2:	47a0      	blx	r4
   1dcc4:	4b87      	ldr	r3, [pc, #540]	; (1dee4 <hif_isr+0x3b0>)
   1dcc6:	0018      	movs	r0, r3
   1dcc8:	4b84      	ldr	r3, [pc, #528]	; (1dedc <hif_isr+0x3a8>)
   1dcca:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   1dccc:	2001      	movs	r0, #1
   1dcce:	4b7d      	ldr	r3, [pc, #500]	; (1dec4 <hif_isr+0x390>)
   1dcd0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1dcd2:	230f      	movs	r3, #15
   1dcd4:	18fb      	adds	r3, r7, r3
   1dcd6:	22fa      	movs	r2, #250	; 0xfa
   1dcd8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   1dcda:	e173      	b.n	1dfc4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1dcdc:	1d3b      	adds	r3, r7, #4
   1dcde:	781b      	ldrb	r3, [r3, #0]
   1dce0:	b2db      	uxtb	r3, r3
   1dce2:	2b01      	cmp	r3, #1
   1dce4:	d122      	bne.n	1dd2c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   1dce6:	4b79      	ldr	r3, [pc, #484]	; (1decc <hif_isr+0x398>)
   1dce8:	691b      	ldr	r3, [r3, #16]
   1dcea:	2b00      	cmp	r3, #0
   1dcec:	d00d      	beq.n	1dd0a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1dcee:	4b77      	ldr	r3, [pc, #476]	; (1decc <hif_isr+0x398>)
   1dcf0:	691b      	ldr	r3, [r3, #16]
   1dcf2:	1d3a      	adds	r2, r7, #4
   1dcf4:	7852      	ldrb	r2, [r2, #1]
   1dcf6:	b2d0      	uxtb	r0, r2
   1dcf8:	1d3a      	adds	r2, r7, #4
   1dcfa:	8852      	ldrh	r2, [r2, #2]
   1dcfc:	b292      	uxth	r2, r2
   1dcfe:	3a08      	subs	r2, #8
   1dd00:	b291      	uxth	r1, r2
   1dd02:	683a      	ldr	r2, [r7, #0]
   1dd04:	3208      	adds	r2, #8
   1dd06:	4798      	blx	r3
   1dd08:	e102      	b.n	1df10 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   1dd0a:	23e8      	movs	r3, #232	; 0xe8
   1dd0c:	33ff      	adds	r3, #255	; 0xff
   1dd0e:	001a      	movs	r2, r3
   1dd10:	4970      	ldr	r1, [pc, #448]	; (1ded4 <hif_isr+0x3a0>)
   1dd12:	4b71      	ldr	r3, [pc, #452]	; (1ded8 <hif_isr+0x3a4>)
   1dd14:	0018      	movs	r0, r3
   1dd16:	4b71      	ldr	r3, [pc, #452]	; (1dedc <hif_isr+0x3a8>)
   1dd18:	4798      	blx	r3
   1dd1a:	4b76      	ldr	r3, [pc, #472]	; (1def4 <hif_isr+0x3c0>)
   1dd1c:	0018      	movs	r0, r3
   1dd1e:	4b6f      	ldr	r3, [pc, #444]	; (1dedc <hif_isr+0x3a8>)
   1dd20:	4798      	blx	r3
   1dd22:	4b70      	ldr	r3, [pc, #448]	; (1dee4 <hif_isr+0x3b0>)
   1dd24:	0018      	movs	r0, r3
   1dd26:	4b6d      	ldr	r3, [pc, #436]	; (1dedc <hif_isr+0x3a8>)
   1dd28:	4798      	blx	r3
   1dd2a:	e0f1      	b.n	1df10 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1dd2c:	1d3b      	adds	r3, r7, #4
   1dd2e:	781b      	ldrb	r3, [r3, #0]
   1dd30:	b2db      	uxtb	r3, r3
   1dd32:	2b02      	cmp	r3, #2
   1dd34:	d122      	bne.n	1dd7c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   1dd36:	4b65      	ldr	r3, [pc, #404]	; (1decc <hif_isr+0x398>)
   1dd38:	695b      	ldr	r3, [r3, #20]
   1dd3a:	2b00      	cmp	r3, #0
   1dd3c:	d00d      	beq.n	1dd5a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1dd3e:	4b63      	ldr	r3, [pc, #396]	; (1decc <hif_isr+0x398>)
   1dd40:	695b      	ldr	r3, [r3, #20]
   1dd42:	1d3a      	adds	r2, r7, #4
   1dd44:	7852      	ldrb	r2, [r2, #1]
   1dd46:	b2d0      	uxtb	r0, r2
   1dd48:	1d3a      	adds	r2, r7, #4
   1dd4a:	8852      	ldrh	r2, [r2, #2]
   1dd4c:	b292      	uxth	r2, r2
   1dd4e:	3a08      	subs	r2, #8
   1dd50:	b291      	uxth	r1, r2
   1dd52:	683a      	ldr	r2, [r7, #0]
   1dd54:	3208      	adds	r2, #8
   1dd56:	4798      	blx	r3
   1dd58:	e0da      	b.n	1df10 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   1dd5a:	23f0      	movs	r3, #240	; 0xf0
   1dd5c:	33ff      	adds	r3, #255	; 0xff
   1dd5e:	001a      	movs	r2, r3
   1dd60:	495c      	ldr	r1, [pc, #368]	; (1ded4 <hif_isr+0x3a0>)
   1dd62:	4b5d      	ldr	r3, [pc, #372]	; (1ded8 <hif_isr+0x3a4>)
   1dd64:	0018      	movs	r0, r3
   1dd66:	4b5d      	ldr	r3, [pc, #372]	; (1dedc <hif_isr+0x3a8>)
   1dd68:	4798      	blx	r3
   1dd6a:	4b63      	ldr	r3, [pc, #396]	; (1def8 <hif_isr+0x3c4>)
   1dd6c:	0018      	movs	r0, r3
   1dd6e:	4b5b      	ldr	r3, [pc, #364]	; (1dedc <hif_isr+0x3a8>)
   1dd70:	4798      	blx	r3
   1dd72:	4b5c      	ldr	r3, [pc, #368]	; (1dee4 <hif_isr+0x3b0>)
   1dd74:	0018      	movs	r0, r3
   1dd76:	4b59      	ldr	r3, [pc, #356]	; (1dedc <hif_isr+0x3a8>)
   1dd78:	4798      	blx	r3
   1dd7a:	e0c9      	b.n	1df10 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1dd7c:	1d3b      	adds	r3, r7, #4
   1dd7e:	781b      	ldrb	r3, [r3, #0]
   1dd80:	b2db      	uxtb	r3, r3
   1dd82:	2b04      	cmp	r3, #4
   1dd84:	d122      	bne.n	1ddcc <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   1dd86:	4b51      	ldr	r3, [pc, #324]	; (1decc <hif_isr+0x398>)
   1dd88:	699b      	ldr	r3, [r3, #24]
   1dd8a:	2b00      	cmp	r3, #0
   1dd8c:	d00d      	beq.n	1ddaa <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1dd8e:	4b4f      	ldr	r3, [pc, #316]	; (1decc <hif_isr+0x398>)
   1dd90:	699b      	ldr	r3, [r3, #24]
   1dd92:	1d3a      	adds	r2, r7, #4
   1dd94:	7852      	ldrb	r2, [r2, #1]
   1dd96:	b2d0      	uxtb	r0, r2
   1dd98:	1d3a      	adds	r2, r7, #4
   1dd9a:	8852      	ldrh	r2, [r2, #2]
   1dd9c:	b292      	uxth	r2, r2
   1dd9e:	3a08      	subs	r2, #8
   1dda0:	b291      	uxth	r1, r2
   1dda2:	683a      	ldr	r2, [r7, #0]
   1dda4:	3208      	adds	r2, #8
   1dda6:	4798      	blx	r3
   1dda8:	e0b2      	b.n	1df10 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   1ddaa:	23f8      	movs	r3, #248	; 0xf8
   1ddac:	33ff      	adds	r3, #255	; 0xff
   1ddae:	001a      	movs	r2, r3
   1ddb0:	4948      	ldr	r1, [pc, #288]	; (1ded4 <hif_isr+0x3a0>)
   1ddb2:	4b49      	ldr	r3, [pc, #292]	; (1ded8 <hif_isr+0x3a4>)
   1ddb4:	0018      	movs	r0, r3
   1ddb6:	4b49      	ldr	r3, [pc, #292]	; (1dedc <hif_isr+0x3a8>)
   1ddb8:	4798      	blx	r3
   1ddba:	4b50      	ldr	r3, [pc, #320]	; (1defc <hif_isr+0x3c8>)
   1ddbc:	0018      	movs	r0, r3
   1ddbe:	4b47      	ldr	r3, [pc, #284]	; (1dedc <hif_isr+0x3a8>)
   1ddc0:	4798      	blx	r3
   1ddc2:	4b48      	ldr	r3, [pc, #288]	; (1dee4 <hif_isr+0x3b0>)
   1ddc4:	0018      	movs	r0, r3
   1ddc6:	4b45      	ldr	r3, [pc, #276]	; (1dedc <hif_isr+0x3a8>)
   1ddc8:	4798      	blx	r3
   1ddca:	e0a1      	b.n	1df10 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1ddcc:	1d3b      	adds	r3, r7, #4
   1ddce:	781b      	ldrb	r3, [r3, #0]
   1ddd0:	b2db      	uxtb	r3, r3
   1ddd2:	2b06      	cmp	r3, #6
   1ddd4:	d121      	bne.n	1de1a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   1ddd6:	4b3d      	ldr	r3, [pc, #244]	; (1decc <hif_isr+0x398>)
   1ddd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ddda:	2b00      	cmp	r3, #0
   1dddc:	d00d      	beq.n	1ddfa <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1ddde:	4b3b      	ldr	r3, [pc, #236]	; (1decc <hif_isr+0x398>)
   1dde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dde2:	1d3a      	adds	r2, r7, #4
   1dde4:	7852      	ldrb	r2, [r2, #1]
   1dde6:	b2d0      	uxtb	r0, r2
   1dde8:	1d3a      	adds	r2, r7, #4
   1ddea:	8852      	ldrh	r2, [r2, #2]
   1ddec:	b292      	uxth	r2, r2
   1ddee:	3a08      	subs	r2, #8
   1ddf0:	b291      	uxth	r1, r2
   1ddf2:	683a      	ldr	r2, [r7, #0]
   1ddf4:	3208      	adds	r2, #8
   1ddf6:	4798      	blx	r3
   1ddf8:	e08a      	b.n	1df10 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   1ddfa:	2380      	movs	r3, #128	; 0x80
   1ddfc:	009a      	lsls	r2, r3, #2
   1ddfe:	4935      	ldr	r1, [pc, #212]	; (1ded4 <hif_isr+0x3a0>)
   1de00:	4b35      	ldr	r3, [pc, #212]	; (1ded8 <hif_isr+0x3a4>)
   1de02:	0018      	movs	r0, r3
   1de04:	4b35      	ldr	r3, [pc, #212]	; (1dedc <hif_isr+0x3a8>)
   1de06:	4798      	blx	r3
   1de08:	4b3d      	ldr	r3, [pc, #244]	; (1df00 <hif_isr+0x3cc>)
   1de0a:	0018      	movs	r0, r3
   1de0c:	4b33      	ldr	r3, [pc, #204]	; (1dedc <hif_isr+0x3a8>)
   1de0e:	4798      	blx	r3
   1de10:	4b34      	ldr	r3, [pc, #208]	; (1dee4 <hif_isr+0x3b0>)
   1de12:	0018      	movs	r0, r3
   1de14:	4b31      	ldr	r3, [pc, #196]	; (1dedc <hif_isr+0x3a8>)
   1de16:	4798      	blx	r3
   1de18:	e07a      	b.n	1df10 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1de1a:	1d3b      	adds	r3, r7, #4
   1de1c:	781b      	ldrb	r3, [r3, #0]
   1de1e:	b2db      	uxtb	r3, r3
   1de20:	2b07      	cmp	r3, #7
   1de22:	d120      	bne.n	1de66 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   1de24:	4b29      	ldr	r3, [pc, #164]	; (1decc <hif_isr+0x398>)
   1de26:	69db      	ldr	r3, [r3, #28]
   1de28:	2b00      	cmp	r3, #0
   1de2a:	d00d      	beq.n	1de48 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1de2c:	4b27      	ldr	r3, [pc, #156]	; (1decc <hif_isr+0x398>)
   1de2e:	69db      	ldr	r3, [r3, #28]
   1de30:	1d3a      	adds	r2, r7, #4
   1de32:	7852      	ldrb	r2, [r2, #1]
   1de34:	b2d0      	uxtb	r0, r2
   1de36:	1d3a      	adds	r2, r7, #4
   1de38:	8852      	ldrh	r2, [r2, #2]
   1de3a:	b292      	uxth	r2, r2
   1de3c:	3a08      	subs	r2, #8
   1de3e:	b291      	uxth	r1, r2
   1de40:	683a      	ldr	r2, [r7, #0]
   1de42:	3208      	adds	r2, #8
   1de44:	4798      	blx	r3
   1de46:	e063      	b.n	1df10 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   1de48:	4a2e      	ldr	r2, [pc, #184]	; (1df04 <hif_isr+0x3d0>)
   1de4a:	4922      	ldr	r1, [pc, #136]	; (1ded4 <hif_isr+0x3a0>)
   1de4c:	4b22      	ldr	r3, [pc, #136]	; (1ded8 <hif_isr+0x3a4>)
   1de4e:	0018      	movs	r0, r3
   1de50:	4b22      	ldr	r3, [pc, #136]	; (1dedc <hif_isr+0x3a8>)
   1de52:	4798      	blx	r3
   1de54:	4b2c      	ldr	r3, [pc, #176]	; (1df08 <hif_isr+0x3d4>)
   1de56:	0018      	movs	r0, r3
   1de58:	4b20      	ldr	r3, [pc, #128]	; (1dedc <hif_isr+0x3a8>)
   1de5a:	4798      	blx	r3
   1de5c:	4b21      	ldr	r3, [pc, #132]	; (1dee4 <hif_isr+0x3b0>)
   1de5e:	0018      	movs	r0, r3
   1de60:	4b1e      	ldr	r3, [pc, #120]	; (1dedc <hif_isr+0x3a8>)
   1de62:	4798      	blx	r3
   1de64:	e054      	b.n	1df10 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1de66:	1d3b      	adds	r3, r7, #4
   1de68:	781b      	ldrb	r3, [r3, #0]
   1de6a:	b2db      	uxtb	r3, r3
   1de6c:	2b05      	cmp	r3, #5
   1de6e:	d111      	bne.n	1de94 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   1de70:	4b16      	ldr	r3, [pc, #88]	; (1decc <hif_isr+0x398>)
   1de72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1de74:	2b00      	cmp	r3, #0
   1de76:	d04b      	beq.n	1df10 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1de78:	4b14      	ldr	r3, [pc, #80]	; (1decc <hif_isr+0x398>)
   1de7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1de7c:	1d3a      	adds	r2, r7, #4
   1de7e:	7852      	ldrb	r2, [r2, #1]
   1de80:	b2d0      	uxtb	r0, r2
   1de82:	1d3a      	adds	r2, r7, #4
   1de84:	8852      	ldrh	r2, [r2, #2]
   1de86:	b292      	uxth	r2, r2
   1de88:	3a08      	subs	r2, #8
   1de8a:	b291      	uxth	r1, r2
   1de8c:	683a      	ldr	r2, [r7, #0]
   1de8e:	3208      	adds	r2, #8
   1de90:	4798      	blx	r3
   1de92:	e03d      	b.n	1df10 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   1de94:	2384      	movs	r3, #132	; 0x84
   1de96:	009a      	lsls	r2, r3, #2
   1de98:	490e      	ldr	r1, [pc, #56]	; (1ded4 <hif_isr+0x3a0>)
   1de9a:	4b0f      	ldr	r3, [pc, #60]	; (1ded8 <hif_isr+0x3a4>)
   1de9c:	0018      	movs	r0, r3
   1de9e:	4b0f      	ldr	r3, [pc, #60]	; (1dedc <hif_isr+0x3a8>)
   1dea0:	4798      	blx	r3
   1dea2:	4b1a      	ldr	r3, [pc, #104]	; (1df0c <hif_isr+0x3d8>)
   1dea4:	0018      	movs	r0, r3
   1dea6:	4b0d      	ldr	r3, [pc, #52]	; (1dedc <hif_isr+0x3a8>)
   1dea8:	4798      	blx	r3
   1deaa:	4b0e      	ldr	r3, [pc, #56]	; (1dee4 <hif_isr+0x3b0>)
   1deac:	0018      	movs	r0, r3
   1deae:	4b0b      	ldr	r3, [pc, #44]	; (1dedc <hif_isr+0x3a8>)
   1deb0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   1deb2:	230f      	movs	r3, #15
   1deb4:	18fb      	adds	r3, r7, r3
   1deb6:	22fa      	movs	r2, #250	; 0xfa
   1deb8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1deba:	e083      	b.n	1dfc4 <hif_isr+0x490>
   1debc:	00001070 	.word	0x00001070
   1dec0:	0001f5c1 	.word	0x0001f5c1
   1dec4:	0001cce5 	.word	0x0001cce5
   1dec8:	0001f5e5 	.word	0x0001f5e5
   1decc:	20005504 	.word	0x20005504
   1ded0:	00001084 	.word	0x00001084
   1ded4:	000369ac 	.word	0x000369ac
   1ded8:	0003669c 	.word	0x0003669c
   1dedc:	0001a5e9 	.word	0x0001a5e9
   1dee0:	000366d0 	.word	0x000366d0
   1dee4:	00036698 	.word	0x00036698
   1dee8:	0001f635 	.word	0x0001f635
   1deec:	000366f8 	.word	0x000366f8
   1def0:	00036710 	.word	0x00036710
   1def4:	00036750 	.word	0x00036750
   1def8:	00036774 	.word	0x00036774
   1defc:	00036798 	.word	0x00036798
   1df00:	000367b8 	.word	0x000367b8
   1df04:	00000207 	.word	0x00000207
   1df08:	000367dc 	.word	0x000367dc
   1df0c:	00036800 	.word	0x00036800
				}
				if(gstrHifCxt.u8HifRXDone)
   1df10:	4b30      	ldr	r3, [pc, #192]	; (1dfd4 <hif_isr+0x4a0>)
   1df12:	789b      	ldrb	r3, [r3, #2]
   1df14:	b2db      	uxtb	r3, r3
   1df16:	2b00      	cmp	r3, #0
   1df18:	d054      	beq.n	1dfc4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1df1a:	4a2f      	ldr	r2, [pc, #188]	; (1dfd8 <hif_isr+0x4a4>)
   1df1c:	492f      	ldr	r1, [pc, #188]	; (1dfdc <hif_isr+0x4a8>)
   1df1e:	4b30      	ldr	r3, [pc, #192]	; (1dfe0 <hif_isr+0x4ac>)
   1df20:	0018      	movs	r0, r3
   1df22:	4b30      	ldr	r3, [pc, #192]	; (1dfe4 <hif_isr+0x4b0>)
   1df24:	4798      	blx	r3
   1df26:	1d3b      	adds	r3, r7, #4
   1df28:	781b      	ldrb	r3, [r3, #0]
   1df2a:	b2db      	uxtb	r3, r3
   1df2c:	0019      	movs	r1, r3
   1df2e:	1d3b      	adds	r3, r7, #4
   1df30:	785b      	ldrb	r3, [r3, #1]
   1df32:	b2db      	uxtb	r3, r3
   1df34:	001a      	movs	r2, r3
   1df36:	4b2c      	ldr	r3, [pc, #176]	; (1dfe8 <hif_isr+0x4b4>)
   1df38:	0018      	movs	r0, r3
   1df3a:	4b2a      	ldr	r3, [pc, #168]	; (1dfe4 <hif_isr+0x4b0>)
   1df3c:	4798      	blx	r3
   1df3e:	4b2b      	ldr	r3, [pc, #172]	; (1dfec <hif_isr+0x4b8>)
   1df40:	0018      	movs	r0, r3
   1df42:	4b28      	ldr	r3, [pc, #160]	; (1dfe4 <hif_isr+0x4b0>)
   1df44:	4798      	blx	r3
					ret = hif_set_rx_done();
   1df46:	230f      	movs	r3, #15
   1df48:	18fc      	adds	r4, r7, r3
   1df4a:	4b29      	ldr	r3, [pc, #164]	; (1dff0 <hif_isr+0x4bc>)
   1df4c:	4798      	blx	r3
   1df4e:	0003      	movs	r3, r0
   1df50:	7023      	strb	r3, [r4, #0]
   1df52:	e037      	b.n	1dfc4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   1df54:	4a27      	ldr	r2, [pc, #156]	; (1dff4 <hif_isr+0x4c0>)
   1df56:	4921      	ldr	r1, [pc, #132]	; (1dfdc <hif_isr+0x4a8>)
   1df58:	4b21      	ldr	r3, [pc, #132]	; (1dfe0 <hif_isr+0x4ac>)
   1df5a:	0018      	movs	r0, r3
   1df5c:	4b21      	ldr	r3, [pc, #132]	; (1dfe4 <hif_isr+0x4b0>)
   1df5e:	4798      	blx	r3
   1df60:	4b25      	ldr	r3, [pc, #148]	; (1dff8 <hif_isr+0x4c4>)
   1df62:	0018      	movs	r0, r3
   1df64:	4b1f      	ldr	r3, [pc, #124]	; (1dfe4 <hif_isr+0x4b0>)
   1df66:	4798      	blx	r3
   1df68:	4b20      	ldr	r3, [pc, #128]	; (1dfec <hif_isr+0x4b8>)
   1df6a:	0018      	movs	r0, r3
   1df6c:	4b1d      	ldr	r3, [pc, #116]	; (1dfe4 <hif_isr+0x4b0>)
   1df6e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   1df70:	230f      	movs	r3, #15
   1df72:	18fb      	adds	r3, r7, r3
   1df74:	22fe      	movs	r2, #254	; 0xfe
   1df76:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   1df78:	e024      	b.n	1dfc4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   1df7a:	4a20      	ldr	r2, [pc, #128]	; (1dffc <hif_isr+0x4c8>)
   1df7c:	4917      	ldr	r1, [pc, #92]	; (1dfdc <hif_isr+0x4a8>)
   1df7e:	4b18      	ldr	r3, [pc, #96]	; (1dfe0 <hif_isr+0x4ac>)
   1df80:	0018      	movs	r0, r3
   1df82:	4b18      	ldr	r3, [pc, #96]	; (1dfe4 <hif_isr+0x4b0>)
   1df84:	4798      	blx	r3
   1df86:	68ba      	ldr	r2, [r7, #8]
   1df88:	4b1d      	ldr	r3, [pc, #116]	; (1e000 <hif_isr+0x4cc>)
   1df8a:	0011      	movs	r1, r2
   1df8c:	0018      	movs	r0, r3
   1df8e:	4b15      	ldr	r3, [pc, #84]	; (1dfe4 <hif_isr+0x4b0>)
   1df90:	4798      	blx	r3
   1df92:	4b16      	ldr	r3, [pc, #88]	; (1dfec <hif_isr+0x4b8>)
   1df94:	0018      	movs	r0, r3
   1df96:	4b13      	ldr	r3, [pc, #76]	; (1dfe4 <hif_isr+0x4b0>)
   1df98:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1df9a:	230f      	movs	r3, #15
   1df9c:	18fb      	adds	r3, r7, r3
   1df9e:	22f4      	movs	r2, #244	; 0xf4
   1dfa0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1dfa2:	e00f      	b.n	1dfc4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1dfa4:	4a17      	ldr	r2, [pc, #92]	; (1e004 <hif_isr+0x4d0>)
   1dfa6:	490d      	ldr	r1, [pc, #52]	; (1dfdc <hif_isr+0x4a8>)
   1dfa8:	4b0d      	ldr	r3, [pc, #52]	; (1dfe0 <hif_isr+0x4ac>)
   1dfaa:	0018      	movs	r0, r3
   1dfac:	4b0d      	ldr	r3, [pc, #52]	; (1dfe4 <hif_isr+0x4b0>)
   1dfae:	4798      	blx	r3
   1dfb0:	4b15      	ldr	r3, [pc, #84]	; (1e008 <hif_isr+0x4d4>)
   1dfb2:	0018      	movs	r0, r3
   1dfb4:	4b0b      	ldr	r3, [pc, #44]	; (1dfe4 <hif_isr+0x4b0>)
   1dfb6:	4798      	blx	r3
   1dfb8:	4b0c      	ldr	r3, [pc, #48]	; (1dfec <hif_isr+0x4b8>)
   1dfba:	0018      	movs	r0, r3
   1dfbc:	4b09      	ldr	r3, [pc, #36]	; (1dfe4 <hif_isr+0x4b0>)
   1dfbe:	4798      	blx	r3
		goto ERR1;
   1dfc0:	e000      	b.n	1dfc4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   1dfc2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1dfc4:	230f      	movs	r3, #15
   1dfc6:	18fb      	adds	r3, r7, r3
   1dfc8:	781b      	ldrb	r3, [r3, #0]
   1dfca:	b25b      	sxtb	r3, r3
}
   1dfcc:	0018      	movs	r0, r3
   1dfce:	46bd      	mov	sp, r7
   1dfd0:	b005      	add	sp, #20
   1dfd2:	bd90      	pop	{r4, r7, pc}
   1dfd4:	20005504 	.word	0x20005504
   1dfd8:	00000216 	.word	0x00000216
   1dfdc:	000369ac 	.word	0x000369ac
   1dfe0:	0003669c 	.word	0x0003669c
   1dfe4:	0001a5e9 	.word	0x0001a5e9
   1dfe8:	00036818 	.word	0x00036818
   1dfec:	00036698 	.word	0x00036698
   1dff0:	0001d5c9 	.word	0x0001d5c9
   1dff4:	0000021d 	.word	0x0000021d
   1dff8:	00036844 	.word	0x00036844
   1dffc:	00000225 	.word	0x00000225
   1e000:	00036858 	.word	0x00036858
   1e004:	0000022e 	.word	0x0000022e
   1e008:	00036874 	.word	0x00036874

0001e00c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1e00c:	b590      	push	{r4, r7, lr}
   1e00e:	b083      	sub	sp, #12
   1e010:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   1e012:	1dfb      	adds	r3, r7, #7
   1e014:	2200      	movs	r2, #0
   1e016:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   1e018:	4b1c      	ldr	r3, [pc, #112]	; (1e08c <hif_handle_isr+0x80>)
   1e01a:	2200      	movs	r2, #0
   1e01c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1e01e:	e024      	b.n	1e06a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1e020:	4b1a      	ldr	r3, [pc, #104]	; (1e08c <hif_handle_isr+0x80>)
   1e022:	78db      	ldrb	r3, [r3, #3]
   1e024:	b2db      	uxtb	r3, r3
   1e026:	3b01      	subs	r3, #1
   1e028:	b2da      	uxtb	r2, r3
   1e02a:	4b18      	ldr	r3, [pc, #96]	; (1e08c <hif_handle_isr+0x80>)
   1e02c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   1e02e:	1dfc      	adds	r4, r7, #7
   1e030:	4b17      	ldr	r3, [pc, #92]	; (1e090 <hif_handle_isr+0x84>)
   1e032:	4798      	blx	r3
   1e034:	0003      	movs	r3, r0
   1e036:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   1e038:	1dfb      	adds	r3, r7, #7
   1e03a:	781b      	ldrb	r3, [r3, #0]
   1e03c:	b25b      	sxtb	r3, r3
   1e03e:	2b00      	cmp	r3, #0
   1e040:	d100      	bne.n	1e044 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   1e042:	e012      	b.n	1e06a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1e044:	4a13      	ldr	r2, [pc, #76]	; (1e094 <hif_handle_isr+0x88>)
   1e046:	4914      	ldr	r1, [pc, #80]	; (1e098 <hif_handle_isr+0x8c>)
   1e048:	4b14      	ldr	r3, [pc, #80]	; (1e09c <hif_handle_isr+0x90>)
   1e04a:	0018      	movs	r0, r3
   1e04c:	4b14      	ldr	r3, [pc, #80]	; (1e0a0 <hif_handle_isr+0x94>)
   1e04e:	4798      	blx	r3
   1e050:	1dfb      	adds	r3, r7, #7
   1e052:	2200      	movs	r2, #0
   1e054:	569a      	ldrsb	r2, [r3, r2]
   1e056:	4b13      	ldr	r3, [pc, #76]	; (1e0a4 <hif_handle_isr+0x98>)
   1e058:	0011      	movs	r1, r2
   1e05a:	0018      	movs	r0, r3
   1e05c:	4b10      	ldr	r3, [pc, #64]	; (1e0a0 <hif_handle_isr+0x94>)
   1e05e:	4798      	blx	r3
   1e060:	4b11      	ldr	r3, [pc, #68]	; (1e0a8 <hif_handle_isr+0x9c>)
   1e062:	0018      	movs	r0, r3
   1e064:	4b0e      	ldr	r3, [pc, #56]	; (1e0a0 <hif_handle_isr+0x94>)
   1e066:	4798      	blx	r3
			ret = hif_isr();
   1e068:	e7e1      	b.n	1e02e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1e06a:	4b08      	ldr	r3, [pc, #32]	; (1e08c <hif_handle_isr+0x80>)
   1e06c:	78db      	ldrb	r3, [r3, #3]
   1e06e:	b2db      	uxtb	r3, r3
   1e070:	2b00      	cmp	r3, #0
   1e072:	d004      	beq.n	1e07e <hif_handle_isr+0x72>
   1e074:	4b05      	ldr	r3, [pc, #20]	; (1e08c <hif_handle_isr+0x80>)
   1e076:	791b      	ldrb	r3, [r3, #4]
   1e078:	b2db      	uxtb	r3, r3
   1e07a:	2b00      	cmp	r3, #0
   1e07c:	d0d0      	beq.n	1e020 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   1e07e:	1dfb      	adds	r3, r7, #7
   1e080:	781b      	ldrb	r3, [r3, #0]
   1e082:	b25b      	sxtb	r3, r3
}
   1e084:	0018      	movs	r0, r3
   1e086:	46bd      	mov	sp, r7
   1e088:	b003      	add	sp, #12
   1e08a:	bd90      	pop	{r4, r7, pc}
   1e08c:	20005504 	.word	0x20005504
   1e090:	0001db35 	.word	0x0001db35
   1e094:	00000257 	.word	0x00000257
   1e098:	000369b4 	.word	0x000369b4
   1e09c:	0003669c 	.word	0x0003669c
   1e0a0:	0001a5e9 	.word	0x0001a5e9
   1e0a4:	00036898 	.word	0x00036898
   1e0a8:	00036698 	.word	0x00036698

0001e0ac <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1e0ac:	b590      	push	{r4, r7, lr}
   1e0ae:	b087      	sub	sp, #28
   1e0b0:	af00      	add	r7, sp, #0
   1e0b2:	60f8      	str	r0, [r7, #12]
   1e0b4:	60b9      	str	r1, [r7, #8]
   1e0b6:	0019      	movs	r1, r3
   1e0b8:	1dbb      	adds	r3, r7, #6
   1e0ba:	801a      	strh	r2, [r3, #0]
   1e0bc:	1d7b      	adds	r3, r7, #5
   1e0be:	1c0a      	adds	r2, r1, #0
   1e0c0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1e0c2:	2317      	movs	r3, #23
   1e0c4:	18fb      	adds	r3, r7, r3
   1e0c6:	2200      	movs	r2, #0
   1e0c8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1e0ca:	68fb      	ldr	r3, [r7, #12]
   1e0cc:	2b00      	cmp	r3, #0
   1e0ce:	d006      	beq.n	1e0de <hif_receive+0x32>
   1e0d0:	68bb      	ldr	r3, [r7, #8]
   1e0d2:	2b00      	cmp	r3, #0
   1e0d4:	d003      	beq.n	1e0de <hif_receive+0x32>
   1e0d6:	1dbb      	adds	r3, r7, #6
   1e0d8:	881b      	ldrh	r3, [r3, #0]
   1e0da:	2b00      	cmp	r3, #0
   1e0dc:	d11e      	bne.n	1e11c <hif_receive+0x70>
	{
		if(isDone)
   1e0de:	1d7b      	adds	r3, r7, #5
   1e0e0:	781b      	ldrb	r3, [r3, #0]
   1e0e2:	2b00      	cmp	r3, #0
   1e0e4:	d006      	beq.n	1e0f4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1e0e6:	2317      	movs	r3, #23
   1e0e8:	18fc      	adds	r4, r7, r3
   1e0ea:	4b45      	ldr	r3, [pc, #276]	; (1e200 <hif_receive+0x154>)
   1e0ec:	4798      	blx	r3
   1e0ee:	0003      	movs	r3, r0
   1e0f0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   1e0f2:	e07c      	b.n	1e1ee <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   1e0f4:	2317      	movs	r3, #23
   1e0f6:	18fb      	adds	r3, r7, r3
   1e0f8:	22f4      	movs	r2, #244	; 0xf4
   1e0fa:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   1e0fc:	239e      	movs	r3, #158	; 0x9e
   1e0fe:	009a      	lsls	r2, r3, #2
   1e100:	4940      	ldr	r1, [pc, #256]	; (1e204 <hif_receive+0x158>)
   1e102:	4b41      	ldr	r3, [pc, #260]	; (1e208 <hif_receive+0x15c>)
   1e104:	0018      	movs	r0, r3
   1e106:	4b41      	ldr	r3, [pc, #260]	; (1e20c <hif_receive+0x160>)
   1e108:	4798      	blx	r3
   1e10a:	4b41      	ldr	r3, [pc, #260]	; (1e210 <hif_receive+0x164>)
   1e10c:	0018      	movs	r0, r3
   1e10e:	4b3f      	ldr	r3, [pc, #252]	; (1e20c <hif_receive+0x160>)
   1e110:	4798      	blx	r3
   1e112:	4b40      	ldr	r3, [pc, #256]	; (1e214 <hif_receive+0x168>)
   1e114:	0018      	movs	r0, r3
   1e116:	4b3d      	ldr	r3, [pc, #244]	; (1e20c <hif_receive+0x160>)
   1e118:	4798      	blx	r3
		goto ERR1;
   1e11a:	e068      	b.n	1e1ee <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   1e11c:	1dbb      	adds	r3, r7, #6
   1e11e:	881a      	ldrh	r2, [r3, #0]
   1e120:	4b3d      	ldr	r3, [pc, #244]	; (1e218 <hif_receive+0x16c>)
   1e122:	68db      	ldr	r3, [r3, #12]
   1e124:	429a      	cmp	r2, r3
   1e126:	d917      	bls.n	1e158 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   1e128:	2317      	movs	r3, #23
   1e12a:	18fb      	adds	r3, r7, r3
   1e12c:	22f4      	movs	r2, #244	; 0xf4
   1e12e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   1e130:	23a0      	movs	r3, #160	; 0xa0
   1e132:	009a      	lsls	r2, r3, #2
   1e134:	4933      	ldr	r1, [pc, #204]	; (1e204 <hif_receive+0x158>)
   1e136:	4b34      	ldr	r3, [pc, #208]	; (1e208 <hif_receive+0x15c>)
   1e138:	0018      	movs	r0, r3
   1e13a:	4b34      	ldr	r3, [pc, #208]	; (1e20c <hif_receive+0x160>)
   1e13c:	4798      	blx	r3
   1e13e:	1dbb      	adds	r3, r7, #6
   1e140:	8819      	ldrh	r1, [r3, #0]
   1e142:	4b35      	ldr	r3, [pc, #212]	; (1e218 <hif_receive+0x16c>)
   1e144:	68da      	ldr	r2, [r3, #12]
   1e146:	4b35      	ldr	r3, [pc, #212]	; (1e21c <hif_receive+0x170>)
   1e148:	0018      	movs	r0, r3
   1e14a:	4b30      	ldr	r3, [pc, #192]	; (1e20c <hif_receive+0x160>)
   1e14c:	4798      	blx	r3
   1e14e:	4b31      	ldr	r3, [pc, #196]	; (1e214 <hif_receive+0x168>)
   1e150:	0018      	movs	r0, r3
   1e152:	4b2e      	ldr	r3, [pc, #184]	; (1e20c <hif_receive+0x160>)
   1e154:	4798      	blx	r3
		goto ERR1;
   1e156:	e04a      	b.n	1e1ee <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1e158:	4b2f      	ldr	r3, [pc, #188]	; (1e218 <hif_receive+0x16c>)
   1e15a:	689a      	ldr	r2, [r3, #8]
   1e15c:	68fb      	ldr	r3, [r7, #12]
   1e15e:	429a      	cmp	r2, r3
   1e160:	d80a      	bhi.n	1e178 <hif_receive+0xcc>
   1e162:	1dbb      	adds	r3, r7, #6
   1e164:	881a      	ldrh	r2, [r3, #0]
   1e166:	68fb      	ldr	r3, [r7, #12]
   1e168:	18d2      	adds	r2, r2, r3
   1e16a:	4b2b      	ldr	r3, [pc, #172]	; (1e218 <hif_receive+0x16c>)
   1e16c:	6899      	ldr	r1, [r3, #8]
   1e16e:	4b2a      	ldr	r3, [pc, #168]	; (1e218 <hif_receive+0x16c>)
   1e170:	68db      	ldr	r3, [r3, #12]
   1e172:	18cb      	adds	r3, r1, r3
   1e174:	429a      	cmp	r2, r3
   1e176:	d912      	bls.n	1e19e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   1e178:	2317      	movs	r3, #23
   1e17a:	18fb      	adds	r3, r7, r3
   1e17c:	22f4      	movs	r2, #244	; 0xf4
   1e17e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   1e180:	4a27      	ldr	r2, [pc, #156]	; (1e220 <hif_receive+0x174>)
   1e182:	4920      	ldr	r1, [pc, #128]	; (1e204 <hif_receive+0x158>)
   1e184:	4b20      	ldr	r3, [pc, #128]	; (1e208 <hif_receive+0x15c>)
   1e186:	0018      	movs	r0, r3
   1e188:	4b20      	ldr	r3, [pc, #128]	; (1e20c <hif_receive+0x160>)
   1e18a:	4798      	blx	r3
   1e18c:	4b25      	ldr	r3, [pc, #148]	; (1e224 <hif_receive+0x178>)
   1e18e:	0018      	movs	r0, r3
   1e190:	4b1e      	ldr	r3, [pc, #120]	; (1e20c <hif_receive+0x160>)
   1e192:	4798      	blx	r3
   1e194:	4b1f      	ldr	r3, [pc, #124]	; (1e214 <hif_receive+0x168>)
   1e196:	0018      	movs	r0, r3
   1e198:	4b1c      	ldr	r3, [pc, #112]	; (1e20c <hif_receive+0x160>)
   1e19a:	4798      	blx	r3
		goto ERR1;
   1e19c:	e027      	b.n	1e1ee <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   1e19e:	1dbb      	adds	r3, r7, #6
   1e1a0:	881a      	ldrh	r2, [r3, #0]
   1e1a2:	2317      	movs	r3, #23
   1e1a4:	18fc      	adds	r4, r7, r3
   1e1a6:	68b9      	ldr	r1, [r7, #8]
   1e1a8:	68fb      	ldr	r3, [r7, #12]
   1e1aa:	0018      	movs	r0, r3
   1e1ac:	4b1e      	ldr	r3, [pc, #120]	; (1e228 <hif_receive+0x17c>)
   1e1ae:	4798      	blx	r3
   1e1b0:	0003      	movs	r3, r0
   1e1b2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1e1b4:	2317      	movs	r3, #23
   1e1b6:	18fb      	adds	r3, r7, r3
   1e1b8:	781b      	ldrb	r3, [r3, #0]
   1e1ba:	b25b      	sxtb	r3, r3
   1e1bc:	2b00      	cmp	r3, #0
   1e1be:	d115      	bne.n	1e1ec <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1e1c0:	4b15      	ldr	r3, [pc, #84]	; (1e218 <hif_receive+0x16c>)
   1e1c2:	689a      	ldr	r2, [r3, #8]
   1e1c4:	4b14      	ldr	r3, [pc, #80]	; (1e218 <hif_receive+0x16c>)
   1e1c6:	68db      	ldr	r3, [r3, #12]
   1e1c8:	18d2      	adds	r2, r2, r3
   1e1ca:	1dbb      	adds	r3, r7, #6
   1e1cc:	8819      	ldrh	r1, [r3, #0]
   1e1ce:	68fb      	ldr	r3, [r7, #12]
   1e1d0:	18cb      	adds	r3, r1, r3
   1e1d2:	429a      	cmp	r2, r3
   1e1d4:	d003      	beq.n	1e1de <hif_receive+0x132>
   1e1d6:	1d7b      	adds	r3, r7, #5
   1e1d8:	781b      	ldrb	r3, [r3, #0]
   1e1da:	2b00      	cmp	r3, #0
   1e1dc:	d007      	beq.n	1e1ee <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   1e1de:	2317      	movs	r3, #23
   1e1e0:	18fc      	adds	r4, r7, r3
   1e1e2:	4b07      	ldr	r3, [pc, #28]	; (1e200 <hif_receive+0x154>)
   1e1e4:	4798      	blx	r3
   1e1e6:	0003      	movs	r3, r0
   1e1e8:	7023      	strb	r3, [r4, #0]
   1e1ea:	e000      	b.n	1e1ee <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   1e1ec:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1e1ee:	2317      	movs	r3, #23
   1e1f0:	18fb      	adds	r3, r7, r3
   1e1f2:	781b      	ldrb	r3, [r3, #0]
   1e1f4:	b25b      	sxtb	r3, r3
}
   1e1f6:	0018      	movs	r0, r3
   1e1f8:	46bd      	mov	sp, r7
   1e1fa:	b007      	add	sp, #28
   1e1fc:	bd90      	pop	{r4, r7, pc}
   1e1fe:	46c0      	nop			; (mov r8, r8)
   1e200:	0001d5c9 	.word	0x0001d5c9
   1e204:	000369c4 	.word	0x000369c4
   1e208:	0003669c 	.word	0x0003669c
   1e20c:	0001a5e9 	.word	0x0001a5e9
   1e210:	000368c8 	.word	0x000368c8
   1e214:	00036698 	.word	0x00036698
   1e218:	20005504 	.word	0x20005504
   1e21c:	000368e8 	.word	0x000368e8
   1e220:	00000286 	.word	0x00000286
   1e224:	00036930 	.word	0x00036930
   1e228:	0001f635 	.word	0x0001f635

0001e22c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   1e22c:	b580      	push	{r7, lr}
   1e22e:	b084      	sub	sp, #16
   1e230:	af00      	add	r7, sp, #0
   1e232:	0002      	movs	r2, r0
   1e234:	6039      	str	r1, [r7, #0]
   1e236:	1dfb      	adds	r3, r7, #7
   1e238:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1e23a:	230f      	movs	r3, #15
   1e23c:	18fb      	adds	r3, r7, r3
   1e23e:	2200      	movs	r2, #0
   1e240:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   1e242:	1dfb      	adds	r3, r7, #7
   1e244:	781b      	ldrb	r3, [r3, #0]
   1e246:	2b07      	cmp	r3, #7
   1e248:	d820      	bhi.n	1e28c <hif_register_cb+0x60>
   1e24a:	009a      	lsls	r2, r3, #2
   1e24c:	4b1e      	ldr	r3, [pc, #120]	; (1e2c8 <hif_register_cb+0x9c>)
   1e24e:	18d3      	adds	r3, r2, r3
   1e250:	681b      	ldr	r3, [r3, #0]
   1e252:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   1e254:	4b1d      	ldr	r3, [pc, #116]	; (1e2cc <hif_register_cb+0xa0>)
   1e256:	683a      	ldr	r2, [r7, #0]
   1e258:	615a      	str	r2, [r3, #20]
			break;
   1e25a:	e02d      	b.n	1e2b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   1e25c:	4b1b      	ldr	r3, [pc, #108]	; (1e2cc <hif_register_cb+0xa0>)
   1e25e:	683a      	ldr	r2, [r7, #0]
   1e260:	611a      	str	r2, [r3, #16]
			break;
   1e262:	e029      	b.n	1e2b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   1e264:	4b19      	ldr	r3, [pc, #100]	; (1e2cc <hif_register_cb+0xa0>)
   1e266:	683a      	ldr	r2, [r7, #0]
   1e268:	619a      	str	r2, [r3, #24]
			break;
   1e26a:	e025      	b.n	1e2b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   1e26c:	4b17      	ldr	r3, [pc, #92]	; (1e2cc <hif_register_cb+0xa0>)
   1e26e:	683a      	ldr	r2, [r7, #0]
   1e270:	621a      	str	r2, [r3, #32]
			break;
   1e272:	e021      	b.n	1e2b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   1e274:	4b15      	ldr	r3, [pc, #84]	; (1e2cc <hif_register_cb+0xa0>)
   1e276:	683a      	ldr	r2, [r7, #0]
   1e278:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   1e27a:	e01d      	b.n	1e2b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   1e27c:	4b13      	ldr	r3, [pc, #76]	; (1e2cc <hif_register_cb+0xa0>)
   1e27e:	683a      	ldr	r2, [r7, #0]
   1e280:	61da      	str	r2, [r3, #28]
			break;
   1e282:	e019      	b.n	1e2b8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   1e284:	4b11      	ldr	r3, [pc, #68]	; (1e2cc <hif_register_cb+0xa0>)
   1e286:	683a      	ldr	r2, [r7, #0]
   1e288:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   1e28a:	e015      	b.n	1e2b8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   1e28c:	4a10      	ldr	r2, [pc, #64]	; (1e2d0 <hif_register_cb+0xa4>)
   1e28e:	4911      	ldr	r1, [pc, #68]	; (1e2d4 <hif_register_cb+0xa8>)
   1e290:	4b11      	ldr	r3, [pc, #68]	; (1e2d8 <hif_register_cb+0xac>)
   1e292:	0018      	movs	r0, r3
   1e294:	4b11      	ldr	r3, [pc, #68]	; (1e2dc <hif_register_cb+0xb0>)
   1e296:	4798      	blx	r3
   1e298:	1dfb      	adds	r3, r7, #7
   1e29a:	781a      	ldrb	r2, [r3, #0]
   1e29c:	4b10      	ldr	r3, [pc, #64]	; (1e2e0 <hif_register_cb+0xb4>)
   1e29e:	0011      	movs	r1, r2
   1e2a0:	0018      	movs	r0, r3
   1e2a2:	4b0e      	ldr	r3, [pc, #56]	; (1e2dc <hif_register_cb+0xb0>)
   1e2a4:	4798      	blx	r3
   1e2a6:	4b0f      	ldr	r3, [pc, #60]	; (1e2e4 <hif_register_cb+0xb8>)
   1e2a8:	0018      	movs	r0, r3
   1e2aa:	4b0c      	ldr	r3, [pc, #48]	; (1e2dc <hif_register_cb+0xb0>)
   1e2ac:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1e2ae:	230f      	movs	r3, #15
   1e2b0:	18fb      	adds	r3, r7, r3
   1e2b2:	22f4      	movs	r2, #244	; 0xf4
   1e2b4:	701a      	strb	r2, [r3, #0]
			break;
   1e2b6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   1e2b8:	230f      	movs	r3, #15
   1e2ba:	18fb      	adds	r3, r7, r3
   1e2bc:	781b      	ldrb	r3, [r3, #0]
   1e2be:	b25b      	sxtb	r3, r3
}
   1e2c0:	0018      	movs	r0, r3
   1e2c2:	46bd      	mov	sp, r7
   1e2c4:	b004      	add	sp, #16
   1e2c6:	bd80      	pop	{r7, pc}
   1e2c8:	00036980 	.word	0x00036980
   1e2cc:	20005504 	.word	0x20005504
   1e2d0:	000002be 	.word	0x000002be
   1e2d4:	000369d0 	.word	0x000369d0
   1e2d8:	0003669c 	.word	0x0003669c
   1e2dc:	0001a5e9 	.word	0x0001a5e9
   1e2e0:	00036974 	.word	0x00036974
   1e2e4:	00036698 	.word	0x00036698

0001e2e8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1e2e8:	b590      	push	{r4, r7, lr}
   1e2ea:	b0af      	sub	sp, #188	; 0xbc
   1e2ec:	af02      	add	r7, sp, #8
   1e2ee:	603a      	str	r2, [r7, #0]
   1e2f0:	1dfb      	adds	r3, r7, #7
   1e2f2:	1c02      	adds	r2, r0, #0
   1e2f4:	701a      	strb	r2, [r3, #0]
   1e2f6:	1d3b      	adds	r3, r7, #4
   1e2f8:	1c0a      	adds	r2, r1, #0
   1e2fa:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   1e2fc:	1dfb      	adds	r3, r7, #7
   1e2fe:	781b      	ldrb	r3, [r3, #0]
   1e300:	2b2c      	cmp	r3, #44	; 0x2c
   1e302:	d116      	bne.n	1e332 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1e304:	23a4      	movs	r3, #164	; 0xa4
   1e306:	18f9      	adds	r1, r7, r3
   1e308:	6838      	ldr	r0, [r7, #0]
   1e30a:	2300      	movs	r3, #0
   1e30c:	2204      	movs	r2, #4
   1e30e:	4cca      	ldr	r4, [pc, #808]	; (1e638 <m2m_wifi_cb+0x350>)
   1e310:	47a0      	blx	r4
   1e312:	1e03      	subs	r3, r0, #0
   1e314:	d000      	beq.n	1e318 <m2m_wifi_cb+0x30>
   1e316:	e1b4      	b.n	1e682 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   1e318:	4bc8      	ldr	r3, [pc, #800]	; (1e63c <m2m_wifi_cb+0x354>)
   1e31a:	681b      	ldr	r3, [r3, #0]
   1e31c:	2b00      	cmp	r3, #0
   1e31e:	d100      	bne.n	1e322 <m2m_wifi_cb+0x3a>
   1e320:	e1af      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   1e322:	4bc6      	ldr	r3, [pc, #792]	; (1e63c <m2m_wifi_cb+0x354>)
   1e324:	681b      	ldr	r3, [r3, #0]
   1e326:	22a4      	movs	r2, #164	; 0xa4
   1e328:	18ba      	adds	r2, r7, r2
   1e32a:	0011      	movs	r1, r2
   1e32c:	202c      	movs	r0, #44	; 0x2c
   1e32e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   1e330:	e1a7      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   1e332:	1dfb      	adds	r3, r7, #7
   1e334:	781b      	ldrb	r3, [r3, #0]
   1e336:	2b1b      	cmp	r3, #27
   1e338:	d116      	bne.n	1e368 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1e33a:	239c      	movs	r3, #156	; 0x9c
   1e33c:	18f9      	adds	r1, r7, r3
   1e33e:	6838      	ldr	r0, [r7, #0]
   1e340:	2300      	movs	r3, #0
   1e342:	2208      	movs	r2, #8
   1e344:	4cbc      	ldr	r4, [pc, #752]	; (1e638 <m2m_wifi_cb+0x350>)
   1e346:	47a0      	blx	r4
   1e348:	1e03      	subs	r3, r0, #0
   1e34a:	d000      	beq.n	1e34e <m2m_wifi_cb+0x66>
   1e34c:	e199      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1e34e:	4bbb      	ldr	r3, [pc, #748]	; (1e63c <m2m_wifi_cb+0x354>)
   1e350:	681b      	ldr	r3, [r3, #0]
   1e352:	2b00      	cmp	r3, #0
   1e354:	d100      	bne.n	1e358 <m2m_wifi_cb+0x70>
   1e356:	e194      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   1e358:	4bb8      	ldr	r3, [pc, #736]	; (1e63c <m2m_wifi_cb+0x354>)
   1e35a:	681b      	ldr	r3, [r3, #0]
   1e35c:	229c      	movs	r2, #156	; 0x9c
   1e35e:	18ba      	adds	r2, r7, r2
   1e360:	0011      	movs	r1, r2
   1e362:	201b      	movs	r0, #27
   1e364:	4798      	blx	r3
}
   1e366:	e18c      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   1e368:	1dfb      	adds	r3, r7, #7
   1e36a:	781b      	ldrb	r3, [r3, #0]
   1e36c:	2b06      	cmp	r3, #6
   1e36e:	d116      	bne.n	1e39e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1e370:	230c      	movs	r3, #12
   1e372:	18f9      	adds	r1, r7, r3
   1e374:	6838      	ldr	r0, [r7, #0]
   1e376:	2301      	movs	r3, #1
   1e378:	2230      	movs	r2, #48	; 0x30
   1e37a:	4caf      	ldr	r4, [pc, #700]	; (1e638 <m2m_wifi_cb+0x350>)
   1e37c:	47a0      	blx	r4
   1e37e:	1e03      	subs	r3, r0, #0
   1e380:	d000      	beq.n	1e384 <m2m_wifi_cb+0x9c>
   1e382:	e17e      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1e384:	4bad      	ldr	r3, [pc, #692]	; (1e63c <m2m_wifi_cb+0x354>)
   1e386:	681b      	ldr	r3, [r3, #0]
   1e388:	2b00      	cmp	r3, #0
   1e38a:	d100      	bne.n	1e38e <m2m_wifi_cb+0xa6>
   1e38c:	e179      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   1e38e:	4bab      	ldr	r3, [pc, #684]	; (1e63c <m2m_wifi_cb+0x354>)
   1e390:	681b      	ldr	r3, [r3, #0]
   1e392:	220c      	movs	r2, #12
   1e394:	18ba      	adds	r2, r7, r2
   1e396:	0011      	movs	r1, r2
   1e398:	2006      	movs	r0, #6
   1e39a:	4798      	blx	r3
}
   1e39c:	e171      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   1e39e:	1dfb      	adds	r3, r7, #7
   1e3a0:	781b      	ldrb	r3, [r3, #0]
   1e3a2:	2b0e      	cmp	r3, #14
   1e3a4:	d100      	bne.n	1e3a8 <m2m_wifi_cb+0xc0>
   1e3a6:	e16c      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   1e3a8:	1dfb      	adds	r3, r7, #7
   1e3aa:	781b      	ldrb	r3, [r3, #0]
   1e3ac:	2b32      	cmp	r3, #50	; 0x32
   1e3ae:	d116      	bne.n	1e3de <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1e3b0:	2384      	movs	r3, #132	; 0x84
   1e3b2:	18f9      	adds	r1, r7, r3
   1e3b4:	6838      	ldr	r0, [r7, #0]
   1e3b6:	2300      	movs	r3, #0
   1e3b8:	2218      	movs	r2, #24
   1e3ba:	4c9f      	ldr	r4, [pc, #636]	; (1e638 <m2m_wifi_cb+0x350>)
   1e3bc:	47a0      	blx	r4
   1e3be:	1e03      	subs	r3, r0, #0
   1e3c0:	d000      	beq.n	1e3c4 <m2m_wifi_cb+0xdc>
   1e3c2:	e15e      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1e3c4:	4b9d      	ldr	r3, [pc, #628]	; (1e63c <m2m_wifi_cb+0x354>)
   1e3c6:	681b      	ldr	r3, [r3, #0]
   1e3c8:	2b00      	cmp	r3, #0
   1e3ca:	d100      	bne.n	1e3ce <m2m_wifi_cb+0xe6>
   1e3cc:	e159      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   1e3ce:	4b9b      	ldr	r3, [pc, #620]	; (1e63c <m2m_wifi_cb+0x354>)
   1e3d0:	681b      	ldr	r3, [r3, #0]
   1e3d2:	2284      	movs	r2, #132	; 0x84
   1e3d4:	18ba      	adds	r2, r7, r2
   1e3d6:	0011      	movs	r1, r2
   1e3d8:	2032      	movs	r0, #50	; 0x32
   1e3da:	4798      	blx	r3
}
   1e3dc:	e151      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   1e3de:	1dfb      	adds	r3, r7, #7
   1e3e0:	781b      	ldrb	r3, [r3, #0]
   1e3e2:	2b2f      	cmp	r3, #47	; 0x2f
   1e3e4:	d11d      	bne.n	1e422 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1e3e6:	230c      	movs	r3, #12
   1e3e8:	18fb      	adds	r3, r7, r3
   1e3ea:	2264      	movs	r2, #100	; 0x64
   1e3ec:	2100      	movs	r1, #0
   1e3ee:	0018      	movs	r0, r3
   1e3f0:	4b93      	ldr	r3, [pc, #588]	; (1e640 <m2m_wifi_cb+0x358>)
   1e3f2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   1e3f4:	230c      	movs	r3, #12
   1e3f6:	18f9      	adds	r1, r7, r3
   1e3f8:	6838      	ldr	r0, [r7, #0]
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	2264      	movs	r2, #100	; 0x64
   1e3fe:	4c8e      	ldr	r4, [pc, #568]	; (1e638 <m2m_wifi_cb+0x350>)
   1e400:	47a0      	blx	r4
   1e402:	1e03      	subs	r3, r0, #0
   1e404:	d000      	beq.n	1e408 <m2m_wifi_cb+0x120>
   1e406:	e13c      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1e408:	4b8c      	ldr	r3, [pc, #560]	; (1e63c <m2m_wifi_cb+0x354>)
   1e40a:	681b      	ldr	r3, [r3, #0]
   1e40c:	2b00      	cmp	r3, #0
   1e40e:	d100      	bne.n	1e412 <m2m_wifi_cb+0x12a>
   1e410:	e137      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   1e412:	4b8a      	ldr	r3, [pc, #552]	; (1e63c <m2m_wifi_cb+0x354>)
   1e414:	681b      	ldr	r3, [r3, #0]
   1e416:	220c      	movs	r2, #12
   1e418:	18ba      	adds	r2, r7, r2
   1e41a:	0011      	movs	r1, r2
   1e41c:	202f      	movs	r0, #47	; 0x2f
   1e41e:	4798      	blx	r3
}
   1e420:	e12f      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   1e422:	1dfb      	adds	r3, r7, #7
   1e424:	781b      	ldrb	r3, [r3, #0]
   1e426:	2b34      	cmp	r3, #52	; 0x34
   1e428:	d137      	bne.n	1e49a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   1e42a:	2380      	movs	r3, #128	; 0x80
   1e42c:	18f9      	adds	r1, r7, r3
   1e42e:	6838      	ldr	r0, [r7, #0]
   1e430:	2300      	movs	r3, #0
   1e432:	2204      	movs	r2, #4
   1e434:	4c80      	ldr	r4, [pc, #512]	; (1e638 <m2m_wifi_cb+0x350>)
   1e436:	47a0      	blx	r4
   1e438:	1e03      	subs	r3, r0, #0
   1e43a:	d000      	beq.n	1e43e <m2m_wifi_cb+0x156>
   1e43c:	e121      	b.n	1e682 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   1e43e:	4b81      	ldr	r3, [pc, #516]	; (1e644 <m2m_wifi_cb+0x35c>)
   1e440:	0018      	movs	r0, r3
   1e442:	4b81      	ldr	r3, [pc, #516]	; (1e648 <m2m_wifi_cb+0x360>)
   1e444:	4798      	blx	r3
   1e446:	2380      	movs	r3, #128	; 0x80
   1e448:	18fb      	adds	r3, r7, r3
   1e44a:	681b      	ldr	r3, [r3, #0]
   1e44c:	0e1b      	lsrs	r3, r3, #24
   1e44e:	b2db      	uxtb	r3, r3
   1e450:	0019      	movs	r1, r3
   1e452:	2380      	movs	r3, #128	; 0x80
   1e454:	18fb      	adds	r3, r7, r3
   1e456:	681b      	ldr	r3, [r3, #0]
   1e458:	0c1b      	lsrs	r3, r3, #16
   1e45a:	b2db      	uxtb	r3, r3
   1e45c:	001a      	movs	r2, r3
   1e45e:	2380      	movs	r3, #128	; 0x80
   1e460:	18fb      	adds	r3, r7, r3
   1e462:	681b      	ldr	r3, [r3, #0]
   1e464:	0a1b      	lsrs	r3, r3, #8
   1e466:	b2db      	uxtb	r3, r3
   1e468:	001c      	movs	r4, r3
   1e46a:	2380      	movs	r3, #128	; 0x80
   1e46c:	18fb      	adds	r3, r7, r3
   1e46e:	681b      	ldr	r3, [r3, #0]
   1e470:	b2db      	uxtb	r3, r3
   1e472:	4876      	ldr	r0, [pc, #472]	; (1e64c <m2m_wifi_cb+0x364>)
   1e474:	9300      	str	r3, [sp, #0]
   1e476:	0023      	movs	r3, r4
   1e478:	4c73      	ldr	r4, [pc, #460]	; (1e648 <m2m_wifi_cb+0x360>)
   1e47a:	47a0      	blx	r4
   1e47c:	4b74      	ldr	r3, [pc, #464]	; (1e650 <m2m_wifi_cb+0x368>)
   1e47e:	0018      	movs	r0, r3
   1e480:	4b71      	ldr	r3, [pc, #452]	; (1e648 <m2m_wifi_cb+0x360>)
   1e482:	4798      	blx	r3
			if (gpfAppWifiCb)
   1e484:	4b6d      	ldr	r3, [pc, #436]	; (1e63c <m2m_wifi_cb+0x354>)
   1e486:	681b      	ldr	r3, [r3, #0]
   1e488:	2b00      	cmp	r3, #0
   1e48a:	d100      	bne.n	1e48e <m2m_wifi_cb+0x1a6>
   1e48c:	e0f9      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   1e48e:	4b6b      	ldr	r3, [pc, #428]	; (1e63c <m2m_wifi_cb+0x354>)
   1e490:	681b      	ldr	r3, [r3, #0]
   1e492:	2100      	movs	r1, #0
   1e494:	2034      	movs	r0, #52	; 0x34
   1e496:	4798      	blx	r3
}
   1e498:	e0f3      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   1e49a:	1dfb      	adds	r3, r7, #7
   1e49c:	781b      	ldrb	r3, [r3, #0]
   1e49e:	2b11      	cmp	r3, #17
   1e4a0:	d11e      	bne.n	1e4e0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   1e4a2:	4b6c      	ldr	r3, [pc, #432]	; (1e654 <m2m_wifi_cb+0x36c>)
   1e4a4:	2200      	movs	r2, #0
   1e4a6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   1e4a8:	237c      	movs	r3, #124	; 0x7c
   1e4aa:	18f9      	adds	r1, r7, r3
   1e4ac:	6838      	ldr	r0, [r7, #0]
   1e4ae:	2300      	movs	r3, #0
   1e4b0:	2204      	movs	r2, #4
   1e4b2:	4c61      	ldr	r4, [pc, #388]	; (1e638 <m2m_wifi_cb+0x350>)
   1e4b4:	47a0      	blx	r4
   1e4b6:	1e03      	subs	r3, r0, #0
   1e4b8:	d000      	beq.n	1e4bc <m2m_wifi_cb+0x1d4>
   1e4ba:	e0e2      	b.n	1e682 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   1e4bc:	237c      	movs	r3, #124	; 0x7c
   1e4be:	18fb      	adds	r3, r7, r3
   1e4c0:	781a      	ldrb	r2, [r3, #0]
   1e4c2:	4b65      	ldr	r3, [pc, #404]	; (1e658 <m2m_wifi_cb+0x370>)
   1e4c4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1e4c6:	4b5d      	ldr	r3, [pc, #372]	; (1e63c <m2m_wifi_cb+0x354>)
   1e4c8:	681b      	ldr	r3, [r3, #0]
   1e4ca:	2b00      	cmp	r3, #0
   1e4cc:	d100      	bne.n	1e4d0 <m2m_wifi_cb+0x1e8>
   1e4ce:	e0d8      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   1e4d0:	4b5a      	ldr	r3, [pc, #360]	; (1e63c <m2m_wifi_cb+0x354>)
   1e4d2:	681b      	ldr	r3, [r3, #0]
   1e4d4:	227c      	movs	r2, #124	; 0x7c
   1e4d6:	18ba      	adds	r2, r7, r2
   1e4d8:	0011      	movs	r1, r2
   1e4da:	2011      	movs	r0, #17
   1e4dc:	4798      	blx	r3
}
   1e4de:	e0d0      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   1e4e0:	1dfb      	adds	r3, r7, #7
   1e4e2:	781b      	ldrb	r3, [r3, #0]
   1e4e4:	2b13      	cmp	r3, #19
   1e4e6:	d116      	bne.n	1e516 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1e4e8:	230c      	movs	r3, #12
   1e4ea:	18f9      	adds	r1, r7, r3
   1e4ec:	6838      	ldr	r0, [r7, #0]
   1e4ee:	2300      	movs	r3, #0
   1e4f0:	222c      	movs	r2, #44	; 0x2c
   1e4f2:	4c51      	ldr	r4, [pc, #324]	; (1e638 <m2m_wifi_cb+0x350>)
   1e4f4:	47a0      	blx	r4
   1e4f6:	1e03      	subs	r3, r0, #0
   1e4f8:	d000      	beq.n	1e4fc <m2m_wifi_cb+0x214>
   1e4fa:	e0c2      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1e4fc:	4b4f      	ldr	r3, [pc, #316]	; (1e63c <m2m_wifi_cb+0x354>)
   1e4fe:	681b      	ldr	r3, [r3, #0]
   1e500:	2b00      	cmp	r3, #0
   1e502:	d100      	bne.n	1e506 <m2m_wifi_cb+0x21e>
   1e504:	e0bd      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   1e506:	4b4d      	ldr	r3, [pc, #308]	; (1e63c <m2m_wifi_cb+0x354>)
   1e508:	681b      	ldr	r3, [r3, #0]
   1e50a:	220c      	movs	r2, #12
   1e50c:	18ba      	adds	r2, r7, r2
   1e50e:	0011      	movs	r1, r2
   1e510:	2013      	movs	r0, #19
   1e512:	4798      	blx	r3
}
   1e514:	e0b5      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   1e516:	1dfb      	adds	r3, r7, #7
   1e518:	781b      	ldrb	r3, [r3, #0]
   1e51a:	2b04      	cmp	r3, #4
   1e51c:	d116      	bne.n	1e54c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1e51e:	23a8      	movs	r3, #168	; 0xa8
   1e520:	18f9      	adds	r1, r7, r3
   1e522:	6838      	ldr	r0, [r7, #0]
   1e524:	2300      	movs	r3, #0
   1e526:	2204      	movs	r2, #4
   1e528:	4c43      	ldr	r4, [pc, #268]	; (1e638 <m2m_wifi_cb+0x350>)
   1e52a:	47a0      	blx	r4
   1e52c:	1e03      	subs	r3, r0, #0
   1e52e:	d000      	beq.n	1e532 <m2m_wifi_cb+0x24a>
   1e530:	e0a7      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1e532:	4b42      	ldr	r3, [pc, #264]	; (1e63c <m2m_wifi_cb+0x354>)
   1e534:	681b      	ldr	r3, [r3, #0]
   1e536:	2b00      	cmp	r3, #0
   1e538:	d100      	bne.n	1e53c <m2m_wifi_cb+0x254>
   1e53a:	e0a2      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1e53c:	4b3f      	ldr	r3, [pc, #252]	; (1e63c <m2m_wifi_cb+0x354>)
   1e53e:	681b      	ldr	r3, [r3, #0]
   1e540:	22a8      	movs	r2, #168	; 0xa8
   1e542:	18ba      	adds	r2, r7, r2
   1e544:	0011      	movs	r1, r2
   1e546:	2004      	movs	r0, #4
   1e548:	4798      	blx	r3
}
   1e54a:	e09a      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   1e54c:	1dfb      	adds	r3, r7, #7
   1e54e:	781b      	ldrb	r3, [r3, #0]
   1e550:	2b65      	cmp	r3, #101	; 0x65
   1e552:	d116      	bne.n	1e582 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1e554:	23a8      	movs	r3, #168	; 0xa8
   1e556:	18f9      	adds	r1, r7, r3
   1e558:	6838      	ldr	r0, [r7, #0]
   1e55a:	2300      	movs	r3, #0
   1e55c:	2204      	movs	r2, #4
   1e55e:	4c36      	ldr	r4, [pc, #216]	; (1e638 <m2m_wifi_cb+0x350>)
   1e560:	47a0      	blx	r4
   1e562:	1e03      	subs	r3, r0, #0
   1e564:	d000      	beq.n	1e568 <m2m_wifi_cb+0x280>
   1e566:	e08c      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   1e568:	4b34      	ldr	r3, [pc, #208]	; (1e63c <m2m_wifi_cb+0x354>)
   1e56a:	681b      	ldr	r3, [r3, #0]
   1e56c:	2b00      	cmp	r3, #0
   1e56e:	d100      	bne.n	1e572 <m2m_wifi_cb+0x28a>
   1e570:	e087      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   1e572:	4b32      	ldr	r3, [pc, #200]	; (1e63c <m2m_wifi_cb+0x354>)
   1e574:	681b      	ldr	r3, [r3, #0]
   1e576:	22a8      	movs	r2, #168	; 0xa8
   1e578:	18ba      	adds	r2, r7, r2
   1e57a:	0011      	movs	r1, r2
   1e57c:	2065      	movs	r0, #101	; 0x65
   1e57e:	4798      	blx	r3
}
   1e580:	e07f      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   1e582:	1dfb      	adds	r3, r7, #7
   1e584:	781b      	ldrb	r3, [r3, #0]
   1e586:	2b09      	cmp	r3, #9
   1e588:	d116      	bne.n	1e5b8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   1e58a:	230c      	movs	r3, #12
   1e58c:	18f9      	adds	r1, r7, r3
   1e58e:	6838      	ldr	r0, [r7, #0]
   1e590:	2301      	movs	r3, #1
   1e592:	2264      	movs	r2, #100	; 0x64
   1e594:	4c28      	ldr	r4, [pc, #160]	; (1e638 <m2m_wifi_cb+0x350>)
   1e596:	47a0      	blx	r4
   1e598:	1e03      	subs	r3, r0, #0
   1e59a:	d000      	beq.n	1e59e <m2m_wifi_cb+0x2b6>
   1e59c:	e071      	b.n	1e682 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1e59e:	4b27      	ldr	r3, [pc, #156]	; (1e63c <m2m_wifi_cb+0x354>)
   1e5a0:	681b      	ldr	r3, [r3, #0]
   1e5a2:	2b00      	cmp	r3, #0
   1e5a4:	d100      	bne.n	1e5a8 <m2m_wifi_cb+0x2c0>
   1e5a6:	e06c      	b.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   1e5a8:	4b24      	ldr	r3, [pc, #144]	; (1e63c <m2m_wifi_cb+0x354>)
   1e5aa:	681b      	ldr	r3, [r3, #0]
   1e5ac:	220c      	movs	r2, #12
   1e5ae:	18ba      	adds	r2, r7, r2
   1e5b0:	0011      	movs	r1, r2
   1e5b2:	2009      	movs	r0, #9
   1e5b4:	4798      	blx	r3
}
   1e5b6:	e064      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   1e5b8:	1dfb      	adds	r3, r7, #7
   1e5ba:	781b      	ldrb	r3, [r3, #0]
   1e5bc:	2b2a      	cmp	r3, #42	; 0x2a
   1e5be:	d114      	bne.n	1e5ea <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   1e5c0:	2378      	movs	r3, #120	; 0x78
   1e5c2:	18f9      	adds	r1, r7, r3
   1e5c4:	6838      	ldr	r0, [r7, #0]
   1e5c6:	2301      	movs	r3, #1
   1e5c8:	2204      	movs	r2, #4
   1e5ca:	4c1b      	ldr	r4, [pc, #108]	; (1e638 <m2m_wifi_cb+0x350>)
   1e5cc:	47a0      	blx	r4
   1e5ce:	1e03      	subs	r3, r0, #0
   1e5d0:	d157      	bne.n	1e682 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   1e5d2:	4b1a      	ldr	r3, [pc, #104]	; (1e63c <m2m_wifi_cb+0x354>)
   1e5d4:	681b      	ldr	r3, [r3, #0]
   1e5d6:	2b00      	cmp	r3, #0
   1e5d8:	d053      	beq.n	1e682 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   1e5da:	4b18      	ldr	r3, [pc, #96]	; (1e63c <m2m_wifi_cb+0x354>)
   1e5dc:	681b      	ldr	r3, [r3, #0]
   1e5de:	2278      	movs	r2, #120	; 0x78
   1e5e0:	18ba      	adds	r2, r7, r2
   1e5e2:	0011      	movs	r1, r2
   1e5e4:	202a      	movs	r0, #42	; 0x2a
   1e5e6:	4798      	blx	r3
}
   1e5e8:	e04b      	b.n	1e682 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   1e5ea:	1dfb      	adds	r3, r7, #7
   1e5ec:	781b      	ldrb	r3, [r3, #0]
   1e5ee:	2b20      	cmp	r3, #32
   1e5f0:	d134      	bne.n	1e65c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   1e5f2:	2370      	movs	r3, #112	; 0x70
   1e5f4:	18f9      	adds	r1, r7, r3
   1e5f6:	6838      	ldr	r0, [r7, #0]
   1e5f8:	2300      	movs	r3, #0
   1e5fa:	2208      	movs	r2, #8
   1e5fc:	4c0e      	ldr	r4, [pc, #56]	; (1e638 <m2m_wifi_cb+0x350>)
   1e5fe:	47a0      	blx	r4
   1e600:	1e03      	subs	r3, r0, #0
   1e602:	d13e      	bne.n	1e682 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   1e604:	683b      	ldr	r3, [r7, #0]
   1e606:	3308      	adds	r3, #8
   1e608:	0018      	movs	r0, r3
   1e60a:	2370      	movs	r3, #112	; 0x70
   1e60c:	18fb      	adds	r3, r7, r3
   1e60e:	6819      	ldr	r1, [r3, #0]
   1e610:	2370      	movs	r3, #112	; 0x70
   1e612:	18fb      	adds	r3, r7, r3
   1e614:	889a      	ldrh	r2, [r3, #4]
   1e616:	2301      	movs	r3, #1
   1e618:	4c07      	ldr	r4, [pc, #28]	; (1e638 <m2m_wifi_cb+0x350>)
   1e61a:	47a0      	blx	r4
   1e61c:	1e03      	subs	r3, r0, #0
   1e61e:	d130      	bne.n	1e682 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   1e620:	4b06      	ldr	r3, [pc, #24]	; (1e63c <m2m_wifi_cb+0x354>)
   1e622:	681b      	ldr	r3, [r3, #0]
   1e624:	2b00      	cmp	r3, #0
   1e626:	d02c      	beq.n	1e682 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   1e628:	4b04      	ldr	r3, [pc, #16]	; (1e63c <m2m_wifi_cb+0x354>)
   1e62a:	681b      	ldr	r3, [r3, #0]
   1e62c:	2270      	movs	r2, #112	; 0x70
   1e62e:	18ba      	adds	r2, r7, r2
   1e630:	0011      	movs	r1, r2
   1e632:	2020      	movs	r0, #32
   1e634:	4798      	blx	r3
}
   1e636:	e024      	b.n	1e682 <m2m_wifi_cb+0x39a>
   1e638:	0001e0ad 	.word	0x0001e0ad
   1e63c:	20003d24 	.word	0x20003d24
   1e640:	0001d531 	.word	0x0001d531
   1e644:	000369e0 	.word	0x000369e0
   1e648:	0001a5e9 	.word	0x0001a5e9
   1e64c:	000369ec 	.word	0x000369ec
   1e650:	00036a0c 	.word	0x00036a0c
   1e654:	20003d21 	.word	0x20003d21
   1e658:	20003d20 	.word	0x20003d20
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   1e65c:	2324      	movs	r3, #36	; 0x24
   1e65e:	33ff      	adds	r3, #255	; 0xff
   1e660:	001a      	movs	r2, r3
   1e662:	490a      	ldr	r1, [pc, #40]	; (1e68c <m2m_wifi_cb+0x3a4>)
   1e664:	4b0a      	ldr	r3, [pc, #40]	; (1e690 <m2m_wifi_cb+0x3a8>)
   1e666:	0018      	movs	r0, r3
   1e668:	4b0a      	ldr	r3, [pc, #40]	; (1e694 <m2m_wifi_cb+0x3ac>)
   1e66a:	4798      	blx	r3
   1e66c:	1dfb      	adds	r3, r7, #7
   1e66e:	781a      	ldrb	r2, [r3, #0]
   1e670:	4b09      	ldr	r3, [pc, #36]	; (1e698 <m2m_wifi_cb+0x3b0>)
   1e672:	0011      	movs	r1, r2
   1e674:	0018      	movs	r0, r3
   1e676:	4b07      	ldr	r3, [pc, #28]	; (1e694 <m2m_wifi_cb+0x3ac>)
   1e678:	4798      	blx	r3
   1e67a:	4b08      	ldr	r3, [pc, #32]	; (1e69c <m2m_wifi_cb+0x3b4>)
   1e67c:	0018      	movs	r0, r3
   1e67e:	4b05      	ldr	r3, [pc, #20]	; (1e694 <m2m_wifi_cb+0x3ac>)
   1e680:	4798      	blx	r3
}
   1e682:	46c0      	nop			; (mov r8, r8)
   1e684:	46bd      	mov	sp, r7
   1e686:	b02d      	add	sp, #180	; 0xb4
   1e688:	bd90      	pop	{r4, r7, pc}
   1e68a:	46c0      	nop			; (mov r8, r8)
   1e68c:	00036dac 	.word	0x00036dac
   1e690:	00036a10 	.word	0x00036a10
   1e694:	0001a5e9 	.word	0x0001a5e9
   1e698:	00036a24 	.word	0x00036a24
   1e69c:	00036a0c 	.word	0x00036a0c

0001e6a0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1e6a0:	b590      	push	{r4, r7, lr}
   1e6a2:	b091      	sub	sp, #68	; 0x44
   1e6a4:	af02      	add	r7, sp, #8
   1e6a6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   1e6a8:	2337      	movs	r3, #55	; 0x37
   1e6aa:	18fb      	adds	r3, r7, r3
   1e6ac:	2200      	movs	r2, #0
   1e6ae:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   1e6b0:	230b      	movs	r3, #11
   1e6b2:	18fb      	adds	r3, r7, r3
   1e6b4:	2201      	movs	r2, #1
   1e6b6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1e6b8:	687b      	ldr	r3, [r7, #4]
   1e6ba:	2b00      	cmp	r3, #0
   1e6bc:	d104      	bne.n	1e6c8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   1e6be:	2337      	movs	r3, #55	; 0x37
   1e6c0:	18fb      	adds	r3, r7, r3
   1e6c2:	22f4      	movs	r2, #244	; 0xf4
   1e6c4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   1e6c6:	e0b3      	b.n	1e830 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1e6c8:	687b      	ldr	r3, [r7, #4]
   1e6ca:	681a      	ldr	r2, [r3, #0]
   1e6cc:	4b5c      	ldr	r3, [pc, #368]	; (1e840 <m2m_wifi_init+0x1a0>)
   1e6ce:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   1e6d0:	4b5c      	ldr	r3, [pc, #368]	; (1e844 <m2m_wifi_init+0x1a4>)
   1e6d2:	2200      	movs	r2, #0
   1e6d4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1e6d6:	2337      	movs	r3, #55	; 0x37
   1e6d8:	18fc      	adds	r4, r7, r3
   1e6da:	230b      	movs	r3, #11
   1e6dc:	18fb      	adds	r3, r7, r3
   1e6de:	0018      	movs	r0, r3
   1e6e0:	4b59      	ldr	r3, [pc, #356]	; (1e848 <m2m_wifi_init+0x1a8>)
   1e6e2:	4798      	blx	r3
   1e6e4:	0003      	movs	r3, r0
   1e6e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1e6e8:	2337      	movs	r3, #55	; 0x37
   1e6ea:	18fb      	adds	r3, r7, r3
   1e6ec:	781b      	ldrb	r3, [r3, #0]
   1e6ee:	b25b      	sxtb	r3, r3
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	d000      	beq.n	1e6f6 <m2m_wifi_init+0x56>
   1e6f4:	e099      	b.n	1e82a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   1e6f6:	2337      	movs	r3, #55	; 0x37
   1e6f8:	18fc      	adds	r4, r7, r3
   1e6fa:	2000      	movs	r0, #0
   1e6fc:	4b53      	ldr	r3, [pc, #332]	; (1e84c <m2m_wifi_init+0x1ac>)
   1e6fe:	4798      	blx	r3
   1e700:	0003      	movs	r3, r0
   1e702:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1e704:	2337      	movs	r3, #55	; 0x37
   1e706:	18fb      	adds	r3, r7, r3
   1e708:	781b      	ldrb	r3, [r3, #0]
   1e70a:	b25b      	sxtb	r3, r3
   1e70c:	2b00      	cmp	r3, #0
   1e70e:	d000      	beq.n	1e712 <m2m_wifi_init+0x72>
   1e710:	e086      	b.n	1e820 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   1e712:	4b4f      	ldr	r3, [pc, #316]	; (1e850 <m2m_wifi_init+0x1b0>)
   1e714:	0019      	movs	r1, r3
   1e716:	2001      	movs	r0, #1
   1e718:	4b4e      	ldr	r3, [pc, #312]	; (1e854 <m2m_wifi_init+0x1b4>)
   1e71a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   1e71c:	2337      	movs	r3, #55	; 0x37
   1e71e:	18fc      	adds	r4, r7, r3
   1e720:	230c      	movs	r3, #12
   1e722:	18fb      	adds	r3, r7, r3
   1e724:	0018      	movs	r0, r3
   1e726:	4b4c      	ldr	r3, [pc, #304]	; (1e858 <m2m_wifi_init+0x1b8>)
   1e728:	4798      	blx	r3
   1e72a:	0003      	movs	r3, r0
   1e72c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   1e72e:	4b4b      	ldr	r3, [pc, #300]	; (1e85c <m2m_wifi_init+0x1bc>)
   1e730:	0018      	movs	r0, r3
   1e732:	4b4b      	ldr	r3, [pc, #300]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e734:	4798      	blx	r3
   1e736:	230c      	movs	r3, #12
   1e738:	18fb      	adds	r3, r7, r3
   1e73a:	791b      	ldrb	r3, [r3, #4]
   1e73c:	0019      	movs	r1, r3
   1e73e:	230c      	movs	r3, #12
   1e740:	18fb      	adds	r3, r7, r3
   1e742:	795b      	ldrb	r3, [r3, #5]
   1e744:	001a      	movs	r2, r3
   1e746:	230c      	movs	r3, #12
   1e748:	18fb      	adds	r3, r7, r3
   1e74a:	799b      	ldrb	r3, [r3, #6]
   1e74c:	001c      	movs	r4, r3
   1e74e:	230c      	movs	r3, #12
   1e750:	18fb      	adds	r3, r7, r3
   1e752:	8c1b      	ldrh	r3, [r3, #32]
   1e754:	4843      	ldr	r0, [pc, #268]	; (1e864 <m2m_wifi_init+0x1c4>)
   1e756:	9300      	str	r3, [sp, #0]
   1e758:	0023      	movs	r3, r4
   1e75a:	4c41      	ldr	r4, [pc, #260]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e75c:	47a0      	blx	r4
   1e75e:	4b42      	ldr	r3, [pc, #264]	; (1e868 <m2m_wifi_init+0x1c8>)
   1e760:	0018      	movs	r0, r3
   1e762:	4b3f      	ldr	r3, [pc, #252]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e764:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1e766:	4b3d      	ldr	r3, [pc, #244]	; (1e85c <m2m_wifi_init+0x1bc>)
   1e768:	0018      	movs	r0, r3
   1e76a:	4b3d      	ldr	r3, [pc, #244]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e76c:	4798      	blx	r3
   1e76e:	230c      	movs	r3, #12
   1e770:	18fb      	adds	r3, r7, r3
   1e772:	3316      	adds	r3, #22
   1e774:	001a      	movs	r2, r3
   1e776:	230c      	movs	r3, #12
   1e778:	18fb      	adds	r3, r7, r3
   1e77a:	330a      	adds	r3, #10
   1e77c:	0019      	movs	r1, r3
   1e77e:	4b3b      	ldr	r3, [pc, #236]	; (1e86c <m2m_wifi_init+0x1cc>)
   1e780:	0018      	movs	r0, r3
   1e782:	4b37      	ldr	r3, [pc, #220]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e784:	4798      	blx	r3
   1e786:	4b38      	ldr	r3, [pc, #224]	; (1e868 <m2m_wifi_init+0x1c8>)
   1e788:	0018      	movs	r0, r3
   1e78a:	4b35      	ldr	r3, [pc, #212]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e78c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   1e78e:	4b33      	ldr	r3, [pc, #204]	; (1e85c <m2m_wifi_init+0x1bc>)
   1e790:	0018      	movs	r0, r3
   1e792:	4b33      	ldr	r3, [pc, #204]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e794:	4798      	blx	r3
   1e796:	230c      	movs	r3, #12
   1e798:	18fb      	adds	r3, r7, r3
   1e79a:	79db      	ldrb	r3, [r3, #7]
   1e79c:	0019      	movs	r1, r3
   1e79e:	230c      	movs	r3, #12
   1e7a0:	18fb      	adds	r3, r7, r3
   1e7a2:	7a1b      	ldrb	r3, [r3, #8]
   1e7a4:	001a      	movs	r2, r3
   1e7a6:	230c      	movs	r3, #12
   1e7a8:	18fb      	adds	r3, r7, r3
   1e7aa:	7a5b      	ldrb	r3, [r3, #9]
   1e7ac:	4830      	ldr	r0, [pc, #192]	; (1e870 <m2m_wifi_init+0x1d0>)
   1e7ae:	4c2c      	ldr	r4, [pc, #176]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7b0:	47a0      	blx	r4
   1e7b2:	4b2d      	ldr	r3, [pc, #180]	; (1e868 <m2m_wifi_init+0x1c8>)
   1e7b4:	0018      	movs	r0, r3
   1e7b6:	4b2a      	ldr	r3, [pc, #168]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7b8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1e7ba:	4b28      	ldr	r3, [pc, #160]	; (1e85c <m2m_wifi_init+0x1bc>)
   1e7bc:	0018      	movs	r0, r3
   1e7be:	4b28      	ldr	r3, [pc, #160]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7c0:	4798      	blx	r3
   1e7c2:	482c      	ldr	r0, [pc, #176]	; (1e874 <m2m_wifi_init+0x1d4>)
   1e7c4:	2304      	movs	r3, #4
   1e7c6:	2205      	movs	r2, #5
   1e7c8:	2113      	movs	r1, #19
   1e7ca:	4c25      	ldr	r4, [pc, #148]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7cc:	47a0      	blx	r4
   1e7ce:	4b26      	ldr	r3, [pc, #152]	; (1e868 <m2m_wifi_init+0x1c8>)
   1e7d0:	0018      	movs	r0, r3
   1e7d2:	4b23      	ldr	r3, [pc, #140]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7d4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1e7d6:	4b21      	ldr	r3, [pc, #132]	; (1e85c <m2m_wifi_init+0x1bc>)
   1e7d8:	0018      	movs	r0, r3
   1e7da:	4b21      	ldr	r3, [pc, #132]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7dc:	4798      	blx	r3
   1e7de:	4a26      	ldr	r2, [pc, #152]	; (1e878 <m2m_wifi_init+0x1d8>)
   1e7e0:	4926      	ldr	r1, [pc, #152]	; (1e87c <m2m_wifi_init+0x1dc>)
   1e7e2:	4b27      	ldr	r3, [pc, #156]	; (1e880 <m2m_wifi_init+0x1e0>)
   1e7e4:	0018      	movs	r0, r3
   1e7e6:	4b1e      	ldr	r3, [pc, #120]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7e8:	4798      	blx	r3
   1e7ea:	4b1f      	ldr	r3, [pc, #124]	; (1e868 <m2m_wifi_init+0x1c8>)
   1e7ec:	0018      	movs	r0, r3
   1e7ee:	4b1c      	ldr	r3, [pc, #112]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e7f0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   1e7f2:	2337      	movs	r3, #55	; 0x37
   1e7f4:	18fb      	adds	r3, r7, r3
   1e7f6:	781b      	ldrb	r3, [r3, #0]
   1e7f8:	b25b      	sxtb	r3, r3
   1e7fa:	330d      	adds	r3, #13
   1e7fc:	d117      	bne.n	1e82e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   1e7fe:	23e8      	movs	r3, #232	; 0xe8
   1e800:	33ff      	adds	r3, #255	; 0xff
   1e802:	001a      	movs	r2, r3
   1e804:	491f      	ldr	r1, [pc, #124]	; (1e884 <m2m_wifi_init+0x1e4>)
   1e806:	4b20      	ldr	r3, [pc, #128]	; (1e888 <m2m_wifi_init+0x1e8>)
   1e808:	0018      	movs	r0, r3
   1e80a:	4b15      	ldr	r3, [pc, #84]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e80c:	4798      	blx	r3
   1e80e:	4b1f      	ldr	r3, [pc, #124]	; (1e88c <m2m_wifi_init+0x1ec>)
   1e810:	0018      	movs	r0, r3
   1e812:	4b13      	ldr	r3, [pc, #76]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e814:	4798      	blx	r3
   1e816:	4b14      	ldr	r3, [pc, #80]	; (1e868 <m2m_wifi_init+0x1c8>)
   1e818:	0018      	movs	r0, r3
   1e81a:	4b11      	ldr	r3, [pc, #68]	; (1e860 <m2m_wifi_init+0x1c0>)
   1e81c:	4798      	blx	r3
	}

	goto _EXIT0;
   1e81e:	e006      	b.n	1e82e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1e820:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   1e822:	2000      	movs	r0, #0
   1e824:	4b1a      	ldr	r3, [pc, #104]	; (1e890 <m2m_wifi_init+0x1f0>)
   1e826:	4798      	blx	r3
   1e828:	e002      	b.n	1e830 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1e82a:	46c0      	nop			; (mov r8, r8)
   1e82c:	e000      	b.n	1e830 <m2m_wifi_init+0x190>
	goto _EXIT0;
   1e82e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   1e830:	2337      	movs	r3, #55	; 0x37
   1e832:	18fb      	adds	r3, r7, r3
   1e834:	781b      	ldrb	r3, [r3, #0]
   1e836:	b25b      	sxtb	r3, r3
}
   1e838:	0018      	movs	r0, r3
   1e83a:	46bd      	mov	sp, r7
   1e83c:	b00f      	add	sp, #60	; 0x3c
   1e83e:	bd90      	pop	{r4, r7, pc}
   1e840:	20003d24 	.word	0x20003d24
   1e844:	20003d21 	.word	0x20003d21
   1e848:	0001f9c5 	.word	0x0001f9c5
   1e84c:	0001d749 	.word	0x0001d749
   1e850:	0001e2e9 	.word	0x0001e2e9
   1e854:	0001e22d 	.word	0x0001e22d
   1e858:	0001f7f9 	.word	0x0001f7f9
   1e85c:	000369e0 	.word	0x000369e0
   1e860:	0001a5e9 	.word	0x0001a5e9
   1e864:	00036b84 	.word	0x00036b84
   1e868:	00036a0c 	.word	0x00036a0c
   1e86c:	00036bac 	.word	0x00036bac
   1e870:	00036bc8 	.word	0x00036bc8
   1e874:	00036bec 	.word	0x00036bec
   1e878:	00036c04 	.word	0x00036c04
   1e87c:	00036c10 	.word	0x00036c10
   1e880:	00036c1c 	.word	0x00036c1c
   1e884:	00036db8 	.word	0x00036db8
   1e888:	00036a10 	.word	0x00036a10
   1e88c:	00036c34 	.word	0x00036c34
   1e890:	0001fb55 	.word	0x0001fb55

0001e894 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   1e894:	b580      	push	{r7, lr}
   1e896:	b082      	sub	sp, #8
   1e898:	af00      	add	r7, sp, #0
   1e89a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   1e89c:	4b03      	ldr	r3, [pc, #12]	; (1e8ac <m2m_wifi_handle_events+0x18>)
   1e89e:	4798      	blx	r3
   1e8a0:	0003      	movs	r3, r0
}
   1e8a2:	0018      	movs	r0, r3
   1e8a4:	46bd      	mov	sp, r7
   1e8a6:	b002      	add	sp, #8
   1e8a8:	bd80      	pop	{r7, pc}
   1e8aa:	46c0      	nop			; (mov r8, r8)
   1e8ac:	0001e00d 	.word	0x0001e00d

0001e8b0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   1e8b0:	b590      	push	{r4, r7, lr}
   1e8b2:	b087      	sub	sp, #28
   1e8b4:	af02      	add	r7, sp, #8
   1e8b6:	60f8      	str	r0, [r7, #12]
   1e8b8:	0008      	movs	r0, r1
   1e8ba:	0011      	movs	r1, r2
   1e8bc:	607b      	str	r3, [r7, #4]
   1e8be:	230b      	movs	r3, #11
   1e8c0:	18fb      	adds	r3, r7, r3
   1e8c2:	1c02      	adds	r2, r0, #0
   1e8c4:	701a      	strb	r2, [r3, #0]
   1e8c6:	230a      	movs	r3, #10
   1e8c8:	18fb      	adds	r3, r7, r3
   1e8ca:	1c0a      	adds	r2, r1, #0
   1e8cc:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   1e8ce:	687c      	ldr	r4, [r7, #4]
   1e8d0:	230a      	movs	r3, #10
   1e8d2:	18fb      	adds	r3, r7, r3
   1e8d4:	781a      	ldrb	r2, [r3, #0]
   1e8d6:	230b      	movs	r3, #11
   1e8d8:	18fb      	adds	r3, r7, r3
   1e8da:	7819      	ldrb	r1, [r3, #0]
   1e8dc:	68f8      	ldr	r0, [r7, #12]
   1e8de:	2300      	movs	r3, #0
   1e8e0:	9301      	str	r3, [sp, #4]
   1e8e2:	2320      	movs	r3, #32
   1e8e4:	18fb      	adds	r3, r7, r3
   1e8e6:	881b      	ldrh	r3, [r3, #0]
   1e8e8:	9300      	str	r3, [sp, #0]
   1e8ea:	0023      	movs	r3, r4
   1e8ec:	4c03      	ldr	r4, [pc, #12]	; (1e8fc <m2m_wifi_connect+0x4c>)
   1e8ee:	47a0      	blx	r4
   1e8f0:	0003      	movs	r3, r0
}
   1e8f2:	0018      	movs	r0, r3
   1e8f4:	46bd      	mov	sp, r7
   1e8f6:	b005      	add	sp, #20
   1e8f8:	bd90      	pop	{r4, r7, pc}
   1e8fa:	46c0      	nop			; (mov r8, r8)
   1e8fc:	0001e901 	.word	0x0001e901

0001e900 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   1e900:	b5b0      	push	{r4, r5, r7, lr}
   1e902:	b0aa      	sub	sp, #168	; 0xa8
   1e904:	af04      	add	r7, sp, #16
   1e906:	60f8      	str	r0, [r7, #12]
   1e908:	0008      	movs	r0, r1
   1e90a:	0011      	movs	r1, r2
   1e90c:	607b      	str	r3, [r7, #4]
   1e90e:	230b      	movs	r3, #11
   1e910:	18fb      	adds	r3, r7, r3
   1e912:	1c02      	adds	r2, r0, #0
   1e914:	701a      	strb	r2, [r3, #0]
   1e916:	230a      	movs	r3, #10
   1e918:	18fb      	adds	r3, r7, r3
   1e91a:	1c0a      	adds	r2, r1, #0
   1e91c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   1e91e:	2397      	movs	r3, #151	; 0x97
   1e920:	18fb      	adds	r3, r7, r3
   1e922:	2200      	movs	r2, #0
   1e924:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   1e926:	230a      	movs	r3, #10
   1e928:	18fb      	adds	r3, r7, r3
   1e92a:	781b      	ldrb	r3, [r3, #0]
   1e92c:	2b01      	cmp	r3, #1
   1e92e:	d100      	bne.n	1e932 <m2m_wifi_connect_sc+0x32>
   1e930:	e085      	b.n	1ea3e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   1e932:	687b      	ldr	r3, [r7, #4]
   1e934:	2b00      	cmp	r3, #0
   1e936:	d112      	bne.n	1e95e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   1e938:	4ad8      	ldr	r2, [pc, #864]	; (1ec9c <m2m_wifi_connect_sc+0x39c>)
   1e93a:	49d9      	ldr	r1, [pc, #868]	; (1eca0 <m2m_wifi_connect_sc+0x3a0>)
   1e93c:	4bd9      	ldr	r3, [pc, #868]	; (1eca4 <m2m_wifi_connect_sc+0x3a4>)
   1e93e:	0018      	movs	r0, r3
   1e940:	4bd9      	ldr	r3, [pc, #868]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1e942:	4798      	blx	r3
   1e944:	4bd9      	ldr	r3, [pc, #868]	; (1ecac <m2m_wifi_connect_sc+0x3ac>)
   1e946:	0018      	movs	r0, r3
   1e948:	4bd7      	ldr	r3, [pc, #860]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1e94a:	4798      	blx	r3
   1e94c:	4bd8      	ldr	r3, [pc, #864]	; (1ecb0 <m2m_wifi_connect_sc+0x3b0>)
   1e94e:	0018      	movs	r0, r3
   1e950:	4bd5      	ldr	r3, [pc, #852]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1e952:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1e954:	2397      	movs	r3, #151	; 0x97
   1e956:	18fb      	adds	r3, r7, r3
   1e958:	22f4      	movs	r2, #244	; 0xf4
   1e95a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1e95c:	e1f9      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1e95e:	230a      	movs	r3, #10
   1e960:	18fb      	adds	r3, r7, r3
   1e962:	781b      	ldrb	r3, [r3, #0]
   1e964:	2b02      	cmp	r3, #2
   1e966:	d16a      	bne.n	1ea3e <m2m_wifi_connect_sc+0x13e>
   1e968:	687b      	ldr	r3, [r7, #4]
   1e96a:	0018      	movs	r0, r3
   1e96c:	4bd1      	ldr	r3, [pc, #836]	; (1ecb4 <m2m_wifi_connect_sc+0x3b4>)
   1e96e:	4798      	blx	r3
   1e970:	0003      	movs	r3, r0
   1e972:	2b40      	cmp	r3, #64	; 0x40
   1e974:	d163      	bne.n	1ea3e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   1e976:	2396      	movs	r3, #150	; 0x96
   1e978:	18fb      	adds	r3, r7, r3
   1e97a:	2200      	movs	r2, #0
   1e97c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   1e97e:	687b      	ldr	r3, [r7, #4]
   1e980:	2290      	movs	r2, #144	; 0x90
   1e982:	18ba      	adds	r2, r7, r2
   1e984:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   1e986:	e055      	b.n	1ea34 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1e988:	2396      	movs	r3, #150	; 0x96
   1e98a:	18fb      	adds	r3, r7, r3
   1e98c:	781b      	ldrb	r3, [r3, #0]
   1e98e:	2290      	movs	r2, #144	; 0x90
   1e990:	18ba      	adds	r2, r7, r2
   1e992:	6812      	ldr	r2, [r2, #0]
   1e994:	18d3      	adds	r3, r2, r3
   1e996:	781b      	ldrb	r3, [r3, #0]
   1e998:	2b2f      	cmp	r3, #47	; 0x2f
   1e99a:	d931      	bls.n	1ea00 <m2m_wifi_connect_sc+0x100>
   1e99c:	2396      	movs	r3, #150	; 0x96
   1e99e:	18fb      	adds	r3, r7, r3
   1e9a0:	781b      	ldrb	r3, [r3, #0]
   1e9a2:	2290      	movs	r2, #144	; 0x90
   1e9a4:	18ba      	adds	r2, r7, r2
   1e9a6:	6812      	ldr	r2, [r2, #0]
   1e9a8:	18d3      	adds	r3, r2, r3
   1e9aa:	781b      	ldrb	r3, [r3, #0]
   1e9ac:	2b39      	cmp	r3, #57	; 0x39
   1e9ae:	d909      	bls.n	1e9c4 <m2m_wifi_connect_sc+0xc4>
   1e9b0:	2396      	movs	r3, #150	; 0x96
   1e9b2:	18fb      	adds	r3, r7, r3
   1e9b4:	781b      	ldrb	r3, [r3, #0]
   1e9b6:	2290      	movs	r2, #144	; 0x90
   1e9b8:	18ba      	adds	r2, r7, r2
   1e9ba:	6812      	ldr	r2, [r2, #0]
   1e9bc:	18d3      	adds	r3, r2, r3
   1e9be:	781b      	ldrb	r3, [r3, #0]
   1e9c0:	2b40      	cmp	r3, #64	; 0x40
   1e9c2:	d91d      	bls.n	1ea00 <m2m_wifi_connect_sc+0x100>
   1e9c4:	2396      	movs	r3, #150	; 0x96
   1e9c6:	18fb      	adds	r3, r7, r3
   1e9c8:	781b      	ldrb	r3, [r3, #0]
   1e9ca:	2290      	movs	r2, #144	; 0x90
   1e9cc:	18ba      	adds	r2, r7, r2
   1e9ce:	6812      	ldr	r2, [r2, #0]
   1e9d0:	18d3      	adds	r3, r2, r3
   1e9d2:	781b      	ldrb	r3, [r3, #0]
   1e9d4:	2b46      	cmp	r3, #70	; 0x46
   1e9d6:	d909      	bls.n	1e9ec <m2m_wifi_connect_sc+0xec>
   1e9d8:	2396      	movs	r3, #150	; 0x96
   1e9da:	18fb      	adds	r3, r7, r3
   1e9dc:	781b      	ldrb	r3, [r3, #0]
   1e9de:	2290      	movs	r2, #144	; 0x90
   1e9e0:	18ba      	adds	r2, r7, r2
   1e9e2:	6812      	ldr	r2, [r2, #0]
   1e9e4:	18d3      	adds	r3, r2, r3
   1e9e6:	781b      	ldrb	r3, [r3, #0]
   1e9e8:	2b60      	cmp	r3, #96	; 0x60
   1e9ea:	d909      	bls.n	1ea00 <m2m_wifi_connect_sc+0x100>
   1e9ec:	2396      	movs	r3, #150	; 0x96
   1e9ee:	18fb      	adds	r3, r7, r3
   1e9f0:	781b      	ldrb	r3, [r3, #0]
   1e9f2:	2290      	movs	r2, #144	; 0x90
   1e9f4:	18ba      	adds	r2, r7, r2
   1e9f6:	6812      	ldr	r2, [r2, #0]
   1e9f8:	18d3      	adds	r3, r2, r3
   1e9fa:	781b      	ldrb	r3, [r3, #0]
   1e9fc:	2b66      	cmp	r3, #102	; 0x66
   1e9fe:	d912      	bls.n	1ea26 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   1ea00:	4aad      	ldr	r2, [pc, #692]	; (1ecb8 <m2m_wifi_connect_sc+0x3b8>)
   1ea02:	49a7      	ldr	r1, [pc, #668]	; (1eca0 <m2m_wifi_connect_sc+0x3a0>)
   1ea04:	4ba7      	ldr	r3, [pc, #668]	; (1eca4 <m2m_wifi_connect_sc+0x3a4>)
   1ea06:	0018      	movs	r0, r3
   1ea08:	4ba7      	ldr	r3, [pc, #668]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ea0a:	4798      	blx	r3
   1ea0c:	4bab      	ldr	r3, [pc, #684]	; (1ecbc <m2m_wifi_connect_sc+0x3bc>)
   1ea0e:	0018      	movs	r0, r3
   1ea10:	4ba5      	ldr	r3, [pc, #660]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ea12:	4798      	blx	r3
   1ea14:	4ba6      	ldr	r3, [pc, #664]	; (1ecb0 <m2m_wifi_connect_sc+0x3b0>)
   1ea16:	0018      	movs	r0, r3
   1ea18:	4ba3      	ldr	r3, [pc, #652]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ea1a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   1ea1c:	2397      	movs	r3, #151	; 0x97
   1ea1e:	18fb      	adds	r3, r7, r3
   1ea20:	22f4      	movs	r2, #244	; 0xf4
   1ea22:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1ea24:	e195      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   1ea26:	2396      	movs	r3, #150	; 0x96
   1ea28:	18fb      	adds	r3, r7, r3
   1ea2a:	781a      	ldrb	r2, [r3, #0]
   1ea2c:	2396      	movs	r3, #150	; 0x96
   1ea2e:	18fb      	adds	r3, r7, r3
   1ea30:	3201      	adds	r2, #1
   1ea32:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   1ea34:	2396      	movs	r3, #150	; 0x96
   1ea36:	18fb      	adds	r3, r7, r3
   1ea38:	781b      	ldrb	r3, [r3, #0]
   1ea3a:	2b3f      	cmp	r3, #63	; 0x3f
   1ea3c:	d9a4      	bls.n	1e988 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   1ea3e:	230b      	movs	r3, #11
   1ea40:	18fb      	adds	r3, r7, r3
   1ea42:	781b      	ldrb	r3, [r3, #0]
   1ea44:	2b00      	cmp	r3, #0
   1ea46:	d004      	beq.n	1ea52 <m2m_wifi_connect_sc+0x152>
   1ea48:	230b      	movs	r3, #11
   1ea4a:	18fb      	adds	r3, r7, r3
   1ea4c:	781b      	ldrb	r3, [r3, #0]
   1ea4e:	2b20      	cmp	r3, #32
   1ea50:	d913      	bls.n	1ea7a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   1ea52:	238c      	movs	r3, #140	; 0x8c
   1ea54:	009a      	lsls	r2, r3, #2
   1ea56:	4992      	ldr	r1, [pc, #584]	; (1eca0 <m2m_wifi_connect_sc+0x3a0>)
   1ea58:	4b92      	ldr	r3, [pc, #584]	; (1eca4 <m2m_wifi_connect_sc+0x3a4>)
   1ea5a:	0018      	movs	r0, r3
   1ea5c:	4b92      	ldr	r3, [pc, #584]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ea5e:	4798      	blx	r3
   1ea60:	4b97      	ldr	r3, [pc, #604]	; (1ecc0 <m2m_wifi_connect_sc+0x3c0>)
   1ea62:	0018      	movs	r0, r3
   1ea64:	4b90      	ldr	r3, [pc, #576]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ea66:	4798      	blx	r3
   1ea68:	4b91      	ldr	r3, [pc, #580]	; (1ecb0 <m2m_wifi_connect_sc+0x3b0>)
   1ea6a:	0018      	movs	r0, r3
   1ea6c:	4b8e      	ldr	r3, [pc, #568]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ea6e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   1ea70:	2397      	movs	r3, #151	; 0x97
   1ea72:	18fb      	adds	r3, r7, r3
   1ea74:	22f4      	movs	r2, #244	; 0xf4
   1ea76:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   1ea78:	e16b      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1ea7a:	23a8      	movs	r3, #168	; 0xa8
   1ea7c:	18fb      	adds	r3, r7, r3
   1ea7e:	881b      	ldrh	r3, [r3, #0]
   1ea80:	2b00      	cmp	r3, #0
   1ea82:	d004      	beq.n	1ea8e <m2m_wifi_connect_sc+0x18e>
   1ea84:	23a8      	movs	r3, #168	; 0xa8
   1ea86:	18fb      	adds	r3, r7, r3
   1ea88:	881b      	ldrh	r3, [r3, #0]
   1ea8a:	2b0e      	cmp	r3, #14
   1ea8c:	d917      	bls.n	1eabe <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   1ea8e:	23a8      	movs	r3, #168	; 0xa8
   1ea90:	18fb      	adds	r3, r7, r3
   1ea92:	881b      	ldrh	r3, [r3, #0]
   1ea94:	2bff      	cmp	r3, #255	; 0xff
   1ea96:	d012      	beq.n	1eabe <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   1ea98:	4a8a      	ldr	r2, [pc, #552]	; (1ecc4 <m2m_wifi_connect_sc+0x3c4>)
   1ea9a:	4981      	ldr	r1, [pc, #516]	; (1eca0 <m2m_wifi_connect_sc+0x3a0>)
   1ea9c:	4b81      	ldr	r3, [pc, #516]	; (1eca4 <m2m_wifi_connect_sc+0x3a4>)
   1ea9e:	0018      	movs	r0, r3
   1eaa0:	4b81      	ldr	r3, [pc, #516]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1eaa2:	4798      	blx	r3
   1eaa4:	4b88      	ldr	r3, [pc, #544]	; (1ecc8 <m2m_wifi_connect_sc+0x3c8>)
   1eaa6:	0018      	movs	r0, r3
   1eaa8:	4b7f      	ldr	r3, [pc, #508]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1eaaa:	4798      	blx	r3
   1eaac:	4b80      	ldr	r3, [pc, #512]	; (1ecb0 <m2m_wifi_connect_sc+0x3b0>)
   1eaae:	0018      	movs	r0, r3
   1eab0:	4b7d      	ldr	r3, [pc, #500]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1eab2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1eab4:	2397      	movs	r3, #151	; 0x97
   1eab6:	18fb      	adds	r3, r7, r3
   1eab8:	22f4      	movs	r2, #244	; 0xf4
   1eaba:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1eabc:	e149      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   1eabe:	230b      	movs	r3, #11
   1eac0:	18fb      	adds	r3, r7, r3
   1eac2:	781a      	ldrb	r2, [r3, #0]
   1eac4:	68f9      	ldr	r1, [r7, #12]
   1eac6:	2314      	movs	r3, #20
   1eac8:	18fb      	adds	r3, r7, r3
   1eaca:	3346      	adds	r3, #70	; 0x46
   1eacc:	0018      	movs	r0, r3
   1eace:	4b7f      	ldr	r3, [pc, #508]	; (1eccc <m2m_wifi_connect_sc+0x3cc>)
   1ead0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   1ead2:	230b      	movs	r3, #11
   1ead4:	18fb      	adds	r3, r7, r3
   1ead6:	781b      	ldrb	r3, [r3, #0]
   1ead8:	2214      	movs	r2, #20
   1eada:	18ba      	adds	r2, r7, r2
   1eadc:	2146      	movs	r1, #70	; 0x46
   1eade:	18d3      	adds	r3, r2, r3
   1eae0:	185b      	adds	r3, r3, r1
   1eae2:	2200      	movs	r2, #0
   1eae4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1eae6:	2314      	movs	r3, #20
   1eae8:	18fb      	adds	r3, r7, r3
   1eaea:	22a8      	movs	r2, #168	; 0xa8
   1eaec:	18ba      	adds	r2, r7, r2
   1eaee:	2144      	movs	r1, #68	; 0x44
   1eaf0:	8812      	ldrh	r2, [r2, #0]
   1eaf2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   1eaf4:	23ac      	movs	r3, #172	; 0xac
   1eaf6:	18fb      	adds	r3, r7, r3
   1eaf8:	781b      	ldrb	r3, [r3, #0]
   1eafa:	1e5a      	subs	r2, r3, #1
   1eafc:	4193      	sbcs	r3, r2
   1eafe:	b2db      	uxtb	r3, r3
   1eb00:	0019      	movs	r1, r3
   1eb02:	2314      	movs	r3, #20
   1eb04:	18fb      	adds	r3, r7, r3
   1eb06:	2267      	movs	r2, #103	; 0x67
   1eb08:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   1eb0a:	2314      	movs	r3, #20
   1eb0c:	18fb      	adds	r3, r7, r3
   1eb0e:	228c      	movs	r2, #140	; 0x8c
   1eb10:	18ba      	adds	r2, r7, r2
   1eb12:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   1eb14:	238c      	movs	r3, #140	; 0x8c
   1eb16:	18fb      	adds	r3, r7, r3
   1eb18:	681b      	ldr	r3, [r3, #0]
   1eb1a:	220a      	movs	r2, #10
   1eb1c:	18ba      	adds	r2, r7, r2
   1eb1e:	2141      	movs	r1, #65	; 0x41
   1eb20:	7812      	ldrb	r2, [r2, #0]
   1eb22:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   1eb24:	230a      	movs	r3, #10
   1eb26:	18fb      	adds	r3, r7, r3
   1eb28:	781b      	ldrb	r3, [r3, #0]
   1eb2a:	2b03      	cmp	r3, #3
   1eb2c:	d000      	beq.n	1eb30 <m2m_wifi_connect_sc+0x230>
   1eb2e:	e07d      	b.n	1ec2c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   1eb30:	687b      	ldr	r3, [r7, #4]
   1eb32:	2288      	movs	r2, #136	; 0x88
   1eb34:	18ba      	adds	r2, r7, r2
   1eb36:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   1eb38:	238c      	movs	r3, #140	; 0x8c
   1eb3a:	18fb      	adds	r3, r7, r3
   1eb3c:	681b      	ldr	r3, [r3, #0]
   1eb3e:	2284      	movs	r2, #132	; 0x84
   1eb40:	18ba      	adds	r2, r7, r2
   1eb42:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   1eb44:	2388      	movs	r3, #136	; 0x88
   1eb46:	18fb      	adds	r3, r7, r3
   1eb48:	681b      	ldr	r3, [r3, #0]
   1eb4a:	781b      	ldrb	r3, [r3, #0]
   1eb4c:	3b01      	subs	r3, #1
   1eb4e:	b2da      	uxtb	r2, r3
   1eb50:	2384      	movs	r3, #132	; 0x84
   1eb52:	18fb      	adds	r3, r7, r3
   1eb54:	681b      	ldr	r3, [r3, #0]
   1eb56:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1eb58:	2384      	movs	r3, #132	; 0x84
   1eb5a:	18fb      	adds	r3, r7, r3
   1eb5c:	681b      	ldr	r3, [r3, #0]
   1eb5e:	781b      	ldrb	r3, [r3, #0]
   1eb60:	2b03      	cmp	r3, #3
   1eb62:	d919      	bls.n	1eb98 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   1eb64:	2394      	movs	r3, #148	; 0x94
   1eb66:	009a      	lsls	r2, r3, #2
   1eb68:	494d      	ldr	r1, [pc, #308]	; (1eca0 <m2m_wifi_connect_sc+0x3a0>)
   1eb6a:	4b4e      	ldr	r3, [pc, #312]	; (1eca4 <m2m_wifi_connect_sc+0x3a4>)
   1eb6c:	0018      	movs	r0, r3
   1eb6e:	4b4e      	ldr	r3, [pc, #312]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1eb70:	4798      	blx	r3
   1eb72:	2384      	movs	r3, #132	; 0x84
   1eb74:	18fb      	adds	r3, r7, r3
   1eb76:	681b      	ldr	r3, [r3, #0]
   1eb78:	781b      	ldrb	r3, [r3, #0]
   1eb7a:	001a      	movs	r2, r3
   1eb7c:	4b54      	ldr	r3, [pc, #336]	; (1ecd0 <m2m_wifi_connect_sc+0x3d0>)
   1eb7e:	0011      	movs	r1, r2
   1eb80:	0018      	movs	r0, r3
   1eb82:	4b49      	ldr	r3, [pc, #292]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1eb84:	4798      	blx	r3
   1eb86:	4b4a      	ldr	r3, [pc, #296]	; (1ecb0 <m2m_wifi_connect_sc+0x3b0>)
   1eb88:	0018      	movs	r0, r3
   1eb8a:	4b47      	ldr	r3, [pc, #284]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1eb8c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1eb8e:	2397      	movs	r3, #151	; 0x97
   1eb90:	18fb      	adds	r3, r7, r3
   1eb92:	22f4      	movs	r2, #244	; 0xf4
   1eb94:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1eb96:	e0dc      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1eb98:	2388      	movs	r3, #136	; 0x88
   1eb9a:	18fb      	adds	r3, r7, r3
   1eb9c:	681b      	ldr	r3, [r3, #0]
   1eb9e:	785b      	ldrb	r3, [r3, #1]
   1eba0:	3b01      	subs	r3, #1
   1eba2:	b2da      	uxtb	r2, r3
   1eba4:	2384      	movs	r3, #132	; 0x84
   1eba6:	18fb      	adds	r3, r7, r3
   1eba8:	681b      	ldr	r3, [r3, #0]
   1ebaa:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   1ebac:	2384      	movs	r3, #132	; 0x84
   1ebae:	18fb      	adds	r3, r7, r3
   1ebb0:	681b      	ldr	r3, [r3, #0]
   1ebb2:	785b      	ldrb	r3, [r3, #1]
   1ebb4:	2b0a      	cmp	r3, #10
   1ebb6:	d01e      	beq.n	1ebf6 <m2m_wifi_connect_sc+0x2f6>
   1ebb8:	2384      	movs	r3, #132	; 0x84
   1ebba:	18fb      	adds	r3, r7, r3
   1ebbc:	681b      	ldr	r3, [r3, #0]
   1ebbe:	785b      	ldrb	r3, [r3, #1]
   1ebc0:	2b1a      	cmp	r3, #26
   1ebc2:	d018      	beq.n	1ebf6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   1ebc4:	4a43      	ldr	r2, [pc, #268]	; (1ecd4 <m2m_wifi_connect_sc+0x3d4>)
   1ebc6:	4936      	ldr	r1, [pc, #216]	; (1eca0 <m2m_wifi_connect_sc+0x3a0>)
   1ebc8:	4b36      	ldr	r3, [pc, #216]	; (1eca4 <m2m_wifi_connect_sc+0x3a4>)
   1ebca:	0018      	movs	r0, r3
   1ebcc:	4b36      	ldr	r3, [pc, #216]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ebce:	4798      	blx	r3
   1ebd0:	2384      	movs	r3, #132	; 0x84
   1ebd2:	18fb      	adds	r3, r7, r3
   1ebd4:	681b      	ldr	r3, [r3, #0]
   1ebd6:	785b      	ldrb	r3, [r3, #1]
   1ebd8:	001a      	movs	r2, r3
   1ebda:	4b3f      	ldr	r3, [pc, #252]	; (1ecd8 <m2m_wifi_connect_sc+0x3d8>)
   1ebdc:	0011      	movs	r1, r2
   1ebde:	0018      	movs	r0, r3
   1ebe0:	4b31      	ldr	r3, [pc, #196]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ebe2:	4798      	blx	r3
   1ebe4:	4b32      	ldr	r3, [pc, #200]	; (1ecb0 <m2m_wifi_connect_sc+0x3b0>)
   1ebe6:	0018      	movs	r0, r3
   1ebe8:	4b2f      	ldr	r3, [pc, #188]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ebea:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1ebec:	2397      	movs	r3, #151	; 0x97
   1ebee:	18fb      	adds	r3, r7, r3
   1ebf0:	22f4      	movs	r2, #244	; 0xf4
   1ebf2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1ebf4:	e0ad      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   1ebf6:	2384      	movs	r3, #132	; 0x84
   1ebf8:	18fb      	adds	r3, r7, r3
   1ebfa:	681b      	ldr	r3, [r3, #0]
   1ebfc:	1c98      	adds	r0, r3, #2
   1ebfe:	2388      	movs	r3, #136	; 0x88
   1ec00:	18fb      	adds	r3, r7, r3
   1ec02:	681b      	ldr	r3, [r3, #0]
   1ec04:	1c99      	adds	r1, r3, #2
   1ec06:	2388      	movs	r3, #136	; 0x88
   1ec08:	18fb      	adds	r3, r7, r3
   1ec0a:	681b      	ldr	r3, [r3, #0]
   1ec0c:	785b      	ldrb	r3, [r3, #1]
   1ec0e:	001a      	movs	r2, r3
   1ec10:	4b2e      	ldr	r3, [pc, #184]	; (1eccc <m2m_wifi_connect_sc+0x3cc>)
   1ec12:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   1ec14:	2388      	movs	r3, #136	; 0x88
   1ec16:	18fb      	adds	r3, r7, r3
   1ec18:	681b      	ldr	r3, [r3, #0]
   1ec1a:	785b      	ldrb	r3, [r3, #1]
   1ec1c:	001a      	movs	r2, r3
   1ec1e:	2384      	movs	r3, #132	; 0x84
   1ec20:	18fb      	adds	r3, r7, r3
   1ec22:	681b      	ldr	r3, [r3, #0]
   1ec24:	189b      	adds	r3, r3, r2
   1ec26:	2200      	movs	r2, #0
   1ec28:	709a      	strb	r2, [r3, #2]
   1ec2a:	e081      	b.n	1ed30 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   1ec2c:	230a      	movs	r3, #10
   1ec2e:	18fb      	adds	r3, r7, r3
   1ec30:	781b      	ldrb	r3, [r3, #0]
   1ec32:	2b02      	cmp	r3, #2
   1ec34:	d156      	bne.n	1ece4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   1ec36:	2382      	movs	r3, #130	; 0x82
   1ec38:	18fc      	adds	r4, r7, r3
   1ec3a:	687b      	ldr	r3, [r7, #4]
   1ec3c:	0018      	movs	r0, r3
   1ec3e:	4b1d      	ldr	r3, [pc, #116]	; (1ecb4 <m2m_wifi_connect_sc+0x3b4>)
   1ec40:	4798      	blx	r3
   1ec42:	0003      	movs	r3, r0
   1ec44:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   1ec46:	2382      	movs	r3, #130	; 0x82
   1ec48:	18fb      	adds	r3, r7, r3
   1ec4a:	881b      	ldrh	r3, [r3, #0]
   1ec4c:	2b00      	cmp	r3, #0
   1ec4e:	d004      	beq.n	1ec5a <m2m_wifi_connect_sc+0x35a>
   1ec50:	2382      	movs	r3, #130	; 0x82
   1ec52:	18fb      	adds	r3, r7, r3
   1ec54:	881b      	ldrh	r3, [r3, #0]
   1ec56:	2b40      	cmp	r3, #64	; 0x40
   1ec58:	d912      	bls.n	1ec80 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   1ec5a:	4a20      	ldr	r2, [pc, #128]	; (1ecdc <m2m_wifi_connect_sc+0x3dc>)
   1ec5c:	4910      	ldr	r1, [pc, #64]	; (1eca0 <m2m_wifi_connect_sc+0x3a0>)
   1ec5e:	4b11      	ldr	r3, [pc, #68]	; (1eca4 <m2m_wifi_connect_sc+0x3a4>)
   1ec60:	0018      	movs	r0, r3
   1ec62:	4b11      	ldr	r3, [pc, #68]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ec64:	4798      	blx	r3
   1ec66:	4b1e      	ldr	r3, [pc, #120]	; (1ece0 <m2m_wifi_connect_sc+0x3e0>)
   1ec68:	0018      	movs	r0, r3
   1ec6a:	4b0f      	ldr	r3, [pc, #60]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ec6c:	4798      	blx	r3
   1ec6e:	4b10      	ldr	r3, [pc, #64]	; (1ecb0 <m2m_wifi_connect_sc+0x3b0>)
   1ec70:	0018      	movs	r0, r3
   1ec72:	4b0d      	ldr	r3, [pc, #52]	; (1eca8 <m2m_wifi_connect_sc+0x3a8>)
   1ec74:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1ec76:	2397      	movs	r3, #151	; 0x97
   1ec78:	18fb      	adds	r3, r7, r3
   1ec7a:	22f4      	movs	r2, #244	; 0xf4
   1ec7c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1ec7e:	e068      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   1ec80:	238c      	movs	r3, #140	; 0x8c
   1ec82:	18fb      	adds	r3, r7, r3
   1ec84:	6818      	ldr	r0, [r3, #0]
   1ec86:	2382      	movs	r3, #130	; 0x82
   1ec88:	18fb      	adds	r3, r7, r3
   1ec8a:	881b      	ldrh	r3, [r3, #0]
   1ec8c:	3301      	adds	r3, #1
   1ec8e:	001a      	movs	r2, r3
   1ec90:	687b      	ldr	r3, [r7, #4]
   1ec92:	0019      	movs	r1, r3
   1ec94:	4b0d      	ldr	r3, [pc, #52]	; (1eccc <m2m_wifi_connect_sc+0x3cc>)
   1ec96:	4798      	blx	r3
   1ec98:	e04a      	b.n	1ed30 <m2m_wifi_connect_sc+0x430>
   1ec9a:	46c0      	nop			; (mov r8, r8)
   1ec9c:	0000021a 	.word	0x0000021a
   1eca0:	00036dc8 	.word	0x00036dc8
   1eca4:	00036a10 	.word	0x00036a10
   1eca8:	0001a5e9 	.word	0x0001a5e9
   1ecac:	00036c50 	.word	0x00036c50
   1ecb0:	00036a0c 	.word	0x00036a0c
   1ecb4:	0001d56f 	.word	0x0001d56f
   1ecb8:	00000226 	.word	0x00000226
   1ecbc:	00036c64 	.word	0x00036c64
   1ecc0:	00036c74 	.word	0x00036c74
   1ecc4:	00000239 	.word	0x00000239
   1ecc8:	00036c88 	.word	0x00036c88
   1eccc:	0001d4f5 	.word	0x0001d4f5
   1ecd0:	00036c94 	.word	0x00036c94
   1ecd4:	00000257 	.word	0x00000257
   1ecd8:	00036cb0 	.word	0x00036cb0
   1ecdc:	00000266 	.word	0x00000266
   1ece0:	00036ccc 	.word	0x00036ccc
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   1ece4:	230a      	movs	r3, #10
   1ece6:	18fb      	adds	r3, r7, r3
   1ece8:	781b      	ldrb	r3, [r3, #0]
   1ecea:	2b04      	cmp	r3, #4
   1ecec:	d108      	bne.n	1ed00 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   1ecee:	238c      	movs	r3, #140	; 0x8c
   1ecf0:	18fb      	adds	r3, r7, r3
   1ecf2:	681b      	ldr	r3, [r3, #0]
   1ecf4:	6879      	ldr	r1, [r7, #4]
   1ecf6:	223e      	movs	r2, #62	; 0x3e
   1ecf8:	0018      	movs	r0, r3
   1ecfa:	4b1a      	ldr	r3, [pc, #104]	; (1ed64 <m2m_wifi_connect_sc+0x464>)
   1ecfc:	4798      	blx	r3
   1ecfe:	e017      	b.n	1ed30 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   1ed00:	230a      	movs	r3, #10
   1ed02:	18fb      	adds	r3, r7, r3
   1ed04:	781b      	ldrb	r3, [r3, #0]
   1ed06:	2b01      	cmp	r3, #1
   1ed08:	d012      	beq.n	1ed30 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   1ed0a:	4a17      	ldr	r2, [pc, #92]	; (1ed68 <m2m_wifi_connect_sc+0x468>)
   1ed0c:	4917      	ldr	r1, [pc, #92]	; (1ed6c <m2m_wifi_connect_sc+0x46c>)
   1ed0e:	4b18      	ldr	r3, [pc, #96]	; (1ed70 <m2m_wifi_connect_sc+0x470>)
   1ed10:	0018      	movs	r0, r3
   1ed12:	4b18      	ldr	r3, [pc, #96]	; (1ed74 <m2m_wifi_connect_sc+0x474>)
   1ed14:	4798      	blx	r3
   1ed16:	4b18      	ldr	r3, [pc, #96]	; (1ed78 <m2m_wifi_connect_sc+0x478>)
   1ed18:	0018      	movs	r0, r3
   1ed1a:	4b16      	ldr	r3, [pc, #88]	; (1ed74 <m2m_wifi_connect_sc+0x474>)
   1ed1c:	4798      	blx	r3
   1ed1e:	4b17      	ldr	r3, [pc, #92]	; (1ed7c <m2m_wifi_connect_sc+0x47c>)
   1ed20:	0018      	movs	r0, r3
   1ed22:	4b14      	ldr	r3, [pc, #80]	; (1ed74 <m2m_wifi_connect_sc+0x474>)
   1ed24:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   1ed26:	2397      	movs	r3, #151	; 0x97
   1ed28:	18fb      	adds	r3, r7, r3
   1ed2a:	22f4      	movs	r2, #244	; 0xf4
   1ed2c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   1ed2e:	e010      	b.n	1ed52 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   1ed30:	2397      	movs	r3, #151	; 0x97
   1ed32:	18fc      	adds	r4, r7, r3
   1ed34:	2314      	movs	r3, #20
   1ed36:	18fa      	adds	r2, r7, r3
   1ed38:	2300      	movs	r3, #0
   1ed3a:	9302      	str	r3, [sp, #8]
   1ed3c:	2300      	movs	r3, #0
   1ed3e:	9301      	str	r3, [sp, #4]
   1ed40:	2300      	movs	r3, #0
   1ed42:	9300      	str	r3, [sp, #0]
   1ed44:	236c      	movs	r3, #108	; 0x6c
   1ed46:	2128      	movs	r1, #40	; 0x28
   1ed48:	2001      	movs	r0, #1
   1ed4a:	4d0d      	ldr	r5, [pc, #52]	; (1ed80 <m2m_wifi_connect_sc+0x480>)
   1ed4c:	47a8      	blx	r5
   1ed4e:	0003      	movs	r3, r0
   1ed50:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   1ed52:	2397      	movs	r3, #151	; 0x97
   1ed54:	18fb      	adds	r3, r7, r3
   1ed56:	781b      	ldrb	r3, [r3, #0]
   1ed58:	b25b      	sxtb	r3, r3
}
   1ed5a:	0018      	movs	r0, r3
   1ed5c:	46bd      	mov	sp, r7
   1ed5e:	b026      	add	sp, #152	; 0x98
   1ed60:	bdb0      	pop	{r4, r5, r7, pc}
   1ed62:	46c0      	nop			; (mov r8, r8)
   1ed64:	0001d4f5 	.word	0x0001d4f5
   1ed68:	00000276 	.word	0x00000276
   1ed6c:	00036dc8 	.word	0x00036dc8
   1ed70:	00036a10 	.word	0x00036a10
   1ed74:	0001a5e9 	.word	0x0001a5e9
   1ed78:	00036ce8 	.word	0x00036ce8
   1ed7c:	00036a0c 	.word	0x00036a0c
   1ed80:	0001d791 	.word	0x0001d791

0001ed84 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   1ed84:	b580      	push	{r7, lr}
   1ed86:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   1ed88:	2300      	movs	r3, #0
}
   1ed8a:	0018      	movs	r0, r3
   1ed8c:	46bd      	mov	sp, r7
   1ed8e:	bd80      	pop	{r7, pc}

0001ed90 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   1ed90:	b590      	push	{r4, r7, lr}
   1ed92:	b087      	sub	sp, #28
   1ed94:	af00      	add	r7, sp, #0
   1ed96:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   1ed98:	2317      	movs	r3, #23
   1ed9a:	18fb      	adds	r3, r7, r3
   1ed9c:	2200      	movs	r2, #0
   1ed9e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   1eda0:	687b      	ldr	r3, [r7, #4]
   1eda2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   1eda4:	693b      	ldr	r3, [r7, #16]
   1eda6:	2280      	movs	r2, #128	; 0x80
   1eda8:	0052      	lsls	r2, r2, #1
   1edaa:	4313      	orrs	r3, r2
   1edac:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   1edae:	693a      	ldr	r2, [r7, #16]
   1edb0:	23a5      	movs	r3, #165	; 0xa5
   1edb2:	015b      	lsls	r3, r3, #5
   1edb4:	0011      	movs	r1, r2
   1edb6:	0018      	movs	r0, r3
   1edb8:	4b12      	ldr	r3, [pc, #72]	; (1ee04 <chip_apply_conf+0x74>)
   1edba:	4798      	blx	r3
		if(val32 != 0) {		
   1edbc:	693b      	ldr	r3, [r7, #16]
   1edbe:	2b00      	cmp	r3, #0
   1edc0:	d018      	beq.n	1edf4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   1edc2:	2300      	movs	r3, #0
   1edc4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1edc6:	2317      	movs	r3, #23
   1edc8:	18fc      	adds	r4, r7, r3
   1edca:	230c      	movs	r3, #12
   1edcc:	18fa      	adds	r2, r7, r3
   1edce:	23a5      	movs	r3, #165	; 0xa5
   1edd0:	015b      	lsls	r3, r3, #5
   1edd2:	0011      	movs	r1, r2
   1edd4:	0018      	movs	r0, r3
   1edd6:	4b0c      	ldr	r3, [pc, #48]	; (1ee08 <chip_apply_conf+0x78>)
   1edd8:	4798      	blx	r3
   1edda:	0003      	movs	r3, r0
   1eddc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   1edde:	2317      	movs	r3, #23
   1ede0:	18fb      	adds	r3, r7, r3
   1ede2:	781b      	ldrb	r3, [r3, #0]
   1ede4:	b25b      	sxtb	r3, r3
   1ede6:	2b00      	cmp	r3, #0
   1ede8:	d1e1      	bne.n	1edae <chip_apply_conf+0x1e>
				if(reg == val32)
   1edea:	68fa      	ldr	r2, [r7, #12]
   1edec:	693b      	ldr	r3, [r7, #16]
   1edee:	429a      	cmp	r2, r3
   1edf0:	d002      	beq.n	1edf8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   1edf2:	e7dc      	b.n	1edae <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   1edf4:	46c0      	nop			; (mov r8, r8)
   1edf6:	e000      	b.n	1edfa <chip_apply_conf+0x6a>
					break;
   1edf8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   1edfa:	2300      	movs	r3, #0
}
   1edfc:	0018      	movs	r0, r3
   1edfe:	46bd      	mov	sp, r7
   1ee00:	b007      	add	sp, #28
   1ee02:	bd90      	pop	{r4, r7, pc}
   1ee04:	0001f5e5 	.word	0x0001f5e5
   1ee08:	0001f5c1 	.word	0x0001f5c1

0001ee0c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   1ee0c:	b590      	push	{r4, r7, lr}
   1ee0e:	b083      	sub	sp, #12
   1ee10:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   1ee12:	2300      	movs	r3, #0
   1ee14:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   1ee16:	1dfb      	adds	r3, r7, #7
   1ee18:	2200      	movs	r2, #0
   1ee1a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   1ee1c:	1dfc      	adds	r4, r7, #7
   1ee1e:	003b      	movs	r3, r7
   1ee20:	4a24      	ldr	r2, [pc, #144]	; (1eeb4 <enable_interrupts+0xa8>)
   1ee22:	0019      	movs	r1, r3
   1ee24:	0010      	movs	r0, r2
   1ee26:	4b24      	ldr	r3, [pc, #144]	; (1eeb8 <enable_interrupts+0xac>)
   1ee28:	4798      	blx	r3
   1ee2a:	0003      	movs	r3, r0
   1ee2c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   1ee2e:	1dfb      	adds	r3, r7, #7
   1ee30:	781b      	ldrb	r3, [r3, #0]
   1ee32:	b25b      	sxtb	r3, r3
   1ee34:	2b00      	cmp	r3, #0
   1ee36:	d131      	bne.n	1ee9c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   1ee38:	683b      	ldr	r3, [r7, #0]
   1ee3a:	2280      	movs	r2, #128	; 0x80
   1ee3c:	0052      	lsls	r2, r2, #1
   1ee3e:	4313      	orrs	r3, r2
   1ee40:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   1ee42:	683b      	ldr	r3, [r7, #0]
   1ee44:	1dfc      	adds	r4, r7, #7
   1ee46:	4a1b      	ldr	r2, [pc, #108]	; (1eeb4 <enable_interrupts+0xa8>)
   1ee48:	0019      	movs	r1, r3
   1ee4a:	0010      	movs	r0, r2
   1ee4c:	4b1b      	ldr	r3, [pc, #108]	; (1eebc <enable_interrupts+0xb0>)
   1ee4e:	4798      	blx	r3
   1ee50:	0003      	movs	r3, r0
   1ee52:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   1ee54:	1dfb      	adds	r3, r7, #7
   1ee56:	781b      	ldrb	r3, [r3, #0]
   1ee58:	b25b      	sxtb	r3, r3
   1ee5a:	2b00      	cmp	r3, #0
   1ee5c:	d120      	bne.n	1eea0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   1ee5e:	1dfc      	adds	r4, r7, #7
   1ee60:	003a      	movs	r2, r7
   1ee62:	23d0      	movs	r3, #208	; 0xd0
   1ee64:	015b      	lsls	r3, r3, #5
   1ee66:	0011      	movs	r1, r2
   1ee68:	0018      	movs	r0, r3
   1ee6a:	4b13      	ldr	r3, [pc, #76]	; (1eeb8 <enable_interrupts+0xac>)
   1ee6c:	4798      	blx	r3
   1ee6e:	0003      	movs	r3, r0
   1ee70:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   1ee72:	1dfb      	adds	r3, r7, #7
   1ee74:	781b      	ldrb	r3, [r3, #0]
   1ee76:	b25b      	sxtb	r3, r3
   1ee78:	2b00      	cmp	r3, #0
   1ee7a:	d113      	bne.n	1eea4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   1ee7c:	683b      	ldr	r3, [r7, #0]
   1ee7e:	2280      	movs	r2, #128	; 0x80
   1ee80:	0252      	lsls	r2, r2, #9
   1ee82:	4313      	orrs	r3, r2
   1ee84:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   1ee86:	683a      	ldr	r2, [r7, #0]
   1ee88:	1dfc      	adds	r4, r7, #7
   1ee8a:	23d0      	movs	r3, #208	; 0xd0
   1ee8c:	015b      	lsls	r3, r3, #5
   1ee8e:	0011      	movs	r1, r2
   1ee90:	0018      	movs	r0, r3
   1ee92:	4b0a      	ldr	r3, [pc, #40]	; (1eebc <enable_interrupts+0xb0>)
   1ee94:	4798      	blx	r3
   1ee96:	0003      	movs	r3, r0
   1ee98:	7023      	strb	r3, [r4, #0]
   1ee9a:	e004      	b.n	1eea6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   1ee9c:	46c0      	nop			; (mov r8, r8)
   1ee9e:	e002      	b.n	1eea6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   1eea0:	46c0      	nop			; (mov r8, r8)
   1eea2:	e000      	b.n	1eea6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   1eea4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   1eea6:	1dfb      	adds	r3, r7, #7
   1eea8:	781b      	ldrb	r3, [r3, #0]
   1eeaa:	b25b      	sxtb	r3, r3
}
   1eeac:	0018      	movs	r0, r3
   1eeae:	46bd      	mov	sp, r7
   1eeb0:	b003      	add	sp, #12
   1eeb2:	bd90      	pop	{r4, r7, pc}
   1eeb4:	00001408 	.word	0x00001408
   1eeb8:	0001f5c1 	.word	0x0001f5c1
   1eebc:	0001f5e5 	.word	0x0001f5e5

0001eec0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   1eec0:	b580      	push	{r7, lr}
   1eec2:	b082      	sub	sp, #8
   1eec4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   1eec6:	4b32      	ldr	r3, [pc, #200]	; (1ef90 <nmi_get_chipid+0xd0>)
   1eec8:	681b      	ldr	r3, [r3, #0]
   1eeca:	2b00      	cmp	r3, #0
   1eecc:	d159      	bne.n	1ef82 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   1eece:	4a30      	ldr	r2, [pc, #192]	; (1ef90 <nmi_get_chipid+0xd0>)
   1eed0:	2380      	movs	r3, #128	; 0x80
   1eed2:	015b      	lsls	r3, r3, #5
   1eed4:	0011      	movs	r1, r2
   1eed6:	0018      	movs	r0, r3
   1eed8:	4b2e      	ldr	r3, [pc, #184]	; (1ef94 <nmi_get_chipid+0xd4>)
   1eeda:	4798      	blx	r3
   1eedc:	1e03      	subs	r3, r0, #0
   1eede:	d004      	beq.n	1eeea <nmi_get_chipid+0x2a>
			chipid = 0;
   1eee0:	4b2b      	ldr	r3, [pc, #172]	; (1ef90 <nmi_get_chipid+0xd0>)
   1eee2:	2200      	movs	r2, #0
   1eee4:	601a      	str	r2, [r3, #0]
			return 0;
   1eee6:	2300      	movs	r3, #0
   1eee8:	e04d      	b.n	1ef86 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   1eeea:	1d3b      	adds	r3, r7, #4
   1eeec:	4a2a      	ldr	r2, [pc, #168]	; (1ef98 <nmi_get_chipid+0xd8>)
   1eeee:	0019      	movs	r1, r3
   1eef0:	0010      	movs	r0, r2
   1eef2:	4b28      	ldr	r3, [pc, #160]	; (1ef94 <nmi_get_chipid+0xd4>)
   1eef4:	4798      	blx	r3
   1eef6:	1e03      	subs	r3, r0, #0
   1eef8:	d004      	beq.n	1ef04 <nmi_get_chipid+0x44>
			chipid = 0;
   1eefa:	4b25      	ldr	r3, [pc, #148]	; (1ef90 <nmi_get_chipid+0xd0>)
   1eefc:	2200      	movs	r2, #0
   1eefe:	601a      	str	r2, [r3, #0]
			return 0;
   1ef00:	2300      	movs	r3, #0
   1ef02:	e040      	b.n	1ef86 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   1ef04:	4b22      	ldr	r3, [pc, #136]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef06:	681b      	ldr	r3, [r3, #0]
   1ef08:	4a24      	ldr	r2, [pc, #144]	; (1ef9c <nmi_get_chipid+0xdc>)
   1ef0a:	4293      	cmp	r3, r2
   1ef0c:	d106      	bne.n	1ef1c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   1ef0e:	687b      	ldr	r3, [r7, #4]
   1ef10:	2b01      	cmp	r3, #1
   1ef12:	d029      	beq.n	1ef68 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   1ef14:	4b1e      	ldr	r3, [pc, #120]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef16:	4a22      	ldr	r2, [pc, #136]	; (1efa0 <nmi_get_chipid+0xe0>)
   1ef18:	601a      	str	r2, [r3, #0]
   1ef1a:	e025      	b.n	1ef68 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   1ef1c:	4b1c      	ldr	r3, [pc, #112]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef1e:	681b      	ldr	r3, [r3, #0]
   1ef20:	4a20      	ldr	r2, [pc, #128]	; (1efa4 <nmi_get_chipid+0xe4>)
   1ef22:	4293      	cmp	r3, r2
   1ef24:	d10d      	bne.n	1ef42 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   1ef26:	687b      	ldr	r3, [r7, #4]
   1ef28:	2b03      	cmp	r3, #3
   1ef2a:	d01d      	beq.n	1ef68 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   1ef2c:	687b      	ldr	r3, [r7, #4]
   1ef2e:	2b04      	cmp	r3, #4
   1ef30:	d103      	bne.n	1ef3a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   1ef32:	4b17      	ldr	r3, [pc, #92]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef34:	4a1c      	ldr	r2, [pc, #112]	; (1efa8 <nmi_get_chipid+0xe8>)
   1ef36:	601a      	str	r2, [r3, #0]
   1ef38:	e016      	b.n	1ef68 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   1ef3a:	4b15      	ldr	r3, [pc, #84]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef3c:	4a1b      	ldr	r2, [pc, #108]	; (1efac <nmi_get_chipid+0xec>)
   1ef3e:	601a      	str	r2, [r3, #0]
   1ef40:	e012      	b.n	1ef68 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   1ef42:	4b13      	ldr	r3, [pc, #76]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef44:	681b      	ldr	r3, [r3, #0]
   1ef46:	4a1a      	ldr	r2, [pc, #104]	; (1efb0 <nmi_get_chipid+0xf0>)
   1ef48:	4293      	cmp	r3, r2
   1ef4a:	d10d      	bne.n	1ef68 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   1ef4c:	4a10      	ldr	r2, [pc, #64]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef4e:	23ec      	movs	r3, #236	; 0xec
   1ef50:	039b      	lsls	r3, r3, #14
   1ef52:	0011      	movs	r1, r2
   1ef54:	0018      	movs	r0, r3
   1ef56:	4b0f      	ldr	r3, [pc, #60]	; (1ef94 <nmi_get_chipid+0xd4>)
   1ef58:	4798      	blx	r3
   1ef5a:	1e03      	subs	r3, r0, #0
   1ef5c:	d004      	beq.n	1ef68 <nmi_get_chipid+0xa8>
			chipid = 0;
   1ef5e:	4b0c      	ldr	r3, [pc, #48]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef60:	2200      	movs	r2, #0
   1ef62:	601a      	str	r2, [r3, #0]
			return 0;
   1ef64:	2300      	movs	r3, #0
   1ef66:	e00e      	b.n	1ef86 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   1ef68:	4b09      	ldr	r3, [pc, #36]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef6a:	681b      	ldr	r3, [r3, #0]
   1ef6c:	4a11      	ldr	r2, [pc, #68]	; (1efb4 <nmi_get_chipid+0xf4>)
   1ef6e:	401a      	ands	r2, r3
   1ef70:	4b07      	ldr	r3, [pc, #28]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef72:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   1ef74:	4b06      	ldr	r3, [pc, #24]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef76:	681b      	ldr	r3, [r3, #0]
   1ef78:	22a0      	movs	r2, #160	; 0xa0
   1ef7a:	02d2      	lsls	r2, r2, #11
   1ef7c:	431a      	orrs	r2, r3
   1ef7e:	4b04      	ldr	r3, [pc, #16]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef80:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   1ef82:	4b03      	ldr	r3, [pc, #12]	; (1ef90 <nmi_get_chipid+0xd0>)
   1ef84:	681b      	ldr	r3, [r3, #0]
}
   1ef86:	0018      	movs	r0, r3
   1ef88:	46bd      	mov	sp, r7
   1ef8a:	b002      	add	sp, #8
   1ef8c:	bd80      	pop	{r7, pc}
   1ef8e:	46c0      	nop			; (mov r8, r8)
   1ef90:	20003d28 	.word	0x20003d28
   1ef94:	0001f5c1 	.word	0x0001f5c1
   1ef98:	000013f4 	.word	0x000013f4
   1ef9c:	001002a0 	.word	0x001002a0
   1efa0:	001002a1 	.word	0x001002a1
   1efa4:	001002b0 	.word	0x001002b0
   1efa8:	001002b1 	.word	0x001002b1
   1efac:	001002b2 	.word	0x001002b2
   1efb0:	001000f0 	.word	0x001000f0
   1efb4:	fff0ffff 	.word	0xfff0ffff

0001efb8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   1efb8:	b590      	push	{r4, r7, lr}
   1efba:	b083      	sub	sp, #12
   1efbc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1efbe:	1dfb      	adds	r3, r7, #7
   1efc0:	2200      	movs	r2, #0
   1efc2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1efc4:	1dfc      	adds	r4, r7, #7
   1efc6:	003b      	movs	r3, r7
   1efc8:	0019      	movs	r1, r3
   1efca:	2010      	movs	r0, #16
   1efcc:	4b2e      	ldr	r3, [pc, #184]	; (1f088 <chip_sleep+0xd0>)
   1efce:	4798      	blx	r3
   1efd0:	0003      	movs	r3, r0
   1efd2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   1efd4:	1dfb      	adds	r3, r7, #7
   1efd6:	781b      	ldrb	r3, [r3, #0]
   1efd8:	b25b      	sxtb	r3, r3
   1efda:	2b00      	cmp	r3, #0
   1efdc:	d145      	bne.n	1f06a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   1efde:	683b      	ldr	r3, [r7, #0]
   1efe0:	2201      	movs	r2, #1
   1efe2:	4013      	ands	r3, r2
   1efe4:	d000      	beq.n	1efe8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1efe6:	e7ed      	b.n	1efc4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   1efe8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1efea:	1dfc      	adds	r4, r7, #7
   1efec:	003b      	movs	r3, r7
   1efee:	0019      	movs	r1, r3
   1eff0:	2001      	movs	r0, #1
   1eff2:	4b25      	ldr	r3, [pc, #148]	; (1f088 <chip_sleep+0xd0>)
   1eff4:	4798      	blx	r3
   1eff6:	0003      	movs	r3, r0
   1eff8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1effa:	1dfb      	adds	r3, r7, #7
   1effc:	781b      	ldrb	r3, [r3, #0]
   1effe:	b25b      	sxtb	r3, r3
   1f000:	2b00      	cmp	r3, #0
   1f002:	d134      	bne.n	1f06e <chip_sleep+0xb6>
	if(reg & NBIT1)
   1f004:	683b      	ldr	r3, [r7, #0]
   1f006:	2202      	movs	r2, #2
   1f008:	4013      	ands	r3, r2
   1f00a:	d010      	beq.n	1f02e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   1f00c:	683b      	ldr	r3, [r7, #0]
   1f00e:	2202      	movs	r2, #2
   1f010:	4393      	bics	r3, r2
   1f012:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   1f014:	683b      	ldr	r3, [r7, #0]
   1f016:	1dfc      	adds	r4, r7, #7
   1f018:	0019      	movs	r1, r3
   1f01a:	2001      	movs	r0, #1
   1f01c:	4b1b      	ldr	r3, [pc, #108]	; (1f08c <chip_sleep+0xd4>)
   1f01e:	4798      	blx	r3
   1f020:	0003      	movs	r3, r0
   1f022:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   1f024:	1dfb      	adds	r3, r7, #7
   1f026:	781b      	ldrb	r3, [r3, #0]
   1f028:	b25b      	sxtb	r3, r3
   1f02a:	2b00      	cmp	r3, #0
   1f02c:	d121      	bne.n	1f072 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1f02e:	1dfc      	adds	r4, r7, #7
   1f030:	003b      	movs	r3, r7
   1f032:	0019      	movs	r1, r3
   1f034:	200b      	movs	r0, #11
   1f036:	4b14      	ldr	r3, [pc, #80]	; (1f088 <chip_sleep+0xd0>)
   1f038:	4798      	blx	r3
   1f03a:	0003      	movs	r3, r0
   1f03c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1f03e:	1dfb      	adds	r3, r7, #7
   1f040:	781b      	ldrb	r3, [r3, #0]
   1f042:	b25b      	sxtb	r3, r3
   1f044:	2b00      	cmp	r3, #0
   1f046:	d116      	bne.n	1f076 <chip_sleep+0xbe>
	if(reg & NBIT0)
   1f048:	683b      	ldr	r3, [r7, #0]
   1f04a:	2201      	movs	r2, #1
   1f04c:	4013      	ands	r3, r2
   1f04e:	d013      	beq.n	1f078 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   1f050:	683b      	ldr	r3, [r7, #0]
   1f052:	2201      	movs	r2, #1
   1f054:	4393      	bics	r3, r2
   1f056:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   1f058:	683b      	ldr	r3, [r7, #0]
   1f05a:	1dfc      	adds	r4, r7, #7
   1f05c:	0019      	movs	r1, r3
   1f05e:	200b      	movs	r0, #11
   1f060:	4b0a      	ldr	r3, [pc, #40]	; (1f08c <chip_sleep+0xd4>)
   1f062:	4798      	blx	r3
   1f064:	0003      	movs	r3, r0
   1f066:	7023      	strb	r3, [r4, #0]
   1f068:	e006      	b.n	1f078 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   1f06a:	46c0      	nop			; (mov r8, r8)
   1f06c:	e004      	b.n	1f078 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   1f06e:	46c0      	nop			; (mov r8, r8)
   1f070:	e002      	b.n	1f078 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   1f072:	46c0      	nop			; (mov r8, r8)
   1f074:	e000      	b.n	1f078 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   1f076:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   1f078:	1dfb      	adds	r3, r7, #7
   1f07a:	781b      	ldrb	r3, [r3, #0]
   1f07c:	b25b      	sxtb	r3, r3
}
   1f07e:	0018      	movs	r0, r3
   1f080:	46bd      	mov	sp, r7
   1f082:	b003      	add	sp, #12
   1f084:	bd90      	pop	{r4, r7, pc}
   1f086:	46c0      	nop			; (mov r8, r8)
   1f088:	0001f5c1 	.word	0x0001f5c1
   1f08c:	0001f5e5 	.word	0x0001f5e5

0001f090 <chip_wake>:
sint8 chip_wake(void)
{
   1f090:	b590      	push	{r4, r7, lr}
   1f092:	b085      	sub	sp, #20
   1f094:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1f096:	230f      	movs	r3, #15
   1f098:	18fb      	adds	r3, r7, r3
   1f09a:	2200      	movs	r2, #0
   1f09c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   1f09e:	2300      	movs	r3, #0
   1f0a0:	607b      	str	r3, [r7, #4]
   1f0a2:	2300      	movs	r3, #0
   1f0a4:	603b      	str	r3, [r7, #0]
   1f0a6:	2300      	movs	r3, #0
   1f0a8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1f0aa:	230f      	movs	r3, #15
   1f0ac:	18fc      	adds	r4, r7, r3
   1f0ae:	1d3b      	adds	r3, r7, #4
   1f0b0:	0019      	movs	r1, r3
   1f0b2:	200b      	movs	r0, #11
   1f0b4:	4b4e      	ldr	r3, [pc, #312]	; (1f1f0 <chip_wake+0x160>)
   1f0b6:	4798      	blx	r3
   1f0b8:	0003      	movs	r3, r0
   1f0ba:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1f0bc:	230f      	movs	r3, #15
   1f0be:	18fb      	adds	r3, r7, r3
   1f0c0:	781b      	ldrb	r3, [r3, #0]
   1f0c2:	b25b      	sxtb	r3, r3
   1f0c4:	2b00      	cmp	r3, #0
   1f0c6:	d000      	beq.n	1f0ca <chip_wake+0x3a>
   1f0c8:	e082      	b.n	1f1d0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   1f0ca:	687b      	ldr	r3, [r7, #4]
   1f0cc:	2201      	movs	r2, #1
   1f0ce:	4013      	ands	r3, r2
   1f0d0:	d111      	bne.n	1f0f6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   1f0d2:	687b      	ldr	r3, [r7, #4]
   1f0d4:	2201      	movs	r2, #1
   1f0d6:	4313      	orrs	r3, r2
   1f0d8:	220f      	movs	r2, #15
   1f0da:	18bc      	adds	r4, r7, r2
   1f0dc:	0019      	movs	r1, r3
   1f0de:	200b      	movs	r0, #11
   1f0e0:	4b44      	ldr	r3, [pc, #272]	; (1f1f4 <chip_wake+0x164>)
   1f0e2:	4798      	blx	r3
   1f0e4:	0003      	movs	r3, r0
   1f0e6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1f0e8:	230f      	movs	r3, #15
   1f0ea:	18fb      	adds	r3, r7, r3
   1f0ec:	781b      	ldrb	r3, [r3, #0]
   1f0ee:	b25b      	sxtb	r3, r3
   1f0f0:	2b00      	cmp	r3, #0
   1f0f2:	d000      	beq.n	1f0f6 <chip_wake+0x66>
   1f0f4:	e06e      	b.n	1f1d4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1f0f6:	230f      	movs	r3, #15
   1f0f8:	18fc      	adds	r4, r7, r3
   1f0fa:	1d3b      	adds	r3, r7, #4
   1f0fc:	0019      	movs	r1, r3
   1f0fe:	2001      	movs	r0, #1
   1f100:	4b3b      	ldr	r3, [pc, #236]	; (1f1f0 <chip_wake+0x160>)
   1f102:	4798      	blx	r3
   1f104:	0003      	movs	r3, r0
   1f106:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1f108:	230f      	movs	r3, #15
   1f10a:	18fb      	adds	r3, r7, r3
   1f10c:	781b      	ldrb	r3, [r3, #0]
   1f10e:	b25b      	sxtb	r3, r3
   1f110:	2b00      	cmp	r3, #0
   1f112:	d161      	bne.n	1f1d8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   1f114:	687b      	ldr	r3, [r7, #4]
   1f116:	2202      	movs	r2, #2
   1f118:	4013      	ands	r3, r2
   1f11a:	d110      	bne.n	1f13e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   1f11c:	687b      	ldr	r3, [r7, #4]
   1f11e:	2202      	movs	r2, #2
   1f120:	4313      	orrs	r3, r2
   1f122:	220f      	movs	r2, #15
   1f124:	18bc      	adds	r4, r7, r2
   1f126:	0019      	movs	r1, r3
   1f128:	2001      	movs	r0, #1
   1f12a:	4b32      	ldr	r3, [pc, #200]	; (1f1f4 <chip_wake+0x164>)
   1f12c:	4798      	blx	r3
   1f12e:	0003      	movs	r3, r0
   1f130:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   1f132:	230f      	movs	r3, #15
   1f134:	18fb      	adds	r3, r7, r3
   1f136:	781b      	ldrb	r3, [r3, #0]
   1f138:	b25b      	sxtb	r3, r3
   1f13a:	2b00      	cmp	r3, #0
   1f13c:	d14e      	bne.n	1f1dc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1f13e:	230f      	movs	r3, #15
   1f140:	18fc      	adds	r4, r7, r3
   1f142:	003b      	movs	r3, r7
   1f144:	0019      	movs	r1, r3
   1f146:	200f      	movs	r0, #15
   1f148:	4b29      	ldr	r3, [pc, #164]	; (1f1f0 <chip_wake+0x160>)
   1f14a:	4798      	blx	r3
   1f14c:	0003      	movs	r3, r0
   1f14e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   1f150:	230f      	movs	r3, #15
   1f152:	18fb      	adds	r3, r7, r3
   1f154:	781b      	ldrb	r3, [r3, #0]
   1f156:	b25b      	sxtb	r3, r3
   1f158:	2b00      	cmp	r3, #0
   1f15a:	d014      	beq.n	1f186 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   1f15c:	23a8      	movs	r3, #168	; 0xa8
   1f15e:	005a      	lsls	r2, r3, #1
   1f160:	4925      	ldr	r1, [pc, #148]	; (1f1f8 <chip_wake+0x168>)
   1f162:	4b26      	ldr	r3, [pc, #152]	; (1f1fc <chip_wake+0x16c>)
   1f164:	0018      	movs	r0, r3
   1f166:	4b26      	ldr	r3, [pc, #152]	; (1f200 <chip_wake+0x170>)
   1f168:	4798      	blx	r3
   1f16a:	230f      	movs	r3, #15
   1f16c:	18fb      	adds	r3, r7, r3
   1f16e:	2100      	movs	r1, #0
   1f170:	5659      	ldrsb	r1, [r3, r1]
   1f172:	683a      	ldr	r2, [r7, #0]
   1f174:	4b23      	ldr	r3, [pc, #140]	; (1f204 <chip_wake+0x174>)
   1f176:	0018      	movs	r0, r3
   1f178:	4b21      	ldr	r3, [pc, #132]	; (1f200 <chip_wake+0x170>)
   1f17a:	4798      	blx	r3
   1f17c:	4b22      	ldr	r3, [pc, #136]	; (1f208 <chip_wake+0x178>)
   1f17e:	0018      	movs	r0, r3
   1f180:	4b1f      	ldr	r3, [pc, #124]	; (1f200 <chip_wake+0x170>)
   1f182:	4798      	blx	r3
			goto _WAKE_EXIT;
   1f184:	e02b      	b.n	1f1de <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   1f186:	683b      	ldr	r3, [r7, #0]
   1f188:	2204      	movs	r2, #4
   1f18a:	4013      	ands	r3, r2
   1f18c:	d11c      	bne.n	1f1c8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   1f18e:	2002      	movs	r0, #2
   1f190:	4b1e      	ldr	r3, [pc, #120]	; (1f20c <chip_wake+0x17c>)
   1f192:	4798      	blx	r3
		trials++;
   1f194:	68bb      	ldr	r3, [r7, #8]
   1f196:	3301      	adds	r3, #1
   1f198:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   1f19a:	68bb      	ldr	r3, [r7, #8]
   1f19c:	2b04      	cmp	r3, #4
   1f19e:	d9ce      	bls.n	1f13e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   1f1a0:	23ad      	movs	r3, #173	; 0xad
   1f1a2:	005a      	lsls	r2, r3, #1
   1f1a4:	4914      	ldr	r1, [pc, #80]	; (1f1f8 <chip_wake+0x168>)
   1f1a6:	4b15      	ldr	r3, [pc, #84]	; (1f1fc <chip_wake+0x16c>)
   1f1a8:	0018      	movs	r0, r3
   1f1aa:	4b15      	ldr	r3, [pc, #84]	; (1f200 <chip_wake+0x170>)
   1f1ac:	4798      	blx	r3
   1f1ae:	4b18      	ldr	r3, [pc, #96]	; (1f210 <chip_wake+0x180>)
   1f1b0:	0018      	movs	r0, r3
   1f1b2:	4b13      	ldr	r3, [pc, #76]	; (1f200 <chip_wake+0x170>)
   1f1b4:	4798      	blx	r3
   1f1b6:	4b14      	ldr	r3, [pc, #80]	; (1f208 <chip_wake+0x178>)
   1f1b8:	0018      	movs	r0, r3
   1f1ba:	4b11      	ldr	r3, [pc, #68]	; (1f200 <chip_wake+0x170>)
   1f1bc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   1f1be:	230f      	movs	r3, #15
   1f1c0:	18fb      	adds	r3, r7, r3
   1f1c2:	22fc      	movs	r2, #252	; 0xfc
   1f1c4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   1f1c6:	e00a      	b.n	1f1de <chip_wake+0x14e>
			break;
   1f1c8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   1f1ca:	4b12      	ldr	r3, [pc, #72]	; (1f214 <chip_wake+0x184>)
   1f1cc:	4798      	blx	r3
   1f1ce:	e006      	b.n	1f1de <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1f1d0:	46c0      	nop			; (mov r8, r8)
   1f1d2:	e004      	b.n	1f1de <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1f1d4:	46c0      	nop			; (mov r8, r8)
   1f1d6:	e002      	b.n	1f1de <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1f1d8:	46c0      	nop			; (mov r8, r8)
   1f1da:	e000      	b.n	1f1de <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   1f1dc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   1f1de:	230f      	movs	r3, #15
   1f1e0:	18fb      	adds	r3, r7, r3
   1f1e2:	781b      	ldrb	r3, [r3, #0]
   1f1e4:	b25b      	sxtb	r3, r3
}
   1f1e6:	0018      	movs	r0, r3
   1f1e8:	46bd      	mov	sp, r7
   1f1ea:	b005      	add	sp, #20
   1f1ec:	bd90      	pop	{r4, r7, pc}
   1f1ee:	46c0      	nop			; (mov r8, r8)
   1f1f0:	0001f5c1 	.word	0x0001f5c1
   1f1f4:	0001f5e5 	.word	0x0001f5e5
   1f1f8:	00036e68 	.word	0x00036e68
   1f1fc:	00036ddc 	.word	0x00036ddc
   1f200:	0001a5e9 	.word	0x0001a5e9
   1f204:	00036df0 	.word	0x00036df0
   1f208:	00036e08 	.word	0x00036e08
   1f20c:	0001cc51 	.word	0x0001cc51
   1f210:	00036e0c 	.word	0x00036e0c
   1f214:	0001f581 	.word	0x0001f581

0001f218 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   1f218:	b580      	push	{r7, lr}
   1f21a:	b088      	sub	sp, #32
   1f21c:	af00      	add	r7, sp, #0
   1f21e:	0002      	movs	r2, r0
   1f220:	1dfb      	adds	r3, r7, #7
   1f222:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1f224:	2313      	movs	r3, #19
   1f226:	18fb      	adds	r3, r7, r3
   1f228:	2200      	movs	r2, #0
   1f22a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   1f22c:	2300      	movs	r3, #0
   1f22e:	61fb      	str	r3, [r7, #28]
   1f230:	2300      	movs	r3, #0
   1f232:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   1f234:	2300      	movs	r3, #0
   1f236:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   1f238:	4b4a      	ldr	r3, [pc, #296]	; (1f364 <wait_for_bootrom+0x14c>)
   1f23a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   1f23c:	2300      	movs	r3, #0
   1f23e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1f240:	4b49      	ldr	r3, [pc, #292]	; (1f368 <wait_for_bootrom+0x150>)
   1f242:	0018      	movs	r0, r3
   1f244:	4b49      	ldr	r3, [pc, #292]	; (1f36c <wait_for_bootrom+0x154>)
   1f246:	4798      	blx	r3
   1f248:	0003      	movs	r3, r0
   1f24a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   1f24c:	69fb      	ldr	r3, [r7, #28]
   1f24e:	2b00      	cmp	r3, #0
   1f250:	db03      	blt.n	1f25a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1f252:	2001      	movs	r0, #1
   1f254:	4b46      	ldr	r3, [pc, #280]	; (1f370 <wait_for_bootrom+0x158>)
   1f256:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1f258:	e7f2      	b.n	1f240 <wait_for_bootrom+0x28>
			break;
   1f25a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   1f25c:	4b45      	ldr	r3, [pc, #276]	; (1f374 <wait_for_bootrom+0x15c>)
   1f25e:	0018      	movs	r0, r3
   1f260:	4b42      	ldr	r3, [pc, #264]	; (1f36c <wait_for_bootrom+0x154>)
   1f262:	4798      	blx	r3
   1f264:	0003      	movs	r3, r0
   1f266:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   1f268:	69fb      	ldr	r3, [r7, #28]
   1f26a:	2201      	movs	r2, #1
   1f26c:	4013      	ands	r3, r2
   1f26e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   1f270:	69fb      	ldr	r3, [r7, #28]
   1f272:	2b00      	cmp	r3, #0
   1f274:	d112      	bne.n	1f29c <wait_for_bootrom+0x84>
	{
		reg = 0;
   1f276:	2300      	movs	r3, #0
   1f278:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   1f27a:	e00b      	b.n	1f294 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   1f27c:	2001      	movs	r0, #1
   1f27e:	4b3c      	ldr	r3, [pc, #240]	; (1f370 <wait_for_bootrom+0x158>)
   1f280:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   1f282:	4b3d      	ldr	r3, [pc, #244]	; (1f378 <wait_for_bootrom+0x160>)
   1f284:	0018      	movs	r0, r3
   1f286:	4b39      	ldr	r3, [pc, #228]	; (1f36c <wait_for_bootrom+0x154>)
   1f288:	4798      	blx	r3
   1f28a:	0003      	movs	r3, r0
   1f28c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   1f28e:	69bb      	ldr	r3, [r7, #24]
   1f290:	3301      	adds	r3, #1
   1f292:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   1f294:	69fb      	ldr	r3, [r7, #28]
   1f296:	4a39      	ldr	r2, [pc, #228]	; (1f37c <wait_for_bootrom+0x164>)
   1f298:	4293      	cmp	r3, r2
   1f29a:	d1ef      	bne.n	1f27c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   1f29c:	1dfb      	adds	r3, r7, #7
   1f29e:	781b      	ldrb	r3, [r3, #0]
   1f2a0:	2b02      	cmp	r3, #2
   1f2a2:	d10d      	bne.n	1f2c0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1f2a4:	4a36      	ldr	r2, [pc, #216]	; (1f380 <wait_for_bootrom+0x168>)
   1f2a6:	4b37      	ldr	r3, [pc, #220]	; (1f384 <wait_for_bootrom+0x16c>)
   1f2a8:	0011      	movs	r1, r2
   1f2aa:	0018      	movs	r0, r3
   1f2ac:	4b36      	ldr	r3, [pc, #216]	; (1f388 <wait_for_bootrom+0x170>)
   1f2ae:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   1f2b0:	2380      	movs	r3, #128	; 0x80
   1f2b2:	035b      	lsls	r3, r3, #13
   1f2b4:	4a35      	ldr	r2, [pc, #212]	; (1f38c <wait_for_bootrom+0x174>)
   1f2b6:	0019      	movs	r1, r3
   1f2b8:	0010      	movs	r0, r2
   1f2ba:	4b33      	ldr	r3, [pc, #204]	; (1f388 <wait_for_bootrom+0x170>)
   1f2bc:	4798      	blx	r3
   1f2be:	e022      	b.n	1f306 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   1f2c0:	1dfb      	adds	r3, r7, #7
   1f2c2:	781b      	ldrb	r3, [r3, #0]
   1f2c4:	2b03      	cmp	r3, #3
   1f2c6:	d10b      	bne.n	1f2e0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1f2c8:	4a2d      	ldr	r2, [pc, #180]	; (1f380 <wait_for_bootrom+0x168>)
   1f2ca:	4b2e      	ldr	r3, [pc, #184]	; (1f384 <wait_for_bootrom+0x16c>)
   1f2cc:	0011      	movs	r1, r2
   1f2ce:	0018      	movs	r0, r3
   1f2d0:	4b2d      	ldr	r3, [pc, #180]	; (1f388 <wait_for_bootrom+0x170>)
   1f2d2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   1f2d4:	4b2d      	ldr	r3, [pc, #180]	; (1f38c <wait_for_bootrom+0x174>)
   1f2d6:	2100      	movs	r1, #0
   1f2d8:	0018      	movs	r0, r3
   1f2da:	4b2b      	ldr	r3, [pc, #172]	; (1f388 <wait_for_bootrom+0x170>)
   1f2dc:	4798      	blx	r3
   1f2de:	e012      	b.n	1f306 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   1f2e0:	1dfb      	adds	r3, r7, #7
   1f2e2:	781b      	ldrb	r3, [r3, #0]
   1f2e4:	2b04      	cmp	r3, #4
   1f2e6:	d108      	bne.n	1f2fa <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   1f2e8:	2380      	movs	r3, #128	; 0x80
   1f2ea:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1f2ec:	68fb      	ldr	r3, [r7, #12]
   1f2ee:	4a27      	ldr	r2, [pc, #156]	; (1f38c <wait_for_bootrom+0x174>)
   1f2f0:	0019      	movs	r1, r3
   1f2f2:	0010      	movs	r0, r2
   1f2f4:	4b24      	ldr	r3, [pc, #144]	; (1f388 <wait_for_bootrom+0x170>)
   1f2f6:	4798      	blx	r3
   1f2f8:	e005      	b.n	1f306 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1f2fa:	68fb      	ldr	r3, [r7, #12]
   1f2fc:	4a23      	ldr	r2, [pc, #140]	; (1f38c <wait_for_bootrom+0x174>)
   1f2fe:	0019      	movs	r1, r3
   1f300:	0010      	movs	r0, r2
   1f302:	4b21      	ldr	r3, [pc, #132]	; (1f388 <wait_for_bootrom+0x170>)
   1f304:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   1f306:	4b22      	ldr	r3, [pc, #136]	; (1f390 <wait_for_bootrom+0x178>)
   1f308:	4798      	blx	r3
   1f30a:	0003      	movs	r3, r0
   1f30c:	051b      	lsls	r3, r3, #20
   1f30e:	0d1b      	lsrs	r3, r3, #20
   1f310:	4a20      	ldr	r2, [pc, #128]	; (1f394 <wait_for_bootrom+0x17c>)
   1f312:	4293      	cmp	r3, r2
   1f314:	d906      	bls.n	1f324 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   1f316:	697b      	ldr	r3, [r7, #20]
   1f318:	2202      	movs	r2, #2
   1f31a:	4313      	orrs	r3, r2
   1f31c:	0018      	movs	r0, r3
   1f31e:	4b1e      	ldr	r3, [pc, #120]	; (1f398 <wait_for_bootrom+0x180>)
   1f320:	4798      	blx	r3
   1f322:	e003      	b.n	1f32c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   1f324:	697b      	ldr	r3, [r7, #20]
   1f326:	0018      	movs	r0, r3
   1f328:	4b1b      	ldr	r3, [pc, #108]	; (1f398 <wait_for_bootrom+0x180>)
   1f32a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   1f32c:	4b1b      	ldr	r3, [pc, #108]	; (1f39c <wait_for_bootrom+0x184>)
   1f32e:	0018      	movs	r0, r3
   1f330:	4b1b      	ldr	r3, [pc, #108]	; (1f3a0 <wait_for_bootrom+0x188>)
   1f332:	4798      	blx	r3
   1f334:	68fa      	ldr	r2, [r7, #12]
   1f336:	4b1b      	ldr	r3, [pc, #108]	; (1f3a4 <wait_for_bootrom+0x18c>)
   1f338:	0011      	movs	r1, r2
   1f33a:	0018      	movs	r0, r3
   1f33c:	4b18      	ldr	r3, [pc, #96]	; (1f3a0 <wait_for_bootrom+0x188>)
   1f33e:	4798      	blx	r3
   1f340:	4b19      	ldr	r3, [pc, #100]	; (1f3a8 <wait_for_bootrom+0x190>)
   1f342:	0018      	movs	r0, r3
   1f344:	4b16      	ldr	r3, [pc, #88]	; (1f3a0 <wait_for_bootrom+0x188>)
   1f346:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   1f348:	4a18      	ldr	r2, [pc, #96]	; (1f3ac <wait_for_bootrom+0x194>)
   1f34a:	4b0b      	ldr	r3, [pc, #44]	; (1f378 <wait_for_bootrom+0x160>)
   1f34c:	0011      	movs	r1, r2
   1f34e:	0018      	movs	r0, r3
   1f350:	4b0d      	ldr	r3, [pc, #52]	; (1f388 <wait_for_bootrom+0x170>)
   1f352:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   1f354:	2313      	movs	r3, #19
   1f356:	18fb      	adds	r3, r7, r3
   1f358:	781b      	ldrb	r3, [r3, #0]
   1f35a:	b25b      	sxtb	r3, r3
}
   1f35c:	0018      	movs	r0, r3
   1f35e:	46bd      	mov	sp, r7
   1f360:	b008      	add	sp, #32
   1f362:	bd80      	pop	{r7, pc}
   1f364:	13301354 	.word	0x13301354
   1f368:	00001014 	.word	0x00001014
   1f36c:	0001f5a1 	.word	0x0001f5a1
   1f370:	0001cc51 	.word	0x0001cc51
   1f374:	000207bc 	.word	0x000207bc
   1f378:	000c000c 	.word	0x000c000c
   1f37c:	10add09e 	.word	0x10add09e
   1f380:	3c1cd57d 	.word	0x3c1cd57d
   1f384:	000207ac 	.word	0x000207ac
   1f388:	0001f5e5 	.word	0x0001f5e5
   1f38c:	0000108c 	.word	0x0000108c
   1f390:	0001eec1 	.word	0x0001eec1
   1f394:	0000039f 	.word	0x0000039f
   1f398:	0001ed91 	.word	0x0001ed91
   1f39c:	00036e28 	.word	0x00036e28
   1f3a0:	0001a5e9 	.word	0x0001a5e9
   1f3a4:	00036e34 	.word	0x00036e34
   1f3a8:	00036e08 	.word	0x00036e08
   1f3ac:	ef522f61 	.word	0xef522f61

0001f3b0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   1f3b0:	b580      	push	{r7, lr}
   1f3b2:	b088      	sub	sp, #32
   1f3b4:	af00      	add	r7, sp, #0
   1f3b6:	0002      	movs	r2, r0
   1f3b8:	1dfb      	adds	r3, r7, #7
   1f3ba:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1f3bc:	231f      	movs	r3, #31
   1f3be:	18fb      	adds	r3, r7, r3
   1f3c0:	2200      	movs	r2, #0
   1f3c2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   1f3c4:	2300      	movs	r3, #0
   1f3c6:	61bb      	str	r3, [r7, #24]
   1f3c8:	2300      	movs	r3, #0
   1f3ca:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   1f3cc:	2301      	movs	r3, #1
   1f3ce:	425b      	negs	r3, r3
   1f3d0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   1f3d2:	4b1d      	ldr	r3, [pc, #116]	; (1f448 <wait_for_firmware_start+0x98>)
   1f3d4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   1f3d6:	4b1d      	ldr	r3, [pc, #116]	; (1f44c <wait_for_firmware_start+0x9c>)
   1f3d8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   1f3da:	1dfb      	adds	r3, r7, #7
   1f3dc:	781b      	ldrb	r3, [r3, #0]
   1f3de:	2b02      	cmp	r3, #2
   1f3e0:	d003      	beq.n	1f3ea <wait_for_firmware_start+0x3a>
   1f3e2:	1dfb      	adds	r3, r7, #7
   1f3e4:	781b      	ldrb	r3, [r3, #0]
   1f3e6:	2b03      	cmp	r3, #3
   1f3e8:	d119      	bne.n	1f41e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   1f3ea:	4b19      	ldr	r3, [pc, #100]	; (1f450 <wait_for_firmware_start+0xa0>)
   1f3ec:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   1f3ee:	4b19      	ldr	r3, [pc, #100]	; (1f454 <wait_for_firmware_start+0xa4>)
   1f3f0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   1f3f2:	e014      	b.n	1f41e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1f3f4:	2002      	movs	r0, #2
   1f3f6:	4b18      	ldr	r3, [pc, #96]	; (1f458 <wait_for_firmware_start+0xa8>)
   1f3f8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   1f3fa:	68fb      	ldr	r3, [r7, #12]
   1f3fc:	0018      	movs	r0, r3
   1f3fe:	4b17      	ldr	r3, [pc, #92]	; (1f45c <wait_for_firmware_start+0xac>)
   1f400:	4798      	blx	r3
   1f402:	0003      	movs	r3, r0
   1f404:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   1f406:	697b      	ldr	r3, [r7, #20]
   1f408:	3301      	adds	r3, #1
   1f40a:	617b      	str	r3, [r7, #20]
   1f40c:	697a      	ldr	r2, [r7, #20]
   1f40e:	693b      	ldr	r3, [r7, #16]
   1f410:	429a      	cmp	r2, r3
   1f412:	d304      	bcc.n	1f41e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   1f414:	231f      	movs	r3, #31
   1f416:	18fb      	adds	r3, r7, r3
   1f418:	22fb      	movs	r2, #251	; 0xfb
   1f41a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   1f41c:	e00c      	b.n	1f438 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   1f41e:	68ba      	ldr	r2, [r7, #8]
   1f420:	69bb      	ldr	r3, [r7, #24]
   1f422:	429a      	cmp	r2, r3
   1f424:	d1e6      	bne.n	1f3f4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   1f426:	68bb      	ldr	r3, [r7, #8]
   1f428:	4a08      	ldr	r2, [pc, #32]	; (1f44c <wait_for_firmware_start+0x9c>)
   1f42a:	4293      	cmp	r3, r2
   1f42c:	d104      	bne.n	1f438 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   1f42e:	4b06      	ldr	r3, [pc, #24]	; (1f448 <wait_for_firmware_start+0x98>)
   1f430:	2100      	movs	r1, #0
   1f432:	0018      	movs	r0, r3
   1f434:	4b0a      	ldr	r3, [pc, #40]	; (1f460 <wait_for_firmware_start+0xb0>)
   1f436:	4798      	blx	r3
	}
ERR:
	return ret;
   1f438:	231f      	movs	r3, #31
   1f43a:	18fb      	adds	r3, r7, r3
   1f43c:	781b      	ldrb	r3, [r3, #0]
   1f43e:	b25b      	sxtb	r3, r3
}
   1f440:	0018      	movs	r0, r3
   1f442:	46bd      	mov	sp, r7
   1f444:	b008      	add	sp, #32
   1f446:	bd80      	pop	{r7, pc}
   1f448:	0000108c 	.word	0x0000108c
   1f44c:	02532636 	.word	0x02532636
   1f450:	000207ac 	.word	0x000207ac
   1f454:	d75dc1c3 	.word	0xd75dc1c3
   1f458:	0001cc51 	.word	0x0001cc51
   1f45c:	0001f5a1 	.word	0x0001f5a1
   1f460:	0001f5e5 	.word	0x0001f5e5

0001f464 <chip_deinit>:

sint8 chip_deinit(void)
{
   1f464:	b590      	push	{r4, r7, lr}
   1f466:	b083      	sub	sp, #12
   1f468:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   1f46a:	2300      	movs	r3, #0
   1f46c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   1f46e:	1dfc      	adds	r4, r7, #7
   1f470:	003a      	movs	r2, r7
   1f472:	23a0      	movs	r3, #160	; 0xa0
   1f474:	015b      	lsls	r3, r3, #5
   1f476:	0011      	movs	r1, r2
   1f478:	0018      	movs	r0, r3
   1f47a:	4b20      	ldr	r3, [pc, #128]	; (1f4fc <chip_deinit+0x98>)
   1f47c:	4798      	blx	r3
   1f47e:	0003      	movs	r3, r0
   1f480:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   1f482:	1dfb      	adds	r3, r7, #7
   1f484:	781b      	ldrb	r3, [r3, #0]
   1f486:	b25b      	sxtb	r3, r3
   1f488:	2b00      	cmp	r3, #0
   1f48a:	d00e      	beq.n	1f4aa <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   1f48c:	4a1c      	ldr	r2, [pc, #112]	; (1f500 <chip_deinit+0x9c>)
   1f48e:	491d      	ldr	r1, [pc, #116]	; (1f504 <chip_deinit+0xa0>)
   1f490:	4b1d      	ldr	r3, [pc, #116]	; (1f508 <chip_deinit+0xa4>)
   1f492:	0018      	movs	r0, r3
   1f494:	4b1d      	ldr	r3, [pc, #116]	; (1f50c <chip_deinit+0xa8>)
   1f496:	4798      	blx	r3
   1f498:	4b1d      	ldr	r3, [pc, #116]	; (1f510 <chip_deinit+0xac>)
   1f49a:	0018      	movs	r0, r3
   1f49c:	4b1b      	ldr	r3, [pc, #108]	; (1f50c <chip_deinit+0xa8>)
   1f49e:	4798      	blx	r3
   1f4a0:	4b1c      	ldr	r3, [pc, #112]	; (1f514 <chip_deinit+0xb0>)
   1f4a2:	0018      	movs	r0, r3
   1f4a4:	4b19      	ldr	r3, [pc, #100]	; (1f50c <chip_deinit+0xa8>)
   1f4a6:	4798      	blx	r3
		goto ERR1;
   1f4a8:	e021      	b.n	1f4ee <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   1f4aa:	683b      	ldr	r3, [r7, #0]
   1f4ac:	4a1a      	ldr	r2, [pc, #104]	; (1f518 <chip_deinit+0xb4>)
   1f4ae:	4013      	ands	r3, r2
   1f4b0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   1f4b2:	683a      	ldr	r2, [r7, #0]
   1f4b4:	1dfc      	adds	r4, r7, #7
   1f4b6:	23a0      	movs	r3, #160	; 0xa0
   1f4b8:	015b      	lsls	r3, r3, #5
   1f4ba:	0011      	movs	r1, r2
   1f4bc:	0018      	movs	r0, r3
   1f4be:	4b17      	ldr	r3, [pc, #92]	; (1f51c <chip_deinit+0xb8>)
   1f4c0:	4798      	blx	r3
   1f4c2:	0003      	movs	r3, r0
   1f4c4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   1f4c6:	1dfb      	adds	r3, r7, #7
   1f4c8:	781b      	ldrb	r3, [r3, #0]
   1f4ca:	b25b      	sxtb	r3, r3
   1f4cc:	2b00      	cmp	r3, #0
   1f4ce:	d00e      	beq.n	1f4ee <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   1f4d0:	4a13      	ldr	r2, [pc, #76]	; (1f520 <chip_deinit+0xbc>)
   1f4d2:	490c      	ldr	r1, [pc, #48]	; (1f504 <chip_deinit+0xa0>)
   1f4d4:	4b0c      	ldr	r3, [pc, #48]	; (1f508 <chip_deinit+0xa4>)
   1f4d6:	0018      	movs	r0, r3
   1f4d8:	4b0c      	ldr	r3, [pc, #48]	; (1f50c <chip_deinit+0xa8>)
   1f4da:	4798      	blx	r3
   1f4dc:	4b0c      	ldr	r3, [pc, #48]	; (1f510 <chip_deinit+0xac>)
   1f4de:	0018      	movs	r0, r3
   1f4e0:	4b0a      	ldr	r3, [pc, #40]	; (1f50c <chip_deinit+0xa8>)
   1f4e2:	4798      	blx	r3
   1f4e4:	4b0b      	ldr	r3, [pc, #44]	; (1f514 <chip_deinit+0xb0>)
   1f4e6:	0018      	movs	r0, r3
   1f4e8:	4b08      	ldr	r3, [pc, #32]	; (1f50c <chip_deinit+0xa8>)
   1f4ea:	4798      	blx	r3
		goto ERR1;
   1f4ec:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1f4ee:	1dfb      	adds	r3, r7, #7
   1f4f0:	781b      	ldrb	r3, [r3, #0]
   1f4f2:	b25b      	sxtb	r3, r3
}
   1f4f4:	0018      	movs	r0, r3
   1f4f6:	46bd      	mov	sp, r7
   1f4f8:	b003      	add	sp, #12
   1f4fa:	bd90      	pop	{r4, r7, pc}
   1f4fc:	0001f5c1 	.word	0x0001f5c1
   1f500:	00000201 	.word	0x00000201
   1f504:	00036e74 	.word	0x00036e74
   1f508:	00036ddc 	.word	0x00036ddc
   1f50c:	0001a5e9 	.word	0x0001a5e9
   1f510:	00036e4c 	.word	0x00036e4c
   1f514:	00036e08 	.word	0x00036e08
   1f518:	fffffbff 	.word	0xfffffbff
   1f51c:	0001f5e5 	.word	0x0001f5e5
   1f520:	00000207 	.word	0x00000207

0001f524 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   1f524:	b590      	push	{r4, r7, lr}
   1f526:	b085      	sub	sp, #20
   1f528:	af00      	add	r7, sp, #0
   1f52a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   1f52c:	230f      	movs	r3, #15
   1f52e:	18fb      	adds	r3, r7, r3
   1f530:	2200      	movs	r2, #0
   1f532:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   1f534:	230f      	movs	r3, #15
   1f536:	18fc      	adds	r4, r7, r3
   1f538:	687b      	ldr	r3, [r7, #4]
   1f53a:	0018      	movs	r0, r3
   1f53c:	4b05      	ldr	r3, [pc, #20]	; (1f554 <nm_bus_iface_init+0x30>)
   1f53e:	4798      	blx	r3
   1f540:	0003      	movs	r3, r0
   1f542:	7023      	strb	r3, [r4, #0]
	return ret;
   1f544:	230f      	movs	r3, #15
   1f546:	18fb      	adds	r3, r7, r3
   1f548:	781b      	ldrb	r3, [r3, #0]
   1f54a:	b25b      	sxtb	r3, r3
}
   1f54c:	0018      	movs	r0, r3
   1f54e:	46bd      	mov	sp, r7
   1f550:	b005      	add	sp, #20
   1f552:	bd90      	pop	{r4, r7, pc}
   1f554:	0001d30d 	.word	0x0001d30d

0001f558 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   1f558:	b590      	push	{r4, r7, lr}
   1f55a:	b083      	sub	sp, #12
   1f55c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1f55e:	1dfb      	adds	r3, r7, #7
   1f560:	2200      	movs	r2, #0
   1f562:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   1f564:	1dfc      	adds	r4, r7, #7
   1f566:	4b05      	ldr	r3, [pc, #20]	; (1f57c <nm_bus_iface_deinit+0x24>)
   1f568:	4798      	blx	r3
   1f56a:	0003      	movs	r3, r0
   1f56c:	7023      	strb	r3, [r4, #0]

	return ret;
   1f56e:	1dfb      	adds	r3, r7, #7
   1f570:	781b      	ldrb	r3, [r3, #0]
   1f572:	b25b      	sxtb	r3, r3
}
   1f574:	0018      	movs	r0, r3
   1f576:	46bd      	mov	sp, r7
   1f578:	b003      	add	sp, #12
   1f57a:	bd90      	pop	{r4, r7, pc}
   1f57c:	0001d485 	.word	0x0001d485

0001f580 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   1f580:	b580      	push	{r7, lr}
   1f582:	b082      	sub	sp, #8
   1f584:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1f586:	1dfb      	adds	r3, r7, #7
   1f588:	2200      	movs	r2, #0
   1f58a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   1f58c:	4b03      	ldr	r3, [pc, #12]	; (1f59c <nm_bus_reset+0x1c>)
   1f58e:	4798      	blx	r3
   1f590:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   1f592:	0018      	movs	r0, r3
   1f594:	46bd      	mov	sp, r7
   1f596:	b002      	add	sp, #8
   1f598:	bd80      	pop	{r7, pc}
   1f59a:	46c0      	nop			; (mov r8, r8)
   1f59c:	000213ad 	.word	0x000213ad

0001f5a0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   1f5a0:	b580      	push	{r7, lr}
   1f5a2:	b082      	sub	sp, #8
   1f5a4:	af00      	add	r7, sp, #0
   1f5a6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   1f5a8:	687b      	ldr	r3, [r7, #4]
   1f5aa:	0018      	movs	r0, r3
   1f5ac:	4b03      	ldr	r3, [pc, #12]	; (1f5bc <nm_read_reg+0x1c>)
   1f5ae:	4798      	blx	r3
   1f5b0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   1f5b2:	0018      	movs	r0, r3
   1f5b4:	46bd      	mov	sp, r7
   1f5b6:	b002      	add	sp, #8
   1f5b8:	bd80      	pop	{r7, pc}
   1f5ba:	46c0      	nop			; (mov r8, r8)
   1f5bc:	00021541 	.word	0x00021541

0001f5c0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1f5c0:	b580      	push	{r7, lr}
   1f5c2:	b082      	sub	sp, #8
   1f5c4:	af00      	add	r7, sp, #0
   1f5c6:	6078      	str	r0, [r7, #4]
   1f5c8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   1f5ca:	683a      	ldr	r2, [r7, #0]
   1f5cc:	687b      	ldr	r3, [r7, #4]
   1f5ce:	0011      	movs	r1, r2
   1f5d0:	0018      	movs	r0, r3
   1f5d2:	4b03      	ldr	r3, [pc, #12]	; (1f5e0 <nm_read_reg_with_ret+0x20>)
   1f5d4:	4798      	blx	r3
   1f5d6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   1f5d8:	0018      	movs	r0, r3
   1f5da:	46bd      	mov	sp, r7
   1f5dc:	b002      	add	sp, #8
   1f5de:	bd80      	pop	{r7, pc}
   1f5e0:	00021565 	.word	0x00021565

0001f5e4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1f5e4:	b580      	push	{r7, lr}
   1f5e6:	b082      	sub	sp, #8
   1f5e8:	af00      	add	r7, sp, #0
   1f5ea:	6078      	str	r0, [r7, #4]
   1f5ec:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   1f5ee:	683a      	ldr	r2, [r7, #0]
   1f5f0:	687b      	ldr	r3, [r7, #4]
   1f5f2:	0011      	movs	r1, r2
   1f5f4:	0018      	movs	r0, r3
   1f5f6:	4b03      	ldr	r3, [pc, #12]	; (1f604 <nm_write_reg+0x20>)
   1f5f8:	4798      	blx	r3
   1f5fa:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   1f5fc:	0018      	movs	r0, r3
   1f5fe:	46bd      	mov	sp, r7
   1f600:	b002      	add	sp, #8
   1f602:	bd80      	pop	{r7, pc}
   1f604:	000215b5 	.word	0x000215b5

0001f608 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1f608:	b580      	push	{r7, lr}
   1f60a:	b084      	sub	sp, #16
   1f60c:	af00      	add	r7, sp, #0
   1f60e:	60f8      	str	r0, [r7, #12]
   1f610:	60b9      	str	r1, [r7, #8]
   1f612:	1dbb      	adds	r3, r7, #6
   1f614:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1f616:	1dbb      	adds	r3, r7, #6
   1f618:	881a      	ldrh	r2, [r3, #0]
   1f61a:	68b9      	ldr	r1, [r7, #8]
   1f61c:	68fb      	ldr	r3, [r7, #12]
   1f61e:	0018      	movs	r0, r3
   1f620:	4b03      	ldr	r3, [pc, #12]	; (1f630 <p_nm_read_block+0x28>)
   1f622:	4798      	blx	r3
   1f624:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   1f626:	0018      	movs	r0, r3
   1f628:	46bd      	mov	sp, r7
   1f62a:	b004      	add	sp, #16
   1f62c:	bd80      	pop	{r7, pc}
   1f62e:	46c0      	nop			; (mov r8, r8)
   1f630:	00021605 	.word	0x00021605

0001f634 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1f634:	b580      	push	{r7, lr}
   1f636:	b086      	sub	sp, #24
   1f638:	af00      	add	r7, sp, #0
   1f63a:	60f8      	str	r0, [r7, #12]
   1f63c:	60b9      	str	r1, [r7, #8]
   1f63e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1f640:	4b2d      	ldr	r3, [pc, #180]	; (1f6f8 <nm_read_block+0xc4>)
   1f642:	881a      	ldrh	r2, [r3, #0]
   1f644:	2310      	movs	r3, #16
   1f646:	18fb      	adds	r3, r7, r3
   1f648:	3a08      	subs	r2, #8
   1f64a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   1f64c:	2300      	movs	r3, #0
   1f64e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   1f650:	2313      	movs	r3, #19
   1f652:	18fb      	adds	r3, r7, r3
   1f654:	2200      	movs	r2, #0
   1f656:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1f658:	2310      	movs	r3, #16
   1f65a:	18fb      	adds	r3, r7, r3
   1f65c:	881a      	ldrh	r2, [r3, #0]
   1f65e:	687b      	ldr	r3, [r7, #4]
   1f660:	429a      	cmp	r2, r3
   1f662:	d313      	bcc.n	1f68c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1f664:	68ba      	ldr	r2, [r7, #8]
   1f666:	697b      	ldr	r3, [r7, #20]
   1f668:	18d1      	adds	r1, r2, r3
   1f66a:	687b      	ldr	r3, [r7, #4]
   1f66c:	b29a      	uxth	r2, r3
   1f66e:	68fb      	ldr	r3, [r7, #12]
   1f670:	0018      	movs	r0, r3
   1f672:	4b22      	ldr	r3, [pc, #136]	; (1f6fc <nm_read_block+0xc8>)
   1f674:	4798      	blx	r3
   1f676:	0003      	movs	r3, r0
   1f678:	b2da      	uxtb	r2, r3
   1f67a:	2313      	movs	r3, #19
   1f67c:	18fb      	adds	r3, r7, r3
   1f67e:	781b      	ldrb	r3, [r3, #0]
   1f680:	18d3      	adds	r3, r2, r3
   1f682:	b2da      	uxtb	r2, r3
   1f684:	2313      	movs	r3, #19
   1f686:	18fb      	adds	r3, r7, r3
   1f688:	701a      	strb	r2, [r3, #0]
			break;
   1f68a:	e02d      	b.n	1f6e8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   1f68c:	68ba      	ldr	r2, [r7, #8]
   1f68e:	697b      	ldr	r3, [r7, #20]
   1f690:	18d1      	adds	r1, r2, r3
   1f692:	2310      	movs	r3, #16
   1f694:	18fb      	adds	r3, r7, r3
   1f696:	881a      	ldrh	r2, [r3, #0]
   1f698:	68fb      	ldr	r3, [r7, #12]
   1f69a:	0018      	movs	r0, r3
   1f69c:	4b17      	ldr	r3, [pc, #92]	; (1f6fc <nm_read_block+0xc8>)
   1f69e:	4798      	blx	r3
   1f6a0:	0003      	movs	r3, r0
   1f6a2:	b2da      	uxtb	r2, r3
   1f6a4:	2313      	movs	r3, #19
   1f6a6:	18fb      	adds	r3, r7, r3
   1f6a8:	781b      	ldrb	r3, [r3, #0]
   1f6aa:	18d3      	adds	r3, r2, r3
   1f6ac:	b2da      	uxtb	r2, r3
   1f6ae:	2313      	movs	r3, #19
   1f6b0:	18fb      	adds	r3, r7, r3
   1f6b2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   1f6b4:	2313      	movs	r3, #19
   1f6b6:	18fb      	adds	r3, r7, r3
   1f6b8:	781b      	ldrb	r3, [r3, #0]
   1f6ba:	b25b      	sxtb	r3, r3
   1f6bc:	2b00      	cmp	r3, #0
   1f6be:	d112      	bne.n	1f6e6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   1f6c0:	2310      	movs	r3, #16
   1f6c2:	18fb      	adds	r3, r7, r3
   1f6c4:	881b      	ldrh	r3, [r3, #0]
   1f6c6:	687a      	ldr	r2, [r7, #4]
   1f6c8:	1ad3      	subs	r3, r2, r3
   1f6ca:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   1f6cc:	2310      	movs	r3, #16
   1f6ce:	18fb      	adds	r3, r7, r3
   1f6d0:	881b      	ldrh	r3, [r3, #0]
   1f6d2:	697a      	ldr	r2, [r7, #20]
   1f6d4:	18d3      	adds	r3, r2, r3
   1f6d6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   1f6d8:	2310      	movs	r3, #16
   1f6da:	18fb      	adds	r3, r7, r3
   1f6dc:	881b      	ldrh	r3, [r3, #0]
   1f6de:	68fa      	ldr	r2, [r7, #12]
   1f6e0:	18d3      	adds	r3, r2, r3
   1f6e2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   1f6e4:	e7b8      	b.n	1f658 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   1f6e6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   1f6e8:	2313      	movs	r3, #19
   1f6ea:	18fb      	adds	r3, r7, r3
   1f6ec:	781b      	ldrb	r3, [r3, #0]
   1f6ee:	b25b      	sxtb	r3, r3
}
   1f6f0:	0018      	movs	r0, r3
   1f6f2:	46bd      	mov	sp, r7
   1f6f4:	b006      	add	sp, #24
   1f6f6:	bd80      	pop	{r7, pc}
   1f6f8:	200000c8 	.word	0x200000c8
   1f6fc:	0001f609 	.word	0x0001f609

0001f700 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1f700:	b580      	push	{r7, lr}
   1f702:	b084      	sub	sp, #16
   1f704:	af00      	add	r7, sp, #0
   1f706:	60f8      	str	r0, [r7, #12]
   1f708:	60b9      	str	r1, [r7, #8]
   1f70a:	1dbb      	adds	r3, r7, #6
   1f70c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1f70e:	1dbb      	adds	r3, r7, #6
   1f710:	881a      	ldrh	r2, [r3, #0]
   1f712:	68b9      	ldr	r1, [r7, #8]
   1f714:	68fb      	ldr	r3, [r7, #12]
   1f716:	0018      	movs	r0, r3
   1f718:	4b03      	ldr	r3, [pc, #12]	; (1f728 <p_nm_write_block+0x28>)
   1f71a:	4798      	blx	r3
   1f71c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   1f71e:	0018      	movs	r0, r3
   1f720:	46bd      	mov	sp, r7
   1f722:	b004      	add	sp, #16
   1f724:	bd80      	pop	{r7, pc}
   1f726:	46c0      	nop			; (mov r8, r8)
   1f728:	0002165d 	.word	0x0002165d

0001f72c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1f72c:	b580      	push	{r7, lr}
   1f72e:	b086      	sub	sp, #24
   1f730:	af00      	add	r7, sp, #0
   1f732:	60f8      	str	r0, [r7, #12]
   1f734:	60b9      	str	r1, [r7, #8]
   1f736:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1f738:	4b2d      	ldr	r3, [pc, #180]	; (1f7f0 <nm_write_block+0xc4>)
   1f73a:	881a      	ldrh	r2, [r3, #0]
   1f73c:	2310      	movs	r3, #16
   1f73e:	18fb      	adds	r3, r7, r3
   1f740:	3a08      	subs	r2, #8
   1f742:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   1f744:	2300      	movs	r3, #0
   1f746:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   1f748:	2313      	movs	r3, #19
   1f74a:	18fb      	adds	r3, r7, r3
   1f74c:	2200      	movs	r2, #0
   1f74e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1f750:	2310      	movs	r3, #16
   1f752:	18fb      	adds	r3, r7, r3
   1f754:	881a      	ldrh	r2, [r3, #0]
   1f756:	687b      	ldr	r3, [r7, #4]
   1f758:	429a      	cmp	r2, r3
   1f75a:	d313      	bcc.n	1f784 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1f75c:	68ba      	ldr	r2, [r7, #8]
   1f75e:	697b      	ldr	r3, [r7, #20]
   1f760:	18d1      	adds	r1, r2, r3
   1f762:	687b      	ldr	r3, [r7, #4]
   1f764:	b29a      	uxth	r2, r3
   1f766:	68fb      	ldr	r3, [r7, #12]
   1f768:	0018      	movs	r0, r3
   1f76a:	4b22      	ldr	r3, [pc, #136]	; (1f7f4 <nm_write_block+0xc8>)
   1f76c:	4798      	blx	r3
   1f76e:	0003      	movs	r3, r0
   1f770:	b2da      	uxtb	r2, r3
   1f772:	2313      	movs	r3, #19
   1f774:	18fb      	adds	r3, r7, r3
   1f776:	781b      	ldrb	r3, [r3, #0]
   1f778:	18d3      	adds	r3, r2, r3
   1f77a:	b2da      	uxtb	r2, r3
   1f77c:	2313      	movs	r3, #19
   1f77e:	18fb      	adds	r3, r7, r3
   1f780:	701a      	strb	r2, [r3, #0]
			break;
   1f782:	e02d      	b.n	1f7e0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   1f784:	68ba      	ldr	r2, [r7, #8]
   1f786:	697b      	ldr	r3, [r7, #20]
   1f788:	18d1      	adds	r1, r2, r3
   1f78a:	2310      	movs	r3, #16
   1f78c:	18fb      	adds	r3, r7, r3
   1f78e:	881a      	ldrh	r2, [r3, #0]
   1f790:	68fb      	ldr	r3, [r7, #12]
   1f792:	0018      	movs	r0, r3
   1f794:	4b17      	ldr	r3, [pc, #92]	; (1f7f4 <nm_write_block+0xc8>)
   1f796:	4798      	blx	r3
   1f798:	0003      	movs	r3, r0
   1f79a:	b2da      	uxtb	r2, r3
   1f79c:	2313      	movs	r3, #19
   1f79e:	18fb      	adds	r3, r7, r3
   1f7a0:	781b      	ldrb	r3, [r3, #0]
   1f7a2:	18d3      	adds	r3, r2, r3
   1f7a4:	b2da      	uxtb	r2, r3
   1f7a6:	2313      	movs	r3, #19
   1f7a8:	18fb      	adds	r3, r7, r3
   1f7aa:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   1f7ac:	2313      	movs	r3, #19
   1f7ae:	18fb      	adds	r3, r7, r3
   1f7b0:	781b      	ldrb	r3, [r3, #0]
   1f7b2:	b25b      	sxtb	r3, r3
   1f7b4:	2b00      	cmp	r3, #0
   1f7b6:	d112      	bne.n	1f7de <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   1f7b8:	2310      	movs	r3, #16
   1f7ba:	18fb      	adds	r3, r7, r3
   1f7bc:	881b      	ldrh	r3, [r3, #0]
   1f7be:	687a      	ldr	r2, [r7, #4]
   1f7c0:	1ad3      	subs	r3, r2, r3
   1f7c2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   1f7c4:	2310      	movs	r3, #16
   1f7c6:	18fb      	adds	r3, r7, r3
   1f7c8:	881b      	ldrh	r3, [r3, #0]
   1f7ca:	697a      	ldr	r2, [r7, #20]
   1f7cc:	18d3      	adds	r3, r2, r3
   1f7ce:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   1f7d0:	2310      	movs	r3, #16
   1f7d2:	18fb      	adds	r3, r7, r3
   1f7d4:	881b      	ldrh	r3, [r3, #0]
   1f7d6:	68fa      	ldr	r2, [r7, #12]
   1f7d8:	18d3      	adds	r3, r2, r3
   1f7da:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   1f7dc:	e7b8      	b.n	1f750 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   1f7de:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   1f7e0:	2313      	movs	r3, #19
   1f7e2:	18fb      	adds	r3, r7, r3
   1f7e4:	781b      	ldrb	r3, [r3, #0]
   1f7e6:	b25b      	sxtb	r3, r3
}
   1f7e8:	0018      	movs	r0, r3
   1f7ea:	46bd      	mov	sp, r7
   1f7ec:	b006      	add	sp, #24
   1f7ee:	bd80      	pop	{r7, pc}
   1f7f0:	200000c8 	.word	0x200000c8
   1f7f4:	0001f701 	.word	0x0001f701

0001f7f8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   1f7f8:	b590      	push	{r4, r7, lr}
   1f7fa:	b089      	sub	sp, #36	; 0x24
   1f7fc:	af00      	add	r7, sp, #0
   1f7fe:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   1f800:	2300      	movs	r3, #0
   1f802:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   1f804:	231f      	movs	r3, #31
   1f806:	18fb      	adds	r3, r7, r3
   1f808:	2200      	movs	r2, #0
   1f80a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   1f80c:	230c      	movs	r3, #12
   1f80e:	18fb      	adds	r3, r7, r3
   1f810:	0018      	movs	r0, r3
   1f812:	2308      	movs	r3, #8
   1f814:	001a      	movs	r2, r3
   1f816:	2100      	movs	r1, #0
   1f818:	4b64      	ldr	r3, [pc, #400]	; (1f9ac <nm_get_firmware_full_info+0x1b4>)
   1f81a:	4798      	blx	r3
	if (pstrRev != NULL)
   1f81c:	687b      	ldr	r3, [r7, #4]
   1f81e:	2b00      	cmp	r3, #0
   1f820:	d100      	bne.n	1f824 <nm_get_firmware_full_info+0x2c>
   1f822:	e0ba      	b.n	1f99a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   1f824:	687b      	ldr	r3, [r7, #4]
   1f826:	2228      	movs	r2, #40	; 0x28
   1f828:	2100      	movs	r1, #0
   1f82a:	0018      	movs	r0, r3
   1f82c:	4b60      	ldr	r3, [pc, #384]	; (1f9b0 <nm_get_firmware_full_info+0x1b8>)
   1f82e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   1f830:	231f      	movs	r3, #31
   1f832:	18fc      	adds	r4, r7, r3
   1f834:	2314      	movs	r3, #20
   1f836:	18fb      	adds	r3, r7, r3
   1f838:	4a5e      	ldr	r2, [pc, #376]	; (1f9b4 <nm_get_firmware_full_info+0x1bc>)
   1f83a:	0019      	movs	r1, r3
   1f83c:	0010      	movs	r0, r2
   1f83e:	4b5e      	ldr	r3, [pc, #376]	; (1f9b8 <nm_get_firmware_full_info+0x1c0>)
   1f840:	4798      	blx	r3
   1f842:	0003      	movs	r3, r0
   1f844:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   1f846:	231f      	movs	r3, #31
   1f848:	18fb      	adds	r3, r7, r3
   1f84a:	781b      	ldrb	r3, [r3, #0]
   1f84c:	b25b      	sxtb	r3, r3
   1f84e:	2b00      	cmp	r3, #0
   1f850:	d000      	beq.n	1f854 <nm_get_firmware_full_info+0x5c>
   1f852:	e0a2      	b.n	1f99a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   1f854:	697b      	ldr	r3, [r7, #20]
   1f856:	2b00      	cmp	r3, #0
   1f858:	d100      	bne.n	1f85c <nm_get_firmware_full_info+0x64>
   1f85a:	e09a      	b.n	1f992 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   1f85c:	697b      	ldr	r3, [r7, #20]
   1f85e:	22c0      	movs	r2, #192	; 0xc0
   1f860:	0292      	lsls	r2, r2, #10
   1f862:	4313      	orrs	r3, r2
   1f864:	221f      	movs	r2, #31
   1f866:	18bc      	adds	r4, r7, r2
   1f868:	220c      	movs	r2, #12
   1f86a:	18b9      	adds	r1, r7, r2
   1f86c:	2208      	movs	r2, #8
   1f86e:	0018      	movs	r0, r3
   1f870:	4b52      	ldr	r3, [pc, #328]	; (1f9bc <nm_get_firmware_full_info+0x1c4>)
   1f872:	4798      	blx	r3
   1f874:	0003      	movs	r3, r0
   1f876:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   1f878:	231f      	movs	r3, #31
   1f87a:	18fb      	adds	r3, r7, r3
   1f87c:	781b      	ldrb	r3, [r3, #0]
   1f87e:	b25b      	sxtb	r3, r3
   1f880:	2b00      	cmp	r3, #0
   1f882:	d000      	beq.n	1f886 <nm_get_firmware_full_info+0x8e>
   1f884:	e089      	b.n	1f99a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   1f886:	230c      	movs	r3, #12
   1f888:	18fb      	adds	r3, r7, r3
   1f88a:	685b      	ldr	r3, [r3, #4]
   1f88c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   1f88e:	697b      	ldr	r3, [r7, #20]
   1f890:	041b      	lsls	r3, r3, #16
   1f892:	0c1b      	lsrs	r3, r3, #16
   1f894:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   1f896:	697b      	ldr	r3, [r7, #20]
   1f898:	2b00      	cmp	r3, #0
   1f89a:	d100      	bne.n	1f89e <nm_get_firmware_full_info+0xa6>
   1f89c:	e074      	b.n	1f988 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   1f89e:	697b      	ldr	r3, [r7, #20]
   1f8a0:	22c0      	movs	r2, #192	; 0xc0
   1f8a2:	0292      	lsls	r2, r2, #10
   1f8a4:	4313      	orrs	r3, r2
   1f8a6:	221f      	movs	r2, #31
   1f8a8:	18bc      	adds	r4, r7, r2
   1f8aa:	6879      	ldr	r1, [r7, #4]
   1f8ac:	2228      	movs	r2, #40	; 0x28
   1f8ae:	0018      	movs	r0, r3
   1f8b0:	4b42      	ldr	r3, [pc, #264]	; (1f9bc <nm_get_firmware_full_info+0x1c4>)
   1f8b2:	4798      	blx	r3
   1f8b4:	0003      	movs	r3, r0
   1f8b6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   1f8b8:	231f      	movs	r3, #31
   1f8ba:	18fb      	adds	r3, r7, r3
   1f8bc:	781b      	ldrb	r3, [r3, #0]
   1f8be:	b25b      	sxtb	r3, r3
   1f8c0:	2b00      	cmp	r3, #0
   1f8c2:	d16a      	bne.n	1f99a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   1f8c4:	687b      	ldr	r3, [r7, #4]
   1f8c6:	791b      	ldrb	r3, [r3, #4]
   1f8c8:	021b      	lsls	r3, r3, #8
   1f8ca:	b21a      	sxth	r2, r3
   1f8cc:	687b      	ldr	r3, [r7, #4]
   1f8ce:	795b      	ldrb	r3, [r3, #5]
   1f8d0:	011b      	lsls	r3, r3, #4
   1f8d2:	b21b      	sxth	r3, r3
   1f8d4:	21ff      	movs	r1, #255	; 0xff
   1f8d6:	400b      	ands	r3, r1
   1f8d8:	b21b      	sxth	r3, r3
   1f8da:	4313      	orrs	r3, r2
   1f8dc:	b21a      	sxth	r2, r3
   1f8de:	687b      	ldr	r3, [r7, #4]
   1f8e0:	799b      	ldrb	r3, [r3, #6]
   1f8e2:	b21b      	sxth	r3, r3
   1f8e4:	210f      	movs	r1, #15
   1f8e6:	400b      	ands	r3, r1
   1f8e8:	b21b      	sxth	r3, r3
   1f8ea:	4313      	orrs	r3, r2
   1f8ec:	b21a      	sxth	r2, r3
   1f8ee:	231c      	movs	r3, #28
   1f8f0:	18fb      	adds	r3, r7, r3
   1f8f2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1f8f4:	231a      	movs	r3, #26
   1f8f6:	18fb      	adds	r3, r7, r3
   1f8f8:	4a31      	ldr	r2, [pc, #196]	; (1f9c0 <nm_get_firmware_full_info+0x1c8>)
   1f8fa:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   1f8fc:	687b      	ldr	r3, [r7, #4]
   1f8fe:	79db      	ldrb	r3, [r3, #7]
   1f900:	021b      	lsls	r3, r3, #8
   1f902:	b21a      	sxth	r2, r3
   1f904:	687b      	ldr	r3, [r7, #4]
   1f906:	7a1b      	ldrb	r3, [r3, #8]
   1f908:	011b      	lsls	r3, r3, #4
   1f90a:	b21b      	sxth	r3, r3
   1f90c:	21ff      	movs	r1, #255	; 0xff
   1f90e:	400b      	ands	r3, r1
   1f910:	b21b      	sxth	r3, r3
   1f912:	4313      	orrs	r3, r2
   1f914:	b21a      	sxth	r2, r3
   1f916:	687b      	ldr	r3, [r7, #4]
   1f918:	7a5b      	ldrb	r3, [r3, #9]
   1f91a:	b21b      	sxth	r3, r3
   1f91c:	210f      	movs	r1, #15
   1f91e:	400b      	ands	r3, r1
   1f920:	b21b      	sxth	r3, r3
   1f922:	4313      	orrs	r3, r2
   1f924:	b21a      	sxth	r2, r3
   1f926:	2318      	movs	r3, #24
   1f928:	18fb      	adds	r3, r7, r3
   1f92a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   1f92c:	231c      	movs	r3, #28
   1f92e:	18fb      	adds	r3, r7, r3
   1f930:	881b      	ldrh	r3, [r3, #0]
   1f932:	2b00      	cmp	r3, #0
   1f934:	d009      	beq.n	1f94a <nm_get_firmware_full_info+0x152>
   1f936:	2318      	movs	r3, #24
   1f938:	18fb      	adds	r3, r7, r3
   1f93a:	881b      	ldrh	r3, [r3, #0]
   1f93c:	2b00      	cmp	r3, #0
   1f93e:	d004      	beq.n	1f94a <nm_get_firmware_full_info+0x152>
   1f940:	2318      	movs	r3, #24
   1f942:	18fb      	adds	r3, r7, r3
   1f944:	881b      	ldrh	r3, [r3, #0]
   1f946:	2b00      	cmp	r3, #0
   1f948:	d104      	bne.n	1f954 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   1f94a:	231f      	movs	r3, #31
   1f94c:	18fb      	adds	r3, r7, r3
   1f94e:	22f4      	movs	r2, #244	; 0xf4
   1f950:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   1f952:	e022      	b.n	1f99a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   1f954:	231a      	movs	r3, #26
   1f956:	18fa      	adds	r2, r7, r3
   1f958:	2318      	movs	r3, #24
   1f95a:	18fb      	adds	r3, r7, r3
   1f95c:	8812      	ldrh	r2, [r2, #0]
   1f95e:	881b      	ldrh	r3, [r3, #0]
   1f960:	429a      	cmp	r2, r3
   1f962:	d204      	bcs.n	1f96e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   1f964:	231f      	movs	r3, #31
   1f966:	18fb      	adds	r3, r7, r3
   1f968:	22f3      	movs	r2, #243	; 0xf3
   1f96a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   1f96c:	e015      	b.n	1f99a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   1f96e:	231a      	movs	r3, #26
   1f970:	18fa      	adds	r2, r7, r3
   1f972:	231c      	movs	r3, #28
   1f974:	18fb      	adds	r3, r7, r3
   1f976:	8812      	ldrh	r2, [r2, #0]
   1f978:	881b      	ldrh	r3, [r3, #0]
   1f97a:	429a      	cmp	r2, r3
   1f97c:	d90d      	bls.n	1f99a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   1f97e:	231f      	movs	r3, #31
   1f980:	18fb      	adds	r3, r7, r3
   1f982:	22f3      	movs	r2, #243	; 0xf3
   1f984:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   1f986:	e008      	b.n	1f99a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   1f988:	231f      	movs	r3, #31
   1f98a:	18fb      	adds	r3, r7, r3
   1f98c:	22f4      	movs	r2, #244	; 0xf4
   1f98e:	701a      	strb	r2, [r3, #0]
   1f990:	e003      	b.n	1f99a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   1f992:	231f      	movs	r3, #31
   1f994:	18fb      	adds	r3, r7, r3
   1f996:	22f4      	movs	r2, #244	; 0xf4
   1f998:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   1f99a:	231f      	movs	r3, #31
   1f99c:	18fb      	adds	r3, r7, r3
   1f99e:	781b      	ldrb	r3, [r3, #0]
   1f9a0:	b25b      	sxtb	r3, r3
}
   1f9a2:	0018      	movs	r0, r3
   1f9a4:	46bd      	mov	sp, r7
   1f9a6:	b009      	add	sp, #36	; 0x24
   1f9a8:	bd90      	pop	{r4, r7, pc}
   1f9aa:	46c0      	nop			; (mov r8, r8)
   1f9ac:	000328a7 	.word	0x000328a7
   1f9b0:	0001d531 	.word	0x0001d531
   1f9b4:	000c0008 	.word	0x000c0008
   1f9b8:	0001f5c1 	.word	0x0001f5c1
   1f9bc:	0001f635 	.word	0x0001f635
   1f9c0:	00001354 	.word	0x00001354

0001f9c4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   1f9c4:	b590      	push	{r4, r7, lr}
   1f9c6:	b085      	sub	sp, #20
   1f9c8:	af00      	add	r7, sp, #0
   1f9ca:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   1f9cc:	230f      	movs	r3, #15
   1f9ce:	18fb      	adds	r3, r7, r3
   1f9d0:	2200      	movs	r2, #0
   1f9d2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   1f9d4:	687b      	ldr	r3, [r7, #4]
   1f9d6:	2b00      	cmp	r3, #0
   1f9d8:	d013      	beq.n	1fa02 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   1f9da:	230e      	movs	r3, #14
   1f9dc:	18fb      	adds	r3, r7, r3
   1f9de:	687a      	ldr	r2, [r7, #4]
   1f9e0:	7812      	ldrb	r2, [r2, #0]
   1f9e2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   1f9e4:	230e      	movs	r3, #14
   1f9e6:	18fb      	adds	r3, r7, r3
   1f9e8:	781b      	ldrb	r3, [r3, #0]
   1f9ea:	2b00      	cmp	r3, #0
   1f9ec:	d004      	beq.n	1f9f8 <nm_drv_init+0x34>
   1f9ee:	230e      	movs	r3, #14
   1f9f0:	18fb      	adds	r3, r7, r3
   1f9f2:	781b      	ldrb	r3, [r3, #0]
   1f9f4:	2b04      	cmp	r3, #4
   1f9f6:	d908      	bls.n	1fa0a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   1f9f8:	230e      	movs	r3, #14
   1f9fa:	18fb      	adds	r3, r7, r3
   1f9fc:	2201      	movs	r2, #1
   1f9fe:	701a      	strb	r2, [r3, #0]
   1fa00:	e003      	b.n	1fa0a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   1fa02:	230e      	movs	r3, #14
   1fa04:	18fb      	adds	r3, r7, r3
   1fa06:	2201      	movs	r2, #1
   1fa08:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   1fa0a:	230f      	movs	r3, #15
   1fa0c:	18fc      	adds	r4, r7, r3
   1fa0e:	2000      	movs	r0, #0
   1fa10:	4b41      	ldr	r3, [pc, #260]	; (1fb18 <nm_drv_init+0x154>)
   1fa12:	4798      	blx	r3
   1fa14:	0003      	movs	r3, r0
   1fa16:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1fa18:	230f      	movs	r3, #15
   1fa1a:	18fb      	adds	r3, r7, r3
   1fa1c:	781b      	ldrb	r3, [r3, #0]
   1fa1e:	b25b      	sxtb	r3, r3
   1fa20:	2b00      	cmp	r3, #0
   1fa22:	d00f      	beq.n	1fa44 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   1fa24:	2390      	movs	r3, #144	; 0x90
   1fa26:	005a      	lsls	r2, r3, #1
   1fa28:	493c      	ldr	r1, [pc, #240]	; (1fb1c <nm_drv_init+0x158>)
   1fa2a:	4b3d      	ldr	r3, [pc, #244]	; (1fb20 <nm_drv_init+0x15c>)
   1fa2c:	0018      	movs	r0, r3
   1fa2e:	4b3d      	ldr	r3, [pc, #244]	; (1fb24 <nm_drv_init+0x160>)
   1fa30:	4798      	blx	r3
   1fa32:	4b3d      	ldr	r3, [pc, #244]	; (1fb28 <nm_drv_init+0x164>)
   1fa34:	0018      	movs	r0, r3
   1fa36:	4b3b      	ldr	r3, [pc, #236]	; (1fb24 <nm_drv_init+0x160>)
   1fa38:	4798      	blx	r3
   1fa3a:	4b3c      	ldr	r3, [pc, #240]	; (1fb2c <nm_drv_init+0x168>)
   1fa3c:	0018      	movs	r0, r3
   1fa3e:	4b39      	ldr	r3, [pc, #228]	; (1fb24 <nm_drv_init+0x160>)
   1fa40:	4798      	blx	r3
		goto ERR1;
   1fa42:	e061      	b.n	1fb08 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   1fa44:	4b3a      	ldr	r3, [pc, #232]	; (1fb30 <nm_drv_init+0x16c>)
   1fa46:	0018      	movs	r0, r3
   1fa48:	4b36      	ldr	r3, [pc, #216]	; (1fb24 <nm_drv_init+0x160>)
   1fa4a:	4798      	blx	r3
   1fa4c:	4b39      	ldr	r3, [pc, #228]	; (1fb34 <nm_drv_init+0x170>)
   1fa4e:	4798      	blx	r3
   1fa50:	0002      	movs	r2, r0
   1fa52:	4b39      	ldr	r3, [pc, #228]	; (1fb38 <nm_drv_init+0x174>)
   1fa54:	0011      	movs	r1, r2
   1fa56:	0018      	movs	r0, r3
   1fa58:	4b32      	ldr	r3, [pc, #200]	; (1fb24 <nm_drv_init+0x160>)
   1fa5a:	4798      	blx	r3
   1fa5c:	4b33      	ldr	r3, [pc, #204]	; (1fb2c <nm_drv_init+0x168>)
   1fa5e:	0018      	movs	r0, r3
   1fa60:	4b30      	ldr	r3, [pc, #192]	; (1fb24 <nm_drv_init+0x160>)
   1fa62:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   1fa64:	4b35      	ldr	r3, [pc, #212]	; (1fb3c <nm_drv_init+0x178>)
   1fa66:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   1fa68:	230f      	movs	r3, #15
   1fa6a:	18fc      	adds	r4, r7, r3
   1fa6c:	230e      	movs	r3, #14
   1fa6e:	18fb      	adds	r3, r7, r3
   1fa70:	781b      	ldrb	r3, [r3, #0]
   1fa72:	0018      	movs	r0, r3
   1fa74:	4b32      	ldr	r3, [pc, #200]	; (1fb40 <nm_drv_init+0x17c>)
   1fa76:	4798      	blx	r3
   1fa78:	0003      	movs	r3, r0
   1fa7a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1fa7c:	230f      	movs	r3, #15
   1fa7e:	18fb      	adds	r3, r7, r3
   1fa80:	781b      	ldrb	r3, [r3, #0]
   1fa82:	b25b      	sxtb	r3, r3
   1fa84:	2b00      	cmp	r3, #0
   1fa86:	d13a      	bne.n	1fafe <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   1fa88:	230f      	movs	r3, #15
   1fa8a:	18fc      	adds	r4, r7, r3
   1fa8c:	230e      	movs	r3, #14
   1fa8e:	18fb      	adds	r3, r7, r3
   1fa90:	781b      	ldrb	r3, [r3, #0]
   1fa92:	0018      	movs	r0, r3
   1fa94:	4b2b      	ldr	r3, [pc, #172]	; (1fb44 <nm_drv_init+0x180>)
   1fa96:	4798      	blx	r3
   1fa98:	0003      	movs	r3, r0
   1fa9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1fa9c:	230f      	movs	r3, #15
   1fa9e:	18fb      	adds	r3, r7, r3
   1faa0:	781b      	ldrb	r3, [r3, #0]
   1faa2:	b25b      	sxtb	r3, r3
   1faa4:	2b00      	cmp	r3, #0
   1faa6:	d12c      	bne.n	1fb02 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   1faa8:	230e      	movs	r3, #14
   1faaa:	18fb      	adds	r3, r7, r3
   1faac:	781b      	ldrb	r3, [r3, #0]
   1faae:	2b02      	cmp	r3, #2
   1fab0:	d02a      	beq.n	1fb08 <nm_drv_init+0x144>
   1fab2:	230e      	movs	r3, #14
   1fab4:	18fb      	adds	r3, r7, r3
   1fab6:	781b      	ldrb	r3, [r3, #0]
   1fab8:	2b03      	cmp	r3, #3
   1faba:	d025      	beq.n	1fb08 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   1fabc:	230f      	movs	r3, #15
   1fabe:	18fc      	adds	r4, r7, r3
   1fac0:	4b21      	ldr	r3, [pc, #132]	; (1fb48 <nm_drv_init+0x184>)
   1fac2:	4798      	blx	r3
   1fac4:	0003      	movs	r3, r0
   1fac6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1fac8:	230f      	movs	r3, #15
   1faca:	18fb      	adds	r3, r7, r3
   1facc:	781b      	ldrb	r3, [r3, #0]
   1face:	b25b      	sxtb	r3, r3
   1fad0:	2b00      	cmp	r3, #0
   1fad2:	d00f      	beq.n	1faf4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   1fad4:	23a7      	movs	r3, #167	; 0xa7
   1fad6:	005a      	lsls	r2, r3, #1
   1fad8:	4910      	ldr	r1, [pc, #64]	; (1fb1c <nm_drv_init+0x158>)
   1fada:	4b11      	ldr	r3, [pc, #68]	; (1fb20 <nm_drv_init+0x15c>)
   1fadc:	0018      	movs	r0, r3
   1fade:	4b11      	ldr	r3, [pc, #68]	; (1fb24 <nm_drv_init+0x160>)
   1fae0:	4798      	blx	r3
   1fae2:	4b1a      	ldr	r3, [pc, #104]	; (1fb4c <nm_drv_init+0x188>)
   1fae4:	0018      	movs	r0, r3
   1fae6:	4b0f      	ldr	r3, [pc, #60]	; (1fb24 <nm_drv_init+0x160>)
   1fae8:	4798      	blx	r3
   1faea:	4b10      	ldr	r3, [pc, #64]	; (1fb2c <nm_drv_init+0x168>)
   1faec:	0018      	movs	r0, r3
   1faee:	4b0d      	ldr	r3, [pc, #52]	; (1fb24 <nm_drv_init+0x160>)
   1faf0:	4798      	blx	r3
		goto ERR2;
   1faf2:	e007      	b.n	1fb04 <nm_drv_init+0x140>
	}
	return ret;
   1faf4:	230f      	movs	r3, #15
   1faf6:	18fb      	adds	r3, r7, r3
   1faf8:	781b      	ldrb	r3, [r3, #0]
   1fafa:	b25b      	sxtb	r3, r3
   1fafc:	e008      	b.n	1fb10 <nm_drv_init+0x14c>
		goto ERR2;
   1fafe:	46c0      	nop			; (mov r8, r8)
   1fb00:	e000      	b.n	1fb04 <nm_drv_init+0x140>
		goto ERR2;
   1fb02:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   1fb04:	4b12      	ldr	r3, [pc, #72]	; (1fb50 <nm_drv_init+0x18c>)
   1fb06:	4798      	blx	r3
ERR1:
	return ret;
   1fb08:	230f      	movs	r3, #15
   1fb0a:	18fb      	adds	r3, r7, r3
   1fb0c:	781b      	ldrb	r3, [r3, #0]
   1fb0e:	b25b      	sxtb	r3, r3
}
   1fb10:	0018      	movs	r0, r3
   1fb12:	46bd      	mov	sp, r7
   1fb14:	b005      	add	sp, #20
   1fb16:	bd90      	pop	{r4, r7, pc}
   1fb18:	0001f525 	.word	0x0001f525
   1fb1c:	00036f50 	.word	0x00036f50
   1fb20:	00036e80 	.word	0x00036e80
   1fb24:	0001a5e9 	.word	0x0001a5e9
   1fb28:	00036e94 	.word	0x00036e94
   1fb2c:	00036eb0 	.word	0x00036eb0
   1fb30:	00036eb4 	.word	0x00036eb4
   1fb34:	0001eec1 	.word	0x0001eec1
   1fb38:	00036ec0 	.word	0x00036ec0
   1fb3c:	000213dd 	.word	0x000213dd
   1fb40:	0001f219 	.word	0x0001f219
   1fb44:	0001f3b1 	.word	0x0001f3b1
   1fb48:	0001ee0d 	.word	0x0001ee0d
   1fb4c:	00036ed0 	.word	0x00036ed0
   1fb50:	0001f559 	.word	0x0001f559

0001fb54 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   1fb54:	b590      	push	{r4, r7, lr}
   1fb56:	b085      	sub	sp, #20
   1fb58:	af00      	add	r7, sp, #0
   1fb5a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   1fb5c:	230f      	movs	r3, #15
   1fb5e:	18fc      	adds	r4, r7, r3
   1fb60:	4b2e      	ldr	r3, [pc, #184]	; (1fc1c <nm_drv_deinit+0xc8>)
   1fb62:	4798      	blx	r3
   1fb64:	0003      	movs	r3, r0
   1fb66:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1fb68:	230f      	movs	r3, #15
   1fb6a:	18fb      	adds	r3, r7, r3
   1fb6c:	781b      	ldrb	r3, [r3, #0]
   1fb6e:	b25b      	sxtb	r3, r3
   1fb70:	2b00      	cmp	r3, #0
   1fb72:	d010      	beq.n	1fb96 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   1fb74:	2366      	movs	r3, #102	; 0x66
   1fb76:	33ff      	adds	r3, #255	; 0xff
   1fb78:	001a      	movs	r2, r3
   1fb7a:	4929      	ldr	r1, [pc, #164]	; (1fc20 <nm_drv_deinit+0xcc>)
   1fb7c:	4b29      	ldr	r3, [pc, #164]	; (1fc24 <nm_drv_deinit+0xd0>)
   1fb7e:	0018      	movs	r0, r3
   1fb80:	4b29      	ldr	r3, [pc, #164]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fb82:	4798      	blx	r3
   1fb84:	4b29      	ldr	r3, [pc, #164]	; (1fc2c <nm_drv_deinit+0xd8>)
   1fb86:	0018      	movs	r0, r3
   1fb88:	4b27      	ldr	r3, [pc, #156]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fb8a:	4798      	blx	r3
   1fb8c:	4b28      	ldr	r3, [pc, #160]	; (1fc30 <nm_drv_deinit+0xdc>)
   1fb8e:	0018      	movs	r0, r3
   1fb90:	4b25      	ldr	r3, [pc, #148]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fb92:	4798      	blx	r3
		goto ERR1;
   1fb94:	e03a      	b.n	1fc0c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   1fb96:	230f      	movs	r3, #15
   1fb98:	18fc      	adds	r4, r7, r3
   1fb9a:	2000      	movs	r0, #0
   1fb9c:	4b25      	ldr	r3, [pc, #148]	; (1fc34 <nm_drv_deinit+0xe0>)
   1fb9e:	4798      	blx	r3
   1fba0:	0003      	movs	r3, r0
   1fba2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1fba4:	230f      	movs	r3, #15
   1fba6:	18fb      	adds	r3, r7, r3
   1fba8:	781b      	ldrb	r3, [r3, #0]
   1fbaa:	b25b      	sxtb	r3, r3
   1fbac:	2b00      	cmp	r3, #0
   1fbae:	d00f      	beq.n	1fbd0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   1fbb0:	23b6      	movs	r3, #182	; 0xb6
   1fbb2:	005a      	lsls	r2, r3, #1
   1fbb4:	491a      	ldr	r1, [pc, #104]	; (1fc20 <nm_drv_deinit+0xcc>)
   1fbb6:	4b1b      	ldr	r3, [pc, #108]	; (1fc24 <nm_drv_deinit+0xd0>)
   1fbb8:	0018      	movs	r0, r3
   1fbba:	4b1b      	ldr	r3, [pc, #108]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fbbc:	4798      	blx	r3
   1fbbe:	4b1e      	ldr	r3, [pc, #120]	; (1fc38 <nm_drv_deinit+0xe4>)
   1fbc0:	0018      	movs	r0, r3
   1fbc2:	4b19      	ldr	r3, [pc, #100]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fbc4:	4798      	blx	r3
   1fbc6:	4b1a      	ldr	r3, [pc, #104]	; (1fc30 <nm_drv_deinit+0xdc>)
   1fbc8:	0018      	movs	r0, r3
   1fbca:	4b17      	ldr	r3, [pc, #92]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fbcc:	4798      	blx	r3
		goto ERR1;
   1fbce:	e01d      	b.n	1fc0c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   1fbd0:	230f      	movs	r3, #15
   1fbd2:	18fc      	adds	r4, r7, r3
   1fbd4:	4b19      	ldr	r3, [pc, #100]	; (1fc3c <nm_drv_deinit+0xe8>)
   1fbd6:	4798      	blx	r3
   1fbd8:	0003      	movs	r3, r0
   1fbda:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1fbdc:	230f      	movs	r3, #15
   1fbde:	18fb      	adds	r3, r7, r3
   1fbe0:	781b      	ldrb	r3, [r3, #0]
   1fbe2:	b25b      	sxtb	r3, r3
   1fbe4:	2b00      	cmp	r3, #0
   1fbe6:	d00f      	beq.n	1fc08 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   1fbe8:	23b9      	movs	r3, #185	; 0xb9
   1fbea:	005a      	lsls	r2, r3, #1
   1fbec:	490c      	ldr	r1, [pc, #48]	; (1fc20 <nm_drv_deinit+0xcc>)
   1fbee:	4b0d      	ldr	r3, [pc, #52]	; (1fc24 <nm_drv_deinit+0xd0>)
   1fbf0:	0018      	movs	r0, r3
   1fbf2:	4b0d      	ldr	r3, [pc, #52]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fbf4:	4798      	blx	r3
   1fbf6:	4b12      	ldr	r3, [pc, #72]	; (1fc40 <nm_drv_deinit+0xec>)
   1fbf8:	0018      	movs	r0, r3
   1fbfa:	4b0b      	ldr	r3, [pc, #44]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fbfc:	4798      	blx	r3
   1fbfe:	4b0c      	ldr	r3, [pc, #48]	; (1fc30 <nm_drv_deinit+0xdc>)
   1fc00:	0018      	movs	r0, r3
   1fc02:	4b09      	ldr	r3, [pc, #36]	; (1fc28 <nm_drv_deinit+0xd4>)
   1fc04:	4798      	blx	r3
		goto ERR1;
   1fc06:	e001      	b.n	1fc0c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   1fc08:	4b0e      	ldr	r3, [pc, #56]	; (1fc44 <nm_drv_deinit+0xf0>)
   1fc0a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   1fc0c:	230f      	movs	r3, #15
   1fc0e:	18fb      	adds	r3, r7, r3
   1fc10:	781b      	ldrb	r3, [r3, #0]
   1fc12:	b25b      	sxtb	r3, r3
}
   1fc14:	0018      	movs	r0, r3
   1fc16:	46bd      	mov	sp, r7
   1fc18:	b005      	add	sp, #20
   1fc1a:	bd90      	pop	{r4, r7, pc}
   1fc1c:	0001f465 	.word	0x0001f465
   1fc20:	00036f5c 	.word	0x00036f5c
   1fc24:	00036e80 	.word	0x00036e80
   1fc28:	0001a5e9 	.word	0x0001a5e9
   1fc2c:	00036ef0 	.word	0x00036ef0
   1fc30:	00036eb0 	.word	0x00036eb0
   1fc34:	00022885 	.word	0x00022885
   1fc38:	00036f10 	.word	0x00036f10
   1fc3c:	0001f559 	.word	0x0001f559
   1fc40:	00036f34 	.word	0x00036f34
   1fc44:	00021529 	.word	0x00021529

0001fc48 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   1fc48:	b580      	push	{r7, lr}
   1fc4a:	b086      	sub	sp, #24
   1fc4c:	af00      	add	r7, sp, #0
   1fc4e:	6078      	str	r0, [r7, #4]
   1fc50:	000a      	movs	r2, r1
   1fc52:	1cbb      	adds	r3, r7, #2
   1fc54:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   1fc56:	230c      	movs	r3, #12
   1fc58:	18fb      	adds	r3, r7, r3
   1fc5a:	2200      	movs	r2, #0
   1fc5c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   1fc5e:	230c      	movs	r3, #12
   1fc60:	18fb      	adds	r3, r7, r3
   1fc62:	687a      	ldr	r2, [r7, #4]
   1fc64:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   1fc66:	230c      	movs	r3, #12
   1fc68:	18fb      	adds	r3, r7, r3
   1fc6a:	1cba      	adds	r2, r7, #2
   1fc6c:	8812      	ldrh	r2, [r2, #0]
   1fc6e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1fc70:	230c      	movs	r3, #12
   1fc72:	18fb      	adds	r3, r7, r3
   1fc74:	0019      	movs	r1, r3
   1fc76:	2003      	movs	r0, #3
   1fc78:	4b03      	ldr	r3, [pc, #12]	; (1fc88 <nmi_spi_read+0x40>)
   1fc7a:	4798      	blx	r3
   1fc7c:	0003      	movs	r3, r0
}
   1fc7e:	0018      	movs	r0, r3
   1fc80:	46bd      	mov	sp, r7
   1fc82:	b006      	add	sp, #24
   1fc84:	bd80      	pop	{r7, pc}
   1fc86:	46c0      	nop			; (mov r8, r8)
   1fc88:	0001d3f5 	.word	0x0001d3f5

0001fc8c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   1fc8c:	b580      	push	{r7, lr}
   1fc8e:	b086      	sub	sp, #24
   1fc90:	af00      	add	r7, sp, #0
   1fc92:	6078      	str	r0, [r7, #4]
   1fc94:	000a      	movs	r2, r1
   1fc96:	1cbb      	adds	r3, r7, #2
   1fc98:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   1fc9a:	230c      	movs	r3, #12
   1fc9c:	18fb      	adds	r3, r7, r3
   1fc9e:	687a      	ldr	r2, [r7, #4]
   1fca0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   1fca2:	230c      	movs	r3, #12
   1fca4:	18fb      	adds	r3, r7, r3
   1fca6:	2200      	movs	r2, #0
   1fca8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   1fcaa:	230c      	movs	r3, #12
   1fcac:	18fb      	adds	r3, r7, r3
   1fcae:	1cba      	adds	r2, r7, #2
   1fcb0:	8812      	ldrh	r2, [r2, #0]
   1fcb2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1fcb4:	230c      	movs	r3, #12
   1fcb6:	18fb      	adds	r3, r7, r3
   1fcb8:	0019      	movs	r1, r3
   1fcba:	2003      	movs	r0, #3
   1fcbc:	4b03      	ldr	r3, [pc, #12]	; (1fccc <nmi_spi_write+0x40>)
   1fcbe:	4798      	blx	r3
   1fcc0:	0003      	movs	r3, r0
}
   1fcc2:	0018      	movs	r0, r3
   1fcc4:	46bd      	mov	sp, r7
   1fcc6:	b006      	add	sp, #24
   1fcc8:	bd80      	pop	{r7, pc}
   1fcca:	46c0      	nop			; (mov r8, r8)
   1fccc:	0001d3f5 	.word	0x0001d3f5

0001fcd0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   1fcd0:	b580      	push	{r7, lr}
   1fcd2:	b088      	sub	sp, #32
   1fcd4:	af00      	add	r7, sp, #0
   1fcd6:	60f8      	str	r0, [r7, #12]
   1fcd8:	60b9      	str	r1, [r7, #8]
   1fcda:	1dbb      	adds	r3, r7, #6
   1fcdc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   1fcde:	2314      	movs	r3, #20
   1fce0:	18fb      	adds	r3, r7, r3
   1fce2:	68fa      	ldr	r2, [r7, #12]
   1fce4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   1fce6:	2314      	movs	r3, #20
   1fce8:	18fb      	adds	r3, r7, r3
   1fcea:	68ba      	ldr	r2, [r7, #8]
   1fcec:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   1fcee:	2314      	movs	r3, #20
   1fcf0:	18fb      	adds	r3, r7, r3
   1fcf2:	1dba      	adds	r2, r7, #6
   1fcf4:	8812      	ldrh	r2, [r2, #0]
   1fcf6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   1fcf8:	2314      	movs	r3, #20
   1fcfa:	18fb      	adds	r3, r7, r3
   1fcfc:	0019      	movs	r1, r3
   1fcfe:	2003      	movs	r0, #3
   1fd00:	4b03      	ldr	r3, [pc, #12]	; (1fd10 <nmi_spi_rw+0x40>)
   1fd02:	4798      	blx	r3
   1fd04:	0003      	movs	r3, r0
}
   1fd06:	0018      	movs	r0, r3
   1fd08:	46bd      	mov	sp, r7
   1fd0a:	b008      	add	sp, #32
   1fd0c:	bd80      	pop	{r7, pc}
   1fd0e:	46c0      	nop			; (mov r8, r8)
   1fd10:	0001d3f5 	.word	0x0001d3f5

0001fd14 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   1fd14:	b580      	push	{r7, lr}
   1fd16:	b082      	sub	sp, #8
   1fd18:	af00      	add	r7, sp, #0
   1fd1a:	0002      	movs	r2, r0
   1fd1c:	1dfb      	adds	r3, r7, #7
   1fd1e:	701a      	strb	r2, [r3, #0]
   1fd20:	1dbb      	adds	r3, r7, #6
   1fd22:	1c0a      	adds	r2, r1, #0
   1fd24:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   1fd26:	1dfb      	adds	r3, r7, #7
   1fd28:	781b      	ldrb	r3, [r3, #0]
   1fd2a:	005a      	lsls	r2, r3, #1
   1fd2c:	1dbb      	adds	r3, r7, #6
   1fd2e:	781b      	ldrb	r3, [r3, #0]
   1fd30:	4053      	eors	r3, r2
   1fd32:	4a03      	ldr	r2, [pc, #12]	; (1fd40 <crc7_byte+0x2c>)
   1fd34:	5cd3      	ldrb	r3, [r2, r3]
}
   1fd36:	0018      	movs	r0, r3
   1fd38:	46bd      	mov	sp, r7
   1fd3a:	b002      	add	sp, #8
   1fd3c:	bd80      	pop	{r7, pc}
   1fd3e:	46c0      	nop			; (mov r8, r8)
   1fd40:	00036f6c 	.word	0x00036f6c

0001fd44 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   1fd44:	b590      	push	{r4, r7, lr}
   1fd46:	b085      	sub	sp, #20
   1fd48:	af00      	add	r7, sp, #0
   1fd4a:	60b9      	str	r1, [r7, #8]
   1fd4c:	607a      	str	r2, [r7, #4]
   1fd4e:	230f      	movs	r3, #15
   1fd50:	18fb      	adds	r3, r7, r3
   1fd52:	1c02      	adds	r2, r0, #0
   1fd54:	701a      	strb	r2, [r3, #0]
	while (len--)
   1fd56:	e00e      	b.n	1fd76 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   1fd58:	68bb      	ldr	r3, [r7, #8]
   1fd5a:	1c5a      	adds	r2, r3, #1
   1fd5c:	60ba      	str	r2, [r7, #8]
   1fd5e:	781a      	ldrb	r2, [r3, #0]
   1fd60:	230f      	movs	r3, #15
   1fd62:	18fc      	adds	r4, r7, r3
   1fd64:	230f      	movs	r3, #15
   1fd66:	18fb      	adds	r3, r7, r3
   1fd68:	781b      	ldrb	r3, [r3, #0]
   1fd6a:	0011      	movs	r1, r2
   1fd6c:	0018      	movs	r0, r3
   1fd6e:	4b08      	ldr	r3, [pc, #32]	; (1fd90 <crc7+0x4c>)
   1fd70:	4798      	blx	r3
   1fd72:	0003      	movs	r3, r0
   1fd74:	7023      	strb	r3, [r4, #0]
	while (len--)
   1fd76:	687b      	ldr	r3, [r7, #4]
   1fd78:	1e5a      	subs	r2, r3, #1
   1fd7a:	607a      	str	r2, [r7, #4]
   1fd7c:	2b00      	cmp	r3, #0
   1fd7e:	d1eb      	bne.n	1fd58 <crc7+0x14>
	return crc;
   1fd80:	230f      	movs	r3, #15
   1fd82:	18fb      	adds	r3, r7, r3
   1fd84:	781b      	ldrb	r3, [r3, #0]
}
   1fd86:	0018      	movs	r0, r3
   1fd88:	46bd      	mov	sp, r7
   1fd8a:	b005      	add	sp, #20
   1fd8c:	bd90      	pop	{r4, r7, pc}
   1fd8e:	46c0      	nop			; (mov r8, r8)
   1fd90:	0001fd15 	.word	0x0001fd15

0001fd94 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   1fd94:	b590      	push	{r4, r7, lr}
   1fd96:	b089      	sub	sp, #36	; 0x24
   1fd98:	af00      	add	r7, sp, #0
   1fd9a:	60b9      	str	r1, [r7, #8]
   1fd9c:	607a      	str	r2, [r7, #4]
   1fd9e:	603b      	str	r3, [r7, #0]
   1fda0:	230f      	movs	r3, #15
   1fda2:	18fb      	adds	r3, r7, r3
   1fda4:	1c02      	adds	r2, r0, #0
   1fda6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   1fda8:	231f      	movs	r3, #31
   1fdaa:	18fb      	adds	r3, r7, r3
   1fdac:	2205      	movs	r2, #5
   1fdae:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   1fdb0:	231e      	movs	r3, #30
   1fdb2:	18fb      	adds	r3, r7, r3
   1fdb4:	2201      	movs	r2, #1
   1fdb6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   1fdb8:	2314      	movs	r3, #20
   1fdba:	18fb      	adds	r3, r7, r3
   1fdbc:	220f      	movs	r2, #15
   1fdbe:	18ba      	adds	r2, r7, r2
   1fdc0:	7812      	ldrb	r2, [r2, #0]
   1fdc2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   1fdc4:	230f      	movs	r3, #15
   1fdc6:	18fb      	adds	r3, r7, r3
   1fdc8:	781b      	ldrb	r3, [r3, #0]
   1fdca:	3bc1      	subs	r3, #193	; 0xc1
   1fdcc:	2b0e      	cmp	r3, #14
   1fdce:	d900      	bls.n	1fdd2 <spi_cmd+0x3e>
   1fdd0:	e11b      	b.n	2000a <spi_cmd+0x276>
   1fdd2:	009a      	lsls	r2, r3, #2
   1fdd4:	4bb6      	ldr	r3, [pc, #728]	; (200b0 <spi_cmd+0x31c>)
   1fdd6:	18d3      	adds	r3, r2, r3
   1fdd8:	681b      	ldr	r3, [r3, #0]
   1fdda:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   1fddc:	68bb      	ldr	r3, [r7, #8]
   1fdde:	0c1b      	lsrs	r3, r3, #16
   1fde0:	b2da      	uxtb	r2, r3
   1fde2:	2314      	movs	r3, #20
   1fde4:	18fb      	adds	r3, r7, r3
   1fde6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1fde8:	68bb      	ldr	r3, [r7, #8]
   1fdea:	0a1b      	lsrs	r3, r3, #8
   1fdec:	b2da      	uxtb	r2, r3
   1fdee:	2314      	movs	r3, #20
   1fdf0:	18fb      	adds	r3, r7, r3
   1fdf2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1fdf4:	68bb      	ldr	r3, [r7, #8]
   1fdf6:	b2da      	uxtb	r2, r3
   1fdf8:	2314      	movs	r3, #20
   1fdfa:	18fb      	adds	r3, r7, r3
   1fdfc:	70da      	strb	r2, [r3, #3]
		len = 5;
   1fdfe:	231f      	movs	r3, #31
   1fe00:	18fb      	adds	r3, r7, r3
   1fe02:	2205      	movs	r2, #5
   1fe04:	701a      	strb	r2, [r3, #0]
		break;
   1fe06:	e105      	b.n	20014 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   1fe08:	68bb      	ldr	r3, [r7, #8]
   1fe0a:	0a1b      	lsrs	r3, r3, #8
   1fe0c:	b2da      	uxtb	r2, r3
   1fe0e:	2314      	movs	r3, #20
   1fe10:	18fb      	adds	r3, r7, r3
   1fe12:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   1fe14:	2330      	movs	r3, #48	; 0x30
   1fe16:	18fb      	adds	r3, r7, r3
   1fe18:	781b      	ldrb	r3, [r3, #0]
   1fe1a:	2b00      	cmp	r3, #0
   1fe1c:	d009      	beq.n	1fe32 <spi_cmd+0x9e>
   1fe1e:	2314      	movs	r3, #20
   1fe20:	18fb      	adds	r3, r7, r3
   1fe22:	785b      	ldrb	r3, [r3, #1]
   1fe24:	2280      	movs	r2, #128	; 0x80
   1fe26:	4252      	negs	r2, r2
   1fe28:	4313      	orrs	r3, r2
   1fe2a:	b2da      	uxtb	r2, r3
   1fe2c:	2314      	movs	r3, #20
   1fe2e:	18fb      	adds	r3, r7, r3
   1fe30:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   1fe32:	68bb      	ldr	r3, [r7, #8]
   1fe34:	b2da      	uxtb	r2, r3
   1fe36:	2314      	movs	r3, #20
   1fe38:	18fb      	adds	r3, r7, r3
   1fe3a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1fe3c:	2314      	movs	r3, #20
   1fe3e:	18fb      	adds	r3, r7, r3
   1fe40:	2200      	movs	r2, #0
   1fe42:	70da      	strb	r2, [r3, #3]
		len = 5;
   1fe44:	231f      	movs	r3, #31
   1fe46:	18fb      	adds	r3, r7, r3
   1fe48:	2205      	movs	r2, #5
   1fe4a:	701a      	strb	r2, [r3, #0]
		break;
   1fe4c:	e0e2      	b.n	20014 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   1fe4e:	2314      	movs	r3, #20
   1fe50:	18fb      	adds	r3, r7, r3
   1fe52:	2200      	movs	r2, #0
   1fe54:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1fe56:	2314      	movs	r3, #20
   1fe58:	18fb      	adds	r3, r7, r3
   1fe5a:	2200      	movs	r2, #0
   1fe5c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1fe5e:	2314      	movs	r3, #20
   1fe60:	18fb      	adds	r3, r7, r3
   1fe62:	2200      	movs	r2, #0
   1fe64:	70da      	strb	r2, [r3, #3]
		len = 5;
   1fe66:	231f      	movs	r3, #31
   1fe68:	18fb      	adds	r3, r7, r3
   1fe6a:	2205      	movs	r2, #5
   1fe6c:	701a      	strb	r2, [r3, #0]
		break;
   1fe6e:	e0d1      	b.n	20014 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   1fe70:	2314      	movs	r3, #20
   1fe72:	18fb      	adds	r3, r7, r3
   1fe74:	2200      	movs	r2, #0
   1fe76:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1fe78:	2314      	movs	r3, #20
   1fe7a:	18fb      	adds	r3, r7, r3
   1fe7c:	2200      	movs	r2, #0
   1fe7e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1fe80:	2314      	movs	r3, #20
   1fe82:	18fb      	adds	r3, r7, r3
   1fe84:	2200      	movs	r2, #0
   1fe86:	70da      	strb	r2, [r3, #3]
		len = 5;
   1fe88:	231f      	movs	r3, #31
   1fe8a:	18fb      	adds	r3, r7, r3
   1fe8c:	2205      	movs	r2, #5
   1fe8e:	701a      	strb	r2, [r3, #0]
		break;
   1fe90:	e0c0      	b.n	20014 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   1fe92:	2314      	movs	r3, #20
   1fe94:	18fb      	adds	r3, r7, r3
   1fe96:	22ff      	movs	r2, #255	; 0xff
   1fe98:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   1fe9a:	2314      	movs	r3, #20
   1fe9c:	18fb      	adds	r3, r7, r3
   1fe9e:	22ff      	movs	r2, #255	; 0xff
   1fea0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   1fea2:	2314      	movs	r3, #20
   1fea4:	18fb      	adds	r3, r7, r3
   1fea6:	22ff      	movs	r2, #255	; 0xff
   1fea8:	70da      	strb	r2, [r3, #3]
		len = 5;
   1feaa:	231f      	movs	r3, #31
   1feac:	18fb      	adds	r3, r7, r3
   1feae:	2205      	movs	r2, #5
   1feb0:	701a      	strb	r2, [r3, #0]
		break;
   1feb2:	e0af      	b.n	20014 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   1feb4:	68bb      	ldr	r3, [r7, #8]
   1feb6:	0c1b      	lsrs	r3, r3, #16
   1feb8:	b2da      	uxtb	r2, r3
   1feba:	2314      	movs	r3, #20
   1febc:	18fb      	adds	r3, r7, r3
   1febe:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1fec0:	68bb      	ldr	r3, [r7, #8]
   1fec2:	0a1b      	lsrs	r3, r3, #8
   1fec4:	b2da      	uxtb	r2, r3
   1fec6:	2314      	movs	r3, #20
   1fec8:	18fb      	adds	r3, r7, r3
   1feca:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1fecc:	68bb      	ldr	r3, [r7, #8]
   1fece:	b2da      	uxtb	r2, r3
   1fed0:	2314      	movs	r3, #20
   1fed2:	18fb      	adds	r3, r7, r3
   1fed4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   1fed6:	683b      	ldr	r3, [r7, #0]
   1fed8:	0a1b      	lsrs	r3, r3, #8
   1feda:	b2da      	uxtb	r2, r3
   1fedc:	2314      	movs	r3, #20
   1fede:	18fb      	adds	r3, r7, r3
   1fee0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   1fee2:	683b      	ldr	r3, [r7, #0]
   1fee4:	b2da      	uxtb	r2, r3
   1fee6:	2314      	movs	r3, #20
   1fee8:	18fb      	adds	r3, r7, r3
   1feea:	715a      	strb	r2, [r3, #5]
		len = 7;
   1feec:	231f      	movs	r3, #31
   1feee:	18fb      	adds	r3, r7, r3
   1fef0:	2207      	movs	r2, #7
   1fef2:	701a      	strb	r2, [r3, #0]
		break;
   1fef4:	e08e      	b.n	20014 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   1fef6:	68bb      	ldr	r3, [r7, #8]
   1fef8:	0c1b      	lsrs	r3, r3, #16
   1fefa:	b2da      	uxtb	r2, r3
   1fefc:	2314      	movs	r3, #20
   1fefe:	18fb      	adds	r3, r7, r3
   1ff00:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1ff02:	68bb      	ldr	r3, [r7, #8]
   1ff04:	0a1b      	lsrs	r3, r3, #8
   1ff06:	b2da      	uxtb	r2, r3
   1ff08:	2314      	movs	r3, #20
   1ff0a:	18fb      	adds	r3, r7, r3
   1ff0c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1ff0e:	68bb      	ldr	r3, [r7, #8]
   1ff10:	b2da      	uxtb	r2, r3
   1ff12:	2314      	movs	r3, #20
   1ff14:	18fb      	adds	r3, r7, r3
   1ff16:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   1ff18:	683b      	ldr	r3, [r7, #0]
   1ff1a:	0c1b      	lsrs	r3, r3, #16
   1ff1c:	b2da      	uxtb	r2, r3
   1ff1e:	2314      	movs	r3, #20
   1ff20:	18fb      	adds	r3, r7, r3
   1ff22:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   1ff24:	683b      	ldr	r3, [r7, #0]
   1ff26:	0a1b      	lsrs	r3, r3, #8
   1ff28:	b2da      	uxtb	r2, r3
   1ff2a:	2314      	movs	r3, #20
   1ff2c:	18fb      	adds	r3, r7, r3
   1ff2e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   1ff30:	683b      	ldr	r3, [r7, #0]
   1ff32:	b2da      	uxtb	r2, r3
   1ff34:	2314      	movs	r3, #20
   1ff36:	18fb      	adds	r3, r7, r3
   1ff38:	719a      	strb	r2, [r3, #6]
		len = 8;
   1ff3a:	231f      	movs	r3, #31
   1ff3c:	18fb      	adds	r3, r7, r3
   1ff3e:	2208      	movs	r2, #8
   1ff40:	701a      	strb	r2, [r3, #0]
		break;
   1ff42:	e067      	b.n	20014 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   1ff44:	68bb      	ldr	r3, [r7, #8]
   1ff46:	0a1b      	lsrs	r3, r3, #8
   1ff48:	b2da      	uxtb	r2, r3
   1ff4a:	2314      	movs	r3, #20
   1ff4c:	18fb      	adds	r3, r7, r3
   1ff4e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   1ff50:	2330      	movs	r3, #48	; 0x30
   1ff52:	18fb      	adds	r3, r7, r3
   1ff54:	781b      	ldrb	r3, [r3, #0]
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	d009      	beq.n	1ff6e <spi_cmd+0x1da>
   1ff5a:	2314      	movs	r3, #20
   1ff5c:	18fb      	adds	r3, r7, r3
   1ff5e:	785b      	ldrb	r3, [r3, #1]
   1ff60:	2280      	movs	r2, #128	; 0x80
   1ff62:	4252      	negs	r2, r2
   1ff64:	4313      	orrs	r3, r2
   1ff66:	b2da      	uxtb	r2, r3
   1ff68:	2314      	movs	r3, #20
   1ff6a:	18fb      	adds	r3, r7, r3
   1ff6c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   1ff6e:	68bb      	ldr	r3, [r7, #8]
   1ff70:	b2da      	uxtb	r2, r3
   1ff72:	2314      	movs	r3, #20
   1ff74:	18fb      	adds	r3, r7, r3
   1ff76:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   1ff78:	687b      	ldr	r3, [r7, #4]
   1ff7a:	0e1b      	lsrs	r3, r3, #24
   1ff7c:	b2da      	uxtb	r2, r3
   1ff7e:	2314      	movs	r3, #20
   1ff80:	18fb      	adds	r3, r7, r3
   1ff82:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   1ff84:	687b      	ldr	r3, [r7, #4]
   1ff86:	0c1b      	lsrs	r3, r3, #16
   1ff88:	b2da      	uxtb	r2, r3
   1ff8a:	2314      	movs	r3, #20
   1ff8c:	18fb      	adds	r3, r7, r3
   1ff8e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   1ff90:	687b      	ldr	r3, [r7, #4]
   1ff92:	0a1b      	lsrs	r3, r3, #8
   1ff94:	b2da      	uxtb	r2, r3
   1ff96:	2314      	movs	r3, #20
   1ff98:	18fb      	adds	r3, r7, r3
   1ff9a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   1ff9c:	687b      	ldr	r3, [r7, #4]
   1ff9e:	b2da      	uxtb	r2, r3
   1ffa0:	2314      	movs	r3, #20
   1ffa2:	18fb      	adds	r3, r7, r3
   1ffa4:	719a      	strb	r2, [r3, #6]
		len = 8;
   1ffa6:	231f      	movs	r3, #31
   1ffa8:	18fb      	adds	r3, r7, r3
   1ffaa:	2208      	movs	r2, #8
   1ffac:	701a      	strb	r2, [r3, #0]
		break;
   1ffae:	e031      	b.n	20014 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   1ffb0:	68bb      	ldr	r3, [r7, #8]
   1ffb2:	0c1b      	lsrs	r3, r3, #16
   1ffb4:	b2da      	uxtb	r2, r3
   1ffb6:	2314      	movs	r3, #20
   1ffb8:	18fb      	adds	r3, r7, r3
   1ffba:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1ffbc:	68bb      	ldr	r3, [r7, #8]
   1ffbe:	0a1b      	lsrs	r3, r3, #8
   1ffc0:	b2da      	uxtb	r2, r3
   1ffc2:	2314      	movs	r3, #20
   1ffc4:	18fb      	adds	r3, r7, r3
   1ffc6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   1ffc8:	68bb      	ldr	r3, [r7, #8]
   1ffca:	b2da      	uxtb	r2, r3
   1ffcc:	2314      	movs	r3, #20
   1ffce:	18fb      	adds	r3, r7, r3
   1ffd0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   1ffd2:	687b      	ldr	r3, [r7, #4]
   1ffd4:	0e1b      	lsrs	r3, r3, #24
   1ffd6:	b2da      	uxtb	r2, r3
   1ffd8:	2314      	movs	r3, #20
   1ffda:	18fb      	adds	r3, r7, r3
   1ffdc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   1ffde:	687b      	ldr	r3, [r7, #4]
   1ffe0:	0c1b      	lsrs	r3, r3, #16
   1ffe2:	b2da      	uxtb	r2, r3
   1ffe4:	2314      	movs	r3, #20
   1ffe6:	18fb      	adds	r3, r7, r3
   1ffe8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1ffea:	687b      	ldr	r3, [r7, #4]
   1ffec:	0a1b      	lsrs	r3, r3, #8
   1ffee:	b2da      	uxtb	r2, r3
   1fff0:	2314      	movs	r3, #20
   1fff2:	18fb      	adds	r3, r7, r3
   1fff4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   1fff6:	687b      	ldr	r3, [r7, #4]
   1fff8:	b2da      	uxtb	r2, r3
   1fffa:	2314      	movs	r3, #20
   1fffc:	18fb      	adds	r3, r7, r3
   1fffe:	71da      	strb	r2, [r3, #7]
		len = 9;
   20000:	231f      	movs	r3, #31
   20002:	18fb      	adds	r3, r7, r3
   20004:	2209      	movs	r2, #9
   20006:	701a      	strb	r2, [r3, #0]
		break;
   20008:	e004      	b.n	20014 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2000a:	231e      	movs	r3, #30
   2000c:	18fb      	adds	r3, r7, r3
   2000e:	2200      	movs	r2, #0
   20010:	701a      	strb	r2, [r3, #0]
		break;
   20012:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   20014:	231e      	movs	r3, #30
   20016:	18fb      	adds	r3, r7, r3
   20018:	781b      	ldrb	r3, [r3, #0]
   2001a:	b25b      	sxtb	r3, r3
   2001c:	2b00      	cmp	r3, #0
   2001e:	d03f      	beq.n	200a0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   20020:	4b24      	ldr	r3, [pc, #144]	; (200b4 <spi_cmd+0x320>)
   20022:	781b      	ldrb	r3, [r3, #0]
   20024:	2b00      	cmp	r3, #0
   20026:	d115      	bne.n	20054 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   20028:	231f      	movs	r3, #31
   2002a:	18fb      	adds	r3, r7, r3
   2002c:	781b      	ldrb	r3, [r3, #0]
   2002e:	1e5c      	subs	r4, r3, #1
   20030:	231f      	movs	r3, #31
   20032:	18fb      	adds	r3, r7, r3
   20034:	781b      	ldrb	r3, [r3, #0]
   20036:	3b01      	subs	r3, #1
   20038:	001a      	movs	r2, r3
   2003a:	2314      	movs	r3, #20
   2003c:	18fb      	adds	r3, r7, r3
   2003e:	0019      	movs	r1, r3
   20040:	207f      	movs	r0, #127	; 0x7f
   20042:	4b1d      	ldr	r3, [pc, #116]	; (200b8 <spi_cmd+0x324>)
   20044:	4798      	blx	r3
   20046:	0003      	movs	r3, r0
   20048:	18db      	adds	r3, r3, r3
   2004a:	b2da      	uxtb	r2, r3
   2004c:	2314      	movs	r3, #20
   2004e:	18fb      	adds	r3, r7, r3
   20050:	551a      	strb	r2, [r3, r4]
   20052:	e006      	b.n	20062 <spi_cmd+0x2ce>
		else
			len-=1;
   20054:	231f      	movs	r3, #31
   20056:	18fb      	adds	r3, r7, r3
   20058:	221f      	movs	r2, #31
   2005a:	18ba      	adds	r2, r7, r2
   2005c:	7812      	ldrb	r2, [r2, #0]
   2005e:	3a01      	subs	r2, #1
   20060:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   20062:	231f      	movs	r3, #31
   20064:	18fb      	adds	r3, r7, r3
   20066:	781b      	ldrb	r3, [r3, #0]
   20068:	b29a      	uxth	r2, r3
   2006a:	2314      	movs	r3, #20
   2006c:	18fb      	adds	r3, r7, r3
   2006e:	0011      	movs	r1, r2
   20070:	0018      	movs	r0, r3
   20072:	4b12      	ldr	r3, [pc, #72]	; (200bc <spi_cmd+0x328>)
   20074:	4798      	blx	r3
   20076:	1e03      	subs	r3, r0, #0
   20078:	d012      	beq.n	200a0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2007a:	2390      	movs	r3, #144	; 0x90
   2007c:	005a      	lsls	r2, r3, #1
   2007e:	4910      	ldr	r1, [pc, #64]	; (200c0 <spi_cmd+0x32c>)
   20080:	4b10      	ldr	r3, [pc, #64]	; (200c4 <spi_cmd+0x330>)
   20082:	0018      	movs	r0, r3
   20084:	4b10      	ldr	r3, [pc, #64]	; (200c8 <spi_cmd+0x334>)
   20086:	4798      	blx	r3
   20088:	4b10      	ldr	r3, [pc, #64]	; (200cc <spi_cmd+0x338>)
   2008a:	0018      	movs	r0, r3
   2008c:	4b0e      	ldr	r3, [pc, #56]	; (200c8 <spi_cmd+0x334>)
   2008e:	4798      	blx	r3
   20090:	4b0f      	ldr	r3, [pc, #60]	; (200d0 <spi_cmd+0x33c>)
   20092:	0018      	movs	r0, r3
   20094:	4b0c      	ldr	r3, [pc, #48]	; (200c8 <spi_cmd+0x334>)
   20096:	4798      	blx	r3
			result = N_FAIL;
   20098:	231e      	movs	r3, #30
   2009a:	18fb      	adds	r3, r7, r3
   2009c:	2200      	movs	r2, #0
   2009e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   200a0:	231e      	movs	r3, #30
   200a2:	18fb      	adds	r3, r7, r3
   200a4:	781b      	ldrb	r3, [r3, #0]
   200a6:	b25b      	sxtb	r3, r3
}
   200a8:	0018      	movs	r0, r3
   200aa:	46bd      	mov	sp, r7
   200ac:	b009      	add	sp, #36	; 0x24
   200ae:	bd90      	pop	{r4, r7, pc}
   200b0:	000375e4 	.word	0x000375e4
   200b4:	20003d2c 	.word	0x20003d2c
   200b8:	0001fd45 	.word	0x0001fd45
   200bc:	0001fc8d 	.word	0x0001fc8d
   200c0:	0003765c 	.word	0x0003765c
   200c4:	0003706c 	.word	0x0003706c
   200c8:	0001a5e9 	.word	0x0001a5e9
   200cc:	00037080 	.word	0x00037080
   200d0:	000370ac 	.word	0x000370ac

000200d4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   200d4:	b590      	push	{r4, r7, lr}
   200d6:	b085      	sub	sp, #20
   200d8:	af00      	add	r7, sp, #0
   200da:	0002      	movs	r2, r0
   200dc:	1dfb      	adds	r3, r7, #7
   200de:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   200e0:	230e      	movs	r3, #14
   200e2:	18fb      	adds	r3, r7, r3
   200e4:	2201      	movs	r2, #1
   200e6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   200e8:	4b32      	ldr	r3, [pc, #200]	; (201b4 <spi_data_rsp+0xe0>)
   200ea:	781b      	ldrb	r3, [r3, #0]
   200ec:	2b00      	cmp	r3, #0
   200ee:	d104      	bne.n	200fa <spi_data_rsp+0x26>
		len = 2;
   200f0:	230f      	movs	r3, #15
   200f2:	18fb      	adds	r3, r7, r3
   200f4:	2202      	movs	r2, #2
   200f6:	701a      	strb	r2, [r3, #0]
   200f8:	e003      	b.n	20102 <spi_data_rsp+0x2e>
	else
		len = 3;
   200fa:	230f      	movs	r3, #15
   200fc:	18fb      	adds	r3, r7, r3
   200fe:	2203      	movs	r2, #3
   20100:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   20102:	230f      	movs	r3, #15
   20104:	18fb      	adds	r3, r7, r3
   20106:	781b      	ldrb	r3, [r3, #0]
   20108:	b29a      	uxth	r2, r3
   2010a:	2308      	movs	r3, #8
   2010c:	18fb      	adds	r3, r7, r3
   2010e:	0011      	movs	r1, r2
   20110:	0018      	movs	r0, r3
   20112:	4b29      	ldr	r3, [pc, #164]	; (201b8 <spi_data_rsp+0xe4>)
   20114:	4798      	blx	r3
   20116:	1e03      	subs	r3, r0, #0
   20118:	d013      	beq.n	20142 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2011a:	239a      	movs	r3, #154	; 0x9a
   2011c:	005a      	lsls	r2, r3, #1
   2011e:	4927      	ldr	r1, [pc, #156]	; (201bc <spi_data_rsp+0xe8>)
   20120:	4b27      	ldr	r3, [pc, #156]	; (201c0 <spi_data_rsp+0xec>)
   20122:	0018      	movs	r0, r3
   20124:	4b27      	ldr	r3, [pc, #156]	; (201c4 <spi_data_rsp+0xf0>)
   20126:	4798      	blx	r3
   20128:	4b27      	ldr	r3, [pc, #156]	; (201c8 <spi_data_rsp+0xf4>)
   2012a:	0018      	movs	r0, r3
   2012c:	4b25      	ldr	r3, [pc, #148]	; (201c4 <spi_data_rsp+0xf0>)
   2012e:	4798      	blx	r3
   20130:	4b26      	ldr	r3, [pc, #152]	; (201cc <spi_data_rsp+0xf8>)
   20132:	0018      	movs	r0, r3
   20134:	4b23      	ldr	r3, [pc, #140]	; (201c4 <spi_data_rsp+0xf0>)
   20136:	4798      	blx	r3
		result = N_FAIL;
   20138:	230e      	movs	r3, #14
   2013a:	18fb      	adds	r3, r7, r3
   2013c:	2200      	movs	r2, #0
   2013e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   20140:	e030      	b.n	201a4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   20142:	230f      	movs	r3, #15
   20144:	18fb      	adds	r3, r7, r3
   20146:	781b      	ldrb	r3, [r3, #0]
   20148:	3b01      	subs	r3, #1
   2014a:	2208      	movs	r2, #8
   2014c:	18ba      	adds	r2, r7, r2
   2014e:	5cd3      	ldrb	r3, [r2, r3]
   20150:	2b00      	cmp	r3, #0
   20152:	d108      	bne.n	20166 <spi_data_rsp+0x92>
   20154:	230f      	movs	r3, #15
   20156:	18fb      	adds	r3, r7, r3
   20158:	781b      	ldrb	r3, [r3, #0]
   2015a:	3b02      	subs	r3, #2
   2015c:	2208      	movs	r2, #8
   2015e:	18ba      	adds	r2, r7, r2
   20160:	5cd3      	ldrb	r3, [r2, r3]
   20162:	2bc3      	cmp	r3, #195	; 0xc3
   20164:	d01e      	beq.n	201a4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   20166:	233c      	movs	r3, #60	; 0x3c
   20168:	33ff      	adds	r3, #255	; 0xff
   2016a:	001a      	movs	r2, r3
   2016c:	4913      	ldr	r1, [pc, #76]	; (201bc <spi_data_rsp+0xe8>)
   2016e:	4b14      	ldr	r3, [pc, #80]	; (201c0 <spi_data_rsp+0xec>)
   20170:	0018      	movs	r0, r3
   20172:	4b14      	ldr	r3, [pc, #80]	; (201c4 <spi_data_rsp+0xf0>)
   20174:	4798      	blx	r3
   20176:	2308      	movs	r3, #8
   20178:	18fb      	adds	r3, r7, r3
   2017a:	781b      	ldrb	r3, [r3, #0]
   2017c:	0019      	movs	r1, r3
   2017e:	2308      	movs	r3, #8
   20180:	18fb      	adds	r3, r7, r3
   20182:	785b      	ldrb	r3, [r3, #1]
   20184:	001a      	movs	r2, r3
   20186:	2308      	movs	r3, #8
   20188:	18fb      	adds	r3, r7, r3
   2018a:	789b      	ldrb	r3, [r3, #2]
   2018c:	4810      	ldr	r0, [pc, #64]	; (201d0 <spi_data_rsp+0xfc>)
   2018e:	4c0d      	ldr	r4, [pc, #52]	; (201c4 <spi_data_rsp+0xf0>)
   20190:	47a0      	blx	r4
   20192:	4b0e      	ldr	r3, [pc, #56]	; (201cc <spi_data_rsp+0xf8>)
   20194:	0018      	movs	r0, r3
   20196:	4b0b      	ldr	r3, [pc, #44]	; (201c4 <spi_data_rsp+0xf0>)
   20198:	4798      	blx	r3
		result = N_FAIL;
   2019a:	230e      	movs	r3, #14
   2019c:	18fb      	adds	r3, r7, r3
   2019e:	2200      	movs	r2, #0
   201a0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   201a2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   201a4:	230e      	movs	r3, #14
   201a6:	18fb      	adds	r3, r7, r3
   201a8:	781b      	ldrb	r3, [r3, #0]
   201aa:	b25b      	sxtb	r3, r3
}
   201ac:	0018      	movs	r0, r3
   201ae:	46bd      	mov	sp, r7
   201b0:	b005      	add	sp, #20
   201b2:	bd90      	pop	{r4, r7, pc}
   201b4:	20003d2c 	.word	0x20003d2c
   201b8:	0001fc49 	.word	0x0001fc49
   201bc:	00037664 	.word	0x00037664
   201c0:	0003706c 	.word	0x0003706c
   201c4:	0001a5e9 	.word	0x0001a5e9
   201c8:	000370b0 	.word	0x000370b0
   201cc:	000370ac 	.word	0x000370ac
   201d0:	000370d0 	.word	0x000370d0

000201d4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   201d4:	b580      	push	{r7, lr}
   201d6:	b084      	sub	sp, #16
   201d8:	af00      	add	r7, sp, #0
   201da:	0002      	movs	r2, r0
   201dc:	1dfb      	adds	r3, r7, #7
   201de:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   201e0:	230f      	movs	r3, #15
   201e2:	18fb      	adds	r3, r7, r3
   201e4:	2201      	movs	r2, #1
   201e6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   201e8:	1dfb      	adds	r3, r7, #7
   201ea:	781b      	ldrb	r3, [r3, #0]
   201ec:	2bcf      	cmp	r3, #207	; 0xcf
   201ee:	d007      	beq.n	20200 <spi_cmd_rsp+0x2c>
   201f0:	1dfb      	adds	r3, r7, #7
   201f2:	781b      	ldrb	r3, [r3, #0]
   201f4:	2bc5      	cmp	r3, #197	; 0xc5
   201f6:	d003      	beq.n	20200 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   201f8:	1dfb      	adds	r3, r7, #7
   201fa:	781b      	ldrb	r3, [r3, #0]
   201fc:	2bc6      	cmp	r3, #198	; 0xc6
   201fe:	d10c      	bne.n	2021a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   20200:	230d      	movs	r3, #13
   20202:	18fb      	adds	r3, r7, r3
   20204:	2101      	movs	r1, #1
   20206:	0018      	movs	r0, r3
   20208:	4b3b      	ldr	r3, [pc, #236]	; (202f8 <spi_cmd_rsp+0x124>)
   2020a:	4798      	blx	r3
   2020c:	1e03      	subs	r3, r0, #0
   2020e:	d004      	beq.n	2021a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   20210:	230f      	movs	r3, #15
   20212:	18fb      	adds	r3, r7, r3
   20214:	2200      	movs	r2, #0
   20216:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   20218:	e065      	b.n	202e6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2021a:	230e      	movs	r3, #14
   2021c:	18fb      	adds	r3, r7, r3
   2021e:	220a      	movs	r2, #10
   20220:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   20222:	230d      	movs	r3, #13
   20224:	18fb      	adds	r3, r7, r3
   20226:	2101      	movs	r1, #1
   20228:	0018      	movs	r0, r3
   2022a:	4b33      	ldr	r3, [pc, #204]	; (202f8 <spi_cmd_rsp+0x124>)
   2022c:	4798      	blx	r3
   2022e:	1e03      	subs	r3, r0, #0
   20230:	d014      	beq.n	2025c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   20232:	235c      	movs	r3, #92	; 0x5c
   20234:	33ff      	adds	r3, #255	; 0xff
   20236:	001a      	movs	r2, r3
   20238:	4930      	ldr	r1, [pc, #192]	; (202fc <spi_cmd_rsp+0x128>)
   2023a:	4b31      	ldr	r3, [pc, #196]	; (20300 <spi_cmd_rsp+0x12c>)
   2023c:	0018      	movs	r0, r3
   2023e:	4b31      	ldr	r3, [pc, #196]	; (20304 <spi_cmd_rsp+0x130>)
   20240:	4798      	blx	r3
   20242:	4b31      	ldr	r3, [pc, #196]	; (20308 <spi_cmd_rsp+0x134>)
   20244:	0018      	movs	r0, r3
   20246:	4b2f      	ldr	r3, [pc, #188]	; (20304 <spi_cmd_rsp+0x130>)
   20248:	4798      	blx	r3
   2024a:	4b30      	ldr	r3, [pc, #192]	; (2030c <spi_cmd_rsp+0x138>)
   2024c:	0018      	movs	r0, r3
   2024e:	4b2d      	ldr	r3, [pc, #180]	; (20304 <spi_cmd_rsp+0x130>)
   20250:	4798      	blx	r3
			result = N_FAIL;
   20252:	230f      	movs	r3, #15
   20254:	18fb      	adds	r3, r7, r3
   20256:	2200      	movs	r2, #0
   20258:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2025a:	e044      	b.n	202e6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2025c:	230d      	movs	r3, #13
   2025e:	18fb      	adds	r3, r7, r3
   20260:	781b      	ldrb	r3, [r3, #0]
   20262:	1dfa      	adds	r2, r7, #7
   20264:	7812      	ldrb	r2, [r2, #0]
   20266:	429a      	cmp	r2, r3
   20268:	d00b      	beq.n	20282 <spi_cmd_rsp+0xae>
   2026a:	230e      	movs	r3, #14
   2026c:	18fb      	adds	r3, r7, r3
   2026e:	781b      	ldrb	r3, [r3, #0]
   20270:	b25b      	sxtb	r3, r3
   20272:	b2da      	uxtb	r2, r3
   20274:	3a01      	subs	r2, #1
   20276:	b2d1      	uxtb	r1, r2
   20278:	220e      	movs	r2, #14
   2027a:	18ba      	adds	r2, r7, r2
   2027c:	7011      	strb	r1, [r2, #0]
   2027e:	2b00      	cmp	r3, #0
   20280:	dccf      	bgt.n	20222 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   20282:	230e      	movs	r3, #14
   20284:	18fb      	adds	r3, r7, r3
   20286:	220a      	movs	r2, #10
   20288:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2028a:	230d      	movs	r3, #13
   2028c:	18fb      	adds	r3, r7, r3
   2028e:	2101      	movs	r1, #1
   20290:	0018      	movs	r0, r3
   20292:	4b19      	ldr	r3, [pc, #100]	; (202f8 <spi_cmd_rsp+0x124>)
   20294:	4798      	blx	r3
   20296:	1e03      	subs	r3, r0, #0
   20298:	d014      	beq.n	202c4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2029a:	236a      	movs	r3, #106	; 0x6a
   2029c:	33ff      	adds	r3, #255	; 0xff
   2029e:	001a      	movs	r2, r3
   202a0:	4916      	ldr	r1, [pc, #88]	; (202fc <spi_cmd_rsp+0x128>)
   202a2:	4b17      	ldr	r3, [pc, #92]	; (20300 <spi_cmd_rsp+0x12c>)
   202a4:	0018      	movs	r0, r3
   202a6:	4b17      	ldr	r3, [pc, #92]	; (20304 <spi_cmd_rsp+0x130>)
   202a8:	4798      	blx	r3
   202aa:	4b17      	ldr	r3, [pc, #92]	; (20308 <spi_cmd_rsp+0x134>)
   202ac:	0018      	movs	r0, r3
   202ae:	4b15      	ldr	r3, [pc, #84]	; (20304 <spi_cmd_rsp+0x130>)
   202b0:	4798      	blx	r3
   202b2:	4b16      	ldr	r3, [pc, #88]	; (2030c <spi_cmd_rsp+0x138>)
   202b4:	0018      	movs	r0, r3
   202b6:	4b13      	ldr	r3, [pc, #76]	; (20304 <spi_cmd_rsp+0x130>)
   202b8:	4798      	blx	r3
			result = N_FAIL;
   202ba:	230f      	movs	r3, #15
   202bc:	18fb      	adds	r3, r7, r3
   202be:	2200      	movs	r2, #0
   202c0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   202c2:	e010      	b.n	202e6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   202c4:	230d      	movs	r3, #13
   202c6:	18fb      	adds	r3, r7, r3
   202c8:	781b      	ldrb	r3, [r3, #0]
   202ca:	2b00      	cmp	r3, #0
   202cc:	d00b      	beq.n	202e6 <spi_cmd_rsp+0x112>
   202ce:	230e      	movs	r3, #14
   202d0:	18fb      	adds	r3, r7, r3
   202d2:	781b      	ldrb	r3, [r3, #0]
   202d4:	b25b      	sxtb	r3, r3
   202d6:	b2da      	uxtb	r2, r3
   202d8:	3a01      	subs	r2, #1
   202da:	b2d1      	uxtb	r1, r2
   202dc:	220e      	movs	r2, #14
   202de:	18ba      	adds	r2, r7, r2
   202e0:	7011      	strb	r1, [r2, #0]
   202e2:	2b00      	cmp	r3, #0
   202e4:	dcd1      	bgt.n	2028a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   202e6:	230f      	movs	r3, #15
   202e8:	18fb      	adds	r3, r7, r3
   202ea:	781b      	ldrb	r3, [r3, #0]
   202ec:	b25b      	sxtb	r3, r3
}
   202ee:	0018      	movs	r0, r3
   202f0:	46bd      	mov	sp, r7
   202f2:	b004      	add	sp, #16
   202f4:	bd80      	pop	{r7, pc}
   202f6:	46c0      	nop			; (mov r8, r8)
   202f8:	0001fc49 	.word	0x0001fc49
   202fc:	00037674 	.word	0x00037674
   20300:	0003706c 	.word	0x0003706c
   20304:	0001a5e9 	.word	0x0001a5e9
   20308:	00037100 	.word	0x00037100
   2030c:	000370ac 	.word	0x000370ac

00020310 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   20310:	b590      	push	{r4, r7, lr}
   20312:	b09f      	sub	sp, #124	; 0x7c
   20314:	af00      	add	r7, sp, #0
   20316:	60b9      	str	r1, [r7, #8]
   20318:	607a      	str	r2, [r7, #4]
   2031a:	603b      	str	r3, [r7, #0]
   2031c:	230f      	movs	r3, #15
   2031e:	18fb      	adds	r3, r7, r3
   20320:	1c02      	adds	r2, r0, #0
   20322:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   20324:	2300      	movs	r3, #0
   20326:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   20328:	2301      	movs	r3, #1
   2032a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2032c:	2338      	movs	r3, #56	; 0x38
   2032e:	18fb      	adds	r3, r7, r3
   20330:	220f      	movs	r2, #15
   20332:	18ba      	adds	r2, r7, r2
   20334:	7812      	ldrb	r2, [r2, #0]
   20336:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   20338:	230f      	movs	r3, #15
   2033a:	18fb      	adds	r3, r7, r3
   2033c:	781b      	ldrb	r3, [r3, #0]
   2033e:	3bc1      	subs	r3, #193	; 0xc1
   20340:	2b0e      	cmp	r3, #14
   20342:	d900      	bls.n	20346 <spi_cmd_complete+0x36>
   20344:	e103      	b.n	2054e <spi_cmd_complete+0x23e>
   20346:	009a      	lsls	r2, r3, #2
   20348:	4bd1      	ldr	r3, [pc, #836]	; (20690 <spi_cmd_complete+0x380>)
   2034a:	18d3      	adds	r3, r2, r3
   2034c:	681b      	ldr	r3, [r3, #0]
   2034e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   20350:	68bb      	ldr	r3, [r7, #8]
   20352:	0c1b      	lsrs	r3, r3, #16
   20354:	b2da      	uxtb	r2, r3
   20356:	2338      	movs	r3, #56	; 0x38
   20358:	18fb      	adds	r3, r7, r3
   2035a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2035c:	68bb      	ldr	r3, [r7, #8]
   2035e:	0a1b      	lsrs	r3, r3, #8
   20360:	b2da      	uxtb	r2, r3
   20362:	2338      	movs	r3, #56	; 0x38
   20364:	18fb      	adds	r3, r7, r3
   20366:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   20368:	68bb      	ldr	r3, [r7, #8]
   2036a:	b2da      	uxtb	r2, r3
   2036c:	2338      	movs	r3, #56	; 0x38
   2036e:	18fb      	adds	r3, r7, r3
   20370:	70da      	strb	r2, [r3, #3]
		len = 5;
   20372:	2305      	movs	r3, #5
   20374:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   20376:	e0ed      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   20378:	68bb      	ldr	r3, [r7, #8]
   2037a:	0a1b      	lsrs	r3, r3, #8
   2037c:	b2da      	uxtb	r2, r3
   2037e:	2338      	movs	r3, #56	; 0x38
   20380:	18fb      	adds	r3, r7, r3
   20382:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   20384:	2388      	movs	r3, #136	; 0x88
   20386:	18fb      	adds	r3, r7, r3
   20388:	781b      	ldrb	r3, [r3, #0]
   2038a:	2b01      	cmp	r3, #1
   2038c:	d109      	bne.n	203a2 <spi_cmd_complete+0x92>
   2038e:	2338      	movs	r3, #56	; 0x38
   20390:	18fb      	adds	r3, r7, r3
   20392:	785b      	ldrb	r3, [r3, #1]
   20394:	2280      	movs	r2, #128	; 0x80
   20396:	4252      	negs	r2, r2
   20398:	4313      	orrs	r3, r2
   2039a:	b2da      	uxtb	r2, r3
   2039c:	2338      	movs	r3, #56	; 0x38
   2039e:	18fb      	adds	r3, r7, r3
   203a0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   203a2:	68bb      	ldr	r3, [r7, #8]
   203a4:	b2da      	uxtb	r2, r3
   203a6:	2338      	movs	r3, #56	; 0x38
   203a8:	18fb      	adds	r3, r7, r3
   203aa:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   203ac:	2338      	movs	r3, #56	; 0x38
   203ae:	18fb      	adds	r3, r7, r3
   203b0:	2200      	movs	r2, #0
   203b2:	70da      	strb	r2, [r3, #3]
		len = 5;
   203b4:	2305      	movs	r3, #5
   203b6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   203b8:	e0cc      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   203ba:	2338      	movs	r3, #56	; 0x38
   203bc:	18fb      	adds	r3, r7, r3
   203be:	2200      	movs	r2, #0
   203c0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   203c2:	2338      	movs	r3, #56	; 0x38
   203c4:	18fb      	adds	r3, r7, r3
   203c6:	2200      	movs	r2, #0
   203c8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   203ca:	2338      	movs	r3, #56	; 0x38
   203cc:	18fb      	adds	r3, r7, r3
   203ce:	2200      	movs	r2, #0
   203d0:	70da      	strb	r2, [r3, #3]
		len = 5;
   203d2:	2305      	movs	r3, #5
   203d4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   203d6:	e0bd      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   203d8:	2338      	movs	r3, #56	; 0x38
   203da:	18fb      	adds	r3, r7, r3
   203dc:	2200      	movs	r2, #0
   203de:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   203e0:	2338      	movs	r3, #56	; 0x38
   203e2:	18fb      	adds	r3, r7, r3
   203e4:	2200      	movs	r2, #0
   203e6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   203e8:	2338      	movs	r3, #56	; 0x38
   203ea:	18fb      	adds	r3, r7, r3
   203ec:	2200      	movs	r2, #0
   203ee:	70da      	strb	r2, [r3, #3]
		len = 5;
   203f0:	2305      	movs	r3, #5
   203f2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   203f4:	e0ae      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   203f6:	2338      	movs	r3, #56	; 0x38
   203f8:	18fb      	adds	r3, r7, r3
   203fa:	22ff      	movs	r2, #255	; 0xff
   203fc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   203fe:	2338      	movs	r3, #56	; 0x38
   20400:	18fb      	adds	r3, r7, r3
   20402:	22ff      	movs	r2, #255	; 0xff
   20404:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   20406:	2338      	movs	r3, #56	; 0x38
   20408:	18fb      	adds	r3, r7, r3
   2040a:	22ff      	movs	r2, #255	; 0xff
   2040c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2040e:	2305      	movs	r3, #5
   20410:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   20412:	e09f      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   20414:	68bb      	ldr	r3, [r7, #8]
   20416:	0c1b      	lsrs	r3, r3, #16
   20418:	b2da      	uxtb	r2, r3
   2041a:	2338      	movs	r3, #56	; 0x38
   2041c:	18fb      	adds	r3, r7, r3
   2041e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   20420:	68bb      	ldr	r3, [r7, #8]
   20422:	0a1b      	lsrs	r3, r3, #8
   20424:	b2da      	uxtb	r2, r3
   20426:	2338      	movs	r3, #56	; 0x38
   20428:	18fb      	adds	r3, r7, r3
   2042a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2042c:	68bb      	ldr	r3, [r7, #8]
   2042e:	b2da      	uxtb	r2, r3
   20430:	2338      	movs	r3, #56	; 0x38
   20432:	18fb      	adds	r3, r7, r3
   20434:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   20436:	683b      	ldr	r3, [r7, #0]
   20438:	0a1b      	lsrs	r3, r3, #8
   2043a:	b2da      	uxtb	r2, r3
   2043c:	2338      	movs	r3, #56	; 0x38
   2043e:	18fb      	adds	r3, r7, r3
   20440:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   20442:	683b      	ldr	r3, [r7, #0]
   20444:	b2da      	uxtb	r2, r3
   20446:	2338      	movs	r3, #56	; 0x38
   20448:	18fb      	adds	r3, r7, r3
   2044a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2044c:	2307      	movs	r3, #7
   2044e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   20450:	e080      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   20452:	68bb      	ldr	r3, [r7, #8]
   20454:	0c1b      	lsrs	r3, r3, #16
   20456:	b2da      	uxtb	r2, r3
   20458:	2338      	movs	r3, #56	; 0x38
   2045a:	18fb      	adds	r3, r7, r3
   2045c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2045e:	68bb      	ldr	r3, [r7, #8]
   20460:	0a1b      	lsrs	r3, r3, #8
   20462:	b2da      	uxtb	r2, r3
   20464:	2338      	movs	r3, #56	; 0x38
   20466:	18fb      	adds	r3, r7, r3
   20468:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2046a:	68bb      	ldr	r3, [r7, #8]
   2046c:	b2da      	uxtb	r2, r3
   2046e:	2338      	movs	r3, #56	; 0x38
   20470:	18fb      	adds	r3, r7, r3
   20472:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   20474:	683b      	ldr	r3, [r7, #0]
   20476:	0c1b      	lsrs	r3, r3, #16
   20478:	b2da      	uxtb	r2, r3
   2047a:	2338      	movs	r3, #56	; 0x38
   2047c:	18fb      	adds	r3, r7, r3
   2047e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   20480:	683b      	ldr	r3, [r7, #0]
   20482:	0a1b      	lsrs	r3, r3, #8
   20484:	b2da      	uxtb	r2, r3
   20486:	2338      	movs	r3, #56	; 0x38
   20488:	18fb      	adds	r3, r7, r3
   2048a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   2048c:	683b      	ldr	r3, [r7, #0]
   2048e:	b2da      	uxtb	r2, r3
   20490:	2338      	movs	r3, #56	; 0x38
   20492:	18fb      	adds	r3, r7, r3
   20494:	719a      	strb	r2, [r3, #6]
		len = 8;
   20496:	2308      	movs	r3, #8
   20498:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2049a:	e05b      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   2049c:	68bb      	ldr	r3, [r7, #8]
   2049e:	0a1b      	lsrs	r3, r3, #8
   204a0:	b2da      	uxtb	r2, r3
   204a2:	2338      	movs	r3, #56	; 0x38
   204a4:	18fb      	adds	r3, r7, r3
   204a6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   204a8:	2388      	movs	r3, #136	; 0x88
   204aa:	18fb      	adds	r3, r7, r3
   204ac:	781b      	ldrb	r3, [r3, #0]
   204ae:	2b01      	cmp	r3, #1
   204b0:	d109      	bne.n	204c6 <spi_cmd_complete+0x1b6>
   204b2:	2338      	movs	r3, #56	; 0x38
   204b4:	18fb      	adds	r3, r7, r3
   204b6:	785b      	ldrb	r3, [r3, #1]
   204b8:	2280      	movs	r2, #128	; 0x80
   204ba:	4252      	negs	r2, r2
   204bc:	4313      	orrs	r3, r2
   204be:	b2da      	uxtb	r2, r3
   204c0:	2338      	movs	r3, #56	; 0x38
   204c2:	18fb      	adds	r3, r7, r3
   204c4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   204c6:	68bb      	ldr	r3, [r7, #8]
   204c8:	b2da      	uxtb	r2, r3
   204ca:	2338      	movs	r3, #56	; 0x38
   204cc:	18fb      	adds	r3, r7, r3
   204ce:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   204d0:	687b      	ldr	r3, [r7, #4]
   204d2:	78da      	ldrb	r2, [r3, #3]
   204d4:	2338      	movs	r3, #56	; 0x38
   204d6:	18fb      	adds	r3, r7, r3
   204d8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   204da:	687b      	ldr	r3, [r7, #4]
   204dc:	789a      	ldrb	r2, [r3, #2]
   204de:	2338      	movs	r3, #56	; 0x38
   204e0:	18fb      	adds	r3, r7, r3
   204e2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   204e4:	687b      	ldr	r3, [r7, #4]
   204e6:	785a      	ldrb	r2, [r3, #1]
   204e8:	2338      	movs	r3, #56	; 0x38
   204ea:	18fb      	adds	r3, r7, r3
   204ec:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   204ee:	687b      	ldr	r3, [r7, #4]
   204f0:	781a      	ldrb	r2, [r3, #0]
   204f2:	2338      	movs	r3, #56	; 0x38
   204f4:	18fb      	adds	r3, r7, r3
   204f6:	719a      	strb	r2, [r3, #6]
		len = 8;
   204f8:	2308      	movs	r3, #8
   204fa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   204fc:	e02a      	b.n	20554 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   204fe:	68bb      	ldr	r3, [r7, #8]
   20500:	0c1b      	lsrs	r3, r3, #16
   20502:	b2da      	uxtb	r2, r3
   20504:	2338      	movs	r3, #56	; 0x38
   20506:	18fb      	adds	r3, r7, r3
   20508:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2050a:	68bb      	ldr	r3, [r7, #8]
   2050c:	0a1b      	lsrs	r3, r3, #8
   2050e:	b2da      	uxtb	r2, r3
   20510:	2338      	movs	r3, #56	; 0x38
   20512:	18fb      	adds	r3, r7, r3
   20514:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   20516:	68bb      	ldr	r3, [r7, #8]
   20518:	b2da      	uxtb	r2, r3
   2051a:	2338      	movs	r3, #56	; 0x38
   2051c:	18fb      	adds	r3, r7, r3
   2051e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   20520:	687b      	ldr	r3, [r7, #4]
   20522:	78da      	ldrb	r2, [r3, #3]
   20524:	2338      	movs	r3, #56	; 0x38
   20526:	18fb      	adds	r3, r7, r3
   20528:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2052a:	687b      	ldr	r3, [r7, #4]
   2052c:	789a      	ldrb	r2, [r3, #2]
   2052e:	2338      	movs	r3, #56	; 0x38
   20530:	18fb      	adds	r3, r7, r3
   20532:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   20534:	687b      	ldr	r3, [r7, #4]
   20536:	785a      	ldrb	r2, [r3, #1]
   20538:	2338      	movs	r3, #56	; 0x38
   2053a:	18fb      	adds	r3, r7, r3
   2053c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2053e:	687b      	ldr	r3, [r7, #4]
   20540:	781a      	ldrb	r2, [r3, #0]
   20542:	2338      	movs	r3, #56	; 0x38
   20544:	18fb      	adds	r3, r7, r3
   20546:	71da      	strb	r2, [r3, #7]
		len = 9;
   20548:	2309      	movs	r3, #9
   2054a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2054c:	e002      	b.n	20554 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2054e:	2300      	movs	r3, #0
   20550:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   20552:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   20554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20556:	2b01      	cmp	r3, #1
   20558:	d001      	beq.n	2055e <spi_cmd_complete+0x24e>
		return result;
   2055a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2055c:	e33a      	b.n	20bd4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2055e:	4b4d      	ldr	r3, [pc, #308]	; (20694 <spi_cmd_complete+0x384>)
   20560:	781b      	ldrb	r3, [r3, #0]
   20562:	2b00      	cmp	r3, #0
   20564:	d111      	bne.n	2058a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   20566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   20568:	1e5c      	subs	r4, r3, #1
   2056a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2056c:	3b01      	subs	r3, #1
   2056e:	001a      	movs	r2, r3
   20570:	2338      	movs	r3, #56	; 0x38
   20572:	18fb      	adds	r3, r7, r3
   20574:	0019      	movs	r1, r3
   20576:	207f      	movs	r0, #127	; 0x7f
   20578:	4b47      	ldr	r3, [pc, #284]	; (20698 <spi_cmd_complete+0x388>)
   2057a:	4798      	blx	r3
   2057c:	0003      	movs	r3, r0
   2057e:	18db      	adds	r3, r3, r3
   20580:	b2da      	uxtb	r2, r3
   20582:	2338      	movs	r3, #56	; 0x38
   20584:	18fb      	adds	r3, r7, r3
   20586:	551a      	strb	r2, [r3, r4]
   20588:	e002      	b.n	20590 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2058a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2058c:	3b01      	subs	r3, #1
   2058e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   20590:	230f      	movs	r3, #15
   20592:	18fb      	adds	r3, r7, r3
   20594:	781b      	ldrb	r3, [r3, #0]
   20596:	2bcf      	cmp	r3, #207	; 0xcf
   20598:	d009      	beq.n	205ae <spi_cmd_complete+0x29e>
   2059a:	230f      	movs	r3, #15
   2059c:	18fb      	adds	r3, r7, r3
   2059e:	781b      	ldrb	r3, [r3, #0]
   205a0:	2bc5      	cmp	r3, #197	; 0xc5
   205a2:	d004      	beq.n	205ae <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   205a4:	230f      	movs	r3, #15
   205a6:	18fb      	adds	r3, r7, r3
   205a8:	781b      	ldrb	r3, [r3, #0]
   205aa:	2bc6      	cmp	r3, #198	; 0xc6
   205ac:	d103      	bne.n	205b6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   205ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   205b0:	3306      	adds	r3, #6
   205b2:	673b      	str	r3, [r7, #112]	; 0x70
   205b4:	e018      	b.n	205e8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   205b6:	230f      	movs	r3, #15
   205b8:	18fb      	adds	r3, r7, r3
   205ba:	781b      	ldrb	r3, [r3, #0]
   205bc:	2bc4      	cmp	r3, #196	; 0xc4
   205be:	d004      	beq.n	205ca <spi_cmd_complete+0x2ba>
   205c0:	230f      	movs	r3, #15
   205c2:	18fb      	adds	r3, r7, r3
   205c4:	781b      	ldrb	r3, [r3, #0]
   205c6:	2bca      	cmp	r3, #202	; 0xca
   205c8:	d10b      	bne.n	205e2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   205ca:	4b32      	ldr	r3, [pc, #200]	; (20694 <spi_cmd_complete+0x384>)
   205cc:	781b      	ldrb	r3, [r3, #0]
   205ce:	2b00      	cmp	r3, #0
   205d0:	d103      	bne.n	205da <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   205d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   205d4:	330c      	adds	r3, #12
   205d6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   205d8:	e006      	b.n	205e8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   205da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   205dc:	330a      	adds	r3, #10
   205de:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   205e0:	e002      	b.n	205e8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   205e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   205e4:	3305      	adds	r3, #5
   205e6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   205e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   205ea:	2b20      	cmp	r3, #32
   205ec:	d914      	bls.n	20618 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   205ee:	23f7      	movs	r3, #247	; 0xf7
   205f0:	005a      	lsls	r2, r3, #1
   205f2:	492a      	ldr	r1, [pc, #168]	; (2069c <spi_cmd_complete+0x38c>)
   205f4:	4b2a      	ldr	r3, [pc, #168]	; (206a0 <spi_cmd_complete+0x390>)
   205f6:	0018      	movs	r0, r3
   205f8:	4b2a      	ldr	r3, [pc, #168]	; (206a4 <spi_cmd_complete+0x394>)
   205fa:	4798      	blx	r3
   205fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   205fe:	4b2a      	ldr	r3, [pc, #168]	; (206a8 <spi_cmd_complete+0x398>)
   20600:	2220      	movs	r2, #32
   20602:	0018      	movs	r0, r3
   20604:	4b27      	ldr	r3, [pc, #156]	; (206a4 <spi_cmd_complete+0x394>)
   20606:	4798      	blx	r3
   20608:	4b28      	ldr	r3, [pc, #160]	; (206ac <spi_cmd_complete+0x39c>)
   2060a:	0018      	movs	r0, r3
   2060c:	4b25      	ldr	r3, [pc, #148]	; (206a4 <spi_cmd_complete+0x394>)
   2060e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   20610:	2300      	movs	r3, #0
   20612:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   20614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20616:	e2dd      	b.n	20bd4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   20618:	2377      	movs	r3, #119	; 0x77
   2061a:	18fb      	adds	r3, r7, r3
   2061c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2061e:	701a      	strb	r2, [r3, #0]
   20620:	e00d      	b.n	2063e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   20622:	2377      	movs	r3, #119	; 0x77
   20624:	18fb      	adds	r3, r7, r3
   20626:	781b      	ldrb	r3, [r3, #0]
   20628:	2238      	movs	r2, #56	; 0x38
   2062a:	18ba      	adds	r2, r7, r2
   2062c:	2100      	movs	r1, #0
   2062e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   20630:	2377      	movs	r3, #119	; 0x77
   20632:	18fb      	adds	r3, r7, r3
   20634:	781a      	ldrb	r2, [r3, #0]
   20636:	2377      	movs	r3, #119	; 0x77
   20638:	18fb      	adds	r3, r7, r3
   2063a:	3201      	adds	r2, #1
   2063c:	701a      	strb	r2, [r3, #0]
   2063e:	2377      	movs	r3, #119	; 0x77
   20640:	18fb      	adds	r3, r7, r3
   20642:	781a      	ldrb	r2, [r3, #0]
   20644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   20646:	429a      	cmp	r2, r3
   20648:	d3eb      	bcc.n	20622 <spi_cmd_complete+0x312>
	}
	rix = len;
   2064a:	2376      	movs	r3, #118	; 0x76
   2064c:	18fb      	adds	r3, r7, r3
   2064e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   20650:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   20652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   20654:	b29a      	uxth	r2, r3
   20656:	2318      	movs	r3, #24
   20658:	18f9      	adds	r1, r7, r3
   2065a:	2338      	movs	r3, #56	; 0x38
   2065c:	18fb      	adds	r3, r7, r3
   2065e:	0018      	movs	r0, r3
   20660:	4b13      	ldr	r3, [pc, #76]	; (206b0 <spi_cmd_complete+0x3a0>)
   20662:	4798      	blx	r3
   20664:	1e03      	subs	r3, r0, #0
   20666:	d027      	beq.n	206b8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   20668:	23fa      	movs	r3, #250	; 0xfa
   2066a:	33ff      	adds	r3, #255	; 0xff
   2066c:	001a      	movs	r2, r3
   2066e:	490b      	ldr	r1, [pc, #44]	; (2069c <spi_cmd_complete+0x38c>)
   20670:	4b0b      	ldr	r3, [pc, #44]	; (206a0 <spi_cmd_complete+0x390>)
   20672:	0018      	movs	r0, r3
   20674:	4b0b      	ldr	r3, [pc, #44]	; (206a4 <spi_cmd_complete+0x394>)
   20676:	4798      	blx	r3
   20678:	4b0e      	ldr	r3, [pc, #56]	; (206b4 <spi_cmd_complete+0x3a4>)
   2067a:	0018      	movs	r0, r3
   2067c:	4b09      	ldr	r3, [pc, #36]	; (206a4 <spi_cmd_complete+0x394>)
   2067e:	4798      	blx	r3
   20680:	4b0a      	ldr	r3, [pc, #40]	; (206ac <spi_cmd_complete+0x39c>)
   20682:	0018      	movs	r0, r3
   20684:	4b07      	ldr	r3, [pc, #28]	; (206a4 <spi_cmd_complete+0x394>)
   20686:	4798      	blx	r3
		result = N_FAIL;
   20688:	2300      	movs	r3, #0
   2068a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2068c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2068e:	e2a1      	b.n	20bd4 <spi_cmd_complete+0x8c4>
   20690:	00037620 	.word	0x00037620
   20694:	20003d2c 	.word	0x20003d2c
   20698:	0001fd45 	.word	0x0001fd45
   2069c:	00037680 	.word	0x00037680
   206a0:	0003706c 	.word	0x0003706c
   206a4:	0001a5e9 	.word	0x0001a5e9
   206a8:	00037134 	.word	0x00037134
   206ac:	000370ac 	.word	0x000370ac
   206b0:	0001fcd1 	.word	0x0001fcd1
   206b4:	00037080 	.word	0x00037080
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   206b8:	230f      	movs	r3, #15
   206ba:	18fb      	adds	r3, r7, r3
   206bc:	781b      	ldrb	r3, [r3, #0]
   206be:	2bcf      	cmp	r3, #207	; 0xcf
   206c0:	d009      	beq.n	206d6 <spi_cmd_complete+0x3c6>
   206c2:	230f      	movs	r3, #15
   206c4:	18fb      	adds	r3, r7, r3
   206c6:	781b      	ldrb	r3, [r3, #0]
   206c8:	2bc5      	cmp	r3, #197	; 0xc5
   206ca:	d004      	beq.n	206d6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   206cc:	230f      	movs	r3, #15
   206ce:	18fb      	adds	r3, r7, r3
   206d0:	781b      	ldrb	r3, [r3, #0]
   206d2:	2bc6      	cmp	r3, #198	; 0xc6
   206d4:	d106      	bne.n	206e4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   206d6:	2376      	movs	r3, #118	; 0x76
   206d8:	18fb      	adds	r3, r7, r3
   206da:	781a      	ldrb	r2, [r3, #0]
   206dc:	2376      	movs	r3, #118	; 0x76
   206de:	18fb      	adds	r3, r7, r3
   206e0:	3201      	adds	r2, #1
   206e2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   206e4:	2376      	movs	r3, #118	; 0x76
   206e6:	18fb      	adds	r3, r7, r3
   206e8:	781b      	ldrb	r3, [r3, #0]
   206ea:	2276      	movs	r2, #118	; 0x76
   206ec:	18ba      	adds	r2, r7, r2
   206ee:	1c59      	adds	r1, r3, #1
   206f0:	7011      	strb	r1, [r2, #0]
   206f2:	001a      	movs	r2, r3
   206f4:	2318      	movs	r3, #24
   206f6:	18fb      	adds	r3, r7, r3
   206f8:	5c9a      	ldrb	r2, [r3, r2]
   206fa:	2317      	movs	r3, #23
   206fc:	18fb      	adds	r3, r7, r3
   206fe:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   20700:	2317      	movs	r3, #23
   20702:	18fb      	adds	r3, r7, r3
   20704:	781b      	ldrb	r3, [r3, #0]
   20706:	220f      	movs	r2, #15
   20708:	18ba      	adds	r2, r7, r2
   2070a:	7812      	ldrb	r2, [r2, #0]
   2070c:	429a      	cmp	r2, r3
   2070e:	d018      	beq.n	20742 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   20710:	4add      	ldr	r2, [pc, #884]	; (20a88 <spi_cmd_complete+0x778>)
   20712:	49de      	ldr	r1, [pc, #888]	; (20a8c <spi_cmd_complete+0x77c>)
   20714:	4bde      	ldr	r3, [pc, #888]	; (20a90 <spi_cmd_complete+0x780>)
   20716:	0018      	movs	r0, r3
   20718:	4bde      	ldr	r3, [pc, #888]	; (20a94 <spi_cmd_complete+0x784>)
   2071a:	4798      	blx	r3
   2071c:	230f      	movs	r3, #15
   2071e:	18fb      	adds	r3, r7, r3
   20720:	7819      	ldrb	r1, [r3, #0]
   20722:	2317      	movs	r3, #23
   20724:	18fb      	adds	r3, r7, r3
   20726:	781b      	ldrb	r3, [r3, #0]
   20728:	001a      	movs	r2, r3
   2072a:	4bdb      	ldr	r3, [pc, #876]	; (20a98 <spi_cmd_complete+0x788>)
   2072c:	0018      	movs	r0, r3
   2072e:	4bd9      	ldr	r3, [pc, #868]	; (20a94 <spi_cmd_complete+0x784>)
   20730:	4798      	blx	r3
   20732:	4bda      	ldr	r3, [pc, #872]	; (20a9c <spi_cmd_complete+0x78c>)
   20734:	0018      	movs	r0, r3
   20736:	4bd7      	ldr	r3, [pc, #860]	; (20a94 <spi_cmd_complete+0x784>)
   20738:	4798      	blx	r3
		result = N_FAIL;
   2073a:	2300      	movs	r3, #0
   2073c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2073e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20740:	e248      	b.n	20bd4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   20742:	2376      	movs	r3, #118	; 0x76
   20744:	18fb      	adds	r3, r7, r3
   20746:	781b      	ldrb	r3, [r3, #0]
   20748:	2276      	movs	r2, #118	; 0x76
   2074a:	18ba      	adds	r2, r7, r2
   2074c:	1c59      	adds	r1, r3, #1
   2074e:	7011      	strb	r1, [r2, #0]
   20750:	001a      	movs	r2, r3
   20752:	2318      	movs	r3, #24
   20754:	18fb      	adds	r3, r7, r3
   20756:	5c9a      	ldrb	r2, [r3, r2]
   20758:	2317      	movs	r3, #23
   2075a:	18fb      	adds	r3, r7, r3
   2075c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2075e:	2317      	movs	r3, #23
   20760:	18fb      	adds	r3, r7, r3
   20762:	781b      	ldrb	r3, [r3, #0]
   20764:	2b00      	cmp	r3, #0
   20766:	d016      	beq.n	20796 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   20768:	4acd      	ldr	r2, [pc, #820]	; (20aa0 <spi_cmd_complete+0x790>)
   2076a:	49c8      	ldr	r1, [pc, #800]	; (20a8c <spi_cmd_complete+0x77c>)
   2076c:	4bc8      	ldr	r3, [pc, #800]	; (20a90 <spi_cmd_complete+0x780>)
   2076e:	0018      	movs	r0, r3
   20770:	4bc8      	ldr	r3, [pc, #800]	; (20a94 <spi_cmd_complete+0x784>)
   20772:	4798      	blx	r3
   20774:	2317      	movs	r3, #23
   20776:	18fb      	adds	r3, r7, r3
   20778:	781b      	ldrb	r3, [r3, #0]
   2077a:	001a      	movs	r2, r3
   2077c:	4bc9      	ldr	r3, [pc, #804]	; (20aa4 <spi_cmd_complete+0x794>)
   2077e:	0011      	movs	r1, r2
   20780:	0018      	movs	r0, r3
   20782:	4bc4      	ldr	r3, [pc, #784]	; (20a94 <spi_cmd_complete+0x784>)
   20784:	4798      	blx	r3
   20786:	4bc5      	ldr	r3, [pc, #788]	; (20a9c <spi_cmd_complete+0x78c>)
   20788:	0018      	movs	r0, r3
   2078a:	4bc2      	ldr	r3, [pc, #776]	; (20a94 <spi_cmd_complete+0x784>)
   2078c:	4798      	blx	r3
		result = N_FAIL;
   2078e:	2300      	movs	r3, #0
   20790:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   20792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20794:	e21e      	b.n	20bd4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   20796:	230f      	movs	r3, #15
   20798:	18fb      	adds	r3, r7, r3
   2079a:	781b      	ldrb	r3, [r3, #0]
   2079c:	2bc4      	cmp	r3, #196	; 0xc4
   2079e:	d00f      	beq.n	207c0 <spi_cmd_complete+0x4b0>
   207a0:	230f      	movs	r3, #15
   207a2:	18fb      	adds	r3, r7, r3
   207a4:	781b      	ldrb	r3, [r3, #0]
   207a6:	2bca      	cmp	r3, #202	; 0xca
   207a8:	d00a      	beq.n	207c0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   207aa:	230f      	movs	r3, #15
   207ac:	18fb      	adds	r3, r7, r3
   207ae:	781b      	ldrb	r3, [r3, #0]
   207b0:	2bc2      	cmp	r3, #194	; 0xc2
   207b2:	d005      	beq.n	207c0 <spi_cmd_complete+0x4b0>
   207b4:	230f      	movs	r3, #15
   207b6:	18fb      	adds	r3, r7, r3
   207b8:	781b      	ldrb	r3, [r3, #0]
   207ba:	2bc8      	cmp	r3, #200	; 0xc8
   207bc:	d000      	beq.n	207c0 <spi_cmd_complete+0x4b0>
   207be:	e208      	b.n	20bd2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   207c0:	230a      	movs	r3, #10
   207c2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   207c4:	2376      	movs	r3, #118	; 0x76
   207c6:	18fb      	adds	r3, r7, r3
   207c8:	781a      	ldrb	r2, [r3, #0]
   207ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   207cc:	429a      	cmp	r2, r3
   207ce:	d218      	bcs.n	20802 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   207d0:	2376      	movs	r3, #118	; 0x76
   207d2:	18fb      	adds	r3, r7, r3
   207d4:	781b      	ldrb	r3, [r3, #0]
   207d6:	2276      	movs	r2, #118	; 0x76
   207d8:	18ba      	adds	r2, r7, r2
   207da:	1c59      	adds	r1, r3, #1
   207dc:	7011      	strb	r1, [r2, #0]
   207de:	001a      	movs	r2, r3
   207e0:	2318      	movs	r3, #24
   207e2:	18fb      	adds	r3, r7, r3
   207e4:	5c9a      	ldrb	r2, [r3, r2]
   207e6:	2317      	movs	r3, #23
   207e8:	18fb      	adds	r3, r7, r3
   207ea:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   207ec:	2317      	movs	r3, #23
   207ee:	18fb      	adds	r3, r7, r3
   207f0:	781b      	ldrb	r3, [r3, #0]
   207f2:	091b      	lsrs	r3, r3, #4
   207f4:	b2db      	uxtb	r3, r3
   207f6:	001a      	movs	r2, r3
   207f8:	230f      	movs	r3, #15
   207fa:	4013      	ands	r3, r2
   207fc:	2b0f      	cmp	r3, #15
   207fe:	d103      	bne.n	20808 <spi_cmd_complete+0x4f8>
					break;
   20800:	e007      	b.n	20812 <spi_cmd_complete+0x502>
					retry = 0;
   20802:	2300      	movs	r3, #0
   20804:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   20806:	e004      	b.n	20812 <spi_cmd_complete+0x502>
			} while (retry--);
   20808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2080a:	1e5a      	subs	r2, r3, #1
   2080c:	667a      	str	r2, [r7, #100]	; 0x64
   2080e:	2b00      	cmp	r3, #0
   20810:	d1d8      	bne.n	207c4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   20812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20814:	2b00      	cmp	r3, #0
   20816:	dc18      	bgt.n	2084a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   20818:	2395      	movs	r3, #149	; 0x95
   2081a:	009a      	lsls	r2, r3, #2
   2081c:	499b      	ldr	r1, [pc, #620]	; (20a8c <spi_cmd_complete+0x77c>)
   2081e:	4b9c      	ldr	r3, [pc, #624]	; (20a90 <spi_cmd_complete+0x780>)
   20820:	0018      	movs	r0, r3
   20822:	4b9c      	ldr	r3, [pc, #624]	; (20a94 <spi_cmd_complete+0x784>)
   20824:	4798      	blx	r3
   20826:	2317      	movs	r3, #23
   20828:	18fb      	adds	r3, r7, r3
   2082a:	781b      	ldrb	r3, [r3, #0]
   2082c:	001a      	movs	r2, r3
   2082e:	4b9e      	ldr	r3, [pc, #632]	; (20aa8 <spi_cmd_complete+0x798>)
   20830:	0011      	movs	r1, r2
   20832:	0018      	movs	r0, r3
   20834:	4b97      	ldr	r3, [pc, #604]	; (20a94 <spi_cmd_complete+0x784>)
   20836:	4798      	blx	r3
   20838:	4b98      	ldr	r3, [pc, #608]	; (20a9c <spi_cmd_complete+0x78c>)
   2083a:	0018      	movs	r0, r3
   2083c:	4b95      	ldr	r3, [pc, #596]	; (20a94 <spi_cmd_complete+0x784>)
   2083e:	4798      	blx	r3
				result = N_RESET;
   20840:	2301      	movs	r3, #1
   20842:	425b      	negs	r3, r3
   20844:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   20846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20848:	e1c4      	b.n	20bd4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2084a:	230f      	movs	r3, #15
   2084c:	18fb      	adds	r3, r7, r3
   2084e:	781b      	ldrb	r3, [r3, #0]
   20850:	2bc4      	cmp	r3, #196	; 0xc4
   20852:	d005      	beq.n	20860 <spi_cmd_complete+0x550>
   20854:	230f      	movs	r3, #15
   20856:	18fb      	adds	r3, r7, r3
   20858:	781b      	ldrb	r3, [r3, #0]
   2085a:	2bca      	cmp	r3, #202	; 0xca
   2085c:	d000      	beq.n	20860 <spi_cmd_complete+0x550>
   2085e:	e08e      	b.n	2097e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   20860:	2376      	movs	r3, #118	; 0x76
   20862:	18fb      	adds	r3, r7, r3
   20864:	781b      	ldrb	r3, [r3, #0]
   20866:	3303      	adds	r3, #3
   20868:	001a      	movs	r2, r3
   2086a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2086c:	429a      	cmp	r2, r3
   2086e:	d23c      	bcs.n	208ea <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   20870:	2376      	movs	r3, #118	; 0x76
   20872:	18fb      	adds	r3, r7, r3
   20874:	781b      	ldrb	r3, [r3, #0]
   20876:	2276      	movs	r2, #118	; 0x76
   20878:	18ba      	adds	r2, r7, r2
   2087a:	1c59      	adds	r1, r3, #1
   2087c:	7011      	strb	r1, [r2, #0]
   2087e:	001a      	movs	r2, r3
   20880:	2318      	movs	r3, #24
   20882:	18fb      	adds	r3, r7, r3
   20884:	5c9a      	ldrb	r2, [r3, r2]
   20886:	687b      	ldr	r3, [r7, #4]
   20888:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   2088a:	687b      	ldr	r3, [r7, #4]
   2088c:	1c5a      	adds	r2, r3, #1
   2088e:	2376      	movs	r3, #118	; 0x76
   20890:	18fb      	adds	r3, r7, r3
   20892:	781b      	ldrb	r3, [r3, #0]
   20894:	2176      	movs	r1, #118	; 0x76
   20896:	1879      	adds	r1, r7, r1
   20898:	1c58      	adds	r0, r3, #1
   2089a:	7008      	strb	r0, [r1, #0]
   2089c:	0019      	movs	r1, r3
   2089e:	2318      	movs	r3, #24
   208a0:	18fb      	adds	r3, r7, r3
   208a2:	5c5b      	ldrb	r3, [r3, r1]
   208a4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   208a6:	687b      	ldr	r3, [r7, #4]
   208a8:	1c9a      	adds	r2, r3, #2
   208aa:	2376      	movs	r3, #118	; 0x76
   208ac:	18fb      	adds	r3, r7, r3
   208ae:	781b      	ldrb	r3, [r3, #0]
   208b0:	2176      	movs	r1, #118	; 0x76
   208b2:	1879      	adds	r1, r7, r1
   208b4:	1c58      	adds	r0, r3, #1
   208b6:	7008      	strb	r0, [r1, #0]
   208b8:	0019      	movs	r1, r3
   208ba:	2318      	movs	r3, #24
   208bc:	18fb      	adds	r3, r7, r3
   208be:	5c5b      	ldrb	r3, [r3, r1]
   208c0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   208c2:	687b      	ldr	r3, [r7, #4]
   208c4:	1cda      	adds	r2, r3, #3
   208c6:	2376      	movs	r3, #118	; 0x76
   208c8:	18fb      	adds	r3, r7, r3
   208ca:	781b      	ldrb	r3, [r3, #0]
   208cc:	2176      	movs	r1, #118	; 0x76
   208ce:	1879      	adds	r1, r7, r1
   208d0:	1c58      	adds	r0, r3, #1
   208d2:	7008      	strb	r0, [r1, #0]
   208d4:	0019      	movs	r1, r3
   208d6:	2318      	movs	r3, #24
   208d8:	18fb      	adds	r3, r7, r3
   208da:	5c5b      	ldrb	r3, [r3, r1]
   208dc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   208de:	4b73      	ldr	r3, [pc, #460]	; (20aac <spi_cmd_complete+0x79c>)
   208e0:	781b      	ldrb	r3, [r3, #0]
   208e2:	2b00      	cmp	r3, #0
   208e4:	d000      	beq.n	208e8 <spi_cmd_complete+0x5d8>
   208e6:	e174      	b.n	20bd2 <spi_cmd_complete+0x8c2>
   208e8:	e011      	b.n	2090e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   208ea:	4a71      	ldr	r2, [pc, #452]	; (20ab0 <spi_cmd_complete+0x7a0>)
   208ec:	4967      	ldr	r1, [pc, #412]	; (20a8c <spi_cmd_complete+0x77c>)
   208ee:	4b68      	ldr	r3, [pc, #416]	; (20a90 <spi_cmd_complete+0x780>)
   208f0:	0018      	movs	r0, r3
   208f2:	4b68      	ldr	r3, [pc, #416]	; (20a94 <spi_cmd_complete+0x784>)
   208f4:	4798      	blx	r3
   208f6:	4b6f      	ldr	r3, [pc, #444]	; (20ab4 <spi_cmd_complete+0x7a4>)
   208f8:	0018      	movs	r0, r3
   208fa:	4b66      	ldr	r3, [pc, #408]	; (20a94 <spi_cmd_complete+0x784>)
   208fc:	4798      	blx	r3
   208fe:	4b67      	ldr	r3, [pc, #412]	; (20a9c <spi_cmd_complete+0x78c>)
   20900:	0018      	movs	r0, r3
   20902:	4b64      	ldr	r3, [pc, #400]	; (20a94 <spi_cmd_complete+0x784>)
   20904:	4798      	blx	r3
					result = N_FAIL;
   20906:	2300      	movs	r3, #0
   20908:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   2090a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2090c:	e162      	b.n	20bd4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   2090e:	2376      	movs	r3, #118	; 0x76
   20910:	18fb      	adds	r3, r7, r3
   20912:	781b      	ldrb	r3, [r3, #0]
   20914:	3301      	adds	r3, #1
   20916:	001a      	movs	r2, r3
   20918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2091a:	429a      	cmp	r2, r3
   2091c:	d21c      	bcs.n	20958 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   2091e:	2376      	movs	r3, #118	; 0x76
   20920:	18fb      	adds	r3, r7, r3
   20922:	781b      	ldrb	r3, [r3, #0]
   20924:	2276      	movs	r2, #118	; 0x76
   20926:	18ba      	adds	r2, r7, r2
   20928:	1c59      	adds	r1, r3, #1
   2092a:	7011      	strb	r1, [r2, #0]
   2092c:	001a      	movs	r2, r3
   2092e:	2318      	movs	r3, #24
   20930:	18fb      	adds	r3, r7, r3
   20932:	5c9a      	ldrb	r2, [r3, r2]
   20934:	2314      	movs	r3, #20
   20936:	18fb      	adds	r3, r7, r3
   20938:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   2093a:	2376      	movs	r3, #118	; 0x76
   2093c:	18fb      	adds	r3, r7, r3
   2093e:	781b      	ldrb	r3, [r3, #0]
   20940:	2276      	movs	r2, #118	; 0x76
   20942:	18ba      	adds	r2, r7, r2
   20944:	1c59      	adds	r1, r3, #1
   20946:	7011      	strb	r1, [r2, #0]
   20948:	001a      	movs	r2, r3
   2094a:	2318      	movs	r3, #24
   2094c:	18fb      	adds	r3, r7, r3
   2094e:	5c9a      	ldrb	r2, [r3, r2]
   20950:	2314      	movs	r3, #20
   20952:	18fb      	adds	r3, r7, r3
   20954:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   20956:	e13c      	b.n	20bd2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   20958:	239c      	movs	r3, #156	; 0x9c
   2095a:	009a      	lsls	r2, r3, #2
   2095c:	494b      	ldr	r1, [pc, #300]	; (20a8c <spi_cmd_complete+0x77c>)
   2095e:	4b4c      	ldr	r3, [pc, #304]	; (20a90 <spi_cmd_complete+0x780>)
   20960:	0018      	movs	r0, r3
   20962:	4b4c      	ldr	r3, [pc, #304]	; (20a94 <spi_cmd_complete+0x784>)
   20964:	4798      	blx	r3
   20966:	4b54      	ldr	r3, [pc, #336]	; (20ab8 <spi_cmd_complete+0x7a8>)
   20968:	0018      	movs	r0, r3
   2096a:	4b4a      	ldr	r3, [pc, #296]	; (20a94 <spi_cmd_complete+0x784>)
   2096c:	4798      	blx	r3
   2096e:	4b4b      	ldr	r3, [pc, #300]	; (20a9c <spi_cmd_complete+0x78c>)
   20970:	0018      	movs	r0, r3
   20972:	4b48      	ldr	r3, [pc, #288]	; (20a94 <spi_cmd_complete+0x784>)
   20974:	4798      	blx	r3
						result = N_FAIL;
   20976:	2300      	movs	r3, #0
   20978:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   2097a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2097c:	e12a      	b.n	20bd4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2097e:	230f      	movs	r3, #15
   20980:	18fb      	adds	r3, r7, r3
   20982:	781b      	ldrb	r3, [r3, #0]
   20984:	2bc2      	cmp	r3, #194	; 0xc2
   20986:	d005      	beq.n	20994 <spi_cmd_complete+0x684>
   20988:	230f      	movs	r3, #15
   2098a:	18fb      	adds	r3, r7, r3
   2098c:	781b      	ldrb	r3, [r3, #0]
   2098e:	2bc8      	cmp	r3, #200	; 0xc8
   20990:	d000      	beq.n	20994 <spi_cmd_complete+0x684>
   20992:	e11e      	b.n	20bd2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   20994:	2300      	movs	r3, #0
   20996:	663b      	str	r3, [r7, #96]	; 0x60
   20998:	e011      	b.n	209be <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2099a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2099c:	1c5a      	adds	r2, r3, #1
   2099e:	663a      	str	r2, [r7, #96]	; 0x60
   209a0:	001a      	movs	r2, r3
   209a2:	687b      	ldr	r3, [r7, #4]
   209a4:	189a      	adds	r2, r3, r2
   209a6:	2376      	movs	r3, #118	; 0x76
   209a8:	18fb      	adds	r3, r7, r3
   209aa:	781b      	ldrb	r3, [r3, #0]
   209ac:	2176      	movs	r1, #118	; 0x76
   209ae:	1879      	adds	r1, r7, r1
   209b0:	1c58      	adds	r0, r3, #1
   209b2:	7008      	strb	r0, [r1, #0]
   209b4:	0019      	movs	r1, r3
   209b6:	2318      	movs	r3, #24
   209b8:	18fb      	adds	r3, r7, r3
   209ba:	5c5b      	ldrb	r3, [r3, r1]
   209bc:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   209be:	2376      	movs	r3, #118	; 0x76
   209c0:	18fb      	adds	r3, r7, r3
   209c2:	781a      	ldrb	r2, [r3, #0]
   209c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   209c6:	429a      	cmp	r2, r3
   209c8:	d203      	bcs.n	209d2 <spi_cmd_complete+0x6c2>
   209ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   209cc:	683b      	ldr	r3, [r7, #0]
   209ce:	429a      	cmp	r2, r3
   209d0:	d3e3      	bcc.n	2099a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   209d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   209d4:	683a      	ldr	r2, [r7, #0]
   209d6:	1ad3      	subs	r3, r2, r3
   209d8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   209da:	683b      	ldr	r3, [r7, #0]
   209dc:	2b00      	cmp	r3, #0
   209de:	d100      	bne.n	209e2 <spi_cmd_complete+0x6d2>
   209e0:	e0f1      	b.n	20bc6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   209e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   209e4:	2280      	movs	r2, #128	; 0x80
   209e6:	0192      	lsls	r2, r2, #6
   209e8:	1ad3      	subs	r3, r2, r3
   209ea:	001a      	movs	r2, r3
   209ec:	683b      	ldr	r3, [r7, #0]
   209ee:	429a      	cmp	r2, r3
   209f0:	d302      	bcc.n	209f8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   209f2:	683b      	ldr	r3, [r7, #0]
   209f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   209f6:	e004      	b.n	20a02 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   209f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   209fa:	2280      	movs	r2, #128	; 0x80
   209fc:	0192      	lsls	r2, r2, #6
   209fe:	1ad3      	subs	r3, r2, r3
   20a00:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   20a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20a04:	687a      	ldr	r2, [r7, #4]
   20a06:	18d3      	adds	r3, r2, r3
   20a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   20a0a:	b292      	uxth	r2, r2
   20a0c:	0011      	movs	r1, r2
   20a0e:	0018      	movs	r0, r3
   20a10:	4b2a      	ldr	r3, [pc, #168]	; (20abc <spi_cmd_complete+0x7ac>)
   20a12:	4798      	blx	r3
   20a14:	1e03      	subs	r3, r0, #0
   20a16:	d010      	beq.n	20a3a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   20a18:	4a29      	ldr	r2, [pc, #164]	; (20ac0 <spi_cmd_complete+0x7b0>)
   20a1a:	491c      	ldr	r1, [pc, #112]	; (20a8c <spi_cmd_complete+0x77c>)
   20a1c:	4b1c      	ldr	r3, [pc, #112]	; (20a90 <spi_cmd_complete+0x780>)
   20a1e:	0018      	movs	r0, r3
   20a20:	4b1c      	ldr	r3, [pc, #112]	; (20a94 <spi_cmd_complete+0x784>)
   20a22:	4798      	blx	r3
   20a24:	4b27      	ldr	r3, [pc, #156]	; (20ac4 <spi_cmd_complete+0x7b4>)
   20a26:	0018      	movs	r0, r3
   20a28:	4b1a      	ldr	r3, [pc, #104]	; (20a94 <spi_cmd_complete+0x784>)
   20a2a:	4798      	blx	r3
   20a2c:	4b1b      	ldr	r3, [pc, #108]	; (20a9c <spi_cmd_complete+0x78c>)
   20a2e:	0018      	movs	r0, r3
   20a30:	4b18      	ldr	r3, [pc, #96]	; (20a94 <spi_cmd_complete+0x784>)
   20a32:	4798      	blx	r3
						result = N_FAIL;
   20a34:	2300      	movs	r3, #0
   20a36:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   20a38:	e0cb      	b.n	20bd2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   20a3a:	4b1c      	ldr	r3, [pc, #112]	; (20aac <spi_cmd_complete+0x79c>)
   20a3c:	781b      	ldrb	r3, [r3, #0]
   20a3e:	2b00      	cmp	r3, #0
   20a40:	d119      	bne.n	20a76 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   20a42:	2314      	movs	r3, #20
   20a44:	18fb      	adds	r3, r7, r3
   20a46:	2102      	movs	r1, #2
   20a48:	0018      	movs	r0, r3
   20a4a:	4b1c      	ldr	r3, [pc, #112]	; (20abc <spi_cmd_complete+0x7ac>)
   20a4c:	4798      	blx	r3
   20a4e:	1e03      	subs	r3, r0, #0
   20a50:	d011      	beq.n	20a76 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   20a52:	23a6      	movs	r3, #166	; 0xa6
   20a54:	009a      	lsls	r2, r3, #2
   20a56:	490d      	ldr	r1, [pc, #52]	; (20a8c <spi_cmd_complete+0x77c>)
   20a58:	4b0d      	ldr	r3, [pc, #52]	; (20a90 <spi_cmd_complete+0x780>)
   20a5a:	0018      	movs	r0, r3
   20a5c:	4b0d      	ldr	r3, [pc, #52]	; (20a94 <spi_cmd_complete+0x784>)
   20a5e:	4798      	blx	r3
   20a60:	4b19      	ldr	r3, [pc, #100]	; (20ac8 <spi_cmd_complete+0x7b8>)
   20a62:	0018      	movs	r0, r3
   20a64:	4b0b      	ldr	r3, [pc, #44]	; (20a94 <spi_cmd_complete+0x784>)
   20a66:	4798      	blx	r3
   20a68:	4b0c      	ldr	r3, [pc, #48]	; (20a9c <spi_cmd_complete+0x78c>)
   20a6a:	0018      	movs	r0, r3
   20a6c:	4b09      	ldr	r3, [pc, #36]	; (20a94 <spi_cmd_complete+0x784>)
   20a6e:	4798      	blx	r3
							result = N_FAIL;
   20a70:	2300      	movs	r3, #0
   20a72:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   20a74:	e0ad      	b.n	20bd2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   20a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   20a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20a7a:	18d3      	adds	r3, r2, r3
   20a7c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   20a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20a80:	683a      	ldr	r2, [r7, #0]
   20a82:	1ad3      	subs	r3, r2, r3
   20a84:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   20a86:	e09e      	b.n	20bc6 <spi_cmd_complete+0x8b6>
   20a88:	0000022f 	.word	0x0000022f
   20a8c:	00037680 	.word	0x00037680
   20a90:	0003706c 	.word	0x0003706c
   20a94:	0001a5e9 	.word	0x0001a5e9
   20a98:	00037164 	.word	0x00037164
   20a9c:	000370ac 	.word	0x000370ac
   20aa0:	00000239 	.word	0x00000239
   20aa4:	000371a0 	.word	0x000371a0
   20aa8:	000371d4 	.word	0x000371d4
   20aac:	20003d2c 	.word	0x20003d2c
   20ab0:	00000263 	.word	0x00000263
   20ab4:	00037204 	.word	0x00037204
   20ab8:	00037234 	.word	0x00037234
   20abc:	0001fc49 	.word	0x0001fc49
   20ac0:	0000028e 	.word	0x0000028e
   20ac4:	00037264 	.word	0x00037264
   20ac8:	00037298 	.word	0x00037298
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   20acc:	683a      	ldr	r2, [r7, #0]
   20ace:	2380      	movs	r3, #128	; 0x80
   20ad0:	019b      	lsls	r3, r3, #6
   20ad2:	429a      	cmp	r2, r3
   20ad4:	d802      	bhi.n	20adc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   20ad6:	683b      	ldr	r3, [r7, #0]
   20ad8:	65bb      	str	r3, [r7, #88]	; 0x58
   20ada:	e002      	b.n	20ae2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   20adc:	2380      	movs	r3, #128	; 0x80
   20ade:	019b      	lsls	r3, r3, #6
   20ae0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   20ae2:	230a      	movs	r3, #10
   20ae4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   20ae6:	2317      	movs	r3, #23
   20ae8:	18fb      	adds	r3, r7, r3
   20aea:	2101      	movs	r1, #1
   20aec:	0018      	movs	r0, r3
   20aee:	4b3b      	ldr	r3, [pc, #236]	; (20bdc <spi_cmd_complete+0x8cc>)
   20af0:	4798      	blx	r3
   20af2:	1e03      	subs	r3, r0, #0
   20af4:	d011      	beq.n	20b1a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   20af6:	23ae      	movs	r3, #174	; 0xae
   20af8:	009a      	lsls	r2, r3, #2
   20afa:	4939      	ldr	r1, [pc, #228]	; (20be0 <spi_cmd_complete+0x8d0>)
   20afc:	4b39      	ldr	r3, [pc, #228]	; (20be4 <spi_cmd_complete+0x8d4>)
   20afe:	0018      	movs	r0, r3
   20b00:	4b39      	ldr	r3, [pc, #228]	; (20be8 <spi_cmd_complete+0x8d8>)
   20b02:	4798      	blx	r3
   20b04:	4b39      	ldr	r3, [pc, #228]	; (20bec <spi_cmd_complete+0x8dc>)
   20b06:	0018      	movs	r0, r3
   20b08:	4b37      	ldr	r3, [pc, #220]	; (20be8 <spi_cmd_complete+0x8d8>)
   20b0a:	4798      	blx	r3
   20b0c:	4b38      	ldr	r3, [pc, #224]	; (20bf0 <spi_cmd_complete+0x8e0>)
   20b0e:	0018      	movs	r0, r3
   20b10:	4b35      	ldr	r3, [pc, #212]	; (20be8 <spi_cmd_complete+0x8d8>)
   20b12:	4798      	blx	r3
							result = N_FAIL;
   20b14:	2300      	movs	r3, #0
   20b16:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   20b18:	e010      	b.n	20b3c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   20b1a:	2317      	movs	r3, #23
   20b1c:	18fb      	adds	r3, r7, r3
   20b1e:	781b      	ldrb	r3, [r3, #0]
   20b20:	091b      	lsrs	r3, r3, #4
   20b22:	b2db      	uxtb	r3, r3
   20b24:	001a      	movs	r2, r3
   20b26:	230f      	movs	r3, #15
   20b28:	4013      	ands	r3, r2
   20b2a:	2b0f      	cmp	r3, #15
   20b2c:	d005      	beq.n	20b3a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   20b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20b30:	1e5a      	subs	r2, r3, #1
   20b32:	667a      	str	r2, [r7, #100]	; 0x64
   20b34:	2b00      	cmp	r3, #0
   20b36:	d1d6      	bne.n	20ae6 <spi_cmd_complete+0x7d6>
   20b38:	e000      	b.n	20b3c <spi_cmd_complete+0x82c>
							break;
   20b3a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   20b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   20b3e:	2b00      	cmp	r3, #0
   20b40:	d046      	beq.n	20bd0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   20b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20b44:	687a      	ldr	r2, [r7, #4]
   20b46:	18d3      	adds	r3, r2, r3
   20b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
   20b4a:	b292      	uxth	r2, r2
   20b4c:	0011      	movs	r1, r2
   20b4e:	0018      	movs	r0, r3
   20b50:	4b22      	ldr	r3, [pc, #136]	; (20bdc <spi_cmd_complete+0x8cc>)
   20b52:	4798      	blx	r3
   20b54:	1e03      	subs	r3, r0, #0
   20b56:	d011      	beq.n	20b7c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   20b58:	23b2      	movs	r3, #178	; 0xb2
   20b5a:	009a      	lsls	r2, r3, #2
   20b5c:	4920      	ldr	r1, [pc, #128]	; (20be0 <spi_cmd_complete+0x8d0>)
   20b5e:	4b21      	ldr	r3, [pc, #132]	; (20be4 <spi_cmd_complete+0x8d4>)
   20b60:	0018      	movs	r0, r3
   20b62:	4b21      	ldr	r3, [pc, #132]	; (20be8 <spi_cmd_complete+0x8d8>)
   20b64:	4798      	blx	r3
   20b66:	4b23      	ldr	r3, [pc, #140]	; (20bf4 <spi_cmd_complete+0x8e4>)
   20b68:	0018      	movs	r0, r3
   20b6a:	4b1f      	ldr	r3, [pc, #124]	; (20be8 <spi_cmd_complete+0x8d8>)
   20b6c:	4798      	blx	r3
   20b6e:	4b20      	ldr	r3, [pc, #128]	; (20bf0 <spi_cmd_complete+0x8e0>)
   20b70:	0018      	movs	r0, r3
   20b72:	4b1d      	ldr	r3, [pc, #116]	; (20be8 <spi_cmd_complete+0x8d8>)
   20b74:	4798      	blx	r3
						result = N_FAIL;
   20b76:	2300      	movs	r3, #0
   20b78:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   20b7a:	e02a      	b.n	20bd2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   20b7c:	4b1e      	ldr	r3, [pc, #120]	; (20bf8 <spi_cmd_complete+0x8e8>)
   20b7e:	781b      	ldrb	r3, [r3, #0]
   20b80:	2b00      	cmp	r3, #0
   20b82:	d118      	bne.n	20bb6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   20b84:	2314      	movs	r3, #20
   20b86:	18fb      	adds	r3, r7, r3
   20b88:	2102      	movs	r1, #2
   20b8a:	0018      	movs	r0, r3
   20b8c:	4b13      	ldr	r3, [pc, #76]	; (20bdc <spi_cmd_complete+0x8cc>)
   20b8e:	4798      	blx	r3
   20b90:	1e03      	subs	r3, r0, #0
   20b92:	d010      	beq.n	20bb6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   20b94:	4a19      	ldr	r2, [pc, #100]	; (20bfc <spi_cmd_complete+0x8ec>)
   20b96:	4912      	ldr	r1, [pc, #72]	; (20be0 <spi_cmd_complete+0x8d0>)
   20b98:	4b12      	ldr	r3, [pc, #72]	; (20be4 <spi_cmd_complete+0x8d4>)
   20b9a:	0018      	movs	r0, r3
   20b9c:	4b12      	ldr	r3, [pc, #72]	; (20be8 <spi_cmd_complete+0x8d8>)
   20b9e:	4798      	blx	r3
   20ba0:	4b17      	ldr	r3, [pc, #92]	; (20c00 <spi_cmd_complete+0x8f0>)
   20ba2:	0018      	movs	r0, r3
   20ba4:	4b10      	ldr	r3, [pc, #64]	; (20be8 <spi_cmd_complete+0x8d8>)
   20ba6:	4798      	blx	r3
   20ba8:	4b11      	ldr	r3, [pc, #68]	; (20bf0 <spi_cmd_complete+0x8e0>)
   20baa:	0018      	movs	r0, r3
   20bac:	4b0e      	ldr	r3, [pc, #56]	; (20be8 <spi_cmd_complete+0x8d8>)
   20bae:	4798      	blx	r3
							result = N_FAIL;
   20bb0:	2300      	movs	r3, #0
   20bb2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   20bb4:	e00d      	b.n	20bd2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   20bb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   20bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   20bba:	18d3      	adds	r3, r2, r3
   20bbc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   20bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   20bc0:	683a      	ldr	r2, [r7, #0]
   20bc2:	1ad3      	subs	r3, r2, r3
   20bc4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   20bc6:	683b      	ldr	r3, [r7, #0]
   20bc8:	2b00      	cmp	r3, #0
   20bca:	d000      	beq.n	20bce <spi_cmd_complete+0x8be>
   20bcc:	e77e      	b.n	20acc <spi_cmd_complete+0x7bc>
   20bce:	e000      	b.n	20bd2 <spi_cmd_complete+0x8c2>
						break;
   20bd0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   20bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   20bd4:	0018      	movs	r0, r3
   20bd6:	46bd      	mov	sp, r7
   20bd8:	b01f      	add	sp, #124	; 0x7c
   20bda:	bd90      	pop	{r4, r7, pc}
   20bdc:	0001fc49 	.word	0x0001fc49
   20be0:	00037680 	.word	0x00037680
   20be4:	0003706c 	.word	0x0003706c
   20be8:	0001a5e9 	.word	0x0001a5e9
   20bec:	000372d0 	.word	0x000372d0
   20bf0:	000370ac 	.word	0x000370ac
   20bf4:	00037264 	.word	0x00037264
   20bf8:	20003d2c 	.word	0x20003d2c
   20bfc:	000002d2 	.word	0x000002d2
   20c00:	00037298 	.word	0x00037298

00020c04 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   20c04:	b580      	push	{r7, lr}
   20c06:	b086      	sub	sp, #24
   20c08:	af00      	add	r7, sp, #0
   20c0a:	6078      	str	r0, [r7, #4]
   20c0c:	000a      	movs	r2, r1
   20c0e:	1cbb      	adds	r3, r7, #2
   20c10:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   20c12:	2313      	movs	r3, #19
   20c14:	18fb      	adds	r3, r7, r3
   20c16:	2201      	movs	r2, #1
   20c18:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   20c1a:	230c      	movs	r3, #12
   20c1c:	18fb      	adds	r3, r7, r3
   20c1e:	2200      	movs	r2, #0
   20c20:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   20c22:	2316      	movs	r3, #22
   20c24:	18fb      	adds	r3, r7, r3
   20c26:	2200      	movs	r2, #0
   20c28:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   20c2a:	1cbb      	adds	r3, r7, #2
   20c2c:	881a      	ldrh	r2, [r3, #0]
   20c2e:	2380      	movs	r3, #128	; 0x80
   20c30:	019b      	lsls	r3, r3, #6
   20c32:	429a      	cmp	r2, r3
   20c34:	d805      	bhi.n	20c42 <spi_data_write+0x3e>
			nbytes = sz;
   20c36:	2314      	movs	r3, #20
   20c38:	18fb      	adds	r3, r7, r3
   20c3a:	1cba      	adds	r2, r7, #2
   20c3c:	8812      	ldrh	r2, [r2, #0]
   20c3e:	801a      	strh	r2, [r3, #0]
   20c40:	e004      	b.n	20c4c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   20c42:	2314      	movs	r3, #20
   20c44:	18fb      	adds	r3, r7, r3
   20c46:	2280      	movs	r2, #128	; 0x80
   20c48:	0192      	lsls	r2, r2, #6
   20c4a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   20c4c:	2311      	movs	r3, #17
   20c4e:	18fb      	adds	r3, r7, r3
   20c50:	22f0      	movs	r2, #240	; 0xf0
   20c52:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   20c54:	2316      	movs	r3, #22
   20c56:	18fb      	adds	r3, r7, r3
   20c58:	2200      	movs	r2, #0
   20c5a:	5e9b      	ldrsh	r3, [r3, r2]
   20c5c:	2b00      	cmp	r3, #0
   20c5e:	d10f      	bne.n	20c80 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   20c60:	1cbb      	adds	r3, r7, #2
   20c62:	881a      	ldrh	r2, [r3, #0]
   20c64:	2380      	movs	r3, #128	; 0x80
   20c66:	019b      	lsls	r3, r3, #6
   20c68:	429a      	cmp	r2, r3
   20c6a:	d804      	bhi.n	20c76 <spi_data_write+0x72>
				order = 0x3;
   20c6c:	2312      	movs	r3, #18
   20c6e:	18fb      	adds	r3, r7, r3
   20c70:	2203      	movs	r2, #3
   20c72:	701a      	strb	r2, [r3, #0]
   20c74:	e013      	b.n	20c9e <spi_data_write+0x9a>
			else
				order = 0x1;
   20c76:	2312      	movs	r3, #18
   20c78:	18fb      	adds	r3, r7, r3
   20c7a:	2201      	movs	r2, #1
   20c7c:	701a      	strb	r2, [r3, #0]
   20c7e:	e00e      	b.n	20c9e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   20c80:	1cbb      	adds	r3, r7, #2
   20c82:	881a      	ldrh	r2, [r3, #0]
   20c84:	2380      	movs	r3, #128	; 0x80
   20c86:	019b      	lsls	r3, r3, #6
   20c88:	429a      	cmp	r2, r3
   20c8a:	d804      	bhi.n	20c96 <spi_data_write+0x92>
				order = 0x3;
   20c8c:	2312      	movs	r3, #18
   20c8e:	18fb      	adds	r3, r7, r3
   20c90:	2203      	movs	r2, #3
   20c92:	701a      	strb	r2, [r3, #0]
   20c94:	e003      	b.n	20c9e <spi_data_write+0x9a>
			else
				order = 0x2;
   20c96:	2312      	movs	r3, #18
   20c98:	18fb      	adds	r3, r7, r3
   20c9a:	2202      	movs	r2, #2
   20c9c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   20c9e:	2311      	movs	r3, #17
   20ca0:	18fb      	adds	r3, r7, r3
   20ca2:	781a      	ldrb	r2, [r3, #0]
   20ca4:	2312      	movs	r3, #18
   20ca6:	18fb      	adds	r3, r7, r3
   20ca8:	781b      	ldrb	r3, [r3, #0]
   20caa:	4313      	orrs	r3, r2
   20cac:	b2da      	uxtb	r2, r3
   20cae:	2311      	movs	r3, #17
   20cb0:	18fb      	adds	r3, r7, r3
   20cb2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   20cb4:	2311      	movs	r3, #17
   20cb6:	18fb      	adds	r3, r7, r3
   20cb8:	2101      	movs	r1, #1
   20cba:	0018      	movs	r0, r3
   20cbc:	4b3c      	ldr	r3, [pc, #240]	; (20db0 <spi_data_write+0x1ac>)
   20cbe:	4798      	blx	r3
   20cc0:	1e03      	subs	r3, r0, #0
   20cc2:	d012      	beq.n	20cea <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   20cc4:	4a3b      	ldr	r2, [pc, #236]	; (20db4 <spi_data_write+0x1b0>)
   20cc6:	493c      	ldr	r1, [pc, #240]	; (20db8 <spi_data_write+0x1b4>)
   20cc8:	4b3c      	ldr	r3, [pc, #240]	; (20dbc <spi_data_write+0x1b8>)
   20cca:	0018      	movs	r0, r3
   20ccc:	4b3c      	ldr	r3, [pc, #240]	; (20dc0 <spi_data_write+0x1bc>)
   20cce:	4798      	blx	r3
   20cd0:	4b3c      	ldr	r3, [pc, #240]	; (20dc4 <spi_data_write+0x1c0>)
   20cd2:	0018      	movs	r0, r3
   20cd4:	4b3a      	ldr	r3, [pc, #232]	; (20dc0 <spi_data_write+0x1bc>)
   20cd6:	4798      	blx	r3
   20cd8:	4b3b      	ldr	r3, [pc, #236]	; (20dc8 <spi_data_write+0x1c4>)
   20cda:	0018      	movs	r0, r3
   20cdc:	4b38      	ldr	r3, [pc, #224]	; (20dc0 <spi_data_write+0x1bc>)
   20cde:	4798      	blx	r3
			result = N_FAIL;
   20ce0:	2313      	movs	r3, #19
   20ce2:	18fb      	adds	r3, r7, r3
   20ce4:	2200      	movs	r2, #0
   20ce6:	701a      	strb	r2, [r3, #0]
			break;
   20ce8:	e059      	b.n	20d9e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   20cea:	2316      	movs	r3, #22
   20cec:	18fb      	adds	r3, r7, r3
   20cee:	2200      	movs	r2, #0
   20cf0:	5e9b      	ldrsh	r3, [r3, r2]
   20cf2:	687a      	ldr	r2, [r7, #4]
   20cf4:	18d2      	adds	r2, r2, r3
   20cf6:	2314      	movs	r3, #20
   20cf8:	18fb      	adds	r3, r7, r3
   20cfa:	881b      	ldrh	r3, [r3, #0]
   20cfc:	0019      	movs	r1, r3
   20cfe:	0010      	movs	r0, r2
   20d00:	4b2b      	ldr	r3, [pc, #172]	; (20db0 <spi_data_write+0x1ac>)
   20d02:	4798      	blx	r3
   20d04:	1e03      	subs	r3, r0, #0
   20d06:	d012      	beq.n	20d2e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   20d08:	4a30      	ldr	r2, [pc, #192]	; (20dcc <spi_data_write+0x1c8>)
   20d0a:	492b      	ldr	r1, [pc, #172]	; (20db8 <spi_data_write+0x1b4>)
   20d0c:	4b2b      	ldr	r3, [pc, #172]	; (20dbc <spi_data_write+0x1b8>)
   20d0e:	0018      	movs	r0, r3
   20d10:	4b2b      	ldr	r3, [pc, #172]	; (20dc0 <spi_data_write+0x1bc>)
   20d12:	4798      	blx	r3
   20d14:	4b2e      	ldr	r3, [pc, #184]	; (20dd0 <spi_data_write+0x1cc>)
   20d16:	0018      	movs	r0, r3
   20d18:	4b29      	ldr	r3, [pc, #164]	; (20dc0 <spi_data_write+0x1bc>)
   20d1a:	4798      	blx	r3
   20d1c:	4b2a      	ldr	r3, [pc, #168]	; (20dc8 <spi_data_write+0x1c4>)
   20d1e:	0018      	movs	r0, r3
   20d20:	4b27      	ldr	r3, [pc, #156]	; (20dc0 <spi_data_write+0x1bc>)
   20d22:	4798      	blx	r3
			result = N_FAIL;
   20d24:	2313      	movs	r3, #19
   20d26:	18fb      	adds	r3, r7, r3
   20d28:	2200      	movs	r2, #0
   20d2a:	701a      	strb	r2, [r3, #0]
			break;
   20d2c:	e037      	b.n	20d9e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   20d2e:	4b29      	ldr	r3, [pc, #164]	; (20dd4 <spi_data_write+0x1d0>)
   20d30:	781b      	ldrb	r3, [r3, #0]
   20d32:	2b00      	cmp	r3, #0
   20d34:	d11b      	bne.n	20d6e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   20d36:	230c      	movs	r3, #12
   20d38:	18fb      	adds	r3, r7, r3
   20d3a:	2102      	movs	r1, #2
   20d3c:	0018      	movs	r0, r3
   20d3e:	4b1c      	ldr	r3, [pc, #112]	; (20db0 <spi_data_write+0x1ac>)
   20d40:	4798      	blx	r3
   20d42:	1e03      	subs	r3, r0, #0
   20d44:	d013      	beq.n	20d6e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   20d46:	23d7      	movs	r3, #215	; 0xd7
   20d48:	009a      	lsls	r2, r3, #2
   20d4a:	491b      	ldr	r1, [pc, #108]	; (20db8 <spi_data_write+0x1b4>)
   20d4c:	4b1b      	ldr	r3, [pc, #108]	; (20dbc <spi_data_write+0x1b8>)
   20d4e:	0018      	movs	r0, r3
   20d50:	4b1b      	ldr	r3, [pc, #108]	; (20dc0 <spi_data_write+0x1bc>)
   20d52:	4798      	blx	r3
   20d54:	4b20      	ldr	r3, [pc, #128]	; (20dd8 <spi_data_write+0x1d4>)
   20d56:	0018      	movs	r0, r3
   20d58:	4b19      	ldr	r3, [pc, #100]	; (20dc0 <spi_data_write+0x1bc>)
   20d5a:	4798      	blx	r3
   20d5c:	4b1a      	ldr	r3, [pc, #104]	; (20dc8 <spi_data_write+0x1c4>)
   20d5e:	0018      	movs	r0, r3
   20d60:	4b17      	ldr	r3, [pc, #92]	; (20dc0 <spi_data_write+0x1bc>)
   20d62:	4798      	blx	r3
				result = N_FAIL;
   20d64:	2313      	movs	r3, #19
   20d66:	18fb      	adds	r3, r7, r3
   20d68:	2200      	movs	r2, #0
   20d6a:	701a      	strb	r2, [r3, #0]
				break;
   20d6c:	e017      	b.n	20d9e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   20d6e:	2316      	movs	r3, #22
   20d70:	18fb      	adds	r3, r7, r3
   20d72:	881a      	ldrh	r2, [r3, #0]
   20d74:	2314      	movs	r3, #20
   20d76:	18fb      	adds	r3, r7, r3
   20d78:	881b      	ldrh	r3, [r3, #0]
   20d7a:	18d3      	adds	r3, r2, r3
   20d7c:	b29a      	uxth	r2, r3
   20d7e:	2316      	movs	r3, #22
   20d80:	18fb      	adds	r3, r7, r3
   20d82:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   20d84:	1cbb      	adds	r3, r7, #2
   20d86:	1cb9      	adds	r1, r7, #2
   20d88:	2214      	movs	r2, #20
   20d8a:	18ba      	adds	r2, r7, r2
   20d8c:	8809      	ldrh	r1, [r1, #0]
   20d8e:	8812      	ldrh	r2, [r2, #0]
   20d90:	1a8a      	subs	r2, r1, r2
   20d92:	801a      	strh	r2, [r3, #0]
	} while (sz);
   20d94:	1cbb      	adds	r3, r7, #2
   20d96:	881b      	ldrh	r3, [r3, #0]
   20d98:	2b00      	cmp	r3, #0
   20d9a:	d000      	beq.n	20d9e <spi_data_write+0x19a>
   20d9c:	e745      	b.n	20c2a <spi_data_write+0x26>


	return result;
   20d9e:	2313      	movs	r3, #19
   20da0:	18fb      	adds	r3, r7, r3
   20da2:	781b      	ldrb	r3, [r3, #0]
   20da4:	b25b      	sxtb	r3, r3
}
   20da6:	0018      	movs	r0, r3
   20da8:	46bd      	mov	sp, r7
   20daa:	b006      	add	sp, #24
   20dac:	bd80      	pop	{r7, pc}
   20dae:	46c0      	nop			; (mov r8, r8)
   20db0:	0001fc8d 	.word	0x0001fc8d
   20db4:	00000349 	.word	0x00000349
   20db8:	00037694 	.word	0x00037694
   20dbc:	0003706c 	.word	0x0003706c
   20dc0:	0001a5e9 	.word	0x0001a5e9
   20dc4:	00037334 	.word	0x00037334
   20dc8:	000370ac 	.word	0x000370ac
   20dcc:	00000352 	.word	0x00000352
   20dd0:	0003736c 	.word	0x0003736c
   20dd4:	20003d2c 	.word	0x20003d2c
   20dd8:	000373a0 	.word	0x000373a0

00020ddc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   20ddc:	b590      	push	{r4, r7, lr}
   20dde:	b087      	sub	sp, #28
   20de0:	af02      	add	r7, sp, #8
   20de2:	6078      	str	r0, [r7, #4]
   20de4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   20de6:	230f      	movs	r3, #15
   20de8:	18fb      	adds	r3, r7, r3
   20dea:	220a      	movs	r2, #10
   20dec:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   20dee:	230c      	movs	r3, #12
   20df0:	18fb      	adds	r3, r7, r3
   20df2:	2201      	movs	r2, #1
   20df4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   20df6:	230e      	movs	r3, #14
   20df8:	18fb      	adds	r3, r7, r3
   20dfa:	22c9      	movs	r2, #201	; 0xc9
   20dfc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   20dfe:	230d      	movs	r3, #13
   20e00:	18fb      	adds	r3, r7, r3
   20e02:	2200      	movs	r2, #0
   20e04:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   20e06:	687b      	ldr	r3, [r7, #4]
   20e08:	2b30      	cmp	r3, #48	; 0x30
   20e0a:	d808      	bhi.n	20e1e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   20e0c:	230e      	movs	r3, #14
   20e0e:	18fb      	adds	r3, r7, r3
   20e10:	22c3      	movs	r2, #195	; 0xc3
   20e12:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   20e14:	230d      	movs	r3, #13
   20e16:	18fb      	adds	r3, r7, r3
   20e18:	2201      	movs	r2, #1
   20e1a:	701a      	strb	r2, [r3, #0]
   20e1c:	e007      	b.n	20e2e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   20e1e:	230e      	movs	r3, #14
   20e20:	18fb      	adds	r3, r7, r3
   20e22:	22c9      	movs	r2, #201	; 0xc9
   20e24:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   20e26:	230d      	movs	r3, #13
   20e28:	18fb      	adds	r3, r7, r3
   20e2a:	2200      	movs	r2, #0
   20e2c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   20e2e:	003a      	movs	r2, r7
   20e30:	6879      	ldr	r1, [r7, #4]
   20e32:	230e      	movs	r3, #14
   20e34:	18fb      	adds	r3, r7, r3
   20e36:	7818      	ldrb	r0, [r3, #0]
   20e38:	230d      	movs	r3, #13
   20e3a:	18fb      	adds	r3, r7, r3
   20e3c:	781b      	ldrb	r3, [r3, #0]
   20e3e:	9300      	str	r3, [sp, #0]
   20e40:	2304      	movs	r3, #4
   20e42:	4c2e      	ldr	r4, [pc, #184]	; (20efc <spi_write_reg+0x120>)
   20e44:	47a0      	blx	r4
   20e46:	0002      	movs	r2, r0
   20e48:	230c      	movs	r3, #12
   20e4a:	18fb      	adds	r3, r7, r3
   20e4c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   20e4e:	230c      	movs	r3, #12
   20e50:	18fb      	adds	r3, r7, r3
   20e52:	781b      	ldrb	r3, [r3, #0]
   20e54:	b25b      	sxtb	r3, r3
   20e56:	2b01      	cmp	r3, #1
   20e58:	d010      	beq.n	20e7c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   20e5a:	4a29      	ldr	r2, [pc, #164]	; (20f00 <spi_write_reg+0x124>)
   20e5c:	4929      	ldr	r1, [pc, #164]	; (20f04 <spi_write_reg+0x128>)
   20e5e:	4b2a      	ldr	r3, [pc, #168]	; (20f08 <spi_write_reg+0x12c>)
   20e60:	0018      	movs	r0, r3
   20e62:	4b2a      	ldr	r3, [pc, #168]	; (20f0c <spi_write_reg+0x130>)
   20e64:	4798      	blx	r3
   20e66:	687a      	ldr	r2, [r7, #4]
   20e68:	4b29      	ldr	r3, [pc, #164]	; (20f10 <spi_write_reg+0x134>)
   20e6a:	0011      	movs	r1, r2
   20e6c:	0018      	movs	r0, r3
   20e6e:	4b27      	ldr	r3, [pc, #156]	; (20f0c <spi_write_reg+0x130>)
   20e70:	4798      	blx	r3
   20e72:	4b28      	ldr	r3, [pc, #160]	; (20f14 <spi_write_reg+0x138>)
   20e74:	0018      	movs	r0, r3
   20e76:	4b25      	ldr	r3, [pc, #148]	; (20f0c <spi_write_reg+0x130>)
   20e78:	4798      	blx	r3
		goto _FAIL_;
   20e7a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   20e7c:	230c      	movs	r3, #12
   20e7e:	18fb      	adds	r3, r7, r3
   20e80:	781b      	ldrb	r3, [r3, #0]
   20e82:	b25b      	sxtb	r3, r3
   20e84:	2b01      	cmp	r3, #1
   20e86:	d030      	beq.n	20eea <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   20e88:	2001      	movs	r0, #1
   20e8a:	4b23      	ldr	r3, [pc, #140]	; (20f18 <spi_write_reg+0x13c>)
   20e8c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   20e8e:	2300      	movs	r3, #0
   20e90:	9300      	str	r3, [sp, #0]
   20e92:	2300      	movs	r3, #0
   20e94:	2200      	movs	r2, #0
   20e96:	2100      	movs	r1, #0
   20e98:	20cf      	movs	r0, #207	; 0xcf
   20e9a:	4c20      	ldr	r4, [pc, #128]	; (20f1c <spi_write_reg+0x140>)
   20e9c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   20e9e:	20cf      	movs	r0, #207	; 0xcf
   20ea0:	4b1f      	ldr	r3, [pc, #124]	; (20f20 <spi_write_reg+0x144>)
   20ea2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   20ea4:	23ea      	movs	r3, #234	; 0xea
   20ea6:	009a      	lsls	r2, r3, #2
   20ea8:	4916      	ldr	r1, [pc, #88]	; (20f04 <spi_write_reg+0x128>)
   20eaa:	4b17      	ldr	r3, [pc, #92]	; (20f08 <spi_write_reg+0x12c>)
   20eac:	0018      	movs	r0, r3
   20eae:	4b17      	ldr	r3, [pc, #92]	; (20f0c <spi_write_reg+0x130>)
   20eb0:	4798      	blx	r3
   20eb2:	230f      	movs	r3, #15
   20eb4:	18fb      	adds	r3, r7, r3
   20eb6:	7819      	ldrb	r1, [r3, #0]
   20eb8:	683b      	ldr	r3, [r7, #0]
   20eba:	687a      	ldr	r2, [r7, #4]
   20ebc:	4819      	ldr	r0, [pc, #100]	; (20f24 <spi_write_reg+0x148>)
   20ebe:	4c13      	ldr	r4, [pc, #76]	; (20f0c <spi_write_reg+0x130>)
   20ec0:	47a0      	blx	r4
   20ec2:	4b14      	ldr	r3, [pc, #80]	; (20f14 <spi_write_reg+0x138>)
   20ec4:	0018      	movs	r0, r3
   20ec6:	4b11      	ldr	r3, [pc, #68]	; (20f0c <spi_write_reg+0x130>)
   20ec8:	4798      	blx	r3
		nm_bsp_sleep(1);
   20eca:	2001      	movs	r0, #1
   20ecc:	4b12      	ldr	r3, [pc, #72]	; (20f18 <spi_write_reg+0x13c>)
   20ece:	4798      	blx	r3
		retry--;
   20ed0:	230f      	movs	r3, #15
   20ed2:	18fb      	adds	r3, r7, r3
   20ed4:	781a      	ldrb	r2, [r3, #0]
   20ed6:	230f      	movs	r3, #15
   20ed8:	18fb      	adds	r3, r7, r3
   20eda:	3a01      	subs	r2, #1
   20edc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   20ede:	230f      	movs	r3, #15
   20ee0:	18fb      	adds	r3, r7, r3
   20ee2:	781b      	ldrb	r3, [r3, #0]
   20ee4:	2b00      	cmp	r3, #0
   20ee6:	d000      	beq.n	20eea <spi_write_reg+0x10e>
   20ee8:	e78d      	b.n	20e06 <spi_write_reg+0x2a>
	}

	return result;
   20eea:	230c      	movs	r3, #12
   20eec:	18fb      	adds	r3, r7, r3
   20eee:	781b      	ldrb	r3, [r3, #0]
   20ef0:	b25b      	sxtb	r3, r3
}
   20ef2:	0018      	movs	r0, r3
   20ef4:	46bd      	mov	sp, r7
   20ef6:	b005      	add	sp, #20
   20ef8:	bd90      	pop	{r4, r7, pc}
   20efa:	46c0      	nop			; (mov r8, r8)
   20efc:	00020311 	.word	0x00020311
   20f00:	0000039d 	.word	0x0000039d
   20f04:	000376a4 	.word	0x000376a4
   20f08:	0003706c 	.word	0x0003706c
   20f0c:	0001a5e9 	.word	0x0001a5e9
   20f10:	000373d8 	.word	0x000373d8
   20f14:	000370ac 	.word	0x000370ac
   20f18:	0001cc51 	.word	0x0001cc51
   20f1c:	0001fd95 	.word	0x0001fd95
   20f20:	000201d5 	.word	0x000201d5
   20f24:	00037404 	.word	0x00037404

00020f28 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   20f28:	b590      	push	{r4, r7, lr}
   20f2a:	b089      	sub	sp, #36	; 0x24
   20f2c:	af02      	add	r7, sp, #8
   20f2e:	60f8      	str	r0, [r7, #12]
   20f30:	60b9      	str	r1, [r7, #8]
   20f32:	1dbb      	adds	r3, r7, #6
   20f34:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   20f36:	2316      	movs	r3, #22
   20f38:	18fb      	adds	r3, r7, r3
   20f3a:	220a      	movs	r2, #10
   20f3c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   20f3e:	2315      	movs	r3, #21
   20f40:	18fb      	adds	r3, r7, r3
   20f42:	22c7      	movs	r2, #199	; 0xc7
   20f44:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   20f46:	1dbb      	adds	r3, r7, #6
   20f48:	881a      	ldrh	r2, [r3, #0]
   20f4a:	68f9      	ldr	r1, [r7, #12]
   20f4c:	2315      	movs	r3, #21
   20f4e:	18fb      	adds	r3, r7, r3
   20f50:	7818      	ldrb	r0, [r3, #0]
   20f52:	2300      	movs	r3, #0
   20f54:	9300      	str	r3, [sp, #0]
   20f56:	0013      	movs	r3, r2
   20f58:	2200      	movs	r2, #0
   20f5a:	4c4d      	ldr	r4, [pc, #308]	; (21090 <nm_spi_write+0x168>)
   20f5c:	47a0      	blx	r4
   20f5e:	0002      	movs	r2, r0
   20f60:	2317      	movs	r3, #23
   20f62:	18fb      	adds	r3, r7, r3
   20f64:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   20f66:	2317      	movs	r3, #23
   20f68:	18fb      	adds	r3, r7, r3
   20f6a:	781b      	ldrb	r3, [r3, #0]
   20f6c:	b25b      	sxtb	r3, r3
   20f6e:	2b01      	cmp	r3, #1
   20f70:	d010      	beq.n	20f94 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   20f72:	4a48      	ldr	r2, [pc, #288]	; (21094 <nm_spi_write+0x16c>)
   20f74:	4948      	ldr	r1, [pc, #288]	; (21098 <nm_spi_write+0x170>)
   20f76:	4b49      	ldr	r3, [pc, #292]	; (2109c <nm_spi_write+0x174>)
   20f78:	0018      	movs	r0, r3
   20f7a:	4b49      	ldr	r3, [pc, #292]	; (210a0 <nm_spi_write+0x178>)
   20f7c:	4798      	blx	r3
   20f7e:	68fa      	ldr	r2, [r7, #12]
   20f80:	4b48      	ldr	r3, [pc, #288]	; (210a4 <nm_spi_write+0x17c>)
   20f82:	0011      	movs	r1, r2
   20f84:	0018      	movs	r0, r3
   20f86:	4b46      	ldr	r3, [pc, #280]	; (210a0 <nm_spi_write+0x178>)
   20f88:	4798      	blx	r3
   20f8a:	4b47      	ldr	r3, [pc, #284]	; (210a8 <nm_spi_write+0x180>)
   20f8c:	0018      	movs	r0, r3
   20f8e:	4b44      	ldr	r3, [pc, #272]	; (210a0 <nm_spi_write+0x178>)
   20f90:	4798      	blx	r3
		goto _FAIL_;
   20f92:	e03e      	b.n	21012 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   20f94:	2317      	movs	r3, #23
   20f96:	18fc      	adds	r4, r7, r3
   20f98:	1dbb      	adds	r3, r7, #6
   20f9a:	881a      	ldrh	r2, [r3, #0]
   20f9c:	68bb      	ldr	r3, [r7, #8]
   20f9e:	0011      	movs	r1, r2
   20fa0:	0018      	movs	r0, r3
   20fa2:	4b42      	ldr	r3, [pc, #264]	; (210ac <nm_spi_write+0x184>)
   20fa4:	4798      	blx	r3
   20fa6:	0003      	movs	r3, r0
   20fa8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   20faa:	2317      	movs	r3, #23
   20fac:	18fb      	adds	r3, r7, r3
   20fae:	781b      	ldrb	r3, [r3, #0]
   20fb0:	b25b      	sxtb	r3, r3
   20fb2:	2b01      	cmp	r3, #1
   20fb4:	d00e      	beq.n	20fd4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   20fb6:	4a3e      	ldr	r2, [pc, #248]	; (210b0 <nm_spi_write+0x188>)
   20fb8:	4937      	ldr	r1, [pc, #220]	; (21098 <nm_spi_write+0x170>)
   20fba:	4b38      	ldr	r3, [pc, #224]	; (2109c <nm_spi_write+0x174>)
   20fbc:	0018      	movs	r0, r3
   20fbe:	4b38      	ldr	r3, [pc, #224]	; (210a0 <nm_spi_write+0x178>)
   20fc0:	4798      	blx	r3
   20fc2:	4b3c      	ldr	r3, [pc, #240]	; (210b4 <nm_spi_write+0x18c>)
   20fc4:	0018      	movs	r0, r3
   20fc6:	4b36      	ldr	r3, [pc, #216]	; (210a0 <nm_spi_write+0x178>)
   20fc8:	4798      	blx	r3
   20fca:	4b37      	ldr	r3, [pc, #220]	; (210a8 <nm_spi_write+0x180>)
   20fcc:	0018      	movs	r0, r3
   20fce:	4b34      	ldr	r3, [pc, #208]	; (210a0 <nm_spi_write+0x178>)
   20fd0:	4798      	blx	r3
		goto _FAIL_;
   20fd2:	e01e      	b.n	21012 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   20fd4:	2317      	movs	r3, #23
   20fd6:	18fc      	adds	r4, r7, r3
   20fd8:	2315      	movs	r3, #21
   20fda:	18fb      	adds	r3, r7, r3
   20fdc:	781b      	ldrb	r3, [r3, #0]
   20fde:	0018      	movs	r0, r3
   20fe0:	4b35      	ldr	r3, [pc, #212]	; (210b8 <nm_spi_write+0x190>)
   20fe2:	4798      	blx	r3
   20fe4:	0003      	movs	r3, r0
   20fe6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   20fe8:	2317      	movs	r3, #23
   20fea:	18fb      	adds	r3, r7, r3
   20fec:	781b      	ldrb	r3, [r3, #0]
   20fee:	b25b      	sxtb	r3, r3
   20ff0:	2b01      	cmp	r3, #1
   20ff2:	d00e      	beq.n	21012 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   20ff4:	4a31      	ldr	r2, [pc, #196]	; (210bc <nm_spi_write+0x194>)
   20ff6:	4928      	ldr	r1, [pc, #160]	; (21098 <nm_spi_write+0x170>)
   20ff8:	4b28      	ldr	r3, [pc, #160]	; (2109c <nm_spi_write+0x174>)
   20ffa:	0018      	movs	r0, r3
   20ffc:	4b28      	ldr	r3, [pc, #160]	; (210a0 <nm_spi_write+0x178>)
   20ffe:	4798      	blx	r3
   21000:	4b2c      	ldr	r3, [pc, #176]	; (210b4 <nm_spi_write+0x18c>)
   21002:	0018      	movs	r0, r3
   21004:	4b26      	ldr	r3, [pc, #152]	; (210a0 <nm_spi_write+0x178>)
   21006:	4798      	blx	r3
   21008:	4b27      	ldr	r3, [pc, #156]	; (210a8 <nm_spi_write+0x180>)
   2100a:	0018      	movs	r0, r3
   2100c:	4b24      	ldr	r3, [pc, #144]	; (210a0 <nm_spi_write+0x178>)
   2100e:	4798      	blx	r3
		goto _FAIL_;
   21010:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   21012:	2317      	movs	r3, #23
   21014:	18fb      	adds	r3, r7, r3
   21016:	781b      	ldrb	r3, [r3, #0]
   21018:	b25b      	sxtb	r3, r3
   2101a:	2b01      	cmp	r3, #1
   2101c:	d030      	beq.n	21080 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2101e:	2001      	movs	r0, #1
   21020:	4b27      	ldr	r3, [pc, #156]	; (210c0 <nm_spi_write+0x198>)
   21022:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   21024:	2300      	movs	r3, #0
   21026:	9300      	str	r3, [sp, #0]
   21028:	2300      	movs	r3, #0
   2102a:	2200      	movs	r2, #0
   2102c:	2100      	movs	r1, #0
   2102e:	20cf      	movs	r0, #207	; 0xcf
   21030:	4c24      	ldr	r4, [pc, #144]	; (210c4 <nm_spi_write+0x19c>)
   21032:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   21034:	20cf      	movs	r0, #207	; 0xcf
   21036:	4b24      	ldr	r3, [pc, #144]	; (210c8 <nm_spi_write+0x1a0>)
   21038:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2103a:	4a24      	ldr	r2, [pc, #144]	; (210cc <nm_spi_write+0x1a4>)
   2103c:	4916      	ldr	r1, [pc, #88]	; (21098 <nm_spi_write+0x170>)
   2103e:	4b17      	ldr	r3, [pc, #92]	; (2109c <nm_spi_write+0x174>)
   21040:	0018      	movs	r0, r3
   21042:	4b17      	ldr	r3, [pc, #92]	; (210a0 <nm_spi_write+0x178>)
   21044:	4798      	blx	r3
   21046:	2316      	movs	r3, #22
   21048:	18fb      	adds	r3, r7, r3
   2104a:	7819      	ldrb	r1, [r3, #0]
   2104c:	1dbb      	adds	r3, r7, #6
   2104e:	881b      	ldrh	r3, [r3, #0]
   21050:	68fa      	ldr	r2, [r7, #12]
   21052:	481f      	ldr	r0, [pc, #124]	; (210d0 <nm_spi_write+0x1a8>)
   21054:	4c12      	ldr	r4, [pc, #72]	; (210a0 <nm_spi_write+0x178>)
   21056:	47a0      	blx	r4
   21058:	4b13      	ldr	r3, [pc, #76]	; (210a8 <nm_spi_write+0x180>)
   2105a:	0018      	movs	r0, r3
   2105c:	4b10      	ldr	r3, [pc, #64]	; (210a0 <nm_spi_write+0x178>)
   2105e:	4798      	blx	r3
		nm_bsp_sleep(1);
   21060:	2001      	movs	r0, #1
   21062:	4b17      	ldr	r3, [pc, #92]	; (210c0 <nm_spi_write+0x198>)
   21064:	4798      	blx	r3
		retry--;
   21066:	2316      	movs	r3, #22
   21068:	18fb      	adds	r3, r7, r3
   2106a:	781a      	ldrb	r2, [r3, #0]
   2106c:	2316      	movs	r3, #22
   2106e:	18fb      	adds	r3, r7, r3
   21070:	3a01      	subs	r2, #1
   21072:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   21074:	2316      	movs	r3, #22
   21076:	18fb      	adds	r3, r7, r3
   21078:	781b      	ldrb	r3, [r3, #0]
   2107a:	2b00      	cmp	r3, #0
   2107c:	d000      	beq.n	21080 <nm_spi_write+0x158>
   2107e:	e762      	b.n	20f46 <nm_spi_write+0x1e>
	}


	return result;
   21080:	2317      	movs	r3, #23
   21082:	18fb      	adds	r3, r7, r3
   21084:	781b      	ldrb	r3, [r3, #0]
   21086:	b25b      	sxtb	r3, r3
}
   21088:	0018      	movs	r0, r3
   2108a:	46bd      	mov	sp, r7
   2108c:	b007      	add	sp, #28
   2108e:	bd90      	pop	{r4, r7, pc}
   21090:	00020311 	.word	0x00020311
   21094:	000003cf 	.word	0x000003cf
   21098:	000376b4 	.word	0x000376b4
   2109c:	0003706c 	.word	0x0003706c
   210a0:	0001a5e9 	.word	0x0001a5e9
   210a4:	00037420 	.word	0x00037420
   210a8:	000370ac 	.word	0x000370ac
   210ac:	00020c05 	.word	0x00020c05
   210b0:	000003d9 	.word	0x000003d9
   210b4:	00037450 	.word	0x00037450
   210b8:	000200d5 	.word	0x000200d5
   210bc:	000003e1 	.word	0x000003e1
   210c0:	0001cc51 	.word	0x0001cc51
   210c4:	0001fd95 	.word	0x0001fd95
   210c8:	000201d5 	.word	0x000201d5
   210cc:	000003eb 	.word	0x000003eb
   210d0:	00037478 	.word	0x00037478

000210d4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   210d4:	b590      	push	{r4, r7, lr}
   210d6:	b087      	sub	sp, #28
   210d8:	af02      	add	r7, sp, #8
   210da:	6078      	str	r0, [r7, #4]
   210dc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   210de:	230f      	movs	r3, #15
   210e0:	18fb      	adds	r3, r7, r3
   210e2:	220a      	movs	r2, #10
   210e4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   210e6:	230c      	movs	r3, #12
   210e8:	18fb      	adds	r3, r7, r3
   210ea:	2201      	movs	r2, #1
   210ec:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   210ee:	230e      	movs	r3, #14
   210f0:	18fb      	adds	r3, r7, r3
   210f2:	22ca      	movs	r2, #202	; 0xca
   210f4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   210f6:	230d      	movs	r3, #13
   210f8:	18fb      	adds	r3, r7, r3
   210fa:	2200      	movs	r2, #0
   210fc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   210fe:	687b      	ldr	r3, [r7, #4]
   21100:	2bff      	cmp	r3, #255	; 0xff
   21102:	d808      	bhi.n	21116 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   21104:	230e      	movs	r3, #14
   21106:	18fb      	adds	r3, r7, r3
   21108:	22c4      	movs	r2, #196	; 0xc4
   2110a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2110c:	230d      	movs	r3, #13
   2110e:	18fb      	adds	r3, r7, r3
   21110:	2201      	movs	r2, #1
   21112:	701a      	strb	r2, [r3, #0]
   21114:	e007      	b.n	21126 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   21116:	230e      	movs	r3, #14
   21118:	18fb      	adds	r3, r7, r3
   2111a:	22ca      	movs	r2, #202	; 0xca
   2111c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2111e:	230d      	movs	r3, #13
   21120:	18fb      	adds	r3, r7, r3
   21122:	2200      	movs	r2, #0
   21124:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   21126:	2308      	movs	r3, #8
   21128:	18fa      	adds	r2, r7, r3
   2112a:	6879      	ldr	r1, [r7, #4]
   2112c:	230e      	movs	r3, #14
   2112e:	18fb      	adds	r3, r7, r3
   21130:	7818      	ldrb	r0, [r3, #0]
   21132:	230d      	movs	r3, #13
   21134:	18fb      	adds	r3, r7, r3
   21136:	781b      	ldrb	r3, [r3, #0]
   21138:	9300      	str	r3, [sp, #0]
   2113a:	2304      	movs	r3, #4
   2113c:	4c37      	ldr	r4, [pc, #220]	; (2121c <spi_read_reg+0x148>)
   2113e:	47a0      	blx	r4
   21140:	0002      	movs	r2, r0
   21142:	230c      	movs	r3, #12
   21144:	18fb      	adds	r3, r7, r3
   21146:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   21148:	230c      	movs	r3, #12
   2114a:	18fb      	adds	r3, r7, r3
   2114c:	781b      	ldrb	r3, [r3, #0]
   2114e:	b25b      	sxtb	r3, r3
   21150:	2b01      	cmp	r3, #1
   21152:	d010      	beq.n	21176 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   21154:	4a32      	ldr	r2, [pc, #200]	; (21220 <spi_read_reg+0x14c>)
   21156:	4933      	ldr	r1, [pc, #204]	; (21224 <spi_read_reg+0x150>)
   21158:	4b33      	ldr	r3, [pc, #204]	; (21228 <spi_read_reg+0x154>)
   2115a:	0018      	movs	r0, r3
   2115c:	4b33      	ldr	r3, [pc, #204]	; (2122c <spi_read_reg+0x158>)
   2115e:	4798      	blx	r3
   21160:	687a      	ldr	r2, [r7, #4]
   21162:	4b33      	ldr	r3, [pc, #204]	; (21230 <spi_read_reg+0x15c>)
   21164:	0011      	movs	r1, r2
   21166:	0018      	movs	r0, r3
   21168:	4b30      	ldr	r3, [pc, #192]	; (2122c <spi_read_reg+0x158>)
   2116a:	4798      	blx	r3
   2116c:	4b31      	ldr	r3, [pc, #196]	; (21234 <spi_read_reg+0x160>)
   2116e:	0018      	movs	r0, r3
   21170:	4b2e      	ldr	r3, [pc, #184]	; (2122c <spi_read_reg+0x158>)
   21172:	4798      	blx	r3
		goto _FAIL_;
   21174:	e014      	b.n	211a0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   21176:	2308      	movs	r3, #8
   21178:	18fb      	adds	r3, r7, r3
   2117a:	781b      	ldrb	r3, [r3, #0]
   2117c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2117e:	2308      	movs	r3, #8
   21180:	18fb      	adds	r3, r7, r3
   21182:	785b      	ldrb	r3, [r3, #1]
   21184:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   21186:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   21188:	2308      	movs	r3, #8
   2118a:	18fb      	adds	r3, r7, r3
   2118c:	789b      	ldrb	r3, [r3, #2]
   2118e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   21190:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   21192:	2308      	movs	r3, #8
   21194:	18fb      	adds	r3, r7, r3
   21196:	78db      	ldrb	r3, [r3, #3]
   21198:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2119a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2119c:	683b      	ldr	r3, [r7, #0]
   2119e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   211a0:	230c      	movs	r3, #12
   211a2:	18fb      	adds	r3, r7, r3
   211a4:	781b      	ldrb	r3, [r3, #0]
   211a6:	b25b      	sxtb	r3, r3
   211a8:	2b01      	cmp	r3, #1
   211aa:	d02f      	beq.n	2120c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   211ac:	2001      	movs	r0, #1
   211ae:	4b22      	ldr	r3, [pc, #136]	; (21238 <spi_read_reg+0x164>)
   211b0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   211b2:	2300      	movs	r3, #0
   211b4:	9300      	str	r3, [sp, #0]
   211b6:	2300      	movs	r3, #0
   211b8:	2200      	movs	r2, #0
   211ba:	2100      	movs	r1, #0
   211bc:	20cf      	movs	r0, #207	; 0xcf
   211be:	4c1f      	ldr	r4, [pc, #124]	; (2123c <spi_read_reg+0x168>)
   211c0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   211c2:	20cf      	movs	r0, #207	; 0xcf
   211c4:	4b1e      	ldr	r3, [pc, #120]	; (21240 <spi_read_reg+0x16c>)
   211c6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   211c8:	4a1e      	ldr	r2, [pc, #120]	; (21244 <spi_read_reg+0x170>)
   211ca:	4916      	ldr	r1, [pc, #88]	; (21224 <spi_read_reg+0x150>)
   211cc:	4b16      	ldr	r3, [pc, #88]	; (21228 <spi_read_reg+0x154>)
   211ce:	0018      	movs	r0, r3
   211d0:	4b16      	ldr	r3, [pc, #88]	; (2122c <spi_read_reg+0x158>)
   211d2:	4798      	blx	r3
   211d4:	230f      	movs	r3, #15
   211d6:	18fb      	adds	r3, r7, r3
   211d8:	7819      	ldrb	r1, [r3, #0]
   211da:	687a      	ldr	r2, [r7, #4]
   211dc:	4b1a      	ldr	r3, [pc, #104]	; (21248 <spi_read_reg+0x174>)
   211de:	0018      	movs	r0, r3
   211e0:	4b12      	ldr	r3, [pc, #72]	; (2122c <spi_read_reg+0x158>)
   211e2:	4798      	blx	r3
   211e4:	4b13      	ldr	r3, [pc, #76]	; (21234 <spi_read_reg+0x160>)
   211e6:	0018      	movs	r0, r3
   211e8:	4b10      	ldr	r3, [pc, #64]	; (2122c <spi_read_reg+0x158>)
   211ea:	4798      	blx	r3
		nm_bsp_sleep(1);
   211ec:	2001      	movs	r0, #1
   211ee:	4b12      	ldr	r3, [pc, #72]	; (21238 <spi_read_reg+0x164>)
   211f0:	4798      	blx	r3
		retry--;
   211f2:	230f      	movs	r3, #15
   211f4:	18fb      	adds	r3, r7, r3
   211f6:	781a      	ldrb	r2, [r3, #0]
   211f8:	230f      	movs	r3, #15
   211fa:	18fb      	adds	r3, r7, r3
   211fc:	3a01      	subs	r2, #1
   211fe:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   21200:	230f      	movs	r3, #15
   21202:	18fb      	adds	r3, r7, r3
   21204:	781b      	ldrb	r3, [r3, #0]
   21206:	2b00      	cmp	r3, #0
   21208:	d000      	beq.n	2120c <spi_read_reg+0x138>
   2120a:	e778      	b.n	210fe <spi_read_reg+0x2a>
	}
		
	return result;
   2120c:	230c      	movs	r3, #12
   2120e:	18fb      	adds	r3, r7, r3
   21210:	781b      	ldrb	r3, [r3, #0]
   21212:	b25b      	sxtb	r3, r3
}
   21214:	0018      	movs	r0, r3
   21216:	46bd      	mov	sp, r7
   21218:	b005      	add	sp, #20
   2121a:	bd90      	pop	{r4, r7, pc}
   2121c:	00020311 	.word	0x00020311
   21220:	00000423 	.word	0x00000423
   21224:	000376c4 	.word	0x000376c4
   21228:	0003706c 	.word	0x0003706c
   2122c:	0001a5e9 	.word	0x0001a5e9
   21230:	00037494 	.word	0x00037494
   21234:	000370ac 	.word	0x000370ac
   21238:	0001cc51 	.word	0x0001cc51
   2123c:	0001fd95 	.word	0x0001fd95
   21240:	000201d5 	.word	0x000201d5
   21244:	00000435 	.word	0x00000435
   21248:	000374c0 	.word	0x000374c0

0002124c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2124c:	b590      	push	{r4, r7, lr}
   2124e:	b089      	sub	sp, #36	; 0x24
   21250:	af02      	add	r7, sp, #8
   21252:	60f8      	str	r0, [r7, #12]
   21254:	60b9      	str	r1, [r7, #8]
   21256:	1dbb      	adds	r3, r7, #6
   21258:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2125a:	2316      	movs	r3, #22
   2125c:	18fb      	adds	r3, r7, r3
   2125e:	22c8      	movs	r2, #200	; 0xc8
   21260:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   21262:	2317      	movs	r3, #23
   21264:	18fb      	adds	r3, r7, r3
   21266:	220a      	movs	r2, #10
   21268:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2126a:	1dbb      	adds	r3, r7, #6
   2126c:	881c      	ldrh	r4, [r3, #0]
   2126e:	68ba      	ldr	r2, [r7, #8]
   21270:	68f9      	ldr	r1, [r7, #12]
   21272:	2316      	movs	r3, #22
   21274:	18fb      	adds	r3, r7, r3
   21276:	7818      	ldrb	r0, [r3, #0]
   21278:	2300      	movs	r3, #0
   2127a:	9300      	str	r3, [sp, #0]
   2127c:	0023      	movs	r3, r4
   2127e:	4c2e      	ldr	r4, [pc, #184]	; (21338 <nm_spi_read+0xec>)
   21280:	47a0      	blx	r4
   21282:	0002      	movs	r2, r0
   21284:	2315      	movs	r3, #21
   21286:	18fb      	adds	r3, r7, r3
   21288:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2128a:	2315      	movs	r3, #21
   2128c:	18fb      	adds	r3, r7, r3
   2128e:	781b      	ldrb	r3, [r3, #0]
   21290:	b25b      	sxtb	r3, r3
   21292:	2b01      	cmp	r3, #1
   21294:	d010      	beq.n	212b8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   21296:	4a29      	ldr	r2, [pc, #164]	; (2133c <nm_spi_read+0xf0>)
   21298:	4929      	ldr	r1, [pc, #164]	; (21340 <nm_spi_read+0xf4>)
   2129a:	4b2a      	ldr	r3, [pc, #168]	; (21344 <nm_spi_read+0xf8>)
   2129c:	0018      	movs	r0, r3
   2129e:	4b2a      	ldr	r3, [pc, #168]	; (21348 <nm_spi_read+0xfc>)
   212a0:	4798      	blx	r3
   212a2:	68fa      	ldr	r2, [r7, #12]
   212a4:	4b29      	ldr	r3, [pc, #164]	; (2134c <nm_spi_read+0x100>)
   212a6:	0011      	movs	r1, r2
   212a8:	0018      	movs	r0, r3
   212aa:	4b27      	ldr	r3, [pc, #156]	; (21348 <nm_spi_read+0xfc>)
   212ac:	4798      	blx	r3
   212ae:	4b28      	ldr	r3, [pc, #160]	; (21350 <nm_spi_read+0x104>)
   212b0:	0018      	movs	r0, r3
   212b2:	4b25      	ldr	r3, [pc, #148]	; (21348 <nm_spi_read+0xfc>)
   212b4:	4798      	blx	r3
		goto _FAIL_;
   212b6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   212b8:	2315      	movs	r3, #21
   212ba:	18fb      	adds	r3, r7, r3
   212bc:	781b      	ldrb	r3, [r3, #0]
   212be:	b25b      	sxtb	r3, r3
   212c0:	2b01      	cmp	r3, #1
   212c2:	d030      	beq.n	21326 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   212c4:	2001      	movs	r0, #1
   212c6:	4b23      	ldr	r3, [pc, #140]	; (21354 <nm_spi_read+0x108>)
   212c8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   212ca:	2300      	movs	r3, #0
   212cc:	9300      	str	r3, [sp, #0]
   212ce:	2300      	movs	r3, #0
   212d0:	2200      	movs	r2, #0
   212d2:	2100      	movs	r1, #0
   212d4:	20cf      	movs	r0, #207	; 0xcf
   212d6:	4c20      	ldr	r4, [pc, #128]	; (21358 <nm_spi_read+0x10c>)
   212d8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   212da:	20cf      	movs	r0, #207	; 0xcf
   212dc:	4b1f      	ldr	r3, [pc, #124]	; (2135c <nm_spi_read+0x110>)
   212de:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   212e0:	4a1f      	ldr	r2, [pc, #124]	; (21360 <nm_spi_read+0x114>)
   212e2:	4917      	ldr	r1, [pc, #92]	; (21340 <nm_spi_read+0xf4>)
   212e4:	4b17      	ldr	r3, [pc, #92]	; (21344 <nm_spi_read+0xf8>)
   212e6:	0018      	movs	r0, r3
   212e8:	4b17      	ldr	r3, [pc, #92]	; (21348 <nm_spi_read+0xfc>)
   212ea:	4798      	blx	r3
   212ec:	2317      	movs	r3, #23
   212ee:	18fb      	adds	r3, r7, r3
   212f0:	7819      	ldrb	r1, [r3, #0]
   212f2:	1dbb      	adds	r3, r7, #6
   212f4:	881b      	ldrh	r3, [r3, #0]
   212f6:	68fa      	ldr	r2, [r7, #12]
   212f8:	481a      	ldr	r0, [pc, #104]	; (21364 <nm_spi_read+0x118>)
   212fa:	4c13      	ldr	r4, [pc, #76]	; (21348 <nm_spi_read+0xfc>)
   212fc:	47a0      	blx	r4
   212fe:	4b14      	ldr	r3, [pc, #80]	; (21350 <nm_spi_read+0x104>)
   21300:	0018      	movs	r0, r3
   21302:	4b11      	ldr	r3, [pc, #68]	; (21348 <nm_spi_read+0xfc>)
   21304:	4798      	blx	r3
		nm_bsp_sleep(1);
   21306:	2001      	movs	r0, #1
   21308:	4b12      	ldr	r3, [pc, #72]	; (21354 <nm_spi_read+0x108>)
   2130a:	4798      	blx	r3
		retry--;
   2130c:	2317      	movs	r3, #23
   2130e:	18fb      	adds	r3, r7, r3
   21310:	781a      	ldrb	r2, [r3, #0]
   21312:	2317      	movs	r3, #23
   21314:	18fb      	adds	r3, r7, r3
   21316:	3a01      	subs	r2, #1
   21318:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2131a:	2317      	movs	r3, #23
   2131c:	18fb      	adds	r3, r7, r3
   2131e:	781b      	ldrb	r3, [r3, #0]
   21320:	2b00      	cmp	r3, #0
   21322:	d000      	beq.n	21326 <nm_spi_read+0xda>
   21324:	e7a1      	b.n	2126a <nm_spi_read+0x1e>
	}

	return result;
   21326:	2315      	movs	r3, #21
   21328:	18fb      	adds	r3, r7, r3
   2132a:	781b      	ldrb	r3, [r3, #0]
   2132c:	b25b      	sxtb	r3, r3
}
   2132e:	0018      	movs	r0, r3
   21330:	46bd      	mov	sp, r7
   21332:	b007      	add	sp, #28
   21334:	bd90      	pop	{r4, r7, pc}
   21336:	46c0      	nop			; (mov r8, r8)
   21338:	00020311 	.word	0x00020311
   2133c:	00000472 	.word	0x00000472
   21340:	000376d4 	.word	0x000376d4
   21344:	0003706c 	.word	0x0003706c
   21348:	0001a5e9 	.word	0x0001a5e9
   2134c:	000374d8 	.word	0x000374d8
   21350:	000370ac 	.word	0x000370ac
   21354:	0001cc51 	.word	0x0001cc51
   21358:	0001fd95 	.word	0x0001fd95
   2135c:	000201d5 	.word	0x000201d5
   21360:	0000047d 	.word	0x0000047d
   21364:	00037478 	.word	0x00037478

00021368 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   21368:	b580      	push	{r7, lr}
   2136a:	b082      	sub	sp, #8
   2136c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2136e:	4b0c      	ldr	r3, [pc, #48]	; (213a0 <spi_init_pkt_sz+0x38>)
   21370:	0018      	movs	r0, r3
   21372:	4b0c      	ldr	r3, [pc, #48]	; (213a4 <spi_init_pkt_sz+0x3c>)
   21374:	4798      	blx	r3
   21376:	0003      	movs	r3, r0
   21378:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2137a:	687b      	ldr	r3, [r7, #4]
   2137c:	2270      	movs	r2, #112	; 0x70
   2137e:	4393      	bics	r3, r2
   21380:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   21382:	687b      	ldr	r3, [r7, #4]
   21384:	2250      	movs	r2, #80	; 0x50
   21386:	4313      	orrs	r3, r2
   21388:	607b      	str	r3, [r7, #4]
   2138a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2138c:	687b      	ldr	r3, [r7, #4]
   2138e:	4a04      	ldr	r2, [pc, #16]	; (213a0 <spi_init_pkt_sz+0x38>)
   21390:	0019      	movs	r1, r3
   21392:	0010      	movs	r0, r2
   21394:	4b04      	ldr	r3, [pc, #16]	; (213a8 <spi_init_pkt_sz+0x40>)
   21396:	4798      	blx	r3
}
   21398:	46c0      	nop			; (mov r8, r8)
   2139a:	46bd      	mov	sp, r7
   2139c:	b002      	add	sp, #8
   2139e:	bd80      	pop	{r7, pc}
   213a0:	0000e824 	.word	0x0000e824
   213a4:	00021541 	.word	0x00021541
   213a8:	000215b5 	.word	0x000215b5

000213ac <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   213ac:	b590      	push	{r4, r7, lr}
   213ae:	b083      	sub	sp, #12
   213b0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   213b2:	2300      	movs	r3, #0
   213b4:	9300      	str	r3, [sp, #0]
   213b6:	2300      	movs	r3, #0
   213b8:	2200      	movs	r2, #0
   213ba:	2100      	movs	r1, #0
   213bc:	20cf      	movs	r0, #207	; 0xcf
   213be:	4c05      	ldr	r4, [pc, #20]	; (213d4 <nm_spi_reset+0x28>)
   213c0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   213c2:	20cf      	movs	r0, #207	; 0xcf
   213c4:	4b04      	ldr	r3, [pc, #16]	; (213d8 <nm_spi_reset+0x2c>)
   213c6:	4798      	blx	r3
	return M2M_SUCCESS;
   213c8:	2300      	movs	r3, #0
}
   213ca:	0018      	movs	r0, r3
   213cc:	46bd      	mov	sp, r7
   213ce:	b001      	add	sp, #4
   213d0:	bd90      	pop	{r4, r7, pc}
   213d2:	46c0      	nop			; (mov r8, r8)
   213d4:	0001fd95 	.word	0x0001fd95
   213d8:	000201d5 	.word	0x000201d5

000213dc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   213dc:	b580      	push	{r7, lr}
   213de:	b082      	sub	sp, #8
   213e0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   213e2:	2300      	movs	r3, #0
   213e4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   213e6:	4b40      	ldr	r3, [pc, #256]	; (214e8 <nm_spi_init+0x10c>)
   213e8:	2200      	movs	r2, #0
   213ea:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   213ec:	003b      	movs	r3, r7
   213ee:	4a3f      	ldr	r2, [pc, #252]	; (214ec <nm_spi_init+0x110>)
   213f0:	0019      	movs	r1, r3
   213f2:	0010      	movs	r0, r2
   213f4:	4b3e      	ldr	r3, [pc, #248]	; (214f0 <nm_spi_init+0x114>)
   213f6:	4798      	blx	r3
   213f8:	1e03      	subs	r3, r0, #0
   213fa:	d129      	bne.n	21450 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   213fc:	4b3a      	ldr	r3, [pc, #232]	; (214e8 <nm_spi_init+0x10c>)
   213fe:	2201      	movs	r2, #1
   21400:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   21402:	2398      	movs	r3, #152	; 0x98
   21404:	00da      	lsls	r2, r3, #3
   21406:	493b      	ldr	r1, [pc, #236]	; (214f4 <nm_spi_init+0x118>)
   21408:	4b3b      	ldr	r3, [pc, #236]	; (214f8 <nm_spi_init+0x11c>)
   2140a:	0018      	movs	r0, r3
   2140c:	4b3b      	ldr	r3, [pc, #236]	; (214fc <nm_spi_init+0x120>)
   2140e:	4798      	blx	r3
   21410:	4b3b      	ldr	r3, [pc, #236]	; (21500 <nm_spi_init+0x124>)
   21412:	0018      	movs	r0, r3
   21414:	4b39      	ldr	r3, [pc, #228]	; (214fc <nm_spi_init+0x120>)
   21416:	4798      	blx	r3
   21418:	4b3a      	ldr	r3, [pc, #232]	; (21504 <nm_spi_init+0x128>)
   2141a:	0018      	movs	r0, r3
   2141c:	4b37      	ldr	r3, [pc, #220]	; (214fc <nm_spi_init+0x120>)
   2141e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   21420:	003b      	movs	r3, r7
   21422:	4a32      	ldr	r2, [pc, #200]	; (214ec <nm_spi_init+0x110>)
   21424:	0019      	movs	r1, r3
   21426:	0010      	movs	r0, r2
   21428:	4b31      	ldr	r3, [pc, #196]	; (214f0 <nm_spi_init+0x114>)
   2142a:	4798      	blx	r3
   2142c:	1e03      	subs	r3, r0, #0
   2142e:	d10f      	bne.n	21450 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   21430:	4a35      	ldr	r2, [pc, #212]	; (21508 <nm_spi_init+0x12c>)
   21432:	4930      	ldr	r1, [pc, #192]	; (214f4 <nm_spi_init+0x118>)
   21434:	4b30      	ldr	r3, [pc, #192]	; (214f8 <nm_spi_init+0x11c>)
   21436:	0018      	movs	r0, r3
   21438:	4b30      	ldr	r3, [pc, #192]	; (214fc <nm_spi_init+0x120>)
   2143a:	4798      	blx	r3
   2143c:	4b33      	ldr	r3, [pc, #204]	; (2150c <nm_spi_init+0x130>)
   2143e:	0018      	movs	r0, r3
   21440:	4b2e      	ldr	r3, [pc, #184]	; (214fc <nm_spi_init+0x120>)
   21442:	4798      	blx	r3
   21444:	4b2f      	ldr	r3, [pc, #188]	; (21504 <nm_spi_init+0x128>)
   21446:	0018      	movs	r0, r3
   21448:	4b2c      	ldr	r3, [pc, #176]	; (214fc <nm_spi_init+0x120>)
   2144a:	4798      	blx	r3
			return 0;
   2144c:	2300      	movs	r3, #0
   2144e:	e047      	b.n	214e0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   21450:	4b25      	ldr	r3, [pc, #148]	; (214e8 <nm_spi_init+0x10c>)
   21452:	781b      	ldrb	r3, [r3, #0]
   21454:	2b00      	cmp	r3, #0
   21456:	d126      	bne.n	214a6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   21458:	683b      	ldr	r3, [r7, #0]
   2145a:	220c      	movs	r2, #12
   2145c:	4393      	bics	r3, r2
   2145e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   21460:	683b      	ldr	r3, [r7, #0]
   21462:	2270      	movs	r2, #112	; 0x70
   21464:	4393      	bics	r3, r2
   21466:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   21468:	683b      	ldr	r3, [r7, #0]
   2146a:	2250      	movs	r2, #80	; 0x50
   2146c:	4313      	orrs	r3, r2
   2146e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   21470:	683b      	ldr	r3, [r7, #0]
   21472:	4a1e      	ldr	r2, [pc, #120]	; (214ec <nm_spi_init+0x110>)
   21474:	0019      	movs	r1, r3
   21476:	0010      	movs	r0, r2
   21478:	4b25      	ldr	r3, [pc, #148]	; (21510 <nm_spi_init+0x134>)
   2147a:	4798      	blx	r3
   2147c:	1e03      	subs	r3, r0, #0
   2147e:	d10f      	bne.n	214a0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   21480:	4a24      	ldr	r2, [pc, #144]	; (21514 <nm_spi_init+0x138>)
   21482:	491c      	ldr	r1, [pc, #112]	; (214f4 <nm_spi_init+0x118>)
   21484:	4b1c      	ldr	r3, [pc, #112]	; (214f8 <nm_spi_init+0x11c>)
   21486:	0018      	movs	r0, r3
   21488:	4b1c      	ldr	r3, [pc, #112]	; (214fc <nm_spi_init+0x120>)
   2148a:	4798      	blx	r3
   2148c:	4b22      	ldr	r3, [pc, #136]	; (21518 <nm_spi_init+0x13c>)
   2148e:	0018      	movs	r0, r3
   21490:	4b1a      	ldr	r3, [pc, #104]	; (214fc <nm_spi_init+0x120>)
   21492:	4798      	blx	r3
   21494:	4b1b      	ldr	r3, [pc, #108]	; (21504 <nm_spi_init+0x128>)
   21496:	0018      	movs	r0, r3
   21498:	4b18      	ldr	r3, [pc, #96]	; (214fc <nm_spi_init+0x120>)
   2149a:	4798      	blx	r3
			return 0;
   2149c:	2300      	movs	r3, #0
   2149e:	e01f      	b.n	214e0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   214a0:	4b11      	ldr	r3, [pc, #68]	; (214e8 <nm_spi_init+0x10c>)
   214a2:	2201      	movs	r2, #1
   214a4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   214a6:	1d3a      	adds	r2, r7, #4
   214a8:	2380      	movs	r3, #128	; 0x80
   214aa:	015b      	lsls	r3, r3, #5
   214ac:	0011      	movs	r1, r2
   214ae:	0018      	movs	r0, r3
   214b0:	4b0f      	ldr	r3, [pc, #60]	; (214f0 <nm_spi_init+0x114>)
   214b2:	4798      	blx	r3
   214b4:	1e03      	subs	r3, r0, #0
   214b6:	d110      	bne.n	214da <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   214b8:	4a18      	ldr	r2, [pc, #96]	; (2151c <nm_spi_init+0x140>)
   214ba:	490e      	ldr	r1, [pc, #56]	; (214f4 <nm_spi_init+0x118>)
   214bc:	4b0e      	ldr	r3, [pc, #56]	; (214f8 <nm_spi_init+0x11c>)
   214be:	0018      	movs	r0, r3
   214c0:	4b0e      	ldr	r3, [pc, #56]	; (214fc <nm_spi_init+0x120>)
   214c2:	4798      	blx	r3
   214c4:	4b16      	ldr	r3, [pc, #88]	; (21520 <nm_spi_init+0x144>)
   214c6:	0018      	movs	r0, r3
   214c8:	4b0c      	ldr	r3, [pc, #48]	; (214fc <nm_spi_init+0x120>)
   214ca:	4798      	blx	r3
   214cc:	4b0d      	ldr	r3, [pc, #52]	; (21504 <nm_spi_init+0x128>)
   214ce:	0018      	movs	r0, r3
   214d0:	4b0a      	ldr	r3, [pc, #40]	; (214fc <nm_spi_init+0x120>)
   214d2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   214d4:	2306      	movs	r3, #6
   214d6:	425b      	negs	r3, r3
   214d8:	e002      	b.n	214e0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   214da:	4b12      	ldr	r3, [pc, #72]	; (21524 <nm_spi_init+0x148>)
   214dc:	4798      	blx	r3


	return M2M_SUCCESS;
   214de:	2300      	movs	r3, #0
}
   214e0:	0018      	movs	r0, r3
   214e2:	46bd      	mov	sp, r7
   214e4:	b002      	add	sp, #8
   214e6:	bd80      	pop	{r7, pc}
   214e8:	20003d2c 	.word	0x20003d2c
   214ec:	0000e824 	.word	0x0000e824
   214f0:	000210d5 	.word	0x000210d5
   214f4:	000376e0 	.word	0x000376e0
   214f8:	0003706c 	.word	0x0003706c
   214fc:	0001a5e9 	.word	0x0001a5e9
   21500:	00037508 	.word	0x00037508
   21504:	000370ac 	.word	0x000370ac
   21508:	000004c3 	.word	0x000004c3
   2150c:	00037558 	.word	0x00037558
   21510:	00020ddd 	.word	0x00020ddd
   21514:	000004cd 	.word	0x000004cd
   21518:	00037588 	.word	0x00037588
   2151c:	000004d7 	.word	0x000004d7
   21520:	000375bc 	.word	0x000375bc
   21524:	00021369 	.word	0x00021369

00021528 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   21528:	b580      	push	{r7, lr}
   2152a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2152c:	4b03      	ldr	r3, [pc, #12]	; (2153c <nm_spi_deinit+0x14>)
   2152e:	2200      	movs	r2, #0
   21530:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   21532:	2300      	movs	r3, #0
}
   21534:	0018      	movs	r0, r3
   21536:	46bd      	mov	sp, r7
   21538:	bd80      	pop	{r7, pc}
   2153a:	46c0      	nop			; (mov r8, r8)
   2153c:	20003d2c 	.word	0x20003d2c

00021540 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   21540:	b580      	push	{r7, lr}
   21542:	b084      	sub	sp, #16
   21544:	af00      	add	r7, sp, #0
   21546:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   21548:	230c      	movs	r3, #12
   2154a:	18fa      	adds	r2, r7, r3
   2154c:	687b      	ldr	r3, [r7, #4]
   2154e:	0011      	movs	r1, r2
   21550:	0018      	movs	r0, r3
   21552:	4b03      	ldr	r3, [pc, #12]	; (21560 <nm_spi_read_reg+0x20>)
   21554:	4798      	blx	r3

	return u32Val;
   21556:	68fb      	ldr	r3, [r7, #12]
}
   21558:	0018      	movs	r0, r3
   2155a:	46bd      	mov	sp, r7
   2155c:	b004      	add	sp, #16
   2155e:	bd80      	pop	{r7, pc}
   21560:	000210d5 	.word	0x000210d5

00021564 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   21564:	b590      	push	{r4, r7, lr}
   21566:	b085      	sub	sp, #20
   21568:	af00      	add	r7, sp, #0
   2156a:	6078      	str	r0, [r7, #4]
   2156c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2156e:	230f      	movs	r3, #15
   21570:	18fc      	adds	r4, r7, r3
   21572:	683a      	ldr	r2, [r7, #0]
   21574:	687b      	ldr	r3, [r7, #4]
   21576:	0011      	movs	r1, r2
   21578:	0018      	movs	r0, r3
   2157a:	4b0d      	ldr	r3, [pc, #52]	; (215b0 <nm_spi_read_reg_with_ret+0x4c>)
   2157c:	4798      	blx	r3
   2157e:	0003      	movs	r3, r0
   21580:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   21582:	230f      	movs	r3, #15
   21584:	18fb      	adds	r3, r7, r3
   21586:	781b      	ldrb	r3, [r3, #0]
   21588:	b25b      	sxtb	r3, r3
   2158a:	2b01      	cmp	r3, #1
   2158c:	d104      	bne.n	21598 <nm_spi_read_reg_with_ret+0x34>
   2158e:	230f      	movs	r3, #15
   21590:	18fb      	adds	r3, r7, r3
   21592:	2200      	movs	r2, #0
   21594:	701a      	strb	r2, [r3, #0]
   21596:	e003      	b.n	215a0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   21598:	230f      	movs	r3, #15
   2159a:	18fb      	adds	r3, r7, r3
   2159c:	22fa      	movs	r2, #250	; 0xfa
   2159e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   215a0:	230f      	movs	r3, #15
   215a2:	18fb      	adds	r3, r7, r3
   215a4:	781b      	ldrb	r3, [r3, #0]
   215a6:	b25b      	sxtb	r3, r3
}
   215a8:	0018      	movs	r0, r3
   215aa:	46bd      	mov	sp, r7
   215ac:	b005      	add	sp, #20
   215ae:	bd90      	pop	{r4, r7, pc}
   215b0:	000210d5 	.word	0x000210d5

000215b4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   215b4:	b590      	push	{r4, r7, lr}
   215b6:	b085      	sub	sp, #20
   215b8:	af00      	add	r7, sp, #0
   215ba:	6078      	str	r0, [r7, #4]
   215bc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   215be:	230f      	movs	r3, #15
   215c0:	18fc      	adds	r4, r7, r3
   215c2:	683a      	ldr	r2, [r7, #0]
   215c4:	687b      	ldr	r3, [r7, #4]
   215c6:	0011      	movs	r1, r2
   215c8:	0018      	movs	r0, r3
   215ca:	4b0d      	ldr	r3, [pc, #52]	; (21600 <nm_spi_write_reg+0x4c>)
   215cc:	4798      	blx	r3
   215ce:	0003      	movs	r3, r0
   215d0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   215d2:	230f      	movs	r3, #15
   215d4:	18fb      	adds	r3, r7, r3
   215d6:	781b      	ldrb	r3, [r3, #0]
   215d8:	b25b      	sxtb	r3, r3
   215da:	2b01      	cmp	r3, #1
   215dc:	d104      	bne.n	215e8 <nm_spi_write_reg+0x34>
   215de:	230f      	movs	r3, #15
   215e0:	18fb      	adds	r3, r7, r3
   215e2:	2200      	movs	r2, #0
   215e4:	701a      	strb	r2, [r3, #0]
   215e6:	e003      	b.n	215f0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   215e8:	230f      	movs	r3, #15
   215ea:	18fb      	adds	r3, r7, r3
   215ec:	22fa      	movs	r2, #250	; 0xfa
   215ee:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   215f0:	230f      	movs	r3, #15
   215f2:	18fb      	adds	r3, r7, r3
   215f4:	781b      	ldrb	r3, [r3, #0]
   215f6:	b25b      	sxtb	r3, r3
}
   215f8:	0018      	movs	r0, r3
   215fa:	46bd      	mov	sp, r7
   215fc:	b005      	add	sp, #20
   215fe:	bd90      	pop	{r4, r7, pc}
   21600:	00020ddd 	.word	0x00020ddd

00021604 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21604:	b590      	push	{r4, r7, lr}
   21606:	b087      	sub	sp, #28
   21608:	af00      	add	r7, sp, #0
   2160a:	60f8      	str	r0, [r7, #12]
   2160c:	60b9      	str	r1, [r7, #8]
   2160e:	1dbb      	adds	r3, r7, #6
   21610:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   21612:	2317      	movs	r3, #23
   21614:	18fc      	adds	r4, r7, r3
   21616:	1dbb      	adds	r3, r7, #6
   21618:	881a      	ldrh	r2, [r3, #0]
   2161a:	68b9      	ldr	r1, [r7, #8]
   2161c:	68fb      	ldr	r3, [r7, #12]
   2161e:	0018      	movs	r0, r3
   21620:	4b0d      	ldr	r3, [pc, #52]	; (21658 <nm_spi_read_block+0x54>)
   21622:	4798      	blx	r3
   21624:	0003      	movs	r3, r0
   21626:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   21628:	2317      	movs	r3, #23
   2162a:	18fb      	adds	r3, r7, r3
   2162c:	781b      	ldrb	r3, [r3, #0]
   2162e:	b25b      	sxtb	r3, r3
   21630:	2b01      	cmp	r3, #1
   21632:	d104      	bne.n	2163e <nm_spi_read_block+0x3a>
   21634:	2317      	movs	r3, #23
   21636:	18fb      	adds	r3, r7, r3
   21638:	2200      	movs	r2, #0
   2163a:	701a      	strb	r2, [r3, #0]
   2163c:	e003      	b.n	21646 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2163e:	2317      	movs	r3, #23
   21640:	18fb      	adds	r3, r7, r3
   21642:	22fa      	movs	r2, #250	; 0xfa
   21644:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   21646:	2317      	movs	r3, #23
   21648:	18fb      	adds	r3, r7, r3
   2164a:	781b      	ldrb	r3, [r3, #0]
   2164c:	b25b      	sxtb	r3, r3
}
   2164e:	0018      	movs	r0, r3
   21650:	46bd      	mov	sp, r7
   21652:	b007      	add	sp, #28
   21654:	bd90      	pop	{r4, r7, pc}
   21656:	46c0      	nop			; (mov r8, r8)
   21658:	0002124d 	.word	0x0002124d

0002165c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2165c:	b590      	push	{r4, r7, lr}
   2165e:	b087      	sub	sp, #28
   21660:	af00      	add	r7, sp, #0
   21662:	60f8      	str	r0, [r7, #12]
   21664:	60b9      	str	r1, [r7, #8]
   21666:	1dbb      	adds	r3, r7, #6
   21668:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2166a:	2317      	movs	r3, #23
   2166c:	18fc      	adds	r4, r7, r3
   2166e:	1dbb      	adds	r3, r7, #6
   21670:	881a      	ldrh	r2, [r3, #0]
   21672:	68b9      	ldr	r1, [r7, #8]
   21674:	68fb      	ldr	r3, [r7, #12]
   21676:	0018      	movs	r0, r3
   21678:	4b0d      	ldr	r3, [pc, #52]	; (216b0 <nm_spi_write_block+0x54>)
   2167a:	4798      	blx	r3
   2167c:	0003      	movs	r3, r0
   2167e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   21680:	2317      	movs	r3, #23
   21682:	18fb      	adds	r3, r7, r3
   21684:	781b      	ldrb	r3, [r3, #0]
   21686:	b25b      	sxtb	r3, r3
   21688:	2b01      	cmp	r3, #1
   2168a:	d104      	bne.n	21696 <nm_spi_write_block+0x3a>
   2168c:	2317      	movs	r3, #23
   2168e:	18fb      	adds	r3, r7, r3
   21690:	2200      	movs	r2, #0
   21692:	701a      	strb	r2, [r3, #0]
   21694:	e003      	b.n	2169e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   21696:	2317      	movs	r3, #23
   21698:	18fb      	adds	r3, r7, r3
   2169a:	22fa      	movs	r2, #250	; 0xfa
   2169c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2169e:	2317      	movs	r3, #23
   216a0:	18fb      	adds	r3, r7, r3
   216a2:	781b      	ldrb	r3, [r3, #0]
   216a4:	b25b      	sxtb	r3, r3
}
   216a6:	0018      	movs	r0, r3
   216a8:	46bd      	mov	sp, r7
   216aa:	b007      	add	sp, #28
   216ac:	bd90      	pop	{r4, r7, pc}
   216ae:	46c0      	nop			; (mov r8, r8)
   216b0:	00020f29 	.word	0x00020f29

000216b4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   216b4:	b590      	push	{r4, r7, lr}
   216b6:	b089      	sub	sp, #36	; 0x24
   216b8:	af00      	add	r7, sp, #0
   216ba:	60b9      	str	r1, [r7, #8]
   216bc:	0011      	movs	r1, r2
   216be:	607b      	str	r3, [r7, #4]
   216c0:	230f      	movs	r3, #15
   216c2:	18fb      	adds	r3, r7, r3
   216c4:	1c02      	adds	r2, r0, #0
   216c6:	701a      	strb	r2, [r3, #0]
   216c8:	230e      	movs	r3, #14
   216ca:	18fb      	adds	r3, r7, r3
   216cc:	1c0a      	adds	r2, r1, #0
   216ce:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   216d0:	2330      	movs	r3, #48	; 0x30
   216d2:	18fb      	adds	r3, r7, r3
   216d4:	881b      	ldrh	r3, [r3, #0]
   216d6:	2b00      	cmp	r3, #0
   216d8:	d100      	bne.n	216dc <Socket_ReadSocketData+0x28>
   216da:	e0d7      	b.n	2188c <Socket_ReadSocketData+0x1d8>
   216dc:	230f      	movs	r3, #15
   216de:	18fb      	adds	r3, r7, r3
   216e0:	2200      	movs	r2, #0
   216e2:	569a      	ldrsb	r2, [r3, r2]
   216e4:	4b6b      	ldr	r3, [pc, #428]	; (21894 <Socket_ReadSocketData+0x1e0>)
   216e6:	0112      	lsls	r2, r2, #4
   216e8:	58d3      	ldr	r3, [r2, r3]
   216ea:	2b00      	cmp	r3, #0
   216ec:	d100      	bne.n	216f0 <Socket_ReadSocketData+0x3c>
   216ee:	e0cd      	b.n	2188c <Socket_ReadSocketData+0x1d8>
   216f0:	230f      	movs	r3, #15
   216f2:	18fb      	adds	r3, r7, r3
   216f4:	781b      	ldrb	r3, [r3, #0]
   216f6:	b25b      	sxtb	r3, r3
   216f8:	4a66      	ldr	r2, [pc, #408]	; (21894 <Socket_ReadSocketData+0x1e0>)
   216fa:	011b      	lsls	r3, r3, #4
   216fc:	18d3      	adds	r3, r2, r3
   216fe:	3304      	adds	r3, #4
   21700:	881b      	ldrh	r3, [r3, #0]
   21702:	b29b      	uxth	r3, r3
   21704:	2b00      	cmp	r3, #0
   21706:	d100      	bne.n	2170a <Socket_ReadSocketData+0x56>
   21708:	e0c0      	b.n	2188c <Socket_ReadSocketData+0x1d8>
   2170a:	230f      	movs	r3, #15
   2170c:	18fb      	adds	r3, r7, r3
   2170e:	781b      	ldrb	r3, [r3, #0]
   21710:	b25b      	sxtb	r3, r3
   21712:	4a60      	ldr	r2, [pc, #384]	; (21894 <Socket_ReadSocketData+0x1e0>)
   21714:	011b      	lsls	r3, r3, #4
   21716:	18d3      	adds	r3, r2, r3
   21718:	330a      	adds	r3, #10
   2171a:	781b      	ldrb	r3, [r3, #0]
   2171c:	b2db      	uxtb	r3, r3
   2171e:	2b01      	cmp	r3, #1
   21720:	d000      	beq.n	21724 <Socket_ReadSocketData+0x70>
   21722:	e0b3      	b.n	2188c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   21724:	687b      	ldr	r3, [r7, #4]
   21726:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   21728:	68bb      	ldr	r3, [r7, #8]
   2172a:	2230      	movs	r2, #48	; 0x30
   2172c:	18ba      	adds	r2, r7, r2
   2172e:	8812      	ldrh	r2, [r2, #0]
   21730:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   21732:	2319      	movs	r3, #25
   21734:	18fb      	adds	r3, r7, r3
   21736:	2201      	movs	r2, #1
   21738:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2173a:	231a      	movs	r3, #26
   2173c:	18fb      	adds	r3, r7, r3
   2173e:	2230      	movs	r2, #48	; 0x30
   21740:	18ba      	adds	r2, r7, r2
   21742:	8812      	ldrh	r2, [r2, #0]
   21744:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   21746:	230f      	movs	r3, #15
   21748:	18fb      	adds	r3, r7, r3
   2174a:	781b      	ldrb	r3, [r3, #0]
   2174c:	b25b      	sxtb	r3, r3
   2174e:	4a51      	ldr	r2, [pc, #324]	; (21894 <Socket_ReadSocketData+0x1e0>)
   21750:	011b      	lsls	r3, r3, #4
   21752:	18d3      	adds	r3, r2, r3
   21754:	3304      	adds	r3, #4
   21756:	881b      	ldrh	r3, [r3, #0]
   21758:	b29b      	uxth	r3, r3
   2175a:	221a      	movs	r2, #26
   2175c:	18ba      	adds	r2, r7, r2
   2175e:	8812      	ldrh	r2, [r2, #0]
   21760:	1ad3      	subs	r3, r2, r3
   21762:	b29a      	uxth	r2, r3
   21764:	2316      	movs	r3, #22
   21766:	18fb      	adds	r3, r7, r3
   21768:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2176a:	2316      	movs	r3, #22
   2176c:	18fb      	adds	r3, r7, r3
   2176e:	2200      	movs	r2, #0
   21770:	5e9b      	ldrsh	r3, [r3, r2]
   21772:	2b00      	cmp	r3, #0
   21774:	dd0f      	ble.n	21796 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   21776:	2319      	movs	r3, #25
   21778:	18fb      	adds	r3, r7, r3
   2177a:	2200      	movs	r2, #0
   2177c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2177e:	230f      	movs	r3, #15
   21780:	18fb      	adds	r3, r7, r3
   21782:	2200      	movs	r2, #0
   21784:	569a      	ldrsb	r2, [r3, r2]
   21786:	231a      	movs	r3, #26
   21788:	18fb      	adds	r3, r7, r3
   2178a:	4942      	ldr	r1, [pc, #264]	; (21894 <Socket_ReadSocketData+0x1e0>)
   2178c:	0112      	lsls	r2, r2, #4
   2178e:	188a      	adds	r2, r1, r2
   21790:	3204      	adds	r2, #4
   21792:	8812      	ldrh	r2, [r2, #0]
   21794:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   21796:	230f      	movs	r3, #15
   21798:	18fb      	adds	r3, r7, r3
   2179a:	2200      	movs	r2, #0
   2179c:	569a      	ldrsb	r2, [r3, r2]
   2179e:	4b3d      	ldr	r3, [pc, #244]	; (21894 <Socket_ReadSocketData+0x1e0>)
   217a0:	0112      	lsls	r2, r2, #4
   217a2:	58d1      	ldr	r1, [r2, r3]
   217a4:	2319      	movs	r3, #25
   217a6:	18fb      	adds	r3, r7, r3
   217a8:	781c      	ldrb	r4, [r3, #0]
   217aa:	231a      	movs	r3, #26
   217ac:	18fb      	adds	r3, r7, r3
   217ae:	881a      	ldrh	r2, [r3, #0]
   217b0:	69f8      	ldr	r0, [r7, #28]
   217b2:	0023      	movs	r3, r4
   217b4:	4c38      	ldr	r4, [pc, #224]	; (21898 <Socket_ReadSocketData+0x1e4>)
   217b6:	47a0      	blx	r4
   217b8:	1e03      	subs	r3, r0, #0
   217ba:	d14f      	bne.n	2185c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   217bc:	230f      	movs	r3, #15
   217be:	18fb      	adds	r3, r7, r3
   217c0:	2200      	movs	r2, #0
   217c2:	569a      	ldrsb	r2, [r3, r2]
   217c4:	4b33      	ldr	r3, [pc, #204]	; (21894 <Socket_ReadSocketData+0x1e0>)
   217c6:	0112      	lsls	r2, r2, #4
   217c8:	58d2      	ldr	r2, [r2, r3]
   217ca:	68bb      	ldr	r3, [r7, #8]
   217cc:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   217ce:	231a      	movs	r3, #26
   217d0:	18fb      	adds	r3, r7, r3
   217d2:	2200      	movs	r2, #0
   217d4:	5e9a      	ldrsh	r2, [r3, r2]
   217d6:	68bb      	ldr	r3, [r7, #8]
   217d8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   217da:	68bb      	ldr	r3, [r7, #8]
   217dc:	88da      	ldrh	r2, [r3, #6]
   217de:	231a      	movs	r3, #26
   217e0:	18fb      	adds	r3, r7, r3
   217e2:	881b      	ldrh	r3, [r3, #0]
   217e4:	1ad3      	subs	r3, r2, r3
   217e6:	b29a      	uxth	r2, r3
   217e8:	68bb      	ldr	r3, [r7, #8]
   217ea:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   217ec:	4b2b      	ldr	r3, [pc, #172]	; (2189c <Socket_ReadSocketData+0x1e8>)
   217ee:	681b      	ldr	r3, [r3, #0]
   217f0:	2b00      	cmp	r3, #0
   217f2:	d00b      	beq.n	2180c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   217f4:	4b29      	ldr	r3, [pc, #164]	; (2189c <Socket_ReadSocketData+0x1e8>)
   217f6:	681b      	ldr	r3, [r3, #0]
   217f8:	68bc      	ldr	r4, [r7, #8]
   217fa:	220e      	movs	r2, #14
   217fc:	18ba      	adds	r2, r7, r2
   217fe:	7811      	ldrb	r1, [r2, #0]
   21800:	220f      	movs	r2, #15
   21802:	18ba      	adds	r2, r7, r2
   21804:	2000      	movs	r0, #0
   21806:	5610      	ldrsb	r0, [r2, r0]
   21808:	0022      	movs	r2, r4
   2180a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   2180c:	2330      	movs	r3, #48	; 0x30
   2180e:	18f9      	adds	r1, r7, r3
   21810:	2330      	movs	r3, #48	; 0x30
   21812:	18fa      	adds	r2, r7, r3
   21814:	231a      	movs	r3, #26
   21816:	18fb      	adds	r3, r7, r3
   21818:	8812      	ldrh	r2, [r2, #0]
   2181a:	881b      	ldrh	r3, [r3, #0]
   2181c:	1ad3      	subs	r3, r2, r3
   2181e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   21820:	231a      	movs	r3, #26
   21822:	18fb      	adds	r3, r7, r3
   21824:	881b      	ldrh	r3, [r3, #0]
   21826:	69fa      	ldr	r2, [r7, #28]
   21828:	18d3      	adds	r3, r2, r3
   2182a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2182c:	230f      	movs	r3, #15
   2182e:	18fb      	adds	r3, r7, r3
   21830:	781b      	ldrb	r3, [r3, #0]
   21832:	b25b      	sxtb	r3, r3
   21834:	4a17      	ldr	r2, [pc, #92]	; (21894 <Socket_ReadSocketData+0x1e0>)
   21836:	011b      	lsls	r3, r3, #4
   21838:	18d3      	adds	r3, r2, r3
   2183a:	330a      	adds	r3, #10
   2183c:	781b      	ldrb	r3, [r3, #0]
   2183e:	b2db      	uxtb	r3, r3
   21840:	2b00      	cmp	r3, #0
   21842:	d11c      	bne.n	2187e <Socket_ReadSocketData+0x1ca>
   21844:	2330      	movs	r3, #48	; 0x30
   21846:	18fb      	adds	r3, r7, r3
   21848:	881b      	ldrh	r3, [r3, #0]
   2184a:	2b00      	cmp	r3, #0
   2184c:	d017      	beq.n	2187e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2184e:	2301      	movs	r3, #1
   21850:	2200      	movs	r2, #0
   21852:	2100      	movs	r1, #0
   21854:	2000      	movs	r0, #0
   21856:	4c10      	ldr	r4, [pc, #64]	; (21898 <Socket_ReadSocketData+0x1e4>)
   21858:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2185a:	e017      	b.n	2188c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   2185c:	4b10      	ldr	r3, [pc, #64]	; (218a0 <Socket_ReadSocketData+0x1ec>)
   2185e:	0018      	movs	r0, r3
   21860:	4b10      	ldr	r3, [pc, #64]	; (218a4 <Socket_ReadSocketData+0x1f0>)
   21862:	4798      	blx	r3
   21864:	2330      	movs	r3, #48	; 0x30
   21866:	18fb      	adds	r3, r7, r3
   21868:	881a      	ldrh	r2, [r3, #0]
   2186a:	4b0f      	ldr	r3, [pc, #60]	; (218a8 <Socket_ReadSocketData+0x1f4>)
   2186c:	0011      	movs	r1, r2
   2186e:	0018      	movs	r0, r3
   21870:	4b0c      	ldr	r3, [pc, #48]	; (218a4 <Socket_ReadSocketData+0x1f0>)
   21872:	4798      	blx	r3
   21874:	4b0d      	ldr	r3, [pc, #52]	; (218ac <Socket_ReadSocketData+0x1f8>)
   21876:	0018      	movs	r0, r3
   21878:	4b0a      	ldr	r3, [pc, #40]	; (218a4 <Socket_ReadSocketData+0x1f0>)
   2187a:	4798      	blx	r3
				break;
   2187c:	e006      	b.n	2188c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2187e:	2330      	movs	r3, #48	; 0x30
   21880:	18fb      	adds	r3, r7, r3
   21882:	881b      	ldrh	r3, [r3, #0]
   21884:	2b00      	cmp	r3, #0
   21886:	d000      	beq.n	2188a <Socket_ReadSocketData+0x1d6>
   21888:	e753      	b.n	21732 <Socket_ReadSocketData+0x7e>
	}
}
   2188a:	e7ff      	b.n	2188c <Socket_ReadSocketData+0x1d8>
   2188c:	46c0      	nop			; (mov r8, r8)
   2188e:	46bd      	mov	sp, r7
   21890:	b009      	add	sp, #36	; 0x24
   21892:	bd90      	pop	{r4, r7, pc}
   21894:	20005534 	.word	0x20005534
   21898:	0001e0ad 	.word	0x0001e0ad
   2189c:	200055e4 	.word	0x200055e4
   218a0:	000376ec 	.word	0x000376ec
   218a4:	0001a5e9 	.word	0x0001a5e9
   218a8:	000376f8 	.word	0x000376f8
   218ac:	0003770c 	.word	0x0003770c

000218b0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   218b0:	b590      	push	{r4, r7, lr}
   218b2:	b0bb      	sub	sp, #236	; 0xec
   218b4:	af02      	add	r7, sp, #8
   218b6:	603a      	str	r2, [r7, #0]
   218b8:	1dfb      	adds	r3, r7, #7
   218ba:	1c02      	adds	r2, r0, #0
   218bc:	701a      	strb	r2, [r3, #0]
   218be:	1d3b      	adds	r3, r7, #4
   218c0:	1c0a      	adds	r2, r1, #0
   218c2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   218c4:	1dfb      	adds	r3, r7, #7
   218c6:	781b      	ldrb	r3, [r3, #0]
   218c8:	2b41      	cmp	r3, #65	; 0x41
   218ca:	d003      	beq.n	218d4 <m2m_ip_cb+0x24>
   218cc:	1dfb      	adds	r3, r7, #7
   218ce:	781b      	ldrb	r3, [r3, #0]
   218d0:	2b54      	cmp	r3, #84	; 0x54
   218d2:	d120      	bne.n	21916 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   218d4:	23cc      	movs	r3, #204	; 0xcc
   218d6:	18f9      	adds	r1, r7, r3
   218d8:	6838      	ldr	r0, [r7, #0]
   218da:	2300      	movs	r3, #0
   218dc:	2204      	movs	r2, #4
   218de:	4c98      	ldr	r4, [pc, #608]	; (21b40 <m2m_ip_cb+0x290>)
   218e0:	47a0      	blx	r4
   218e2:	1e03      	subs	r3, r0, #0
   218e4:	d000      	beq.n	218e8 <m2m_ip_cb+0x38>
   218e6:	e275      	b.n	21dd4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   218e8:	23cc      	movs	r3, #204	; 0xcc
   218ea:	18fb      	adds	r3, r7, r3
   218ec:	2201      	movs	r2, #1
   218ee:	569a      	ldrsb	r2, [r3, r2]
   218f0:	23c8      	movs	r3, #200	; 0xc8
   218f2:	18fb      	adds	r3, r7, r3
   218f4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   218f6:	4b93      	ldr	r3, [pc, #588]	; (21b44 <m2m_ip_cb+0x294>)
   218f8:	681b      	ldr	r3, [r3, #0]
   218fa:	2b00      	cmp	r3, #0
   218fc:	d100      	bne.n	21900 <m2m_ip_cb+0x50>
   218fe:	e269      	b.n	21dd4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   21900:	4b90      	ldr	r3, [pc, #576]	; (21b44 <m2m_ip_cb+0x294>)
   21902:	681b      	ldr	r3, [r3, #0]
   21904:	22cc      	movs	r2, #204	; 0xcc
   21906:	18ba      	adds	r2, r7, r2
   21908:	2000      	movs	r0, #0
   2190a:	5610      	ldrsb	r0, [r2, r0]
   2190c:	22c8      	movs	r2, #200	; 0xc8
   2190e:	18ba      	adds	r2, r7, r2
   21910:	2101      	movs	r1, #1
   21912:	4798      	blx	r3
	{
   21914:	e25e      	b.n	21dd4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   21916:	1dfb      	adds	r3, r7, #7
   21918:	781b      	ldrb	r3, [r3, #0]
   2191a:	2b42      	cmp	r3, #66	; 0x42
   2191c:	d120      	bne.n	21960 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   2191e:	23c4      	movs	r3, #196	; 0xc4
   21920:	18f9      	adds	r1, r7, r3
   21922:	6838      	ldr	r0, [r7, #0]
   21924:	2300      	movs	r3, #0
   21926:	2204      	movs	r2, #4
   21928:	4c85      	ldr	r4, [pc, #532]	; (21b40 <m2m_ip_cb+0x290>)
   2192a:	47a0      	blx	r4
   2192c:	1e03      	subs	r3, r0, #0
   2192e:	d000      	beq.n	21932 <m2m_ip_cb+0x82>
   21930:	e257      	b.n	21de2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   21932:	23c4      	movs	r3, #196	; 0xc4
   21934:	18fb      	adds	r3, r7, r3
   21936:	2201      	movs	r2, #1
   21938:	569a      	ldrsb	r2, [r3, r2]
   2193a:	23c0      	movs	r3, #192	; 0xc0
   2193c:	18fb      	adds	r3, r7, r3
   2193e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   21940:	4b80      	ldr	r3, [pc, #512]	; (21b44 <m2m_ip_cb+0x294>)
   21942:	681b      	ldr	r3, [r3, #0]
   21944:	2b00      	cmp	r3, #0
   21946:	d100      	bne.n	2194a <m2m_ip_cb+0x9a>
   21948:	e24b      	b.n	21de2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   2194a:	4b7e      	ldr	r3, [pc, #504]	; (21b44 <m2m_ip_cb+0x294>)
   2194c:	681b      	ldr	r3, [r3, #0]
   2194e:	22c4      	movs	r2, #196	; 0xc4
   21950:	18ba      	adds	r2, r7, r2
   21952:	2000      	movs	r0, #0
   21954:	5610      	ldrsb	r0, [r2, r0]
   21956:	22c0      	movs	r2, #192	; 0xc0
   21958:	18ba      	adds	r2, r7, r2
   2195a:	2102      	movs	r1, #2
   2195c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   2195e:	e240      	b.n	21de2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   21960:	1dfb      	adds	r3, r7, #7
   21962:	781b      	ldrb	r3, [r3, #0]
   21964:	2b43      	cmp	r3, #67	; 0x43
   21966:	d000      	beq.n	2196a <m2m_ip_cb+0xba>
   21968:	e086      	b.n	21a78 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   2196a:	23b4      	movs	r3, #180	; 0xb4
   2196c:	18f9      	adds	r1, r7, r3
   2196e:	6838      	ldr	r0, [r7, #0]
   21970:	2300      	movs	r3, #0
   21972:	220c      	movs	r2, #12
   21974:	4c72      	ldr	r4, [pc, #456]	; (21b40 <m2m_ip_cb+0x290>)
   21976:	47a0      	blx	r4
   21978:	1e03      	subs	r3, r0, #0
   2197a:	d000      	beq.n	2197e <m2m_ip_cb+0xce>
   2197c:	e231      	b.n	21de2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   2197e:	23b4      	movs	r3, #180	; 0xb4
   21980:	18fb      	adds	r3, r7, r3
   21982:	7a5b      	ldrb	r3, [r3, #9]
   21984:	b25b      	sxtb	r3, r3
   21986:	2b00      	cmp	r3, #0
   21988:	db4f      	blt.n	21a2a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   2198a:	23b4      	movs	r3, #180	; 0xb4
   2198c:	18fb      	adds	r3, r7, r3
   2198e:	7a5b      	ldrb	r3, [r3, #9]
   21990:	b25b      	sxtb	r3, r3
   21992:	0018      	movs	r0, r3
   21994:	23b4      	movs	r3, #180	; 0xb4
   21996:	18fb      	adds	r3, r7, r3
   21998:	7a1b      	ldrb	r3, [r3, #8]
   2199a:	b25b      	sxtb	r3, r3
   2199c:	4a6a      	ldr	r2, [pc, #424]	; (21b48 <m2m_ip_cb+0x298>)
   2199e:	011b      	lsls	r3, r3, #4
   219a0:	18d3      	adds	r3, r2, r3
   219a2:	330b      	adds	r3, #11
   219a4:	781b      	ldrb	r3, [r3, #0]
   219a6:	b2d9      	uxtb	r1, r3
   219a8:	4a67      	ldr	r2, [pc, #412]	; (21b48 <m2m_ip_cb+0x298>)
   219aa:	0103      	lsls	r3, r0, #4
   219ac:	18d3      	adds	r3, r2, r3
   219ae:	330b      	adds	r3, #11
   219b0:	1c0a      	adds	r2, r1, #0
   219b2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   219b4:	23b4      	movs	r3, #180	; 0xb4
   219b6:	18fb      	adds	r3, r7, r3
   219b8:	7a5b      	ldrb	r3, [r3, #9]
   219ba:	b25b      	sxtb	r3, r3
   219bc:	4a62      	ldr	r2, [pc, #392]	; (21b48 <m2m_ip_cb+0x298>)
   219be:	011b      	lsls	r3, r3, #4
   219c0:	18d3      	adds	r3, r2, r3
   219c2:	330a      	adds	r3, #10
   219c4:	2201      	movs	r2, #1
   219c6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   219c8:	23b4      	movs	r3, #180	; 0xb4
   219ca:	18fb      	adds	r3, r7, r3
   219cc:	7a5b      	ldrb	r3, [r3, #9]
   219ce:	b25b      	sxtb	r3, r3
   219d0:	0018      	movs	r0, r3
   219d2:	23b4      	movs	r3, #180	; 0xb4
   219d4:	18fb      	adds	r3, r7, r3
   219d6:	895b      	ldrh	r3, [r3, #10]
   219d8:	3b08      	subs	r3, #8
   219da:	b299      	uxth	r1, r3
   219dc:	4a5a      	ldr	r2, [pc, #360]	; (21b48 <m2m_ip_cb+0x298>)
   219de:	0103      	lsls	r3, r0, #4
   219e0:	18d3      	adds	r3, r2, r3
   219e2:	3308      	adds	r3, #8
   219e4:	1c0a      	adds	r2, r1, #0
   219e6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   219e8:	4b58      	ldr	r3, [pc, #352]	; (21b4c <m2m_ip_cb+0x29c>)
   219ea:	881b      	ldrh	r3, [r3, #0]
   219ec:	b29b      	uxth	r3, r3
   219ee:	3301      	adds	r3, #1
   219f0:	b29a      	uxth	r2, r3
   219f2:	4b56      	ldr	r3, [pc, #344]	; (21b4c <m2m_ip_cb+0x29c>)
   219f4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   219f6:	4b55      	ldr	r3, [pc, #340]	; (21b4c <m2m_ip_cb+0x29c>)
   219f8:	881b      	ldrh	r3, [r3, #0]
   219fa:	b29b      	uxth	r3, r3
   219fc:	2b00      	cmp	r3, #0
   219fe:	d106      	bne.n	21a0e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   21a00:	4b52      	ldr	r3, [pc, #328]	; (21b4c <m2m_ip_cb+0x29c>)
   21a02:	881b      	ldrh	r3, [r3, #0]
   21a04:	b29b      	uxth	r3, r3
   21a06:	3301      	adds	r3, #1
   21a08:	b29a      	uxth	r2, r3
   21a0a:	4b50      	ldr	r3, [pc, #320]	; (21b4c <m2m_ip_cb+0x29c>)
   21a0c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   21a0e:	23b4      	movs	r3, #180	; 0xb4
   21a10:	18fb      	adds	r3, r7, r3
   21a12:	7a5b      	ldrb	r3, [r3, #9]
   21a14:	b25b      	sxtb	r3, r3
   21a16:	0018      	movs	r0, r3
   21a18:	4b4c      	ldr	r3, [pc, #304]	; (21b4c <m2m_ip_cb+0x29c>)
   21a1a:	881b      	ldrh	r3, [r3, #0]
   21a1c:	b299      	uxth	r1, r3
   21a1e:	4a4a      	ldr	r2, [pc, #296]	; (21b48 <m2m_ip_cb+0x298>)
   21a20:	0103      	lsls	r3, r0, #4
   21a22:	18d3      	adds	r3, r2, r3
   21a24:	3306      	adds	r3, #6
   21a26:	1c0a      	adds	r2, r1, #0
   21a28:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   21a2a:	23b4      	movs	r3, #180	; 0xb4
   21a2c:	18fb      	adds	r3, r7, r3
   21a2e:	2209      	movs	r2, #9
   21a30:	569a      	ldrsb	r2, [r3, r2]
   21a32:	23a0      	movs	r3, #160	; 0xa0
   21a34:	18fb      	adds	r3, r7, r3
   21a36:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   21a38:	23a0      	movs	r3, #160	; 0xa0
   21a3a:	18fb      	adds	r3, r7, r3
   21a3c:	2202      	movs	r2, #2
   21a3e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   21a40:	23b4      	movs	r3, #180	; 0xb4
   21a42:	18fb      	adds	r3, r7, r3
   21a44:	885a      	ldrh	r2, [r3, #2]
   21a46:	23a0      	movs	r3, #160	; 0xa0
   21a48:	18fb      	adds	r3, r7, r3
   21a4a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   21a4c:	23b4      	movs	r3, #180	; 0xb4
   21a4e:	18fb      	adds	r3, r7, r3
   21a50:	685a      	ldr	r2, [r3, #4]
   21a52:	23a0      	movs	r3, #160	; 0xa0
   21a54:	18fb      	adds	r3, r7, r3
   21a56:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   21a58:	4b3a      	ldr	r3, [pc, #232]	; (21b44 <m2m_ip_cb+0x294>)
   21a5a:	681b      	ldr	r3, [r3, #0]
   21a5c:	2b00      	cmp	r3, #0
   21a5e:	d100      	bne.n	21a62 <m2m_ip_cb+0x1b2>
   21a60:	e1bf      	b.n	21de2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   21a62:	4b38      	ldr	r3, [pc, #224]	; (21b44 <m2m_ip_cb+0x294>)
   21a64:	681b      	ldr	r3, [r3, #0]
   21a66:	22b4      	movs	r2, #180	; 0xb4
   21a68:	18ba      	adds	r2, r7, r2
   21a6a:	2008      	movs	r0, #8
   21a6c:	5610      	ldrsb	r0, [r2, r0]
   21a6e:	22a0      	movs	r2, #160	; 0xa0
   21a70:	18ba      	adds	r2, r7, r2
   21a72:	2104      	movs	r1, #4
   21a74:	4798      	blx	r3
}
   21a76:	e1b4      	b.n	21de2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   21a78:	1dfb      	adds	r3, r7, #7
   21a7a:	781b      	ldrb	r3, [r3, #0]
   21a7c:	2b44      	cmp	r3, #68	; 0x44
   21a7e:	d003      	beq.n	21a88 <m2m_ip_cb+0x1d8>
   21a80:	1dfb      	adds	r3, r7, #7
   21a82:	781b      	ldrb	r3, [r3, #0]
   21a84:	2b4b      	cmp	r3, #75	; 0x4b
   21a86:	d13d      	bne.n	21b04 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   21a88:	239c      	movs	r3, #156	; 0x9c
   21a8a:	18f9      	adds	r1, r7, r3
   21a8c:	6838      	ldr	r0, [r7, #0]
   21a8e:	2300      	movs	r3, #0
   21a90:	2204      	movs	r2, #4
   21a92:	4c2b      	ldr	r4, [pc, #172]	; (21b40 <m2m_ip_cb+0x290>)
   21a94:	47a0      	blx	r4
   21a96:	1e03      	subs	r3, r0, #0
   21a98:	d000      	beq.n	21a9c <m2m_ip_cb+0x1ec>
   21a9a:	e19d      	b.n	21dd8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   21a9c:	239c      	movs	r3, #156	; 0x9c
   21a9e:	18fb      	adds	r3, r7, r3
   21aa0:	2200      	movs	r2, #0
   21aa2:	569a      	ldrsb	r2, [r3, r2]
   21aa4:	2398      	movs	r3, #152	; 0x98
   21aa6:	18fb      	adds	r3, r7, r3
   21aa8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   21aaa:	239c      	movs	r3, #156	; 0x9c
   21aac:	18fb      	adds	r3, r7, r3
   21aae:	2201      	movs	r2, #1
   21ab0:	569a      	ldrsb	r2, [r3, r2]
   21ab2:	2398      	movs	r3, #152	; 0x98
   21ab4:	18fb      	adds	r3, r7, r3
   21ab6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   21ab8:	239c      	movs	r3, #156	; 0x9c
   21aba:	18fb      	adds	r3, r7, r3
   21abc:	785b      	ldrb	r3, [r3, #1]
   21abe:	b25b      	sxtb	r3, r3
   21ac0:	2b00      	cmp	r3, #0
   21ac2:	d10f      	bne.n	21ae4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   21ac4:	239c      	movs	r3, #156	; 0x9c
   21ac6:	18fb      	adds	r3, r7, r3
   21ac8:	781b      	ldrb	r3, [r3, #0]
   21aca:	b25b      	sxtb	r3, r3
   21acc:	0018      	movs	r0, r3
   21ace:	239c      	movs	r3, #156	; 0x9c
   21ad0:	18fb      	adds	r3, r7, r3
   21ad2:	885b      	ldrh	r3, [r3, #2]
   21ad4:	3b08      	subs	r3, #8
   21ad6:	b299      	uxth	r1, r3
   21ad8:	4a1b      	ldr	r2, [pc, #108]	; (21b48 <m2m_ip_cb+0x298>)
   21ada:	0103      	lsls	r3, r0, #4
   21adc:	18d3      	adds	r3, r2, r3
   21ade:	3308      	adds	r3, #8
   21ae0:	1c0a      	adds	r2, r1, #0
   21ae2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   21ae4:	4b17      	ldr	r3, [pc, #92]	; (21b44 <m2m_ip_cb+0x294>)
   21ae6:	681b      	ldr	r3, [r3, #0]
   21ae8:	2b00      	cmp	r3, #0
   21aea:	d100      	bne.n	21aee <m2m_ip_cb+0x23e>
   21aec:	e174      	b.n	21dd8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   21aee:	4b15      	ldr	r3, [pc, #84]	; (21b44 <m2m_ip_cb+0x294>)
   21af0:	681b      	ldr	r3, [r3, #0]
   21af2:	229c      	movs	r2, #156	; 0x9c
   21af4:	18ba      	adds	r2, r7, r2
   21af6:	2000      	movs	r0, #0
   21af8:	5610      	ldrsb	r0, [r2, r0]
   21afa:	2298      	movs	r2, #152	; 0x98
   21afc:	18ba      	adds	r2, r7, r2
   21afe:	2105      	movs	r1, #5
   21b00:	4798      	blx	r3
	{
   21b02:	e169      	b.n	21dd8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   21b04:	1dfb      	adds	r3, r7, #7
   21b06:	781b      	ldrb	r3, [r3, #0]
   21b08:	2b4a      	cmp	r3, #74	; 0x4a
   21b0a:	d123      	bne.n	21b54 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   21b0c:	230c      	movs	r3, #12
   21b0e:	18f9      	adds	r1, r7, r3
   21b10:	6838      	ldr	r0, [r7, #0]
   21b12:	2300      	movs	r3, #0
   21b14:	2244      	movs	r2, #68	; 0x44
   21b16:	4c0a      	ldr	r4, [pc, #40]	; (21b40 <m2m_ip_cb+0x290>)
   21b18:	47a0      	blx	r4
   21b1a:	1e03      	subs	r3, r0, #0
   21b1c:	d000      	beq.n	21b20 <m2m_ip_cb+0x270>
   21b1e:	e160      	b.n	21de2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   21b20:	4b0b      	ldr	r3, [pc, #44]	; (21b50 <m2m_ip_cb+0x2a0>)
   21b22:	681b      	ldr	r3, [r3, #0]
   21b24:	2b00      	cmp	r3, #0
   21b26:	d100      	bne.n	21b2a <m2m_ip_cb+0x27a>
   21b28:	e15b      	b.n	21de2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   21b2a:	4b09      	ldr	r3, [pc, #36]	; (21b50 <m2m_ip_cb+0x2a0>)
   21b2c:	681a      	ldr	r2, [r3, #0]
   21b2e:	230c      	movs	r3, #12
   21b30:	18fb      	adds	r3, r7, r3
   21b32:	6c19      	ldr	r1, [r3, #64]	; 0x40
   21b34:	230c      	movs	r3, #12
   21b36:	18fb      	adds	r3, r7, r3
   21b38:	0018      	movs	r0, r3
   21b3a:	4790      	blx	r2
}
   21b3c:	e151      	b.n	21de2 <m2m_ip_cb+0x532>
   21b3e:	46c0      	nop			; (mov r8, r8)
   21b40:	0001e0ad 	.word	0x0001e0ad
   21b44:	200055e4 	.word	0x200055e4
   21b48:	20005534 	.word	0x20005534
   21b4c:	20003d2e 	.word	0x20003d2e
   21b50:	200055ec 	.word	0x200055ec
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   21b54:	1dfb      	adds	r3, r7, #7
   21b56:	781b      	ldrb	r3, [r3, #0]
   21b58:	2b46      	cmp	r3, #70	; 0x46
   21b5a:	d008      	beq.n	21b6e <m2m_ip_cb+0x2be>
   21b5c:	1dfb      	adds	r3, r7, #7
   21b5e:	781b      	ldrb	r3, [r3, #0]
   21b60:	2b48      	cmp	r3, #72	; 0x48
   21b62:	d004      	beq.n	21b6e <m2m_ip_cb+0x2be>
   21b64:	1dfb      	adds	r3, r7, #7
   21b66:	781b      	ldrb	r3, [r3, #0]
   21b68:	2b4d      	cmp	r3, #77	; 0x4d
   21b6a:	d000      	beq.n	21b6e <m2m_ip_cb+0x2be>
   21b6c:	e0b4      	b.n	21cd8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   21b6e:	23df      	movs	r3, #223	; 0xdf
   21b70:	18fb      	adds	r3, r7, r3
   21b72:	2206      	movs	r2, #6
   21b74:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   21b76:	1dfb      	adds	r3, r7, #7
   21b78:	781b      	ldrb	r3, [r3, #0]
   21b7a:	2b48      	cmp	r3, #72	; 0x48
   21b7c:	d103      	bne.n	21b86 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   21b7e:	23df      	movs	r3, #223	; 0xdf
   21b80:	18fb      	adds	r3, r7, r3
   21b82:	2209      	movs	r2, #9
   21b84:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   21b86:	23d8      	movs	r3, #216	; 0xd8
   21b88:	18fb      	adds	r3, r7, r3
   21b8a:	2210      	movs	r2, #16
   21b8c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   21b8e:	23d8      	movs	r3, #216	; 0xd8
   21b90:	18fb      	adds	r3, r7, r3
   21b92:	881a      	ldrh	r2, [r3, #0]
   21b94:	2388      	movs	r3, #136	; 0x88
   21b96:	18f9      	adds	r1, r7, r3
   21b98:	6838      	ldr	r0, [r7, #0]
   21b9a:	2300      	movs	r3, #0
   21b9c:	4c93      	ldr	r4, [pc, #588]	; (21dec <m2m_ip_cb+0x53c>)
   21b9e:	47a0      	blx	r4
   21ba0:	1e03      	subs	r3, r0, #0
   21ba2:	d000      	beq.n	21ba6 <m2m_ip_cb+0x2f6>
   21ba4:	e11a      	b.n	21ddc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   21ba6:	23d6      	movs	r3, #214	; 0xd6
   21ba8:	18fb      	adds	r3, r7, r3
   21baa:	2200      	movs	r2, #0
   21bac:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   21bae:	23d5      	movs	r3, #213	; 0xd5
   21bb0:	18fb      	adds	r3, r7, r3
   21bb2:	2288      	movs	r2, #136	; 0x88
   21bb4:	18ba      	adds	r2, r7, r2
   21bb6:	7b12      	ldrb	r2, [r2, #12]
   21bb8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   21bba:	23d6      	movs	r3, #214	; 0xd6
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	2288      	movs	r2, #136	; 0x88
   21bc0:	18ba      	adds	r2, r7, r2
   21bc2:	89d2      	ldrh	r2, [r2, #14]
   21bc4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   21bc6:	23d5      	movs	r3, #213	; 0xd5
   21bc8:	18fb      	adds	r3, r7, r3
   21bca:	781b      	ldrb	r3, [r3, #0]
   21bcc:	b25b      	sxtb	r3, r3
   21bce:	4a88      	ldr	r2, [pc, #544]	; (21df0 <m2m_ip_cb+0x540>)
   21bd0:	011b      	lsls	r3, r3, #4
   21bd2:	18d3      	adds	r3, r2, r3
   21bd4:	330c      	adds	r3, #12
   21bd6:	2200      	movs	r2, #0
   21bd8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   21bda:	23d2      	movs	r3, #210	; 0xd2
   21bdc:	18fb      	adds	r3, r7, r3
   21bde:	2288      	movs	r2, #136	; 0x88
   21be0:	18ba      	adds	r2, r7, r2
   21be2:	8912      	ldrh	r2, [r2, #8]
   21be4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   21be6:	23d0      	movs	r3, #208	; 0xd0
   21be8:	18fb      	adds	r3, r7, r3
   21bea:	2288      	movs	r2, #136	; 0x88
   21bec:	18ba      	adds	r2, r7, r2
   21bee:	8952      	ldrh	r2, [r2, #10]
   21bf0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   21bf2:	2388      	movs	r3, #136	; 0x88
   21bf4:	18fb      	adds	r3, r7, r3
   21bf6:	885a      	ldrh	r2, [r3, #2]
   21bf8:	2370      	movs	r3, #112	; 0x70
   21bfa:	18fb      	adds	r3, r7, r3
   21bfc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   21bfe:	2388      	movs	r3, #136	; 0x88
   21c00:	18fb      	adds	r3, r7, r3
   21c02:	685a      	ldr	r2, [r3, #4]
   21c04:	2370      	movs	r3, #112	; 0x70
   21c06:	18fb      	adds	r3, r7, r3
   21c08:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   21c0a:	23d5      	movs	r3, #213	; 0xd5
   21c0c:	18fb      	adds	r3, r7, r3
   21c0e:	781b      	ldrb	r3, [r3, #0]
   21c10:	b25b      	sxtb	r3, r3
   21c12:	4a77      	ldr	r2, [pc, #476]	; (21df0 <m2m_ip_cb+0x540>)
   21c14:	011b      	lsls	r3, r3, #4
   21c16:	18d3      	adds	r3, r2, r3
   21c18:	3306      	adds	r3, #6
   21c1a:	881b      	ldrh	r3, [r3, #0]
   21c1c:	b29b      	uxth	r3, r3
   21c1e:	22d6      	movs	r2, #214	; 0xd6
   21c20:	18ba      	adds	r2, r7, r2
   21c22:	8812      	ldrh	r2, [r2, #0]
   21c24:	429a      	cmp	r2, r3
   21c26:	d148      	bne.n	21cba <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   21c28:	23d2      	movs	r3, #210	; 0xd2
   21c2a:	18fb      	adds	r3, r7, r3
   21c2c:	2200      	movs	r2, #0
   21c2e:	5e9b      	ldrsh	r3, [r3, r2]
   21c30:	2b00      	cmp	r3, #0
   21c32:	dd25      	ble.n	21c80 <m2m_ip_cb+0x3d0>
   21c34:	23d2      	movs	r3, #210	; 0xd2
   21c36:	18fb      	adds	r3, r7, r3
   21c38:	2200      	movs	r2, #0
   21c3a:	5e9a      	ldrsh	r2, [r3, r2]
   21c3c:	1d3b      	adds	r3, r7, #4
   21c3e:	881b      	ldrh	r3, [r3, #0]
   21c40:	429a      	cmp	r2, r3
   21c42:	da1d      	bge.n	21c80 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   21c44:	23d0      	movs	r3, #208	; 0xd0
   21c46:	18fb      	adds	r3, r7, r3
   21c48:	881b      	ldrh	r3, [r3, #0]
   21c4a:	683a      	ldr	r2, [r7, #0]
   21c4c:	18d3      	adds	r3, r2, r3
   21c4e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   21c50:	23d8      	movs	r3, #216	; 0xd8
   21c52:	18fb      	adds	r3, r7, r3
   21c54:	22d2      	movs	r2, #210	; 0xd2
   21c56:	18ba      	adds	r2, r7, r2
   21c58:	8812      	ldrh	r2, [r2, #0]
   21c5a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   21c5c:	683c      	ldr	r4, [r7, #0]
   21c5e:	23df      	movs	r3, #223	; 0xdf
   21c60:	18fb      	adds	r3, r7, r3
   21c62:	781a      	ldrb	r2, [r3, #0]
   21c64:	2370      	movs	r3, #112	; 0x70
   21c66:	18f9      	adds	r1, r7, r3
   21c68:	23d5      	movs	r3, #213	; 0xd5
   21c6a:	18fb      	adds	r3, r7, r3
   21c6c:	2000      	movs	r0, #0
   21c6e:	5618      	ldrsb	r0, [r3, r0]
   21c70:	23d8      	movs	r3, #216	; 0xd8
   21c72:	18fb      	adds	r3, r7, r3
   21c74:	881b      	ldrh	r3, [r3, #0]
   21c76:	9300      	str	r3, [sp, #0]
   21c78:	0023      	movs	r3, r4
   21c7a:	4c5e      	ldr	r4, [pc, #376]	; (21df4 <m2m_ip_cb+0x544>)
   21c7c:	47a0      	blx	r4
	{
   21c7e:	e0ad      	b.n	21ddc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   21c80:	2370      	movs	r3, #112	; 0x70
   21c82:	18fb      	adds	r3, r7, r3
   21c84:	22d2      	movs	r2, #210	; 0xd2
   21c86:	18ba      	adds	r2, r7, r2
   21c88:	8812      	ldrh	r2, [r2, #0]
   21c8a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   21c8c:	2370      	movs	r3, #112	; 0x70
   21c8e:	18fb      	adds	r3, r7, r3
   21c90:	2200      	movs	r2, #0
   21c92:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   21c94:	4b58      	ldr	r3, [pc, #352]	; (21df8 <m2m_ip_cb+0x548>)
   21c96:	681b      	ldr	r3, [r3, #0]
   21c98:	2b00      	cmp	r3, #0
   21c9a:	d100      	bne.n	21c9e <m2m_ip_cb+0x3ee>
   21c9c:	e09e      	b.n	21ddc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   21c9e:	4b56      	ldr	r3, [pc, #344]	; (21df8 <m2m_ip_cb+0x548>)
   21ca0:	681b      	ldr	r3, [r3, #0]
   21ca2:	2270      	movs	r2, #112	; 0x70
   21ca4:	18bc      	adds	r4, r7, r2
   21ca6:	22df      	movs	r2, #223	; 0xdf
   21ca8:	18ba      	adds	r2, r7, r2
   21caa:	7811      	ldrb	r1, [r2, #0]
   21cac:	22d5      	movs	r2, #213	; 0xd5
   21cae:	18ba      	adds	r2, r7, r2
   21cb0:	2000      	movs	r0, #0
   21cb2:	5610      	ldrsb	r0, [r2, r0]
   21cb4:	0022      	movs	r2, r4
   21cb6:	4798      	blx	r3
	{
   21cb8:	e090      	b.n	21ddc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   21cba:	23d8      	movs	r3, #216	; 0xd8
   21cbc:	18fa      	adds	r2, r7, r3
   21cbe:	1d3b      	adds	r3, r7, #4
   21cc0:	8812      	ldrh	r2, [r2, #0]
   21cc2:	881b      	ldrh	r3, [r3, #0]
   21cc4:	429a      	cmp	r2, r3
   21cc6:	d300      	bcc.n	21cca <m2m_ip_cb+0x41a>
   21cc8:	e088      	b.n	21ddc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   21cca:	2301      	movs	r3, #1
   21ccc:	2200      	movs	r2, #0
   21cce:	2100      	movs	r1, #0
   21cd0:	2000      	movs	r0, #0
   21cd2:	4c46      	ldr	r4, [pc, #280]	; (21dec <m2m_ip_cb+0x53c>)
   21cd4:	47a0      	blx	r4
	{
   21cd6:	e081      	b.n	21ddc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   21cd8:	1dfb      	adds	r3, r7, #7
   21cda:	781b      	ldrb	r3, [r3, #0]
   21cdc:	2b45      	cmp	r3, #69	; 0x45
   21cde:	d007      	beq.n	21cf0 <m2m_ip_cb+0x440>
   21ce0:	1dfb      	adds	r3, r7, #7
   21ce2:	781b      	ldrb	r3, [r3, #0]
   21ce4:	2b47      	cmp	r3, #71	; 0x47
   21ce6:	d003      	beq.n	21cf0 <m2m_ip_cb+0x440>
   21ce8:	1dfb      	adds	r3, r7, #7
   21cea:	781b      	ldrb	r3, [r3, #0]
   21cec:	2b4c      	cmp	r3, #76	; 0x4c
   21cee:	d14c      	bne.n	21d8a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   21cf0:	23de      	movs	r3, #222	; 0xde
   21cf2:	18fb      	adds	r3, r7, r3
   21cf4:	2207      	movs	r2, #7
   21cf6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   21cf8:	1dfb      	adds	r3, r7, #7
   21cfa:	781b      	ldrb	r3, [r3, #0]
   21cfc:	2b47      	cmp	r3, #71	; 0x47
   21cfe:	d103      	bne.n	21d08 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   21d00:	23de      	movs	r3, #222	; 0xde
   21d02:	18fb      	adds	r3, r7, r3
   21d04:	2208      	movs	r2, #8
   21d06:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   21d08:	2364      	movs	r3, #100	; 0x64
   21d0a:	18f9      	adds	r1, r7, r3
   21d0c:	6838      	ldr	r0, [r7, #0]
   21d0e:	2300      	movs	r3, #0
   21d10:	2208      	movs	r2, #8
   21d12:	4c36      	ldr	r4, [pc, #216]	; (21dec <m2m_ip_cb+0x53c>)
   21d14:	47a0      	blx	r4
   21d16:	1e03      	subs	r3, r0, #0
   21d18:	d162      	bne.n	21de0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   21d1a:	23dc      	movs	r3, #220	; 0xdc
   21d1c:	18fb      	adds	r3, r7, r3
   21d1e:	2200      	movs	r2, #0
   21d20:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   21d22:	23db      	movs	r3, #219	; 0xdb
   21d24:	18fb      	adds	r3, r7, r3
   21d26:	2264      	movs	r2, #100	; 0x64
   21d28:	18ba      	adds	r2, r7, r2
   21d2a:	7812      	ldrb	r2, [r2, #0]
   21d2c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   21d2e:	23dc      	movs	r3, #220	; 0xdc
   21d30:	18fb      	adds	r3, r7, r3
   21d32:	2264      	movs	r2, #100	; 0x64
   21d34:	18ba      	adds	r2, r7, r2
   21d36:	8892      	ldrh	r2, [r2, #4]
   21d38:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   21d3a:	2364      	movs	r3, #100	; 0x64
   21d3c:	18fb      	adds	r3, r7, r3
   21d3e:	2202      	movs	r2, #2
   21d40:	5e9a      	ldrsh	r2, [r3, r2]
   21d42:	236e      	movs	r3, #110	; 0x6e
   21d44:	18fb      	adds	r3, r7, r3
   21d46:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   21d48:	23db      	movs	r3, #219	; 0xdb
   21d4a:	18fb      	adds	r3, r7, r3
   21d4c:	781b      	ldrb	r3, [r3, #0]
   21d4e:	b25b      	sxtb	r3, r3
   21d50:	4a27      	ldr	r2, [pc, #156]	; (21df0 <m2m_ip_cb+0x540>)
   21d52:	011b      	lsls	r3, r3, #4
   21d54:	18d3      	adds	r3, r2, r3
   21d56:	3306      	adds	r3, #6
   21d58:	881b      	ldrh	r3, [r3, #0]
   21d5a:	b29b      	uxth	r3, r3
   21d5c:	22dc      	movs	r2, #220	; 0xdc
   21d5e:	18ba      	adds	r2, r7, r2
   21d60:	8812      	ldrh	r2, [r2, #0]
   21d62:	429a      	cmp	r2, r3
   21d64:	d13c      	bne.n	21de0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   21d66:	4b24      	ldr	r3, [pc, #144]	; (21df8 <m2m_ip_cb+0x548>)
   21d68:	681b      	ldr	r3, [r3, #0]
   21d6a:	2b00      	cmp	r3, #0
   21d6c:	d038      	beq.n	21de0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   21d6e:	4b22      	ldr	r3, [pc, #136]	; (21df8 <m2m_ip_cb+0x548>)
   21d70:	681b      	ldr	r3, [r3, #0]
   21d72:	226e      	movs	r2, #110	; 0x6e
   21d74:	18bc      	adds	r4, r7, r2
   21d76:	22de      	movs	r2, #222	; 0xde
   21d78:	18ba      	adds	r2, r7, r2
   21d7a:	7811      	ldrb	r1, [r2, #0]
   21d7c:	22db      	movs	r2, #219	; 0xdb
   21d7e:	18ba      	adds	r2, r7, r2
   21d80:	2000      	movs	r0, #0
   21d82:	5610      	ldrsb	r0, [r2, r0]
   21d84:	0022      	movs	r2, r4
   21d86:	4798      	blx	r3
	{
   21d88:	e02a      	b.n	21de0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   21d8a:	1dfb      	adds	r3, r7, #7
   21d8c:	781b      	ldrb	r3, [r3, #0]
   21d8e:	2b52      	cmp	r3, #82	; 0x52
   21d90:	d127      	bne.n	21de2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   21d92:	2350      	movs	r3, #80	; 0x50
   21d94:	18f9      	adds	r1, r7, r3
   21d96:	6838      	ldr	r0, [r7, #0]
   21d98:	2301      	movs	r3, #1
   21d9a:	2214      	movs	r2, #20
   21d9c:	4c13      	ldr	r4, [pc, #76]	; (21dec <m2m_ip_cb+0x53c>)
   21d9e:	47a0      	blx	r4
   21da0:	1e03      	subs	r3, r0, #0
   21da2:	d11e      	bne.n	21de2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   21da4:	2350      	movs	r3, #80	; 0x50
   21da6:	18fb      	adds	r3, r7, r3
   21da8:	685b      	ldr	r3, [r3, #4]
   21daa:	001a      	movs	r2, r3
   21dac:	4b13      	ldr	r3, [pc, #76]	; (21dfc <m2m_ip_cb+0x54c>)
   21dae:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   21db0:	4b12      	ldr	r3, [pc, #72]	; (21dfc <m2m_ip_cb+0x54c>)
   21db2:	681b      	ldr	r3, [r3, #0]
   21db4:	2b00      	cmp	r3, #0
   21db6:	d014      	beq.n	21de2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   21db8:	4b10      	ldr	r3, [pc, #64]	; (21dfc <m2m_ip_cb+0x54c>)
   21dba:	681c      	ldr	r4, [r3, #0]
   21dbc:	2350      	movs	r3, #80	; 0x50
   21dbe:	18fb      	adds	r3, r7, r3
   21dc0:	6818      	ldr	r0, [r3, #0]
   21dc2:	2350      	movs	r3, #80	; 0x50
   21dc4:	18fb      	adds	r3, r7, r3
   21dc6:	6899      	ldr	r1, [r3, #8]
   21dc8:	2350      	movs	r3, #80	; 0x50
   21dca:	18fb      	adds	r3, r7, r3
   21dcc:	7c1b      	ldrb	r3, [r3, #16]
   21dce:	001a      	movs	r2, r3
   21dd0:	47a0      	blx	r4
}
   21dd2:	e006      	b.n	21de2 <m2m_ip_cb+0x532>
	{
   21dd4:	46c0      	nop			; (mov r8, r8)
   21dd6:	e004      	b.n	21de2 <m2m_ip_cb+0x532>
	{
   21dd8:	46c0      	nop			; (mov r8, r8)
   21dda:	e002      	b.n	21de2 <m2m_ip_cb+0x532>
	{
   21ddc:	46c0      	nop			; (mov r8, r8)
   21dde:	e000      	b.n	21de2 <m2m_ip_cb+0x532>
	{
   21de0:	46c0      	nop			; (mov r8, r8)
}
   21de2:	46c0      	nop			; (mov r8, r8)
   21de4:	46bd      	mov	sp, r7
   21de6:	b039      	add	sp, #228	; 0xe4
   21de8:	bd90      	pop	{r4, r7, pc}
   21dea:	46c0      	nop			; (mov r8, r8)
   21dec:	0001e0ad 	.word	0x0001e0ad
   21df0:	20005534 	.word	0x20005534
   21df4:	000216b5 	.word	0x000216b5
   21df8:	200055e4 	.word	0x200055e4
   21dfc:	200055e8 	.word	0x200055e8

00021e00 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   21e00:	b580      	push	{r7, lr}
   21e02:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   21e04:	4b0c      	ldr	r3, [pc, #48]	; (21e38 <socketInit+0x38>)
   21e06:	781b      	ldrb	r3, [r3, #0]
   21e08:	b2db      	uxtb	r3, r3
   21e0a:	2b00      	cmp	r3, #0
   21e0c:	d110      	bne.n	21e30 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   21e0e:	4b0b      	ldr	r3, [pc, #44]	; (21e3c <socketInit+0x3c>)
   21e10:	22b0      	movs	r2, #176	; 0xb0
   21e12:	2100      	movs	r1, #0
   21e14:	0018      	movs	r0, r3
   21e16:	4b0a      	ldr	r3, [pc, #40]	; (21e40 <socketInit+0x40>)
   21e18:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   21e1a:	4b0a      	ldr	r3, [pc, #40]	; (21e44 <socketInit+0x44>)
   21e1c:	0019      	movs	r1, r3
   21e1e:	2002      	movs	r0, #2
   21e20:	4b09      	ldr	r3, [pc, #36]	; (21e48 <socketInit+0x48>)
   21e22:	4798      	blx	r3
		gbSocketInit	= 1;
   21e24:	4b04      	ldr	r3, [pc, #16]	; (21e38 <socketInit+0x38>)
   21e26:	2201      	movs	r2, #1
   21e28:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   21e2a:	4b08      	ldr	r3, [pc, #32]	; (21e4c <socketInit+0x4c>)
   21e2c:	2200      	movs	r2, #0
   21e2e:	801a      	strh	r2, [r3, #0]
	}
}
   21e30:	46c0      	nop			; (mov r8, r8)
   21e32:	46bd      	mov	sp, r7
   21e34:	bd80      	pop	{r7, pc}
   21e36:	46c0      	nop			; (mov r8, r8)
   21e38:	20003d30 	.word	0x20003d30
   21e3c:	20005534 	.word	0x20005534
   21e40:	0001d531 	.word	0x0001d531
   21e44:	000218b1 	.word	0x000218b1
   21e48:	0001e22d 	.word	0x0001e22d
   21e4c:	20003d2e 	.word	0x20003d2e

00021e50 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   21e50:	b580      	push	{r7, lr}
   21e52:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   21e54:	4b0a      	ldr	r3, [pc, #40]	; (21e80 <socketDeinit+0x30>)
   21e56:	22b0      	movs	r2, #176	; 0xb0
   21e58:	2100      	movs	r1, #0
   21e5a:	0018      	movs	r0, r3
   21e5c:	4b09      	ldr	r3, [pc, #36]	; (21e84 <socketDeinit+0x34>)
   21e5e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   21e60:	2100      	movs	r1, #0
   21e62:	2002      	movs	r0, #2
   21e64:	4b08      	ldr	r3, [pc, #32]	; (21e88 <socketDeinit+0x38>)
   21e66:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   21e68:	4b08      	ldr	r3, [pc, #32]	; (21e8c <socketDeinit+0x3c>)
   21e6a:	2200      	movs	r2, #0
   21e6c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   21e6e:	4b08      	ldr	r3, [pc, #32]	; (21e90 <socketDeinit+0x40>)
   21e70:	2200      	movs	r2, #0
   21e72:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   21e74:	4b07      	ldr	r3, [pc, #28]	; (21e94 <socketDeinit+0x44>)
   21e76:	2200      	movs	r2, #0
   21e78:	701a      	strb	r2, [r3, #0]
}
   21e7a:	46c0      	nop			; (mov r8, r8)
   21e7c:	46bd      	mov	sp, r7
   21e7e:	bd80      	pop	{r7, pc}
   21e80:	20005534 	.word	0x20005534
   21e84:	0001d531 	.word	0x0001d531
   21e88:	0001e22d 	.word	0x0001e22d
   21e8c:	200055e4 	.word	0x200055e4
   21e90:	200055ec 	.word	0x200055ec
   21e94:	20003d30 	.word	0x20003d30

00021e98 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   21e98:	b580      	push	{r7, lr}
   21e9a:	b082      	sub	sp, #8
   21e9c:	af00      	add	r7, sp, #0
   21e9e:	6078      	str	r0, [r7, #4]
   21ea0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   21ea2:	4b05      	ldr	r3, [pc, #20]	; (21eb8 <registerSocketCallback+0x20>)
   21ea4:	687a      	ldr	r2, [r7, #4]
   21ea6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   21ea8:	4b04      	ldr	r3, [pc, #16]	; (21ebc <registerSocketCallback+0x24>)
   21eaa:	683a      	ldr	r2, [r7, #0]
   21eac:	601a      	str	r2, [r3, #0]
}
   21eae:	46c0      	nop			; (mov r8, r8)
   21eb0:	46bd      	mov	sp, r7
   21eb2:	b002      	add	sp, #8
   21eb4:	bd80      	pop	{r7, pc}
   21eb6:	46c0      	nop			; (mov r8, r8)
   21eb8:	200055e4 	.word	0x200055e4
   21ebc:	200055ec 	.word	0x200055ec

00021ec0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   21ec0:	b590      	push	{r4, r7, lr}
   21ec2:	b08d      	sub	sp, #52	; 0x34
   21ec4:	af04      	add	r7, sp, #16
   21ec6:	0004      	movs	r4, r0
   21ec8:	0008      	movs	r0, r1
   21eca:	0011      	movs	r1, r2
   21ecc:	1dbb      	adds	r3, r7, #6
   21ece:	1c22      	adds	r2, r4, #0
   21ed0:	801a      	strh	r2, [r3, #0]
   21ed2:	1d7b      	adds	r3, r7, #5
   21ed4:	1c02      	adds	r2, r0, #0
   21ed6:	701a      	strb	r2, [r3, #0]
   21ed8:	1d3b      	adds	r3, r7, #4
   21eda:	1c0a      	adds	r2, r1, #0
   21edc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   21ede:	231f      	movs	r3, #31
   21ee0:	18fb      	adds	r3, r7, r3
   21ee2:	22ff      	movs	r2, #255	; 0xff
   21ee4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   21ee6:	1dbb      	adds	r3, r7, #6
   21ee8:	881b      	ldrh	r3, [r3, #0]
   21eea:	2b02      	cmp	r3, #2
   21eec:	d000      	beq.n	21ef0 <socket+0x30>
   21eee:	e0ce      	b.n	2208e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   21ef0:	1d7b      	adds	r3, r7, #5
   21ef2:	781b      	ldrb	r3, [r3, #0]
   21ef4:	2b01      	cmp	r3, #1
   21ef6:	d135      	bne.n	21f64 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   21ef8:	231e      	movs	r3, #30
   21efa:	18fb      	adds	r3, r7, r3
   21efc:	2200      	movs	r2, #0
   21efe:	701a      	strb	r2, [r3, #0]
   21f00:	e02a      	b.n	21f58 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   21f02:	2317      	movs	r3, #23
   21f04:	18fb      	adds	r3, r7, r3
   21f06:	4a66      	ldr	r2, [pc, #408]	; (220a0 <socket+0x1e0>)
   21f08:	7812      	ldrb	r2, [r2, #0]
   21f0a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   21f0c:	4b64      	ldr	r3, [pc, #400]	; (220a0 <socket+0x1e0>)
   21f0e:	781b      	ldrb	r3, [r3, #0]
   21f10:	b2db      	uxtb	r3, r3
   21f12:	011a      	lsls	r2, r3, #4
   21f14:	4b63      	ldr	r3, [pc, #396]	; (220a4 <socket+0x1e4>)
   21f16:	18d3      	adds	r3, r2, r3
   21f18:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   21f1a:	4b61      	ldr	r3, [pc, #388]	; (220a0 <socket+0x1e0>)
   21f1c:	781b      	ldrb	r3, [r3, #0]
   21f1e:	b2db      	uxtb	r3, r3
   21f20:	1c5a      	adds	r2, r3, #1
   21f22:	4b61      	ldr	r3, [pc, #388]	; (220a8 <socket+0x1e8>)
   21f24:	2107      	movs	r1, #7
   21f26:	0010      	movs	r0, r2
   21f28:	4798      	blx	r3
   21f2a:	000b      	movs	r3, r1
   21f2c:	b2da      	uxtb	r2, r3
   21f2e:	4b5c      	ldr	r3, [pc, #368]	; (220a0 <socket+0x1e0>)
   21f30:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   21f32:	69bb      	ldr	r3, [r7, #24]
   21f34:	7a9b      	ldrb	r3, [r3, #10]
   21f36:	b2db      	uxtb	r3, r3
   21f38:	2b00      	cmp	r3, #0
   21f3a:	d106      	bne.n	21f4a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   21f3c:	231f      	movs	r3, #31
   21f3e:	18fb      	adds	r3, r7, r3
   21f40:	2217      	movs	r2, #23
   21f42:	18ba      	adds	r2, r7, r2
   21f44:	7812      	ldrb	r2, [r2, #0]
   21f46:	701a      	strb	r2, [r3, #0]
					break;
   21f48:	e04c      	b.n	21fe4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   21f4a:	231e      	movs	r3, #30
   21f4c:	18fb      	adds	r3, r7, r3
   21f4e:	781a      	ldrb	r2, [r3, #0]
   21f50:	231e      	movs	r3, #30
   21f52:	18fb      	adds	r3, r7, r3
   21f54:	3201      	adds	r2, #1
   21f56:	701a      	strb	r2, [r3, #0]
   21f58:	231e      	movs	r3, #30
   21f5a:	18fb      	adds	r3, r7, r3
   21f5c:	781b      	ldrb	r3, [r3, #0]
   21f5e:	2b06      	cmp	r3, #6
   21f60:	d9cf      	bls.n	21f02 <socket+0x42>
   21f62:	e03f      	b.n	21fe4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   21f64:	1d7b      	adds	r3, r7, #5
   21f66:	781b      	ldrb	r3, [r3, #0]
   21f68:	2b02      	cmp	r3, #2
   21f6a:	d13b      	bne.n	21fe4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   21f6c:	4b4f      	ldr	r3, [pc, #316]	; (220ac <socket+0x1ec>)
   21f6e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   21f70:	231e      	movs	r3, #30
   21f72:	18fb      	adds	r3, r7, r3
   21f74:	2200      	movs	r2, #0
   21f76:	701a      	strb	r2, [r3, #0]
   21f78:	e02f      	b.n	21fda <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   21f7a:	2317      	movs	r3, #23
   21f7c:	18fb      	adds	r3, r7, r3
   21f7e:	4a4c      	ldr	r2, [pc, #304]	; (220b0 <socket+0x1f0>)
   21f80:	7812      	ldrb	r2, [r2, #0]
   21f82:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   21f84:	4b4a      	ldr	r3, [pc, #296]	; (220b0 <socket+0x1f0>)
   21f86:	781b      	ldrb	r3, [r3, #0]
   21f88:	b2db      	uxtb	r3, r3
   21f8a:	011b      	lsls	r3, r3, #4
   21f8c:	693a      	ldr	r2, [r7, #16]
   21f8e:	18d3      	adds	r3, r2, r3
   21f90:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   21f92:	4b47      	ldr	r3, [pc, #284]	; (220b0 <socket+0x1f0>)
   21f94:	781b      	ldrb	r3, [r3, #0]
   21f96:	b2db      	uxtb	r3, r3
   21f98:	3301      	adds	r3, #1
   21f9a:	4a46      	ldr	r2, [pc, #280]	; (220b4 <socket+0x1f4>)
   21f9c:	4013      	ands	r3, r2
   21f9e:	d504      	bpl.n	21faa <socket+0xea>
   21fa0:	3b01      	subs	r3, #1
   21fa2:	2204      	movs	r2, #4
   21fa4:	4252      	negs	r2, r2
   21fa6:	4313      	orrs	r3, r2
   21fa8:	3301      	adds	r3, #1
   21faa:	b2da      	uxtb	r2, r3
   21fac:	4b40      	ldr	r3, [pc, #256]	; (220b0 <socket+0x1f0>)
   21fae:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   21fb0:	69bb      	ldr	r3, [r7, #24]
   21fb2:	7a9b      	ldrb	r3, [r3, #10]
   21fb4:	b2db      	uxtb	r3, r3
   21fb6:	2b00      	cmp	r3, #0
   21fb8:	d108      	bne.n	21fcc <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   21fba:	2317      	movs	r3, #23
   21fbc:	18fb      	adds	r3, r7, r3
   21fbe:	781b      	ldrb	r3, [r3, #0]
   21fc0:	3307      	adds	r3, #7
   21fc2:	b2da      	uxtb	r2, r3
   21fc4:	231f      	movs	r3, #31
   21fc6:	18fb      	adds	r3, r7, r3
   21fc8:	701a      	strb	r2, [r3, #0]
					break;
   21fca:	e00b      	b.n	21fe4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   21fcc:	231e      	movs	r3, #30
   21fce:	18fb      	adds	r3, r7, r3
   21fd0:	781a      	ldrb	r2, [r3, #0]
   21fd2:	231e      	movs	r3, #30
   21fd4:	18fb      	adds	r3, r7, r3
   21fd6:	3201      	adds	r2, #1
   21fd8:	701a      	strb	r2, [r3, #0]
   21fda:	231e      	movs	r3, #30
   21fdc:	18fb      	adds	r3, r7, r3
   21fde:	781b      	ldrb	r3, [r3, #0]
   21fe0:	2b03      	cmp	r3, #3
   21fe2:	d9ca      	bls.n	21f7a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   21fe4:	231f      	movs	r3, #31
   21fe6:	18fb      	adds	r3, r7, r3
   21fe8:	781b      	ldrb	r3, [r3, #0]
   21fea:	2b7f      	cmp	r3, #127	; 0x7f
   21fec:	d84f      	bhi.n	2208e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   21fee:	69bb      	ldr	r3, [r7, #24]
   21ff0:	2210      	movs	r2, #16
   21ff2:	2100      	movs	r1, #0
   21ff4:	0018      	movs	r0, r3
   21ff6:	4b30      	ldr	r3, [pc, #192]	; (220b8 <socket+0x1f8>)
   21ff8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   21ffa:	69bb      	ldr	r3, [r7, #24]
   21ffc:	2201      	movs	r2, #1
   21ffe:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   22000:	4b2e      	ldr	r3, [pc, #184]	; (220bc <socket+0x1fc>)
   22002:	881b      	ldrh	r3, [r3, #0]
   22004:	b29b      	uxth	r3, r3
   22006:	3301      	adds	r3, #1
   22008:	b29a      	uxth	r2, r3
   2200a:	4b2c      	ldr	r3, [pc, #176]	; (220bc <socket+0x1fc>)
   2200c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2200e:	4b2b      	ldr	r3, [pc, #172]	; (220bc <socket+0x1fc>)
   22010:	881b      	ldrh	r3, [r3, #0]
   22012:	b29b      	uxth	r3, r3
   22014:	2b00      	cmp	r3, #0
   22016:	d106      	bne.n	22026 <socket+0x166>
				++gu16SessionID;
   22018:	4b28      	ldr	r3, [pc, #160]	; (220bc <socket+0x1fc>)
   2201a:	881b      	ldrh	r3, [r3, #0]
   2201c:	b29b      	uxth	r3, r3
   2201e:	3301      	adds	r3, #1
   22020:	b29a      	uxth	r2, r3
   22022:	4b26      	ldr	r3, [pc, #152]	; (220bc <socket+0x1fc>)
   22024:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   22026:	4b25      	ldr	r3, [pc, #148]	; (220bc <socket+0x1fc>)
   22028:	881b      	ldrh	r3, [r3, #0]
   2202a:	b29a      	uxth	r2, r3
   2202c:	69bb      	ldr	r3, [r7, #24]
   2202e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   22030:	4b23      	ldr	r3, [pc, #140]	; (220c0 <socket+0x200>)
   22032:	0018      	movs	r0, r3
   22034:	4b23      	ldr	r3, [pc, #140]	; (220c4 <socket+0x204>)
   22036:	4798      	blx	r3
   22038:	231f      	movs	r3, #31
   2203a:	18fb      	adds	r3, r7, r3
   2203c:	2100      	movs	r1, #0
   2203e:	5659      	ldrsb	r1, [r3, r1]
   22040:	4b1e      	ldr	r3, [pc, #120]	; (220bc <socket+0x1fc>)
   22042:	881b      	ldrh	r3, [r3, #0]
   22044:	b29b      	uxth	r3, r3
   22046:	001a      	movs	r2, r3
   22048:	4b1f      	ldr	r3, [pc, #124]	; (220c8 <socket+0x208>)
   2204a:	0018      	movs	r0, r3
   2204c:	4b1d      	ldr	r3, [pc, #116]	; (220c4 <socket+0x204>)
   2204e:	4798      	blx	r3
   22050:	4b1e      	ldr	r3, [pc, #120]	; (220cc <socket+0x20c>)
   22052:	0018      	movs	r0, r3
   22054:	4b1b      	ldr	r3, [pc, #108]	; (220c4 <socket+0x204>)
   22056:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   22058:	1d3b      	adds	r3, r7, #4
   2205a:	781b      	ldrb	r3, [r3, #0]
   2205c:	2201      	movs	r2, #1
   2205e:	4013      	ands	r3, r2
   22060:	d015      	beq.n	2208e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   22062:	230c      	movs	r3, #12
   22064:	18fb      	adds	r3, r7, r3
   22066:	221f      	movs	r2, #31
   22068:	18ba      	adds	r2, r7, r2
   2206a:	7812      	ldrb	r2, [r2, #0]
   2206c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2206e:	69bb      	ldr	r3, [r7, #24]
   22070:	2221      	movs	r2, #33	; 0x21
   22072:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   22074:	230c      	movs	r3, #12
   22076:	18fa      	adds	r2, r7, r3
   22078:	2300      	movs	r3, #0
   2207a:	9302      	str	r3, [sp, #8]
   2207c:	2300      	movs	r3, #0
   2207e:	9301      	str	r3, [sp, #4]
   22080:	2300      	movs	r3, #0
   22082:	9300      	str	r3, [sp, #0]
   22084:	2304      	movs	r3, #4
   22086:	2150      	movs	r1, #80	; 0x50
   22088:	2002      	movs	r0, #2
   2208a:	4c11      	ldr	r4, [pc, #68]	; (220d0 <socket+0x210>)
   2208c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2208e:	231f      	movs	r3, #31
   22090:	18fb      	adds	r3, r7, r3
   22092:	781b      	ldrb	r3, [r3, #0]
   22094:	b25b      	sxtb	r3, r3
}
   22096:	0018      	movs	r0, r3
   22098:	46bd      	mov	sp, r7
   2209a:	b009      	add	sp, #36	; 0x24
   2209c:	bd90      	pop	{r4, r7, pc}
   2209e:	46c0      	nop			; (mov r8, r8)
   220a0:	20003d31 	.word	0x20003d31
   220a4:	20005534 	.word	0x20005534
   220a8:	000300cd 	.word	0x000300cd
   220ac:	200055a4 	.word	0x200055a4
   220b0:	20003d32 	.word	0x20003d32
   220b4:	80000003 	.word	0x80000003
   220b8:	0001d531 	.word	0x0001d531
   220bc:	20003d2e 	.word	0x20003d2e
   220c0:	000376ec 	.word	0x000376ec
   220c4:	0001a5e9 	.word	0x0001a5e9
   220c8:	00037710 	.word	0x00037710
   220cc:	0003770c 	.word	0x0003770c
   220d0:	0001d791 	.word	0x0001d791

000220d4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   220d4:	b5b0      	push	{r4, r5, r7, lr}
   220d6:	b08a      	sub	sp, #40	; 0x28
   220d8:	af04      	add	r7, sp, #16
   220da:	6039      	str	r1, [r7, #0]
   220dc:	0011      	movs	r1, r2
   220de:	1dfb      	adds	r3, r7, #7
   220e0:	1c02      	adds	r2, r0, #0
   220e2:	701a      	strb	r2, [r3, #0]
   220e4:	1dbb      	adds	r3, r7, #6
   220e6:	1c0a      	adds	r2, r1, #0
   220e8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   220ea:	2317      	movs	r3, #23
   220ec:	18fb      	adds	r3, r7, r3
   220ee:	22fa      	movs	r2, #250	; 0xfa
   220f0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   220f2:	1dfb      	adds	r3, r7, #7
   220f4:	781b      	ldrb	r3, [r3, #0]
   220f6:	2b7f      	cmp	r3, #127	; 0x7f
   220f8:	d867      	bhi.n	221ca <connect+0xf6>
   220fa:	683b      	ldr	r3, [r7, #0]
   220fc:	2b00      	cmp	r3, #0
   220fe:	d064      	beq.n	221ca <connect+0xf6>
   22100:	1dfb      	adds	r3, r7, #7
   22102:	781b      	ldrb	r3, [r3, #0]
   22104:	b25b      	sxtb	r3, r3
   22106:	4a35      	ldr	r2, [pc, #212]	; (221dc <connect+0x108>)
   22108:	011b      	lsls	r3, r3, #4
   2210a:	18d3      	adds	r3, r2, r3
   2210c:	330a      	adds	r3, #10
   2210e:	781b      	ldrb	r3, [r3, #0]
   22110:	b2db      	uxtb	r3, r3
   22112:	2b01      	cmp	r3, #1
   22114:	d159      	bne.n	221ca <connect+0xf6>
   22116:	1dbb      	adds	r3, r7, #6
   22118:	781b      	ldrb	r3, [r3, #0]
   2211a:	2b00      	cmp	r3, #0
   2211c:	d055      	beq.n	221ca <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2211e:	2316      	movs	r3, #22
   22120:	18fb      	adds	r3, r7, r3
   22122:	2244      	movs	r2, #68	; 0x44
   22124:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   22126:	1dfb      	adds	r3, r7, #7
   22128:	781b      	ldrb	r3, [r3, #0]
   2212a:	b25b      	sxtb	r3, r3
   2212c:	4a2b      	ldr	r2, [pc, #172]	; (221dc <connect+0x108>)
   2212e:	011b      	lsls	r3, r3, #4
   22130:	18d3      	adds	r3, r2, r3
   22132:	330b      	adds	r3, #11
   22134:	781b      	ldrb	r3, [r3, #0]
   22136:	b2db      	uxtb	r3, r3
   22138:	001a      	movs	r2, r3
   2213a:	2301      	movs	r3, #1
   2213c:	4013      	ands	r3, r2
   2213e:	d00f      	beq.n	22160 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   22140:	2316      	movs	r3, #22
   22142:	18fb      	adds	r3, r7, r3
   22144:	224b      	movs	r2, #75	; 0x4b
   22146:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   22148:	1dfb      	adds	r3, r7, #7
   2214a:	781b      	ldrb	r3, [r3, #0]
   2214c:	b25b      	sxtb	r3, r3
   2214e:	4a23      	ldr	r2, [pc, #140]	; (221dc <connect+0x108>)
   22150:	011b      	lsls	r3, r3, #4
   22152:	18d3      	adds	r3, r2, r3
   22154:	330b      	adds	r3, #11
   22156:	781b      	ldrb	r3, [r3, #0]
   22158:	b2da      	uxtb	r2, r3
   2215a:	2308      	movs	r3, #8
   2215c:	18fb      	adds	r3, r7, r3
   2215e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   22160:	2308      	movs	r3, #8
   22162:	18fb      	adds	r3, r7, r3
   22164:	1dfa      	adds	r2, r7, #7
   22166:	7812      	ldrb	r2, [r2, #0]
   22168:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2216a:	6839      	ldr	r1, [r7, #0]
   2216c:	2308      	movs	r3, #8
   2216e:	18fb      	adds	r3, r7, r3
   22170:	2208      	movs	r2, #8
   22172:	0018      	movs	r0, r3
   22174:	4b1a      	ldr	r3, [pc, #104]	; (221e0 <connect+0x10c>)
   22176:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   22178:	1dfb      	adds	r3, r7, #7
   2217a:	781b      	ldrb	r3, [r3, #0]
   2217c:	b25b      	sxtb	r3, r3
   2217e:	4a17      	ldr	r2, [pc, #92]	; (221dc <connect+0x108>)
   22180:	011b      	lsls	r3, r3, #4
   22182:	18d3      	adds	r3, r2, r3
   22184:	3306      	adds	r3, #6
   22186:	881b      	ldrh	r3, [r3, #0]
   22188:	b29a      	uxth	r2, r3
   2218a:	2308      	movs	r3, #8
   2218c:	18fb      	adds	r3, r7, r3
   2218e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   22190:	2317      	movs	r3, #23
   22192:	18fc      	adds	r4, r7, r3
   22194:	2308      	movs	r3, #8
   22196:	18fa      	adds	r2, r7, r3
   22198:	2316      	movs	r3, #22
   2219a:	18fb      	adds	r3, r7, r3
   2219c:	7819      	ldrb	r1, [r3, #0]
   2219e:	2300      	movs	r3, #0
   221a0:	9302      	str	r3, [sp, #8]
   221a2:	2300      	movs	r3, #0
   221a4:	9301      	str	r3, [sp, #4]
   221a6:	2300      	movs	r3, #0
   221a8:	9300      	str	r3, [sp, #0]
   221aa:	230c      	movs	r3, #12
   221ac:	2002      	movs	r0, #2
   221ae:	4d0d      	ldr	r5, [pc, #52]	; (221e4 <connect+0x110>)
   221b0:	47a8      	blx	r5
   221b2:	0003      	movs	r3, r0
   221b4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   221b6:	2317      	movs	r3, #23
   221b8:	18fb      	adds	r3, r7, r3
   221ba:	781b      	ldrb	r3, [r3, #0]
   221bc:	b25b      	sxtb	r3, r3
   221be:	2b00      	cmp	r3, #0
   221c0:	d003      	beq.n	221ca <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   221c2:	2317      	movs	r3, #23
   221c4:	18fb      	adds	r3, r7, r3
   221c6:	22f7      	movs	r2, #247	; 0xf7
   221c8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   221ca:	2317      	movs	r3, #23
   221cc:	18fb      	adds	r3, r7, r3
   221ce:	781b      	ldrb	r3, [r3, #0]
   221d0:	b25b      	sxtb	r3, r3
}
   221d2:	0018      	movs	r0, r3
   221d4:	46bd      	mov	sp, r7
   221d6:	b006      	add	sp, #24
   221d8:	bdb0      	pop	{r4, r5, r7, pc}
   221da:	46c0      	nop			; (mov r8, r8)
   221dc:	20005534 	.word	0x20005534
   221e0:	0001d4f5 	.word	0x0001d4f5
   221e4:	0001d791 	.word	0x0001d791

000221e8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   221e8:	b590      	push	{r4, r7, lr}
   221ea:	b08f      	sub	sp, #60	; 0x3c
   221ec:	af04      	add	r7, sp, #16
   221ee:	0004      	movs	r4, r0
   221f0:	60b9      	str	r1, [r7, #8]
   221f2:	0010      	movs	r0, r2
   221f4:	0019      	movs	r1, r3
   221f6:	230f      	movs	r3, #15
   221f8:	18fb      	adds	r3, r7, r3
   221fa:	1c22      	adds	r2, r4, #0
   221fc:	701a      	strb	r2, [r3, #0]
   221fe:	230c      	movs	r3, #12
   22200:	18fb      	adds	r3, r7, r3
   22202:	1c02      	adds	r2, r0, #0
   22204:	801a      	strh	r2, [r3, #0]
   22206:	1dbb      	adds	r3, r7, #6
   22208:	1c0a      	adds	r2, r1, #0
   2220a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2220c:	2326      	movs	r3, #38	; 0x26
   2220e:	18fb      	adds	r3, r7, r3
   22210:	2206      	movs	r2, #6
   22212:	4252      	negs	r2, r2
   22214:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   22216:	230f      	movs	r3, #15
   22218:	18fb      	adds	r3, r7, r3
   2221a:	781b      	ldrb	r3, [r3, #0]
   2221c:	2b7f      	cmp	r3, #127	; 0x7f
   2221e:	d900      	bls.n	22222 <send+0x3a>
   22220:	e087      	b.n	22332 <send+0x14a>
   22222:	68bb      	ldr	r3, [r7, #8]
   22224:	2b00      	cmp	r3, #0
   22226:	d100      	bne.n	2222a <send+0x42>
   22228:	e083      	b.n	22332 <send+0x14a>
   2222a:	230c      	movs	r3, #12
   2222c:	18fb      	adds	r3, r7, r3
   2222e:	881a      	ldrh	r2, [r3, #0]
   22230:	23af      	movs	r3, #175	; 0xaf
   22232:	00db      	lsls	r3, r3, #3
   22234:	429a      	cmp	r2, r3
   22236:	d900      	bls.n	2223a <send+0x52>
   22238:	e07b      	b.n	22332 <send+0x14a>
   2223a:	230f      	movs	r3, #15
   2223c:	18fb      	adds	r3, r7, r3
   2223e:	781b      	ldrb	r3, [r3, #0]
   22240:	b25b      	sxtb	r3, r3
   22242:	4a40      	ldr	r2, [pc, #256]	; (22344 <send+0x15c>)
   22244:	011b      	lsls	r3, r3, #4
   22246:	18d3      	adds	r3, r2, r3
   22248:	330a      	adds	r3, #10
   2224a:	781b      	ldrb	r3, [r3, #0]
   2224c:	b2db      	uxtb	r3, r3
   2224e:	2b01      	cmp	r3, #1
   22250:	d16f      	bne.n	22332 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   22252:	2323      	movs	r3, #35	; 0x23
   22254:	18fb      	adds	r3, r7, r3
   22256:	2245      	movs	r2, #69	; 0x45
   22258:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2225a:	2324      	movs	r3, #36	; 0x24
   2225c:	18fb      	adds	r3, r7, r3
   2225e:	2250      	movs	r2, #80	; 0x50
   22260:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   22262:	2310      	movs	r3, #16
   22264:	18fb      	adds	r3, r7, r3
   22266:	220f      	movs	r2, #15
   22268:	18ba      	adds	r2, r7, r2
   2226a:	7812      	ldrb	r2, [r2, #0]
   2226c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2226e:	2310      	movs	r3, #16
   22270:	18fb      	adds	r3, r7, r3
   22272:	220c      	movs	r2, #12
   22274:	18ba      	adds	r2, r7, r2
   22276:	8812      	ldrh	r2, [r2, #0]
   22278:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2227a:	230f      	movs	r3, #15
   2227c:	18fb      	adds	r3, r7, r3
   2227e:	781b      	ldrb	r3, [r3, #0]
   22280:	b25b      	sxtb	r3, r3
   22282:	4a30      	ldr	r2, [pc, #192]	; (22344 <send+0x15c>)
   22284:	011b      	lsls	r3, r3, #4
   22286:	18d3      	adds	r3, r2, r3
   22288:	3306      	adds	r3, #6
   2228a:	881b      	ldrh	r3, [r3, #0]
   2228c:	b29a      	uxth	r2, r3
   2228e:	2310      	movs	r3, #16
   22290:	18fb      	adds	r3, r7, r3
   22292:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   22294:	230f      	movs	r3, #15
   22296:	18fb      	adds	r3, r7, r3
   22298:	781b      	ldrb	r3, [r3, #0]
   2229a:	b25b      	sxtb	r3, r3
   2229c:	2b06      	cmp	r3, #6
   2229e:	dd03      	ble.n	222a8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   222a0:	2324      	movs	r3, #36	; 0x24
   222a2:	18fb      	adds	r3, r7, r3
   222a4:	2244      	movs	r2, #68	; 0x44
   222a6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   222a8:	230f      	movs	r3, #15
   222aa:	18fb      	adds	r3, r7, r3
   222ac:	781b      	ldrb	r3, [r3, #0]
   222ae:	b25b      	sxtb	r3, r3
   222b0:	4a24      	ldr	r2, [pc, #144]	; (22344 <send+0x15c>)
   222b2:	011b      	lsls	r3, r3, #4
   222b4:	18d3      	adds	r3, r2, r3
   222b6:	330b      	adds	r3, #11
   222b8:	781b      	ldrb	r3, [r3, #0]
   222ba:	b2db      	uxtb	r3, r3
   222bc:	001a      	movs	r2, r3
   222be:	2301      	movs	r3, #1
   222c0:	4013      	ands	r3, r2
   222c2:	d00f      	beq.n	222e4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   222c4:	2323      	movs	r3, #35	; 0x23
   222c6:	18fb      	adds	r3, r7, r3
   222c8:	224c      	movs	r2, #76	; 0x4c
   222ca:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   222cc:	230f      	movs	r3, #15
   222ce:	18fb      	adds	r3, r7, r3
   222d0:	2200      	movs	r2, #0
   222d2:	569a      	ldrsb	r2, [r3, r2]
   222d4:	2324      	movs	r3, #36	; 0x24
   222d6:	18fb      	adds	r3, r7, r3
   222d8:	491a      	ldr	r1, [pc, #104]	; (22344 <send+0x15c>)
   222da:	0112      	lsls	r2, r2, #4
   222dc:	188a      	adds	r2, r1, r2
   222de:	3208      	adds	r2, #8
   222e0:	8812      	ldrh	r2, [r2, #0]
   222e2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   222e4:	2323      	movs	r3, #35	; 0x23
   222e6:	18fb      	adds	r3, r7, r3
   222e8:	781b      	ldrb	r3, [r3, #0]
   222ea:	2280      	movs	r2, #128	; 0x80
   222ec:	4252      	negs	r2, r2
   222ee:	4313      	orrs	r3, r2
   222f0:	b2d9      	uxtb	r1, r3
   222f2:	2310      	movs	r3, #16
   222f4:	18fa      	adds	r2, r7, r3
   222f6:	2324      	movs	r3, #36	; 0x24
   222f8:	18fb      	adds	r3, r7, r3
   222fa:	881b      	ldrh	r3, [r3, #0]
   222fc:	9302      	str	r3, [sp, #8]
   222fe:	230c      	movs	r3, #12
   22300:	18fb      	adds	r3, r7, r3
   22302:	881b      	ldrh	r3, [r3, #0]
   22304:	9301      	str	r3, [sp, #4]
   22306:	68bb      	ldr	r3, [r7, #8]
   22308:	9300      	str	r3, [sp, #0]
   2230a:	2310      	movs	r3, #16
   2230c:	2002      	movs	r0, #2
   2230e:	4c0e      	ldr	r4, [pc, #56]	; (22348 <send+0x160>)
   22310:	47a0      	blx	r4
   22312:	0003      	movs	r3, r0
   22314:	001a      	movs	r2, r3
   22316:	2326      	movs	r3, #38	; 0x26
   22318:	18fb      	adds	r3, r7, r3
   2231a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2231c:	2326      	movs	r3, #38	; 0x26
   2231e:	18fb      	adds	r3, r7, r3
   22320:	2200      	movs	r2, #0
   22322:	5e9b      	ldrsh	r3, [r3, r2]
   22324:	2b00      	cmp	r3, #0
   22326:	d004      	beq.n	22332 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   22328:	2326      	movs	r3, #38	; 0x26
   2232a:	18fb      	adds	r3, r7, r3
   2232c:	220e      	movs	r2, #14
   2232e:	4252      	negs	r2, r2
   22330:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   22332:	2326      	movs	r3, #38	; 0x26
   22334:	18fb      	adds	r3, r7, r3
   22336:	2200      	movs	r2, #0
   22338:	5e9b      	ldrsh	r3, [r3, r2]
}
   2233a:	0018      	movs	r0, r3
   2233c:	46bd      	mov	sp, r7
   2233e:	b00b      	add	sp, #44	; 0x2c
   22340:	bd90      	pop	{r4, r7, pc}
   22342:	46c0      	nop			; (mov r8, r8)
   22344:	20005534 	.word	0x20005534
   22348:	0001d791 	.word	0x0001d791

0002234c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2234c:	b590      	push	{r4, r7, lr}
   2234e:	b08d      	sub	sp, #52	; 0x34
   22350:	af04      	add	r7, sp, #16
   22352:	60b9      	str	r1, [r7, #8]
   22354:	0011      	movs	r1, r2
   22356:	607b      	str	r3, [r7, #4]
   22358:	230f      	movs	r3, #15
   2235a:	18fb      	adds	r3, r7, r3
   2235c:	1c02      	adds	r2, r0, #0
   2235e:	701a      	strb	r2, [r3, #0]
   22360:	230c      	movs	r3, #12
   22362:	18fb      	adds	r3, r7, r3
   22364:	1c0a      	adds	r2, r1, #0
   22366:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   22368:	231e      	movs	r3, #30
   2236a:	18fb      	adds	r3, r7, r3
   2236c:	2206      	movs	r2, #6
   2236e:	4252      	negs	r2, r2
   22370:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   22372:	230f      	movs	r3, #15
   22374:	18fb      	adds	r3, r7, r3
   22376:	781b      	ldrb	r3, [r3, #0]
   22378:	2b7f      	cmp	r3, #127	; 0x7f
   2237a:	d900      	bls.n	2237e <recv+0x32>
   2237c:	e099      	b.n	224b2 <recv+0x166>
   2237e:	68bb      	ldr	r3, [r7, #8]
   22380:	2b00      	cmp	r3, #0
   22382:	d100      	bne.n	22386 <recv+0x3a>
   22384:	e095      	b.n	224b2 <recv+0x166>
   22386:	230c      	movs	r3, #12
   22388:	18fb      	adds	r3, r7, r3
   2238a:	881b      	ldrh	r3, [r3, #0]
   2238c:	2b00      	cmp	r3, #0
   2238e:	d100      	bne.n	22392 <recv+0x46>
   22390:	e08f      	b.n	224b2 <recv+0x166>
   22392:	230f      	movs	r3, #15
   22394:	18fb      	adds	r3, r7, r3
   22396:	781b      	ldrb	r3, [r3, #0]
   22398:	b25b      	sxtb	r3, r3
   2239a:	4a4a      	ldr	r2, [pc, #296]	; (224c4 <recv+0x178>)
   2239c:	011b      	lsls	r3, r3, #4
   2239e:	18d3      	adds	r3, r2, r3
   223a0:	330a      	adds	r3, #10
   223a2:	781b      	ldrb	r3, [r3, #0]
   223a4:	b2db      	uxtb	r3, r3
   223a6:	2b01      	cmp	r3, #1
   223a8:	d000      	beq.n	223ac <recv+0x60>
   223aa:	e082      	b.n	224b2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   223ac:	231e      	movs	r3, #30
   223ae:	18fb      	adds	r3, r7, r3
   223b0:	2200      	movs	r2, #0
   223b2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   223b4:	230f      	movs	r3, #15
   223b6:	18fb      	adds	r3, r7, r3
   223b8:	2200      	movs	r2, #0
   223ba:	569a      	ldrsb	r2, [r3, r2]
   223bc:	4b41      	ldr	r3, [pc, #260]	; (224c4 <recv+0x178>)
   223be:	0112      	lsls	r2, r2, #4
   223c0:	68b9      	ldr	r1, [r7, #8]
   223c2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   223c4:	230f      	movs	r3, #15
   223c6:	18fb      	adds	r3, r7, r3
   223c8:	781b      	ldrb	r3, [r3, #0]
   223ca:	b25b      	sxtb	r3, r3
   223cc:	4a3d      	ldr	r2, [pc, #244]	; (224c4 <recv+0x178>)
   223ce:	011b      	lsls	r3, r3, #4
   223d0:	18d3      	adds	r3, r2, r3
   223d2:	3304      	adds	r3, #4
   223d4:	220c      	movs	r2, #12
   223d6:	18ba      	adds	r2, r7, r2
   223d8:	8812      	ldrh	r2, [r2, #0]
   223da:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   223dc:	230f      	movs	r3, #15
   223de:	18fb      	adds	r3, r7, r3
   223e0:	781b      	ldrb	r3, [r3, #0]
   223e2:	b25b      	sxtb	r3, r3
   223e4:	4a37      	ldr	r2, [pc, #220]	; (224c4 <recv+0x178>)
   223e6:	011b      	lsls	r3, r3, #4
   223e8:	18d3      	adds	r3, r2, r3
   223ea:	330c      	adds	r3, #12
   223ec:	781b      	ldrb	r3, [r3, #0]
   223ee:	b2db      	uxtb	r3, r3
   223f0:	2b00      	cmp	r3, #0
   223f2:	d15e      	bne.n	224b2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   223f4:	231d      	movs	r3, #29
   223f6:	18fb      	adds	r3, r7, r3
   223f8:	2246      	movs	r2, #70	; 0x46
   223fa:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   223fc:	230f      	movs	r3, #15
   223fe:	18fb      	adds	r3, r7, r3
   22400:	781b      	ldrb	r3, [r3, #0]
   22402:	b25b      	sxtb	r3, r3
   22404:	4a2f      	ldr	r2, [pc, #188]	; (224c4 <recv+0x178>)
   22406:	011b      	lsls	r3, r3, #4
   22408:	18d3      	adds	r3, r2, r3
   2240a:	330c      	adds	r3, #12
   2240c:	2201      	movs	r2, #1
   2240e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   22410:	230f      	movs	r3, #15
   22412:	18fb      	adds	r3, r7, r3
   22414:	781b      	ldrb	r3, [r3, #0]
   22416:	b25b      	sxtb	r3, r3
   22418:	4a2a      	ldr	r2, [pc, #168]	; (224c4 <recv+0x178>)
   2241a:	011b      	lsls	r3, r3, #4
   2241c:	18d3      	adds	r3, r2, r3
   2241e:	330b      	adds	r3, #11
   22420:	781b      	ldrb	r3, [r3, #0]
   22422:	b2db      	uxtb	r3, r3
   22424:	001a      	movs	r2, r3
   22426:	2301      	movs	r3, #1
   22428:	4013      	ands	r3, r2
   2242a:	d003      	beq.n	22434 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2242c:	231d      	movs	r3, #29
   2242e:	18fb      	adds	r3, r7, r3
   22430:	224d      	movs	r2, #77	; 0x4d
   22432:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   22434:	687b      	ldr	r3, [r7, #4]
   22436:	2b00      	cmp	r3, #0
   22438:	d105      	bne.n	22446 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2243a:	2314      	movs	r3, #20
   2243c:	18fb      	adds	r3, r7, r3
   2243e:	2201      	movs	r2, #1
   22440:	4252      	negs	r2, r2
   22442:	601a      	str	r2, [r3, #0]
   22444:	e003      	b.n	2244e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   22446:	2314      	movs	r3, #20
   22448:	18fb      	adds	r3, r7, r3
   2244a:	687a      	ldr	r2, [r7, #4]
   2244c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2244e:	2314      	movs	r3, #20
   22450:	18fb      	adds	r3, r7, r3
   22452:	220f      	movs	r2, #15
   22454:	18ba      	adds	r2, r7, r2
   22456:	7812      	ldrb	r2, [r2, #0]
   22458:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2245a:	230f      	movs	r3, #15
   2245c:	18fb      	adds	r3, r7, r3
   2245e:	781b      	ldrb	r3, [r3, #0]
   22460:	b25b      	sxtb	r3, r3
   22462:	4a18      	ldr	r2, [pc, #96]	; (224c4 <recv+0x178>)
   22464:	011b      	lsls	r3, r3, #4
   22466:	18d3      	adds	r3, r2, r3
   22468:	3306      	adds	r3, #6
   2246a:	881b      	ldrh	r3, [r3, #0]
   2246c:	b29a      	uxth	r2, r3
   2246e:	2314      	movs	r3, #20
   22470:	18fb      	adds	r3, r7, r3
   22472:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   22474:	2314      	movs	r3, #20
   22476:	18fa      	adds	r2, r7, r3
   22478:	231d      	movs	r3, #29
   2247a:	18fb      	adds	r3, r7, r3
   2247c:	7819      	ldrb	r1, [r3, #0]
   2247e:	2300      	movs	r3, #0
   22480:	9302      	str	r3, [sp, #8]
   22482:	2300      	movs	r3, #0
   22484:	9301      	str	r3, [sp, #4]
   22486:	2300      	movs	r3, #0
   22488:	9300      	str	r3, [sp, #0]
   2248a:	2308      	movs	r3, #8
   2248c:	2002      	movs	r0, #2
   2248e:	4c0e      	ldr	r4, [pc, #56]	; (224c8 <recv+0x17c>)
   22490:	47a0      	blx	r4
   22492:	0003      	movs	r3, r0
   22494:	001a      	movs	r2, r3
   22496:	231e      	movs	r3, #30
   22498:	18fb      	adds	r3, r7, r3
   2249a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   2249c:	231e      	movs	r3, #30
   2249e:	18fb      	adds	r3, r7, r3
   224a0:	2200      	movs	r2, #0
   224a2:	5e9b      	ldrsh	r3, [r3, r2]
   224a4:	2b00      	cmp	r3, #0
   224a6:	d004      	beq.n	224b2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   224a8:	231e      	movs	r3, #30
   224aa:	18fb      	adds	r3, r7, r3
   224ac:	220e      	movs	r2, #14
   224ae:	4252      	negs	r2, r2
   224b0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   224b2:	231e      	movs	r3, #30
   224b4:	18fb      	adds	r3, r7, r3
   224b6:	2200      	movs	r2, #0
   224b8:	5e9b      	ldrsh	r3, [r3, r2]
}
   224ba:	0018      	movs	r0, r3
   224bc:	46bd      	mov	sp, r7
   224be:	b009      	add	sp, #36	; 0x24
   224c0:	bd90      	pop	{r4, r7, pc}
   224c2:	46c0      	nop			; (mov r8, r8)
   224c4:	20005534 	.word	0x20005534
   224c8:	0001d791 	.word	0x0001d791

000224cc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   224cc:	b5b0      	push	{r4, r5, r7, lr}
   224ce:	b088      	sub	sp, #32
   224d0:	af04      	add	r7, sp, #16
   224d2:	0002      	movs	r2, r0
   224d4:	1dfb      	adds	r3, r7, #7
   224d6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   224d8:	230f      	movs	r3, #15
   224da:	18fb      	adds	r3, r7, r3
   224dc:	22fa      	movs	r2, #250	; 0xfa
   224de:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   224e0:	4b43      	ldr	r3, [pc, #268]	; (225f0 <close+0x124>)
   224e2:	0018      	movs	r0, r3
   224e4:	4b43      	ldr	r3, [pc, #268]	; (225f4 <close+0x128>)
   224e6:	4798      	blx	r3
   224e8:	1dfb      	adds	r3, r7, #7
   224ea:	2200      	movs	r2, #0
   224ec:	569a      	ldrsb	r2, [r3, r2]
   224ee:	4b42      	ldr	r3, [pc, #264]	; (225f8 <close+0x12c>)
   224f0:	0011      	movs	r1, r2
   224f2:	0018      	movs	r0, r3
   224f4:	4b3f      	ldr	r3, [pc, #252]	; (225f4 <close+0x128>)
   224f6:	4798      	blx	r3
   224f8:	4b40      	ldr	r3, [pc, #256]	; (225fc <close+0x130>)
   224fa:	0018      	movs	r0, r3
   224fc:	4b3d      	ldr	r3, [pc, #244]	; (225f4 <close+0x128>)
   224fe:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   22500:	1dfb      	adds	r3, r7, #7
   22502:	781b      	ldrb	r3, [r3, #0]
   22504:	2b7f      	cmp	r3, #127	; 0x7f
   22506:	d86a      	bhi.n	225de <close+0x112>
   22508:	1dfb      	adds	r3, r7, #7
   2250a:	781b      	ldrb	r3, [r3, #0]
   2250c:	b25b      	sxtb	r3, r3
   2250e:	4a3c      	ldr	r2, [pc, #240]	; (22600 <close+0x134>)
   22510:	011b      	lsls	r3, r3, #4
   22512:	18d3      	adds	r3, r2, r3
   22514:	330a      	adds	r3, #10
   22516:	781b      	ldrb	r3, [r3, #0]
   22518:	b2db      	uxtb	r3, r3
   2251a:	2b01      	cmp	r3, #1
   2251c:	d15f      	bne.n	225de <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2251e:	230e      	movs	r3, #14
   22520:	18fb      	adds	r3, r7, r3
   22522:	2249      	movs	r2, #73	; 0x49
   22524:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   22526:	2308      	movs	r3, #8
   22528:	18fb      	adds	r3, r7, r3
   2252a:	1dfa      	adds	r2, r7, #7
   2252c:	7812      	ldrb	r2, [r2, #0]
   2252e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   22530:	1dfb      	adds	r3, r7, #7
   22532:	781b      	ldrb	r3, [r3, #0]
   22534:	b25b      	sxtb	r3, r3
   22536:	4a32      	ldr	r2, [pc, #200]	; (22600 <close+0x134>)
   22538:	011b      	lsls	r3, r3, #4
   2253a:	18d3      	adds	r3, r2, r3
   2253c:	3306      	adds	r3, #6
   2253e:	881b      	ldrh	r3, [r3, #0]
   22540:	b29a      	uxth	r2, r3
   22542:	2308      	movs	r3, #8
   22544:	18fb      	adds	r3, r7, r3
   22546:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   22548:	1dfb      	adds	r3, r7, #7
   2254a:	781b      	ldrb	r3, [r3, #0]
   2254c:	b25b      	sxtb	r3, r3
   2254e:	4a2c      	ldr	r2, [pc, #176]	; (22600 <close+0x134>)
   22550:	011b      	lsls	r3, r3, #4
   22552:	18d3      	adds	r3, r2, r3
   22554:	330a      	adds	r3, #10
   22556:	2200      	movs	r2, #0
   22558:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2255a:	1dfb      	adds	r3, r7, #7
   2255c:	781b      	ldrb	r3, [r3, #0]
   2255e:	b25b      	sxtb	r3, r3
   22560:	4a27      	ldr	r2, [pc, #156]	; (22600 <close+0x134>)
   22562:	011b      	lsls	r3, r3, #4
   22564:	18d3      	adds	r3, r2, r3
   22566:	3306      	adds	r3, #6
   22568:	2200      	movs	r2, #0
   2256a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2256c:	1dfb      	adds	r3, r7, #7
   2256e:	781b      	ldrb	r3, [r3, #0]
   22570:	b25b      	sxtb	r3, r3
   22572:	4a23      	ldr	r2, [pc, #140]	; (22600 <close+0x134>)
   22574:	011b      	lsls	r3, r3, #4
   22576:	18d3      	adds	r3, r2, r3
   22578:	330b      	adds	r3, #11
   2257a:	781b      	ldrb	r3, [r3, #0]
   2257c:	b2db      	uxtb	r3, r3
   2257e:	001a      	movs	r2, r3
   22580:	2301      	movs	r3, #1
   22582:	4013      	ands	r3, r2
   22584:	d003      	beq.n	2258e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   22586:	230e      	movs	r3, #14
   22588:	18fb      	adds	r3, r7, r3
   2258a:	224e      	movs	r2, #78	; 0x4e
   2258c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2258e:	230f      	movs	r3, #15
   22590:	18fc      	adds	r4, r7, r3
   22592:	2308      	movs	r3, #8
   22594:	18fa      	adds	r2, r7, r3
   22596:	230e      	movs	r3, #14
   22598:	18fb      	adds	r3, r7, r3
   2259a:	7819      	ldrb	r1, [r3, #0]
   2259c:	2300      	movs	r3, #0
   2259e:	9302      	str	r3, [sp, #8]
   225a0:	2300      	movs	r3, #0
   225a2:	9301      	str	r3, [sp, #4]
   225a4:	2300      	movs	r3, #0
   225a6:	9300      	str	r3, [sp, #0]
   225a8:	2304      	movs	r3, #4
   225aa:	2002      	movs	r0, #2
   225ac:	4d15      	ldr	r5, [pc, #84]	; (22604 <close+0x138>)
   225ae:	47a8      	blx	r5
   225b0:	0003      	movs	r3, r0
   225b2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   225b4:	230f      	movs	r3, #15
   225b6:	18fb      	adds	r3, r7, r3
   225b8:	781b      	ldrb	r3, [r3, #0]
   225ba:	b25b      	sxtb	r3, r3
   225bc:	2b00      	cmp	r3, #0
   225be:	d003      	beq.n	225c8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   225c0:	230f      	movs	r3, #15
   225c2:	18fb      	adds	r3, r7, r3
   225c4:	22f7      	movs	r2, #247	; 0xf7
   225c6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   225c8:	1dfb      	adds	r3, r7, #7
   225ca:	781b      	ldrb	r3, [r3, #0]
   225cc:	b25b      	sxtb	r3, r3
   225ce:	011a      	lsls	r2, r3, #4
   225d0:	4b0b      	ldr	r3, [pc, #44]	; (22600 <close+0x134>)
   225d2:	18d3      	adds	r3, r2, r3
   225d4:	2210      	movs	r2, #16
   225d6:	2100      	movs	r1, #0
   225d8:	0018      	movs	r0, r3
   225da:	4b0b      	ldr	r3, [pc, #44]	; (22608 <close+0x13c>)
   225dc:	4798      	blx	r3
	}
	return s8Ret;
   225de:	230f      	movs	r3, #15
   225e0:	18fb      	adds	r3, r7, r3
   225e2:	781b      	ldrb	r3, [r3, #0]
   225e4:	b25b      	sxtb	r3, r3
}
   225e6:	0018      	movs	r0, r3
   225e8:	46bd      	mov	sp, r7
   225ea:	b004      	add	sp, #16
   225ec:	bdb0      	pop	{r4, r5, r7, pc}
   225ee:	46c0      	nop			; (mov r8, r8)
   225f0:	000376ec 	.word	0x000376ec
   225f4:	0001a5e9 	.word	0x0001a5e9
   225f8:	0003772c 	.word	0x0003772c
   225fc:	0003770c 	.word	0x0003770c
   22600:	20005534 	.word	0x20005534
   22604:	0001d791 	.word	0x0001d791
   22608:	0001d531 	.word	0x0001d531

0002260c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   2260c:	b580      	push	{r7, lr}
   2260e:	b086      	sub	sp, #24
   22610:	af00      	add	r7, sp, #0
   22612:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   22614:	2300      	movs	r3, #0
   22616:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   22618:	2317      	movs	r3, #23
   2261a:	18fb      	adds	r3, r7, r3
   2261c:	2200      	movs	r2, #0
   2261e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   22620:	2316      	movs	r3, #22
   22622:	18fb      	adds	r3, r7, r3
   22624:	2200      	movs	r2, #0
   22626:	701a      	strb	r2, [r3, #0]
   22628:	e060      	b.n	226ec <nmi_inet_addr+0xe0>
	{
		j = 0;
   2262a:	2315      	movs	r3, #21
   2262c:	18fb      	adds	r3, r7, r3
   2262e:	2200      	movs	r2, #0
   22630:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   22632:	2314      	movs	r3, #20
   22634:	18fb      	adds	r3, r7, r3
   22636:	687a      	ldr	r2, [r7, #4]
   22638:	7812      	ldrb	r2, [r2, #0]
   2263a:	701a      	strb	r2, [r3, #0]
			++j;
   2263c:	2315      	movs	r3, #21
   2263e:	18fb      	adds	r3, r7, r3
   22640:	2215      	movs	r2, #21
   22642:	18ba      	adds	r2, r7, r2
   22644:	7812      	ldrb	r2, [r2, #0]
   22646:	3201      	adds	r2, #1
   22648:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2264a:	2315      	movs	r3, #21
   2264c:	18fb      	adds	r3, r7, r3
   2264e:	781b      	ldrb	r3, [r3, #0]
   22650:	2b04      	cmp	r3, #4
   22652:	d901      	bls.n	22658 <nmi_inet_addr+0x4c>
			{
				return 0;
   22654:	2300      	movs	r3, #0
   22656:	e057      	b.n	22708 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   22658:	2314      	movs	r3, #20
   2265a:	18fb      	adds	r3, r7, r3
   2265c:	781b      	ldrb	r3, [r3, #0]
   2265e:	2b2e      	cmp	r3, #46	; 0x2e
   22660:	d004      	beq.n	2266c <nmi_inet_addr+0x60>
   22662:	2314      	movs	r3, #20
   22664:	18fb      	adds	r3, r7, r3
   22666:	781b      	ldrb	r3, [r3, #0]
   22668:	2b00      	cmp	r3, #0
   2266a:	d10d      	bne.n	22688 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2266c:	2316      	movs	r3, #22
   2266e:	18fb      	adds	r3, r7, r3
   22670:	781b      	ldrb	r3, [r3, #0]
   22672:	220c      	movs	r2, #12
   22674:	18ba      	adds	r2, r7, r2
   22676:	2117      	movs	r1, #23
   22678:	1879      	adds	r1, r7, r1
   2267a:	7809      	ldrb	r1, [r1, #0]
   2267c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2267e:	2317      	movs	r3, #23
   22680:	18fb      	adds	r3, r7, r3
   22682:	2200      	movs	r2, #0
   22684:	701a      	strb	r2, [r3, #0]
   22686:	e01d      	b.n	226c4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   22688:	2314      	movs	r3, #20
   2268a:	18fb      	adds	r3, r7, r3
   2268c:	781b      	ldrb	r3, [r3, #0]
   2268e:	2b2f      	cmp	r3, #47	; 0x2f
   22690:	d916      	bls.n	226c0 <nmi_inet_addr+0xb4>
   22692:	2314      	movs	r3, #20
   22694:	18fb      	adds	r3, r7, r3
   22696:	781b      	ldrb	r3, [r3, #0]
   22698:	2b39      	cmp	r3, #57	; 0x39
   2269a:	d811      	bhi.n	226c0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2269c:	2317      	movs	r3, #23
   2269e:	18fb      	adds	r3, r7, r3
   226a0:	781b      	ldrb	r3, [r3, #0]
   226a2:	1c1a      	adds	r2, r3, #0
   226a4:	0092      	lsls	r2, r2, #2
   226a6:	18d3      	adds	r3, r2, r3
   226a8:	18db      	adds	r3, r3, r3
   226aa:	b2da      	uxtb	r2, r3
   226ac:	2314      	movs	r3, #20
   226ae:	18fb      	adds	r3, r7, r3
   226b0:	781b      	ldrb	r3, [r3, #0]
   226b2:	18d3      	adds	r3, r2, r3
   226b4:	b2da      	uxtb	r2, r3
   226b6:	2317      	movs	r3, #23
   226b8:	18fb      	adds	r3, r7, r3
   226ba:	3a30      	subs	r2, #48	; 0x30
   226bc:	701a      	strb	r2, [r3, #0]
   226be:	e001      	b.n	226c4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   226c0:	2300      	movs	r3, #0
   226c2:	e021      	b.n	22708 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   226c4:	687b      	ldr	r3, [r7, #4]
   226c6:	3301      	adds	r3, #1
   226c8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   226ca:	2314      	movs	r3, #20
   226cc:	18fb      	adds	r3, r7, r3
   226ce:	781b      	ldrb	r3, [r3, #0]
   226d0:	2b2e      	cmp	r3, #46	; 0x2e
   226d2:	d004      	beq.n	226de <nmi_inet_addr+0xd2>
   226d4:	2314      	movs	r3, #20
   226d6:	18fb      	adds	r3, r7, r3
   226d8:	781b      	ldrb	r3, [r3, #0]
   226da:	2b00      	cmp	r3, #0
   226dc:	d1a9      	bne.n	22632 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   226de:	2316      	movs	r3, #22
   226e0:	18fb      	adds	r3, r7, r3
   226e2:	2216      	movs	r2, #22
   226e4:	18ba      	adds	r2, r7, r2
   226e6:	7812      	ldrb	r2, [r2, #0]
   226e8:	3201      	adds	r2, #1
   226ea:	701a      	strb	r2, [r3, #0]
   226ec:	2316      	movs	r3, #22
   226ee:	18fb      	adds	r3, r7, r3
   226f0:	781b      	ldrb	r3, [r3, #0]
   226f2:	2b03      	cmp	r3, #3
   226f4:	d999      	bls.n	2262a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   226f6:	230c      	movs	r3, #12
   226f8:	18f9      	adds	r1, r7, r3
   226fa:	2310      	movs	r3, #16
   226fc:	18fb      	adds	r3, r7, r3
   226fe:	2204      	movs	r2, #4
   22700:	0018      	movs	r0, r3
   22702:	4b03      	ldr	r3, [pc, #12]	; (22710 <nmi_inet_addr+0x104>)
   22704:	4798      	blx	r3
	return u32IP;
   22706:	693b      	ldr	r3, [r7, #16]
}
   22708:	0018      	movs	r0, r3
   2270a:	46bd      	mov	sp, r7
   2270c:	b006      	add	sp, #24
   2270e:	bd80      	pop	{r7, pc}
   22710:	0001d4f5 	.word	0x0001d4f5

00022714 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   22714:	b5b0      	push	{r4, r5, r7, lr}
   22716:	b088      	sub	sp, #32
   22718:	af04      	add	r7, sp, #16
   2271a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2271c:	230f      	movs	r3, #15
   2271e:	18fb      	adds	r3, r7, r3
   22720:	22fa      	movs	r2, #250	; 0xfa
   22722:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   22724:	687b      	ldr	r3, [r7, #4]
   22726:	0018      	movs	r0, r3
   22728:	4b14      	ldr	r3, [pc, #80]	; (2277c <gethostbyname+0x68>)
   2272a:	4798      	blx	r3
   2272c:	0003      	movs	r3, r0
   2272e:	001a      	movs	r2, r3
   22730:	230e      	movs	r3, #14
   22732:	18fb      	adds	r3, r7, r3
   22734:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   22736:	230e      	movs	r3, #14
   22738:	18fb      	adds	r3, r7, r3
   2273a:	781b      	ldrb	r3, [r3, #0]
   2273c:	2b40      	cmp	r3, #64	; 0x40
   2273e:	d815      	bhi.n	2276c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   22740:	230e      	movs	r3, #14
   22742:	18fb      	adds	r3, r7, r3
   22744:	781b      	ldrb	r3, [r3, #0]
   22746:	b29b      	uxth	r3, r3
   22748:	3301      	adds	r3, #1
   2274a:	b299      	uxth	r1, r3
   2274c:	230f      	movs	r3, #15
   2274e:	18fc      	adds	r4, r7, r3
   22750:	687a      	ldr	r2, [r7, #4]
   22752:	2300      	movs	r3, #0
   22754:	9302      	str	r3, [sp, #8]
   22756:	2300      	movs	r3, #0
   22758:	9301      	str	r3, [sp, #4]
   2275a:	2300      	movs	r3, #0
   2275c:	9300      	str	r3, [sp, #0]
   2275e:	000b      	movs	r3, r1
   22760:	214a      	movs	r1, #74	; 0x4a
   22762:	2002      	movs	r0, #2
   22764:	4d06      	ldr	r5, [pc, #24]	; (22780 <gethostbyname+0x6c>)
   22766:	47a8      	blx	r5
   22768:	0003      	movs	r3, r0
   2276a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   2276c:	230f      	movs	r3, #15
   2276e:	18fb      	adds	r3, r7, r3
   22770:	781b      	ldrb	r3, [r3, #0]
   22772:	b25b      	sxtb	r3, r3
}
   22774:	0018      	movs	r0, r3
   22776:	46bd      	mov	sp, r7
   22778:	b004      	add	sp, #16
   2277a:	bdb0      	pop	{r4, r5, r7, pc}
   2277c:	0001d56f 	.word	0x0001d56f
   22780:	0001d791 	.word	0x0001d791

00022784 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   22784:	b580      	push	{r7, lr}
   22786:	b082      	sub	sp, #8
   22788:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2278a:	003b      	movs	r3, r7
   2278c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   2278e:	687b      	ldr	r3, [r7, #4]
   22790:	22b9      	movs	r2, #185	; 0xb9
   22792:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   22794:	4b13      	ldr	r3, [pc, #76]	; (227e4 <spi_flash_enter_low_power_mode+0x60>)
   22796:	2100      	movs	r1, #0
   22798:	0018      	movs	r0, r3
   2279a:	4b13      	ldr	r3, [pc, #76]	; (227e8 <spi_flash_enter_low_power_mode+0x64>)
   2279c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2279e:	687b      	ldr	r3, [r7, #4]
   227a0:	781b      	ldrb	r3, [r3, #0]
   227a2:	001a      	movs	r2, r3
   227a4:	4b11      	ldr	r3, [pc, #68]	; (227ec <spi_flash_enter_low_power_mode+0x68>)
   227a6:	0011      	movs	r1, r2
   227a8:	0018      	movs	r0, r3
   227aa:	4b0f      	ldr	r3, [pc, #60]	; (227e8 <spi_flash_enter_low_power_mode+0x64>)
   227ac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   227ae:	4b10      	ldr	r3, [pc, #64]	; (227f0 <spi_flash_enter_low_power_mode+0x6c>)
   227b0:	2101      	movs	r1, #1
   227b2:	0018      	movs	r0, r3
   227b4:	4b0c      	ldr	r3, [pc, #48]	; (227e8 <spi_flash_enter_low_power_mode+0x64>)
   227b6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   227b8:	4b0e      	ldr	r3, [pc, #56]	; (227f4 <spi_flash_enter_low_power_mode+0x70>)
   227ba:	2100      	movs	r1, #0
   227bc:	0018      	movs	r0, r3
   227be:	4b0a      	ldr	r3, [pc, #40]	; (227e8 <spi_flash_enter_low_power_mode+0x64>)
   227c0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   227c2:	4b0d      	ldr	r3, [pc, #52]	; (227f8 <spi_flash_enter_low_power_mode+0x74>)
   227c4:	2181      	movs	r1, #129	; 0x81
   227c6:	0018      	movs	r0, r3
   227c8:	4b07      	ldr	r3, [pc, #28]	; (227e8 <spi_flash_enter_low_power_mode+0x64>)
   227ca:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   227cc:	46c0      	nop			; (mov r8, r8)
   227ce:	4b0b      	ldr	r3, [pc, #44]	; (227fc <spi_flash_enter_low_power_mode+0x78>)
   227d0:	0018      	movs	r0, r3
   227d2:	4b0b      	ldr	r3, [pc, #44]	; (22800 <spi_flash_enter_low_power_mode+0x7c>)
   227d4:	4798      	blx	r3
   227d6:	0003      	movs	r3, r0
   227d8:	2b01      	cmp	r3, #1
   227da:	d1f8      	bne.n	227ce <spi_flash_enter_low_power_mode+0x4a>
}
   227dc:	46c0      	nop			; (mov r8, r8)
   227de:	46bd      	mov	sp, r7
   227e0:	b002      	add	sp, #8
   227e2:	bd80      	pop	{r7, pc}
   227e4:	00010208 	.word	0x00010208
   227e8:	0001f5e5 	.word	0x0001f5e5
   227ec:	0001020c 	.word	0x0001020c
   227f0:	00010214 	.word	0x00010214
   227f4:	0001021c 	.word	0x0001021c
   227f8:	00010204 	.word	0x00010204
   227fc:	00010218 	.word	0x00010218
   22800:	0001f5a1 	.word	0x0001f5a1

00022804 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   22804:	b580      	push	{r7, lr}
   22806:	b082      	sub	sp, #8
   22808:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2280a:	003b      	movs	r3, r7
   2280c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   2280e:	687b      	ldr	r3, [r7, #4]
   22810:	22ab      	movs	r2, #171	; 0xab
   22812:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   22814:	4b13      	ldr	r3, [pc, #76]	; (22864 <spi_flash_leave_low_power_mode+0x60>)
   22816:	2100      	movs	r1, #0
   22818:	0018      	movs	r0, r3
   2281a:	4b13      	ldr	r3, [pc, #76]	; (22868 <spi_flash_leave_low_power_mode+0x64>)
   2281c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2281e:	687b      	ldr	r3, [r7, #4]
   22820:	781b      	ldrb	r3, [r3, #0]
   22822:	001a      	movs	r2, r3
   22824:	4b11      	ldr	r3, [pc, #68]	; (2286c <spi_flash_leave_low_power_mode+0x68>)
   22826:	0011      	movs	r1, r2
   22828:	0018      	movs	r0, r3
   2282a:	4b0f      	ldr	r3, [pc, #60]	; (22868 <spi_flash_leave_low_power_mode+0x64>)
   2282c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2282e:	4b10      	ldr	r3, [pc, #64]	; (22870 <spi_flash_leave_low_power_mode+0x6c>)
   22830:	2101      	movs	r1, #1
   22832:	0018      	movs	r0, r3
   22834:	4b0c      	ldr	r3, [pc, #48]	; (22868 <spi_flash_leave_low_power_mode+0x64>)
   22836:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   22838:	4b0e      	ldr	r3, [pc, #56]	; (22874 <spi_flash_leave_low_power_mode+0x70>)
   2283a:	2100      	movs	r1, #0
   2283c:	0018      	movs	r0, r3
   2283e:	4b0a      	ldr	r3, [pc, #40]	; (22868 <spi_flash_leave_low_power_mode+0x64>)
   22840:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   22842:	4b0d      	ldr	r3, [pc, #52]	; (22878 <spi_flash_leave_low_power_mode+0x74>)
   22844:	2181      	movs	r1, #129	; 0x81
   22846:	0018      	movs	r0, r3
   22848:	4b07      	ldr	r3, [pc, #28]	; (22868 <spi_flash_leave_low_power_mode+0x64>)
   2284a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2284c:	46c0      	nop			; (mov r8, r8)
   2284e:	4b0b      	ldr	r3, [pc, #44]	; (2287c <spi_flash_leave_low_power_mode+0x78>)
   22850:	0018      	movs	r0, r3
   22852:	4b0b      	ldr	r3, [pc, #44]	; (22880 <spi_flash_leave_low_power_mode+0x7c>)
   22854:	4798      	blx	r3
   22856:	0003      	movs	r3, r0
   22858:	2b01      	cmp	r3, #1
   2285a:	d1f8      	bne.n	2284e <spi_flash_leave_low_power_mode+0x4a>
}
   2285c:	46c0      	nop			; (mov r8, r8)
   2285e:	46bd      	mov	sp, r7
   22860:	b002      	add	sp, #8
   22862:	bd80      	pop	{r7, pc}
   22864:	00010208 	.word	0x00010208
   22868:	0001f5e5 	.word	0x0001f5e5
   2286c:	0001020c 	.word	0x0001020c
   22870:	00010214 	.word	0x00010214
   22874:	0001021c 	.word	0x0001021c
   22878:	00010204 	.word	0x00010204
   2287c:	00010218 	.word	0x00010218
   22880:	0001f5a1 	.word	0x0001f5a1

00022884 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   22884:	b590      	push	{r4, r7, lr}
   22886:	b085      	sub	sp, #20
   22888:	af00      	add	r7, sp, #0
   2288a:	0002      	movs	r2, r0
   2288c:	1dfb      	adds	r3, r7, #7
   2288e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   22890:	230f      	movs	r3, #15
   22892:	18fb      	adds	r3, r7, r3
   22894:	2200      	movs	r2, #0
   22896:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   22898:	4b24      	ldr	r3, [pc, #144]	; (2292c <spi_flash_enable+0xa8>)
   2289a:	4798      	blx	r3
   2289c:	0003      	movs	r3, r0
   2289e:	051b      	lsls	r3, r3, #20
   228a0:	0d1b      	lsrs	r3, r3, #20
   228a2:	4a23      	ldr	r2, [pc, #140]	; (22930 <spi_flash_enable+0xac>)
   228a4:	4293      	cmp	r3, r2
   228a6:	d938      	bls.n	2291a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   228a8:	230f      	movs	r3, #15
   228aa:	18fc      	adds	r4, r7, r3
   228ac:	2308      	movs	r3, #8
   228ae:	18fb      	adds	r3, r7, r3
   228b0:	4a20      	ldr	r2, [pc, #128]	; (22934 <spi_flash_enable+0xb0>)
   228b2:	0019      	movs	r1, r3
   228b4:	0010      	movs	r0, r2
   228b6:	4b20      	ldr	r3, [pc, #128]	; (22938 <spi_flash_enable+0xb4>)
   228b8:	4798      	blx	r3
   228ba:	0003      	movs	r3, r0
   228bc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   228be:	230f      	movs	r3, #15
   228c0:	18fb      	adds	r3, r7, r3
   228c2:	781b      	ldrb	r3, [r3, #0]
   228c4:	b25b      	sxtb	r3, r3
   228c6:	2b00      	cmp	r3, #0
   228c8:	d126      	bne.n	22918 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   228ca:	68bb      	ldr	r3, [r7, #8]
   228cc:	4a1b      	ldr	r2, [pc, #108]	; (2293c <spi_flash_enable+0xb8>)
   228ce:	4013      	ands	r3, r2
   228d0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   228d2:	68bb      	ldr	r3, [r7, #8]
   228d4:	4a1a      	ldr	r2, [pc, #104]	; (22940 <spi_flash_enable+0xbc>)
   228d6:	4313      	orrs	r3, r2
   228d8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   228da:	68bb      	ldr	r3, [r7, #8]
   228dc:	4a15      	ldr	r2, [pc, #84]	; (22934 <spi_flash_enable+0xb0>)
   228de:	0019      	movs	r1, r3
   228e0:	0010      	movs	r0, r2
   228e2:	4b18      	ldr	r3, [pc, #96]	; (22944 <spi_flash_enable+0xc0>)
   228e4:	4798      	blx	r3
		if(enable) {
   228e6:	1dfb      	adds	r3, r7, #7
   228e8:	781b      	ldrb	r3, [r3, #0]
   228ea:	2b00      	cmp	r3, #0
   228ec:	d002      	beq.n	228f4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   228ee:	4b16      	ldr	r3, [pc, #88]	; (22948 <spi_flash_enable+0xc4>)
   228f0:	4798      	blx	r3
   228f2:	e001      	b.n	228f8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   228f4:	4b15      	ldr	r3, [pc, #84]	; (2294c <spi_flash_enable+0xc8>)
   228f6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   228f8:	68bb      	ldr	r3, [r7, #8]
   228fa:	4a10      	ldr	r2, [pc, #64]	; (2293c <spi_flash_enable+0xb8>)
   228fc:	4013      	ands	r3, r2
   228fe:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   22900:	68bb      	ldr	r3, [r7, #8]
   22902:	2280      	movs	r2, #128	; 0x80
   22904:	0252      	lsls	r2, r2, #9
   22906:	4313      	orrs	r3, r2
   22908:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2290a:	68bb      	ldr	r3, [r7, #8]
   2290c:	4a09      	ldr	r2, [pc, #36]	; (22934 <spi_flash_enable+0xb0>)
   2290e:	0019      	movs	r1, r3
   22910:	0010      	movs	r0, r2
   22912:	4b0c      	ldr	r3, [pc, #48]	; (22944 <spi_flash_enable+0xc0>)
   22914:	4798      	blx	r3
   22916:	e000      	b.n	2291a <spi_flash_enable+0x96>
			goto ERR1;
   22918:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   2291a:	230f      	movs	r3, #15
   2291c:	18fb      	adds	r3, r7, r3
   2291e:	781b      	ldrb	r3, [r3, #0]
   22920:	b25b      	sxtb	r3, r3
}
   22922:	0018      	movs	r0, r3
   22924:	46bd      	mov	sp, r7
   22926:	b005      	add	sp, #20
   22928:	bd90      	pop	{r4, r7, pc}
   2292a:	46c0      	nop			; (mov r8, r8)
   2292c:	0001eec1 	.word	0x0001eec1
   22930:	0000039f 	.word	0x0000039f
   22934:	00001410 	.word	0x00001410
   22938:	0001f5c1 	.word	0x0001f5c1
   2293c:	f8888fff 	.word	0xf8888fff
   22940:	01111000 	.word	0x01111000
   22944:	0001f5e5 	.word	0x0001f5e5
   22948:	00022805 	.word	0x00022805
   2294c:	00022785 	.word	0x00022785

00022950 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   22950:	b580      	push	{r7, lr}
   22952:	b084      	sub	sp, #16
   22954:	af00      	add	r7, sp, #0
   22956:	0002      	movs	r2, r0
   22958:	1dfb      	adds	r3, r7, #7
   2295a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   2295c:	1dfb      	adds	r3, r7, #7
   2295e:	781b      	ldrb	r3, [r3, #0]
   22960:	2b00      	cmp	r3, #0
   22962:	d108      	bne.n	22976 <mem_test_unit_ready+0x26>
   22964:	1dfb      	adds	r3, r7, #7
   22966:	781a      	ldrb	r2, [r3, #0]
   22968:	4b08      	ldr	r3, [pc, #32]	; (2298c <mem_test_unit_ready+0x3c>)
   2296a:	0152      	lsls	r2, r2, #5
   2296c:	58d3      	ldr	r3, [r2, r3]
   2296e:	4798      	blx	r3
   22970:	0003      	movs	r3, r0
   22972:	001a      	movs	r2, r3
   22974:	e000      	b.n	22978 <mem_test_unit_ready+0x28>
   22976:	2201      	movs	r2, #1
  status =
   22978:	230f      	movs	r3, #15
   2297a:	18fb      	adds	r3, r7, r3
   2297c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2297e:	230f      	movs	r3, #15
   22980:	18fb      	adds	r3, r7, r3
   22982:	781b      	ldrb	r3, [r3, #0]
}
   22984:	0018      	movs	r0, r3
   22986:	46bd      	mov	sp, r7
   22988:	b004      	add	sp, #16
   2298a:	bd80      	pop	{r7, pc}
   2298c:	000377b8 	.word	0x000377b8

00022990 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   22990:	b580      	push	{r7, lr}
   22992:	b084      	sub	sp, #16
   22994:	af00      	add	r7, sp, #0
   22996:	0002      	movs	r2, r0
   22998:	6039      	str	r1, [r7, #0]
   2299a:	1dfb      	adds	r3, r7, #7
   2299c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   2299e:	1dfb      	adds	r3, r7, #7
   229a0:	781b      	ldrb	r3, [r3, #0]
   229a2:	2b00      	cmp	r3, #0
   229a4:	d10c      	bne.n	229c0 <mem_read_capacity+0x30>
   229a6:	1dfb      	adds	r3, r7, #7
   229a8:	781b      	ldrb	r3, [r3, #0]
   229aa:	4a0b      	ldr	r2, [pc, #44]	; (229d8 <mem_read_capacity+0x48>)
   229ac:	015b      	lsls	r3, r3, #5
   229ae:	18d3      	adds	r3, r2, r3
   229b0:	3304      	adds	r3, #4
   229b2:	681b      	ldr	r3, [r3, #0]
   229b4:	683a      	ldr	r2, [r7, #0]
   229b6:	0010      	movs	r0, r2
   229b8:	4798      	blx	r3
   229ba:	0003      	movs	r3, r0
   229bc:	001a      	movs	r2, r3
   229be:	e000      	b.n	229c2 <mem_read_capacity+0x32>
   229c0:	2201      	movs	r2, #1
  status =
   229c2:	230f      	movs	r3, #15
   229c4:	18fb      	adds	r3, r7, r3
   229c6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   229c8:	230f      	movs	r3, #15
   229ca:	18fb      	adds	r3, r7, r3
   229cc:	781b      	ldrb	r3, [r3, #0]
}
   229ce:	0018      	movs	r0, r3
   229d0:	46bd      	mov	sp, r7
   229d2:	b004      	add	sp, #16
   229d4:	bd80      	pop	{r7, pc}
   229d6:	46c0      	nop			; (mov r8, r8)
   229d8:	000377b8 	.word	0x000377b8

000229dc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   229dc:	b580      	push	{r7, lr}
   229de:	b084      	sub	sp, #16
   229e0:	af00      	add	r7, sp, #0
   229e2:	0002      	movs	r2, r0
   229e4:	1dfb      	adds	r3, r7, #7
   229e6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   229e8:	1dfb      	adds	r3, r7, #7
   229ea:	781b      	ldrb	r3, [r3, #0]
   229ec:	425a      	negs	r2, r3
   229ee:	4153      	adcs	r3, r2
   229f0:	b2da      	uxtb	r2, r3
  sector_size =
   229f2:	230f      	movs	r3, #15
   229f4:	18fb      	adds	r3, r7, r3
   229f6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   229f8:	230f      	movs	r3, #15
   229fa:	18fb      	adds	r3, r7, r3
   229fc:	781b      	ldrb	r3, [r3, #0]
}
   229fe:	0018      	movs	r0, r3
   22a00:	46bd      	mov	sp, r7
   22a02:	b004      	add	sp, #16
   22a04:	bd80      	pop	{r7, pc}
	...

00022a08 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   22a08:	b580      	push	{r7, lr}
   22a0a:	b084      	sub	sp, #16
   22a0c:	af00      	add	r7, sp, #0
   22a0e:	0002      	movs	r2, r0
   22a10:	1dfb      	adds	r3, r7, #7
   22a12:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   22a14:	1dfb      	adds	r3, r7, #7
   22a16:	781b      	ldrb	r3, [r3, #0]
   22a18:	2b00      	cmp	r3, #0
   22a1a:	d109      	bne.n	22a30 <mem_wr_protect+0x28>
   22a1c:	1dfb      	adds	r3, r7, #7
   22a1e:	781b      	ldrb	r3, [r3, #0]
   22a20:	4a0a      	ldr	r2, [pc, #40]	; (22a4c <mem_wr_protect+0x44>)
   22a22:	015b      	lsls	r3, r3, #5
   22a24:	18d3      	adds	r3, r2, r3
   22a26:	330c      	adds	r3, #12
   22a28:	681b      	ldr	r3, [r3, #0]
   22a2a:	4798      	blx	r3
   22a2c:	1e03      	subs	r3, r0, #0
   22a2e:	d001      	beq.n	22a34 <mem_wr_protect+0x2c>
   22a30:	2201      	movs	r2, #1
   22a32:	e000      	b.n	22a36 <mem_wr_protect+0x2e>
   22a34:	2200      	movs	r2, #0
  wr_protect =
   22a36:	230f      	movs	r3, #15
   22a38:	18fb      	adds	r3, r7, r3
   22a3a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   22a3c:	230f      	movs	r3, #15
   22a3e:	18fb      	adds	r3, r7, r3
   22a40:	781b      	ldrb	r3, [r3, #0]
}
   22a42:	0018      	movs	r0, r3
   22a44:	46bd      	mov	sp, r7
   22a46:	b004      	add	sp, #16
   22a48:	bd80      	pop	{r7, pc}
   22a4a:	46c0      	nop			; (mov r8, r8)
   22a4c:	000377b8 	.word	0x000377b8

00022a50 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   22a50:	b580      	push	{r7, lr}
   22a52:	b086      	sub	sp, #24
   22a54:	af00      	add	r7, sp, #0
   22a56:	60b9      	str	r1, [r7, #8]
   22a58:	607a      	str	r2, [r7, #4]
   22a5a:	230f      	movs	r3, #15
   22a5c:	18fb      	adds	r3, r7, r3
   22a5e:	1c02      	adds	r2, r0, #0
   22a60:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   22a62:	230f      	movs	r3, #15
   22a64:	18fb      	adds	r3, r7, r3
   22a66:	781b      	ldrb	r3, [r3, #0]
   22a68:	2b00      	cmp	r3, #0
   22a6a:	d10e      	bne.n	22a8a <memory_2_ram+0x3a>
   22a6c:	230f      	movs	r3, #15
   22a6e:	18fb      	adds	r3, r7, r3
   22a70:	781b      	ldrb	r3, [r3, #0]
   22a72:	4a0b      	ldr	r2, [pc, #44]	; (22aa0 <memory_2_ram+0x50>)
   22a74:	015b      	lsls	r3, r3, #5
   22a76:	18d3      	adds	r3, r2, r3
   22a78:	3314      	adds	r3, #20
   22a7a:	681b      	ldr	r3, [r3, #0]
   22a7c:	6879      	ldr	r1, [r7, #4]
   22a7e:	68ba      	ldr	r2, [r7, #8]
   22a80:	0010      	movs	r0, r2
   22a82:	4798      	blx	r3
   22a84:	0003      	movs	r3, r0
   22a86:	001a      	movs	r2, r3
   22a88:	e000      	b.n	22a8c <memory_2_ram+0x3c>
   22a8a:	2201      	movs	r2, #1
  status =
   22a8c:	2317      	movs	r3, #23
   22a8e:	18fb      	adds	r3, r7, r3
   22a90:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   22a92:	2317      	movs	r3, #23
   22a94:	18fb      	adds	r3, r7, r3
   22a96:	781b      	ldrb	r3, [r3, #0]
}
   22a98:	0018      	movs	r0, r3
   22a9a:	46bd      	mov	sp, r7
   22a9c:	b006      	add	sp, #24
   22a9e:	bd80      	pop	{r7, pc}
   22aa0:	000377b8 	.word	0x000377b8

00022aa4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   22aa4:	b580      	push	{r7, lr}
   22aa6:	b086      	sub	sp, #24
   22aa8:	af00      	add	r7, sp, #0
   22aaa:	60b9      	str	r1, [r7, #8]
   22aac:	607a      	str	r2, [r7, #4]
   22aae:	230f      	movs	r3, #15
   22ab0:	18fb      	adds	r3, r7, r3
   22ab2:	1c02      	adds	r2, r0, #0
   22ab4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   22ab6:	230f      	movs	r3, #15
   22ab8:	18fb      	adds	r3, r7, r3
   22aba:	781b      	ldrb	r3, [r3, #0]
   22abc:	2b00      	cmp	r3, #0
   22abe:	d10e      	bne.n	22ade <ram_2_memory+0x3a>
   22ac0:	230f      	movs	r3, #15
   22ac2:	18fb      	adds	r3, r7, r3
   22ac4:	781b      	ldrb	r3, [r3, #0]
   22ac6:	4a0b      	ldr	r2, [pc, #44]	; (22af4 <ram_2_memory+0x50>)
   22ac8:	015b      	lsls	r3, r3, #5
   22aca:	18d3      	adds	r3, r2, r3
   22acc:	3318      	adds	r3, #24
   22ace:	681b      	ldr	r3, [r3, #0]
   22ad0:	6879      	ldr	r1, [r7, #4]
   22ad2:	68ba      	ldr	r2, [r7, #8]
   22ad4:	0010      	movs	r0, r2
   22ad6:	4798      	blx	r3
   22ad8:	0003      	movs	r3, r0
   22ada:	001a      	movs	r2, r3
   22adc:	e000      	b.n	22ae0 <ram_2_memory+0x3c>
   22ade:	2201      	movs	r2, #1
  status =
   22ae0:	2317      	movs	r3, #23
   22ae2:	18fb      	adds	r3, r7, r3
   22ae4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   22ae6:	2317      	movs	r3, #23
   22ae8:	18fb      	adds	r3, r7, r3
   22aea:	781b      	ldrb	r3, [r3, #0]
}
   22aec:	0018      	movs	r0, r3
   22aee:	46bd      	mov	sp, r7
   22af0:	b006      	add	sp, #24
   22af2:	bd80      	pop	{r7, pc}
   22af4:	000377b8 	.word	0x000377b8

00022af8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   22af8:	b580      	push	{r7, lr}
   22afa:	b082      	sub	sp, #8
   22afc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   22afe:	4b10      	ldr	r3, [pc, #64]	; (22b40 <cpu_irq_enter_critical+0x48>)
   22b00:	681b      	ldr	r3, [r3, #0]
   22b02:	2b00      	cmp	r3, #0
   22b04:	d112      	bne.n	22b2c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   22b06:	f3ef 8310 	mrs	r3, PRIMASK
   22b0a:	607b      	str	r3, [r7, #4]
  return(result);
   22b0c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   22b0e:	2b00      	cmp	r3, #0
   22b10:	d109      	bne.n	22b26 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   22b12:	b672      	cpsid	i
   22b14:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   22b18:	4b0a      	ldr	r3, [pc, #40]	; (22b44 <cpu_irq_enter_critical+0x4c>)
   22b1a:	2200      	movs	r2, #0
   22b1c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   22b1e:	4b0a      	ldr	r3, [pc, #40]	; (22b48 <cpu_irq_enter_critical+0x50>)
   22b20:	2201      	movs	r2, #1
   22b22:	701a      	strb	r2, [r3, #0]
   22b24:	e002      	b.n	22b2c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   22b26:	4b08      	ldr	r3, [pc, #32]	; (22b48 <cpu_irq_enter_critical+0x50>)
   22b28:	2200      	movs	r2, #0
   22b2a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   22b2c:	4b04      	ldr	r3, [pc, #16]	; (22b40 <cpu_irq_enter_critical+0x48>)
   22b2e:	681b      	ldr	r3, [r3, #0]
   22b30:	1c5a      	adds	r2, r3, #1
   22b32:	4b03      	ldr	r3, [pc, #12]	; (22b40 <cpu_irq_enter_critical+0x48>)
   22b34:	601a      	str	r2, [r3, #0]
}
   22b36:	46c0      	nop			; (mov r8, r8)
   22b38:	46bd      	mov	sp, r7
   22b3a:	b002      	add	sp, #8
   22b3c:	bd80      	pop	{r7, pc}
   22b3e:	46c0      	nop			; (mov r8, r8)
   22b40:	20003d34 	.word	0x20003d34
   22b44:	200000ca 	.word	0x200000ca
   22b48:	20003d38 	.word	0x20003d38

00022b4c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   22b4c:	b580      	push	{r7, lr}
   22b4e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   22b50:	4b0b      	ldr	r3, [pc, #44]	; (22b80 <cpu_irq_leave_critical+0x34>)
   22b52:	681b      	ldr	r3, [r3, #0]
   22b54:	1e5a      	subs	r2, r3, #1
   22b56:	4b0a      	ldr	r3, [pc, #40]	; (22b80 <cpu_irq_leave_critical+0x34>)
   22b58:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   22b5a:	4b09      	ldr	r3, [pc, #36]	; (22b80 <cpu_irq_leave_critical+0x34>)
   22b5c:	681b      	ldr	r3, [r3, #0]
   22b5e:	2b00      	cmp	r3, #0
   22b60:	d10a      	bne.n	22b78 <cpu_irq_leave_critical+0x2c>
   22b62:	4b08      	ldr	r3, [pc, #32]	; (22b84 <cpu_irq_leave_critical+0x38>)
   22b64:	781b      	ldrb	r3, [r3, #0]
   22b66:	b2db      	uxtb	r3, r3
   22b68:	2b00      	cmp	r3, #0
   22b6a:	d005      	beq.n	22b78 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   22b6c:	4b06      	ldr	r3, [pc, #24]	; (22b88 <cpu_irq_leave_critical+0x3c>)
   22b6e:	2201      	movs	r2, #1
   22b70:	701a      	strb	r2, [r3, #0]
   22b72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   22b76:	b662      	cpsie	i
	}
}
   22b78:	46c0      	nop			; (mov r8, r8)
   22b7a:	46bd      	mov	sp, r7
   22b7c:	bd80      	pop	{r7, pc}
   22b7e:	46c0      	nop			; (mov r8, r8)
   22b80:	20003d34 	.word	0x20003d34
   22b84:	20003d38 	.word	0x20003d38
   22b88:	200000ca 	.word	0x200000ca

00022b8c <system_pinmux_get_group_from_gpio_pin>:
{
   22b8c:	b580      	push	{r7, lr}
   22b8e:	b084      	sub	sp, #16
   22b90:	af00      	add	r7, sp, #0
   22b92:	0002      	movs	r2, r0
   22b94:	1dfb      	adds	r3, r7, #7
   22b96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22b98:	230f      	movs	r3, #15
   22b9a:	18fb      	adds	r3, r7, r3
   22b9c:	1dfa      	adds	r2, r7, #7
   22b9e:	7812      	ldrb	r2, [r2, #0]
   22ba0:	09d2      	lsrs	r2, r2, #7
   22ba2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   22ba4:	230e      	movs	r3, #14
   22ba6:	18fb      	adds	r3, r7, r3
   22ba8:	1dfa      	adds	r2, r7, #7
   22baa:	7812      	ldrb	r2, [r2, #0]
   22bac:	0952      	lsrs	r2, r2, #5
   22bae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   22bb0:	4b0d      	ldr	r3, [pc, #52]	; (22be8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   22bb2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   22bb4:	230f      	movs	r3, #15
   22bb6:	18fb      	adds	r3, r7, r3
   22bb8:	781b      	ldrb	r3, [r3, #0]
   22bba:	2b00      	cmp	r3, #0
   22bbc:	d10f      	bne.n	22bde <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   22bbe:	230f      	movs	r3, #15
   22bc0:	18fb      	adds	r3, r7, r3
   22bc2:	781b      	ldrb	r3, [r3, #0]
   22bc4:	009b      	lsls	r3, r3, #2
   22bc6:	2210      	movs	r2, #16
   22bc8:	4694      	mov	ip, r2
   22bca:	44bc      	add	ip, r7
   22bcc:	4463      	add	r3, ip
   22bce:	3b08      	subs	r3, #8
   22bd0:	681a      	ldr	r2, [r3, #0]
   22bd2:	230e      	movs	r3, #14
   22bd4:	18fb      	adds	r3, r7, r3
   22bd6:	781b      	ldrb	r3, [r3, #0]
   22bd8:	01db      	lsls	r3, r3, #7
   22bda:	18d3      	adds	r3, r2, r3
   22bdc:	e000      	b.n	22be0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   22bde:	2300      	movs	r3, #0
}
   22be0:	0018      	movs	r0, r3
   22be2:	46bd      	mov	sp, r7
   22be4:	b004      	add	sp, #16
   22be6:	bd80      	pop	{r7, pc}
   22be8:	41004400 	.word	0x41004400

00022bec <port_get_group_from_gpio_pin>:
{
   22bec:	b580      	push	{r7, lr}
   22bee:	b082      	sub	sp, #8
   22bf0:	af00      	add	r7, sp, #0
   22bf2:	0002      	movs	r2, r0
   22bf4:	1dfb      	adds	r3, r7, #7
   22bf6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   22bf8:	1dfb      	adds	r3, r7, #7
   22bfa:	781b      	ldrb	r3, [r3, #0]
   22bfc:	0018      	movs	r0, r3
   22bfe:	4b03      	ldr	r3, [pc, #12]	; (22c0c <port_get_group_from_gpio_pin+0x20>)
   22c00:	4798      	blx	r3
   22c02:	0003      	movs	r3, r0
}
   22c04:	0018      	movs	r0, r3
   22c06:	46bd      	mov	sp, r7
   22c08:	b002      	add	sp, #8
   22c0a:	bd80      	pop	{r7, pc}
   22c0c:	00022b8d 	.word	0x00022b8d

00022c10 <port_get_config_defaults>:
{
   22c10:	b580      	push	{r7, lr}
   22c12:	b082      	sub	sp, #8
   22c14:	af00      	add	r7, sp, #0
   22c16:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   22c18:	687b      	ldr	r3, [r7, #4]
   22c1a:	2200      	movs	r2, #0
   22c1c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22c1e:	687b      	ldr	r3, [r7, #4]
   22c20:	2201      	movs	r2, #1
   22c22:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   22c24:	687b      	ldr	r3, [r7, #4]
   22c26:	2200      	movs	r2, #0
   22c28:	709a      	strb	r2, [r3, #2]
}
   22c2a:	46c0      	nop			; (mov r8, r8)
   22c2c:	46bd      	mov	sp, r7
   22c2e:	b002      	add	sp, #8
   22c30:	bd80      	pop	{r7, pc}
	...

00022c34 <port_pin_set_output_level>:
{
   22c34:	b580      	push	{r7, lr}
   22c36:	b084      	sub	sp, #16
   22c38:	af00      	add	r7, sp, #0
   22c3a:	0002      	movs	r2, r0
   22c3c:	1dfb      	adds	r3, r7, #7
   22c3e:	701a      	strb	r2, [r3, #0]
   22c40:	1dbb      	adds	r3, r7, #6
   22c42:	1c0a      	adds	r2, r1, #0
   22c44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   22c46:	1dfb      	adds	r3, r7, #7
   22c48:	781b      	ldrb	r3, [r3, #0]
   22c4a:	0018      	movs	r0, r3
   22c4c:	4b0d      	ldr	r3, [pc, #52]	; (22c84 <port_pin_set_output_level+0x50>)
   22c4e:	4798      	blx	r3
   22c50:	0003      	movs	r3, r0
   22c52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   22c54:	1dfb      	adds	r3, r7, #7
   22c56:	781b      	ldrb	r3, [r3, #0]
   22c58:	221f      	movs	r2, #31
   22c5a:	4013      	ands	r3, r2
   22c5c:	2201      	movs	r2, #1
   22c5e:	409a      	lsls	r2, r3
   22c60:	0013      	movs	r3, r2
   22c62:	60bb      	str	r3, [r7, #8]
	if (level) {
   22c64:	1dbb      	adds	r3, r7, #6
   22c66:	781b      	ldrb	r3, [r3, #0]
   22c68:	2b00      	cmp	r3, #0
   22c6a:	d003      	beq.n	22c74 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22c6c:	68fb      	ldr	r3, [r7, #12]
   22c6e:	68ba      	ldr	r2, [r7, #8]
   22c70:	619a      	str	r2, [r3, #24]
}
   22c72:	e002      	b.n	22c7a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   22c74:	68fb      	ldr	r3, [r7, #12]
   22c76:	68ba      	ldr	r2, [r7, #8]
   22c78:	615a      	str	r2, [r3, #20]
}
   22c7a:	46c0      	nop			; (mov r8, r8)
   22c7c:	46bd      	mov	sp, r7
   22c7e:	b004      	add	sp, #16
   22c80:	bd80      	pop	{r7, pc}
   22c82:	46c0      	nop			; (mov r8, r8)
   22c84:	00022bed 	.word	0x00022bed

00022c88 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   22c88:	b580      	push	{r7, lr}
   22c8a:	b082      	sub	sp, #8
   22c8c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   22c8e:	1d3b      	adds	r3, r7, #4
   22c90:	0018      	movs	r0, r3
   22c92:	4b0e      	ldr	r3, [pc, #56]	; (22ccc <system_board_init+0x44>)
   22c94:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   22c96:	1d3b      	adds	r3, r7, #4
   22c98:	2201      	movs	r2, #1
   22c9a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   22c9c:	1d3b      	adds	r3, r7, #4
   22c9e:	0019      	movs	r1, r3
   22ca0:	2017      	movs	r0, #23
   22ca2:	4b0b      	ldr	r3, [pc, #44]	; (22cd0 <system_board_init+0x48>)
   22ca4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   22ca6:	2101      	movs	r1, #1
   22ca8:	2017      	movs	r0, #23
   22caa:	4b0a      	ldr	r3, [pc, #40]	; (22cd4 <system_board_init+0x4c>)
   22cac:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   22cae:	1d3b      	adds	r3, r7, #4
   22cb0:	2200      	movs	r2, #0
   22cb2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   22cb4:	1d3b      	adds	r3, r7, #4
   22cb6:	2201      	movs	r2, #1
   22cb8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   22cba:	1d3b      	adds	r3, r7, #4
   22cbc:	0019      	movs	r1, r3
   22cbe:	2037      	movs	r0, #55	; 0x37
   22cc0:	4b03      	ldr	r3, [pc, #12]	; (22cd0 <system_board_init+0x48>)
   22cc2:	4798      	blx	r3
}
   22cc4:	46c0      	nop			; (mov r8, r8)
   22cc6:	46bd      	mov	sp, r7
   22cc8:	b002      	add	sp, #8
   22cca:	bd80      	pop	{r7, pc}
   22ccc:	00022c11 	.word	0x00022c11
   22cd0:	000232fd 	.word	0x000232fd
   22cd4:	00022c35 	.word	0x00022c35

00022cd8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   22cd8:	b580      	push	{r7, lr}
   22cda:	b084      	sub	sp, #16
   22cdc:	af00      	add	r7, sp, #0
   22cde:	0002      	movs	r2, r0
   22ce0:	1dfb      	adds	r3, r7, #7
   22ce2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   22ce4:	230f      	movs	r3, #15
   22ce6:	18fb      	adds	r3, r7, r3
   22ce8:	1dfa      	adds	r2, r7, #7
   22cea:	7812      	ldrb	r2, [r2, #0]
   22cec:	0952      	lsrs	r2, r2, #5
   22cee:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   22cf0:	230f      	movs	r3, #15
   22cf2:	18fb      	adds	r3, r7, r3
   22cf4:	781b      	ldrb	r3, [r3, #0]
   22cf6:	2b00      	cmp	r3, #0
   22cf8:	d10c      	bne.n	22d14 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   22cfa:	4b09      	ldr	r3, [pc, #36]	; (22d20 <_extint_get_eic_from_channel+0x48>)
   22cfc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   22cfe:	230f      	movs	r3, #15
   22d00:	18fb      	adds	r3, r7, r3
   22d02:	781b      	ldrb	r3, [r3, #0]
   22d04:	009b      	lsls	r3, r3, #2
   22d06:	2210      	movs	r2, #16
   22d08:	4694      	mov	ip, r2
   22d0a:	44bc      	add	ip, r7
   22d0c:	4463      	add	r3, ip
   22d0e:	3b08      	subs	r3, #8
   22d10:	681b      	ldr	r3, [r3, #0]
   22d12:	e000      	b.n	22d16 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   22d14:	2300      	movs	r3, #0
	}
}
   22d16:	0018      	movs	r0, r3
   22d18:	46bd      	mov	sp, r7
   22d1a:	b004      	add	sp, #16
   22d1c:	bd80      	pop	{r7, pc}
   22d1e:	46c0      	nop			; (mov r8, r8)
   22d20:	40001800 	.word	0x40001800

00022d24 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   22d24:	b580      	push	{r7, lr}
   22d26:	b084      	sub	sp, #16
   22d28:	af00      	add	r7, sp, #0
   22d2a:	0002      	movs	r2, r0
   22d2c:	1dfb      	adds	r3, r7, #7
   22d2e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22d30:	1dfb      	adds	r3, r7, #7
   22d32:	781b      	ldrb	r3, [r3, #0]
   22d34:	0018      	movs	r0, r3
   22d36:	4b0b      	ldr	r3, [pc, #44]	; (22d64 <extint_chan_is_detected+0x40>)
   22d38:	4798      	blx	r3
   22d3a:	0003      	movs	r3, r0
   22d3c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22d3e:	1dfb      	adds	r3, r7, #7
   22d40:	781b      	ldrb	r3, [r3, #0]
   22d42:	221f      	movs	r2, #31
   22d44:	4013      	ands	r3, r2
   22d46:	2201      	movs	r2, #1
   22d48:	409a      	lsls	r2, r3
   22d4a:	0013      	movs	r3, r2
   22d4c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   22d4e:	68fb      	ldr	r3, [r7, #12]
   22d50:	691b      	ldr	r3, [r3, #16]
   22d52:	68ba      	ldr	r2, [r7, #8]
   22d54:	4013      	ands	r3, r2
   22d56:	1e5a      	subs	r2, r3, #1
   22d58:	4193      	sbcs	r3, r2
   22d5a:	b2db      	uxtb	r3, r3
}
   22d5c:	0018      	movs	r0, r3
   22d5e:	46bd      	mov	sp, r7
   22d60:	b004      	add	sp, #16
   22d62:	bd80      	pop	{r7, pc}
   22d64:	00022cd9 	.word	0x00022cd9

00022d68 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   22d68:	b580      	push	{r7, lr}
   22d6a:	b084      	sub	sp, #16
   22d6c:	af00      	add	r7, sp, #0
   22d6e:	0002      	movs	r2, r0
   22d70:	1dfb      	adds	r3, r7, #7
   22d72:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22d74:	1dfb      	adds	r3, r7, #7
   22d76:	781b      	ldrb	r3, [r3, #0]
   22d78:	0018      	movs	r0, r3
   22d7a:	4b09      	ldr	r3, [pc, #36]	; (22da0 <extint_chan_clear_detected+0x38>)
   22d7c:	4798      	blx	r3
   22d7e:	0003      	movs	r3, r0
   22d80:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22d82:	1dfb      	adds	r3, r7, #7
   22d84:	781b      	ldrb	r3, [r3, #0]
   22d86:	221f      	movs	r2, #31
   22d88:	4013      	ands	r3, r2
   22d8a:	2201      	movs	r2, #1
   22d8c:	409a      	lsls	r2, r3
   22d8e:	0013      	movs	r3, r2
   22d90:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   22d92:	68fb      	ldr	r3, [r7, #12]
   22d94:	68ba      	ldr	r2, [r7, #8]
   22d96:	611a      	str	r2, [r3, #16]
}
   22d98:	46c0      	nop			; (mov r8, r8)
   22d9a:	46bd      	mov	sp, r7
   22d9c:	b004      	add	sp, #16
   22d9e:	bd80      	pop	{r7, pc}
   22da0:	00022cd9 	.word	0x00022cd9

00022da4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22da4:	b580      	push	{r7, lr}
   22da6:	b082      	sub	sp, #8
   22da8:	af00      	add	r7, sp, #0
   22daa:	6078      	str	r0, [r7, #4]
   22dac:	0008      	movs	r0, r1
   22dae:	0011      	movs	r1, r2
   22db0:	1cfb      	adds	r3, r7, #3
   22db2:	1c02      	adds	r2, r0, #0
   22db4:	701a      	strb	r2, [r3, #0]
   22db6:	1cbb      	adds	r3, r7, #2
   22db8:	1c0a      	adds	r2, r1, #0
   22dba:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22dbc:	1cbb      	adds	r3, r7, #2
   22dbe:	781b      	ldrb	r3, [r3, #0]
   22dc0:	2b00      	cmp	r3, #0
   22dc2:	d001      	beq.n	22dc8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   22dc4:	2317      	movs	r3, #23
   22dc6:	e019      	b.n	22dfc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   22dc8:	1cfb      	adds	r3, r7, #3
   22dca:	781a      	ldrb	r2, [r3, #0]
   22dcc:	4b0d      	ldr	r3, [pc, #52]	; (22e04 <extint_register_callback+0x60>)
   22dce:	0092      	lsls	r2, r2, #2
   22dd0:	58d3      	ldr	r3, [r2, r3]
   22dd2:	2b00      	cmp	r3, #0
   22dd4:	d107      	bne.n	22de6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   22dd6:	1cfb      	adds	r3, r7, #3
   22dd8:	781a      	ldrb	r2, [r3, #0]
   22dda:	4b0a      	ldr	r3, [pc, #40]	; (22e04 <extint_register_callback+0x60>)
   22ddc:	0092      	lsls	r2, r2, #2
   22dde:	6879      	ldr	r1, [r7, #4]
   22de0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   22de2:	2300      	movs	r3, #0
   22de4:	e00a      	b.n	22dfc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   22de6:	1cfb      	adds	r3, r7, #3
   22de8:	781a      	ldrb	r2, [r3, #0]
   22dea:	4b06      	ldr	r3, [pc, #24]	; (22e04 <extint_register_callback+0x60>)
   22dec:	0092      	lsls	r2, r2, #2
   22dee:	58d2      	ldr	r2, [r2, r3]
   22df0:	687b      	ldr	r3, [r7, #4]
   22df2:	429a      	cmp	r2, r3
   22df4:	d101      	bne.n	22dfa <extint_register_callback+0x56>
		return STATUS_OK;
   22df6:	2300      	movs	r3, #0
   22df8:	e000      	b.n	22dfc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   22dfa:	231d      	movs	r3, #29
}
   22dfc:	0018      	movs	r0, r3
   22dfe:	46bd      	mov	sp, r7
   22e00:	b002      	add	sp, #8
   22e02:	bd80      	pop	{r7, pc}
   22e04:	200055f4 	.word	0x200055f4

00022e08 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22e08:	b580      	push	{r7, lr}
   22e0a:	b084      	sub	sp, #16
   22e0c:	af00      	add	r7, sp, #0
   22e0e:	0002      	movs	r2, r0
   22e10:	1dfb      	adds	r3, r7, #7
   22e12:	701a      	strb	r2, [r3, #0]
   22e14:	1dbb      	adds	r3, r7, #6
   22e16:	1c0a      	adds	r2, r1, #0
   22e18:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22e1a:	1dbb      	adds	r3, r7, #6
   22e1c:	781b      	ldrb	r3, [r3, #0]
   22e1e:	2b00      	cmp	r3, #0
   22e20:	d10e      	bne.n	22e40 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   22e22:	1dfb      	adds	r3, r7, #7
   22e24:	781b      	ldrb	r3, [r3, #0]
   22e26:	0018      	movs	r0, r3
   22e28:	4b08      	ldr	r3, [pc, #32]	; (22e4c <extint_chan_enable_callback+0x44>)
   22e2a:	4798      	blx	r3
   22e2c:	0003      	movs	r3, r0
   22e2e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22e30:	1dfb      	adds	r3, r7, #7
   22e32:	781b      	ldrb	r3, [r3, #0]
   22e34:	2201      	movs	r2, #1
   22e36:	409a      	lsls	r2, r3
   22e38:	68fb      	ldr	r3, [r7, #12]
   22e3a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22e3c:	2300      	movs	r3, #0
   22e3e:	e000      	b.n	22e42 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22e40:	2317      	movs	r3, #23
}
   22e42:	0018      	movs	r0, r3
   22e44:	46bd      	mov	sp, r7
   22e46:	b004      	add	sp, #16
   22e48:	bd80      	pop	{r7, pc}
   22e4a:	46c0      	nop			; (mov r8, r8)
   22e4c:	00022cd9 	.word	0x00022cd9

00022e50 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22e50:	b580      	push	{r7, lr}
   22e52:	b084      	sub	sp, #16
   22e54:	af00      	add	r7, sp, #0
   22e56:	0002      	movs	r2, r0
   22e58:	1dfb      	adds	r3, r7, #7
   22e5a:	701a      	strb	r2, [r3, #0]
   22e5c:	1dbb      	adds	r3, r7, #6
   22e5e:	1c0a      	adds	r2, r1, #0
   22e60:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22e62:	1dbb      	adds	r3, r7, #6
   22e64:	781b      	ldrb	r3, [r3, #0]
   22e66:	2b00      	cmp	r3, #0
   22e68:	d10e      	bne.n	22e88 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   22e6a:	1dfb      	adds	r3, r7, #7
   22e6c:	781b      	ldrb	r3, [r3, #0]
   22e6e:	0018      	movs	r0, r3
   22e70:	4b08      	ldr	r3, [pc, #32]	; (22e94 <extint_chan_disable_callback+0x44>)
   22e72:	4798      	blx	r3
   22e74:	0003      	movs	r3, r0
   22e76:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   22e78:	1dfb      	adds	r3, r7, #7
   22e7a:	781b      	ldrb	r3, [r3, #0]
   22e7c:	2201      	movs	r2, #1
   22e7e:	409a      	lsls	r2, r3
   22e80:	68fb      	ldr	r3, [r7, #12]
   22e82:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22e84:	2300      	movs	r3, #0
   22e86:	e000      	b.n	22e8a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22e88:	2317      	movs	r3, #23
}
   22e8a:	0018      	movs	r0, r3
   22e8c:	46bd      	mov	sp, r7
   22e8e:	b004      	add	sp, #16
   22e90:	bd80      	pop	{r7, pc}
   22e92:	46c0      	nop			; (mov r8, r8)
   22e94:	00022cd9 	.word	0x00022cd9

00022e98 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   22e98:	b580      	push	{r7, lr}
   22e9a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   22e9c:	4b15      	ldr	r3, [pc, #84]	; (22ef4 <EIC_Handler+0x5c>)
   22e9e:	2200      	movs	r2, #0
   22ea0:	701a      	strb	r2, [r3, #0]
   22ea2:	e020      	b.n	22ee6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   22ea4:	4b13      	ldr	r3, [pc, #76]	; (22ef4 <EIC_Handler+0x5c>)
   22ea6:	781b      	ldrb	r3, [r3, #0]
   22ea8:	0018      	movs	r0, r3
   22eaa:	4b13      	ldr	r3, [pc, #76]	; (22ef8 <EIC_Handler+0x60>)
   22eac:	4798      	blx	r3
   22eae:	1e03      	subs	r3, r0, #0
   22eb0:	d013      	beq.n	22eda <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   22eb2:	4b10      	ldr	r3, [pc, #64]	; (22ef4 <EIC_Handler+0x5c>)
   22eb4:	781b      	ldrb	r3, [r3, #0]
   22eb6:	0018      	movs	r0, r3
   22eb8:	4b10      	ldr	r3, [pc, #64]	; (22efc <EIC_Handler+0x64>)
   22eba:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   22ebc:	4b0d      	ldr	r3, [pc, #52]	; (22ef4 <EIC_Handler+0x5c>)
   22ebe:	781b      	ldrb	r3, [r3, #0]
   22ec0:	001a      	movs	r2, r3
   22ec2:	4b0f      	ldr	r3, [pc, #60]	; (22f00 <EIC_Handler+0x68>)
   22ec4:	0092      	lsls	r2, r2, #2
   22ec6:	58d3      	ldr	r3, [r2, r3]
   22ec8:	2b00      	cmp	r3, #0
   22eca:	d006      	beq.n	22eda <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   22ecc:	4b09      	ldr	r3, [pc, #36]	; (22ef4 <EIC_Handler+0x5c>)
   22ece:	781b      	ldrb	r3, [r3, #0]
   22ed0:	001a      	movs	r2, r3
   22ed2:	4b0b      	ldr	r3, [pc, #44]	; (22f00 <EIC_Handler+0x68>)
   22ed4:	0092      	lsls	r2, r2, #2
   22ed6:	58d3      	ldr	r3, [r2, r3]
   22ed8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   22eda:	4b06      	ldr	r3, [pc, #24]	; (22ef4 <EIC_Handler+0x5c>)
   22edc:	781b      	ldrb	r3, [r3, #0]
   22ede:	3301      	adds	r3, #1
   22ee0:	b2da      	uxtb	r2, r3
   22ee2:	4b04      	ldr	r3, [pc, #16]	; (22ef4 <EIC_Handler+0x5c>)
   22ee4:	701a      	strb	r2, [r3, #0]
   22ee6:	4b03      	ldr	r3, [pc, #12]	; (22ef4 <EIC_Handler+0x5c>)
   22ee8:	781b      	ldrb	r3, [r3, #0]
   22eea:	2b0f      	cmp	r3, #15
   22eec:	d9da      	bls.n	22ea4 <EIC_Handler+0xc>
			}
		}
	}
}
   22eee:	46c0      	nop			; (mov r8, r8)
   22ef0:	46bd      	mov	sp, r7
   22ef2:	bd80      	pop	{r7, pc}
   22ef4:	200055f0 	.word	0x200055f0
   22ef8:	00022d25 	.word	0x00022d25
   22efc:	00022d69 	.word	0x00022d69
   22f00:	200055f4 	.word	0x200055f4

00022f04 <system_gclk_chan_get_config_defaults>:
{
   22f04:	b580      	push	{r7, lr}
   22f06:	b082      	sub	sp, #8
   22f08:	af00      	add	r7, sp, #0
   22f0a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   22f0c:	687b      	ldr	r3, [r7, #4]
   22f0e:	2200      	movs	r2, #0
   22f10:	701a      	strb	r2, [r3, #0]
}
   22f12:	46c0      	nop			; (mov r8, r8)
   22f14:	46bd      	mov	sp, r7
   22f16:	b002      	add	sp, #8
   22f18:	bd80      	pop	{r7, pc}
	...

00022f1c <system_apb_clock_set_mask>:
{
   22f1c:	b580      	push	{r7, lr}
   22f1e:	b082      	sub	sp, #8
   22f20:	af00      	add	r7, sp, #0
   22f22:	0002      	movs	r2, r0
   22f24:	6039      	str	r1, [r7, #0]
   22f26:	1dfb      	adds	r3, r7, #7
   22f28:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   22f2a:	1dfb      	adds	r3, r7, #7
   22f2c:	781b      	ldrb	r3, [r3, #0]
   22f2e:	2b01      	cmp	r3, #1
   22f30:	d00a      	beq.n	22f48 <system_apb_clock_set_mask+0x2c>
   22f32:	2b02      	cmp	r3, #2
   22f34:	d00f      	beq.n	22f56 <system_apb_clock_set_mask+0x3a>
   22f36:	2b00      	cmp	r3, #0
   22f38:	d114      	bne.n	22f64 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   22f3a:	4b0e      	ldr	r3, [pc, #56]	; (22f74 <system_apb_clock_set_mask+0x58>)
   22f3c:	4a0d      	ldr	r2, [pc, #52]	; (22f74 <system_apb_clock_set_mask+0x58>)
   22f3e:	6991      	ldr	r1, [r2, #24]
   22f40:	683a      	ldr	r2, [r7, #0]
   22f42:	430a      	orrs	r2, r1
   22f44:	619a      	str	r2, [r3, #24]
			break;
   22f46:	e00f      	b.n	22f68 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   22f48:	4b0a      	ldr	r3, [pc, #40]	; (22f74 <system_apb_clock_set_mask+0x58>)
   22f4a:	4a0a      	ldr	r2, [pc, #40]	; (22f74 <system_apb_clock_set_mask+0x58>)
   22f4c:	69d1      	ldr	r1, [r2, #28]
   22f4e:	683a      	ldr	r2, [r7, #0]
   22f50:	430a      	orrs	r2, r1
   22f52:	61da      	str	r2, [r3, #28]
			break;
   22f54:	e008      	b.n	22f68 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   22f56:	4b07      	ldr	r3, [pc, #28]	; (22f74 <system_apb_clock_set_mask+0x58>)
   22f58:	4a06      	ldr	r2, [pc, #24]	; (22f74 <system_apb_clock_set_mask+0x58>)
   22f5a:	6a11      	ldr	r1, [r2, #32]
   22f5c:	683a      	ldr	r2, [r7, #0]
   22f5e:	430a      	orrs	r2, r1
   22f60:	621a      	str	r2, [r3, #32]
			break;
   22f62:	e001      	b.n	22f68 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22f64:	2317      	movs	r3, #23
   22f66:	e000      	b.n	22f6a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   22f68:	2300      	movs	r3, #0
}
   22f6a:	0018      	movs	r0, r3
   22f6c:	46bd      	mov	sp, r7
   22f6e:	b002      	add	sp, #8
   22f70:	bd80      	pop	{r7, pc}
   22f72:	46c0      	nop			; (mov r8, r8)
   22f74:	40000400 	.word	0x40000400

00022f78 <system_pinmux_get_config_defaults>:
{
   22f78:	b580      	push	{r7, lr}
   22f7a:	b082      	sub	sp, #8
   22f7c:	af00      	add	r7, sp, #0
   22f7e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22f80:	687b      	ldr	r3, [r7, #4]
   22f82:	2280      	movs	r2, #128	; 0x80
   22f84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   22f86:	687b      	ldr	r3, [r7, #4]
   22f88:	2200      	movs	r2, #0
   22f8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22f8c:	687b      	ldr	r3, [r7, #4]
   22f8e:	2201      	movs	r2, #1
   22f90:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22f92:	687b      	ldr	r3, [r7, #4]
   22f94:	2200      	movs	r2, #0
   22f96:	70da      	strb	r2, [r3, #3]
}
   22f98:	46c0      	nop			; (mov r8, r8)
   22f9a:	46bd      	mov	sp, r7
   22f9c:	b002      	add	sp, #8
   22f9e:	bd80      	pop	{r7, pc}

00022fa0 <system_interrupt_enable>:
{
   22fa0:	b580      	push	{r7, lr}
   22fa2:	b082      	sub	sp, #8
   22fa4:	af00      	add	r7, sp, #0
   22fa6:	0002      	movs	r2, r0
   22fa8:	1dfb      	adds	r3, r7, #7
   22faa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   22fac:	4b06      	ldr	r3, [pc, #24]	; (22fc8 <system_interrupt_enable+0x28>)
   22fae:	1dfa      	adds	r2, r7, #7
   22fb0:	7812      	ldrb	r2, [r2, #0]
   22fb2:	0011      	movs	r1, r2
   22fb4:	221f      	movs	r2, #31
   22fb6:	400a      	ands	r2, r1
   22fb8:	2101      	movs	r1, #1
   22fba:	4091      	lsls	r1, r2
   22fbc:	000a      	movs	r2, r1
   22fbe:	601a      	str	r2, [r3, #0]
}
   22fc0:	46c0      	nop			; (mov r8, r8)
   22fc2:	46bd      	mov	sp, r7
   22fc4:	b002      	add	sp, #8
   22fc6:	bd80      	pop	{r7, pc}
   22fc8:	e000e100 	.word	0xe000e100

00022fcc <_extint_get_eic_from_channel>:
{
   22fcc:	b580      	push	{r7, lr}
   22fce:	b084      	sub	sp, #16
   22fd0:	af00      	add	r7, sp, #0
   22fd2:	0002      	movs	r2, r0
   22fd4:	1dfb      	adds	r3, r7, #7
   22fd6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   22fd8:	230f      	movs	r3, #15
   22fda:	18fb      	adds	r3, r7, r3
   22fdc:	1dfa      	adds	r2, r7, #7
   22fde:	7812      	ldrb	r2, [r2, #0]
   22fe0:	0952      	lsrs	r2, r2, #5
   22fe2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   22fe4:	230f      	movs	r3, #15
   22fe6:	18fb      	adds	r3, r7, r3
   22fe8:	781b      	ldrb	r3, [r3, #0]
   22fea:	2b00      	cmp	r3, #0
   22fec:	d10c      	bne.n	23008 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   22fee:	4b09      	ldr	r3, [pc, #36]	; (23014 <_extint_get_eic_from_channel+0x48>)
   22ff0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   22ff2:	230f      	movs	r3, #15
   22ff4:	18fb      	adds	r3, r7, r3
   22ff6:	781b      	ldrb	r3, [r3, #0]
   22ff8:	009b      	lsls	r3, r3, #2
   22ffa:	2210      	movs	r2, #16
   22ffc:	4694      	mov	ip, r2
   22ffe:	44bc      	add	ip, r7
   23000:	4463      	add	r3, ip
   23002:	3b08      	subs	r3, #8
   23004:	681b      	ldr	r3, [r3, #0]
   23006:	e000      	b.n	2300a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   23008:	2300      	movs	r3, #0
}
   2300a:	0018      	movs	r0, r3
   2300c:	46bd      	mov	sp, r7
   2300e:	b004      	add	sp, #16
   23010:	bd80      	pop	{r7, pc}
   23012:	46c0      	nop			; (mov r8, r8)
   23014:	40001800 	.word	0x40001800

00023018 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   23018:	b580      	push	{r7, lr}
   2301a:	b082      	sub	sp, #8
   2301c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2301e:	4b0f      	ldr	r3, [pc, #60]	; (2305c <extint_is_syncing+0x44>)
   23020:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   23022:	2300      	movs	r3, #0
   23024:	607b      	str	r3, [r7, #4]
   23026:	e011      	b.n	2304c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   23028:	687b      	ldr	r3, [r7, #4]
   2302a:	009b      	lsls	r3, r3, #2
   2302c:	2208      	movs	r2, #8
   2302e:	4694      	mov	ip, r2
   23030:	44bc      	add	ip, r7
   23032:	4463      	add	r3, ip
   23034:	3b08      	subs	r3, #8
   23036:	681b      	ldr	r3, [r3, #0]
   23038:	785b      	ldrb	r3, [r3, #1]
   2303a:	b2db      	uxtb	r3, r3
   2303c:	b25b      	sxtb	r3, r3
   2303e:	2b00      	cmp	r3, #0
   23040:	da01      	bge.n	23046 <extint_is_syncing+0x2e>
			return true;
   23042:	2301      	movs	r3, #1
   23044:	e006      	b.n	23054 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   23046:	687b      	ldr	r3, [r7, #4]
   23048:	3301      	adds	r3, #1
   2304a:	607b      	str	r3, [r7, #4]
   2304c:	687b      	ldr	r3, [r7, #4]
   2304e:	2b00      	cmp	r3, #0
   23050:	d0ea      	beq.n	23028 <extint_is_syncing+0x10>
		}
	}
	return false;
   23052:	2300      	movs	r3, #0
}
   23054:	0018      	movs	r0, r3
   23056:	46bd      	mov	sp, r7
   23058:	b002      	add	sp, #8
   2305a:	bd80      	pop	{r7, pc}
   2305c:	40001800 	.word	0x40001800

00023060 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   23060:	b580      	push	{r7, lr}
   23062:	b084      	sub	sp, #16
   23064:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   23066:	4b2d      	ldr	r3, [pc, #180]	; (2311c <_system_extint_init+0xbc>)
   23068:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2306a:	2140      	movs	r1, #64	; 0x40
   2306c:	2000      	movs	r0, #0
   2306e:	4b2c      	ldr	r3, [pc, #176]	; (23120 <_system_extint_init+0xc0>)
   23070:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   23072:	003b      	movs	r3, r7
   23074:	0018      	movs	r0, r3
   23076:	4b2b      	ldr	r3, [pc, #172]	; (23124 <_system_extint_init+0xc4>)
   23078:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2307a:	003b      	movs	r3, r7
   2307c:	2200      	movs	r2, #0
   2307e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   23080:	003b      	movs	r3, r7
   23082:	0019      	movs	r1, r3
   23084:	2005      	movs	r0, #5
   23086:	4b28      	ldr	r3, [pc, #160]	; (23128 <_system_extint_init+0xc8>)
   23088:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2308a:	2005      	movs	r0, #5
   2308c:	4b27      	ldr	r3, [pc, #156]	; (2312c <_system_extint_init+0xcc>)
   2308e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   23090:	2300      	movs	r3, #0
   23092:	60fb      	str	r3, [r7, #12]
   23094:	e018      	b.n	230c8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   23096:	68fb      	ldr	r3, [r7, #12]
   23098:	009b      	lsls	r3, r3, #2
   2309a:	2210      	movs	r2, #16
   2309c:	4694      	mov	ip, r2
   2309e:	44bc      	add	ip, r7
   230a0:	4463      	add	r3, ip
   230a2:	3b0c      	subs	r3, #12
   230a4:	681a      	ldr	r2, [r3, #0]
   230a6:	68fb      	ldr	r3, [r7, #12]
   230a8:	009b      	lsls	r3, r3, #2
   230aa:	2110      	movs	r1, #16
   230ac:	468c      	mov	ip, r1
   230ae:	44bc      	add	ip, r7
   230b0:	4463      	add	r3, ip
   230b2:	3b0c      	subs	r3, #12
   230b4:	681b      	ldr	r3, [r3, #0]
   230b6:	781b      	ldrb	r3, [r3, #0]
   230b8:	b2db      	uxtb	r3, r3
   230ba:	2101      	movs	r1, #1
   230bc:	430b      	orrs	r3, r1
   230be:	b2db      	uxtb	r3, r3
   230c0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   230c2:	68fb      	ldr	r3, [r7, #12]
   230c4:	3301      	adds	r3, #1
   230c6:	60fb      	str	r3, [r7, #12]
   230c8:	68fb      	ldr	r3, [r7, #12]
   230ca:	2b00      	cmp	r3, #0
   230cc:	d0e3      	beq.n	23096 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   230ce:	46c0      	nop			; (mov r8, r8)
   230d0:	4b17      	ldr	r3, [pc, #92]	; (23130 <_system_extint_init+0xd0>)
   230d2:	4798      	blx	r3
   230d4:	1e03      	subs	r3, r0, #0
   230d6:	d1fb      	bne.n	230d0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   230d8:	230b      	movs	r3, #11
   230da:	18fb      	adds	r3, r7, r3
   230dc:	2200      	movs	r2, #0
   230de:	701a      	strb	r2, [r3, #0]
   230e0:	e00d      	b.n	230fe <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   230e2:	230b      	movs	r3, #11
   230e4:	18fb      	adds	r3, r7, r3
   230e6:	781a      	ldrb	r2, [r3, #0]
   230e8:	4b12      	ldr	r3, [pc, #72]	; (23134 <_system_extint_init+0xd4>)
   230ea:	0092      	lsls	r2, r2, #2
   230ec:	2100      	movs	r1, #0
   230ee:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   230f0:	230b      	movs	r3, #11
   230f2:	18fb      	adds	r3, r7, r3
   230f4:	781a      	ldrb	r2, [r3, #0]
   230f6:	230b      	movs	r3, #11
   230f8:	18fb      	adds	r3, r7, r3
   230fa:	3201      	adds	r2, #1
   230fc:	701a      	strb	r2, [r3, #0]
   230fe:	230b      	movs	r3, #11
   23100:	18fb      	adds	r3, r7, r3
   23102:	781b      	ldrb	r3, [r3, #0]
   23104:	2b0f      	cmp	r3, #15
   23106:	d9ec      	bls.n	230e2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   23108:	2004      	movs	r0, #4
   2310a:	4b0b      	ldr	r3, [pc, #44]	; (23138 <_system_extint_init+0xd8>)
   2310c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2310e:	4b0b      	ldr	r3, [pc, #44]	; (2313c <_system_extint_init+0xdc>)
   23110:	4798      	blx	r3
}
   23112:	46c0      	nop			; (mov r8, r8)
   23114:	46bd      	mov	sp, r7
   23116:	b004      	add	sp, #16
   23118:	bd80      	pop	{r7, pc}
   2311a:	46c0      	nop			; (mov r8, r8)
   2311c:	40001800 	.word	0x40001800
   23120:	00022f1d 	.word	0x00022f1d
   23124:	00022f05 	.word	0x00022f05
   23128:	0002698d 	.word	0x0002698d
   2312c:	000269d1 	.word	0x000269d1
   23130:	00023019 	.word	0x00023019
   23134:	200055f4 	.word	0x200055f4
   23138:	00022fa1 	.word	0x00022fa1
   2313c:	00023141 	.word	0x00023141

00023140 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   23140:	b580      	push	{r7, lr}
   23142:	b082      	sub	sp, #8
   23144:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   23146:	4b15      	ldr	r3, [pc, #84]	; (2319c <_extint_enable+0x5c>)
   23148:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2314a:	2300      	movs	r3, #0
   2314c:	607b      	str	r3, [r7, #4]
   2314e:	e018      	b.n	23182 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   23150:	687b      	ldr	r3, [r7, #4]
   23152:	009b      	lsls	r3, r3, #2
   23154:	2208      	movs	r2, #8
   23156:	4694      	mov	ip, r2
   23158:	44bc      	add	ip, r7
   2315a:	4463      	add	r3, ip
   2315c:	3b08      	subs	r3, #8
   2315e:	681a      	ldr	r2, [r3, #0]
   23160:	687b      	ldr	r3, [r7, #4]
   23162:	009b      	lsls	r3, r3, #2
   23164:	2108      	movs	r1, #8
   23166:	468c      	mov	ip, r1
   23168:	44bc      	add	ip, r7
   2316a:	4463      	add	r3, ip
   2316c:	3b08      	subs	r3, #8
   2316e:	681b      	ldr	r3, [r3, #0]
   23170:	781b      	ldrb	r3, [r3, #0]
   23172:	b2db      	uxtb	r3, r3
   23174:	2102      	movs	r1, #2
   23176:	430b      	orrs	r3, r1
   23178:	b2db      	uxtb	r3, r3
   2317a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2317c:	687b      	ldr	r3, [r7, #4]
   2317e:	3301      	adds	r3, #1
   23180:	607b      	str	r3, [r7, #4]
   23182:	687b      	ldr	r3, [r7, #4]
   23184:	2b00      	cmp	r3, #0
   23186:	d0e3      	beq.n	23150 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   23188:	46c0      	nop			; (mov r8, r8)
   2318a:	4b05      	ldr	r3, [pc, #20]	; (231a0 <_extint_enable+0x60>)
   2318c:	4798      	blx	r3
   2318e:	1e03      	subs	r3, r0, #0
   23190:	d1fb      	bne.n	2318a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   23192:	46c0      	nop			; (mov r8, r8)
   23194:	46bd      	mov	sp, r7
   23196:	b002      	add	sp, #8
   23198:	bd80      	pop	{r7, pc}
   2319a:	46c0      	nop			; (mov r8, r8)
   2319c:	40001800 	.word	0x40001800
   231a0:	00023019 	.word	0x00023019

000231a4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   231a4:	b580      	push	{r7, lr}
   231a6:	b082      	sub	sp, #8
   231a8:	af00      	add	r7, sp, #0
   231aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   231ac:	687b      	ldr	r3, [r7, #4]
   231ae:	2200      	movs	r2, #0
   231b0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   231b2:	687b      	ldr	r3, [r7, #4]
   231b4:	2200      	movs	r2, #0
   231b6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   231b8:	687b      	ldr	r3, [r7, #4]
   231ba:	2201      	movs	r2, #1
   231bc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   231be:	687b      	ldr	r3, [r7, #4]
   231c0:	2201      	movs	r2, #1
   231c2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   231c4:	687b      	ldr	r3, [r7, #4]
   231c6:	2200      	movs	r2, #0
   231c8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   231ca:	687b      	ldr	r3, [r7, #4]
   231cc:	2202      	movs	r2, #2
   231ce:	72da      	strb	r2, [r3, #11]
}
   231d0:	46c0      	nop			; (mov r8, r8)
   231d2:	46bd      	mov	sp, r7
   231d4:	b002      	add	sp, #8
   231d6:	bd80      	pop	{r7, pc}

000231d8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   231d8:	b580      	push	{r7, lr}
   231da:	b086      	sub	sp, #24
   231dc:	af00      	add	r7, sp, #0
   231de:	0002      	movs	r2, r0
   231e0:	6039      	str	r1, [r7, #0]
   231e2:	1dfb      	adds	r3, r7, #7
   231e4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   231e6:	2308      	movs	r3, #8
   231e8:	18fb      	adds	r3, r7, r3
   231ea:	0018      	movs	r0, r3
   231ec:	4b36      	ldr	r3, [pc, #216]	; (232c8 <extint_chan_set_config+0xf0>)
   231ee:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   231f0:	683b      	ldr	r3, [r7, #0]
   231f2:	685b      	ldr	r3, [r3, #4]
   231f4:	b2da      	uxtb	r2, r3
   231f6:	2308      	movs	r3, #8
   231f8:	18fb      	adds	r3, r7, r3
   231fa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   231fc:	2308      	movs	r3, #8
   231fe:	18fb      	adds	r3, r7, r3
   23200:	2200      	movs	r2, #0
   23202:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   23204:	683b      	ldr	r3, [r7, #0]
   23206:	7a1a      	ldrb	r2, [r3, #8]
   23208:	2308      	movs	r3, #8
   2320a:	18fb      	adds	r3, r7, r3
   2320c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2320e:	683b      	ldr	r3, [r7, #0]
   23210:	681b      	ldr	r3, [r3, #0]
   23212:	b2db      	uxtb	r3, r3
   23214:	2208      	movs	r2, #8
   23216:	18ba      	adds	r2, r7, r2
   23218:	0011      	movs	r1, r2
   2321a:	0018      	movs	r0, r3
   2321c:	4b2b      	ldr	r3, [pc, #172]	; (232cc <extint_chan_set_config+0xf4>)
   2321e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   23220:	1dfb      	adds	r3, r7, #7
   23222:	781b      	ldrb	r3, [r3, #0]
   23224:	0018      	movs	r0, r3
   23226:	4b2a      	ldr	r3, [pc, #168]	; (232d0 <extint_chan_set_config+0xf8>)
   23228:	4798      	blx	r3
   2322a:	0003      	movs	r3, r0
   2322c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2322e:	1dfb      	adds	r3, r7, #7
   23230:	781b      	ldrb	r3, [r3, #0]
   23232:	2207      	movs	r2, #7
   23234:	4013      	ands	r3, r2
   23236:	009b      	lsls	r3, r3, #2
   23238:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2323a:	683b      	ldr	r3, [r7, #0]
   2323c:	7adb      	ldrb	r3, [r3, #11]
   2323e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   23240:	683b      	ldr	r3, [r7, #0]
   23242:	7a9b      	ldrb	r3, [r3, #10]
   23244:	2b00      	cmp	r3, #0
   23246:	d003      	beq.n	23250 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   23248:	697b      	ldr	r3, [r7, #20]
   2324a:	2208      	movs	r2, #8
   2324c:	4313      	orrs	r3, r2
   2324e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   23250:	1dfb      	adds	r3, r7, #7
   23252:	781b      	ldrb	r3, [r3, #0]
   23254:	08db      	lsrs	r3, r3, #3
   23256:	b2db      	uxtb	r3, r3
   23258:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2325a:	1dfb      	adds	r3, r7, #7
   2325c:	781b      	ldrb	r3, [r3, #0]
   2325e:	08db      	lsrs	r3, r3, #3
   23260:	b2db      	uxtb	r3, r3
   23262:	001a      	movs	r2, r3
   23264:	693b      	ldr	r3, [r7, #16]
   23266:	3206      	adds	r2, #6
   23268:	0092      	lsls	r2, r2, #2
   2326a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2326c:	210f      	movs	r1, #15
   2326e:	68fa      	ldr	r2, [r7, #12]
   23270:	4091      	lsls	r1, r2
   23272:	000a      	movs	r2, r1
   23274:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   23276:	401a      	ands	r2, r3
			(new_config << config_pos);
   23278:	6979      	ldr	r1, [r7, #20]
   2327a:	68fb      	ldr	r3, [r7, #12]
   2327c:	4099      	lsls	r1, r3
   2327e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   23280:	431a      	orrs	r2, r3
   23282:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   23284:	693b      	ldr	r3, [r7, #16]
   23286:	1d82      	adds	r2, r0, #6
   23288:	0092      	lsls	r2, r2, #2
   2328a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   2328c:	683b      	ldr	r3, [r7, #0]
   2328e:	7a5b      	ldrb	r3, [r3, #9]
   23290:	2b00      	cmp	r3, #0
   23292:	d00a      	beq.n	232aa <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   23294:	693b      	ldr	r3, [r7, #16]
   23296:	695a      	ldr	r2, [r3, #20]
   23298:	1dfb      	adds	r3, r7, #7
   2329a:	781b      	ldrb	r3, [r3, #0]
   2329c:	2101      	movs	r1, #1
   2329e:	4099      	lsls	r1, r3
   232a0:	000b      	movs	r3, r1
   232a2:	431a      	orrs	r2, r3
   232a4:	693b      	ldr	r3, [r7, #16]
   232a6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   232a8:	e00a      	b.n	232c0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   232aa:	693b      	ldr	r3, [r7, #16]
   232ac:	695b      	ldr	r3, [r3, #20]
   232ae:	1dfa      	adds	r2, r7, #7
   232b0:	7812      	ldrb	r2, [r2, #0]
   232b2:	2101      	movs	r1, #1
   232b4:	4091      	lsls	r1, r2
   232b6:	000a      	movs	r2, r1
   232b8:	43d2      	mvns	r2, r2
   232ba:	401a      	ands	r2, r3
   232bc:	693b      	ldr	r3, [r7, #16]
   232be:	615a      	str	r2, [r3, #20]
}
   232c0:	46c0      	nop			; (mov r8, r8)
   232c2:	46bd      	mov	sp, r7
   232c4:	b006      	add	sp, #24
   232c6:	bd80      	pop	{r7, pc}
   232c8:	00022f79 	.word	0x00022f79
   232cc:	00026ced 	.word	0x00026ced
   232d0:	00022fcd 	.word	0x00022fcd

000232d4 <system_pinmux_get_config_defaults>:
{
   232d4:	b580      	push	{r7, lr}
   232d6:	b082      	sub	sp, #8
   232d8:	af00      	add	r7, sp, #0
   232da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   232dc:	687b      	ldr	r3, [r7, #4]
   232de:	2280      	movs	r2, #128	; 0x80
   232e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   232e2:	687b      	ldr	r3, [r7, #4]
   232e4:	2200      	movs	r2, #0
   232e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   232e8:	687b      	ldr	r3, [r7, #4]
   232ea:	2201      	movs	r2, #1
   232ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   232ee:	687b      	ldr	r3, [r7, #4]
   232f0:	2200      	movs	r2, #0
   232f2:	70da      	strb	r2, [r3, #3]
}
   232f4:	46c0      	nop			; (mov r8, r8)
   232f6:	46bd      	mov	sp, r7
   232f8:	b002      	add	sp, #8
   232fa:	bd80      	pop	{r7, pc}

000232fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   232fc:	b580      	push	{r7, lr}
   232fe:	b084      	sub	sp, #16
   23300:	af00      	add	r7, sp, #0
   23302:	0002      	movs	r2, r0
   23304:	6039      	str	r1, [r7, #0]
   23306:	1dfb      	adds	r3, r7, #7
   23308:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2330a:	230c      	movs	r3, #12
   2330c:	18fb      	adds	r3, r7, r3
   2330e:	0018      	movs	r0, r3
   23310:	4b10      	ldr	r3, [pc, #64]	; (23354 <port_pin_set_config+0x58>)
   23312:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   23314:	230c      	movs	r3, #12
   23316:	18fb      	adds	r3, r7, r3
   23318:	2280      	movs	r2, #128	; 0x80
   2331a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   2331c:	683b      	ldr	r3, [r7, #0]
   2331e:	781a      	ldrb	r2, [r3, #0]
   23320:	230c      	movs	r3, #12
   23322:	18fb      	adds	r3, r7, r3
   23324:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   23326:	683b      	ldr	r3, [r7, #0]
   23328:	785a      	ldrb	r2, [r3, #1]
   2332a:	230c      	movs	r3, #12
   2332c:	18fb      	adds	r3, r7, r3
   2332e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   23330:	683b      	ldr	r3, [r7, #0]
   23332:	789a      	ldrb	r2, [r3, #2]
   23334:	230c      	movs	r3, #12
   23336:	18fb      	adds	r3, r7, r3
   23338:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2333a:	230c      	movs	r3, #12
   2333c:	18fa      	adds	r2, r7, r3
   2333e:	1dfb      	adds	r3, r7, #7
   23340:	781b      	ldrb	r3, [r3, #0]
   23342:	0011      	movs	r1, r2
   23344:	0018      	movs	r0, r3
   23346:	4b04      	ldr	r3, [pc, #16]	; (23358 <port_pin_set_config+0x5c>)
   23348:	4798      	blx	r3
}
   2334a:	46c0      	nop			; (mov r8, r8)
   2334c:	46bd      	mov	sp, r7
   2334e:	b004      	add	sp, #16
   23350:	bd80      	pop	{r7, pc}
   23352:	46c0      	nop			; (mov r8, r8)
   23354:	000232d5 	.word	0x000232d5
   23358:	00026ced 	.word	0x00026ced

0002335c <system_gclk_chan_get_config_defaults>:
{
   2335c:	b580      	push	{r7, lr}
   2335e:	b082      	sub	sp, #8
   23360:	af00      	add	r7, sp, #0
   23362:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   23364:	687b      	ldr	r3, [r7, #4]
   23366:	2200      	movs	r2, #0
   23368:	701a      	strb	r2, [r3, #0]
}
   2336a:	46c0      	nop			; (mov r8, r8)
   2336c:	46bd      	mov	sp, r7
   2336e:	b002      	add	sp, #8
   23370:	bd80      	pop	{r7, pc}
	...

00023374 <system_apb_clock_set_mask>:
{
   23374:	b580      	push	{r7, lr}
   23376:	b082      	sub	sp, #8
   23378:	af00      	add	r7, sp, #0
   2337a:	0002      	movs	r2, r0
   2337c:	6039      	str	r1, [r7, #0]
   2337e:	1dfb      	adds	r3, r7, #7
   23380:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   23382:	1dfb      	adds	r3, r7, #7
   23384:	781b      	ldrb	r3, [r3, #0]
   23386:	2b01      	cmp	r3, #1
   23388:	d00a      	beq.n	233a0 <system_apb_clock_set_mask+0x2c>
   2338a:	2b02      	cmp	r3, #2
   2338c:	d00f      	beq.n	233ae <system_apb_clock_set_mask+0x3a>
   2338e:	2b00      	cmp	r3, #0
   23390:	d114      	bne.n	233bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   23392:	4b0e      	ldr	r3, [pc, #56]	; (233cc <system_apb_clock_set_mask+0x58>)
   23394:	4a0d      	ldr	r2, [pc, #52]	; (233cc <system_apb_clock_set_mask+0x58>)
   23396:	6991      	ldr	r1, [r2, #24]
   23398:	683a      	ldr	r2, [r7, #0]
   2339a:	430a      	orrs	r2, r1
   2339c:	619a      	str	r2, [r3, #24]
			break;
   2339e:	e00f      	b.n	233c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   233a0:	4b0a      	ldr	r3, [pc, #40]	; (233cc <system_apb_clock_set_mask+0x58>)
   233a2:	4a0a      	ldr	r2, [pc, #40]	; (233cc <system_apb_clock_set_mask+0x58>)
   233a4:	69d1      	ldr	r1, [r2, #28]
   233a6:	683a      	ldr	r2, [r7, #0]
   233a8:	430a      	orrs	r2, r1
   233aa:	61da      	str	r2, [r3, #28]
			break;
   233ac:	e008      	b.n	233c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   233ae:	4b07      	ldr	r3, [pc, #28]	; (233cc <system_apb_clock_set_mask+0x58>)
   233b0:	4a06      	ldr	r2, [pc, #24]	; (233cc <system_apb_clock_set_mask+0x58>)
   233b2:	6a11      	ldr	r1, [r2, #32]
   233b4:	683a      	ldr	r2, [r7, #0]
   233b6:	430a      	orrs	r2, r1
   233b8:	621a      	str	r2, [r3, #32]
			break;
   233ba:	e001      	b.n	233c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   233bc:	2317      	movs	r3, #23
   233be:	e000      	b.n	233c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   233c0:	2300      	movs	r3, #0
}
   233c2:	0018      	movs	r0, r3
   233c4:	46bd      	mov	sp, r7
   233c6:	b002      	add	sp, #8
   233c8:	bd80      	pop	{r7, pc}
   233ca:	46c0      	nop			; (mov r8, r8)
   233cc:	40000400 	.word	0x40000400

000233d0 <system_interrupt_enable>:
{
   233d0:	b580      	push	{r7, lr}
   233d2:	b082      	sub	sp, #8
   233d4:	af00      	add	r7, sp, #0
   233d6:	0002      	movs	r2, r0
   233d8:	1dfb      	adds	r3, r7, #7
   233da:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   233dc:	4b06      	ldr	r3, [pc, #24]	; (233f8 <system_interrupt_enable+0x28>)
   233de:	1dfa      	adds	r2, r7, #7
   233e0:	7812      	ldrb	r2, [r2, #0]
   233e2:	0011      	movs	r1, r2
   233e4:	221f      	movs	r2, #31
   233e6:	400a      	ands	r2, r1
   233e8:	2101      	movs	r1, #1
   233ea:	4091      	lsls	r1, r2
   233ec:	000a      	movs	r2, r1
   233ee:	601a      	str	r2, [r3, #0]
}
   233f0:	46c0      	nop			; (mov r8, r8)
   233f2:	46bd      	mov	sp, r7
   233f4:	b002      	add	sp, #8
   233f6:	bd80      	pop	{r7, pc}
   233f8:	e000e100 	.word	0xe000e100

000233fc <system_interrupt_disable>:
{
   233fc:	b580      	push	{r7, lr}
   233fe:	b082      	sub	sp, #8
   23400:	af00      	add	r7, sp, #0
   23402:	0002      	movs	r2, r0
   23404:	1dfb      	adds	r3, r7, #7
   23406:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   23408:	4a07      	ldr	r2, [pc, #28]	; (23428 <system_interrupt_disable+0x2c>)
   2340a:	1dfb      	adds	r3, r7, #7
   2340c:	781b      	ldrb	r3, [r3, #0]
   2340e:	0019      	movs	r1, r3
   23410:	231f      	movs	r3, #31
   23412:	400b      	ands	r3, r1
   23414:	2101      	movs	r1, #1
   23416:	4099      	lsls	r1, r3
   23418:	000b      	movs	r3, r1
   2341a:	0019      	movs	r1, r3
   2341c:	2380      	movs	r3, #128	; 0x80
   2341e:	50d1      	str	r1, [r2, r3]
}
   23420:	46c0      	nop			; (mov r8, r8)
   23422:	46bd      	mov	sp, r7
   23424:	b002      	add	sp, #8
   23426:	bd80      	pop	{r7, pc}
   23428:	e000e100 	.word	0xe000e100

0002342c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2342c:	b580      	push	{r7, lr}
   2342e:	b084      	sub	sp, #16
   23430:	af00      	add	r7, sp, #0
   23432:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   23434:	687b      	ldr	r3, [r7, #4]
   23436:	681b      	ldr	r3, [r3, #0]
   23438:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2343a:	68fb      	ldr	r3, [r7, #12]
   2343c:	7a9b      	ldrb	r3, [r3, #10]
   2343e:	b2db      	uxtb	r3, r3
   23440:	b25b      	sxtb	r3, r3
   23442:	2b00      	cmp	r3, #0
   23444:	da01      	bge.n	2344a <rtc_calendar_is_syncing+0x1e>
                return true;
   23446:	2301      	movs	r3, #1
   23448:	e000      	b.n	2344c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2344a:	2300      	movs	r3, #0
}
   2344c:	0018      	movs	r0, r3
   2344e:	46bd      	mov	sp, r7
   23450:	b004      	add	sp, #16
   23452:	bd80      	pop	{r7, pc}

00023454 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   23454:	b580      	push	{r7, lr}
   23456:	b084      	sub	sp, #16
   23458:	af00      	add	r7, sp, #0
   2345a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2345c:	687b      	ldr	r3, [r7, #4]
   2345e:	681b      	ldr	r3, [r3, #0]
   23460:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   23462:	2003      	movs	r0, #3
   23464:	4b0a      	ldr	r3, [pc, #40]	; (23490 <rtc_calendar_enable+0x3c>)
   23466:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   23468:	46c0      	nop			; (mov r8, r8)
   2346a:	687b      	ldr	r3, [r7, #4]
   2346c:	0018      	movs	r0, r3
   2346e:	4b09      	ldr	r3, [pc, #36]	; (23494 <rtc_calendar_enable+0x40>)
   23470:	4798      	blx	r3
   23472:	1e03      	subs	r3, r0, #0
   23474:	d1f9      	bne.n	2346a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   23476:	68fb      	ldr	r3, [r7, #12]
   23478:	881b      	ldrh	r3, [r3, #0]
   2347a:	b29b      	uxth	r3, r3
   2347c:	2202      	movs	r2, #2
   2347e:	4313      	orrs	r3, r2
   23480:	b29a      	uxth	r2, r3
   23482:	68fb      	ldr	r3, [r7, #12]
   23484:	801a      	strh	r2, [r3, #0]
}
   23486:	46c0      	nop			; (mov r8, r8)
   23488:	46bd      	mov	sp, r7
   2348a:	b004      	add	sp, #16
   2348c:	bd80      	pop	{r7, pc}
   2348e:	46c0      	nop			; (mov r8, r8)
   23490:	000233d1 	.word	0x000233d1
   23494:	0002342d 	.word	0x0002342d

00023498 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   23498:	b580      	push	{r7, lr}
   2349a:	b084      	sub	sp, #16
   2349c:	af00      	add	r7, sp, #0
   2349e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   234a0:	687b      	ldr	r3, [r7, #4]
   234a2:	681b      	ldr	r3, [r3, #0]
   234a4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   234a6:	2003      	movs	r0, #3
   234a8:	4b0d      	ldr	r3, [pc, #52]	; (234e0 <rtc_calendar_disable+0x48>)
   234aa:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   234ac:	46c0      	nop			; (mov r8, r8)
   234ae:	687b      	ldr	r3, [r7, #4]
   234b0:	0018      	movs	r0, r3
   234b2:	4b0c      	ldr	r3, [pc, #48]	; (234e4 <rtc_calendar_disable+0x4c>)
   234b4:	4798      	blx	r3
   234b6:	1e03      	subs	r3, r0, #0
   234b8:	d1f9      	bne.n	234ae <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   234ba:	68fb      	ldr	r3, [r7, #12]
   234bc:	22c1      	movs	r2, #193	; 0xc1
   234be:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   234c0:	68fb      	ldr	r3, [r7, #12]
   234c2:	22c1      	movs	r2, #193	; 0xc1
   234c4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   234c6:	68fb      	ldr	r3, [r7, #12]
   234c8:	881b      	ldrh	r3, [r3, #0]
   234ca:	b29b      	uxth	r3, r3
   234cc:	2202      	movs	r2, #2
   234ce:	4393      	bics	r3, r2
   234d0:	b29a      	uxth	r2, r3
   234d2:	68fb      	ldr	r3, [r7, #12]
   234d4:	801a      	strh	r2, [r3, #0]
}
   234d6:	46c0      	nop			; (mov r8, r8)
   234d8:	46bd      	mov	sp, r7
   234da:	b004      	add	sp, #16
   234dc:	bd80      	pop	{r7, pc}
   234de:	46c0      	nop			; (mov r8, r8)
   234e0:	000233fd 	.word	0x000233fd
   234e4:	0002342d 	.word	0x0002342d

000234e8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   234e8:	b580      	push	{r7, lr}
   234ea:	b084      	sub	sp, #16
   234ec:	af00      	add	r7, sp, #0
   234ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   234f0:	687b      	ldr	r3, [r7, #4]
   234f2:	681b      	ldr	r3, [r3, #0]
   234f4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   234f6:	687b      	ldr	r3, [r7, #4]
   234f8:	0018      	movs	r0, r3
   234fa:	4b0d      	ldr	r3, [pc, #52]	; (23530 <rtc_calendar_reset+0x48>)
   234fc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   234fe:	687b      	ldr	r3, [r7, #4]
   23500:	2200      	movs	r2, #0
   23502:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   23504:	687b      	ldr	r3, [r7, #4]
   23506:	2200      	movs	r2, #0
   23508:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2350a:	46c0      	nop			; (mov r8, r8)
   2350c:	687b      	ldr	r3, [r7, #4]
   2350e:	0018      	movs	r0, r3
   23510:	4b08      	ldr	r3, [pc, #32]	; (23534 <rtc_calendar_reset+0x4c>)
   23512:	4798      	blx	r3
   23514:	1e03      	subs	r3, r0, #0
   23516:	d1f9      	bne.n	2350c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   23518:	68fb      	ldr	r3, [r7, #12]
   2351a:	881b      	ldrh	r3, [r3, #0]
   2351c:	b29b      	uxth	r3, r3
   2351e:	2201      	movs	r2, #1
   23520:	4313      	orrs	r3, r2
   23522:	b29a      	uxth	r2, r3
   23524:	68fb      	ldr	r3, [r7, #12]
   23526:	801a      	strh	r2, [r3, #0]
}
   23528:	46c0      	nop			; (mov r8, r8)
   2352a:	46bd      	mov	sp, r7
   2352c:	b004      	add	sp, #16
   2352e:	bd80      	pop	{r7, pc}
   23530:	00023499 	.word	0x00023499
   23534:	0002342d 	.word	0x0002342d

00023538 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   23538:	b580      	push	{r7, lr}
   2353a:	b084      	sub	sp, #16
   2353c:	af00      	add	r7, sp, #0
   2353e:	6078      	str	r0, [r7, #4]
   23540:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   23542:	683b      	ldr	r3, [r7, #0]
   23544:	88db      	ldrh	r3, [r3, #6]
   23546:	001a      	movs	r2, r3
   23548:	687b      	ldr	r3, [r7, #4]
   2354a:	88db      	ldrh	r3, [r3, #6]
   2354c:	1ad3      	subs	r3, r2, r3
   2354e:	069b      	lsls	r3, r3, #26
   23550:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   23552:	683b      	ldr	r3, [r7, #0]
   23554:	795b      	ldrb	r3, [r3, #5]
   23556:	059b      	lsls	r3, r3, #22
   23558:	001a      	movs	r2, r3
   2355a:	68fb      	ldr	r3, [r7, #12]
   2355c:	4313      	orrs	r3, r2
   2355e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   23560:	683b      	ldr	r3, [r7, #0]
   23562:	791b      	ldrb	r3, [r3, #4]
   23564:	045b      	lsls	r3, r3, #17
   23566:	001a      	movs	r2, r3
   23568:	68fb      	ldr	r3, [r7, #12]
   2356a:	4313      	orrs	r3, r2
   2356c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2356e:	683b      	ldr	r3, [r7, #0]
   23570:	789b      	ldrb	r3, [r3, #2]
   23572:	031b      	lsls	r3, r3, #12
   23574:	001a      	movs	r2, r3
   23576:	68fb      	ldr	r3, [r7, #12]
   23578:	4313      	orrs	r3, r2
   2357a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   2357c:	687b      	ldr	r3, [r7, #4]
   2357e:	791b      	ldrb	r3, [r3, #4]
   23580:	2201      	movs	r2, #1
   23582:	4053      	eors	r3, r2
   23584:	b2db      	uxtb	r3, r3
   23586:	2b00      	cmp	r3, #0
   23588:	d008      	beq.n	2359c <rtc_calendar_time_to_register_value+0x64>
   2358a:	683b      	ldr	r3, [r7, #0]
   2358c:	78db      	ldrb	r3, [r3, #3]
   2358e:	2b00      	cmp	r3, #0
   23590:	d004      	beq.n	2359c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   23592:	68fb      	ldr	r3, [r7, #12]
   23594:	2280      	movs	r2, #128	; 0x80
   23596:	0252      	lsls	r2, r2, #9
   23598:	4313      	orrs	r3, r2
   2359a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   2359c:	683b      	ldr	r3, [r7, #0]
   2359e:	785b      	ldrb	r3, [r3, #1]
   235a0:	019b      	lsls	r3, r3, #6
   235a2:	001a      	movs	r2, r3
   235a4:	68fb      	ldr	r3, [r7, #12]
   235a6:	4313      	orrs	r3, r2
   235a8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   235aa:	683b      	ldr	r3, [r7, #0]
   235ac:	781b      	ldrb	r3, [r3, #0]
   235ae:	001a      	movs	r2, r3
   235b0:	68fb      	ldr	r3, [r7, #12]
   235b2:	4313      	orrs	r3, r2
   235b4:	60fb      	str	r3, [r7, #12]

	return register_value;
   235b6:	68fb      	ldr	r3, [r7, #12]
}
   235b8:	0018      	movs	r0, r3
   235ba:	46bd      	mov	sp, r7
   235bc:	b004      	add	sp, #16
   235be:	bd80      	pop	{r7, pc}

000235c0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   235c0:	b580      	push	{r7, lr}
   235c2:	b084      	sub	sp, #16
   235c4:	af00      	add	r7, sp, #0
   235c6:	60f8      	str	r0, [r7, #12]
   235c8:	60b9      	str	r1, [r7, #8]
   235ca:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   235cc:	68bb      	ldr	r3, [r7, #8]
   235ce:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   235d0:	b29a      	uxth	r2, r3
   235d2:	68fb      	ldr	r3, [r7, #12]
   235d4:	88db      	ldrh	r3, [r3, #6]
   235d6:	18d3      	adds	r3, r2, r3
   235d8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   235da:	687b      	ldr	r3, [r7, #4]
   235dc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   235de:	68bb      	ldr	r3, [r7, #8]
   235e0:	0d9b      	lsrs	r3, r3, #22
   235e2:	b2db      	uxtb	r3, r3
   235e4:	220f      	movs	r2, #15
   235e6:	4013      	ands	r3, r2
   235e8:	b2da      	uxtb	r2, r3
   235ea:	687b      	ldr	r3, [r7, #4]
   235ec:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   235ee:	68bb      	ldr	r3, [r7, #8]
   235f0:	0c5b      	lsrs	r3, r3, #17
   235f2:	b2db      	uxtb	r3, r3
   235f4:	221f      	movs	r2, #31
   235f6:	4013      	ands	r3, r2
   235f8:	b2da      	uxtb	r2, r3
   235fa:	687b      	ldr	r3, [r7, #4]
   235fc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   235fe:	68fb      	ldr	r3, [r7, #12]
   23600:	791b      	ldrb	r3, [r3, #4]
   23602:	2b00      	cmp	r3, #0
   23604:	d008      	beq.n	23618 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   23606:	68bb      	ldr	r3, [r7, #8]
   23608:	0b1b      	lsrs	r3, r3, #12
   2360a:	b2db      	uxtb	r3, r3
   2360c:	221f      	movs	r2, #31
   2360e:	4013      	ands	r3, r2
   23610:	b2da      	uxtb	r2, r3
   23612:	687b      	ldr	r3, [r7, #4]
   23614:	709a      	strb	r2, [r3, #2]
   23616:	e010      	b.n	2363a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   23618:	68bb      	ldr	r3, [r7, #8]
   2361a:	0b1b      	lsrs	r3, r3, #12
   2361c:	b2db      	uxtb	r3, r3
   2361e:	220f      	movs	r2, #15
   23620:	4013      	ands	r3, r2
   23622:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   23624:	687b      	ldr	r3, [r7, #4]
   23626:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   23628:	68ba      	ldr	r2, [r7, #8]
   2362a:	2380      	movs	r3, #128	; 0x80
   2362c:	025b      	lsls	r3, r3, #9
   2362e:	4013      	ands	r3, r2
   23630:	1e5a      	subs	r2, r3, #1
   23632:	4193      	sbcs	r3, r2
   23634:	b2da      	uxtb	r2, r3
   23636:	687b      	ldr	r3, [r7, #4]
   23638:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2363a:	68bb      	ldr	r3, [r7, #8]
   2363c:	099b      	lsrs	r3, r3, #6
   2363e:	b2db      	uxtb	r3, r3
   23640:	223f      	movs	r2, #63	; 0x3f
   23642:	4013      	ands	r3, r2
   23644:	b2da      	uxtb	r2, r3
   23646:	687b      	ldr	r3, [r7, #4]
   23648:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2364a:	68bb      	ldr	r3, [r7, #8]
   2364c:	b2db      	uxtb	r3, r3
   2364e:	223f      	movs	r2, #63	; 0x3f
   23650:	4013      	ands	r3, r2
   23652:	b2da      	uxtb	r2, r3
   23654:	687b      	ldr	r3, [r7, #4]
   23656:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   23658:	46c0      	nop			; (mov r8, r8)
   2365a:	46bd      	mov	sp, r7
   2365c:	b004      	add	sp, #16
   2365e:	bd80      	pop	{r7, pc}

00023660 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   23660:	b580      	push	{r7, lr}
   23662:	b084      	sub	sp, #16
   23664:	af00      	add	r7, sp, #0
   23666:	6078      	str	r0, [r7, #4]
   23668:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2366a:	687b      	ldr	r3, [r7, #4]
   2366c:	681b      	ldr	r3, [r3, #0]
   2366e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   23670:	683b      	ldr	r3, [r7, #0]
   23672:	881a      	ldrh	r2, [r3, #0]
   23674:	230e      	movs	r3, #14
   23676:	18fb      	adds	r3, r7, r3
   23678:	2108      	movs	r1, #8
   2367a:	430a      	orrs	r2, r1
   2367c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2367e:	683b      	ldr	r3, [r7, #0]
   23680:	791b      	ldrb	r3, [r3, #4]
   23682:	2201      	movs	r2, #1
   23684:	4053      	eors	r3, r2
   23686:	b2db      	uxtb	r3, r3
   23688:	2b00      	cmp	r3, #0
   2368a:	d007      	beq.n	2369c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   2368c:	230e      	movs	r3, #14
   2368e:	18fb      	adds	r3, r7, r3
   23690:	220e      	movs	r2, #14
   23692:	18ba      	adds	r2, r7, r2
   23694:	8812      	ldrh	r2, [r2, #0]
   23696:	2140      	movs	r1, #64	; 0x40
   23698:	430a      	orrs	r2, r1
   2369a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   2369c:	683b      	ldr	r3, [r7, #0]
   2369e:	789b      	ldrb	r3, [r3, #2]
   236a0:	2b00      	cmp	r3, #0
   236a2:	d007      	beq.n	236b4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   236a4:	230e      	movs	r3, #14
   236a6:	18fb      	adds	r3, r7, r3
   236a8:	220e      	movs	r2, #14
   236aa:	18ba      	adds	r2, r7, r2
   236ac:	8812      	ldrh	r2, [r2, #0]
   236ae:	2180      	movs	r1, #128	; 0x80
   236b0:	430a      	orrs	r2, r1
   236b2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   236b4:	68bb      	ldr	r3, [r7, #8]
   236b6:	220e      	movs	r2, #14
   236b8:	18ba      	adds	r2, r7, r2
   236ba:	8812      	ldrh	r2, [r2, #0]
   236bc:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   236be:	683b      	ldr	r3, [r7, #0]
   236c0:	78db      	ldrb	r3, [r3, #3]
   236c2:	2b00      	cmp	r3, #0
   236c4:	d008      	beq.n	236d8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   236c6:	68bb      	ldr	r3, [r7, #8]
   236c8:	885b      	ldrh	r3, [r3, #2]
   236ca:	b29b      	uxth	r3, r3
   236cc:	2280      	movs	r2, #128	; 0x80
   236ce:	01d2      	lsls	r2, r2, #7
   236d0:	4313      	orrs	r3, r2
   236d2:	b29a      	uxth	r2, r3
   236d4:	68bb      	ldr	r3, [r7, #8]
   236d6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   236d8:	230d      	movs	r3, #13
   236da:	18fb      	adds	r3, r7, r3
   236dc:	2200      	movs	r2, #0
   236de:	701a      	strb	r2, [r3, #0]
   236e0:	e017      	b.n	23712 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   236e2:	230d      	movs	r3, #13
   236e4:	18fb      	adds	r3, r7, r3
   236e6:	781a      	ldrb	r2, [r3, #0]
   236e8:	0013      	movs	r3, r2
   236ea:	009b      	lsls	r3, r3, #2
   236ec:	189b      	adds	r3, r3, r2
   236ee:	005b      	lsls	r3, r3, #1
   236f0:	3308      	adds	r3, #8
   236f2:	683a      	ldr	r2, [r7, #0]
   236f4:	18d1      	adds	r1, r2, r3
   236f6:	230d      	movs	r3, #13
   236f8:	18fb      	adds	r3, r7, r3
   236fa:	781a      	ldrb	r2, [r3, #0]
   236fc:	687b      	ldr	r3, [r7, #4]
   236fe:	0018      	movs	r0, r3
   23700:	4b08      	ldr	r3, [pc, #32]	; (23724 <_rtc_calendar_set_config+0xc4>)
   23702:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   23704:	230d      	movs	r3, #13
   23706:	18fb      	adds	r3, r7, r3
   23708:	781a      	ldrb	r2, [r3, #0]
   2370a:	230d      	movs	r3, #13
   2370c:	18fb      	adds	r3, r7, r3
   2370e:	3201      	adds	r2, #1
   23710:	701a      	strb	r2, [r3, #0]
   23712:	230d      	movs	r3, #13
   23714:	18fb      	adds	r3, r7, r3
   23716:	781b      	ldrb	r3, [r3, #0]
   23718:	2b00      	cmp	r3, #0
   2371a:	d0e2      	beq.n	236e2 <_rtc_calendar_set_config+0x82>
	}
}
   2371c:	46c0      	nop			; (mov r8, r8)
   2371e:	46bd      	mov	sp, r7
   23720:	b004      	add	sp, #16
   23722:	bd80      	pop	{r7, pc}
   23724:	00023849 	.word	0x00023849

00023728 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   23728:	b580      	push	{r7, lr}
   2372a:	b086      	sub	sp, #24
   2372c:	af00      	add	r7, sp, #0
   2372e:	60f8      	str	r0, [r7, #12]
   23730:	60b9      	str	r1, [r7, #8]
   23732:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   23734:	68fb      	ldr	r3, [r7, #12]
   23736:	68ba      	ldr	r2, [r7, #8]
   23738:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2373a:	2120      	movs	r1, #32
   2373c:	2000      	movs	r0, #0
   2373e:	4b18      	ldr	r3, [pc, #96]	; (237a0 <rtc_calendar_init+0x78>)
   23740:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   23742:	2314      	movs	r3, #20
   23744:	18fb      	adds	r3, r7, r3
   23746:	0018      	movs	r0, r3
   23748:	4b16      	ldr	r3, [pc, #88]	; (237a4 <rtc_calendar_init+0x7c>)
   2374a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2374c:	2314      	movs	r3, #20
   2374e:	18fb      	adds	r3, r7, r3
   23750:	2202      	movs	r2, #2
   23752:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   23754:	2314      	movs	r3, #20
   23756:	18fb      	adds	r3, r7, r3
   23758:	0019      	movs	r1, r3
   2375a:	2004      	movs	r0, #4
   2375c:	4b12      	ldr	r3, [pc, #72]	; (237a8 <rtc_calendar_init+0x80>)
   2375e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   23760:	2004      	movs	r0, #4
   23762:	4b12      	ldr	r3, [pc, #72]	; (237ac <rtc_calendar_init+0x84>)
   23764:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   23766:	68fb      	ldr	r3, [r7, #12]
   23768:	0018      	movs	r0, r3
   2376a:	4b11      	ldr	r3, [pc, #68]	; (237b0 <rtc_calendar_init+0x88>)
   2376c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2376e:	687b      	ldr	r3, [r7, #4]
   23770:	791a      	ldrb	r2, [r3, #4]
   23772:	68fb      	ldr	r3, [r7, #12]
   23774:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   23776:	687b      	ldr	r3, [r7, #4]
   23778:	78da      	ldrb	r2, [r3, #3]
   2377a:	68fb      	ldr	r3, [r7, #12]
   2377c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2377e:	687b      	ldr	r3, [r7, #4]
   23780:	88da      	ldrh	r2, [r3, #6]
   23782:	68fb      	ldr	r3, [r7, #12]
   23784:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   23786:	4b0b      	ldr	r3, [pc, #44]	; (237b4 <rtc_calendar_init+0x8c>)
   23788:	68fa      	ldr	r2, [r7, #12]
   2378a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   2378c:	687a      	ldr	r2, [r7, #4]
   2378e:	68fb      	ldr	r3, [r7, #12]
   23790:	0011      	movs	r1, r2
   23792:	0018      	movs	r0, r3
   23794:	4b08      	ldr	r3, [pc, #32]	; (237b8 <rtc_calendar_init+0x90>)
   23796:	4798      	blx	r3
}
   23798:	46c0      	nop			; (mov r8, r8)
   2379a:	46bd      	mov	sp, r7
   2379c:	b006      	add	sp, #24
   2379e:	bd80      	pop	{r7, pc}
   237a0:	00023375 	.word	0x00023375
   237a4:	0002335d 	.word	0x0002335d
   237a8:	0002698d 	.word	0x0002698d
   237ac:	000269d1 	.word	0x000269d1
   237b0:	000234e9 	.word	0x000234e9
   237b4:	20005634 	.word	0x20005634
   237b8:	00023661 	.word	0x00023661

000237bc <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   237bc:	b580      	push	{r7, lr}
   237be:	b084      	sub	sp, #16
   237c0:	af00      	add	r7, sp, #0
   237c2:	6078      	str	r0, [r7, #4]
   237c4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   237c6:	687b      	ldr	r3, [r7, #4]
   237c8:	681b      	ldr	r3, [r3, #0]
   237ca:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   237cc:	687b      	ldr	r3, [r7, #4]
   237ce:	795b      	ldrb	r3, [r3, #5]
   237d0:	2201      	movs	r2, #1
   237d2:	4053      	eors	r3, r2
   237d4:	b2db      	uxtb	r3, r3
   237d6:	2b00      	cmp	r3, #0
   237d8:	d00a      	beq.n	237f0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   237da:	68fb      	ldr	r3, [r7, #12]
   237dc:	4a16      	ldr	r2, [pc, #88]	; (23838 <rtc_calendar_get_time+0x7c>)
   237de:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   237e0:	46c0      	nop			; (mov r8, r8)
   237e2:	687b      	ldr	r3, [r7, #4]
   237e4:	0018      	movs	r0, r3
   237e6:	4b15      	ldr	r3, [pc, #84]	; (2383c <rtc_calendar_get_time+0x80>)
   237e8:	4798      	blx	r3
   237ea:	1e03      	subs	r3, r0, #0
   237ec:	d1f9      	bne.n	237e2 <rtc_calendar_get_time+0x26>
   237ee:	e016      	b.n	2381e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   237f0:	68fb      	ldr	r3, [r7, #12]
   237f2:	885b      	ldrh	r3, [r3, #2]
   237f4:	b29b      	uxth	r3, r3
   237f6:	001a      	movs	r2, r3
   237f8:	2380      	movs	r3, #128	; 0x80
   237fa:	01db      	lsls	r3, r3, #7
   237fc:	4013      	ands	r3, r2
   237fe:	d10e      	bne.n	2381e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   23800:	68fb      	ldr	r3, [r7, #12]
   23802:	885b      	ldrh	r3, [r3, #2]
   23804:	b29b      	uxth	r3, r3
   23806:	4a0e      	ldr	r2, [pc, #56]	; (23840 <rtc_calendar_get_time+0x84>)
   23808:	4313      	orrs	r3, r2
   2380a:	b29a      	uxth	r2, r3
   2380c:	68fb      	ldr	r3, [r7, #12]
   2380e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   23810:	46c0      	nop			; (mov r8, r8)
   23812:	687b      	ldr	r3, [r7, #4]
   23814:	0018      	movs	r0, r3
   23816:	4b09      	ldr	r3, [pc, #36]	; (2383c <rtc_calendar_get_time+0x80>)
   23818:	4798      	blx	r3
   2381a:	1e03      	subs	r3, r0, #0
   2381c:	d1f9      	bne.n	23812 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   2381e:	68fb      	ldr	r3, [r7, #12]
   23820:	691b      	ldr	r3, [r3, #16]
   23822:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   23824:	683a      	ldr	r2, [r7, #0]
   23826:	68b9      	ldr	r1, [r7, #8]
   23828:	687b      	ldr	r3, [r7, #4]
   2382a:	0018      	movs	r0, r3
   2382c:	4b05      	ldr	r3, [pc, #20]	; (23844 <rtc_calendar_get_time+0x88>)
   2382e:	4798      	blx	r3
}
   23830:	46c0      	nop			; (mov r8, r8)
   23832:	46bd      	mov	sp, r7
   23834:	b004      	add	sp, #16
   23836:	bd80      	pop	{r7, pc}
   23838:	ffff8000 	.word	0xffff8000
   2383c:	0002342d 	.word	0x0002342d
   23840:	ffffc000 	.word	0xffffc000
   23844:	000235c1 	.word	0x000235c1

00023848 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   23848:	b580      	push	{r7, lr}
   2384a:	b086      	sub	sp, #24
   2384c:	af00      	add	r7, sp, #0
   2384e:	60f8      	str	r0, [r7, #12]
   23850:	60b9      	str	r1, [r7, #8]
   23852:	1dfb      	adds	r3, r7, #7
   23854:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   23856:	68fb      	ldr	r3, [r7, #12]
   23858:	681b      	ldr	r3, [r3, #0]
   2385a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   2385c:	1dfb      	adds	r3, r7, #7
   2385e:	781b      	ldrb	r3, [r3, #0]
   23860:	2b01      	cmp	r3, #1
   23862:	d901      	bls.n	23868 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   23864:	2317      	movs	r3, #23
   23866:	e021      	b.n	238ac <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   23868:	68ba      	ldr	r2, [r7, #8]
   2386a:	68fb      	ldr	r3, [r7, #12]
   2386c:	0011      	movs	r1, r2
   2386e:	0018      	movs	r0, r3
   23870:	4b10      	ldr	r3, [pc, #64]	; (238b4 <rtc_calendar_set_alarm+0x6c>)
   23872:	4798      	blx	r3
   23874:	0003      	movs	r3, r0
   23876:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   23878:	46c0      	nop			; (mov r8, r8)
   2387a:	68fb      	ldr	r3, [r7, #12]
   2387c:	0018      	movs	r0, r3
   2387e:	4b0e      	ldr	r3, [pc, #56]	; (238b8 <rtc_calendar_set_alarm+0x70>)
   23880:	4798      	blx	r3
   23882:	1e03      	subs	r3, r0, #0
   23884:	d1f9      	bne.n	2387a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   23886:	1dfb      	adds	r3, r7, #7
   23888:	781a      	ldrb	r2, [r3, #0]
   2388a:	697b      	ldr	r3, [r7, #20]
   2388c:	3203      	adds	r2, #3
   2388e:	00d2      	lsls	r2, r2, #3
   23890:	6939      	ldr	r1, [r7, #16]
   23892:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   23894:	1dfb      	adds	r3, r7, #7
   23896:	781b      	ldrb	r3, [r3, #0]
   23898:	68ba      	ldr	r2, [r7, #8]
   2389a:	7a11      	ldrb	r1, [r2, #8]
   2389c:	697a      	ldr	r2, [r7, #20]
   2389e:	3303      	adds	r3, #3
   238a0:	00db      	lsls	r3, r3, #3
   238a2:	18d3      	adds	r3, r2, r3
   238a4:	3304      	adds	r3, #4
   238a6:	1c0a      	adds	r2, r1, #0
   238a8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   238aa:	2300      	movs	r3, #0
}
   238ac:	0018      	movs	r0, r3
   238ae:	46bd      	mov	sp, r7
   238b0:	b006      	add	sp, #24
   238b2:	bd80      	pop	{r7, pc}
   238b4:	00023539 	.word	0x00023539
   238b8:	0002342d 	.word	0x0002342d

000238bc <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   238bc:	b580      	push	{r7, lr}
   238be:	b086      	sub	sp, #24
   238c0:	af00      	add	r7, sp, #0
   238c2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   238c4:	4b28      	ldr	r3, [pc, #160]	; (23968 <_rtc_interrupt_handler+0xac>)
   238c6:	687a      	ldr	r2, [r7, #4]
   238c8:	0092      	lsls	r2, r2, #2
   238ca:	58d3      	ldr	r3, [r2, r3]
   238cc:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   238ce:	697b      	ldr	r3, [r7, #20]
   238d0:	681b      	ldr	r3, [r3, #0]
   238d2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   238d4:	230e      	movs	r3, #14
   238d6:	18fb      	adds	r3, r7, r3
   238d8:	697a      	ldr	r2, [r7, #20]
   238da:	8a52      	ldrh	r2, [r2, #18]
   238dc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   238de:	697b      	ldr	r3, [r7, #20]
   238e0:	8a1b      	ldrh	r3, [r3, #16]
   238e2:	b29a      	uxth	r2, r3
   238e4:	230e      	movs	r3, #14
   238e6:	18fb      	adds	r3, r7, r3
   238e8:	210e      	movs	r1, #14
   238ea:	1879      	adds	r1, r7, r1
   238ec:	8809      	ldrh	r1, [r1, #0]
   238ee:	400a      	ands	r2, r1
   238f0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   238f2:	693b      	ldr	r3, [r7, #16]
   238f4:	7a1b      	ldrb	r3, [r3, #8]
   238f6:	b2da      	uxtb	r2, r3
   238f8:	230c      	movs	r3, #12
   238fa:	18fb      	adds	r3, r7, r3
   238fc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   238fe:	693b      	ldr	r3, [r7, #16]
   23900:	79db      	ldrb	r3, [r3, #7]
   23902:	b2db      	uxtb	r3, r3
   23904:	b29a      	uxth	r2, r3
   23906:	230c      	movs	r3, #12
   23908:	18fb      	adds	r3, r7, r3
   2390a:	210c      	movs	r1, #12
   2390c:	1879      	adds	r1, r7, r1
   2390e:	8809      	ldrh	r1, [r1, #0]
   23910:	400a      	ands	r2, r1
   23912:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   23914:	230c      	movs	r3, #12
   23916:	18fb      	adds	r3, r7, r3
   23918:	881b      	ldrh	r3, [r3, #0]
   2391a:	2280      	movs	r2, #128	; 0x80
   2391c:	4013      	ands	r3, r2
   2391e:	d00c      	beq.n	2393a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   23920:	230e      	movs	r3, #14
   23922:	18fb      	adds	r3, r7, r3
   23924:	881b      	ldrh	r3, [r3, #0]
   23926:	2202      	movs	r2, #2
   23928:	4013      	ands	r3, r2
   2392a:	d002      	beq.n	23932 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   2392c:	697b      	ldr	r3, [r7, #20]
   2392e:	68db      	ldr	r3, [r3, #12]
   23930:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   23932:	693b      	ldr	r3, [r7, #16]
   23934:	2280      	movs	r2, #128	; 0x80
   23936:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   23938:	e011      	b.n	2395e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   2393a:	230c      	movs	r3, #12
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	881b      	ldrh	r3, [r3, #0]
   23940:	2201      	movs	r2, #1
   23942:	4013      	ands	r3, r2
   23944:	d00b      	beq.n	2395e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   23946:	230e      	movs	r3, #14
   23948:	18fb      	adds	r3, r7, r3
   2394a:	881b      	ldrh	r3, [r3, #0]
   2394c:	2201      	movs	r2, #1
   2394e:	4013      	ands	r3, r2
   23950:	d002      	beq.n	23958 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   23952:	697b      	ldr	r3, [r7, #20]
   23954:	689b      	ldr	r3, [r3, #8]
   23956:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   23958:	693b      	ldr	r3, [r7, #16]
   2395a:	2201      	movs	r2, #1
   2395c:	721a      	strb	r2, [r3, #8]
}
   2395e:	46c0      	nop			; (mov r8, r8)
   23960:	46bd      	mov	sp, r7
   23962:	b006      	add	sp, #24
   23964:	bd80      	pop	{r7, pc}
   23966:	46c0      	nop			; (mov r8, r8)
   23968:	20005634 	.word	0x20005634

0002396c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   2396c:	b580      	push	{r7, lr}
   2396e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   23970:	2000      	movs	r0, #0
   23972:	4b02      	ldr	r3, [pc, #8]	; (2397c <RTC_Handler+0x10>)
   23974:	4798      	blx	r3
}
   23976:	46c0      	nop			; (mov r8, r8)
   23978:	46bd      	mov	sp, r7
   2397a:	bd80      	pop	{r7, pc}
   2397c:	000238bd 	.word	0x000238bd

00023980 <system_gclk_chan_get_config_defaults>:
{
   23980:	b580      	push	{r7, lr}
   23982:	b082      	sub	sp, #8
   23984:	af00      	add	r7, sp, #0
   23986:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   23988:	687b      	ldr	r3, [r7, #4]
   2398a:	2200      	movs	r2, #0
   2398c:	701a      	strb	r2, [r3, #0]
}
   2398e:	46c0      	nop			; (mov r8, r8)
   23990:	46bd      	mov	sp, r7
   23992:	b002      	add	sp, #8
   23994:	bd80      	pop	{r7, pc}

00023996 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   23996:	b5f0      	push	{r4, r5, r6, r7, lr}
   23998:	b08d      	sub	sp, #52	; 0x34
   2399a:	af00      	add	r7, sp, #0
   2399c:	60b8      	str	r0, [r7, #8]
   2399e:	60f9      	str	r1, [r7, #12]
   239a0:	603a      	str	r2, [r7, #0]
   239a2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   239a4:	2300      	movs	r3, #0
   239a6:	2400      	movs	r4, #0
   239a8:	623b      	str	r3, [r7, #32]
   239aa:	627c      	str	r4, [r7, #36]	; 0x24
   239ac:	2300      	movs	r3, #0
   239ae:	2400      	movs	r4, #0
   239b0:	61bb      	str	r3, [r7, #24]
   239b2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   239b4:	233f      	movs	r3, #63	; 0x3f
   239b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   239b8:	e053      	b.n	23a62 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   239ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   239bc:	3b20      	subs	r3, #32
   239be:	2b00      	cmp	r3, #0
   239c0:	db04      	blt.n	239cc <long_division+0x36>
   239c2:	2201      	movs	r2, #1
   239c4:	409a      	lsls	r2, r3
   239c6:	0013      	movs	r3, r2
   239c8:	617b      	str	r3, [r7, #20]
   239ca:	e00b      	b.n	239e4 <long_division+0x4e>
   239cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   239ce:	2220      	movs	r2, #32
   239d0:	1ad3      	subs	r3, r2, r3
   239d2:	2201      	movs	r2, #1
   239d4:	40da      	lsrs	r2, r3
   239d6:	0013      	movs	r3, r2
   239d8:	2100      	movs	r1, #0
   239da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   239dc:	4091      	lsls	r1, r2
   239de:	000a      	movs	r2, r1
   239e0:	4313      	orrs	r3, r2
   239e2:	617b      	str	r3, [r7, #20]
   239e4:	2201      	movs	r2, #1
   239e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   239e8:	409a      	lsls	r2, r3
   239ea:	0013      	movs	r3, r2
   239ec:	613b      	str	r3, [r7, #16]

		r = r << 1;
   239ee:	69bb      	ldr	r3, [r7, #24]
   239f0:	69fc      	ldr	r4, [r7, #28]
   239f2:	18db      	adds	r3, r3, r3
   239f4:	4164      	adcs	r4, r4
   239f6:	61bb      	str	r3, [r7, #24]
   239f8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   239fa:	68bb      	ldr	r3, [r7, #8]
   239fc:	693a      	ldr	r2, [r7, #16]
   239fe:	401a      	ands	r2, r3
   23a00:	0015      	movs	r5, r2
   23a02:	68fb      	ldr	r3, [r7, #12]
   23a04:	697a      	ldr	r2, [r7, #20]
   23a06:	401a      	ands	r2, r3
   23a08:	0016      	movs	r6, r2
   23a0a:	002b      	movs	r3, r5
   23a0c:	4333      	orrs	r3, r6
   23a0e:	d007      	beq.n	23a20 <long_division+0x8a>
			r |= 0x01;
   23a10:	69bb      	ldr	r3, [r7, #24]
   23a12:	2201      	movs	r2, #1
   23a14:	4313      	orrs	r3, r2
   23a16:	61bb      	str	r3, [r7, #24]
   23a18:	69fb      	ldr	r3, [r7, #28]
   23a1a:	2200      	movs	r2, #0
   23a1c:	4313      	orrs	r3, r2
   23a1e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   23a20:	687a      	ldr	r2, [r7, #4]
   23a22:	69fb      	ldr	r3, [r7, #28]
   23a24:	429a      	cmp	r2, r3
   23a26:	d819      	bhi.n	23a5c <long_division+0xc6>
   23a28:	687a      	ldr	r2, [r7, #4]
   23a2a:	69fb      	ldr	r3, [r7, #28]
   23a2c:	429a      	cmp	r2, r3
   23a2e:	d103      	bne.n	23a38 <long_division+0xa2>
   23a30:	683a      	ldr	r2, [r7, #0]
   23a32:	69bb      	ldr	r3, [r7, #24]
   23a34:	429a      	cmp	r2, r3
   23a36:	d811      	bhi.n	23a5c <long_division+0xc6>
			r = r - d;
   23a38:	69b9      	ldr	r1, [r7, #24]
   23a3a:	69fa      	ldr	r2, [r7, #28]
   23a3c:	683b      	ldr	r3, [r7, #0]
   23a3e:	687c      	ldr	r4, [r7, #4]
   23a40:	1ac9      	subs	r1, r1, r3
   23a42:	41a2      	sbcs	r2, r4
   23a44:	000b      	movs	r3, r1
   23a46:	0014      	movs	r4, r2
   23a48:	61bb      	str	r3, [r7, #24]
   23a4a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   23a4c:	6a3a      	ldr	r2, [r7, #32]
   23a4e:	693b      	ldr	r3, [r7, #16]
   23a50:	4313      	orrs	r3, r2
   23a52:	623b      	str	r3, [r7, #32]
   23a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23a56:	697b      	ldr	r3, [r7, #20]
   23a58:	4313      	orrs	r3, r2
   23a5a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   23a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23a5e:	3b01      	subs	r3, #1
   23a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   23a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23a64:	2b00      	cmp	r3, #0
   23a66:	daa8      	bge.n	239ba <long_division+0x24>
		}
	}

	return q;
   23a68:	6a3b      	ldr	r3, [r7, #32]
   23a6a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   23a6c:	0018      	movs	r0, r3
   23a6e:	0021      	movs	r1, r4
   23a70:	46bd      	mov	sp, r7
   23a72:	b00d      	add	sp, #52	; 0x34
   23a74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023a76 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   23a76:	b580      	push	{r7, lr}
   23a78:	b086      	sub	sp, #24
   23a7a:	af00      	add	r7, sp, #0
   23a7c:	60f8      	str	r0, [r7, #12]
   23a7e:	60b9      	str	r1, [r7, #8]
   23a80:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   23a82:	2316      	movs	r3, #22
   23a84:	18fb      	adds	r3, r7, r3
   23a86:	2200      	movs	r2, #0
   23a88:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   23a8a:	68bb      	ldr	r3, [r7, #8]
   23a8c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   23a8e:	68bb      	ldr	r3, [r7, #8]
   23a90:	085a      	lsrs	r2, r3, #1
   23a92:	68fb      	ldr	r3, [r7, #12]
   23a94:	429a      	cmp	r2, r3
   23a96:	d201      	bcs.n	23a9c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   23a98:	2340      	movs	r3, #64	; 0x40
   23a9a:	e026      	b.n	23aea <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   23a9c:	68bb      	ldr	r3, [r7, #8]
   23a9e:	085b      	lsrs	r3, r3, #1
   23aa0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   23aa2:	e00a      	b.n	23aba <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   23aa4:	693a      	ldr	r2, [r7, #16]
   23aa6:	68fb      	ldr	r3, [r7, #12]
   23aa8:	1ad3      	subs	r3, r2, r3
   23aaa:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   23aac:	2316      	movs	r3, #22
   23aae:	18fb      	adds	r3, r7, r3
   23ab0:	881a      	ldrh	r2, [r3, #0]
   23ab2:	2316      	movs	r3, #22
   23ab4:	18fb      	adds	r3, r7, r3
   23ab6:	3201      	adds	r2, #1
   23ab8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   23aba:	693a      	ldr	r2, [r7, #16]
   23abc:	68fb      	ldr	r3, [r7, #12]
   23abe:	429a      	cmp	r2, r3
   23ac0:	d2f0      	bcs.n	23aa4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   23ac2:	2316      	movs	r3, #22
   23ac4:	18fb      	adds	r3, r7, r3
   23ac6:	2216      	movs	r2, #22
   23ac8:	18ba      	adds	r2, r7, r2
   23aca:	8812      	ldrh	r2, [r2, #0]
   23acc:	3a01      	subs	r2, #1
   23ace:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   23ad0:	2316      	movs	r3, #22
   23ad2:	18fb      	adds	r3, r7, r3
   23ad4:	881b      	ldrh	r3, [r3, #0]
   23ad6:	2bff      	cmp	r3, #255	; 0xff
   23ad8:	d901      	bls.n	23ade <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   23ada:	2340      	movs	r3, #64	; 0x40
   23adc:	e005      	b.n	23aea <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   23ade:	687b      	ldr	r3, [r7, #4]
   23ae0:	2216      	movs	r2, #22
   23ae2:	18ba      	adds	r2, r7, r2
   23ae4:	8812      	ldrh	r2, [r2, #0]
   23ae6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   23ae8:	2300      	movs	r3, #0
	}
}
   23aea:	0018      	movs	r0, r3
   23aec:	46bd      	mov	sp, r7
   23aee:	b006      	add	sp, #24
   23af0:	bd80      	pop	{r7, pc}
	...

00023af4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   23af4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23af6:	b0a1      	sub	sp, #132	; 0x84
   23af8:	af00      	add	r7, sp, #0
   23afa:	64f8      	str	r0, [r7, #76]	; 0x4c
   23afc:	64b9      	str	r1, [r7, #72]	; 0x48
   23afe:	647a      	str	r2, [r7, #68]	; 0x44
   23b00:	2243      	movs	r2, #67	; 0x43
   23b02:	18ba      	adds	r2, r7, r2
   23b04:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   23b06:	2300      	movs	r3, #0
   23b08:	2400      	movs	r4, #0
   23b0a:	673b      	str	r3, [r7, #112]	; 0x70
   23b0c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   23b0e:	2300      	movs	r3, #0
   23b10:	2400      	movs	r4, #0
   23b12:	66bb      	str	r3, [r7, #104]	; 0x68
   23b14:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   23b16:	2300      	movs	r3, #0
   23b18:	2400      	movs	r4, #0
   23b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   23b1c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   23b1e:	2300      	movs	r3, #0
   23b20:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   23b22:	2358      	movs	r3, #88	; 0x58
   23b24:	2240      	movs	r2, #64	; 0x40
   23b26:	4694      	mov	ip, r2
   23b28:	44bc      	add	ip, r7
   23b2a:	4463      	add	r3, ip
   23b2c:	781a      	ldrb	r2, [r3, #0]
   23b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23b30:	435a      	muls	r2, r3
   23b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23b34:	429a      	cmp	r2, r3
   23b36:	d901      	bls.n	23b3c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   23b38:	2340      	movs	r3, #64	; 0x40
   23b3a:	e0b3      	b.n	23ca4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   23b3c:	2343      	movs	r3, #67	; 0x43
   23b3e:	18fb      	adds	r3, r7, r3
   23b40:	781b      	ldrb	r3, [r3, #0]
   23b42:	2b00      	cmp	r3, #0
   23b44:	d13d      	bne.n	23bc2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   23b46:	2358      	movs	r3, #88	; 0x58
   23b48:	2240      	movs	r2, #64	; 0x40
   23b4a:	4694      	mov	ip, r2
   23b4c:	44bc      	add	ip, r7
   23b4e:	4463      	add	r3, ip
   23b50:	781b      	ldrb	r3, [r3, #0]
   23b52:	b2db      	uxtb	r3, r3
   23b54:	613b      	str	r3, [r7, #16]
   23b56:	2300      	movs	r3, #0
   23b58:	617b      	str	r3, [r7, #20]
   23b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23b5c:	60bb      	str	r3, [r7, #8]
   23b5e:	2300      	movs	r3, #0
   23b60:	60fb      	str	r3, [r7, #12]
   23b62:	4c52      	ldr	r4, [pc, #328]	; (23cac <_sercom_get_async_baud_val+0x1b8>)
   23b64:	68ba      	ldr	r2, [r7, #8]
   23b66:	68fb      	ldr	r3, [r7, #12]
   23b68:	6938      	ldr	r0, [r7, #16]
   23b6a:	6979      	ldr	r1, [r7, #20]
   23b6c:	47a0      	blx	r4
   23b6e:	0003      	movs	r3, r0
   23b70:	000c      	movs	r4, r1
   23b72:	001b      	movs	r3, r3
   23b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   23b76:	2300      	movs	r3, #0
   23b78:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   23b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23b7c:	603b      	str	r3, [r7, #0]
   23b7e:	2300      	movs	r3, #0
   23b80:	607b      	str	r3, [r7, #4]
   23b82:	6db8      	ldr	r0, [r7, #88]	; 0x58
   23b84:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   23b86:	683a      	ldr	r2, [r7, #0]
   23b88:	687b      	ldr	r3, [r7, #4]
   23b8a:	4c49      	ldr	r4, [pc, #292]	; (23cb0 <_sercom_get_async_baud_val+0x1bc>)
   23b8c:	47a0      	blx	r4
   23b8e:	0003      	movs	r3, r0
   23b90:	000c      	movs	r4, r1
   23b92:	673b      	str	r3, [r7, #112]	; 0x70
   23b94:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   23b96:	2100      	movs	r1, #0
   23b98:	2201      	movs	r2, #1
   23b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23b9c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   23b9e:	1ac9      	subs	r1, r1, r3
   23ba0:	41a2      	sbcs	r2, r4
   23ba2:	000b      	movs	r3, r1
   23ba4:	0014      	movs	r4, r2
   23ba6:	66bb      	str	r3, [r7, #104]	; 0x68
   23ba8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   23baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23bac:	0c1b      	lsrs	r3, r3, #16
   23bae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23bb0:	0416      	lsls	r6, r2, #16
   23bb2:	431e      	orrs	r6, r3
   23bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23bb6:	041d      	lsls	r5, r3, #16
   23bb8:	0033      	movs	r3, r6
   23bba:	67bb      	str	r3, [r7, #120]	; 0x78
   23bbc:	2300      	movs	r3, #0
   23bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   23bc0:	e06a      	b.n	23c98 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   23bc2:	2343      	movs	r3, #67	; 0x43
   23bc4:	18fb      	adds	r3, r7, r3
   23bc6:	781b      	ldrb	r3, [r3, #0]
   23bc8:	2b01      	cmp	r3, #1
   23bca:	d165      	bne.n	23c98 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   23bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23bce:	633b      	str	r3, [r7, #48]	; 0x30
   23bd0:	2300      	movs	r3, #0
   23bd2:	637b      	str	r3, [r7, #52]	; 0x34
   23bd4:	2358      	movs	r3, #88	; 0x58
   23bd6:	2240      	movs	r2, #64	; 0x40
   23bd8:	4694      	mov	ip, r2
   23bda:	44bc      	add	ip, r7
   23bdc:	4463      	add	r3, ip
   23bde:	781b      	ldrb	r3, [r3, #0]
   23be0:	b2db      	uxtb	r3, r3
   23be2:	62bb      	str	r3, [r7, #40]	; 0x28
   23be4:	2300      	movs	r3, #0
   23be6:	62fb      	str	r3, [r7, #44]	; 0x2c
   23be8:	4c30      	ldr	r4, [pc, #192]	; (23cac <_sercom_get_async_baud_val+0x1b8>)
   23bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   23bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
   23bf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   23bf2:	47a0      	blx	r4
   23bf4:	0003      	movs	r3, r0
   23bf6:	000c      	movs	r4, r1
   23bf8:	65bb      	str	r3, [r7, #88]	; 0x58
   23bfa:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   23bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23bfe:	623b      	str	r3, [r7, #32]
   23c00:	2300      	movs	r3, #0
   23c02:	627b      	str	r3, [r7, #36]	; 0x24
   23c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23c06:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   23c08:	001a      	movs	r2, r3
   23c0a:	0023      	movs	r3, r4
   23c0c:	6a38      	ldr	r0, [r7, #32]
   23c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   23c10:	4c27      	ldr	r4, [pc, #156]	; (23cb0 <_sercom_get_async_baud_val+0x1bc>)
   23c12:	47a0      	blx	r4
   23c14:	0003      	movs	r3, r0
   23c16:	000c      	movs	r4, r1
   23c18:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   23c1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   23c1c:	2380      	movs	r3, #128	; 0x80
   23c1e:	019b      	lsls	r3, r3, #6
   23c20:	429a      	cmp	r2, r3
   23c22:	d901      	bls.n	23c28 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   23c24:	2340      	movs	r3, #64	; 0x40
   23c26:	e03d      	b.n	23ca4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   23c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23c2a:	61bb      	str	r3, [r7, #24]
   23c2c:	2300      	movs	r3, #0
   23c2e:	61fb      	str	r3, [r7, #28]
   23c30:	69b9      	ldr	r1, [r7, #24]
   23c32:	69fa      	ldr	r2, [r7, #28]
   23c34:	000b      	movs	r3, r1
   23c36:	0f5b      	lsrs	r3, r3, #29
   23c38:	0010      	movs	r0, r2
   23c3a:	00c0      	lsls	r0, r0, #3
   23c3c:	63f8      	str	r0, [r7, #60]	; 0x3c
   23c3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   23c40:	4318      	orrs	r0, r3
   23c42:	63f8      	str	r0, [r7, #60]	; 0x3c
   23c44:	000b      	movs	r3, r1
   23c46:	00db      	lsls	r3, r3, #3
   23c48:	63bb      	str	r3, [r7, #56]	; 0x38
   23c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23c4c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   23c4e:	001a      	movs	r2, r3
   23c50:	0023      	movs	r3, r4
   23c52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   23c54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   23c56:	4c16      	ldr	r4, [pc, #88]	; (23cb0 <_sercom_get_async_baud_val+0x1bc>)
   23c58:	47a0      	blx	r4
   23c5a:	0003      	movs	r3, r0
   23c5c:	000c      	movs	r4, r1
   23c5e:	65bb      	str	r3, [r7, #88]	; 0x58
   23c60:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   23c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23c64:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   23c66:	b2d9      	uxtb	r1, r3
   23c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23c6a:	b2db      	uxtb	r3, r3
   23c6c:	00db      	lsls	r3, r3, #3
   23c6e:	b2da      	uxtb	r2, r3
   23c70:	2317      	movs	r3, #23
   23c72:	2040      	movs	r0, #64	; 0x40
   23c74:	4684      	mov	ip, r0
   23c76:	44bc      	add	ip, r7
   23c78:	4463      	add	r3, ip
   23c7a:	1a8a      	subs	r2, r1, r2
   23c7c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   23c7e:	2317      	movs	r3, #23
   23c80:	2240      	movs	r2, #64	; 0x40
   23c82:	4694      	mov	ip, r2
   23c84:	44bc      	add	ip, r7
   23c86:	4463      	add	r3, ip
   23c88:	781b      	ldrb	r3, [r3, #0]
   23c8a:	035b      	lsls	r3, r3, #13
   23c8c:	001a      	movs	r2, r3
   23c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23c90:	4313      	orrs	r3, r2
   23c92:	67bb      	str	r3, [r7, #120]	; 0x78
   23c94:	2300      	movs	r3, #0
   23c96:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   23c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   23c9a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   23c9c:	b29a      	uxth	r2, r3
   23c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23ca0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   23ca2:	2300      	movs	r3, #0
}
   23ca4:	0018      	movs	r0, r3
   23ca6:	46bd      	mov	sp, r7
   23ca8:	b021      	add	sp, #132	; 0x84
   23caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23cac:	0003014d 	.word	0x0003014d
   23cb0:	00023997 	.word	0x00023997

00023cb4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   23cb4:	b580      	push	{r7, lr}
   23cb6:	b084      	sub	sp, #16
   23cb8:	af00      	add	r7, sp, #0
   23cba:	0002      	movs	r2, r0
   23cbc:	1dfb      	adds	r3, r7, #7
   23cbe:	701a      	strb	r2, [r3, #0]
   23cc0:	1dbb      	adds	r3, r7, #6
   23cc2:	1c0a      	adds	r2, r1, #0
   23cc4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   23cc6:	4b1a      	ldr	r3, [pc, #104]	; (23d30 <sercom_set_gclk_generator+0x7c>)
   23cc8:	781b      	ldrb	r3, [r3, #0]
   23cca:	2201      	movs	r2, #1
   23ccc:	4053      	eors	r3, r2
   23cce:	b2db      	uxtb	r3, r3
   23cd0:	2b00      	cmp	r3, #0
   23cd2:	d103      	bne.n	23cdc <sercom_set_gclk_generator+0x28>
   23cd4:	1dbb      	adds	r3, r7, #6
   23cd6:	781b      	ldrb	r3, [r3, #0]
   23cd8:	2b00      	cmp	r3, #0
   23cda:	d01b      	beq.n	23d14 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   23cdc:	230c      	movs	r3, #12
   23cde:	18fb      	adds	r3, r7, r3
   23ce0:	0018      	movs	r0, r3
   23ce2:	4b14      	ldr	r3, [pc, #80]	; (23d34 <sercom_set_gclk_generator+0x80>)
   23ce4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   23ce6:	230c      	movs	r3, #12
   23ce8:	18fb      	adds	r3, r7, r3
   23cea:	1dfa      	adds	r2, r7, #7
   23cec:	7812      	ldrb	r2, [r2, #0]
   23cee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   23cf0:	230c      	movs	r3, #12
   23cf2:	18fb      	adds	r3, r7, r3
   23cf4:	0019      	movs	r1, r3
   23cf6:	2013      	movs	r0, #19
   23cf8:	4b0f      	ldr	r3, [pc, #60]	; (23d38 <sercom_set_gclk_generator+0x84>)
   23cfa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   23cfc:	2013      	movs	r0, #19
   23cfe:	4b0f      	ldr	r3, [pc, #60]	; (23d3c <sercom_set_gclk_generator+0x88>)
   23d00:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   23d02:	4b0b      	ldr	r3, [pc, #44]	; (23d30 <sercom_set_gclk_generator+0x7c>)
   23d04:	1dfa      	adds	r2, r7, #7
   23d06:	7812      	ldrb	r2, [r2, #0]
   23d08:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   23d0a:	4b09      	ldr	r3, [pc, #36]	; (23d30 <sercom_set_gclk_generator+0x7c>)
   23d0c:	2201      	movs	r2, #1
   23d0e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   23d10:	2300      	movs	r3, #0
   23d12:	e008      	b.n	23d26 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   23d14:	4b06      	ldr	r3, [pc, #24]	; (23d30 <sercom_set_gclk_generator+0x7c>)
   23d16:	785b      	ldrb	r3, [r3, #1]
   23d18:	1dfa      	adds	r2, r7, #7
   23d1a:	7812      	ldrb	r2, [r2, #0]
   23d1c:	429a      	cmp	r2, r3
   23d1e:	d101      	bne.n	23d24 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   23d20:	2300      	movs	r3, #0
   23d22:	e000      	b.n	23d26 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   23d24:	231d      	movs	r3, #29
}
   23d26:	0018      	movs	r0, r3
   23d28:	46bd      	mov	sp, r7
   23d2a:	b004      	add	sp, #16
   23d2c:	bd80      	pop	{r7, pc}
   23d2e:	46c0      	nop			; (mov r8, r8)
   23d30:	20003d3c 	.word	0x20003d3c
   23d34:	00023981 	.word	0x00023981
   23d38:	0002698d 	.word	0x0002698d
   23d3c:	000269d1 	.word	0x000269d1

00023d40 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   23d40:	b580      	push	{r7, lr}
   23d42:	b082      	sub	sp, #8
   23d44:	af00      	add	r7, sp, #0
   23d46:	6078      	str	r0, [r7, #4]
   23d48:	000a      	movs	r2, r1
   23d4a:	1cfb      	adds	r3, r7, #3
   23d4c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   23d4e:	687b      	ldr	r3, [r7, #4]
   23d50:	4a4d      	ldr	r2, [pc, #308]	; (23e88 <_sercom_get_default_pad+0x148>)
   23d52:	4293      	cmp	r3, r2
   23d54:	d03f      	beq.n	23dd6 <_sercom_get_default_pad+0x96>
   23d56:	4a4c      	ldr	r2, [pc, #304]	; (23e88 <_sercom_get_default_pad+0x148>)
   23d58:	4293      	cmp	r3, r2
   23d5a:	d806      	bhi.n	23d6a <_sercom_get_default_pad+0x2a>
   23d5c:	4a4b      	ldr	r2, [pc, #300]	; (23e8c <_sercom_get_default_pad+0x14c>)
   23d5e:	4293      	cmp	r3, r2
   23d60:	d00f      	beq.n	23d82 <_sercom_get_default_pad+0x42>
   23d62:	4a4b      	ldr	r2, [pc, #300]	; (23e90 <_sercom_get_default_pad+0x150>)
   23d64:	4293      	cmp	r3, r2
   23d66:	d021      	beq.n	23dac <_sercom_get_default_pad+0x6c>
   23d68:	e089      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23d6a:	4a4a      	ldr	r2, [pc, #296]	; (23e94 <_sercom_get_default_pad+0x154>)
   23d6c:	4293      	cmp	r3, r2
   23d6e:	d100      	bne.n	23d72 <_sercom_get_default_pad+0x32>
   23d70:	e05b      	b.n	23e2a <_sercom_get_default_pad+0xea>
   23d72:	4a49      	ldr	r2, [pc, #292]	; (23e98 <_sercom_get_default_pad+0x158>)
   23d74:	4293      	cmp	r3, r2
   23d76:	d100      	bne.n	23d7a <_sercom_get_default_pad+0x3a>
   23d78:	e06c      	b.n	23e54 <_sercom_get_default_pad+0x114>
   23d7a:	4a48      	ldr	r2, [pc, #288]	; (23e9c <_sercom_get_default_pad+0x15c>)
   23d7c:	4293      	cmp	r3, r2
   23d7e:	d03f      	beq.n	23e00 <_sercom_get_default_pad+0xc0>
   23d80:	e07d      	b.n	23e7e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   23d82:	1cfb      	adds	r3, r7, #3
   23d84:	781b      	ldrb	r3, [r3, #0]
   23d86:	2b01      	cmp	r3, #1
   23d88:	d00a      	beq.n	23da0 <_sercom_get_default_pad+0x60>
   23d8a:	dc02      	bgt.n	23d92 <_sercom_get_default_pad+0x52>
   23d8c:	2b00      	cmp	r3, #0
   23d8e:	d005      	beq.n	23d9c <_sercom_get_default_pad+0x5c>
   23d90:	e075      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23d92:	2b02      	cmp	r3, #2
   23d94:	d006      	beq.n	23da4 <_sercom_get_default_pad+0x64>
   23d96:	2b03      	cmp	r3, #3
   23d98:	d006      	beq.n	23da8 <_sercom_get_default_pad+0x68>
   23d9a:	e070      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23d9c:	4b40      	ldr	r3, [pc, #256]	; (23ea0 <_sercom_get_default_pad+0x160>)
   23d9e:	e06f      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23da0:	4b40      	ldr	r3, [pc, #256]	; (23ea4 <_sercom_get_default_pad+0x164>)
   23da2:	e06d      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23da4:	4b40      	ldr	r3, [pc, #256]	; (23ea8 <_sercom_get_default_pad+0x168>)
   23da6:	e06b      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23da8:	4b40      	ldr	r3, [pc, #256]	; (23eac <_sercom_get_default_pad+0x16c>)
   23daa:	e069      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23dac:	1cfb      	adds	r3, r7, #3
   23dae:	781b      	ldrb	r3, [r3, #0]
   23db0:	2b01      	cmp	r3, #1
   23db2:	d00a      	beq.n	23dca <_sercom_get_default_pad+0x8a>
   23db4:	dc02      	bgt.n	23dbc <_sercom_get_default_pad+0x7c>
   23db6:	2b00      	cmp	r3, #0
   23db8:	d005      	beq.n	23dc6 <_sercom_get_default_pad+0x86>
   23dba:	e060      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23dbc:	2b02      	cmp	r3, #2
   23dbe:	d006      	beq.n	23dce <_sercom_get_default_pad+0x8e>
   23dc0:	2b03      	cmp	r3, #3
   23dc2:	d006      	beq.n	23dd2 <_sercom_get_default_pad+0x92>
   23dc4:	e05b      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23dc6:	2303      	movs	r3, #3
   23dc8:	e05a      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23dca:	4b39      	ldr	r3, [pc, #228]	; (23eb0 <_sercom_get_default_pad+0x170>)
   23dcc:	e058      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23dce:	4b39      	ldr	r3, [pc, #228]	; (23eb4 <_sercom_get_default_pad+0x174>)
   23dd0:	e056      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23dd2:	4b39      	ldr	r3, [pc, #228]	; (23eb8 <_sercom_get_default_pad+0x178>)
   23dd4:	e054      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23dd6:	1cfb      	adds	r3, r7, #3
   23dd8:	781b      	ldrb	r3, [r3, #0]
   23dda:	2b01      	cmp	r3, #1
   23ddc:	d00a      	beq.n	23df4 <_sercom_get_default_pad+0xb4>
   23dde:	dc02      	bgt.n	23de6 <_sercom_get_default_pad+0xa6>
   23de0:	2b00      	cmp	r3, #0
   23de2:	d005      	beq.n	23df0 <_sercom_get_default_pad+0xb0>
   23de4:	e04b      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23de6:	2b02      	cmp	r3, #2
   23de8:	d006      	beq.n	23df8 <_sercom_get_default_pad+0xb8>
   23dea:	2b03      	cmp	r3, #3
   23dec:	d006      	beq.n	23dfc <_sercom_get_default_pad+0xbc>
   23dee:	e046      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23df0:	4b32      	ldr	r3, [pc, #200]	; (23ebc <_sercom_get_default_pad+0x17c>)
   23df2:	e045      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23df4:	4b32      	ldr	r3, [pc, #200]	; (23ec0 <_sercom_get_default_pad+0x180>)
   23df6:	e043      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23df8:	4b32      	ldr	r3, [pc, #200]	; (23ec4 <_sercom_get_default_pad+0x184>)
   23dfa:	e041      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23dfc:	4b32      	ldr	r3, [pc, #200]	; (23ec8 <_sercom_get_default_pad+0x188>)
   23dfe:	e03f      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e00:	1cfb      	adds	r3, r7, #3
   23e02:	781b      	ldrb	r3, [r3, #0]
   23e04:	2b01      	cmp	r3, #1
   23e06:	d00a      	beq.n	23e1e <_sercom_get_default_pad+0xde>
   23e08:	dc02      	bgt.n	23e10 <_sercom_get_default_pad+0xd0>
   23e0a:	2b00      	cmp	r3, #0
   23e0c:	d005      	beq.n	23e1a <_sercom_get_default_pad+0xda>
   23e0e:	e036      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23e10:	2b02      	cmp	r3, #2
   23e12:	d006      	beq.n	23e22 <_sercom_get_default_pad+0xe2>
   23e14:	2b03      	cmp	r3, #3
   23e16:	d006      	beq.n	23e26 <_sercom_get_default_pad+0xe6>
   23e18:	e031      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23e1a:	4b2c      	ldr	r3, [pc, #176]	; (23ecc <_sercom_get_default_pad+0x18c>)
   23e1c:	e030      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e1e:	4b2c      	ldr	r3, [pc, #176]	; (23ed0 <_sercom_get_default_pad+0x190>)
   23e20:	e02e      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e22:	4b2c      	ldr	r3, [pc, #176]	; (23ed4 <_sercom_get_default_pad+0x194>)
   23e24:	e02c      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e26:	4b2c      	ldr	r3, [pc, #176]	; (23ed8 <_sercom_get_default_pad+0x198>)
   23e28:	e02a      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e2a:	1cfb      	adds	r3, r7, #3
   23e2c:	781b      	ldrb	r3, [r3, #0]
   23e2e:	2b01      	cmp	r3, #1
   23e30:	d00a      	beq.n	23e48 <_sercom_get_default_pad+0x108>
   23e32:	dc02      	bgt.n	23e3a <_sercom_get_default_pad+0xfa>
   23e34:	2b00      	cmp	r3, #0
   23e36:	d005      	beq.n	23e44 <_sercom_get_default_pad+0x104>
   23e38:	e021      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23e3a:	2b02      	cmp	r3, #2
   23e3c:	d006      	beq.n	23e4c <_sercom_get_default_pad+0x10c>
   23e3e:	2b03      	cmp	r3, #3
   23e40:	d006      	beq.n	23e50 <_sercom_get_default_pad+0x110>
   23e42:	e01c      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23e44:	4b25      	ldr	r3, [pc, #148]	; (23edc <_sercom_get_default_pad+0x19c>)
   23e46:	e01b      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e48:	4b25      	ldr	r3, [pc, #148]	; (23ee0 <_sercom_get_default_pad+0x1a0>)
   23e4a:	e019      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e4c:	4b25      	ldr	r3, [pc, #148]	; (23ee4 <_sercom_get_default_pad+0x1a4>)
   23e4e:	e017      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e50:	4b25      	ldr	r3, [pc, #148]	; (23ee8 <_sercom_get_default_pad+0x1a8>)
   23e52:	e015      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e54:	1cfb      	adds	r3, r7, #3
   23e56:	781b      	ldrb	r3, [r3, #0]
   23e58:	2b01      	cmp	r3, #1
   23e5a:	d00a      	beq.n	23e72 <_sercom_get_default_pad+0x132>
   23e5c:	dc02      	bgt.n	23e64 <_sercom_get_default_pad+0x124>
   23e5e:	2b00      	cmp	r3, #0
   23e60:	d005      	beq.n	23e6e <_sercom_get_default_pad+0x12e>
   23e62:	e00c      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23e64:	2b02      	cmp	r3, #2
   23e66:	d006      	beq.n	23e76 <_sercom_get_default_pad+0x136>
   23e68:	2b03      	cmp	r3, #3
   23e6a:	d006      	beq.n	23e7a <_sercom_get_default_pad+0x13a>
   23e6c:	e007      	b.n	23e7e <_sercom_get_default_pad+0x13e>
   23e6e:	4b1f      	ldr	r3, [pc, #124]	; (23eec <_sercom_get_default_pad+0x1ac>)
   23e70:	e006      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e72:	4b1f      	ldr	r3, [pc, #124]	; (23ef0 <_sercom_get_default_pad+0x1b0>)
   23e74:	e004      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e76:	4b1f      	ldr	r3, [pc, #124]	; (23ef4 <_sercom_get_default_pad+0x1b4>)
   23e78:	e002      	b.n	23e80 <_sercom_get_default_pad+0x140>
   23e7a:	4b1f      	ldr	r3, [pc, #124]	; (23ef8 <_sercom_get_default_pad+0x1b8>)
   23e7c:	e000      	b.n	23e80 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   23e7e:	2300      	movs	r3, #0
}
   23e80:	0018      	movs	r0, r3
   23e82:	46bd      	mov	sp, r7
   23e84:	b002      	add	sp, #8
   23e86:	bd80      	pop	{r7, pc}
   23e88:	42001000 	.word	0x42001000
   23e8c:	42000800 	.word	0x42000800
   23e90:	42000c00 	.word	0x42000c00
   23e94:	42001800 	.word	0x42001800
   23e98:	42001c00 	.word	0x42001c00
   23e9c:	42001400 	.word	0x42001400
   23ea0:	00040003 	.word	0x00040003
   23ea4:	00050003 	.word	0x00050003
   23ea8:	00060003 	.word	0x00060003
   23eac:	00070003 	.word	0x00070003
   23eb0:	00010003 	.word	0x00010003
   23eb4:	001e0003 	.word	0x001e0003
   23eb8:	001f0003 	.word	0x001f0003
   23ebc:	00080003 	.word	0x00080003
   23ec0:	00090003 	.word	0x00090003
   23ec4:	000a0003 	.word	0x000a0003
   23ec8:	000b0003 	.word	0x000b0003
   23ecc:	00100003 	.word	0x00100003
   23ed0:	00110003 	.word	0x00110003
   23ed4:	00120003 	.word	0x00120003
   23ed8:	00130003 	.word	0x00130003
   23edc:	000c0003 	.word	0x000c0003
   23ee0:	000d0003 	.word	0x000d0003
   23ee4:	000e0003 	.word	0x000e0003
   23ee8:	000f0003 	.word	0x000f0003
   23eec:	00160003 	.word	0x00160003
   23ef0:	00170003 	.word	0x00170003
   23ef4:	00180003 	.word	0x00180003
   23ef8:	00190003 	.word	0x00190003

00023efc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   23efc:	b590      	push	{r4, r7, lr}
   23efe:	b08b      	sub	sp, #44	; 0x2c
   23f00:	af00      	add	r7, sp, #0
   23f02:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   23f04:	230c      	movs	r3, #12
   23f06:	18fb      	adds	r3, r7, r3
   23f08:	4a0f      	ldr	r2, [pc, #60]	; (23f48 <_sercom_get_sercom_inst_index+0x4c>)
   23f0a:	ca13      	ldmia	r2!, {r0, r1, r4}
   23f0c:	c313      	stmia	r3!, {r0, r1, r4}
   23f0e:	ca13      	ldmia	r2!, {r0, r1, r4}
   23f10:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   23f12:	2300      	movs	r3, #0
   23f14:	627b      	str	r3, [r7, #36]	; 0x24
   23f16:	e00e      	b.n	23f36 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   23f18:	230c      	movs	r3, #12
   23f1a:	18fb      	adds	r3, r7, r3
   23f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23f1e:	0092      	lsls	r2, r2, #2
   23f20:	58d3      	ldr	r3, [r2, r3]
   23f22:	001a      	movs	r2, r3
   23f24:	687b      	ldr	r3, [r7, #4]
   23f26:	429a      	cmp	r2, r3
   23f28:	d102      	bne.n	23f30 <_sercom_get_sercom_inst_index+0x34>
			return i;
   23f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23f2c:	b2db      	uxtb	r3, r3
   23f2e:	e006      	b.n	23f3e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   23f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23f32:	3301      	adds	r3, #1
   23f34:	627b      	str	r3, [r7, #36]	; 0x24
   23f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23f38:	2b05      	cmp	r3, #5
   23f3a:	d9ed      	bls.n	23f18 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   23f3c:	2300      	movs	r3, #0
}
   23f3e:	0018      	movs	r0, r3
   23f40:	46bd      	mov	sp, r7
   23f42:	b00b      	add	sp, #44	; 0x2c
   23f44:	bd90      	pop	{r4, r7, pc}
   23f46:	46c0      	nop			; (mov r8, r8)
   23f48:	000377d8 	.word	0x000377d8

00023f4c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   23f4c:	b580      	push	{r7, lr}
   23f4e:	b082      	sub	sp, #8
   23f50:	af00      	add	r7, sp, #0
   23f52:	0002      	movs	r2, r0
   23f54:	1dfb      	adds	r3, r7, #7
   23f56:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   23f58:	46c0      	nop			; (mov r8, r8)
   23f5a:	46bd      	mov	sp, r7
   23f5c:	b002      	add	sp, #8
   23f5e:	bd80      	pop	{r7, pc}

00023f60 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   23f60:	b580      	push	{r7, lr}
   23f62:	b084      	sub	sp, #16
   23f64:	af00      	add	r7, sp, #0
   23f66:	0002      	movs	r2, r0
   23f68:	6039      	str	r1, [r7, #0]
   23f6a:	1dfb      	adds	r3, r7, #7
   23f6c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   23f6e:	4b13      	ldr	r3, [pc, #76]	; (23fbc <_sercom_set_handler+0x5c>)
   23f70:	781b      	ldrb	r3, [r3, #0]
   23f72:	2201      	movs	r2, #1
   23f74:	4053      	eors	r3, r2
   23f76:	b2db      	uxtb	r3, r3
   23f78:	2b00      	cmp	r3, #0
   23f7a:	d015      	beq.n	23fa8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   23f7c:	2300      	movs	r3, #0
   23f7e:	60fb      	str	r3, [r7, #12]
   23f80:	e00c      	b.n	23f9c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   23f82:	4b0f      	ldr	r3, [pc, #60]	; (23fc0 <_sercom_set_handler+0x60>)
   23f84:	68fa      	ldr	r2, [r7, #12]
   23f86:	0092      	lsls	r2, r2, #2
   23f88:	490e      	ldr	r1, [pc, #56]	; (23fc4 <_sercom_set_handler+0x64>)
   23f8a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   23f8c:	4b0e      	ldr	r3, [pc, #56]	; (23fc8 <_sercom_set_handler+0x68>)
   23f8e:	68fa      	ldr	r2, [r7, #12]
   23f90:	0092      	lsls	r2, r2, #2
   23f92:	2100      	movs	r1, #0
   23f94:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   23f96:	68fb      	ldr	r3, [r7, #12]
   23f98:	3301      	adds	r3, #1
   23f9a:	60fb      	str	r3, [r7, #12]
   23f9c:	68fb      	ldr	r3, [r7, #12]
   23f9e:	2b05      	cmp	r3, #5
   23fa0:	d9ef      	bls.n	23f82 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   23fa2:	4b06      	ldr	r3, [pc, #24]	; (23fbc <_sercom_set_handler+0x5c>)
   23fa4:	2201      	movs	r2, #1
   23fa6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   23fa8:	1dfb      	adds	r3, r7, #7
   23faa:	781a      	ldrb	r2, [r3, #0]
   23fac:	4b04      	ldr	r3, [pc, #16]	; (23fc0 <_sercom_set_handler+0x60>)
   23fae:	0092      	lsls	r2, r2, #2
   23fb0:	6839      	ldr	r1, [r7, #0]
   23fb2:	50d1      	str	r1, [r2, r3]
}
   23fb4:	46c0      	nop			; (mov r8, r8)
   23fb6:	46bd      	mov	sp, r7
   23fb8:	b004      	add	sp, #16
   23fba:	bd80      	pop	{r7, pc}
   23fbc:	20003d3e 	.word	0x20003d3e
   23fc0:	20003d40 	.word	0x20003d40
   23fc4:	00023f4d 	.word	0x00023f4d
   23fc8:	20005638 	.word	0x20005638

00023fcc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   23fcc:	b590      	push	{r4, r7, lr}
   23fce:	b085      	sub	sp, #20
   23fd0:	af00      	add	r7, sp, #0
   23fd2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   23fd4:	2308      	movs	r3, #8
   23fd6:	18fb      	adds	r3, r7, r3
   23fd8:	4a0b      	ldr	r2, [pc, #44]	; (24008 <_sercom_get_interrupt_vector+0x3c>)
   23fda:	6811      	ldr	r1, [r2, #0]
   23fdc:	6019      	str	r1, [r3, #0]
   23fde:	8892      	ldrh	r2, [r2, #4]
   23fe0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   23fe2:	230f      	movs	r3, #15
   23fe4:	18fc      	adds	r4, r7, r3
   23fe6:	687b      	ldr	r3, [r7, #4]
   23fe8:	0018      	movs	r0, r3
   23fea:	4b08      	ldr	r3, [pc, #32]	; (2400c <_sercom_get_interrupt_vector+0x40>)
   23fec:	4798      	blx	r3
   23fee:	0003      	movs	r3, r0
   23ff0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   23ff2:	230f      	movs	r3, #15
   23ff4:	18fb      	adds	r3, r7, r3
   23ff6:	781b      	ldrb	r3, [r3, #0]
   23ff8:	2208      	movs	r2, #8
   23ffa:	18ba      	adds	r2, r7, r2
   23ffc:	5cd3      	ldrb	r3, [r2, r3]
   23ffe:	b25b      	sxtb	r3, r3
}
   24000:	0018      	movs	r0, r3
   24002:	46bd      	mov	sp, r7
   24004:	b005      	add	sp, #20
   24006:	bd90      	pop	{r4, r7, pc}
   24008:	000377f0 	.word	0x000377f0
   2400c:	00023efd 	.word	0x00023efd

00024010 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   24010:	b580      	push	{r7, lr}
   24012:	af00      	add	r7, sp, #0
   24014:	4b03      	ldr	r3, [pc, #12]	; (24024 <SERCOM0_Handler+0x14>)
   24016:	681b      	ldr	r3, [r3, #0]
   24018:	2000      	movs	r0, #0
   2401a:	4798      	blx	r3
   2401c:	46c0      	nop			; (mov r8, r8)
   2401e:	46bd      	mov	sp, r7
   24020:	bd80      	pop	{r7, pc}
   24022:	46c0      	nop			; (mov r8, r8)
   24024:	20003d40 	.word	0x20003d40

00024028 <SERCOM1_Handler>:
   24028:	b580      	push	{r7, lr}
   2402a:	af00      	add	r7, sp, #0
   2402c:	4b03      	ldr	r3, [pc, #12]	; (2403c <SERCOM1_Handler+0x14>)
   2402e:	685b      	ldr	r3, [r3, #4]
   24030:	2001      	movs	r0, #1
   24032:	4798      	blx	r3
   24034:	46c0      	nop			; (mov r8, r8)
   24036:	46bd      	mov	sp, r7
   24038:	bd80      	pop	{r7, pc}
   2403a:	46c0      	nop			; (mov r8, r8)
   2403c:	20003d40 	.word	0x20003d40

00024040 <SERCOM2_Handler>:
   24040:	b580      	push	{r7, lr}
   24042:	af00      	add	r7, sp, #0
   24044:	4b03      	ldr	r3, [pc, #12]	; (24054 <SERCOM2_Handler+0x14>)
   24046:	689b      	ldr	r3, [r3, #8]
   24048:	2002      	movs	r0, #2
   2404a:	4798      	blx	r3
   2404c:	46c0      	nop			; (mov r8, r8)
   2404e:	46bd      	mov	sp, r7
   24050:	bd80      	pop	{r7, pc}
   24052:	46c0      	nop			; (mov r8, r8)
   24054:	20003d40 	.word	0x20003d40

00024058 <SERCOM3_Handler>:
   24058:	b580      	push	{r7, lr}
   2405a:	af00      	add	r7, sp, #0
   2405c:	4b03      	ldr	r3, [pc, #12]	; (2406c <SERCOM3_Handler+0x14>)
   2405e:	68db      	ldr	r3, [r3, #12]
   24060:	2003      	movs	r0, #3
   24062:	4798      	blx	r3
   24064:	46c0      	nop			; (mov r8, r8)
   24066:	46bd      	mov	sp, r7
   24068:	bd80      	pop	{r7, pc}
   2406a:	46c0      	nop			; (mov r8, r8)
   2406c:	20003d40 	.word	0x20003d40

00024070 <SERCOM4_Handler>:
   24070:	b580      	push	{r7, lr}
   24072:	af00      	add	r7, sp, #0
   24074:	4b03      	ldr	r3, [pc, #12]	; (24084 <SERCOM4_Handler+0x14>)
   24076:	691b      	ldr	r3, [r3, #16]
   24078:	2004      	movs	r0, #4
   2407a:	4798      	blx	r3
   2407c:	46c0      	nop			; (mov r8, r8)
   2407e:	46bd      	mov	sp, r7
   24080:	bd80      	pop	{r7, pc}
   24082:	46c0      	nop			; (mov r8, r8)
   24084:	20003d40 	.word	0x20003d40

00024088 <SERCOM5_Handler>:
   24088:	b580      	push	{r7, lr}
   2408a:	af00      	add	r7, sp, #0
   2408c:	4b03      	ldr	r3, [pc, #12]	; (2409c <SERCOM5_Handler+0x14>)
   2408e:	695b      	ldr	r3, [r3, #20]
   24090:	2005      	movs	r0, #5
   24092:	4798      	blx	r3
   24094:	46c0      	nop			; (mov r8, r8)
   24096:	46bd      	mov	sp, r7
   24098:	bd80      	pop	{r7, pc}
   2409a:	46c0      	nop			; (mov r8, r8)
   2409c:	20003d40 	.word	0x20003d40

000240a0 <system_pinmux_get_config_defaults>:
{
   240a0:	b580      	push	{r7, lr}
   240a2:	b082      	sub	sp, #8
   240a4:	af00      	add	r7, sp, #0
   240a6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   240a8:	687b      	ldr	r3, [r7, #4]
   240aa:	2280      	movs	r2, #128	; 0x80
   240ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   240ae:	687b      	ldr	r3, [r7, #4]
   240b0:	2200      	movs	r2, #0
   240b2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   240b4:	687b      	ldr	r3, [r7, #4]
   240b6:	2201      	movs	r2, #1
   240b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   240ba:	687b      	ldr	r3, [r7, #4]
   240bc:	2200      	movs	r2, #0
   240be:	70da      	strb	r2, [r3, #3]
}
   240c0:	46c0      	nop			; (mov r8, r8)
   240c2:	46bd      	mov	sp, r7
   240c4:	b002      	add	sp, #8
   240c6:	bd80      	pop	{r7, pc}

000240c8 <system_pinmux_get_group_from_gpio_pin>:
{
   240c8:	b580      	push	{r7, lr}
   240ca:	b084      	sub	sp, #16
   240cc:	af00      	add	r7, sp, #0
   240ce:	0002      	movs	r2, r0
   240d0:	1dfb      	adds	r3, r7, #7
   240d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   240d4:	230f      	movs	r3, #15
   240d6:	18fb      	adds	r3, r7, r3
   240d8:	1dfa      	adds	r2, r7, #7
   240da:	7812      	ldrb	r2, [r2, #0]
   240dc:	09d2      	lsrs	r2, r2, #7
   240de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   240e0:	230e      	movs	r3, #14
   240e2:	18fb      	adds	r3, r7, r3
   240e4:	1dfa      	adds	r2, r7, #7
   240e6:	7812      	ldrb	r2, [r2, #0]
   240e8:	0952      	lsrs	r2, r2, #5
   240ea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   240ec:	4b0d      	ldr	r3, [pc, #52]	; (24124 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   240ee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   240f0:	230f      	movs	r3, #15
   240f2:	18fb      	adds	r3, r7, r3
   240f4:	781b      	ldrb	r3, [r3, #0]
   240f6:	2b00      	cmp	r3, #0
   240f8:	d10f      	bne.n	2411a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   240fa:	230f      	movs	r3, #15
   240fc:	18fb      	adds	r3, r7, r3
   240fe:	781b      	ldrb	r3, [r3, #0]
   24100:	009b      	lsls	r3, r3, #2
   24102:	2210      	movs	r2, #16
   24104:	4694      	mov	ip, r2
   24106:	44bc      	add	ip, r7
   24108:	4463      	add	r3, ip
   2410a:	3b08      	subs	r3, #8
   2410c:	681a      	ldr	r2, [r3, #0]
   2410e:	230e      	movs	r3, #14
   24110:	18fb      	adds	r3, r7, r3
   24112:	781b      	ldrb	r3, [r3, #0]
   24114:	01db      	lsls	r3, r3, #7
   24116:	18d3      	adds	r3, r2, r3
   24118:	e000      	b.n	2411c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2411a:	2300      	movs	r3, #0
}
   2411c:	0018      	movs	r0, r3
   2411e:	46bd      	mov	sp, r7
   24120:	b004      	add	sp, #16
   24122:	bd80      	pop	{r7, pc}
   24124:	41004400 	.word	0x41004400

00024128 <port_get_group_from_gpio_pin>:
{
   24128:	b580      	push	{r7, lr}
   2412a:	b082      	sub	sp, #8
   2412c:	af00      	add	r7, sp, #0
   2412e:	0002      	movs	r2, r0
   24130:	1dfb      	adds	r3, r7, #7
   24132:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24134:	1dfb      	adds	r3, r7, #7
   24136:	781b      	ldrb	r3, [r3, #0]
   24138:	0018      	movs	r0, r3
   2413a:	4b03      	ldr	r3, [pc, #12]	; (24148 <port_get_group_from_gpio_pin+0x20>)
   2413c:	4798      	blx	r3
   2413e:	0003      	movs	r3, r0
}
   24140:	0018      	movs	r0, r3
   24142:	46bd      	mov	sp, r7
   24144:	b002      	add	sp, #8
   24146:	bd80      	pop	{r7, pc}
   24148:	000240c9 	.word	0x000240c9

0002414c <port_pin_set_output_level>:
{
   2414c:	b580      	push	{r7, lr}
   2414e:	b084      	sub	sp, #16
   24150:	af00      	add	r7, sp, #0
   24152:	0002      	movs	r2, r0
   24154:	1dfb      	adds	r3, r7, #7
   24156:	701a      	strb	r2, [r3, #0]
   24158:	1dbb      	adds	r3, r7, #6
   2415a:	1c0a      	adds	r2, r1, #0
   2415c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2415e:	1dfb      	adds	r3, r7, #7
   24160:	781b      	ldrb	r3, [r3, #0]
   24162:	0018      	movs	r0, r3
   24164:	4b0d      	ldr	r3, [pc, #52]	; (2419c <port_pin_set_output_level+0x50>)
   24166:	4798      	blx	r3
   24168:	0003      	movs	r3, r0
   2416a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2416c:	1dfb      	adds	r3, r7, #7
   2416e:	781b      	ldrb	r3, [r3, #0]
   24170:	221f      	movs	r2, #31
   24172:	4013      	ands	r3, r2
   24174:	2201      	movs	r2, #1
   24176:	409a      	lsls	r2, r3
   24178:	0013      	movs	r3, r2
   2417a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2417c:	1dbb      	adds	r3, r7, #6
   2417e:	781b      	ldrb	r3, [r3, #0]
   24180:	2b00      	cmp	r3, #0
   24182:	d003      	beq.n	2418c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   24184:	68fb      	ldr	r3, [r7, #12]
   24186:	68ba      	ldr	r2, [r7, #8]
   24188:	619a      	str	r2, [r3, #24]
}
   2418a:	e002      	b.n	24192 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2418c:	68fb      	ldr	r3, [r7, #12]
   2418e:	68ba      	ldr	r2, [r7, #8]
   24190:	615a      	str	r2, [r3, #20]
}
   24192:	46c0      	nop			; (mov r8, r8)
   24194:	46bd      	mov	sp, r7
   24196:	b004      	add	sp, #16
   24198:	bd80      	pop	{r7, pc}
   2419a:	46c0      	nop			; (mov r8, r8)
   2419c:	00024129 	.word	0x00024129

000241a0 <system_gclk_chan_get_config_defaults>:
{
   241a0:	b580      	push	{r7, lr}
   241a2:	b082      	sub	sp, #8
   241a4:	af00      	add	r7, sp, #0
   241a6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   241a8:	687b      	ldr	r3, [r7, #4]
   241aa:	2200      	movs	r2, #0
   241ac:	701a      	strb	r2, [r3, #0]
}
   241ae:	46c0      	nop			; (mov r8, r8)
   241b0:	46bd      	mov	sp, r7
   241b2:	b002      	add	sp, #8
   241b4:	bd80      	pop	{r7, pc}
	...

000241b8 <system_apb_clock_set_mask>:
{
   241b8:	b580      	push	{r7, lr}
   241ba:	b082      	sub	sp, #8
   241bc:	af00      	add	r7, sp, #0
   241be:	0002      	movs	r2, r0
   241c0:	6039      	str	r1, [r7, #0]
   241c2:	1dfb      	adds	r3, r7, #7
   241c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   241c6:	1dfb      	adds	r3, r7, #7
   241c8:	781b      	ldrb	r3, [r3, #0]
   241ca:	2b01      	cmp	r3, #1
   241cc:	d00a      	beq.n	241e4 <system_apb_clock_set_mask+0x2c>
   241ce:	2b02      	cmp	r3, #2
   241d0:	d00f      	beq.n	241f2 <system_apb_clock_set_mask+0x3a>
   241d2:	2b00      	cmp	r3, #0
   241d4:	d114      	bne.n	24200 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   241d6:	4b0e      	ldr	r3, [pc, #56]	; (24210 <system_apb_clock_set_mask+0x58>)
   241d8:	4a0d      	ldr	r2, [pc, #52]	; (24210 <system_apb_clock_set_mask+0x58>)
   241da:	6991      	ldr	r1, [r2, #24]
   241dc:	683a      	ldr	r2, [r7, #0]
   241de:	430a      	orrs	r2, r1
   241e0:	619a      	str	r2, [r3, #24]
			break;
   241e2:	e00f      	b.n	24204 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   241e4:	4b0a      	ldr	r3, [pc, #40]	; (24210 <system_apb_clock_set_mask+0x58>)
   241e6:	4a0a      	ldr	r2, [pc, #40]	; (24210 <system_apb_clock_set_mask+0x58>)
   241e8:	69d1      	ldr	r1, [r2, #28]
   241ea:	683a      	ldr	r2, [r7, #0]
   241ec:	430a      	orrs	r2, r1
   241ee:	61da      	str	r2, [r3, #28]
			break;
   241f0:	e008      	b.n	24204 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   241f2:	4b07      	ldr	r3, [pc, #28]	; (24210 <system_apb_clock_set_mask+0x58>)
   241f4:	4a06      	ldr	r2, [pc, #24]	; (24210 <system_apb_clock_set_mask+0x58>)
   241f6:	6a11      	ldr	r1, [r2, #32]
   241f8:	683a      	ldr	r2, [r7, #0]
   241fa:	430a      	orrs	r2, r1
   241fc:	621a      	str	r2, [r3, #32]
			break;
   241fe:	e001      	b.n	24204 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24200:	2317      	movs	r3, #23
   24202:	e000      	b.n	24206 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24204:	2300      	movs	r3, #0
}
   24206:	0018      	movs	r0, r3
   24208:	46bd      	mov	sp, r7
   2420a:	b002      	add	sp, #8
   2420c:	bd80      	pop	{r7, pc}
   2420e:	46c0      	nop			; (mov r8, r8)
   24210:	40000400 	.word	0x40000400

00024214 <system_is_debugger_present>:
{
   24214:	b580      	push	{r7, lr}
   24216:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   24218:	4b05      	ldr	r3, [pc, #20]	; (24230 <system_is_debugger_present+0x1c>)
   2421a:	789b      	ldrb	r3, [r3, #2]
   2421c:	b2db      	uxtb	r3, r3
   2421e:	001a      	movs	r2, r3
   24220:	2302      	movs	r3, #2
   24222:	4013      	ands	r3, r2
   24224:	1e5a      	subs	r2, r3, #1
   24226:	4193      	sbcs	r3, r2
   24228:	b2db      	uxtb	r3, r3
}
   2422a:	0018      	movs	r0, r3
   2422c:	46bd      	mov	sp, r7
   2422e:	bd80      	pop	{r7, pc}
   24230:	41002000 	.word	0x41002000

00024234 <system_interrupt_enable>:
{
   24234:	b580      	push	{r7, lr}
   24236:	b082      	sub	sp, #8
   24238:	af00      	add	r7, sp, #0
   2423a:	0002      	movs	r2, r0
   2423c:	1dfb      	adds	r3, r7, #7
   2423e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   24240:	4b06      	ldr	r3, [pc, #24]	; (2425c <system_interrupt_enable+0x28>)
   24242:	1dfa      	adds	r2, r7, #7
   24244:	7812      	ldrb	r2, [r2, #0]
   24246:	0011      	movs	r1, r2
   24248:	221f      	movs	r2, #31
   2424a:	400a      	ands	r2, r1
   2424c:	2101      	movs	r1, #1
   2424e:	4091      	lsls	r1, r2
   24250:	000a      	movs	r2, r1
   24252:	601a      	str	r2, [r3, #0]
}
   24254:	46c0      	nop			; (mov r8, r8)
   24256:	46bd      	mov	sp, r7
   24258:	b002      	add	sp, #8
   2425a:	bd80      	pop	{r7, pc}
   2425c:	e000e100 	.word	0xe000e100

00024260 <system_interrupt_disable>:
{
   24260:	b580      	push	{r7, lr}
   24262:	b082      	sub	sp, #8
   24264:	af00      	add	r7, sp, #0
   24266:	0002      	movs	r2, r0
   24268:	1dfb      	adds	r3, r7, #7
   2426a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2426c:	4a07      	ldr	r2, [pc, #28]	; (2428c <system_interrupt_disable+0x2c>)
   2426e:	1dfb      	adds	r3, r7, #7
   24270:	781b      	ldrb	r3, [r3, #0]
   24272:	0019      	movs	r1, r3
   24274:	231f      	movs	r3, #31
   24276:	400b      	ands	r3, r1
   24278:	2101      	movs	r1, #1
   2427a:	4099      	lsls	r1, r3
   2427c:	000b      	movs	r3, r1
   2427e:	0019      	movs	r1, r3
   24280:	2380      	movs	r3, #128	; 0x80
   24282:	50d1      	str	r1, [r2, r3]
}
   24284:	46c0      	nop			; (mov r8, r8)
   24286:	46bd      	mov	sp, r7
   24288:	b002      	add	sp, #8
   2428a:	bd80      	pop	{r7, pc}
   2428c:	e000e100 	.word	0xe000e100

00024290 <spi_is_syncing>:
{
   24290:	b580      	push	{r7, lr}
   24292:	b084      	sub	sp, #16
   24294:	af00      	add	r7, sp, #0
   24296:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   24298:	687b      	ldr	r3, [r7, #4]
   2429a:	681b      	ldr	r3, [r3, #0]
   2429c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2429e:	68fb      	ldr	r3, [r7, #12]
   242a0:	69db      	ldr	r3, [r3, #28]
   242a2:	1e5a      	subs	r2, r3, #1
   242a4:	4193      	sbcs	r3, r2
   242a6:	b2db      	uxtb	r3, r3
}
   242a8:	0018      	movs	r0, r3
   242aa:	46bd      	mov	sp, r7
   242ac:	b004      	add	sp, #16
   242ae:	bd80      	pop	{r7, pc}

000242b0 <spi_enable>:
{
   242b0:	b580      	push	{r7, lr}
   242b2:	b084      	sub	sp, #16
   242b4:	af00      	add	r7, sp, #0
   242b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   242b8:	687b      	ldr	r3, [r7, #4]
   242ba:	681b      	ldr	r3, [r3, #0]
   242bc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   242be:	687b      	ldr	r3, [r7, #4]
   242c0:	681b      	ldr	r3, [r3, #0]
   242c2:	0018      	movs	r0, r3
   242c4:	4b0b      	ldr	r3, [pc, #44]	; (242f4 <spi_enable+0x44>)
   242c6:	4798      	blx	r3
   242c8:	0003      	movs	r3, r0
   242ca:	0018      	movs	r0, r3
   242cc:	4b0a      	ldr	r3, [pc, #40]	; (242f8 <spi_enable+0x48>)
   242ce:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   242d0:	46c0      	nop			; (mov r8, r8)
   242d2:	687b      	ldr	r3, [r7, #4]
   242d4:	0018      	movs	r0, r3
   242d6:	4b09      	ldr	r3, [pc, #36]	; (242fc <spi_enable+0x4c>)
   242d8:	4798      	blx	r3
   242da:	1e03      	subs	r3, r0, #0
   242dc:	d1f9      	bne.n	242d2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   242de:	68fb      	ldr	r3, [r7, #12]
   242e0:	681b      	ldr	r3, [r3, #0]
   242e2:	2202      	movs	r2, #2
   242e4:	431a      	orrs	r2, r3
   242e6:	68fb      	ldr	r3, [r7, #12]
   242e8:	601a      	str	r2, [r3, #0]
}
   242ea:	46c0      	nop			; (mov r8, r8)
   242ec:	46bd      	mov	sp, r7
   242ee:	b004      	add	sp, #16
   242f0:	bd80      	pop	{r7, pc}
   242f2:	46c0      	nop			; (mov r8, r8)
   242f4:	00023fcd 	.word	0x00023fcd
   242f8:	00024235 	.word	0x00024235
   242fc:	00024291 	.word	0x00024291

00024300 <spi_disable>:
{
   24300:	b580      	push	{r7, lr}
   24302:	b084      	sub	sp, #16
   24304:	af00      	add	r7, sp, #0
   24306:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   24308:	687b      	ldr	r3, [r7, #4]
   2430a:	681b      	ldr	r3, [r3, #0]
   2430c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2430e:	687b      	ldr	r3, [r7, #4]
   24310:	681b      	ldr	r3, [r3, #0]
   24312:	0018      	movs	r0, r3
   24314:	4b0e      	ldr	r3, [pc, #56]	; (24350 <spi_disable+0x50>)
   24316:	4798      	blx	r3
   24318:	0003      	movs	r3, r0
   2431a:	0018      	movs	r0, r3
   2431c:	4b0d      	ldr	r3, [pc, #52]	; (24354 <spi_disable+0x54>)
   2431e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   24320:	46c0      	nop			; (mov r8, r8)
   24322:	687b      	ldr	r3, [r7, #4]
   24324:	0018      	movs	r0, r3
   24326:	4b0c      	ldr	r3, [pc, #48]	; (24358 <spi_disable+0x58>)
   24328:	4798      	blx	r3
   2432a:	1e03      	subs	r3, r0, #0
   2432c:	d1f9      	bne.n	24322 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2432e:	68fb      	ldr	r3, [r7, #12]
   24330:	228f      	movs	r2, #143	; 0x8f
   24332:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   24334:	68fb      	ldr	r3, [r7, #12]
   24336:	228f      	movs	r2, #143	; 0x8f
   24338:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2433a:	68fb      	ldr	r3, [r7, #12]
   2433c:	681b      	ldr	r3, [r3, #0]
   2433e:	2202      	movs	r2, #2
   24340:	4393      	bics	r3, r2
   24342:	001a      	movs	r2, r3
   24344:	68fb      	ldr	r3, [r7, #12]
   24346:	601a      	str	r2, [r3, #0]
}
   24348:	46c0      	nop			; (mov r8, r8)
   2434a:	46bd      	mov	sp, r7
   2434c:	b004      	add	sp, #16
   2434e:	bd80      	pop	{r7, pc}
   24350:	00023fcd 	.word	0x00023fcd
   24354:	00024261 	.word	0x00024261
   24358:	00024291 	.word	0x00024291

0002435c <spi_is_write_complete>:
{
   2435c:	b580      	push	{r7, lr}
   2435e:	b084      	sub	sp, #16
   24360:	af00      	add	r7, sp, #0
   24362:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   24364:	687b      	ldr	r3, [r7, #4]
   24366:	681b      	ldr	r3, [r3, #0]
   24368:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2436a:	68fb      	ldr	r3, [r7, #12]
   2436c:	7e1b      	ldrb	r3, [r3, #24]
   2436e:	b2db      	uxtb	r3, r3
   24370:	001a      	movs	r2, r3
   24372:	2302      	movs	r3, #2
   24374:	4013      	ands	r3, r2
   24376:	1e5a      	subs	r2, r3, #1
   24378:	4193      	sbcs	r3, r2
   2437a:	b2db      	uxtb	r3, r3
}
   2437c:	0018      	movs	r0, r3
   2437e:	46bd      	mov	sp, r7
   24380:	b004      	add	sp, #16
   24382:	bd80      	pop	{r7, pc}

00024384 <spi_is_ready_to_write>:
{
   24384:	b580      	push	{r7, lr}
   24386:	b084      	sub	sp, #16
   24388:	af00      	add	r7, sp, #0
   2438a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2438c:	687b      	ldr	r3, [r7, #4]
   2438e:	681b      	ldr	r3, [r3, #0]
   24390:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   24392:	68fb      	ldr	r3, [r7, #12]
   24394:	7e1b      	ldrb	r3, [r3, #24]
   24396:	b2db      	uxtb	r3, r3
   24398:	001a      	movs	r2, r3
   2439a:	2301      	movs	r3, #1
   2439c:	4013      	ands	r3, r2
   2439e:	1e5a      	subs	r2, r3, #1
   243a0:	4193      	sbcs	r3, r2
   243a2:	b2db      	uxtb	r3, r3
}
   243a4:	0018      	movs	r0, r3
   243a6:	46bd      	mov	sp, r7
   243a8:	b004      	add	sp, #16
   243aa:	bd80      	pop	{r7, pc}

000243ac <spi_is_ready_to_read>:
{
   243ac:	b580      	push	{r7, lr}
   243ae:	b084      	sub	sp, #16
   243b0:	af00      	add	r7, sp, #0
   243b2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   243b4:	687b      	ldr	r3, [r7, #4]
   243b6:	681b      	ldr	r3, [r3, #0]
   243b8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   243ba:	68fb      	ldr	r3, [r7, #12]
   243bc:	7e1b      	ldrb	r3, [r3, #24]
   243be:	b2db      	uxtb	r3, r3
   243c0:	001a      	movs	r2, r3
   243c2:	2304      	movs	r3, #4
   243c4:	4013      	ands	r3, r2
   243c6:	1e5a      	subs	r2, r3, #1
   243c8:	4193      	sbcs	r3, r2
   243ca:	b2db      	uxtb	r3, r3
}
   243cc:	0018      	movs	r0, r3
   243ce:	46bd      	mov	sp, r7
   243d0:	b004      	add	sp, #16
   243d2:	bd80      	pop	{r7, pc}

000243d4 <spi_write>:
{
   243d4:	b580      	push	{r7, lr}
   243d6:	b084      	sub	sp, #16
   243d8:	af00      	add	r7, sp, #0
   243da:	6078      	str	r0, [r7, #4]
   243dc:	000a      	movs	r2, r1
   243de:	1cbb      	adds	r3, r7, #2
   243e0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   243e2:	687b      	ldr	r3, [r7, #4]
   243e4:	681b      	ldr	r3, [r3, #0]
   243e6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   243e8:	687b      	ldr	r3, [r7, #4]
   243ea:	0018      	movs	r0, r3
   243ec:	4b0a      	ldr	r3, [pc, #40]	; (24418 <spi_write+0x44>)
   243ee:	4798      	blx	r3
   243f0:	0003      	movs	r3, r0
   243f2:	001a      	movs	r2, r3
   243f4:	2301      	movs	r3, #1
   243f6:	4053      	eors	r3, r2
   243f8:	b2db      	uxtb	r3, r3
   243fa:	2b00      	cmp	r3, #0
   243fc:	d001      	beq.n	24402 <spi_write+0x2e>
		return STATUS_BUSY;
   243fe:	2305      	movs	r3, #5
   24400:	e006      	b.n	24410 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   24402:	1cbb      	adds	r3, r7, #2
   24404:	881b      	ldrh	r3, [r3, #0]
   24406:	05db      	lsls	r3, r3, #23
   24408:	0dda      	lsrs	r2, r3, #23
   2440a:	68fb      	ldr	r3, [r7, #12]
   2440c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2440e:	2300      	movs	r3, #0
}
   24410:	0018      	movs	r0, r3
   24412:	46bd      	mov	sp, r7
   24414:	b004      	add	sp, #16
   24416:	bd80      	pop	{r7, pc}
   24418:	00024385 	.word	0x00024385

0002441c <spi_read>:
{
   2441c:	b580      	push	{r7, lr}
   2441e:	b084      	sub	sp, #16
   24420:	af00      	add	r7, sp, #0
   24422:	6078      	str	r0, [r7, #4]
   24424:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   24426:	687b      	ldr	r3, [r7, #4]
   24428:	681b      	ldr	r3, [r3, #0]
   2442a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2442c:	687b      	ldr	r3, [r7, #4]
   2442e:	0018      	movs	r0, r3
   24430:	4b1b      	ldr	r3, [pc, #108]	; (244a0 <spi_read+0x84>)
   24432:	4798      	blx	r3
   24434:	0003      	movs	r3, r0
   24436:	001a      	movs	r2, r3
   24438:	2301      	movs	r3, #1
   2443a:	4053      	eors	r3, r2
   2443c:	b2db      	uxtb	r3, r3
   2443e:	2b00      	cmp	r3, #0
   24440:	d001      	beq.n	24446 <spi_read+0x2a>
		return STATUS_ERR_IO;
   24442:	2310      	movs	r3, #16
   24444:	e027      	b.n	24496 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   24446:	230f      	movs	r3, #15
   24448:	18fb      	adds	r3, r7, r3
   2444a:	2200      	movs	r2, #0
   2444c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2444e:	68bb      	ldr	r3, [r7, #8]
   24450:	8b5b      	ldrh	r3, [r3, #26]
   24452:	b29b      	uxth	r3, r3
   24454:	001a      	movs	r2, r3
   24456:	2304      	movs	r3, #4
   24458:	4013      	ands	r3, r2
   2445a:	d006      	beq.n	2446a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2445c:	230f      	movs	r3, #15
   2445e:	18fb      	adds	r3, r7, r3
   24460:	221e      	movs	r2, #30
   24462:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   24464:	68bb      	ldr	r3, [r7, #8]
   24466:	2204      	movs	r2, #4
   24468:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2446a:	687b      	ldr	r3, [r7, #4]
   2446c:	799b      	ldrb	r3, [r3, #6]
   2446e:	2b01      	cmp	r3, #1
   24470:	d108      	bne.n	24484 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   24472:	68bb      	ldr	r3, [r7, #8]
   24474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24476:	b29b      	uxth	r3, r3
   24478:	05db      	lsls	r3, r3, #23
   2447a:	0ddb      	lsrs	r3, r3, #23
   2447c:	b29a      	uxth	r2, r3
   2447e:	683b      	ldr	r3, [r7, #0]
   24480:	801a      	strh	r2, [r3, #0]
   24482:	e005      	b.n	24490 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   24484:	68bb      	ldr	r3, [r7, #8]
   24486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24488:	b2db      	uxtb	r3, r3
   2448a:	b29a      	uxth	r2, r3
   2448c:	683b      	ldr	r3, [r7, #0]
   2448e:	801a      	strh	r2, [r3, #0]
	return retval;
   24490:	230f      	movs	r3, #15
   24492:	18fb      	adds	r3, r7, r3
   24494:	781b      	ldrb	r3, [r3, #0]
}
   24496:	0018      	movs	r0, r3
   24498:	46bd      	mov	sp, r7
   2449a:	b004      	add	sp, #16
   2449c:	bd80      	pop	{r7, pc}
   2449e:	46c0      	nop			; (mov r8, r8)
   244a0:	000243ad 	.word	0x000243ad

000244a4 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
   244a4:	b580      	push	{r7, lr}
   244a6:	b084      	sub	sp, #16
   244a8:	af00      	add	r7, sp, #0
   244aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   244ac:	687b      	ldr	r3, [r7, #4]
   244ae:	681b      	ldr	r3, [r3, #0]
   244b0:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
   244b2:	687b      	ldr	r3, [r7, #4]
   244b4:	0018      	movs	r0, r3
   244b6:	4b09      	ldr	r3, [pc, #36]	; (244dc <spi_reset+0x38>)
   244b8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   244ba:	46c0      	nop			; (mov r8, r8)
   244bc:	687b      	ldr	r3, [r7, #4]
   244be:	0018      	movs	r0, r3
   244c0:	4b07      	ldr	r3, [pc, #28]	; (244e0 <spi_reset+0x3c>)
   244c2:	4798      	blx	r3
   244c4:	1e03      	subs	r3, r0, #0
   244c6:	d1f9      	bne.n	244bc <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
   244c8:	68fb      	ldr	r3, [r7, #12]
   244ca:	681b      	ldr	r3, [r3, #0]
   244cc:	2201      	movs	r2, #1
   244ce:	431a      	orrs	r2, r3
   244d0:	68fb      	ldr	r3, [r7, #12]
   244d2:	601a      	str	r2, [r3, #0]
}
   244d4:	46c0      	nop			; (mov r8, r8)
   244d6:	46bd      	mov	sp, r7
   244d8:	b004      	add	sp, #16
   244da:	bd80      	pop	{r7, pc}
   244dc:	00024301 	.word	0x00024301
   244e0:	00024291 	.word	0x00024291

000244e4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   244e4:	b590      	push	{r4, r7, lr}
   244e6:	b089      	sub	sp, #36	; 0x24
   244e8:	af00      	add	r7, sp, #0
   244ea:	6078      	str	r0, [r7, #4]
   244ec:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   244ee:	230c      	movs	r3, #12
   244f0:	18fb      	adds	r3, r7, r3
   244f2:	2200      	movs	r2, #0
   244f4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   244f6:	687b      	ldr	r3, [r7, #4]
   244f8:	681b      	ldr	r3, [r3, #0]
   244fa:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   244fc:	687b      	ldr	r3, [r7, #4]
   244fe:	0018      	movs	r0, r3
   24500:	4b24      	ldr	r3, [pc, #144]	; (24594 <spi_set_baudrate+0xb0>)
   24502:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   24504:	46c0      	nop			; (mov r8, r8)
   24506:	687b      	ldr	r3, [r7, #4]
   24508:	0018      	movs	r0, r3
   2450a:	4b23      	ldr	r3, [pc, #140]	; (24598 <spi_set_baudrate+0xb4>)
   2450c:	4798      	blx	r3
   2450e:	1e03      	subs	r3, r0, #0
   24510:	d1f9      	bne.n	24506 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   24512:	687b      	ldr	r3, [r7, #4]
   24514:	681b      	ldr	r3, [r3, #0]
   24516:	0018      	movs	r0, r3
   24518:	4b20      	ldr	r3, [pc, #128]	; (2459c <spi_set_baudrate+0xb8>)
   2451a:	4798      	blx	r3
   2451c:	0003      	movs	r3, r0
   2451e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   24520:	69bb      	ldr	r3, [r7, #24]
   24522:	3314      	adds	r3, #20
   24524:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   24526:	697b      	ldr	r3, [r7, #20]
   24528:	b2db      	uxtb	r3, r3
   2452a:	0018      	movs	r0, r3
   2452c:	4b1c      	ldr	r3, [pc, #112]	; (245a0 <spi_set_baudrate+0xbc>)
   2452e:	4798      	blx	r3
   24530:	0003      	movs	r3, r0
   24532:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   24534:	230f      	movs	r3, #15
   24536:	18fc      	adds	r4, r7, r3
   24538:	230c      	movs	r3, #12
   2453a:	18fa      	adds	r2, r7, r3
   2453c:	6939      	ldr	r1, [r7, #16]
   2453e:	683b      	ldr	r3, [r7, #0]
   24540:	0018      	movs	r0, r3
   24542:	4b18      	ldr	r3, [pc, #96]	; (245a4 <spi_set_baudrate+0xc0>)
   24544:	4798      	blx	r3
   24546:	0003      	movs	r3, r0
   24548:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2454a:	230f      	movs	r3, #15
   2454c:	18fb      	adds	r3, r7, r3
   2454e:	781b      	ldrb	r3, [r3, #0]
   24550:	2b00      	cmp	r3, #0
   24552:	d001      	beq.n	24558 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   24554:	2317      	movs	r3, #23
   24556:	e018      	b.n	2458a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   24558:	230c      	movs	r3, #12
   2455a:	18fb      	adds	r3, r7, r3
   2455c:	881b      	ldrh	r3, [r3, #0]
   2455e:	b2da      	uxtb	r2, r3
   24560:	69fb      	ldr	r3, [r7, #28]
   24562:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   24564:	46c0      	nop			; (mov r8, r8)
   24566:	687b      	ldr	r3, [r7, #4]
   24568:	0018      	movs	r0, r3
   2456a:	4b0b      	ldr	r3, [pc, #44]	; (24598 <spi_set_baudrate+0xb4>)
   2456c:	4798      	blx	r3
   2456e:	1e03      	subs	r3, r0, #0
   24570:	d1f9      	bne.n	24566 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   24572:	687b      	ldr	r3, [r7, #4]
   24574:	0018      	movs	r0, r3
   24576:	4b0c      	ldr	r3, [pc, #48]	; (245a8 <spi_set_baudrate+0xc4>)
   24578:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2457a:	46c0      	nop			; (mov r8, r8)
   2457c:	687b      	ldr	r3, [r7, #4]
   2457e:	0018      	movs	r0, r3
   24580:	4b05      	ldr	r3, [pc, #20]	; (24598 <spi_set_baudrate+0xb4>)
   24582:	4798      	blx	r3
   24584:	1e03      	subs	r3, r0, #0
   24586:	d1f9      	bne.n	2457c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   24588:	2300      	movs	r3, #0
}
   2458a:	0018      	movs	r0, r3
   2458c:	46bd      	mov	sp, r7
   2458e:	b009      	add	sp, #36	; 0x24
   24590:	bd90      	pop	{r4, r7, pc}
   24592:	46c0      	nop			; (mov r8, r8)
   24594:	00024301 	.word	0x00024301
   24598:	00024291 	.word	0x00024291
   2459c:	00023efd 	.word	0x00023efd
   245a0:	00026ab1 	.word	0x00026ab1
   245a4:	00023a77 	.word	0x00023a77
   245a8:	000242b1 	.word	0x000242b1

000245ac <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   245ac:	b590      	push	{r4, r7, lr}
   245ae:	b093      	sub	sp, #76	; 0x4c
   245b0:	af00      	add	r7, sp, #0
   245b2:	6078      	str	r0, [r7, #4]
   245b4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   245b6:	687b      	ldr	r3, [r7, #4]
   245b8:	681b      	ldr	r3, [r3, #0]
   245ba:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   245bc:	687b      	ldr	r3, [r7, #4]
   245be:	681b      	ldr	r3, [r3, #0]
   245c0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   245c2:	231c      	movs	r3, #28
   245c4:	18fb      	adds	r3, r7, r3
   245c6:	0018      	movs	r0, r3
   245c8:	4b75      	ldr	r3, [pc, #468]	; (247a0 <_spi_set_config+0x1f4>)
   245ca:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   245cc:	231c      	movs	r3, #28
   245ce:	18fb      	adds	r3, r7, r3
   245d0:	2200      	movs	r2, #0
   245d2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   245d4:	683b      	ldr	r3, [r7, #0]
   245d6:	781b      	ldrb	r3, [r3, #0]
   245d8:	2b00      	cmp	r3, #0
   245da:	d103      	bne.n	245e4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   245dc:	231c      	movs	r3, #28
   245de:	18fb      	adds	r3, r7, r3
   245e0:	2200      	movs	r2, #0
   245e2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   245e4:	683b      	ldr	r3, [r7, #0]
   245e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   245e8:	230c      	movs	r3, #12
   245ea:	18fb      	adds	r3, r7, r3
   245ec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   245ee:	683b      	ldr	r3, [r7, #0]
   245f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   245f2:	230c      	movs	r3, #12
   245f4:	18fb      	adds	r3, r7, r3
   245f6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   245f8:	683b      	ldr	r3, [r7, #0]
   245fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   245fc:	230c      	movs	r3, #12
   245fe:	18fb      	adds	r3, r7, r3
   24600:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   24602:	683b      	ldr	r3, [r7, #0]
   24604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   24606:	230c      	movs	r3, #12
   24608:	18fb      	adds	r3, r7, r3
   2460a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2460c:	2347      	movs	r3, #71	; 0x47
   2460e:	18fb      	adds	r3, r7, r3
   24610:	2200      	movs	r2, #0
   24612:	701a      	strb	r2, [r3, #0]
   24614:	e02c      	b.n	24670 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   24616:	2347      	movs	r3, #71	; 0x47
   24618:	18fb      	adds	r3, r7, r3
   2461a:	781a      	ldrb	r2, [r3, #0]
   2461c:	230c      	movs	r3, #12
   2461e:	18fb      	adds	r3, r7, r3
   24620:	0092      	lsls	r2, r2, #2
   24622:	58d3      	ldr	r3, [r2, r3]
   24624:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   24626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24628:	2b00      	cmp	r3, #0
   2462a:	d109      	bne.n	24640 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2462c:	2347      	movs	r3, #71	; 0x47
   2462e:	18fb      	adds	r3, r7, r3
   24630:	781a      	ldrb	r2, [r3, #0]
   24632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   24634:	0011      	movs	r1, r2
   24636:	0018      	movs	r0, r3
   24638:	4b5a      	ldr	r3, [pc, #360]	; (247a4 <_spi_set_config+0x1f8>)
   2463a:	4798      	blx	r3
   2463c:	0003      	movs	r3, r0
   2463e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   24640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24642:	3301      	adds	r3, #1
   24644:	d00d      	beq.n	24662 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   24646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24648:	b2da      	uxtb	r2, r3
   2464a:	231c      	movs	r3, #28
   2464c:	18fb      	adds	r3, r7, r3
   2464e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   24650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   24652:	0c1b      	lsrs	r3, r3, #16
   24654:	b2db      	uxtb	r3, r3
   24656:	221c      	movs	r2, #28
   24658:	18ba      	adds	r2, r7, r2
   2465a:	0011      	movs	r1, r2
   2465c:	0018      	movs	r0, r3
   2465e:	4b52      	ldr	r3, [pc, #328]	; (247a8 <_spi_set_config+0x1fc>)
   24660:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   24662:	2347      	movs	r3, #71	; 0x47
   24664:	18fb      	adds	r3, r7, r3
   24666:	781a      	ldrb	r2, [r3, #0]
   24668:	2347      	movs	r3, #71	; 0x47
   2466a:	18fb      	adds	r3, r7, r3
   2466c:	3201      	adds	r2, #1
   2466e:	701a      	strb	r2, [r3, #0]
   24670:	2347      	movs	r3, #71	; 0x47
   24672:	18fb      	adds	r3, r7, r3
   24674:	781b      	ldrb	r3, [r3, #0]
   24676:	2b03      	cmp	r3, #3
   24678:	d9cd      	bls.n	24616 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2467a:	683b      	ldr	r3, [r7, #0]
   2467c:	781a      	ldrb	r2, [r3, #0]
   2467e:	687b      	ldr	r3, [r7, #4]
   24680:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   24682:	683b      	ldr	r3, [r7, #0]
   24684:	7c1a      	ldrb	r2, [r3, #16]
   24686:	687b      	ldr	r3, [r7, #4]
   24688:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2468a:	683b      	ldr	r3, [r7, #0]
   2468c:	7c9a      	ldrb	r2, [r3, #18]
   2468e:	687b      	ldr	r3, [r7, #4]
   24690:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   24692:	683b      	ldr	r3, [r7, #0]
   24694:	7d1a      	ldrb	r2, [r3, #20]
   24696:	687b      	ldr	r3, [r7, #4]
   24698:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2469a:	230a      	movs	r3, #10
   2469c:	18fb      	adds	r3, r7, r3
   2469e:	2200      	movs	r2, #0
   246a0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   246a2:	2300      	movs	r3, #0
   246a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   246a6:	2300      	movs	r3, #0
   246a8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   246aa:	683b      	ldr	r3, [r7, #0]
   246ac:	781b      	ldrb	r3, [r3, #0]
   246ae:	2b01      	cmp	r3, #1
   246b0:	d129      	bne.n	24706 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   246b2:	687b      	ldr	r3, [r7, #4]
   246b4:	681b      	ldr	r3, [r3, #0]
   246b6:	0018      	movs	r0, r3
   246b8:	4b3c      	ldr	r3, [pc, #240]	; (247ac <_spi_set_config+0x200>)
   246ba:	4798      	blx	r3
   246bc:	0003      	movs	r3, r0
   246be:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   246c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   246c2:	3314      	adds	r3, #20
   246c4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   246c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   246c8:	b2db      	uxtb	r3, r3
   246ca:	0018      	movs	r0, r3
   246cc:	4b38      	ldr	r3, [pc, #224]	; (247b0 <_spi_set_config+0x204>)
   246ce:	4798      	blx	r3
   246d0:	0003      	movs	r3, r0
   246d2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   246d4:	683b      	ldr	r3, [r7, #0]
   246d6:	699b      	ldr	r3, [r3, #24]
   246d8:	2223      	movs	r2, #35	; 0x23
   246da:	18bc      	adds	r4, r7, r2
   246dc:	220a      	movs	r2, #10
   246de:	18ba      	adds	r2, r7, r2
   246e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   246e2:	0018      	movs	r0, r3
   246e4:	4b33      	ldr	r3, [pc, #204]	; (247b4 <_spi_set_config+0x208>)
   246e6:	4798      	blx	r3
   246e8:	0003      	movs	r3, r0
   246ea:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   246ec:	2323      	movs	r3, #35	; 0x23
   246ee:	18fb      	adds	r3, r7, r3
   246f0:	781b      	ldrb	r3, [r3, #0]
   246f2:	2b00      	cmp	r3, #0
   246f4:	d001      	beq.n	246fa <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   246f6:	2317      	movs	r3, #23
   246f8:	e04e      	b.n	24798 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   246fa:	230a      	movs	r3, #10
   246fc:	18fb      	adds	r3, r7, r3
   246fe:	881b      	ldrh	r3, [r3, #0]
   24700:	b2da      	uxtb	r2, r3
   24702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   24704:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   24706:	683b      	ldr	r3, [r7, #0]
   24708:	685b      	ldr	r3, [r3, #4]
   2470a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2470c:	4313      	orrs	r3, r2
   2470e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   24710:	683b      	ldr	r3, [r7, #0]
   24712:	689b      	ldr	r3, [r3, #8]
   24714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   24716:	4313      	orrs	r3, r2
   24718:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2471a:	683b      	ldr	r3, [r7, #0]
   2471c:	68db      	ldr	r3, [r3, #12]
   2471e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   24720:	4313      	orrs	r3, r2
   24722:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   24724:	683b      	ldr	r3, [r7, #0]
   24726:	7c1b      	ldrb	r3, [r3, #16]
   24728:	001a      	movs	r2, r3
   2472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2472c:	4313      	orrs	r3, r2
   2472e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   24730:	683b      	ldr	r3, [r7, #0]
   24732:	7c5b      	ldrb	r3, [r3, #17]
   24734:	2b00      	cmp	r3, #0
   24736:	d103      	bne.n	24740 <_spi_set_config+0x194>
   24738:	4b1f      	ldr	r3, [pc, #124]	; (247b8 <_spi_set_config+0x20c>)
   2473a:	4798      	blx	r3
   2473c:	1e03      	subs	r3, r0, #0
   2473e:	d003      	beq.n	24748 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   24740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   24742:	2280      	movs	r2, #128	; 0x80
   24744:	4313      	orrs	r3, r2
   24746:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   24748:	683b      	ldr	r3, [r7, #0]
   2474a:	7c9b      	ldrb	r3, [r3, #18]
   2474c:	2b00      	cmp	r3, #0
   2474e:	d004      	beq.n	2475a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   24750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   24752:	2280      	movs	r2, #128	; 0x80
   24754:	0292      	lsls	r2, r2, #10
   24756:	4313      	orrs	r3, r2
   24758:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2475a:	683b      	ldr	r3, [r7, #0]
   2475c:	7cdb      	ldrb	r3, [r3, #19]
   2475e:	2b00      	cmp	r3, #0
   24760:	d004      	beq.n	2476c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   24762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   24764:	2280      	movs	r2, #128	; 0x80
   24766:	0092      	lsls	r2, r2, #2
   24768:	4313      	orrs	r3, r2
   2476a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2476c:	683b      	ldr	r3, [r7, #0]
   2476e:	7d1b      	ldrb	r3, [r3, #20]
   24770:	2b00      	cmp	r3, #0
   24772:	d004      	beq.n	2477e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   24774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   24776:	2280      	movs	r2, #128	; 0x80
   24778:	0192      	lsls	r2, r2, #6
   2477a:	4313      	orrs	r3, r2
   2477c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   24780:	681a      	ldr	r2, [r3, #0]
   24782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   24784:	431a      	orrs	r2, r3
   24786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   24788:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2478c:	685a      	ldr	r2, [r3, #4]
   2478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   24790:	431a      	orrs	r2, r3
   24792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   24794:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   24796:	2300      	movs	r3, #0
}
   24798:	0018      	movs	r0, r3
   2479a:	46bd      	mov	sp, r7
   2479c:	b013      	add	sp, #76	; 0x4c
   2479e:	bd90      	pop	{r4, r7, pc}
   247a0:	000240a1 	.word	0x000240a1
   247a4:	00023d41 	.word	0x00023d41
   247a8:	00026ced 	.word	0x00026ced
   247ac:	00023efd 	.word	0x00023efd
   247b0:	00026ab1 	.word	0x00026ab1
   247b4:	00023a77 	.word	0x00023a77
   247b8:	00024215 	.word	0x00024215

000247bc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   247bc:	b590      	push	{r4, r7, lr}
   247be:	b08b      	sub	sp, #44	; 0x2c
   247c0:	af00      	add	r7, sp, #0
   247c2:	60f8      	str	r0, [r7, #12]
   247c4:	60b9      	str	r1, [r7, #8]
   247c6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   247c8:	68fb      	ldr	r3, [r7, #12]
   247ca:	68ba      	ldr	r2, [r7, #8]
   247cc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   247ce:	68fb      	ldr	r3, [r7, #12]
   247d0:	681b      	ldr	r3, [r3, #0]
   247d2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   247d4:	6a3b      	ldr	r3, [r7, #32]
   247d6:	681b      	ldr	r3, [r3, #0]
   247d8:	2202      	movs	r2, #2
   247da:	4013      	ands	r3, r2
   247dc:	d001      	beq.n	247e2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   247de:	231c      	movs	r3, #28
   247e0:	e09c      	b.n	2491c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   247e2:	6a3b      	ldr	r3, [r7, #32]
   247e4:	681b      	ldr	r3, [r3, #0]
   247e6:	2201      	movs	r2, #1
   247e8:	4013      	ands	r3, r2
   247ea:	d001      	beq.n	247f0 <spi_init+0x34>
		return STATUS_BUSY;
   247ec:	2305      	movs	r3, #5
   247ee:	e095      	b.n	2491c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   247f0:	68fb      	ldr	r3, [r7, #12]
   247f2:	681b      	ldr	r3, [r3, #0]
   247f4:	0018      	movs	r0, r3
   247f6:	4b4b      	ldr	r3, [pc, #300]	; (24924 <spi_init+0x168>)
   247f8:	4798      	blx	r3
   247fa:	0003      	movs	r3, r0
   247fc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   247fe:	69fb      	ldr	r3, [r7, #28]
   24800:	3302      	adds	r3, #2
   24802:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   24804:	69fb      	ldr	r3, [r7, #28]
   24806:	3314      	adds	r3, #20
   24808:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2480a:	2201      	movs	r2, #1
   2480c:	69bb      	ldr	r3, [r7, #24]
   2480e:	409a      	lsls	r2, r3
   24810:	0013      	movs	r3, r2
   24812:	0019      	movs	r1, r3
   24814:	2002      	movs	r0, #2
   24816:	4b44      	ldr	r3, [pc, #272]	; (24928 <spi_init+0x16c>)
   24818:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2481a:	2310      	movs	r3, #16
   2481c:	18fb      	adds	r3, r7, r3
   2481e:	0018      	movs	r0, r3
   24820:	4b42      	ldr	r3, [pc, #264]	; (2492c <spi_init+0x170>)
   24822:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   24824:	687b      	ldr	r3, [r7, #4]
   24826:	2224      	movs	r2, #36	; 0x24
   24828:	5c9a      	ldrb	r2, [r3, r2]
   2482a:	2310      	movs	r3, #16
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   24830:	697b      	ldr	r3, [r7, #20]
   24832:	b2db      	uxtb	r3, r3
   24834:	2210      	movs	r2, #16
   24836:	18ba      	adds	r2, r7, r2
   24838:	0011      	movs	r1, r2
   2483a:	0018      	movs	r0, r3
   2483c:	4b3c      	ldr	r3, [pc, #240]	; (24930 <spi_init+0x174>)
   2483e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   24840:	697b      	ldr	r3, [r7, #20]
   24842:	b2db      	uxtb	r3, r3
   24844:	0018      	movs	r0, r3
   24846:	4b3b      	ldr	r3, [pc, #236]	; (24934 <spi_init+0x178>)
   24848:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2484a:	687b      	ldr	r3, [r7, #4]
   2484c:	2224      	movs	r2, #36	; 0x24
   2484e:	5c9b      	ldrb	r3, [r3, r2]
   24850:	2100      	movs	r1, #0
   24852:	0018      	movs	r0, r3
   24854:	4b38      	ldr	r3, [pc, #224]	; (24938 <spi_init+0x17c>)
   24856:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   24858:	687b      	ldr	r3, [r7, #4]
   2485a:	781b      	ldrb	r3, [r3, #0]
   2485c:	2b01      	cmp	r3, #1
   2485e:	d105      	bne.n	2486c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   24860:	6a3b      	ldr	r3, [r7, #32]
   24862:	681b      	ldr	r3, [r3, #0]
   24864:	220c      	movs	r2, #12
   24866:	431a      	orrs	r2, r3
   24868:	6a3b      	ldr	r3, [r7, #32]
   2486a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2486c:	2327      	movs	r3, #39	; 0x27
   2486e:	18fb      	adds	r3, r7, r3
   24870:	2200      	movs	r2, #0
   24872:	701a      	strb	r2, [r3, #0]
   24874:	e010      	b.n	24898 <spi_init+0xdc>
		module->callback[i]        = NULL;
   24876:	2327      	movs	r3, #39	; 0x27
   24878:	18fb      	adds	r3, r7, r3
   2487a:	781b      	ldrb	r3, [r3, #0]
   2487c:	68fa      	ldr	r2, [r7, #12]
   2487e:	3302      	adds	r3, #2
   24880:	009b      	lsls	r3, r3, #2
   24882:	18d3      	adds	r3, r2, r3
   24884:	3304      	adds	r3, #4
   24886:	2200      	movs	r2, #0
   24888:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2488a:	2327      	movs	r3, #39	; 0x27
   2488c:	18fb      	adds	r3, r7, r3
   2488e:	781a      	ldrb	r2, [r3, #0]
   24890:	2327      	movs	r3, #39	; 0x27
   24892:	18fb      	adds	r3, r7, r3
   24894:	3201      	adds	r2, #1
   24896:	701a      	strb	r2, [r3, #0]
   24898:	2327      	movs	r3, #39	; 0x27
   2489a:	18fb      	adds	r3, r7, r3
   2489c:	781b      	ldrb	r3, [r3, #0]
   2489e:	2b06      	cmp	r3, #6
   248a0:	d9e9      	bls.n	24876 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   248a2:	68fb      	ldr	r3, [r7, #12]
   248a4:	2200      	movs	r2, #0
   248a6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   248a8:	68fb      	ldr	r3, [r7, #12]
   248aa:	2200      	movs	r2, #0
   248ac:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   248ae:	68fb      	ldr	r3, [r7, #12]
   248b0:	2200      	movs	r2, #0
   248b2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   248b4:	68fb      	ldr	r3, [r7, #12]
   248b6:	2200      	movs	r2, #0
   248b8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   248ba:	68fb      	ldr	r3, [r7, #12]
   248bc:	2236      	movs	r2, #54	; 0x36
   248be:	2100      	movs	r1, #0
   248c0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   248c2:	68fb      	ldr	r3, [r7, #12]
   248c4:	2237      	movs	r2, #55	; 0x37
   248c6:	2100      	movs	r1, #0
   248c8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   248ca:	68fb      	ldr	r3, [r7, #12]
   248cc:	2238      	movs	r2, #56	; 0x38
   248ce:	2100      	movs	r1, #0
   248d0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   248d2:	68fb      	ldr	r3, [r7, #12]
   248d4:	2203      	movs	r2, #3
   248d6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   248d8:	68fb      	ldr	r3, [r7, #12]
   248da:	2200      	movs	r2, #0
   248dc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   248de:	68fb      	ldr	r3, [r7, #12]
   248e0:	681b      	ldr	r3, [r3, #0]
   248e2:	2213      	movs	r2, #19
   248e4:	18bc      	adds	r4, r7, r2
   248e6:	0018      	movs	r0, r3
   248e8:	4b0e      	ldr	r3, [pc, #56]	; (24924 <spi_init+0x168>)
   248ea:	4798      	blx	r3
   248ec:	0003      	movs	r3, r0
   248ee:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   248f0:	4a12      	ldr	r2, [pc, #72]	; (2493c <spi_init+0x180>)
   248f2:	2313      	movs	r3, #19
   248f4:	18fb      	adds	r3, r7, r3
   248f6:	781b      	ldrb	r3, [r3, #0]
   248f8:	0011      	movs	r1, r2
   248fa:	0018      	movs	r0, r3
   248fc:	4b10      	ldr	r3, [pc, #64]	; (24940 <spi_init+0x184>)
   248fe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   24900:	2313      	movs	r3, #19
   24902:	18fb      	adds	r3, r7, r3
   24904:	781a      	ldrb	r2, [r3, #0]
   24906:	4b0f      	ldr	r3, [pc, #60]	; (24944 <spi_init+0x188>)
   24908:	0092      	lsls	r2, r2, #2
   2490a:	68f9      	ldr	r1, [r7, #12]
   2490c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2490e:	687a      	ldr	r2, [r7, #4]
   24910:	68fb      	ldr	r3, [r7, #12]
   24912:	0011      	movs	r1, r2
   24914:	0018      	movs	r0, r3
   24916:	4b0c      	ldr	r3, [pc, #48]	; (24948 <spi_init+0x18c>)
   24918:	4798      	blx	r3
   2491a:	0003      	movs	r3, r0
}
   2491c:	0018      	movs	r0, r3
   2491e:	46bd      	mov	sp, r7
   24920:	b00b      	add	sp, #44	; 0x2c
   24922:	bd90      	pop	{r4, r7, pc}
   24924:	00023efd 	.word	0x00023efd
   24928:	000241b9 	.word	0x000241b9
   2492c:	000241a1 	.word	0x000241a1
   24930:	0002698d 	.word	0x0002698d
   24934:	000269d1 	.word	0x000269d1
   24938:	00023cb5 	.word	0x00023cb5
   2493c:	00024fd5 	.word	0x00024fd5
   24940:	00023f61 	.word	0x00023f61
   24944:	20005638 	.word	0x20005638
   24948:	000245ad 	.word	0x000245ad

0002494c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2494c:	b590      	push	{r4, r7, lr}
   2494e:	b087      	sub	sp, #28
   24950:	af00      	add	r7, sp, #0
   24952:	60f8      	str	r0, [r7, #12]
   24954:	60b9      	str	r1, [r7, #8]
   24956:	0019      	movs	r1, r3
   24958:	1dbb      	adds	r3, r7, #6
   2495a:	801a      	strh	r2, [r3, #0]
   2495c:	1d3b      	adds	r3, r7, #4
   2495e:	1c0a      	adds	r2, r1, #0
   24960:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   24962:	68fb      	ldr	r3, [r7, #12]
   24964:	2238      	movs	r2, #56	; 0x38
   24966:	5c9b      	ldrb	r3, [r3, r2]
   24968:	b2db      	uxtb	r3, r3
   2496a:	2b05      	cmp	r3, #5
   2496c:	d101      	bne.n	24972 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2496e:	2305      	movs	r3, #5
   24970:	e07a      	b.n	24a68 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   24972:	1dbb      	adds	r3, r7, #6
   24974:	881b      	ldrh	r3, [r3, #0]
   24976:	2b00      	cmp	r3, #0
   24978:	d101      	bne.n	2497e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2497a:	2317      	movs	r3, #23
   2497c:	e074      	b.n	24a68 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2497e:	68fb      	ldr	r3, [r7, #12]
   24980:	79db      	ldrb	r3, [r3, #7]
   24982:	2201      	movs	r2, #1
   24984:	4053      	eors	r3, r2
   24986:	b2db      	uxtb	r3, r3
   24988:	2b00      	cmp	r3, #0
   2498a:	d001      	beq.n	24990 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   2498c:	231c      	movs	r3, #28
   2498e:	e06b      	b.n	24a68 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   24990:	2316      	movs	r3, #22
   24992:	18fb      	adds	r3, r7, r3
   24994:	2200      	movs	r2, #0
   24996:	801a      	strh	r2, [r3, #0]

	while (length--) {
   24998:	e05e      	b.n	24a58 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2499a:	68fb      	ldr	r3, [r7, #12]
   2499c:	795b      	ldrb	r3, [r3, #5]
   2499e:	2b01      	cmp	r3, #1
   249a0:	d112      	bne.n	249c8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   249a2:	46c0      	nop			; (mov r8, r8)
   249a4:	68fb      	ldr	r3, [r7, #12]
   249a6:	0018      	movs	r0, r3
   249a8:	4b31      	ldr	r3, [pc, #196]	; (24a70 <spi_read_buffer_wait+0x124>)
   249aa:	4798      	blx	r3
   249ac:	0003      	movs	r3, r0
   249ae:	001a      	movs	r2, r3
   249b0:	2301      	movs	r3, #1
   249b2:	4053      	eors	r3, r2
   249b4:	b2db      	uxtb	r3, r3
   249b6:	2b00      	cmp	r3, #0
   249b8:	d1f4      	bne.n	249a4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   249ba:	1d3b      	adds	r3, r7, #4
   249bc:	881a      	ldrh	r2, [r3, #0]
   249be:	68fb      	ldr	r3, [r7, #12]
   249c0:	0011      	movs	r1, r2
   249c2:	0018      	movs	r0, r3
   249c4:	4b2b      	ldr	r3, [pc, #172]	; (24a74 <spi_read_buffer_wait+0x128>)
   249c6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   249c8:	46c0      	nop			; (mov r8, r8)
   249ca:	68fb      	ldr	r3, [r7, #12]
   249cc:	0018      	movs	r0, r3
   249ce:	4b2a      	ldr	r3, [pc, #168]	; (24a78 <spi_read_buffer_wait+0x12c>)
   249d0:	4798      	blx	r3
   249d2:	0003      	movs	r3, r0
   249d4:	001a      	movs	r2, r3
   249d6:	2301      	movs	r3, #1
   249d8:	4053      	eors	r3, r2
   249da:	b2db      	uxtb	r3, r3
   249dc:	2b00      	cmp	r3, #0
   249de:	d1f4      	bne.n	249ca <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   249e0:	2312      	movs	r3, #18
   249e2:	18fb      	adds	r3, r7, r3
   249e4:	2200      	movs	r2, #0
   249e6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   249e8:	2315      	movs	r3, #21
   249ea:	18fc      	adds	r4, r7, r3
   249ec:	2312      	movs	r3, #18
   249ee:	18fa      	adds	r2, r7, r3
   249f0:	68fb      	ldr	r3, [r7, #12]
   249f2:	0011      	movs	r1, r2
   249f4:	0018      	movs	r0, r3
   249f6:	4b21      	ldr	r3, [pc, #132]	; (24a7c <spi_read_buffer_wait+0x130>)
   249f8:	4798      	blx	r3
   249fa:	0003      	movs	r3, r0
   249fc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   249fe:	2315      	movs	r3, #21
   24a00:	18fb      	adds	r3, r7, r3
   24a02:	781b      	ldrb	r3, [r3, #0]
   24a04:	2b00      	cmp	r3, #0
   24a06:	d003      	beq.n	24a10 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   24a08:	2315      	movs	r3, #21
   24a0a:	18fb      	adds	r3, r7, r3
   24a0c:	781b      	ldrb	r3, [r3, #0]
   24a0e:	e02b      	b.n	24a68 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   24a10:	2316      	movs	r3, #22
   24a12:	18fb      	adds	r3, r7, r3
   24a14:	881b      	ldrh	r3, [r3, #0]
   24a16:	2216      	movs	r2, #22
   24a18:	18ba      	adds	r2, r7, r2
   24a1a:	1c59      	adds	r1, r3, #1
   24a1c:	8011      	strh	r1, [r2, #0]
   24a1e:	001a      	movs	r2, r3
   24a20:	68bb      	ldr	r3, [r7, #8]
   24a22:	189b      	adds	r3, r3, r2
   24a24:	2212      	movs	r2, #18
   24a26:	18ba      	adds	r2, r7, r2
   24a28:	8812      	ldrh	r2, [r2, #0]
   24a2a:	b2d2      	uxtb	r2, r2
   24a2c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   24a2e:	68fb      	ldr	r3, [r7, #12]
   24a30:	799b      	ldrb	r3, [r3, #6]
   24a32:	2b01      	cmp	r3, #1
   24a34:	d110      	bne.n	24a58 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   24a36:	2316      	movs	r3, #22
   24a38:	18fb      	adds	r3, r7, r3
   24a3a:	881b      	ldrh	r3, [r3, #0]
   24a3c:	2216      	movs	r2, #22
   24a3e:	18ba      	adds	r2, r7, r2
   24a40:	1c59      	adds	r1, r3, #1
   24a42:	8011      	strh	r1, [r2, #0]
   24a44:	001a      	movs	r2, r3
   24a46:	68bb      	ldr	r3, [r7, #8]
   24a48:	189b      	adds	r3, r3, r2
   24a4a:	2212      	movs	r2, #18
   24a4c:	18ba      	adds	r2, r7, r2
   24a4e:	8812      	ldrh	r2, [r2, #0]
   24a50:	0a12      	lsrs	r2, r2, #8
   24a52:	b292      	uxth	r2, r2
   24a54:	b2d2      	uxtb	r2, r2
   24a56:	701a      	strb	r2, [r3, #0]
	while (length--) {
   24a58:	1dbb      	adds	r3, r7, #6
   24a5a:	881b      	ldrh	r3, [r3, #0]
   24a5c:	1dba      	adds	r2, r7, #6
   24a5e:	1e59      	subs	r1, r3, #1
   24a60:	8011      	strh	r1, [r2, #0]
   24a62:	2b00      	cmp	r3, #0
   24a64:	d199      	bne.n	2499a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   24a66:	2300      	movs	r3, #0
}
   24a68:	0018      	movs	r0, r3
   24a6a:	46bd      	mov	sp, r7
   24a6c:	b007      	add	sp, #28
   24a6e:	bd90      	pop	{r4, r7, pc}
   24a70:	00024385 	.word	0x00024385
   24a74:	000243d5 	.word	0x000243d5
   24a78:	000243ad 	.word	0x000243ad
   24a7c:	0002441d 	.word	0x0002441d

00024a80 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   24a80:	b580      	push	{r7, lr}
   24a82:	b086      	sub	sp, #24
   24a84:	af00      	add	r7, sp, #0
   24a86:	60f8      	str	r0, [r7, #12]
   24a88:	60b9      	str	r1, [r7, #8]
   24a8a:	1dfb      	adds	r3, r7, #7
   24a8c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   24a8e:	68fb      	ldr	r3, [r7, #12]
   24a90:	795b      	ldrb	r3, [r3, #5]
   24a92:	2b01      	cmp	r3, #1
   24a94:	d001      	beq.n	24a9a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   24a96:	2315      	movs	r3, #21
   24a98:	e05c      	b.n	24b54 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   24a9a:	68fb      	ldr	r3, [r7, #12]
   24a9c:	7a1b      	ldrb	r3, [r3, #8]
   24a9e:	2201      	movs	r2, #1
   24aa0:	4053      	eors	r3, r2
   24aa2:	b2db      	uxtb	r3, r3
   24aa4:	2b00      	cmp	r3, #0
   24aa6:	d054      	beq.n	24b52 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   24aa8:	1dfb      	adds	r3, r7, #7
   24aaa:	781b      	ldrb	r3, [r3, #0]
   24aac:	2b00      	cmp	r3, #0
   24aae:	d04a      	beq.n	24b46 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   24ab0:	68bb      	ldr	r3, [r7, #8]
   24ab2:	785b      	ldrb	r3, [r3, #1]
   24ab4:	2b00      	cmp	r3, #0
   24ab6:	d03f      	beq.n	24b38 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   24ab8:	68fb      	ldr	r3, [r7, #12]
   24aba:	0018      	movs	r0, r3
   24abc:	4b27      	ldr	r3, [pc, #156]	; (24b5c <spi_select_slave+0xdc>)
   24abe:	4798      	blx	r3
   24ac0:	0003      	movs	r3, r0
   24ac2:	001a      	movs	r2, r3
   24ac4:	2301      	movs	r3, #1
   24ac6:	4053      	eors	r3, r2
   24ac8:	b2db      	uxtb	r3, r3
   24aca:	2b00      	cmp	r3, #0
   24acc:	d007      	beq.n	24ade <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   24ace:	68bb      	ldr	r3, [r7, #8]
   24ad0:	781b      	ldrb	r3, [r3, #0]
   24ad2:	2101      	movs	r1, #1
   24ad4:	0018      	movs	r0, r3
   24ad6:	4b22      	ldr	r3, [pc, #136]	; (24b60 <spi_select_slave+0xe0>)
   24ad8:	4798      	blx	r3
					return STATUS_BUSY;
   24ada:	2305      	movs	r3, #5
   24adc:	e03a      	b.n	24b54 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   24ade:	68bb      	ldr	r3, [r7, #8]
   24ae0:	781b      	ldrb	r3, [r3, #0]
   24ae2:	2100      	movs	r1, #0
   24ae4:	0018      	movs	r0, r3
   24ae6:	4b1e      	ldr	r3, [pc, #120]	; (24b60 <spi_select_slave+0xe0>)
   24ae8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   24aea:	68bb      	ldr	r3, [r7, #8]
   24aec:	789b      	ldrb	r3, [r3, #2]
   24aee:	b29a      	uxth	r2, r3
   24af0:	68fb      	ldr	r3, [r7, #12]
   24af2:	0011      	movs	r1, r2
   24af4:	0018      	movs	r0, r3
   24af6:	4b1b      	ldr	r3, [pc, #108]	; (24b64 <spi_select_slave+0xe4>)
   24af8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   24afa:	68fb      	ldr	r3, [r7, #12]
   24afc:	79db      	ldrb	r3, [r3, #7]
   24afe:	2201      	movs	r2, #1
   24b00:	4053      	eors	r3, r2
   24b02:	b2db      	uxtb	r3, r3
   24b04:	2b00      	cmp	r3, #0
   24b06:	d024      	beq.n	24b52 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   24b08:	46c0      	nop			; (mov r8, r8)
   24b0a:	68fb      	ldr	r3, [r7, #12]
   24b0c:	0018      	movs	r0, r3
   24b0e:	4b16      	ldr	r3, [pc, #88]	; (24b68 <spi_select_slave+0xe8>)
   24b10:	4798      	blx	r3
   24b12:	0003      	movs	r3, r0
   24b14:	001a      	movs	r2, r3
   24b16:	2301      	movs	r3, #1
   24b18:	4053      	eors	r3, r2
   24b1a:	b2db      	uxtb	r3, r3
   24b1c:	2b00      	cmp	r3, #0
   24b1e:	d1f4      	bne.n	24b0a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   24b20:	2316      	movs	r3, #22
   24b22:	18fb      	adds	r3, r7, r3
   24b24:	2200      	movs	r2, #0
   24b26:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   24b28:	2316      	movs	r3, #22
   24b2a:	18fa      	adds	r2, r7, r3
   24b2c:	68fb      	ldr	r3, [r7, #12]
   24b2e:	0011      	movs	r1, r2
   24b30:	0018      	movs	r0, r3
   24b32:	4b0e      	ldr	r3, [pc, #56]	; (24b6c <spi_select_slave+0xec>)
   24b34:	4798      	blx	r3
   24b36:	e00c      	b.n	24b52 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   24b38:	68bb      	ldr	r3, [r7, #8]
   24b3a:	781b      	ldrb	r3, [r3, #0]
   24b3c:	2100      	movs	r1, #0
   24b3e:	0018      	movs	r0, r3
   24b40:	4b07      	ldr	r3, [pc, #28]	; (24b60 <spi_select_slave+0xe0>)
   24b42:	4798      	blx	r3
   24b44:	e005      	b.n	24b52 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   24b46:	68bb      	ldr	r3, [r7, #8]
   24b48:	781b      	ldrb	r3, [r3, #0]
   24b4a:	2101      	movs	r1, #1
   24b4c:	0018      	movs	r0, r3
   24b4e:	4b04      	ldr	r3, [pc, #16]	; (24b60 <spi_select_slave+0xe0>)
   24b50:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   24b52:	2300      	movs	r3, #0
}
   24b54:	0018      	movs	r0, r3
   24b56:	46bd      	mov	sp, r7
   24b58:	b006      	add	sp, #24
   24b5a:	bd80      	pop	{r7, pc}
   24b5c:	00024385 	.word	0x00024385
   24b60:	0002414d 	.word	0x0002414d
   24b64:	000243d5 	.word	0x000243d5
   24b68:	000243ad 	.word	0x000243ad
   24b6c:	0002441d 	.word	0x0002441d

00024b70 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   24b70:	b580      	push	{r7, lr}
   24b72:	b086      	sub	sp, #24
   24b74:	af00      	add	r7, sp, #0
   24b76:	60f8      	str	r0, [r7, #12]
   24b78:	60b9      	str	r1, [r7, #8]
   24b7a:	1dbb      	adds	r3, r7, #6
   24b7c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   24b7e:	68fb      	ldr	r3, [r7, #12]
   24b80:	2238      	movs	r2, #56	; 0x38
   24b82:	5c9b      	ldrb	r3, [r3, r2]
   24b84:	b2db      	uxtb	r3, r3
   24b86:	2b05      	cmp	r3, #5
   24b88:	d101      	bne.n	24b8e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   24b8a:	2305      	movs	r3, #5
   24b8c:	e087      	b.n	24c9e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   24b8e:	1dbb      	adds	r3, r7, #6
   24b90:	881b      	ldrh	r3, [r3, #0]
   24b92:	2b00      	cmp	r3, #0
   24b94:	d101      	bne.n	24b9a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   24b96:	2317      	movs	r3, #23
   24b98:	e081      	b.n	24c9e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   24b9a:	2316      	movs	r3, #22
   24b9c:	18fb      	adds	r3, r7, r3
   24b9e:	2200      	movs	r2, #0
   24ba0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   24ba2:	2314      	movs	r3, #20
   24ba4:	18fb      	adds	r3, r7, r3
   24ba6:	1dba      	adds	r2, r7, #6
   24ba8:	8812      	ldrh	r2, [r2, #0]
   24baa:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   24bac:	e05f      	b.n	24c6e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   24bae:	46c0      	nop			; (mov r8, r8)
   24bb0:	68fb      	ldr	r3, [r7, #12]
   24bb2:	0018      	movs	r0, r3
   24bb4:	4b3c      	ldr	r3, [pc, #240]	; (24ca8 <spi_write_buffer_wait+0x138>)
   24bb6:	4798      	blx	r3
   24bb8:	0003      	movs	r3, r0
   24bba:	001a      	movs	r2, r3
   24bbc:	2301      	movs	r3, #1
   24bbe:	4053      	eors	r3, r2
   24bc0:	b2db      	uxtb	r3, r3
   24bc2:	2b00      	cmp	r3, #0
   24bc4:	d1f4      	bne.n	24bb0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   24bc6:	2316      	movs	r3, #22
   24bc8:	18fb      	adds	r3, r7, r3
   24bca:	881b      	ldrh	r3, [r3, #0]
   24bcc:	2216      	movs	r2, #22
   24bce:	18ba      	adds	r2, r7, r2
   24bd0:	1c59      	adds	r1, r3, #1
   24bd2:	8011      	strh	r1, [r2, #0]
   24bd4:	001a      	movs	r2, r3
   24bd6:	68bb      	ldr	r3, [r7, #8]
   24bd8:	189b      	adds	r3, r3, r2
   24bda:	781a      	ldrb	r2, [r3, #0]
   24bdc:	2312      	movs	r3, #18
   24bde:	18fb      	adds	r3, r7, r3
   24be0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   24be2:	68fb      	ldr	r3, [r7, #12]
   24be4:	799b      	ldrb	r3, [r3, #6]
   24be6:	2b01      	cmp	r3, #1
   24be8:	d115      	bne.n	24c16 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   24bea:	2316      	movs	r3, #22
   24bec:	18fb      	adds	r3, r7, r3
   24bee:	881b      	ldrh	r3, [r3, #0]
   24bf0:	2216      	movs	r2, #22
   24bf2:	18ba      	adds	r2, r7, r2
   24bf4:	1c59      	adds	r1, r3, #1
   24bf6:	8011      	strh	r1, [r2, #0]
   24bf8:	001a      	movs	r2, r3
   24bfa:	68bb      	ldr	r3, [r7, #8]
   24bfc:	189b      	adds	r3, r3, r2
   24bfe:	781b      	ldrb	r3, [r3, #0]
   24c00:	021b      	lsls	r3, r3, #8
   24c02:	b21a      	sxth	r2, r3
   24c04:	2312      	movs	r3, #18
   24c06:	18fb      	adds	r3, r7, r3
   24c08:	2100      	movs	r1, #0
   24c0a:	5e5b      	ldrsh	r3, [r3, r1]
   24c0c:	4313      	orrs	r3, r2
   24c0e:	b21a      	sxth	r2, r3
   24c10:	2312      	movs	r3, #18
   24c12:	18fb      	adds	r3, r7, r3
   24c14:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   24c16:	2312      	movs	r3, #18
   24c18:	18fb      	adds	r3, r7, r3
   24c1a:	881a      	ldrh	r2, [r3, #0]
   24c1c:	68fb      	ldr	r3, [r7, #12]
   24c1e:	0011      	movs	r1, r2
   24c20:	0018      	movs	r0, r3
   24c22:	4b22      	ldr	r3, [pc, #136]	; (24cac <spi_write_buffer_wait+0x13c>)
   24c24:	4798      	blx	r3

		if (module->receiver_enabled) {
   24c26:	68fb      	ldr	r3, [r7, #12]
   24c28:	79db      	ldrb	r3, [r3, #7]
   24c2a:	2214      	movs	r2, #20
   24c2c:	18ba      	adds	r2, r7, r2
   24c2e:	2114      	movs	r1, #20
   24c30:	1879      	adds	r1, r7, r1
   24c32:	8809      	ldrh	r1, [r1, #0]
   24c34:	8011      	strh	r1, [r2, #0]
   24c36:	2b00      	cmp	r3, #0
   24c38:	d019      	beq.n	24c6e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   24c3a:	46c0      	nop			; (mov r8, r8)
   24c3c:	68fb      	ldr	r3, [r7, #12]
   24c3e:	0018      	movs	r0, r3
   24c40:	4b1b      	ldr	r3, [pc, #108]	; (24cb0 <spi_write_buffer_wait+0x140>)
   24c42:	4798      	blx	r3
   24c44:	0003      	movs	r3, r0
   24c46:	001a      	movs	r2, r3
   24c48:	2301      	movs	r3, #1
   24c4a:	4053      	eors	r3, r2
   24c4c:	b2db      	uxtb	r3, r3
   24c4e:	2b00      	cmp	r3, #0
   24c50:	d1f4      	bne.n	24c3c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   24c52:	2310      	movs	r3, #16
   24c54:	18fa      	adds	r2, r7, r3
   24c56:	68fb      	ldr	r3, [r7, #12]
   24c58:	0011      	movs	r1, r2
   24c5a:	0018      	movs	r0, r3
   24c5c:	4b15      	ldr	r3, [pc, #84]	; (24cb4 <spi_write_buffer_wait+0x144>)
   24c5e:	4798      	blx	r3
			flush_length--;
   24c60:	2314      	movs	r3, #20
   24c62:	18fb      	adds	r3, r7, r3
   24c64:	881a      	ldrh	r2, [r3, #0]
   24c66:	2314      	movs	r3, #20
   24c68:	18fb      	adds	r3, r7, r3
   24c6a:	3a01      	subs	r2, #1
   24c6c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   24c6e:	1dbb      	adds	r3, r7, #6
   24c70:	881b      	ldrh	r3, [r3, #0]
   24c72:	1dba      	adds	r2, r7, #6
   24c74:	1e59      	subs	r1, r3, #1
   24c76:	8011      	strh	r1, [r2, #0]
   24c78:	2b00      	cmp	r3, #0
   24c7a:	d198      	bne.n	24bae <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   24c7c:	68fb      	ldr	r3, [r7, #12]
   24c7e:	795b      	ldrb	r3, [r3, #5]
   24c80:	2b01      	cmp	r3, #1
   24c82:	d10b      	bne.n	24c9c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   24c84:	46c0      	nop			; (mov r8, r8)
   24c86:	68fb      	ldr	r3, [r7, #12]
   24c88:	0018      	movs	r0, r3
   24c8a:	4b0b      	ldr	r3, [pc, #44]	; (24cb8 <spi_write_buffer_wait+0x148>)
   24c8c:	4798      	blx	r3
   24c8e:	0003      	movs	r3, r0
   24c90:	001a      	movs	r2, r3
   24c92:	2301      	movs	r3, #1
   24c94:	4053      	eors	r3, r2
   24c96:	b2db      	uxtb	r3, r3
   24c98:	2b00      	cmp	r3, #0
   24c9a:	d1f4      	bne.n	24c86 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   24c9c:	2300      	movs	r3, #0
}
   24c9e:	0018      	movs	r0, r3
   24ca0:	46bd      	mov	sp, r7
   24ca2:	b006      	add	sp, #24
   24ca4:	bd80      	pop	{r7, pc}
   24ca6:	46c0      	nop			; (mov r8, r8)
   24ca8:	00024385 	.word	0x00024385
   24cac:	000243d5 	.word	0x000243d5
   24cb0:	000243ad 	.word	0x000243ad
   24cb4:	0002441d 	.word	0x0002441d
   24cb8:	0002435d 	.word	0x0002435d

00024cbc <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
   24cbc:	b590      	push	{r4, r7, lr}
   24cbe:	b089      	sub	sp, #36	; 0x24
   24cc0:	af00      	add	r7, sp, #0
   24cc2:	60f8      	str	r0, [r7, #12]
   24cc4:	60b9      	str	r1, [r7, #8]
   24cc6:	607a      	str	r2, [r7, #4]
   24cc8:	001a      	movs	r2, r3
   24cca:	1cbb      	adds	r3, r7, #2
   24ccc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   24cce:	68fb      	ldr	r3, [r7, #12]
   24cd0:	2238      	movs	r2, #56	; 0x38
   24cd2:	5c9b      	ldrb	r3, [r3, r2]
   24cd4:	b2db      	uxtb	r3, r3
   24cd6:	2b05      	cmp	r3, #5
   24cd8:	d101      	bne.n	24cde <spi_transceive_buffer_wait+0x22>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   24cda:	2305      	movs	r3, #5
   24cdc:	e0c0      	b.n	24e60 <spi_transceive_buffer_wait+0x1a4>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   24cde:	1cbb      	adds	r3, r7, #2
   24ce0:	881b      	ldrh	r3, [r3, #0]
   24ce2:	2b00      	cmp	r3, #0
   24ce4:	d101      	bne.n	24cea <spi_transceive_buffer_wait+0x2e>
		return STATUS_ERR_INVALID_ARG;
   24ce6:	2317      	movs	r3, #23
   24ce8:	e0ba      	b.n	24e60 <spi_transceive_buffer_wait+0x1a4>
	}

	if (!(module->receiver_enabled)) {
   24cea:	68fb      	ldr	r3, [r7, #12]
   24cec:	79db      	ldrb	r3, [r3, #7]
   24cee:	2201      	movs	r2, #1
   24cf0:	4053      	eors	r3, r2
   24cf2:	b2db      	uxtb	r3, r3
   24cf4:	2b00      	cmp	r3, #0
   24cf6:	d001      	beq.n	24cfc <spi_transceive_buffer_wait+0x40>
		return STATUS_ERR_DENIED;
   24cf8:	231c      	movs	r3, #28
   24cfa:	e0b1      	b.n	24e60 <spi_transceive_buffer_wait+0x1a4>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   24cfc:	231e      	movs	r3, #30
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	2200      	movs	r2, #0
   24d02:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
   24d04:	231c      	movs	r3, #28
   24d06:	18fb      	adds	r3, r7, r3
   24d08:	2200      	movs	r2, #0
   24d0a:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
   24d0c:	231a      	movs	r3, #26
   24d0e:	18fb      	adds	r3, r7, r3
   24d10:	1cba      	adds	r2, r7, #2
   24d12:	8812      	ldrh	r2, [r2, #0]
   24d14:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
   24d16:	e08a      	b.n	24e2e <spi_transceive_buffer_wait+0x172>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   24d18:	46c0      	nop			; (mov r8, r8)
   24d1a:	68fb      	ldr	r3, [r7, #12]
   24d1c:	0018      	movs	r0, r3
   24d1e:	4b52      	ldr	r3, [pc, #328]	; (24e68 <spi_transceive_buffer_wait+0x1ac>)
   24d20:	4798      	blx	r3
   24d22:	0003      	movs	r3, r0
   24d24:	001a      	movs	r2, r3
   24d26:	2301      	movs	r3, #1
   24d28:	4053      	eors	r3, r2
   24d2a:	b2db      	uxtb	r3, r3
   24d2c:	2b00      	cmp	r3, #0
   24d2e:	d1f4      	bne.n	24d1a <spi_transceive_buffer_wait+0x5e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   24d30:	231e      	movs	r3, #30
   24d32:	18fb      	adds	r3, r7, r3
   24d34:	881b      	ldrh	r3, [r3, #0]
   24d36:	221e      	movs	r2, #30
   24d38:	18ba      	adds	r2, r7, r2
   24d3a:	1c59      	adds	r1, r3, #1
   24d3c:	8011      	strh	r1, [r2, #0]
   24d3e:	001a      	movs	r2, r3
   24d40:	68bb      	ldr	r3, [r7, #8]
   24d42:	189b      	adds	r3, r3, r2
   24d44:	781a      	ldrb	r2, [r3, #0]
   24d46:	2318      	movs	r3, #24
   24d48:	18fb      	adds	r3, r7, r3
   24d4a:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   24d4c:	68fb      	ldr	r3, [r7, #12]
   24d4e:	799b      	ldrb	r3, [r3, #6]
   24d50:	2b01      	cmp	r3, #1
   24d52:	d115      	bne.n	24d80 <spi_transceive_buffer_wait+0xc4>
			data_to_send |= (tx_data[tx_pos++] << 8);
   24d54:	231e      	movs	r3, #30
   24d56:	18fb      	adds	r3, r7, r3
   24d58:	881b      	ldrh	r3, [r3, #0]
   24d5a:	221e      	movs	r2, #30
   24d5c:	18ba      	adds	r2, r7, r2
   24d5e:	1c59      	adds	r1, r3, #1
   24d60:	8011      	strh	r1, [r2, #0]
   24d62:	001a      	movs	r2, r3
   24d64:	68bb      	ldr	r3, [r7, #8]
   24d66:	189b      	adds	r3, r3, r2
   24d68:	781b      	ldrb	r3, [r3, #0]
   24d6a:	021b      	lsls	r3, r3, #8
   24d6c:	b21a      	sxth	r2, r3
   24d6e:	2318      	movs	r3, #24
   24d70:	18fb      	adds	r3, r7, r3
   24d72:	2100      	movs	r1, #0
   24d74:	5e5b      	ldrsh	r3, [r3, r1]
   24d76:	4313      	orrs	r3, r2
   24d78:	b21a      	sxth	r2, r3
   24d7a:	2318      	movs	r3, #24
   24d7c:	18fb      	adds	r3, r7, r3
   24d7e:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   24d80:	2318      	movs	r3, #24
   24d82:	18fb      	adds	r3, r7, r3
   24d84:	881a      	ldrh	r2, [r3, #0]
   24d86:	68fb      	ldr	r3, [r7, #12]
   24d88:	0011      	movs	r1, r2
   24d8a:	0018      	movs	r0, r3
   24d8c:	4b37      	ldr	r3, [pc, #220]	; (24e6c <spi_transceive_buffer_wait+0x1b0>)
   24d8e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   24d90:	46c0      	nop			; (mov r8, r8)
   24d92:	68fb      	ldr	r3, [r7, #12]
   24d94:	0018      	movs	r0, r3
   24d96:	4b36      	ldr	r3, [pc, #216]	; (24e70 <spi_transceive_buffer_wait+0x1b4>)
   24d98:	4798      	blx	r3
   24d9a:	0003      	movs	r3, r0
   24d9c:	001a      	movs	r2, r3
   24d9e:	2301      	movs	r3, #1
   24da0:	4053      	eors	r3, r2
   24da2:	b2db      	uxtb	r3, r3
   24da4:	2b00      	cmp	r3, #0
   24da6:	d1f4      	bne.n	24d92 <spi_transceive_buffer_wait+0xd6>
		}

		enum status_code retval;
		uint16_t received_data = 0;
   24da8:	2314      	movs	r3, #20
   24daa:	18fb      	adds	r3, r7, r3
   24dac:	2200      	movs	r2, #0
   24dae:	801a      	strh	r2, [r3, #0]
		rx_length--;
   24db0:	231a      	movs	r3, #26
   24db2:	18fb      	adds	r3, r7, r3
   24db4:	881a      	ldrh	r2, [r3, #0]
   24db6:	231a      	movs	r3, #26
   24db8:	18fb      	adds	r3, r7, r3
   24dba:	3a01      	subs	r2, #1
   24dbc:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
   24dbe:	2317      	movs	r3, #23
   24dc0:	18fc      	adds	r4, r7, r3
   24dc2:	2314      	movs	r3, #20
   24dc4:	18fa      	adds	r2, r7, r3
   24dc6:	68fb      	ldr	r3, [r7, #12]
   24dc8:	0011      	movs	r1, r2
   24dca:	0018      	movs	r0, r3
   24dcc:	4b29      	ldr	r3, [pc, #164]	; (24e74 <spi_transceive_buffer_wait+0x1b8>)
   24dce:	4798      	blx	r3
   24dd0:	0003      	movs	r3, r0
   24dd2:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   24dd4:	2317      	movs	r3, #23
   24dd6:	18fb      	adds	r3, r7, r3
   24dd8:	781b      	ldrb	r3, [r3, #0]
   24dda:	2b00      	cmp	r3, #0
   24ddc:	d003      	beq.n	24de6 <spi_transceive_buffer_wait+0x12a>
			/* Overflow, abort */
			return retval;
   24dde:	2317      	movs	r3, #23
   24de0:	18fb      	adds	r3, r7, r3
   24de2:	781b      	ldrb	r3, [r3, #0]
   24de4:	e03c      	b.n	24e60 <spi_transceive_buffer_wait+0x1a4>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   24de6:	231c      	movs	r3, #28
   24de8:	18fb      	adds	r3, r7, r3
   24dea:	881b      	ldrh	r3, [r3, #0]
   24dec:	221c      	movs	r2, #28
   24dee:	18ba      	adds	r2, r7, r2
   24df0:	1c59      	adds	r1, r3, #1
   24df2:	8011      	strh	r1, [r2, #0]
   24df4:	001a      	movs	r2, r3
   24df6:	687b      	ldr	r3, [r7, #4]
   24df8:	189b      	adds	r3, r3, r2
   24dfa:	2214      	movs	r2, #20
   24dfc:	18ba      	adds	r2, r7, r2
   24dfe:	8812      	ldrh	r2, [r2, #0]
   24e00:	b2d2      	uxtb	r2, r2
   24e02:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   24e04:	68fb      	ldr	r3, [r7, #12]
   24e06:	799b      	ldrb	r3, [r3, #6]
   24e08:	2b01      	cmp	r3, #1
   24e0a:	d110      	bne.n	24e2e <spi_transceive_buffer_wait+0x172>
			rx_data[rx_pos++] = (received_data >> 8);
   24e0c:	231c      	movs	r3, #28
   24e0e:	18fb      	adds	r3, r7, r3
   24e10:	881b      	ldrh	r3, [r3, #0]
   24e12:	221c      	movs	r2, #28
   24e14:	18ba      	adds	r2, r7, r2
   24e16:	1c59      	adds	r1, r3, #1
   24e18:	8011      	strh	r1, [r2, #0]
   24e1a:	001a      	movs	r2, r3
   24e1c:	687b      	ldr	r3, [r7, #4]
   24e1e:	189b      	adds	r3, r3, r2
   24e20:	2214      	movs	r2, #20
   24e22:	18ba      	adds	r2, r7, r2
   24e24:	8812      	ldrh	r2, [r2, #0]
   24e26:	0a12      	lsrs	r2, r2, #8
   24e28:	b292      	uxth	r2, r2
   24e2a:	b2d2      	uxtb	r2, r2
   24e2c:	701a      	strb	r2, [r3, #0]
	while (length--) {
   24e2e:	1cbb      	adds	r3, r7, #2
   24e30:	881b      	ldrh	r3, [r3, #0]
   24e32:	1cba      	adds	r2, r7, #2
   24e34:	1e59      	subs	r1, r3, #1
   24e36:	8011      	strh	r1, [r2, #0]
   24e38:	2b00      	cmp	r3, #0
   24e3a:	d000      	beq.n	24e3e <spi_transceive_buffer_wait+0x182>
   24e3c:	e76c      	b.n	24d18 <spi_transceive_buffer_wait+0x5c>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   24e3e:	68fb      	ldr	r3, [r7, #12]
   24e40:	795b      	ldrb	r3, [r3, #5]
   24e42:	2b01      	cmp	r3, #1
   24e44:	d10b      	bne.n	24e5e <spi_transceive_buffer_wait+0x1a2>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   24e46:	46c0      	nop			; (mov r8, r8)
   24e48:	68fb      	ldr	r3, [r7, #12]
   24e4a:	0018      	movs	r0, r3
   24e4c:	4b0a      	ldr	r3, [pc, #40]	; (24e78 <spi_transceive_buffer_wait+0x1bc>)
   24e4e:	4798      	blx	r3
   24e50:	0003      	movs	r3, r0
   24e52:	001a      	movs	r2, r3
   24e54:	2301      	movs	r3, #1
   24e56:	4053      	eors	r3, r2
   24e58:	b2db      	uxtb	r3, r3
   24e5a:	2b00      	cmp	r3, #0
   24e5c:	d1f4      	bne.n	24e48 <spi_transceive_buffer_wait+0x18c>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
   24e5e:	2300      	movs	r3, #0
}
   24e60:	0018      	movs	r0, r3
   24e62:	46bd      	mov	sp, r7
   24e64:	b009      	add	sp, #36	; 0x24
   24e66:	bd90      	pop	{r4, r7, pc}
   24e68:	00024385 	.word	0x00024385
   24e6c:	000243d5 	.word	0x000243d5
   24e70:	000243ad 	.word	0x000243ad
   24e74:	0002441d 	.word	0x0002441d
   24e78:	0002435d 	.word	0x0002435d

00024e7c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   24e7c:	b580      	push	{r7, lr}
   24e7e:	b084      	sub	sp, #16
   24e80:	af00      	add	r7, sp, #0
   24e82:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   24e84:	687b      	ldr	r3, [r7, #4]
   24e86:	681b      	ldr	r3, [r3, #0]
   24e88:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   24e8a:	687b      	ldr	r3, [r7, #4]
   24e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24e8e:	781b      	ldrb	r3, [r3, #0]
   24e90:	b2da      	uxtb	r2, r3
   24e92:	230e      	movs	r3, #14
   24e94:	18fb      	adds	r3, r7, r3
   24e96:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   24e98:	687b      	ldr	r3, [r7, #4]
   24e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24e9c:	1c5a      	adds	r2, r3, #1
   24e9e:	687b      	ldr	r3, [r7, #4]
   24ea0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   24ea2:	687b      	ldr	r3, [r7, #4]
   24ea4:	799b      	ldrb	r3, [r3, #6]
   24ea6:	2b01      	cmp	r3, #1
   24ea8:	d113      	bne.n	24ed2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   24eaa:	687b      	ldr	r3, [r7, #4]
   24eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24eae:	781b      	ldrb	r3, [r3, #0]
   24eb0:	b2db      	uxtb	r3, r3
   24eb2:	021b      	lsls	r3, r3, #8
   24eb4:	b21a      	sxth	r2, r3
   24eb6:	230e      	movs	r3, #14
   24eb8:	18fb      	adds	r3, r7, r3
   24eba:	2100      	movs	r1, #0
   24ebc:	5e5b      	ldrsh	r3, [r3, r1]
   24ebe:	4313      	orrs	r3, r2
   24ec0:	b21a      	sxth	r2, r3
   24ec2:	230e      	movs	r3, #14
   24ec4:	18fb      	adds	r3, r7, r3
   24ec6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   24ec8:	687b      	ldr	r3, [r7, #4]
   24eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24ecc:	1c5a      	adds	r2, r3, #1
   24ece:	687b      	ldr	r3, [r7, #4]
   24ed0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   24ed2:	230e      	movs	r3, #14
   24ed4:	18fb      	adds	r3, r7, r3
   24ed6:	881b      	ldrh	r3, [r3, #0]
   24ed8:	05db      	lsls	r3, r3, #23
   24eda:	0dda      	lsrs	r2, r3, #23
   24edc:	68bb      	ldr	r3, [r7, #8]
   24ede:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   24ee0:	687b      	ldr	r3, [r7, #4]
   24ee2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   24ee4:	b29b      	uxth	r3, r3
   24ee6:	3b01      	subs	r3, #1
   24ee8:	b29a      	uxth	r2, r3
   24eea:	687b      	ldr	r3, [r7, #4]
   24eec:	869a      	strh	r2, [r3, #52]	; 0x34
}
   24eee:	46c0      	nop			; (mov r8, r8)
   24ef0:	46bd      	mov	sp, r7
   24ef2:	b004      	add	sp, #16
   24ef4:	bd80      	pop	{r7, pc}
	...

00024ef8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   24ef8:	b580      	push	{r7, lr}
   24efa:	b084      	sub	sp, #16
   24efc:	af00      	add	r7, sp, #0
   24efe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   24f00:	687b      	ldr	r3, [r7, #4]
   24f02:	681b      	ldr	r3, [r3, #0]
   24f04:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   24f06:	4b08      	ldr	r3, [pc, #32]	; (24f28 <_spi_write_dummy+0x30>)
   24f08:	881b      	ldrh	r3, [r3, #0]
   24f0a:	001a      	movs	r2, r3
   24f0c:	68fb      	ldr	r3, [r7, #12]
   24f0e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   24f10:	687b      	ldr	r3, [r7, #4]
   24f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   24f14:	b29b      	uxth	r3, r3
   24f16:	3b01      	subs	r3, #1
   24f18:	b29a      	uxth	r2, r3
   24f1a:	687b      	ldr	r3, [r7, #4]
   24f1c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   24f1e:	46c0      	nop			; (mov r8, r8)
   24f20:	46bd      	mov	sp, r7
   24f22:	b004      	add	sp, #16
   24f24:	bd80      	pop	{r7, pc}
   24f26:	46c0      	nop			; (mov r8, r8)
   24f28:	20005650 	.word	0x20005650

00024f2c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   24f2c:	b580      	push	{r7, lr}
   24f2e:	b084      	sub	sp, #16
   24f30:	af00      	add	r7, sp, #0
   24f32:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   24f34:	687b      	ldr	r3, [r7, #4]
   24f36:	681b      	ldr	r3, [r3, #0]
   24f38:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   24f3a:	230a      	movs	r3, #10
   24f3c:	18fb      	adds	r3, r7, r3
   24f3e:	2200      	movs	r2, #0
   24f40:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   24f42:	68fb      	ldr	r3, [r7, #12]
   24f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   24f46:	230a      	movs	r3, #10
   24f48:	18fb      	adds	r3, r7, r3
   24f4a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   24f4c:	687b      	ldr	r3, [r7, #4]
   24f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   24f50:	b29b      	uxth	r3, r3
   24f52:	3b01      	subs	r3, #1
   24f54:	b29a      	uxth	r2, r3
   24f56:	687b      	ldr	r3, [r7, #4]
   24f58:	865a      	strh	r2, [r3, #50]	; 0x32
}
   24f5a:	46c0      	nop			; (mov r8, r8)
   24f5c:	46bd      	mov	sp, r7
   24f5e:	b004      	add	sp, #16
   24f60:	bd80      	pop	{r7, pc}

00024f62 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   24f62:	b580      	push	{r7, lr}
   24f64:	b084      	sub	sp, #16
   24f66:	af00      	add	r7, sp, #0
   24f68:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   24f6a:	687b      	ldr	r3, [r7, #4]
   24f6c:	681b      	ldr	r3, [r3, #0]
   24f6e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   24f70:	68fb      	ldr	r3, [r7, #12]
   24f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24f74:	b29a      	uxth	r2, r3
   24f76:	230a      	movs	r3, #10
   24f78:	18fb      	adds	r3, r7, r3
   24f7a:	05d2      	lsls	r2, r2, #23
   24f7c:	0dd2      	lsrs	r2, r2, #23
   24f7e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   24f80:	687b      	ldr	r3, [r7, #4]
   24f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24f84:	220a      	movs	r2, #10
   24f86:	18ba      	adds	r2, r7, r2
   24f88:	8812      	ldrh	r2, [r2, #0]
   24f8a:	b2d2      	uxtb	r2, r2
   24f8c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   24f8e:	687b      	ldr	r3, [r7, #4]
   24f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24f92:	1c5a      	adds	r2, r3, #1
   24f94:	687b      	ldr	r3, [r7, #4]
   24f96:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   24f98:	687b      	ldr	r3, [r7, #4]
   24f9a:	799b      	ldrb	r3, [r3, #6]
   24f9c:	2b01      	cmp	r3, #1
   24f9e:	d10d      	bne.n	24fbc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   24fa0:	687b      	ldr	r3, [r7, #4]
   24fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24fa4:	220a      	movs	r2, #10
   24fa6:	18ba      	adds	r2, r7, r2
   24fa8:	8812      	ldrh	r2, [r2, #0]
   24faa:	0a12      	lsrs	r2, r2, #8
   24fac:	b292      	uxth	r2, r2
   24fae:	b2d2      	uxtb	r2, r2
   24fb0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   24fb2:	687b      	ldr	r3, [r7, #4]
   24fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24fb6:	1c5a      	adds	r2, r3, #1
   24fb8:	687b      	ldr	r3, [r7, #4]
   24fba:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   24fbc:	687b      	ldr	r3, [r7, #4]
   24fbe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   24fc0:	b29b      	uxth	r3, r3
   24fc2:	3b01      	subs	r3, #1
   24fc4:	b29a      	uxth	r2, r3
   24fc6:	687b      	ldr	r3, [r7, #4]
   24fc8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   24fca:	46c0      	nop			; (mov r8, r8)
   24fcc:	46bd      	mov	sp, r7
   24fce:	b004      	add	sp, #16
   24fd0:	bd80      	pop	{r7, pc}
	...

00024fd4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   24fd4:	b580      	push	{r7, lr}
   24fd6:	b086      	sub	sp, #24
   24fd8:	af00      	add	r7, sp, #0
   24fda:	0002      	movs	r2, r0
   24fdc:	1dfb      	adds	r3, r7, #7
   24fde:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   24fe0:	1dfb      	adds	r3, r7, #7
   24fe2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   24fe4:	4b96      	ldr	r3, [pc, #600]	; (25240 <_spi_interrupt_handler+0x26c>)
   24fe6:	0092      	lsls	r2, r2, #2
   24fe8:	58d3      	ldr	r3, [r2, r3]
   24fea:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   24fec:	697b      	ldr	r3, [r7, #20]
   24fee:	681b      	ldr	r3, [r3, #0]
   24ff0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   24ff2:	697b      	ldr	r3, [r7, #20]
   24ff4:	2237      	movs	r2, #55	; 0x37
   24ff6:	5c9a      	ldrb	r2, [r3, r2]
   24ff8:	697b      	ldr	r3, [r7, #20]
   24ffa:	2136      	movs	r1, #54	; 0x36
   24ffc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   24ffe:	230f      	movs	r3, #15
   25000:	18fb      	adds	r3, r7, r3
   25002:	400a      	ands	r2, r1
   25004:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   25006:	693b      	ldr	r3, [r7, #16]
   25008:	7e1b      	ldrb	r3, [r3, #24]
   2500a:	b2da      	uxtb	r2, r3
   2500c:	230c      	movs	r3, #12
   2500e:	18fb      	adds	r3, r7, r3
   25010:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   25012:	693b      	ldr	r3, [r7, #16]
   25014:	7d9b      	ldrb	r3, [r3, #22]
   25016:	b2db      	uxtb	r3, r3
   25018:	b29a      	uxth	r2, r3
   2501a:	230c      	movs	r3, #12
   2501c:	18fb      	adds	r3, r7, r3
   2501e:	210c      	movs	r1, #12
   25020:	1879      	adds	r1, r7, r1
   25022:	8809      	ldrh	r1, [r1, #0]
   25024:	400a      	ands	r2, r1
   25026:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   25028:	230c      	movs	r3, #12
   2502a:	18fb      	adds	r3, r7, r3
   2502c:	881b      	ldrh	r3, [r3, #0]
   2502e:	2201      	movs	r2, #1
   25030:	4013      	ands	r3, r2
   25032:	d038      	beq.n	250a6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   25034:	697b      	ldr	r3, [r7, #20]
   25036:	795b      	ldrb	r3, [r3, #5]
   25038:	2b01      	cmp	r3, #1
   2503a:	d110      	bne.n	2505e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2503c:	697b      	ldr	r3, [r7, #20]
   2503e:	7a5b      	ldrb	r3, [r3, #9]
   25040:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   25042:	2b00      	cmp	r3, #0
   25044:	d10b      	bne.n	2505e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   25046:	697b      	ldr	r3, [r7, #20]
   25048:	0018      	movs	r0, r3
   2504a:	4b7e      	ldr	r3, [pc, #504]	; (25244 <_spi_interrupt_handler+0x270>)
   2504c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2504e:	697b      	ldr	r3, [r7, #20]
   25050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   25052:	b29b      	uxth	r3, r3
   25054:	2b00      	cmp	r3, #0
   25056:	d102      	bne.n	2505e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   25058:	693b      	ldr	r3, [r7, #16]
   2505a:	2201      	movs	r2, #1
   2505c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2505e:	697b      	ldr	r3, [r7, #20]
   25060:	795b      	ldrb	r3, [r3, #5]
		if (0
   25062:	2b01      	cmp	r3, #1
   25064:	d11f      	bne.n	250a6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   25066:	697b      	ldr	r3, [r7, #20]
   25068:	7a5b      	ldrb	r3, [r3, #9]
   2506a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2506c:	2b00      	cmp	r3, #0
   2506e:	d01a      	beq.n	250a6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   25070:	697b      	ldr	r3, [r7, #20]
   25072:	0018      	movs	r0, r3
   25074:	4b74      	ldr	r3, [pc, #464]	; (25248 <_spi_interrupt_handler+0x274>)
   25076:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   25078:	697b      	ldr	r3, [r7, #20]
   2507a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2507c:	b29b      	uxth	r3, r3
   2507e:	2b00      	cmp	r3, #0
   25080:	d111      	bne.n	250a6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   25082:	693b      	ldr	r3, [r7, #16]
   25084:	2201      	movs	r2, #1
   25086:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   25088:	697b      	ldr	r3, [r7, #20]
   2508a:	7a5b      	ldrb	r3, [r3, #9]
   2508c:	b2db      	uxtb	r3, r3
   2508e:	2b01      	cmp	r3, #1
   25090:	d109      	bne.n	250a6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   25092:	697b      	ldr	r3, [r7, #20]
   25094:	79db      	ldrb	r3, [r3, #7]
   25096:	2201      	movs	r2, #1
   25098:	4053      	eors	r3, r2
   2509a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2509c:	2b00      	cmp	r3, #0
   2509e:	d002      	beq.n	250a6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   250a0:	693b      	ldr	r3, [r7, #16]
   250a2:	2202      	movs	r2, #2
   250a4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   250a6:	230c      	movs	r3, #12
   250a8:	18fb      	adds	r3, r7, r3
   250aa:	881b      	ldrh	r3, [r3, #0]
   250ac:	2204      	movs	r2, #4
   250ae:	4013      	ands	r3, r2
   250b0:	d100      	bne.n	250b4 <_spi_interrupt_handler+0xe0>
   250b2:	e07e      	b.n	251b2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   250b4:	693b      	ldr	r3, [r7, #16]
   250b6:	8b5b      	ldrh	r3, [r3, #26]
   250b8:	b29b      	uxth	r3, r3
   250ba:	001a      	movs	r2, r3
   250bc:	2304      	movs	r3, #4
   250be:	4013      	ands	r3, r2
   250c0:	d022      	beq.n	25108 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   250c2:	697b      	ldr	r3, [r7, #20]
   250c4:	7a5b      	ldrb	r3, [r3, #9]
   250c6:	b2db      	uxtb	r3, r3
   250c8:	2b01      	cmp	r3, #1
   250ca:	d014      	beq.n	250f6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   250cc:	697b      	ldr	r3, [r7, #20]
   250ce:	2238      	movs	r2, #56	; 0x38
   250d0:	211e      	movs	r1, #30
   250d2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   250d4:	697b      	ldr	r3, [r7, #20]
   250d6:	2203      	movs	r2, #3
   250d8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   250da:	693b      	ldr	r3, [r7, #16]
   250dc:	2205      	movs	r2, #5
   250de:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   250e0:	230f      	movs	r3, #15
   250e2:	18fb      	adds	r3, r7, r3
   250e4:	781b      	ldrb	r3, [r3, #0]
   250e6:	2208      	movs	r2, #8
   250e8:	4013      	ands	r3, r2
   250ea:	d004      	beq.n	250f6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   250ec:	697b      	ldr	r3, [r7, #20]
   250ee:	699b      	ldr	r3, [r3, #24]
   250f0:	697a      	ldr	r2, [r7, #20]
   250f2:	0010      	movs	r0, r2
   250f4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   250f6:	693b      	ldr	r3, [r7, #16]
   250f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   250fa:	230a      	movs	r3, #10
   250fc:	18fb      	adds	r3, r7, r3
   250fe:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   25100:	693b      	ldr	r3, [r7, #16]
   25102:	2204      	movs	r2, #4
   25104:	835a      	strh	r2, [r3, #26]
   25106:	e054      	b.n	251b2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   25108:	697b      	ldr	r3, [r7, #20]
   2510a:	7a5b      	ldrb	r3, [r3, #9]
   2510c:	b2db      	uxtb	r3, r3
   2510e:	2b01      	cmp	r3, #1
   25110:	d11e      	bne.n	25150 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   25112:	697b      	ldr	r3, [r7, #20]
   25114:	0018      	movs	r0, r3
   25116:	4b4d      	ldr	r3, [pc, #308]	; (2524c <_spi_interrupt_handler+0x278>)
   25118:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2511a:	697b      	ldr	r3, [r7, #20]
   2511c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2511e:	b29b      	uxth	r3, r3
   25120:	2b00      	cmp	r3, #0
   25122:	d146      	bne.n	251b2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   25124:	693b      	ldr	r3, [r7, #16]
   25126:	2204      	movs	r2, #4
   25128:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2512a:	697b      	ldr	r3, [r7, #20]
   2512c:	2238      	movs	r2, #56	; 0x38
   2512e:	2100      	movs	r1, #0
   25130:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   25132:	697b      	ldr	r3, [r7, #20]
   25134:	2203      	movs	r2, #3
   25136:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   25138:	230f      	movs	r3, #15
   2513a:	18fb      	adds	r3, r7, r3
   2513c:	781b      	ldrb	r3, [r3, #0]
   2513e:	2201      	movs	r2, #1
   25140:	4013      	ands	r3, r2
   25142:	d036      	beq.n	251b2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   25144:	697b      	ldr	r3, [r7, #20]
   25146:	68db      	ldr	r3, [r3, #12]
   25148:	697a      	ldr	r2, [r7, #20]
   2514a:	0010      	movs	r0, r2
   2514c:	4798      	blx	r3
   2514e:	e030      	b.n	251b2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   25150:	697b      	ldr	r3, [r7, #20]
   25152:	0018      	movs	r0, r3
   25154:	4b3e      	ldr	r3, [pc, #248]	; (25250 <_spi_interrupt_handler+0x27c>)
   25156:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   25158:	697b      	ldr	r3, [r7, #20]
   2515a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2515c:	b29b      	uxth	r3, r3
   2515e:	2b00      	cmp	r3, #0
   25160:	d127      	bne.n	251b2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   25162:	697b      	ldr	r3, [r7, #20]
   25164:	2238      	movs	r2, #56	; 0x38
   25166:	2100      	movs	r1, #0
   25168:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2516a:	693b      	ldr	r3, [r7, #16]
   2516c:	2204      	movs	r2, #4
   2516e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   25170:	697b      	ldr	r3, [r7, #20]
   25172:	7a5b      	ldrb	r3, [r3, #9]
   25174:	b2db      	uxtb	r3, r3
   25176:	2b02      	cmp	r3, #2
   25178:	d10b      	bne.n	25192 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2517a:	230f      	movs	r3, #15
   2517c:	18fb      	adds	r3, r7, r3
   2517e:	781b      	ldrb	r3, [r3, #0]
   25180:	2204      	movs	r2, #4
   25182:	4013      	ands	r3, r2
   25184:	d015      	beq.n	251b2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   25186:	697b      	ldr	r3, [r7, #20]
   25188:	695b      	ldr	r3, [r3, #20]
   2518a:	697a      	ldr	r2, [r7, #20]
   2518c:	0010      	movs	r0, r2
   2518e:	4798      	blx	r3
   25190:	e00f      	b.n	251b2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   25192:	697b      	ldr	r3, [r7, #20]
   25194:	7a5b      	ldrb	r3, [r3, #9]
   25196:	b2db      	uxtb	r3, r3
   25198:	2b00      	cmp	r3, #0
   2519a:	d10a      	bne.n	251b2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2519c:	230f      	movs	r3, #15
   2519e:	18fb      	adds	r3, r7, r3
   251a0:	781b      	ldrb	r3, [r3, #0]
   251a2:	2202      	movs	r2, #2
   251a4:	4013      	ands	r3, r2
   251a6:	d004      	beq.n	251b2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   251a8:	697b      	ldr	r3, [r7, #20]
   251aa:	691b      	ldr	r3, [r3, #16]
   251ac:	697a      	ldr	r2, [r7, #20]
   251ae:	0010      	movs	r0, r2
   251b0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   251b2:	230c      	movs	r3, #12
   251b4:	18fb      	adds	r3, r7, r3
   251b6:	881b      	ldrh	r3, [r3, #0]
   251b8:	2202      	movs	r2, #2
   251ba:	4013      	ands	r3, r2
   251bc:	d024      	beq.n	25208 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   251be:	697b      	ldr	r3, [r7, #20]
   251c0:	795b      	ldrb	r3, [r3, #5]
   251c2:	2b01      	cmp	r3, #1
   251c4:	d120      	bne.n	25208 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   251c6:	697b      	ldr	r3, [r7, #20]
   251c8:	7a5b      	ldrb	r3, [r3, #9]
   251ca:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   251cc:	2b01      	cmp	r3, #1
   251ce:	d11b      	bne.n	25208 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   251d0:	697b      	ldr	r3, [r7, #20]
   251d2:	79db      	ldrb	r3, [r3, #7]
   251d4:	2201      	movs	r2, #1
   251d6:	4053      	eors	r3, r2
   251d8:	b2db      	uxtb	r3, r3
   251da:	2b00      	cmp	r3, #0
   251dc:	d014      	beq.n	25208 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   251de:	693b      	ldr	r3, [r7, #16]
   251e0:	2202      	movs	r2, #2
   251e2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   251e4:	697b      	ldr	r3, [r7, #20]
   251e6:	2203      	movs	r2, #3
   251e8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   251ea:	697b      	ldr	r3, [r7, #20]
   251ec:	2238      	movs	r2, #56	; 0x38
   251ee:	2100      	movs	r1, #0
   251f0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   251f2:	230f      	movs	r3, #15
   251f4:	18fb      	adds	r3, r7, r3
   251f6:	781b      	ldrb	r3, [r3, #0]
   251f8:	2201      	movs	r2, #1
   251fa:	4013      	ands	r3, r2
   251fc:	d004      	beq.n	25208 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   251fe:	697b      	ldr	r3, [r7, #20]
   25200:	68db      	ldr	r3, [r3, #12]
   25202:	697a      	ldr	r2, [r7, #20]
   25204:	0010      	movs	r0, r2
   25206:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   25208:	230c      	movs	r3, #12
   2520a:	18fb      	adds	r3, r7, r3
   2520c:	881b      	ldrh	r3, [r3, #0]
   2520e:	2280      	movs	r2, #128	; 0x80
   25210:	4013      	ands	r3, r2
   25212:	d010      	beq.n	25236 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   25214:	693b      	ldr	r3, [r7, #16]
   25216:	2280      	movs	r2, #128	; 0x80
   25218:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2521a:	693b      	ldr	r3, [r7, #16]
   2521c:	2280      	movs	r2, #128	; 0x80
   2521e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   25220:	230f      	movs	r3, #15
   25222:	18fb      	adds	r3, r7, r3
   25224:	781b      	ldrb	r3, [r3, #0]
   25226:	2240      	movs	r2, #64	; 0x40
   25228:	4013      	ands	r3, r2
   2522a:	d004      	beq.n	25236 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2522c:	697b      	ldr	r3, [r7, #20]
   2522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25230:	697a      	ldr	r2, [r7, #20]
   25232:	0010      	movs	r0, r2
   25234:	4798      	blx	r3
		}
	}
#  endif
}
   25236:	46c0      	nop			; (mov r8, r8)
   25238:	46bd      	mov	sp, r7
   2523a:	b006      	add	sp, #24
   2523c:	bd80      	pop	{r7, pc}
   2523e:	46c0      	nop			; (mov r8, r8)
   25240:	20005638 	.word	0x20005638
   25244:	00024ef9 	.word	0x00024ef9
   25248:	00024e7d 	.word	0x00024e7d
   2524c:	00024f2d 	.word	0x00024f2d
   25250:	00024f63 	.word	0x00024f63

00025254 <system_gclk_chan_get_config_defaults>:
{
   25254:	b580      	push	{r7, lr}
   25256:	b082      	sub	sp, #8
   25258:	af00      	add	r7, sp, #0
   2525a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2525c:	687b      	ldr	r3, [r7, #4]
   2525e:	2200      	movs	r2, #0
   25260:	701a      	strb	r2, [r3, #0]
}
   25262:	46c0      	nop			; (mov r8, r8)
   25264:	46bd      	mov	sp, r7
   25266:	b002      	add	sp, #8
   25268:	bd80      	pop	{r7, pc}
	...

0002526c <system_apb_clock_set_mask>:
{
   2526c:	b580      	push	{r7, lr}
   2526e:	b082      	sub	sp, #8
   25270:	af00      	add	r7, sp, #0
   25272:	0002      	movs	r2, r0
   25274:	6039      	str	r1, [r7, #0]
   25276:	1dfb      	adds	r3, r7, #7
   25278:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2527a:	1dfb      	adds	r3, r7, #7
   2527c:	781b      	ldrb	r3, [r3, #0]
   2527e:	2b01      	cmp	r3, #1
   25280:	d00a      	beq.n	25298 <system_apb_clock_set_mask+0x2c>
   25282:	2b02      	cmp	r3, #2
   25284:	d00f      	beq.n	252a6 <system_apb_clock_set_mask+0x3a>
   25286:	2b00      	cmp	r3, #0
   25288:	d114      	bne.n	252b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2528a:	4b0e      	ldr	r3, [pc, #56]	; (252c4 <system_apb_clock_set_mask+0x58>)
   2528c:	4a0d      	ldr	r2, [pc, #52]	; (252c4 <system_apb_clock_set_mask+0x58>)
   2528e:	6991      	ldr	r1, [r2, #24]
   25290:	683a      	ldr	r2, [r7, #0]
   25292:	430a      	orrs	r2, r1
   25294:	619a      	str	r2, [r3, #24]
			break;
   25296:	e00f      	b.n	252b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25298:	4b0a      	ldr	r3, [pc, #40]	; (252c4 <system_apb_clock_set_mask+0x58>)
   2529a:	4a0a      	ldr	r2, [pc, #40]	; (252c4 <system_apb_clock_set_mask+0x58>)
   2529c:	69d1      	ldr	r1, [r2, #28]
   2529e:	683a      	ldr	r2, [r7, #0]
   252a0:	430a      	orrs	r2, r1
   252a2:	61da      	str	r2, [r3, #28]
			break;
   252a4:	e008      	b.n	252b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   252a6:	4b07      	ldr	r3, [pc, #28]	; (252c4 <system_apb_clock_set_mask+0x58>)
   252a8:	4a06      	ldr	r2, [pc, #24]	; (252c4 <system_apb_clock_set_mask+0x58>)
   252aa:	6a11      	ldr	r1, [r2, #32]
   252ac:	683a      	ldr	r2, [r7, #0]
   252ae:	430a      	orrs	r2, r1
   252b0:	621a      	str	r2, [r3, #32]
			break;
   252b2:	e001      	b.n	252b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   252b4:	2317      	movs	r3, #23
   252b6:	e000      	b.n	252ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   252b8:	2300      	movs	r3, #0
}
   252ba:	0018      	movs	r0, r3
   252bc:	46bd      	mov	sp, r7
   252be:	b002      	add	sp, #8
   252c0:	bd80      	pop	{r7, pc}
   252c2:	46c0      	nop			; (mov r8, r8)
   252c4:	40000400 	.word	0x40000400

000252c8 <system_pinmux_get_config_defaults>:
{
   252c8:	b580      	push	{r7, lr}
   252ca:	b082      	sub	sp, #8
   252cc:	af00      	add	r7, sp, #0
   252ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   252d0:	687b      	ldr	r3, [r7, #4]
   252d2:	2280      	movs	r2, #128	; 0x80
   252d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   252d6:	687b      	ldr	r3, [r7, #4]
   252d8:	2200      	movs	r2, #0
   252da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   252dc:	687b      	ldr	r3, [r7, #4]
   252de:	2201      	movs	r2, #1
   252e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   252e2:	687b      	ldr	r3, [r7, #4]
   252e4:	2200      	movs	r2, #0
   252e6:	70da      	strb	r2, [r3, #3]
}
   252e8:	46c0      	nop			; (mov r8, r8)
   252ea:	46bd      	mov	sp, r7
   252ec:	b002      	add	sp, #8
   252ee:	bd80      	pop	{r7, pc}

000252f0 <system_is_debugger_present>:
{
   252f0:	b580      	push	{r7, lr}
   252f2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   252f4:	4b05      	ldr	r3, [pc, #20]	; (2530c <system_is_debugger_present+0x1c>)
   252f6:	789b      	ldrb	r3, [r3, #2]
   252f8:	b2db      	uxtb	r3, r3
   252fa:	001a      	movs	r2, r3
   252fc:	2302      	movs	r3, #2
   252fe:	4013      	ands	r3, r2
   25300:	1e5a      	subs	r2, r3, #1
   25302:	4193      	sbcs	r3, r2
   25304:	b2db      	uxtb	r3, r3
}
   25306:	0018      	movs	r0, r3
   25308:	46bd      	mov	sp, r7
   2530a:	bd80      	pop	{r7, pc}
   2530c:	41002000 	.word	0x41002000

00025310 <usart_is_syncing>:
{
   25310:	b580      	push	{r7, lr}
   25312:	b084      	sub	sp, #16
   25314:	af00      	add	r7, sp, #0
   25316:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   25318:	687b      	ldr	r3, [r7, #4]
   2531a:	681b      	ldr	r3, [r3, #0]
   2531c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2531e:	68fb      	ldr	r3, [r7, #12]
   25320:	69db      	ldr	r3, [r3, #28]
   25322:	1e5a      	subs	r2, r3, #1
   25324:	4193      	sbcs	r3, r2
   25326:	b2db      	uxtb	r3, r3
}
   25328:	0018      	movs	r0, r3
   2532a:	46bd      	mov	sp, r7
   2532c:	b004      	add	sp, #16
   2532e:	bd80      	pop	{r7, pc}

00025330 <_usart_wait_for_sync>:
{
   25330:	b580      	push	{r7, lr}
   25332:	b082      	sub	sp, #8
   25334:	af00      	add	r7, sp, #0
   25336:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   25338:	46c0      	nop			; (mov r8, r8)
   2533a:	687b      	ldr	r3, [r7, #4]
   2533c:	0018      	movs	r0, r3
   2533e:	4b04      	ldr	r3, [pc, #16]	; (25350 <_usart_wait_for_sync+0x20>)
   25340:	4798      	blx	r3
   25342:	1e03      	subs	r3, r0, #0
   25344:	d1f9      	bne.n	2533a <_usart_wait_for_sync+0xa>
}
   25346:	46c0      	nop			; (mov r8, r8)
   25348:	46bd      	mov	sp, r7
   2534a:	b002      	add	sp, #8
   2534c:	bd80      	pop	{r7, pc}
   2534e:	46c0      	nop			; (mov r8, r8)
   25350:	00025311 	.word	0x00025311

00025354 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   25354:	b5b0      	push	{r4, r5, r7, lr}
   25356:	b08c      	sub	sp, #48	; 0x30
   25358:	af02      	add	r7, sp, #8
   2535a:	6078      	str	r0, [r7, #4]
   2535c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2535e:	687b      	ldr	r3, [r7, #4]
   25360:	681b      	ldr	r3, [r3, #0]
   25362:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   25364:	687b      	ldr	r3, [r7, #4]
   25366:	681b      	ldr	r3, [r3, #0]
   25368:	0018      	movs	r0, r3
   2536a:	4bab      	ldr	r3, [pc, #684]	; (25618 <_usart_set_config+0x2c4>)
   2536c:	4798      	blx	r3
   2536e:	0003      	movs	r3, r0
   25370:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   25372:	697b      	ldr	r3, [r7, #20]
   25374:	3314      	adds	r3, #20
   25376:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   25378:	2300      	movs	r3, #0
   2537a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2537c:	2300      	movs	r3, #0
   2537e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   25380:	230a      	movs	r3, #10
   25382:	18fb      	adds	r3, r7, r3
   25384:	2200      	movs	r2, #0
   25386:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   25388:	231f      	movs	r3, #31
   2538a:	18fb      	adds	r3, r7, r3
   2538c:	2200      	movs	r2, #0
   2538e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   25390:	231e      	movs	r3, #30
   25392:	18fb      	adds	r3, r7, r3
   25394:	2210      	movs	r2, #16
   25396:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   25398:	683b      	ldr	r3, [r7, #0]
   2539a:	8a1b      	ldrh	r3, [r3, #16]
   2539c:	2280      	movs	r2, #128	; 0x80
   2539e:	01d2      	lsls	r2, r2, #7
   253a0:	4293      	cmp	r3, r2
   253a2:	d01c      	beq.n	253de <_usart_set_config+0x8a>
   253a4:	2280      	movs	r2, #128	; 0x80
   253a6:	01d2      	lsls	r2, r2, #7
   253a8:	4293      	cmp	r3, r2
   253aa:	dc06      	bgt.n	253ba <_usart_set_config+0x66>
   253ac:	2b00      	cmp	r3, #0
   253ae:	d00d      	beq.n	253cc <_usart_set_config+0x78>
   253b0:	2280      	movs	r2, #128	; 0x80
   253b2:	0192      	lsls	r2, r2, #6
   253b4:	4293      	cmp	r3, r2
   253b6:	d024      	beq.n	25402 <_usart_set_config+0xae>
   253b8:	e035      	b.n	25426 <_usart_set_config+0xd2>
   253ba:	22c0      	movs	r2, #192	; 0xc0
   253bc:	01d2      	lsls	r2, r2, #7
   253be:	4293      	cmp	r3, r2
   253c0:	d028      	beq.n	25414 <_usart_set_config+0xc0>
   253c2:	2280      	movs	r2, #128	; 0x80
   253c4:	0212      	lsls	r2, r2, #8
   253c6:	4293      	cmp	r3, r2
   253c8:	d012      	beq.n	253f0 <_usart_set_config+0x9c>
   253ca:	e02c      	b.n	25426 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   253cc:	231f      	movs	r3, #31
   253ce:	18fb      	adds	r3, r7, r3
   253d0:	2200      	movs	r2, #0
   253d2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   253d4:	231e      	movs	r3, #30
   253d6:	18fb      	adds	r3, r7, r3
   253d8:	2210      	movs	r2, #16
   253da:	701a      	strb	r2, [r3, #0]
			break;
   253dc:	e023      	b.n	25426 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   253de:	231f      	movs	r3, #31
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	2200      	movs	r2, #0
   253e4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   253e6:	231e      	movs	r3, #30
   253e8:	18fb      	adds	r3, r7, r3
   253ea:	2208      	movs	r2, #8
   253ec:	701a      	strb	r2, [r3, #0]
			break;
   253ee:	e01a      	b.n	25426 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   253f0:	231f      	movs	r3, #31
   253f2:	18fb      	adds	r3, r7, r3
   253f4:	2200      	movs	r2, #0
   253f6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   253f8:	231e      	movs	r3, #30
   253fa:	18fb      	adds	r3, r7, r3
   253fc:	2203      	movs	r2, #3
   253fe:	701a      	strb	r2, [r3, #0]
			break;
   25400:	e011      	b.n	25426 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   25402:	231f      	movs	r3, #31
   25404:	18fb      	adds	r3, r7, r3
   25406:	2201      	movs	r2, #1
   25408:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2540a:	231e      	movs	r3, #30
   2540c:	18fb      	adds	r3, r7, r3
   2540e:	2210      	movs	r2, #16
   25410:	701a      	strb	r2, [r3, #0]
			break;
   25412:	e008      	b.n	25426 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   25414:	231f      	movs	r3, #31
   25416:	18fb      	adds	r3, r7, r3
   25418:	2201      	movs	r2, #1
   2541a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2541c:	231e      	movs	r3, #30
   2541e:	18fb      	adds	r3, r7, r3
   25420:	2208      	movs	r2, #8
   25422:	701a      	strb	r2, [r3, #0]
			break;
   25424:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   25426:	683b      	ldr	r3, [r7, #0]
   25428:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2542a:	683b      	ldr	r3, [r7, #0]
   2542c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2542e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   25430:	683b      	ldr	r3, [r7, #0]
   25432:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   25434:	4313      	orrs	r3, r2
		config->sample_rate |
   25436:	683a      	ldr	r2, [r7, #0]
   25438:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2543a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2543c:	683a      	ldr	r2, [r7, #0]
   2543e:	7e12      	ldrb	r2, [r2, #24]
   25440:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   25442:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   25444:	683a      	ldr	r2, [r7, #0]
   25446:	2126      	movs	r1, #38	; 0x26
   25448:	5c52      	ldrb	r2, [r2, r1]
   2544a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2544c:	4313      	orrs	r3, r2
   2544e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   25450:	231d      	movs	r3, #29
   25452:	18fb      	adds	r3, r7, r3
   25454:	2200      	movs	r2, #0
   25456:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   25458:	683b      	ldr	r3, [r7, #0]
   2545a:	685b      	ldr	r3, [r3, #4]
   2545c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2545e:	68fb      	ldr	r3, [r7, #12]
   25460:	2b00      	cmp	r3, #0
   25462:	d01e      	beq.n	254a2 <_usart_set_config+0x14e>
   25464:	2280      	movs	r2, #128	; 0x80
   25466:	0552      	lsls	r2, r2, #21
   25468:	4293      	cmp	r3, r2
   2546a:	d14f      	bne.n	2550c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2546c:	683b      	ldr	r3, [r7, #0]
   2546e:	2227      	movs	r2, #39	; 0x27
   25470:	5c9b      	ldrb	r3, [r3, r2]
   25472:	2201      	movs	r2, #1
   25474:	4053      	eors	r3, r2
   25476:	b2db      	uxtb	r3, r3
   25478:	2b00      	cmp	r3, #0
   2547a:	d046      	beq.n	2550a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2547c:	683b      	ldr	r3, [r7, #0]
   2547e:	6a1d      	ldr	r5, [r3, #32]
   25480:	693b      	ldr	r3, [r7, #16]
   25482:	b2db      	uxtb	r3, r3
   25484:	0018      	movs	r0, r3
   25486:	4b65      	ldr	r3, [pc, #404]	; (2561c <_usart_set_config+0x2c8>)
   25488:	4798      	blx	r3
   2548a:	0001      	movs	r1, r0
   2548c:	231d      	movs	r3, #29
   2548e:	18fc      	adds	r4, r7, r3
   25490:	230a      	movs	r3, #10
   25492:	18fb      	adds	r3, r7, r3
   25494:	001a      	movs	r2, r3
   25496:	0028      	movs	r0, r5
   25498:	4b61      	ldr	r3, [pc, #388]	; (25620 <_usart_set_config+0x2cc>)
   2549a:	4798      	blx	r3
   2549c:	0003      	movs	r3, r0
   2549e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   254a0:	e033      	b.n	2550a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   254a2:	683b      	ldr	r3, [r7, #0]
   254a4:	2227      	movs	r2, #39	; 0x27
   254a6:	5c9b      	ldrb	r3, [r3, r2]
   254a8:	2b00      	cmp	r3, #0
   254aa:	d014      	beq.n	254d6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   254ac:	683b      	ldr	r3, [r7, #0]
   254ae:	6a18      	ldr	r0, [r3, #32]
   254b0:	683b      	ldr	r3, [r7, #0]
   254b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   254b4:	231d      	movs	r3, #29
   254b6:	18fc      	adds	r4, r7, r3
   254b8:	231f      	movs	r3, #31
   254ba:	18fb      	adds	r3, r7, r3
   254bc:	781d      	ldrb	r5, [r3, #0]
   254be:	230a      	movs	r3, #10
   254c0:	18fa      	adds	r2, r7, r3
   254c2:	231e      	movs	r3, #30
   254c4:	18fb      	adds	r3, r7, r3
   254c6:	781b      	ldrb	r3, [r3, #0]
   254c8:	9300      	str	r3, [sp, #0]
   254ca:	002b      	movs	r3, r5
   254cc:	4d55      	ldr	r5, [pc, #340]	; (25624 <_usart_set_config+0x2d0>)
   254ce:	47a8      	blx	r5
   254d0:	0003      	movs	r3, r0
   254d2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   254d4:	e01a      	b.n	2550c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   254d6:	683b      	ldr	r3, [r7, #0]
   254d8:	6a1d      	ldr	r5, [r3, #32]
   254da:	693b      	ldr	r3, [r7, #16]
   254dc:	b2db      	uxtb	r3, r3
   254de:	0018      	movs	r0, r3
   254e0:	4b4e      	ldr	r3, [pc, #312]	; (2561c <_usart_set_config+0x2c8>)
   254e2:	4798      	blx	r3
				status_code =
   254e4:	231d      	movs	r3, #29
   254e6:	18fc      	adds	r4, r7, r3
   254e8:	231f      	movs	r3, #31
   254ea:	18fb      	adds	r3, r7, r3
   254ec:	7819      	ldrb	r1, [r3, #0]
   254ee:	230a      	movs	r3, #10
   254f0:	18fa      	adds	r2, r7, r3
   254f2:	231e      	movs	r3, #30
   254f4:	18fb      	adds	r3, r7, r3
   254f6:	781b      	ldrb	r3, [r3, #0]
   254f8:	9300      	str	r3, [sp, #0]
   254fa:	000b      	movs	r3, r1
   254fc:	0001      	movs	r1, r0
   254fe:	0028      	movs	r0, r5
   25500:	4d48      	ldr	r5, [pc, #288]	; (25624 <_usart_set_config+0x2d0>)
   25502:	47a8      	blx	r5
   25504:	0003      	movs	r3, r0
   25506:	7023      	strb	r3, [r4, #0]
			break;
   25508:	e000      	b.n	2550c <_usart_set_config+0x1b8>
			break;
   2550a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2550c:	231d      	movs	r3, #29
   2550e:	18fb      	adds	r3, r7, r3
   25510:	781b      	ldrb	r3, [r3, #0]
   25512:	2b00      	cmp	r3, #0
   25514:	d003      	beq.n	2551e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   25516:	231d      	movs	r3, #29
   25518:	18fb      	adds	r3, r7, r3
   2551a:	781b      	ldrb	r3, [r3, #0]
   2551c:	e077      	b.n	2560e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2551e:	683b      	ldr	r3, [r7, #0]
   25520:	7e5b      	ldrb	r3, [r3, #25]
   25522:	2b00      	cmp	r3, #0
   25524:	d003      	beq.n	2552e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   25526:	683b      	ldr	r3, [r7, #0]
   25528:	7e9a      	ldrb	r2, [r3, #26]
   2552a:	69bb      	ldr	r3, [r7, #24]
   2552c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2552e:	687b      	ldr	r3, [r7, #4]
   25530:	0018      	movs	r0, r3
   25532:	4b3d      	ldr	r3, [pc, #244]	; (25628 <_usart_set_config+0x2d4>)
   25534:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   25536:	230a      	movs	r3, #10
   25538:	18fb      	adds	r3, r7, r3
   2553a:	881a      	ldrh	r2, [r3, #0]
   2553c:	69bb      	ldr	r3, [r7, #24]
   2553e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   25540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25542:	68fb      	ldr	r3, [r7, #12]
   25544:	4313      	orrs	r3, r2
   25546:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   25548:	683b      	ldr	r3, [r7, #0]
   2554a:	2227      	movs	r2, #39	; 0x27
   2554c:	5c9b      	ldrb	r3, [r3, r2]
   2554e:	2201      	movs	r2, #1
   25550:	4053      	eors	r3, r2
   25552:	b2db      	uxtb	r3, r3
   25554:	2b00      	cmp	r3, #0
   25556:	d003      	beq.n	25560 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   25558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2555a:	2204      	movs	r2, #4
   2555c:	4313      	orrs	r3, r2
   2555e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   25560:	683b      	ldr	r3, [r7, #0]
   25562:	7e5b      	ldrb	r3, [r3, #25]
   25564:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   25566:	683b      	ldr	r3, [r7, #0]
   25568:	7f1b      	ldrb	r3, [r3, #28]
   2556a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2556c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2556e:	683b      	ldr	r3, [r7, #0]
   25570:	7f5b      	ldrb	r3, [r3, #29]
   25572:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   25574:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   25576:	683b      	ldr	r3, [r7, #0]
   25578:	2124      	movs	r1, #36	; 0x24
   2557a:	5c5b      	ldrb	r3, [r3, r1]
   2557c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2557e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   25580:	683b      	ldr	r3, [r7, #0]
   25582:	2125      	movs	r1, #37	; 0x25
   25584:	5c5b      	ldrb	r3, [r3, r1]
   25586:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   25588:	4313      	orrs	r3, r2
	ctrlb =  
   2558a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2558c:	683b      	ldr	r3, [r7, #0]
   2558e:	7a9b      	ldrb	r3, [r3, #10]
   25590:	001a      	movs	r2, r3
   25592:	6a3b      	ldr	r3, [r7, #32]
   25594:	4313      	orrs	r3, r2
   25596:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   25598:	683b      	ldr	r3, [r7, #0]
   2559a:	7adb      	ldrb	r3, [r3, #11]
   2559c:	001a      	movs	r2, r3
   2559e:	6a3b      	ldr	r3, [r7, #32]
   255a0:	4313      	orrs	r3, r2
   255a2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   255a4:	683b      	ldr	r3, [r7, #0]
   255a6:	891b      	ldrh	r3, [r3, #8]
   255a8:	2bff      	cmp	r3, #255	; 0xff
   255aa:	d00b      	beq.n	255c4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   255ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   255ae:	2280      	movs	r2, #128	; 0x80
   255b0:	0452      	lsls	r2, r2, #17
   255b2:	4313      	orrs	r3, r2
   255b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   255b6:	683b      	ldr	r3, [r7, #0]
   255b8:	891b      	ldrh	r3, [r3, #8]
   255ba:	001a      	movs	r2, r3
   255bc:	6a3b      	ldr	r3, [r7, #32]
   255be:	4313      	orrs	r3, r2
   255c0:	623b      	str	r3, [r7, #32]
   255c2:	e008      	b.n	255d6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   255c4:	683b      	ldr	r3, [r7, #0]
   255c6:	7edb      	ldrb	r3, [r3, #27]
   255c8:	2b00      	cmp	r3, #0
   255ca:	d004      	beq.n	255d6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   255cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   255ce:	2280      	movs	r2, #128	; 0x80
   255d0:	04d2      	lsls	r2, r2, #19
   255d2:	4313      	orrs	r3, r2
   255d4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   255d6:	683b      	ldr	r3, [r7, #0]
   255d8:	222c      	movs	r2, #44	; 0x2c
   255da:	5c9b      	ldrb	r3, [r3, r2]
   255dc:	2b00      	cmp	r3, #0
   255de:	d103      	bne.n	255e8 <_usart_set_config+0x294>
   255e0:	4b12      	ldr	r3, [pc, #72]	; (2562c <_usart_set_config+0x2d8>)
   255e2:	4798      	blx	r3
   255e4:	1e03      	subs	r3, r0, #0
   255e6:	d003      	beq.n	255f0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   255e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   255ea:	2280      	movs	r2, #128	; 0x80
   255ec:	4313      	orrs	r3, r2
   255ee:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   255f0:	687b      	ldr	r3, [r7, #4]
   255f2:	0018      	movs	r0, r3
   255f4:	4b0c      	ldr	r3, [pc, #48]	; (25628 <_usart_set_config+0x2d4>)
   255f6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   255f8:	69bb      	ldr	r3, [r7, #24]
   255fa:	6a3a      	ldr	r2, [r7, #32]
   255fc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   255fe:	687b      	ldr	r3, [r7, #4]
   25600:	0018      	movs	r0, r3
   25602:	4b09      	ldr	r3, [pc, #36]	; (25628 <_usart_set_config+0x2d4>)
   25604:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   25606:	69bb      	ldr	r3, [r7, #24]
   25608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2560a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2560c:	2300      	movs	r3, #0
}
   2560e:	0018      	movs	r0, r3
   25610:	46bd      	mov	sp, r7
   25612:	b00a      	add	sp, #40	; 0x28
   25614:	bdb0      	pop	{r4, r5, r7, pc}
   25616:	46c0      	nop			; (mov r8, r8)
   25618:	00023efd 	.word	0x00023efd
   2561c:	00026ab1 	.word	0x00026ab1
   25620:	00023a77 	.word	0x00023a77
   25624:	00023af5 	.word	0x00023af5
   25628:	00025331 	.word	0x00025331
   2562c:	000252f1 	.word	0x000252f1

00025630 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   25630:	b590      	push	{r4, r7, lr}
   25632:	b093      	sub	sp, #76	; 0x4c
   25634:	af00      	add	r7, sp, #0
   25636:	60f8      	str	r0, [r7, #12]
   25638:	60b9      	str	r1, [r7, #8]
   2563a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2563c:	233b      	movs	r3, #59	; 0x3b
   2563e:	18fb      	adds	r3, r7, r3
   25640:	2200      	movs	r2, #0
   25642:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   25644:	68fb      	ldr	r3, [r7, #12]
   25646:	68ba      	ldr	r2, [r7, #8]
   25648:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2564a:	68fb      	ldr	r3, [r7, #12]
   2564c:	681b      	ldr	r3, [r3, #0]
   2564e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   25650:	68fb      	ldr	r3, [r7, #12]
   25652:	681b      	ldr	r3, [r3, #0]
   25654:	0018      	movs	r0, r3
   25656:	4b86      	ldr	r3, [pc, #536]	; (25870 <usart_init+0x240>)
   25658:	4798      	blx	r3
   2565a:	0003      	movs	r3, r0
   2565c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   25660:	3302      	adds	r3, #2
   25662:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   25664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   25666:	3314      	adds	r3, #20
   25668:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2566c:	681b      	ldr	r3, [r3, #0]
   2566e:	2201      	movs	r2, #1
   25670:	4013      	ands	r3, r2
   25672:	d001      	beq.n	25678 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   25674:	2305      	movs	r3, #5
   25676:	e0f6      	b.n	25866 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   25678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2567a:	681b      	ldr	r3, [r3, #0]
   2567c:	2202      	movs	r2, #2
   2567e:	4013      	ands	r3, r2
   25680:	d001      	beq.n	25686 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   25682:	231c      	movs	r3, #28
   25684:	e0ef      	b.n	25866 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   25686:	2201      	movs	r2, #1
   25688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2568a:	409a      	lsls	r2, r3
   2568c:	0013      	movs	r3, r2
   2568e:	0019      	movs	r1, r3
   25690:	2002      	movs	r0, #2
   25692:	4b78      	ldr	r3, [pc, #480]	; (25874 <usart_init+0x244>)
   25694:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25696:	2324      	movs	r3, #36	; 0x24
   25698:	18fb      	adds	r3, r7, r3
   2569a:	0018      	movs	r0, r3
   2569c:	4b76      	ldr	r3, [pc, #472]	; (25878 <usart_init+0x248>)
   2569e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   256a0:	687b      	ldr	r3, [r7, #4]
   256a2:	222d      	movs	r2, #45	; 0x2d
   256a4:	5c9a      	ldrb	r2, [r3, r2]
   256a6:	2324      	movs	r3, #36	; 0x24
   256a8:	18fb      	adds	r3, r7, r3
   256aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   256ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   256ae:	b2db      	uxtb	r3, r3
   256b0:	2224      	movs	r2, #36	; 0x24
   256b2:	18ba      	adds	r2, r7, r2
   256b4:	0011      	movs	r1, r2
   256b6:	0018      	movs	r0, r3
   256b8:	4b70      	ldr	r3, [pc, #448]	; (2587c <usart_init+0x24c>)
   256ba:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   256bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   256be:	b2db      	uxtb	r3, r3
   256c0:	0018      	movs	r0, r3
   256c2:	4b6f      	ldr	r3, [pc, #444]	; (25880 <usart_init+0x250>)
   256c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   256c6:	687b      	ldr	r3, [r7, #4]
   256c8:	222d      	movs	r2, #45	; 0x2d
   256ca:	5c9b      	ldrb	r3, [r3, r2]
   256cc:	2100      	movs	r1, #0
   256ce:	0018      	movs	r0, r3
   256d0:	4b6c      	ldr	r3, [pc, #432]	; (25884 <usart_init+0x254>)
   256d2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   256d4:	687b      	ldr	r3, [r7, #4]
   256d6:	7ada      	ldrb	r2, [r3, #11]
   256d8:	68fb      	ldr	r3, [r7, #12]
   256da:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   256dc:	687b      	ldr	r3, [r7, #4]
   256de:	2224      	movs	r2, #36	; 0x24
   256e0:	5c9a      	ldrb	r2, [r3, r2]
   256e2:	68fb      	ldr	r3, [r7, #12]
   256e4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   256e6:	687b      	ldr	r3, [r7, #4]
   256e8:	2225      	movs	r2, #37	; 0x25
   256ea:	5c9a      	ldrb	r2, [r3, r2]
   256ec:	68fb      	ldr	r3, [r7, #12]
   256ee:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   256f0:	687b      	ldr	r3, [r7, #4]
   256f2:	7eda      	ldrb	r2, [r3, #27]
   256f4:	68fb      	ldr	r3, [r7, #12]
   256f6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   256f8:	687b      	ldr	r3, [r7, #4]
   256fa:	7f1a      	ldrb	r2, [r3, #28]
   256fc:	68fb      	ldr	r3, [r7, #12]
   256fe:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   25700:	233b      	movs	r3, #59	; 0x3b
   25702:	18fc      	adds	r4, r7, r3
   25704:	687a      	ldr	r2, [r7, #4]
   25706:	68fb      	ldr	r3, [r7, #12]
   25708:	0011      	movs	r1, r2
   2570a:	0018      	movs	r0, r3
   2570c:	4b5e      	ldr	r3, [pc, #376]	; (25888 <usart_init+0x258>)
   2570e:	4798      	blx	r3
   25710:	0003      	movs	r3, r0
   25712:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   25714:	233b      	movs	r3, #59	; 0x3b
   25716:	18fb      	adds	r3, r7, r3
   25718:	781b      	ldrb	r3, [r3, #0]
   2571a:	2b00      	cmp	r3, #0
   2571c:	d003      	beq.n	25726 <usart_init+0xf6>
		return status_code;
   2571e:	233b      	movs	r3, #59	; 0x3b
   25720:	18fb      	adds	r3, r7, r3
   25722:	781b      	ldrb	r3, [r3, #0]
   25724:	e09f      	b.n	25866 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   25726:	2320      	movs	r3, #32
   25728:	18fb      	adds	r3, r7, r3
   2572a:	0018      	movs	r0, r3
   2572c:	4b57      	ldr	r3, [pc, #348]	; (2588c <usart_init+0x25c>)
   2572e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25730:	2320      	movs	r3, #32
   25732:	18fb      	adds	r3, r7, r3
   25734:	2200      	movs	r2, #0
   25736:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   25738:	2320      	movs	r3, #32
   2573a:	18fb      	adds	r3, r7, r3
   2573c:	2200      	movs	r2, #0
   2573e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   25740:	687b      	ldr	r3, [r7, #4]
   25742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   25744:	2310      	movs	r3, #16
   25746:	18fb      	adds	r3, r7, r3
   25748:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2574a:	687b      	ldr	r3, [r7, #4]
   2574c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2574e:	2310      	movs	r3, #16
   25750:	18fb      	adds	r3, r7, r3
   25752:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   25754:	687b      	ldr	r3, [r7, #4]
   25756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   25758:	2310      	movs	r3, #16
   2575a:	18fb      	adds	r3, r7, r3
   2575c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2575e:	687b      	ldr	r3, [r7, #4]
   25760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   25762:	2310      	movs	r3, #16
   25764:	18fb      	adds	r3, r7, r3
   25766:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   25768:	2347      	movs	r3, #71	; 0x47
   2576a:	18fb      	adds	r3, r7, r3
   2576c:	2200      	movs	r2, #0
   2576e:	701a      	strb	r2, [r3, #0]
   25770:	e02c      	b.n	257cc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   25772:	2347      	movs	r3, #71	; 0x47
   25774:	18fb      	adds	r3, r7, r3
   25776:	781a      	ldrb	r2, [r3, #0]
   25778:	2310      	movs	r3, #16
   2577a:	18fb      	adds	r3, r7, r3
   2577c:	0092      	lsls	r2, r2, #2
   2577e:	58d3      	ldr	r3, [r2, r3]
   25780:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   25782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25784:	2b00      	cmp	r3, #0
   25786:	d109      	bne.n	2579c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   25788:	2347      	movs	r3, #71	; 0x47
   2578a:	18fb      	adds	r3, r7, r3
   2578c:	781a      	ldrb	r2, [r3, #0]
   2578e:	68bb      	ldr	r3, [r7, #8]
   25790:	0011      	movs	r1, r2
   25792:	0018      	movs	r0, r3
   25794:	4b3e      	ldr	r3, [pc, #248]	; (25890 <usart_init+0x260>)
   25796:	4798      	blx	r3
   25798:	0003      	movs	r3, r0
   2579a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2579c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2579e:	3301      	adds	r3, #1
   257a0:	d00d      	beq.n	257be <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   257a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   257a4:	b2da      	uxtb	r2, r3
   257a6:	2320      	movs	r3, #32
   257a8:	18fb      	adds	r3, r7, r3
   257aa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   257ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   257ae:	0c1b      	lsrs	r3, r3, #16
   257b0:	b2db      	uxtb	r3, r3
   257b2:	2220      	movs	r2, #32
   257b4:	18ba      	adds	r2, r7, r2
   257b6:	0011      	movs	r1, r2
   257b8:	0018      	movs	r0, r3
   257ba:	4b36      	ldr	r3, [pc, #216]	; (25894 <usart_init+0x264>)
   257bc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   257be:	2347      	movs	r3, #71	; 0x47
   257c0:	18fb      	adds	r3, r7, r3
   257c2:	781a      	ldrb	r2, [r3, #0]
   257c4:	2347      	movs	r3, #71	; 0x47
   257c6:	18fb      	adds	r3, r7, r3
   257c8:	3201      	adds	r2, #1
   257ca:	701a      	strb	r2, [r3, #0]
   257cc:	2347      	movs	r3, #71	; 0x47
   257ce:	18fb      	adds	r3, r7, r3
   257d0:	781b      	ldrb	r3, [r3, #0]
   257d2:	2b03      	cmp	r3, #3
   257d4:	d9cd      	bls.n	25772 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   257d6:	2300      	movs	r3, #0
   257d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   257da:	e00a      	b.n	257f2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   257dc:	68fa      	ldr	r2, [r7, #12]
   257de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   257e0:	3302      	adds	r3, #2
   257e2:	009b      	lsls	r3, r3, #2
   257e4:	18d3      	adds	r3, r2, r3
   257e6:	3304      	adds	r3, #4
   257e8:	2200      	movs	r2, #0
   257ea:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   257ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   257ee:	3301      	adds	r3, #1
   257f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   257f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   257f4:	2b05      	cmp	r3, #5
   257f6:	d9f1      	bls.n	257dc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   257f8:	68fb      	ldr	r3, [r7, #12]
   257fa:	2200      	movs	r2, #0
   257fc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   257fe:	68fb      	ldr	r3, [r7, #12]
   25800:	2200      	movs	r2, #0
   25802:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   25804:	68fb      	ldr	r3, [r7, #12]
   25806:	2200      	movs	r2, #0
   25808:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2580a:	68fb      	ldr	r3, [r7, #12]
   2580c:	2200      	movs	r2, #0
   2580e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   25810:	68fb      	ldr	r3, [r7, #12]
   25812:	2230      	movs	r2, #48	; 0x30
   25814:	2100      	movs	r1, #0
   25816:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   25818:	68fb      	ldr	r3, [r7, #12]
   2581a:	2231      	movs	r2, #49	; 0x31
   2581c:	2100      	movs	r1, #0
   2581e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   25820:	68fb      	ldr	r3, [r7, #12]
   25822:	2232      	movs	r2, #50	; 0x32
   25824:	2100      	movs	r1, #0
   25826:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   25828:	68fb      	ldr	r3, [r7, #12]
   2582a:	2233      	movs	r2, #51	; 0x33
   2582c:	2100      	movs	r1, #0
   2582e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   25830:	68fb      	ldr	r3, [r7, #12]
   25832:	681b      	ldr	r3, [r3, #0]
   25834:	2227      	movs	r2, #39	; 0x27
   25836:	18bc      	adds	r4, r7, r2
   25838:	0018      	movs	r0, r3
   2583a:	4b0d      	ldr	r3, [pc, #52]	; (25870 <usart_init+0x240>)
   2583c:	4798      	blx	r3
   2583e:	0003      	movs	r3, r0
   25840:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   25842:	4a15      	ldr	r2, [pc, #84]	; (25898 <usart_init+0x268>)
   25844:	2327      	movs	r3, #39	; 0x27
   25846:	18fb      	adds	r3, r7, r3
   25848:	781b      	ldrb	r3, [r3, #0]
   2584a:	0011      	movs	r1, r2
   2584c:	0018      	movs	r0, r3
   2584e:	4b13      	ldr	r3, [pc, #76]	; (2589c <usart_init+0x26c>)
   25850:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   25852:	2327      	movs	r3, #39	; 0x27
   25854:	18fb      	adds	r3, r7, r3
   25856:	781a      	ldrb	r2, [r3, #0]
   25858:	4b11      	ldr	r3, [pc, #68]	; (258a0 <usart_init+0x270>)
   2585a:	0092      	lsls	r2, r2, #2
   2585c:	68f9      	ldr	r1, [r7, #12]
   2585e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   25860:	233b      	movs	r3, #59	; 0x3b
   25862:	18fb      	adds	r3, r7, r3
   25864:	781b      	ldrb	r3, [r3, #0]
}
   25866:	0018      	movs	r0, r3
   25868:	46bd      	mov	sp, r7
   2586a:	b013      	add	sp, #76	; 0x4c
   2586c:	bd90      	pop	{r4, r7, pc}
   2586e:	46c0      	nop			; (mov r8, r8)
   25870:	00023efd 	.word	0x00023efd
   25874:	0002526d 	.word	0x0002526d
   25878:	00025255 	.word	0x00025255
   2587c:	0002698d 	.word	0x0002698d
   25880:	000269d1 	.word	0x000269d1
   25884:	00023cb5 	.word	0x00023cb5
   25888:	00025355 	.word	0x00025355
   2588c:	000252c9 	.word	0x000252c9
   25890:	00023d41 	.word	0x00023d41
   25894:	00026ced 	.word	0x00026ced
   25898:	00025b0d 	.word	0x00025b0d
   2589c:	00023f61 	.word	0x00023f61
   258a0:	20005638 	.word	0x20005638

000258a4 <system_interrupt_enter_critical_section>:
{
   258a4:	b580      	push	{r7, lr}
   258a6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   258a8:	4b02      	ldr	r3, [pc, #8]	; (258b4 <system_interrupt_enter_critical_section+0x10>)
   258aa:	4798      	blx	r3
}
   258ac:	46c0      	nop			; (mov r8, r8)
   258ae:	46bd      	mov	sp, r7
   258b0:	bd80      	pop	{r7, pc}
   258b2:	46c0      	nop			; (mov r8, r8)
   258b4:	00022af9 	.word	0x00022af9

000258b8 <system_interrupt_leave_critical_section>:
{
   258b8:	b580      	push	{r7, lr}
   258ba:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   258bc:	4b02      	ldr	r3, [pc, #8]	; (258c8 <system_interrupt_leave_critical_section+0x10>)
   258be:	4798      	blx	r3
}
   258c0:	46c0      	nop			; (mov r8, r8)
   258c2:	46bd      	mov	sp, r7
   258c4:	bd80      	pop	{r7, pc}
   258c6:	46c0      	nop			; (mov r8, r8)
   258c8:	00022b4d 	.word	0x00022b4d

000258cc <usart_is_syncing>:
{
   258cc:	b580      	push	{r7, lr}
   258ce:	b084      	sub	sp, #16
   258d0:	af00      	add	r7, sp, #0
   258d2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   258d4:	687b      	ldr	r3, [r7, #4]
   258d6:	681b      	ldr	r3, [r3, #0]
   258d8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   258da:	68fb      	ldr	r3, [r7, #12]
   258dc:	69db      	ldr	r3, [r3, #28]
   258de:	1e5a      	subs	r2, r3, #1
   258e0:	4193      	sbcs	r3, r2
   258e2:	b2db      	uxtb	r3, r3
}
   258e4:	0018      	movs	r0, r3
   258e6:	46bd      	mov	sp, r7
   258e8:	b004      	add	sp, #16
   258ea:	bd80      	pop	{r7, pc}

000258ec <_usart_wait_for_sync>:
{
   258ec:	b580      	push	{r7, lr}
   258ee:	b082      	sub	sp, #8
   258f0:	af00      	add	r7, sp, #0
   258f2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   258f4:	46c0      	nop			; (mov r8, r8)
   258f6:	687b      	ldr	r3, [r7, #4]
   258f8:	0018      	movs	r0, r3
   258fa:	4b04      	ldr	r3, [pc, #16]	; (2590c <_usart_wait_for_sync+0x20>)
   258fc:	4798      	blx	r3
   258fe:	1e03      	subs	r3, r0, #0
   25900:	d1f9      	bne.n	258f6 <_usart_wait_for_sync+0xa>
}
   25902:	46c0      	nop			; (mov r8, r8)
   25904:	46bd      	mov	sp, r7
   25906:	b002      	add	sp, #8
   25908:	bd80      	pop	{r7, pc}
   2590a:	46c0      	nop			; (mov r8, r8)
   2590c:	000258cd 	.word	0x000258cd

00025910 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   25910:	b580      	push	{r7, lr}
   25912:	b086      	sub	sp, #24
   25914:	af00      	add	r7, sp, #0
   25916:	60f8      	str	r0, [r7, #12]
   25918:	60b9      	str	r1, [r7, #8]
   2591a:	1dbb      	adds	r3, r7, #6
   2591c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2591e:	68fb      	ldr	r3, [r7, #12]
   25920:	681b      	ldr	r3, [r3, #0]
   25922:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   25924:	4b0f      	ldr	r3, [pc, #60]	; (25964 <_usart_write_buffer+0x54>)
   25926:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   25928:	68fb      	ldr	r3, [r7, #12]
   2592a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2592c:	b29b      	uxth	r3, r3
   2592e:	2b00      	cmp	r3, #0
   25930:	d003      	beq.n	2593a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   25932:	4b0d      	ldr	r3, [pc, #52]	; (25968 <_usart_write_buffer+0x58>)
   25934:	4798      	blx	r3
		return STATUS_BUSY;
   25936:	2305      	movs	r3, #5
   25938:	e010      	b.n	2595c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2593a:	68fb      	ldr	r3, [r7, #12]
   2593c:	1dba      	adds	r2, r7, #6
   2593e:	8812      	ldrh	r2, [r2, #0]
   25940:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   25942:	4b09      	ldr	r3, [pc, #36]	; (25968 <_usart_write_buffer+0x58>)
   25944:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   25946:	68fb      	ldr	r3, [r7, #12]
   25948:	68ba      	ldr	r2, [r7, #8]
   2594a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2594c:	68fb      	ldr	r3, [r7, #12]
   2594e:	2233      	movs	r2, #51	; 0x33
   25950:	2105      	movs	r1, #5
   25952:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   25954:	697b      	ldr	r3, [r7, #20]
   25956:	2201      	movs	r2, #1
   25958:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2595a:	2300      	movs	r3, #0
}
   2595c:	0018      	movs	r0, r3
   2595e:	46bd      	mov	sp, r7
   25960:	b006      	add	sp, #24
   25962:	bd80      	pop	{r7, pc}
   25964:	000258a5 	.word	0x000258a5
   25968:	000258b9 	.word	0x000258b9

0002596c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2596c:	b580      	push	{r7, lr}
   2596e:	b086      	sub	sp, #24
   25970:	af00      	add	r7, sp, #0
   25972:	60f8      	str	r0, [r7, #12]
   25974:	60b9      	str	r1, [r7, #8]
   25976:	1dbb      	adds	r3, r7, #6
   25978:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2597a:	68fb      	ldr	r3, [r7, #12]
   2597c:	681b      	ldr	r3, [r3, #0]
   2597e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   25980:	4b16      	ldr	r3, [pc, #88]	; (259dc <_usart_read_buffer+0x70>)
   25982:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   25984:	68fb      	ldr	r3, [r7, #12]
   25986:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   25988:	b29b      	uxth	r3, r3
   2598a:	2b00      	cmp	r3, #0
   2598c:	d003      	beq.n	25996 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2598e:	4b14      	ldr	r3, [pc, #80]	; (259e0 <_usart_read_buffer+0x74>)
   25990:	4798      	blx	r3
		return STATUS_BUSY;
   25992:	2305      	movs	r3, #5
   25994:	e01e      	b.n	259d4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   25996:	68fb      	ldr	r3, [r7, #12]
   25998:	1dba      	adds	r2, r7, #6
   2599a:	8812      	ldrh	r2, [r2, #0]
   2599c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2599e:	4b10      	ldr	r3, [pc, #64]	; (259e0 <_usart_read_buffer+0x74>)
   259a0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   259a2:	68fb      	ldr	r3, [r7, #12]
   259a4:	68ba      	ldr	r2, [r7, #8]
   259a6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   259a8:	68fb      	ldr	r3, [r7, #12]
   259aa:	2232      	movs	r2, #50	; 0x32
   259ac:	2105      	movs	r1, #5
   259ae:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   259b0:	697b      	ldr	r3, [r7, #20]
   259b2:	2204      	movs	r2, #4
   259b4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   259b6:	68fb      	ldr	r3, [r7, #12]
   259b8:	7a1b      	ldrb	r3, [r3, #8]
   259ba:	2b00      	cmp	r3, #0
   259bc:	d002      	beq.n	259c4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   259be:	697b      	ldr	r3, [r7, #20]
   259c0:	2220      	movs	r2, #32
   259c2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   259c4:	68fb      	ldr	r3, [r7, #12]
   259c6:	7a5b      	ldrb	r3, [r3, #9]
   259c8:	2b00      	cmp	r3, #0
   259ca:	d002      	beq.n	259d2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   259cc:	697b      	ldr	r3, [r7, #20]
   259ce:	2208      	movs	r2, #8
   259d0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   259d2:	2300      	movs	r3, #0
}
   259d4:	0018      	movs	r0, r3
   259d6:	46bd      	mov	sp, r7
   259d8:	b006      	add	sp, #24
   259da:	bd80      	pop	{r7, pc}
   259dc:	000258a5 	.word	0x000258a5
   259e0:	000258b9 	.word	0x000258b9

000259e4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   259e4:	b580      	push	{r7, lr}
   259e6:	b084      	sub	sp, #16
   259e8:	af00      	add	r7, sp, #0
   259ea:	60f8      	str	r0, [r7, #12]
   259ec:	60b9      	str	r1, [r7, #8]
   259ee:	1dfb      	adds	r3, r7, #7
   259f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   259f2:	1dfb      	adds	r3, r7, #7
   259f4:	781b      	ldrb	r3, [r3, #0]
   259f6:	68fa      	ldr	r2, [r7, #12]
   259f8:	3302      	adds	r3, #2
   259fa:	009b      	lsls	r3, r3, #2
   259fc:	18d3      	adds	r3, r2, r3
   259fe:	3304      	adds	r3, #4
   25a00:	68ba      	ldr	r2, [r7, #8]
   25a02:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   25a04:	68fb      	ldr	r3, [r7, #12]
   25a06:	2230      	movs	r2, #48	; 0x30
   25a08:	5c9b      	ldrb	r3, [r3, r2]
   25a0a:	b25a      	sxtb	r2, r3
   25a0c:	1dfb      	adds	r3, r7, #7
   25a0e:	781b      	ldrb	r3, [r3, #0]
   25a10:	2101      	movs	r1, #1
   25a12:	4099      	lsls	r1, r3
   25a14:	000b      	movs	r3, r1
   25a16:	b25b      	sxtb	r3, r3
   25a18:	4313      	orrs	r3, r2
   25a1a:	b25b      	sxtb	r3, r3
   25a1c:	b2d9      	uxtb	r1, r3
   25a1e:	68fb      	ldr	r3, [r7, #12]
   25a20:	2230      	movs	r2, #48	; 0x30
   25a22:	5499      	strb	r1, [r3, r2]
}
   25a24:	46c0      	nop			; (mov r8, r8)
   25a26:	46bd      	mov	sp, r7
   25a28:	b004      	add	sp, #16
   25a2a:	bd80      	pop	{r7, pc}

00025a2c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   25a2c:	b580      	push	{r7, lr}
   25a2e:	b084      	sub	sp, #16
   25a30:	af00      	add	r7, sp, #0
   25a32:	60f8      	str	r0, [r7, #12]
   25a34:	60b9      	str	r1, [r7, #8]
   25a36:	1dbb      	adds	r3, r7, #6
   25a38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   25a3a:	1dbb      	adds	r3, r7, #6
   25a3c:	881b      	ldrh	r3, [r3, #0]
   25a3e:	2b00      	cmp	r3, #0
   25a40:	d101      	bne.n	25a46 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   25a42:	2317      	movs	r3, #23
   25a44:	e010      	b.n	25a68 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   25a46:	68fb      	ldr	r3, [r7, #12]
   25a48:	79db      	ldrb	r3, [r3, #7]
   25a4a:	2201      	movs	r2, #1
   25a4c:	4053      	eors	r3, r2
   25a4e:	b2db      	uxtb	r3, r3
   25a50:	2b00      	cmp	r3, #0
   25a52:	d001      	beq.n	25a58 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   25a54:	231c      	movs	r3, #28
   25a56:	e007      	b.n	25a68 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   25a58:	1dbb      	adds	r3, r7, #6
   25a5a:	881a      	ldrh	r2, [r3, #0]
   25a5c:	68b9      	ldr	r1, [r7, #8]
   25a5e:	68fb      	ldr	r3, [r7, #12]
   25a60:	0018      	movs	r0, r3
   25a62:	4b03      	ldr	r3, [pc, #12]	; (25a70 <usart_write_buffer_job+0x44>)
   25a64:	4798      	blx	r3
   25a66:	0003      	movs	r3, r0
}
   25a68:	0018      	movs	r0, r3
   25a6a:	46bd      	mov	sp, r7
   25a6c:	b004      	add	sp, #16
   25a6e:	bd80      	pop	{r7, pc}
   25a70:	00025911 	.word	0x00025911

00025a74 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   25a74:	b580      	push	{r7, lr}
   25a76:	b084      	sub	sp, #16
   25a78:	af00      	add	r7, sp, #0
   25a7a:	60f8      	str	r0, [r7, #12]
   25a7c:	60b9      	str	r1, [r7, #8]
   25a7e:	1dbb      	adds	r3, r7, #6
   25a80:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   25a82:	1dbb      	adds	r3, r7, #6
   25a84:	881b      	ldrh	r3, [r3, #0]
   25a86:	2b00      	cmp	r3, #0
   25a88:	d101      	bne.n	25a8e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   25a8a:	2317      	movs	r3, #23
   25a8c:	e010      	b.n	25ab0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   25a8e:	68fb      	ldr	r3, [r7, #12]
   25a90:	799b      	ldrb	r3, [r3, #6]
   25a92:	2201      	movs	r2, #1
   25a94:	4053      	eors	r3, r2
   25a96:	b2db      	uxtb	r3, r3
   25a98:	2b00      	cmp	r3, #0
   25a9a:	d001      	beq.n	25aa0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   25a9c:	231c      	movs	r3, #28
   25a9e:	e007      	b.n	25ab0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   25aa0:	1dbb      	adds	r3, r7, #6
   25aa2:	881a      	ldrh	r2, [r3, #0]
   25aa4:	68b9      	ldr	r1, [r7, #8]
   25aa6:	68fb      	ldr	r3, [r7, #12]
   25aa8:	0018      	movs	r0, r3
   25aaa:	4b03      	ldr	r3, [pc, #12]	; (25ab8 <usart_read_buffer_job+0x44>)
   25aac:	4798      	blx	r3
   25aae:	0003      	movs	r3, r0
}
   25ab0:	0018      	movs	r0, r3
   25ab2:	46bd      	mov	sp, r7
   25ab4:	b004      	add	sp, #16
   25ab6:	bd80      	pop	{r7, pc}
   25ab8:	0002596d 	.word	0x0002596d

00025abc <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   25abc:	b580      	push	{r7, lr}
   25abe:	b084      	sub	sp, #16
   25ac0:	af00      	add	r7, sp, #0
   25ac2:	6078      	str	r0, [r7, #4]
   25ac4:	000a      	movs	r2, r1
   25ac6:	1cfb      	adds	r3, r7, #3
   25ac8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   25aca:	1cfb      	adds	r3, r7, #3
   25acc:	781b      	ldrb	r3, [r3, #0]
   25ace:	2b00      	cmp	r3, #0
   25ad0:	d002      	beq.n	25ad8 <usart_get_job_status+0x1c>
   25ad2:	2b01      	cmp	r3, #1
   25ad4:	d007      	beq.n	25ae6 <usart_get_job_status+0x2a>
   25ad6:	e00d      	b.n	25af4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   25ad8:	230f      	movs	r3, #15
   25ada:	18fb      	adds	r3, r7, r3
   25adc:	687a      	ldr	r2, [r7, #4]
   25ade:	2132      	movs	r1, #50	; 0x32
   25ae0:	5c52      	ldrb	r2, [r2, r1]
   25ae2:	701a      	strb	r2, [r3, #0]
			break;
   25ae4:	e00b      	b.n	25afe <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   25ae6:	230f      	movs	r3, #15
   25ae8:	18fb      	adds	r3, r7, r3
   25aea:	687a      	ldr	r2, [r7, #4]
   25aec:	2133      	movs	r1, #51	; 0x33
   25aee:	5c52      	ldrb	r2, [r2, r1]
   25af0:	701a      	strb	r2, [r3, #0]
			break;
   25af2:	e004      	b.n	25afe <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   25af4:	230f      	movs	r3, #15
   25af6:	18fb      	adds	r3, r7, r3
   25af8:	2217      	movs	r2, #23
   25afa:	701a      	strb	r2, [r3, #0]
			break;
   25afc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   25afe:	230f      	movs	r3, #15
   25b00:	18fb      	adds	r3, r7, r3
   25b02:	781b      	ldrb	r3, [r3, #0]
}
   25b04:	0018      	movs	r0, r3
   25b06:	46bd      	mov	sp, r7
   25b08:	b004      	add	sp, #16
   25b0a:	bd80      	pop	{r7, pc}

00025b0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   25b0c:	b580      	push	{r7, lr}
   25b0e:	b088      	sub	sp, #32
   25b10:	af00      	add	r7, sp, #0
   25b12:	0002      	movs	r2, r0
   25b14:	1dfb      	adds	r3, r7, #7
   25b16:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   25b18:	1dfb      	adds	r3, r7, #7
   25b1a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   25b1c:	4ba3      	ldr	r3, [pc, #652]	; (25dac <_usart_interrupt_handler+0x2a0>)
   25b1e:	0092      	lsls	r2, r2, #2
   25b20:	58d3      	ldr	r3, [r2, r3]
   25b22:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   25b24:	69bb      	ldr	r3, [r7, #24]
   25b26:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   25b28:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   25b2a:	69bb      	ldr	r3, [r7, #24]
   25b2c:	0018      	movs	r0, r3
   25b2e:	4ba0      	ldr	r3, [pc, #640]	; (25db0 <_usart_interrupt_handler+0x2a4>)
   25b30:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   25b32:	697b      	ldr	r3, [r7, #20]
   25b34:	7e1b      	ldrb	r3, [r3, #24]
   25b36:	b2da      	uxtb	r2, r3
   25b38:	2312      	movs	r3, #18
   25b3a:	18fb      	adds	r3, r7, r3
   25b3c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   25b3e:	697b      	ldr	r3, [r7, #20]
   25b40:	7d9b      	ldrb	r3, [r3, #22]
   25b42:	b2db      	uxtb	r3, r3
   25b44:	b29a      	uxth	r2, r3
   25b46:	2312      	movs	r3, #18
   25b48:	18fb      	adds	r3, r7, r3
   25b4a:	2112      	movs	r1, #18
   25b4c:	1879      	adds	r1, r7, r1
   25b4e:	8809      	ldrh	r1, [r1, #0]
   25b50:	400a      	ands	r2, r1
   25b52:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   25b54:	69bb      	ldr	r3, [r7, #24]
   25b56:	2230      	movs	r2, #48	; 0x30
   25b58:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   25b5a:	69ba      	ldr	r2, [r7, #24]
   25b5c:	2131      	movs	r1, #49	; 0x31
   25b5e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   25b60:	4013      	ands	r3, r2
   25b62:	b2da      	uxtb	r2, r3
   25b64:	2310      	movs	r3, #16
   25b66:	18fb      	adds	r3, r7, r3
   25b68:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   25b6a:	2312      	movs	r3, #18
   25b6c:	18fb      	adds	r3, r7, r3
   25b6e:	881b      	ldrh	r3, [r3, #0]
   25b70:	2201      	movs	r2, #1
   25b72:	4013      	ands	r3, r2
   25b74:	d044      	beq.n	25c00 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   25b76:	69bb      	ldr	r3, [r7, #24]
   25b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   25b7a:	b29b      	uxth	r3, r3
   25b7c:	2b00      	cmp	r3, #0
   25b7e:	d03c      	beq.n	25bfa <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   25b80:	69bb      	ldr	r3, [r7, #24]
   25b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25b84:	781b      	ldrb	r3, [r3, #0]
   25b86:	b2da      	uxtb	r2, r3
   25b88:	231c      	movs	r3, #28
   25b8a:	18fb      	adds	r3, r7, r3
   25b8c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   25b8e:	69bb      	ldr	r3, [r7, #24]
   25b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25b92:	1c5a      	adds	r2, r3, #1
   25b94:	69bb      	ldr	r3, [r7, #24]
   25b96:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   25b98:	69bb      	ldr	r3, [r7, #24]
   25b9a:	795b      	ldrb	r3, [r3, #5]
   25b9c:	2b01      	cmp	r3, #1
   25b9e:	d113      	bne.n	25bc8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   25ba0:	69bb      	ldr	r3, [r7, #24]
   25ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25ba4:	781b      	ldrb	r3, [r3, #0]
   25ba6:	b2db      	uxtb	r3, r3
   25ba8:	021b      	lsls	r3, r3, #8
   25baa:	b21a      	sxth	r2, r3
   25bac:	231c      	movs	r3, #28
   25bae:	18fb      	adds	r3, r7, r3
   25bb0:	2100      	movs	r1, #0
   25bb2:	5e5b      	ldrsh	r3, [r3, r1]
   25bb4:	4313      	orrs	r3, r2
   25bb6:	b21a      	sxth	r2, r3
   25bb8:	231c      	movs	r3, #28
   25bba:	18fb      	adds	r3, r7, r3
   25bbc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   25bbe:	69bb      	ldr	r3, [r7, #24]
   25bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25bc2:	1c5a      	adds	r2, r3, #1
   25bc4:	69bb      	ldr	r3, [r7, #24]
   25bc6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   25bc8:	231c      	movs	r3, #28
   25bca:	18fb      	adds	r3, r7, r3
   25bcc:	881b      	ldrh	r3, [r3, #0]
   25bce:	05db      	lsls	r3, r3, #23
   25bd0:	0ddb      	lsrs	r3, r3, #23
   25bd2:	b29a      	uxth	r2, r3
   25bd4:	697b      	ldr	r3, [r7, #20]
   25bd6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   25bd8:	69bb      	ldr	r3, [r7, #24]
   25bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   25bdc:	b29b      	uxth	r3, r3
   25bde:	3b01      	subs	r3, #1
   25be0:	b29b      	uxth	r3, r3
   25be2:	69ba      	ldr	r2, [r7, #24]
   25be4:	1c19      	adds	r1, r3, #0
   25be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   25be8:	2b00      	cmp	r3, #0
   25bea:	d109      	bne.n	25c00 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   25bec:	697b      	ldr	r3, [r7, #20]
   25bee:	2201      	movs	r2, #1
   25bf0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   25bf2:	697b      	ldr	r3, [r7, #20]
   25bf4:	2202      	movs	r2, #2
   25bf6:	759a      	strb	r2, [r3, #22]
   25bf8:	e002      	b.n	25c00 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   25bfa:	697b      	ldr	r3, [r7, #20]
   25bfc:	2201      	movs	r2, #1
   25bfe:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   25c00:	2312      	movs	r3, #18
   25c02:	18fb      	adds	r3, r7, r3
   25c04:	881b      	ldrh	r3, [r3, #0]
   25c06:	2202      	movs	r2, #2
   25c08:	4013      	ands	r3, r2
   25c0a:	d011      	beq.n	25c30 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   25c0c:	697b      	ldr	r3, [r7, #20]
   25c0e:	2202      	movs	r2, #2
   25c10:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   25c12:	69bb      	ldr	r3, [r7, #24]
   25c14:	2233      	movs	r2, #51	; 0x33
   25c16:	2100      	movs	r1, #0
   25c18:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   25c1a:	2310      	movs	r3, #16
   25c1c:	18fb      	adds	r3, r7, r3
   25c1e:	881b      	ldrh	r3, [r3, #0]
   25c20:	2201      	movs	r2, #1
   25c22:	4013      	ands	r3, r2
   25c24:	d004      	beq.n	25c30 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   25c26:	69bb      	ldr	r3, [r7, #24]
   25c28:	68db      	ldr	r3, [r3, #12]
   25c2a:	69ba      	ldr	r2, [r7, #24]
   25c2c:	0010      	movs	r0, r2
   25c2e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   25c30:	2312      	movs	r3, #18
   25c32:	18fb      	adds	r3, r7, r3
   25c34:	881b      	ldrh	r3, [r3, #0]
   25c36:	2204      	movs	r2, #4
   25c38:	4013      	ands	r3, r2
   25c3a:	d100      	bne.n	25c3e <_usart_interrupt_handler+0x132>
   25c3c:	e0bd      	b.n	25dba <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   25c3e:	69bb      	ldr	r3, [r7, #24]
   25c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   25c42:	b29b      	uxth	r3, r3
   25c44:	2b00      	cmp	r3, #0
   25c46:	d100      	bne.n	25c4a <_usart_interrupt_handler+0x13e>
   25c48:	e0b4      	b.n	25db4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   25c4a:	697b      	ldr	r3, [r7, #20]
   25c4c:	8b5b      	ldrh	r3, [r3, #26]
   25c4e:	b29b      	uxth	r3, r3
   25c50:	b2da      	uxtb	r2, r3
   25c52:	231f      	movs	r3, #31
   25c54:	18fb      	adds	r3, r7, r3
   25c56:	213f      	movs	r1, #63	; 0x3f
   25c58:	400a      	ands	r2, r1
   25c5a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   25c5c:	231f      	movs	r3, #31
   25c5e:	18fb      	adds	r3, r7, r3
   25c60:	781b      	ldrb	r3, [r3, #0]
   25c62:	2208      	movs	r2, #8
   25c64:	4013      	ands	r3, r2
   25c66:	d007      	beq.n	25c78 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   25c68:	231f      	movs	r3, #31
   25c6a:	18fb      	adds	r3, r7, r3
   25c6c:	221f      	movs	r2, #31
   25c6e:	18ba      	adds	r2, r7, r2
   25c70:	7812      	ldrb	r2, [r2, #0]
   25c72:	2108      	movs	r1, #8
   25c74:	438a      	bics	r2, r1
   25c76:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   25c78:	231f      	movs	r3, #31
   25c7a:	18fb      	adds	r3, r7, r3
   25c7c:	781b      	ldrb	r3, [r3, #0]
   25c7e:	2b00      	cmp	r3, #0
   25c80:	d050      	beq.n	25d24 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   25c82:	231f      	movs	r3, #31
   25c84:	18fb      	adds	r3, r7, r3
   25c86:	781b      	ldrb	r3, [r3, #0]
   25c88:	2202      	movs	r2, #2
   25c8a:	4013      	ands	r3, r2
   25c8c:	d007      	beq.n	25c9e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   25c8e:	69bb      	ldr	r3, [r7, #24]
   25c90:	2232      	movs	r2, #50	; 0x32
   25c92:	211a      	movs	r1, #26
   25c94:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   25c96:	697b      	ldr	r3, [r7, #20]
   25c98:	2202      	movs	r2, #2
   25c9a:	835a      	strh	r2, [r3, #26]
   25c9c:	e036      	b.n	25d0c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   25c9e:	231f      	movs	r3, #31
   25ca0:	18fb      	adds	r3, r7, r3
   25ca2:	781b      	ldrb	r3, [r3, #0]
   25ca4:	2204      	movs	r2, #4
   25ca6:	4013      	ands	r3, r2
   25ca8:	d007      	beq.n	25cba <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   25caa:	69bb      	ldr	r3, [r7, #24]
   25cac:	2232      	movs	r2, #50	; 0x32
   25cae:	211e      	movs	r1, #30
   25cb0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   25cb2:	697b      	ldr	r3, [r7, #20]
   25cb4:	2204      	movs	r2, #4
   25cb6:	835a      	strh	r2, [r3, #26]
   25cb8:	e028      	b.n	25d0c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   25cba:	231f      	movs	r3, #31
   25cbc:	18fb      	adds	r3, r7, r3
   25cbe:	781b      	ldrb	r3, [r3, #0]
   25cc0:	2201      	movs	r2, #1
   25cc2:	4013      	ands	r3, r2
   25cc4:	d007      	beq.n	25cd6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   25cc6:	69bb      	ldr	r3, [r7, #24]
   25cc8:	2232      	movs	r2, #50	; 0x32
   25cca:	2113      	movs	r1, #19
   25ccc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   25cce:	697b      	ldr	r3, [r7, #20]
   25cd0:	2201      	movs	r2, #1
   25cd2:	835a      	strh	r2, [r3, #26]
   25cd4:	e01a      	b.n	25d0c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   25cd6:	231f      	movs	r3, #31
   25cd8:	18fb      	adds	r3, r7, r3
   25cda:	781b      	ldrb	r3, [r3, #0]
   25cdc:	2210      	movs	r2, #16
   25cde:	4013      	ands	r3, r2
   25ce0:	d007      	beq.n	25cf2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   25ce2:	69bb      	ldr	r3, [r7, #24]
   25ce4:	2232      	movs	r2, #50	; 0x32
   25ce6:	2142      	movs	r1, #66	; 0x42
   25ce8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   25cea:	697b      	ldr	r3, [r7, #20]
   25cec:	2210      	movs	r2, #16
   25cee:	835a      	strh	r2, [r3, #26]
   25cf0:	e00c      	b.n	25d0c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   25cf2:	231f      	movs	r3, #31
   25cf4:	18fb      	adds	r3, r7, r3
   25cf6:	781b      	ldrb	r3, [r3, #0]
   25cf8:	2220      	movs	r2, #32
   25cfa:	4013      	ands	r3, r2
   25cfc:	d006      	beq.n	25d0c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   25cfe:	69bb      	ldr	r3, [r7, #24]
   25d00:	2232      	movs	r2, #50	; 0x32
   25d02:	2141      	movs	r1, #65	; 0x41
   25d04:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   25d06:	697b      	ldr	r3, [r7, #20]
   25d08:	2220      	movs	r2, #32
   25d0a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   25d0c:	2310      	movs	r3, #16
   25d0e:	18fb      	adds	r3, r7, r3
   25d10:	881b      	ldrh	r3, [r3, #0]
   25d12:	2204      	movs	r2, #4
   25d14:	4013      	ands	r3, r2
				if (callback_status
   25d16:	d050      	beq.n	25dba <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   25d18:	69bb      	ldr	r3, [r7, #24]
   25d1a:	695b      	ldr	r3, [r3, #20]
   25d1c:	69ba      	ldr	r2, [r7, #24]
   25d1e:	0010      	movs	r0, r2
   25d20:	4798      	blx	r3
   25d22:	e04a      	b.n	25dba <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   25d24:	697b      	ldr	r3, [r7, #20]
   25d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   25d28:	b29a      	uxth	r2, r3
   25d2a:	230e      	movs	r3, #14
   25d2c:	18fb      	adds	r3, r7, r3
   25d2e:	05d2      	lsls	r2, r2, #23
   25d30:	0dd2      	lsrs	r2, r2, #23
   25d32:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   25d34:	69bb      	ldr	r3, [r7, #24]
   25d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25d38:	220e      	movs	r2, #14
   25d3a:	18ba      	adds	r2, r7, r2
   25d3c:	8812      	ldrh	r2, [r2, #0]
   25d3e:	b2d2      	uxtb	r2, r2
   25d40:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   25d42:	69bb      	ldr	r3, [r7, #24]
   25d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25d46:	1c5a      	adds	r2, r3, #1
   25d48:	69bb      	ldr	r3, [r7, #24]
   25d4a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   25d4c:	69bb      	ldr	r3, [r7, #24]
   25d4e:	795b      	ldrb	r3, [r3, #5]
   25d50:	2b01      	cmp	r3, #1
   25d52:	d10d      	bne.n	25d70 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   25d54:	69bb      	ldr	r3, [r7, #24]
   25d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25d58:	220e      	movs	r2, #14
   25d5a:	18ba      	adds	r2, r7, r2
   25d5c:	8812      	ldrh	r2, [r2, #0]
   25d5e:	0a12      	lsrs	r2, r2, #8
   25d60:	b292      	uxth	r2, r2
   25d62:	b2d2      	uxtb	r2, r2
   25d64:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   25d66:	69bb      	ldr	r3, [r7, #24]
   25d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25d6a:	1c5a      	adds	r2, r3, #1
   25d6c:	69bb      	ldr	r3, [r7, #24]
   25d6e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   25d70:	69bb      	ldr	r3, [r7, #24]
   25d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   25d74:	b29b      	uxth	r3, r3
   25d76:	3b01      	subs	r3, #1
   25d78:	b29b      	uxth	r3, r3
   25d7a:	69ba      	ldr	r2, [r7, #24]
   25d7c:	1c19      	adds	r1, r3, #0
   25d7e:	8591      	strh	r1, [r2, #44]	; 0x2c
   25d80:	2b00      	cmp	r3, #0
   25d82:	d11a      	bne.n	25dba <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   25d84:	697b      	ldr	r3, [r7, #20]
   25d86:	2204      	movs	r2, #4
   25d88:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   25d8a:	69bb      	ldr	r3, [r7, #24]
   25d8c:	2232      	movs	r2, #50	; 0x32
   25d8e:	2100      	movs	r1, #0
   25d90:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   25d92:	2310      	movs	r3, #16
   25d94:	18fb      	adds	r3, r7, r3
   25d96:	881b      	ldrh	r3, [r3, #0]
   25d98:	2202      	movs	r2, #2
   25d9a:	4013      	ands	r3, r2
					if (callback_status
   25d9c:	d00d      	beq.n	25dba <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   25d9e:	69bb      	ldr	r3, [r7, #24]
   25da0:	691b      	ldr	r3, [r3, #16]
   25da2:	69ba      	ldr	r2, [r7, #24]
   25da4:	0010      	movs	r0, r2
   25da6:	4798      	blx	r3
   25da8:	e007      	b.n	25dba <_usart_interrupt_handler+0x2ae>
   25daa:	46c0      	nop			; (mov r8, r8)
   25dac:	20005638 	.word	0x20005638
   25db0:	000258ed 	.word	0x000258ed
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   25db4:	697b      	ldr	r3, [r7, #20]
   25db6:	2204      	movs	r2, #4
   25db8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   25dba:	2312      	movs	r3, #18
   25dbc:	18fb      	adds	r3, r7, r3
   25dbe:	881b      	ldrh	r3, [r3, #0]
   25dc0:	2210      	movs	r2, #16
   25dc2:	4013      	ands	r3, r2
   25dc4:	d010      	beq.n	25de8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   25dc6:	697b      	ldr	r3, [r7, #20]
   25dc8:	2210      	movs	r2, #16
   25dca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   25dcc:	697b      	ldr	r3, [r7, #20]
   25dce:	2210      	movs	r2, #16
   25dd0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   25dd2:	2310      	movs	r3, #16
   25dd4:	18fb      	adds	r3, r7, r3
   25dd6:	881b      	ldrh	r3, [r3, #0]
   25dd8:	2210      	movs	r2, #16
   25dda:	4013      	ands	r3, r2
   25ddc:	d004      	beq.n	25de8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   25dde:	69bb      	ldr	r3, [r7, #24]
   25de0:	69db      	ldr	r3, [r3, #28]
   25de2:	69ba      	ldr	r2, [r7, #24]
   25de4:	0010      	movs	r0, r2
   25de6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   25de8:	2312      	movs	r3, #18
   25dea:	18fb      	adds	r3, r7, r3
   25dec:	881b      	ldrh	r3, [r3, #0]
   25dee:	2220      	movs	r2, #32
   25df0:	4013      	ands	r3, r2
   25df2:	d010      	beq.n	25e16 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   25df4:	697b      	ldr	r3, [r7, #20]
   25df6:	2220      	movs	r2, #32
   25df8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   25dfa:	697b      	ldr	r3, [r7, #20]
   25dfc:	2220      	movs	r2, #32
   25dfe:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   25e00:	2310      	movs	r3, #16
   25e02:	18fb      	adds	r3, r7, r3
   25e04:	881b      	ldrh	r3, [r3, #0]
   25e06:	2208      	movs	r2, #8
   25e08:	4013      	ands	r3, r2
   25e0a:	d004      	beq.n	25e16 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   25e0c:	69bb      	ldr	r3, [r7, #24]
   25e0e:	699b      	ldr	r3, [r3, #24]
   25e10:	69ba      	ldr	r2, [r7, #24]
   25e12:	0010      	movs	r0, r2
   25e14:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   25e16:	2312      	movs	r3, #18
   25e18:	18fb      	adds	r3, r7, r3
   25e1a:	881b      	ldrh	r3, [r3, #0]
   25e1c:	2208      	movs	r2, #8
   25e1e:	4013      	ands	r3, r2
   25e20:	d010      	beq.n	25e44 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   25e22:	697b      	ldr	r3, [r7, #20]
   25e24:	2208      	movs	r2, #8
   25e26:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   25e28:	697b      	ldr	r3, [r7, #20]
   25e2a:	2208      	movs	r2, #8
   25e2c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   25e2e:	2310      	movs	r3, #16
   25e30:	18fb      	adds	r3, r7, r3
   25e32:	881b      	ldrh	r3, [r3, #0]
   25e34:	2220      	movs	r2, #32
   25e36:	4013      	ands	r3, r2
   25e38:	d004      	beq.n	25e44 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   25e3a:	69bb      	ldr	r3, [r7, #24]
   25e3c:	6a1b      	ldr	r3, [r3, #32]
   25e3e:	69ba      	ldr	r2, [r7, #24]
   25e40:	0010      	movs	r0, r2
   25e42:	4798      	blx	r3
		}
	}
#endif
}
   25e44:	46c0      	nop			; (mov r8, r8)
   25e46:	46bd      	mov	sp, r7
   25e48:	b008      	add	sp, #32
   25e4a:	bd80      	pop	{r7, pc}

00025e4c <system_gclk_gen_get_config_defaults>:
{
   25e4c:	b580      	push	{r7, lr}
   25e4e:	b082      	sub	sp, #8
   25e50:	af00      	add	r7, sp, #0
   25e52:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   25e54:	687b      	ldr	r3, [r7, #4]
   25e56:	2201      	movs	r2, #1
   25e58:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   25e5a:	687b      	ldr	r3, [r7, #4]
   25e5c:	2200      	movs	r2, #0
   25e5e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   25e60:	687b      	ldr	r3, [r7, #4]
   25e62:	2206      	movs	r2, #6
   25e64:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   25e66:	687b      	ldr	r3, [r7, #4]
   25e68:	2200      	movs	r2, #0
   25e6a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   25e6c:	687b      	ldr	r3, [r7, #4]
   25e6e:	2200      	movs	r2, #0
   25e70:	725a      	strb	r2, [r3, #9]
}
   25e72:	46c0      	nop			; (mov r8, r8)
   25e74:	46bd      	mov	sp, r7
   25e76:	b002      	add	sp, #8
   25e78:	bd80      	pop	{r7, pc}

00025e7a <system_gclk_chan_get_config_defaults>:
{
   25e7a:	b580      	push	{r7, lr}
   25e7c:	b082      	sub	sp, #8
   25e7e:	af00      	add	r7, sp, #0
   25e80:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25e82:	687b      	ldr	r3, [r7, #4]
   25e84:	2200      	movs	r2, #0
   25e86:	701a      	strb	r2, [r3, #0]
}
   25e88:	46c0      	nop			; (mov r8, r8)
   25e8a:	46bd      	mov	sp, r7
   25e8c:	b002      	add	sp, #8
   25e8e:	bd80      	pop	{r7, pc}

00025e90 <system_clock_source_osc8m_get_config_defaults>:
{
   25e90:	b580      	push	{r7, lr}
   25e92:	b082      	sub	sp, #8
   25e94:	af00      	add	r7, sp, #0
   25e96:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   25e98:	687b      	ldr	r3, [r7, #4]
   25e9a:	2203      	movs	r2, #3
   25e9c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   25e9e:	687b      	ldr	r3, [r7, #4]
   25ea0:	2200      	movs	r2, #0
   25ea2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   25ea4:	687b      	ldr	r3, [r7, #4]
   25ea6:	2201      	movs	r2, #1
   25ea8:	709a      	strb	r2, [r3, #2]
}
   25eaa:	46c0      	nop			; (mov r8, r8)
   25eac:	46bd      	mov	sp, r7
   25eae:	b002      	add	sp, #8
   25eb0:	bd80      	pop	{r7, pc}
	...

00025eb4 <system_cpu_clock_set_divider>:
{
   25eb4:	b580      	push	{r7, lr}
   25eb6:	b082      	sub	sp, #8
   25eb8:	af00      	add	r7, sp, #0
   25eba:	0002      	movs	r2, r0
   25ebc:	1dfb      	adds	r3, r7, #7
   25ebe:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   25ec0:	4a03      	ldr	r2, [pc, #12]	; (25ed0 <system_cpu_clock_set_divider+0x1c>)
   25ec2:	1dfb      	adds	r3, r7, #7
   25ec4:	781b      	ldrb	r3, [r3, #0]
   25ec6:	7213      	strb	r3, [r2, #8]
}
   25ec8:	46c0      	nop			; (mov r8, r8)
   25eca:	46bd      	mov	sp, r7
   25ecc:	b002      	add	sp, #8
   25ece:	bd80      	pop	{r7, pc}
   25ed0:	40000400 	.word	0x40000400

00025ed4 <system_apb_clock_set_divider>:
{
   25ed4:	b580      	push	{r7, lr}
   25ed6:	b082      	sub	sp, #8
   25ed8:	af00      	add	r7, sp, #0
   25eda:	0002      	movs	r2, r0
   25edc:	1dfb      	adds	r3, r7, #7
   25ede:	701a      	strb	r2, [r3, #0]
   25ee0:	1dbb      	adds	r3, r7, #6
   25ee2:	1c0a      	adds	r2, r1, #0
   25ee4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25ee6:	1dfb      	adds	r3, r7, #7
   25ee8:	781b      	ldrb	r3, [r3, #0]
   25eea:	2b01      	cmp	r3, #1
   25eec:	d008      	beq.n	25f00 <system_apb_clock_set_divider+0x2c>
   25eee:	2b02      	cmp	r3, #2
   25ef0:	d00b      	beq.n	25f0a <system_apb_clock_set_divider+0x36>
   25ef2:	2b00      	cmp	r3, #0
   25ef4:	d10e      	bne.n	25f14 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   25ef6:	4a0b      	ldr	r2, [pc, #44]	; (25f24 <system_apb_clock_set_divider+0x50>)
   25ef8:	1dbb      	adds	r3, r7, #6
   25efa:	781b      	ldrb	r3, [r3, #0]
   25efc:	7253      	strb	r3, [r2, #9]
			break;
   25efe:	e00b      	b.n	25f18 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   25f00:	4a08      	ldr	r2, [pc, #32]	; (25f24 <system_apb_clock_set_divider+0x50>)
   25f02:	1dbb      	adds	r3, r7, #6
   25f04:	781b      	ldrb	r3, [r3, #0]
   25f06:	7293      	strb	r3, [r2, #10]
			break;
   25f08:	e006      	b.n	25f18 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   25f0a:	4a06      	ldr	r2, [pc, #24]	; (25f24 <system_apb_clock_set_divider+0x50>)
   25f0c:	1dbb      	adds	r3, r7, #6
   25f0e:	781b      	ldrb	r3, [r3, #0]
   25f10:	72d3      	strb	r3, [r2, #11]
			break;
   25f12:	e001      	b.n	25f18 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   25f14:	2317      	movs	r3, #23
   25f16:	e000      	b.n	25f1a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   25f18:	2300      	movs	r3, #0
}
   25f1a:	0018      	movs	r0, r3
   25f1c:	46bd      	mov	sp, r7
   25f1e:	b002      	add	sp, #8
   25f20:	bd80      	pop	{r7, pc}
   25f22:	46c0      	nop			; (mov r8, r8)
   25f24:	40000400 	.word	0x40000400

00025f28 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   25f28:	b580      	push	{r7, lr}
   25f2a:	b082      	sub	sp, #8
   25f2c:	af00      	add	r7, sp, #0
   25f2e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   25f30:	687b      	ldr	r3, [r7, #4]
   25f32:	2201      	movs	r2, #1
   25f34:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   25f36:	687b      	ldr	r3, [r7, #4]
   25f38:	2200      	movs	r2, #0
   25f3a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   25f3c:	687b      	ldr	r3, [r7, #4]
   25f3e:	2200      	movs	r2, #0
   25f40:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   25f42:	687b      	ldr	r3, [r7, #4]
   25f44:	2200      	movs	r2, #0
   25f46:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   25f48:	687b      	ldr	r3, [r7, #4]
   25f4a:	2200      	movs	r2, #0
   25f4c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   25f4e:	687b      	ldr	r3, [r7, #4]
   25f50:	4a0a      	ldr	r2, [pc, #40]	; (25f7c <system_clock_source_dpll_get_config_defaults+0x54>)
   25f52:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   25f54:	687b      	ldr	r3, [r7, #4]
   25f56:	2280      	movs	r2, #128	; 0x80
   25f58:	0212      	lsls	r2, r2, #8
   25f5a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   25f5c:	687b      	ldr	r3, [r7, #4]
   25f5e:	2201      	movs	r2, #1
   25f60:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   25f62:	687b      	ldr	r3, [r7, #4]
   25f64:	2200      	movs	r2, #0
   25f66:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   25f68:	687b      	ldr	r3, [r7, #4]
   25f6a:	2200      	movs	r2, #0
   25f6c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   25f6e:	687b      	ldr	r3, [r7, #4]
   25f70:	2200      	movs	r2, #0
   25f72:	749a      	strb	r2, [r3, #18]
};
   25f74:	46c0      	nop			; (mov r8, r8)
   25f76:	46bd      	mov	sp, r7
   25f78:	b002      	add	sp, #8
   25f7a:	bd80      	pop	{r7, pc}
   25f7c:	02dc6c00 	.word	0x02dc6c00

00025f80 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   25f80:	b580      	push	{r7, lr}
   25f82:	b082      	sub	sp, #8
   25f84:	af00      	add	r7, sp, #0
   25f86:	0002      	movs	r2, r0
   25f88:	1dfb      	adds	r3, r7, #7
   25f8a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   25f8c:	4a08      	ldr	r2, [pc, #32]	; (25fb0 <system_flash_set_waitstates+0x30>)
   25f8e:	1dfb      	adds	r3, r7, #7
   25f90:	781b      	ldrb	r3, [r3, #0]
   25f92:	210f      	movs	r1, #15
   25f94:	400b      	ands	r3, r1
   25f96:	b2d9      	uxtb	r1, r3
   25f98:	6853      	ldr	r3, [r2, #4]
   25f9a:	200f      	movs	r0, #15
   25f9c:	4001      	ands	r1, r0
   25f9e:	0049      	lsls	r1, r1, #1
   25fa0:	201e      	movs	r0, #30
   25fa2:	4383      	bics	r3, r0
   25fa4:	430b      	orrs	r3, r1
   25fa6:	6053      	str	r3, [r2, #4]
}
   25fa8:	46c0      	nop			; (mov r8, r8)
   25faa:	46bd      	mov	sp, r7
   25fac:	b002      	add	sp, #8
   25fae:	bd80      	pop	{r7, pc}
   25fb0:	41004000 	.word	0x41004000

00025fb4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   25fb4:	b580      	push	{r7, lr}
   25fb6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   25fb8:	46c0      	nop			; (mov r8, r8)
   25fba:	4b04      	ldr	r3, [pc, #16]	; (25fcc <_system_dfll_wait_for_sync+0x18>)
   25fbc:	68db      	ldr	r3, [r3, #12]
   25fbe:	2210      	movs	r2, #16
   25fc0:	4013      	ands	r3, r2
   25fc2:	d0fa      	beq.n	25fba <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   25fc4:	46c0      	nop			; (mov r8, r8)
   25fc6:	46bd      	mov	sp, r7
   25fc8:	bd80      	pop	{r7, pc}
   25fca:	46c0      	nop			; (mov r8, r8)
   25fcc:	40000800 	.word	0x40000800

00025fd0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   25fd0:	b580      	push	{r7, lr}
   25fd2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   25fd4:	4b0c      	ldr	r3, [pc, #48]	; (26008 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   25fd6:	2202      	movs	r2, #2
   25fd8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   25fda:	4b0c      	ldr	r3, [pc, #48]	; (2600c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   25fdc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   25fde:	4a0a      	ldr	r2, [pc, #40]	; (26008 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   25fe0:	4b0b      	ldr	r3, [pc, #44]	; (26010 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   25fe2:	689b      	ldr	r3, [r3, #8]
   25fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   25fe6:	4a08      	ldr	r2, [pc, #32]	; (26008 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   25fe8:	4b09      	ldr	r3, [pc, #36]	; (26010 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   25fea:	685b      	ldr	r3, [r3, #4]
   25fec:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   25fee:	4b06      	ldr	r3, [pc, #24]	; (26008 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   25ff0:	2200      	movs	r2, #0
   25ff2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   25ff4:	4b05      	ldr	r3, [pc, #20]	; (2600c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   25ff6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   25ff8:	4a03      	ldr	r2, [pc, #12]	; (26008 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   25ffa:	4b05      	ldr	r3, [pc, #20]	; (26010 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   25ffc:	681b      	ldr	r3, [r3, #0]
   25ffe:	b29b      	uxth	r3, r3
   26000:	8493      	strh	r3, [r2, #36]	; 0x24
}
   26002:	46c0      	nop			; (mov r8, r8)
   26004:	46bd      	mov	sp, r7
   26006:	bd80      	pop	{r7, pc}
   26008:	40000800 	.word	0x40000800
   2600c:	00025fb5 	.word	0x00025fb5
   26010:	20003d58 	.word	0x20003d58

00026014 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   26014:	b580      	push	{r7, lr}
   26016:	b082      	sub	sp, #8
   26018:	af00      	add	r7, sp, #0
   2601a:	0002      	movs	r2, r0
   2601c:	1dfb      	adds	r3, r7, #7
   2601e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   26020:	1dfb      	adds	r3, r7, #7
   26022:	781b      	ldrb	r3, [r3, #0]
   26024:	2b08      	cmp	r3, #8
   26026:	d841      	bhi.n	260ac <system_clock_source_get_hz+0x98>
   26028:	009a      	lsls	r2, r3, #2
   2602a:	4b23      	ldr	r3, [pc, #140]	; (260b8 <system_clock_source_get_hz+0xa4>)
   2602c:	18d3      	adds	r3, r2, r3
   2602e:	681b      	ldr	r3, [r3, #0]
   26030:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   26032:	4b22      	ldr	r3, [pc, #136]	; (260bc <system_clock_source_get_hz+0xa8>)
   26034:	691b      	ldr	r3, [r3, #16]
   26036:	e03a      	b.n	260ae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   26038:	4b21      	ldr	r3, [pc, #132]	; (260c0 <system_clock_source_get_hz+0xac>)
   2603a:	6a1b      	ldr	r3, [r3, #32]
   2603c:	059b      	lsls	r3, r3, #22
   2603e:	0f9b      	lsrs	r3, r3, #30
   26040:	b2db      	uxtb	r3, r3
   26042:	001a      	movs	r2, r3
   26044:	4b1f      	ldr	r3, [pc, #124]	; (260c4 <system_clock_source_get_hz+0xb0>)
   26046:	40d3      	lsrs	r3, r2
   26048:	e031      	b.n	260ae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2604a:	2380      	movs	r3, #128	; 0x80
   2604c:	021b      	lsls	r3, r3, #8
   2604e:	e02e      	b.n	260ae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   26050:	2380      	movs	r3, #128	; 0x80
   26052:	021b      	lsls	r3, r3, #8
   26054:	e02b      	b.n	260ae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   26056:	4b19      	ldr	r3, [pc, #100]	; (260bc <system_clock_source_get_hz+0xa8>)
   26058:	695b      	ldr	r3, [r3, #20]
   2605a:	e028      	b.n	260ae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2605c:	4b17      	ldr	r3, [pc, #92]	; (260bc <system_clock_source_get_hz+0xa8>)
   2605e:	681b      	ldr	r3, [r3, #0]
   26060:	2202      	movs	r2, #2
   26062:	4013      	ands	r3, r2
   26064:	d101      	bne.n	2606a <system_clock_source_get_hz+0x56>
			return 0;
   26066:	2300      	movs	r3, #0
   26068:	e021      	b.n	260ae <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2606a:	4b17      	ldr	r3, [pc, #92]	; (260c8 <system_clock_source_get_hz+0xb4>)
   2606c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2606e:	4b13      	ldr	r3, [pc, #76]	; (260bc <system_clock_source_get_hz+0xa8>)
   26070:	681b      	ldr	r3, [r3, #0]
   26072:	2224      	movs	r2, #36	; 0x24
   26074:	4013      	ands	r3, r2
   26076:	2b04      	cmp	r3, #4
   26078:	d109      	bne.n	2608e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2607a:	2000      	movs	r0, #0
   2607c:	4b13      	ldr	r3, [pc, #76]	; (260cc <system_clock_source_get_hz+0xb8>)
   2607e:	4798      	blx	r3
   26080:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   26082:	4b0e      	ldr	r3, [pc, #56]	; (260bc <system_clock_source_get_hz+0xa8>)
   26084:	689b      	ldr	r3, [r3, #8]
   26086:	041b      	lsls	r3, r3, #16
   26088:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2608a:	4353      	muls	r3, r2
   2608c:	e00f      	b.n	260ae <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2608e:	4b10      	ldr	r3, [pc, #64]	; (260d0 <system_clock_source_get_hz+0xbc>)
   26090:	e00d      	b.n	260ae <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   26092:	4a0b      	ldr	r2, [pc, #44]	; (260c0 <system_clock_source_get_hz+0xac>)
   26094:	2350      	movs	r3, #80	; 0x50
   26096:	5cd3      	ldrb	r3, [r2, r3]
   26098:	b2db      	uxtb	r3, r3
   2609a:	001a      	movs	r2, r3
   2609c:	2304      	movs	r3, #4
   2609e:	4013      	ands	r3, r2
   260a0:	d101      	bne.n	260a6 <system_clock_source_get_hz+0x92>
			return 0;
   260a2:	2300      	movs	r3, #0
   260a4:	e003      	b.n	260ae <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   260a6:	4b05      	ldr	r3, [pc, #20]	; (260bc <system_clock_source_get_hz+0xa8>)
   260a8:	68db      	ldr	r3, [r3, #12]
   260aa:	e000      	b.n	260ae <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   260ac:	2300      	movs	r3, #0
	}
}
   260ae:	0018      	movs	r0, r3
   260b0:	46bd      	mov	sp, r7
   260b2:	b002      	add	sp, #8
   260b4:	bd80      	pop	{r7, pc}
   260b6:	46c0      	nop			; (mov r8, r8)
   260b8:	000377f8 	.word	0x000377f8
   260bc:	20003d58 	.word	0x20003d58
   260c0:	40000800 	.word	0x40000800
   260c4:	007a1200 	.word	0x007a1200
   260c8:	00025fb5 	.word	0x00025fb5
   260cc:	00026ab1 	.word	0x00026ab1
   260d0:	02dc6c00 	.word	0x02dc6c00

000260d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   260d4:	b580      	push	{r7, lr}
   260d6:	b084      	sub	sp, #16
   260d8:	af00      	add	r7, sp, #0
   260da:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   260dc:	4b1a      	ldr	r3, [pc, #104]	; (26148 <system_clock_source_osc8m_set_config+0x74>)
   260de:	6a1b      	ldr	r3, [r3, #32]
   260e0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   260e2:	687b      	ldr	r3, [r7, #4]
   260e4:	781b      	ldrb	r3, [r3, #0]
   260e6:	1c1a      	adds	r2, r3, #0
   260e8:	2303      	movs	r3, #3
   260ea:	4013      	ands	r3, r2
   260ec:	b2da      	uxtb	r2, r3
   260ee:	230d      	movs	r3, #13
   260f0:	18fb      	adds	r3, r7, r3
   260f2:	2103      	movs	r1, #3
   260f4:	400a      	ands	r2, r1
   260f6:	0010      	movs	r0, r2
   260f8:	781a      	ldrb	r2, [r3, #0]
   260fa:	2103      	movs	r1, #3
   260fc:	438a      	bics	r2, r1
   260fe:	1c11      	adds	r1, r2, #0
   26100:	1c02      	adds	r2, r0, #0
   26102:	430a      	orrs	r2, r1
   26104:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   26106:	687b      	ldr	r3, [r7, #4]
   26108:	789a      	ldrb	r2, [r3, #2]
   2610a:	230c      	movs	r3, #12
   2610c:	18fb      	adds	r3, r7, r3
   2610e:	01d0      	lsls	r0, r2, #7
   26110:	781a      	ldrb	r2, [r3, #0]
   26112:	217f      	movs	r1, #127	; 0x7f
   26114:	400a      	ands	r2, r1
   26116:	1c11      	adds	r1, r2, #0
   26118:	1c02      	adds	r2, r0, #0
   2611a:	430a      	orrs	r2, r1
   2611c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2611e:	687b      	ldr	r3, [r7, #4]
   26120:	785a      	ldrb	r2, [r3, #1]
   26122:	230c      	movs	r3, #12
   26124:	18fb      	adds	r3, r7, r3
   26126:	2101      	movs	r1, #1
   26128:	400a      	ands	r2, r1
   2612a:	0190      	lsls	r0, r2, #6
   2612c:	781a      	ldrb	r2, [r3, #0]
   2612e:	2140      	movs	r1, #64	; 0x40
   26130:	438a      	bics	r2, r1
   26132:	1c11      	adds	r1, r2, #0
   26134:	1c02      	adds	r2, r0, #0
   26136:	430a      	orrs	r2, r1
   26138:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2613a:	4b03      	ldr	r3, [pc, #12]	; (26148 <system_clock_source_osc8m_set_config+0x74>)
   2613c:	68fa      	ldr	r2, [r7, #12]
   2613e:	621a      	str	r2, [r3, #32]
}
   26140:	46c0      	nop			; (mov r8, r8)
   26142:	46bd      	mov	sp, r7
   26144:	b004      	add	sp, #16
   26146:	bd80      	pop	{r7, pc}
   26148:	40000800 	.word	0x40000800

0002614c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2614c:	b580      	push	{r7, lr}
   2614e:	b086      	sub	sp, #24
   26150:	af00      	add	r7, sp, #0
   26152:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   26154:	687b      	ldr	r3, [r7, #4]
   26156:	68db      	ldr	r3, [r3, #12]
   26158:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2615a:	687b      	ldr	r3, [r7, #4]
   2615c:	7d1b      	ldrb	r3, [r3, #20]
   2615e:	2b01      	cmp	r3, #1
   26160:	d10a      	bne.n	26178 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   26162:	687b      	ldr	r3, [r7, #4]
   26164:	8a1b      	ldrh	r3, [r3, #16]
   26166:	3301      	adds	r3, #1
   26168:	005b      	lsls	r3, r3, #1
   2616a:	001a      	movs	r2, r3
   2616c:	4b36      	ldr	r3, [pc, #216]	; (26248 <system_clock_source_dpll_set_config+0xfc>)
   2616e:	0011      	movs	r1, r2
   26170:	6978      	ldr	r0, [r7, #20]
   26172:	4798      	blx	r3
   26174:	0003      	movs	r3, r0
   26176:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   26178:	687b      	ldr	r3, [r7, #4]
   2617a:	689b      	ldr	r3, [r3, #8]
   2617c:	011a      	lsls	r2, r3, #4
   2617e:	4b32      	ldr	r3, [pc, #200]	; (26248 <system_clock_source_dpll_set_config+0xfc>)
   26180:	6979      	ldr	r1, [r7, #20]
   26182:	0010      	movs	r0, r2
   26184:	4798      	blx	r3
   26186:	0003      	movs	r3, r0
   26188:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2618a:	693b      	ldr	r3, [r7, #16]
   2618c:	b2da      	uxtb	r2, r3
   2618e:	230f      	movs	r3, #15
   26190:	18fb      	adds	r3, r7, r3
   26192:	210f      	movs	r1, #15
   26194:	400a      	ands	r2, r1
   26196:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   26198:	693b      	ldr	r3, [r7, #16]
   2619a:	091b      	lsrs	r3, r3, #4
   2619c:	3b01      	subs	r3, #1
   2619e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   261a0:	492a      	ldr	r1, [pc, #168]	; (2624c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   261a2:	687b      	ldr	r3, [r7, #4]
   261a4:	781b      	ldrb	r3, [r3, #0]
   261a6:	01db      	lsls	r3, r3, #7
   261a8:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   261aa:	687b      	ldr	r3, [r7, #4]
   261ac:	785b      	ldrb	r3, [r3, #1]
   261ae:	019b      	lsls	r3, r3, #6
   261b0:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   261b2:	4313      	orrs	r3, r2
   261b4:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   261b6:	2344      	movs	r3, #68	; 0x44
   261b8:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   261ba:	4b24      	ldr	r3, [pc, #144]	; (2624c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   261bc:	220f      	movs	r2, #15
   261be:	18ba      	adds	r2, r7, r2
   261c0:	7812      	ldrb	r2, [r2, #0]
   261c2:	0412      	lsls	r2, r2, #16
   261c4:	0011      	movs	r1, r2
   261c6:	22f0      	movs	r2, #240	; 0xf0
   261c8:	0312      	lsls	r2, r2, #12
   261ca:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   261cc:	693a      	ldr	r2, [r7, #16]
   261ce:	0512      	lsls	r2, r2, #20
   261d0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   261d2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   261d4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   261d6:	4b1d      	ldr	r3, [pc, #116]	; (2624c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   261d8:	687a      	ldr	r2, [r7, #4]
   261da:	8a12      	ldrh	r2, [r2, #16]
   261dc:	0412      	lsls	r2, r2, #16
   261de:	0011      	movs	r1, r2
   261e0:	4a1b      	ldr	r2, [pc, #108]	; (26250 <system_clock_source_dpll_set_config+0x104>)
   261e2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   261e4:	687a      	ldr	r2, [r7, #4]
   261e6:	7892      	ldrb	r2, [r2, #2]
   261e8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   261ea:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   261ec:	687a      	ldr	r2, [r7, #4]
   261ee:	7cd2      	ldrb	r2, [r2, #19]
   261f0:	0212      	lsls	r2, r2, #8
   261f2:	0010      	movs	r0, r2
   261f4:	22e0      	movs	r2, #224	; 0xe0
   261f6:	00d2      	lsls	r2, r2, #3
   261f8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   261fa:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   261fc:	687a      	ldr	r2, [r7, #4]
   261fe:	7d12      	ldrb	r2, [r2, #20]
   26200:	0112      	lsls	r2, r2, #4
   26202:	0010      	movs	r0, r2
   26204:	2230      	movs	r2, #48	; 0x30
   26206:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   26208:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2620a:	687a      	ldr	r2, [r7, #4]
   2620c:	78d2      	ldrb	r2, [r2, #3]
   2620e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   26210:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   26212:	687a      	ldr	r2, [r7, #4]
   26214:	7912      	ldrb	r2, [r2, #4]
   26216:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   26218:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2621a:	687a      	ldr	r2, [r7, #4]
   2621c:	7c92      	ldrb	r2, [r2, #18]
   2621e:	0010      	movs	r0, r2
   26220:	2203      	movs	r2, #3
   26222:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   26224:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   26226:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   26228:	693b      	ldr	r3, [r7, #16]
   2622a:	3301      	adds	r3, #1
   2622c:	011a      	lsls	r2, r3, #4
   2622e:	230f      	movs	r3, #15
   26230:	18fb      	adds	r3, r7, r3
   26232:	781b      	ldrb	r3, [r3, #0]
   26234:	18d3      	adds	r3, r2, r3
   26236:	697a      	ldr	r2, [r7, #20]
   26238:	4353      	muls	r3, r2
   2623a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2623c:	4b05      	ldr	r3, [pc, #20]	; (26254 <system_clock_source_dpll_set_config+0x108>)
   2623e:	60da      	str	r2, [r3, #12]
}
   26240:	46c0      	nop			; (mov r8, r8)
   26242:	46bd      	mov	sp, r7
   26244:	b006      	add	sp, #24
   26246:	bd80      	pop	{r7, pc}
   26248:	0002fded 	.word	0x0002fded
   2624c:	40000800 	.word	0x40000800
   26250:	07ff0000 	.word	0x07ff0000
   26254:	20003d58 	.word	0x20003d58

00026258 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   26258:	b580      	push	{r7, lr}
   2625a:	b082      	sub	sp, #8
   2625c:	af00      	add	r7, sp, #0
   2625e:	0002      	movs	r2, r0
   26260:	1dfb      	adds	r3, r7, #7
   26262:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   26264:	1dfb      	adds	r3, r7, #7
   26266:	781b      	ldrb	r3, [r3, #0]
   26268:	2b08      	cmp	r3, #8
   2626a:	d83b      	bhi.n	262e4 <system_clock_source_enable+0x8c>
   2626c:	009a      	lsls	r2, r3, #2
   2626e:	4b21      	ldr	r3, [pc, #132]	; (262f4 <system_clock_source_enable+0x9c>)
   26270:	18d3      	adds	r3, r2, r3
   26272:	681b      	ldr	r3, [r3, #0]
   26274:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   26276:	4b20      	ldr	r3, [pc, #128]	; (262f8 <system_clock_source_enable+0xa0>)
   26278:	4a1f      	ldr	r2, [pc, #124]	; (262f8 <system_clock_source_enable+0xa0>)
   2627a:	6a12      	ldr	r2, [r2, #32]
   2627c:	2102      	movs	r1, #2
   2627e:	430a      	orrs	r2, r1
   26280:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   26282:	2300      	movs	r3, #0
   26284:	e031      	b.n	262ea <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   26286:	4b1c      	ldr	r3, [pc, #112]	; (262f8 <system_clock_source_enable+0xa0>)
   26288:	4a1b      	ldr	r2, [pc, #108]	; (262f8 <system_clock_source_enable+0xa0>)
   2628a:	6992      	ldr	r2, [r2, #24]
   2628c:	2102      	movs	r1, #2
   2628e:	430a      	orrs	r2, r1
   26290:	619a      	str	r2, [r3, #24]
		break;
   26292:	e029      	b.n	262e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   26294:	4a18      	ldr	r2, [pc, #96]	; (262f8 <system_clock_source_enable+0xa0>)
   26296:	4b18      	ldr	r3, [pc, #96]	; (262f8 <system_clock_source_enable+0xa0>)
   26298:	8a1b      	ldrh	r3, [r3, #16]
   2629a:	b29b      	uxth	r3, r3
   2629c:	2102      	movs	r1, #2
   2629e:	430b      	orrs	r3, r1
   262a0:	b29b      	uxth	r3, r3
   262a2:	8213      	strh	r3, [r2, #16]
		break;
   262a4:	e020      	b.n	262e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   262a6:	4a14      	ldr	r2, [pc, #80]	; (262f8 <system_clock_source_enable+0xa0>)
   262a8:	4b13      	ldr	r3, [pc, #76]	; (262f8 <system_clock_source_enable+0xa0>)
   262aa:	8a9b      	ldrh	r3, [r3, #20]
   262ac:	b29b      	uxth	r3, r3
   262ae:	2102      	movs	r1, #2
   262b0:	430b      	orrs	r3, r1
   262b2:	b29b      	uxth	r3, r3
   262b4:	8293      	strh	r3, [r2, #20]
		break;
   262b6:	e017      	b.n	262e8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   262b8:	4b10      	ldr	r3, [pc, #64]	; (262fc <system_clock_source_enable+0xa4>)
   262ba:	681b      	ldr	r3, [r3, #0]
   262bc:	2202      	movs	r2, #2
   262be:	431a      	orrs	r2, r3
   262c0:	4b0e      	ldr	r3, [pc, #56]	; (262fc <system_clock_source_enable+0xa4>)
   262c2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   262c4:	4b0e      	ldr	r3, [pc, #56]	; (26300 <system_clock_source_enable+0xa8>)
   262c6:	4798      	blx	r3
		break;
   262c8:	e00e      	b.n	262e8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   262ca:	4a0b      	ldr	r2, [pc, #44]	; (262f8 <system_clock_source_enable+0xa0>)
   262cc:	490a      	ldr	r1, [pc, #40]	; (262f8 <system_clock_source_enable+0xa0>)
   262ce:	2344      	movs	r3, #68	; 0x44
   262d0:	5ccb      	ldrb	r3, [r1, r3]
   262d2:	b2db      	uxtb	r3, r3
   262d4:	2102      	movs	r1, #2
   262d6:	430b      	orrs	r3, r1
   262d8:	b2d9      	uxtb	r1, r3
   262da:	2344      	movs	r3, #68	; 0x44
   262dc:	54d1      	strb	r1, [r2, r3]
		break;
   262de:	e003      	b.n	262e8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   262e0:	2300      	movs	r3, #0
   262e2:	e002      	b.n	262ea <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   262e4:	2317      	movs	r3, #23
   262e6:	e000      	b.n	262ea <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   262e8:	2300      	movs	r3, #0
}
   262ea:	0018      	movs	r0, r3
   262ec:	46bd      	mov	sp, r7
   262ee:	b002      	add	sp, #8
   262f0:	bd80      	pop	{r7, pc}
   262f2:	46c0      	nop			; (mov r8, r8)
   262f4:	0003781c 	.word	0x0003781c
   262f8:	40000800 	.word	0x40000800
   262fc:	20003d58 	.word	0x20003d58
   26300:	00025fd1 	.word	0x00025fd1

00026304 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   26304:	b580      	push	{r7, lr}
   26306:	b084      	sub	sp, #16
   26308:	af00      	add	r7, sp, #0
   2630a:	0002      	movs	r2, r0
   2630c:	1dfb      	adds	r3, r7, #7
   2630e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   26310:	2300      	movs	r3, #0
   26312:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   26314:	1dfb      	adds	r3, r7, #7
   26316:	781b      	ldrb	r3, [r3, #0]
   26318:	2b08      	cmp	r3, #8
   2631a:	d821      	bhi.n	26360 <system_clock_source_is_ready+0x5c>
   2631c:	009a      	lsls	r2, r3, #2
   2631e:	4b18      	ldr	r3, [pc, #96]	; (26380 <system_clock_source_is_ready+0x7c>)
   26320:	18d3      	adds	r3, r2, r3
   26322:	681b      	ldr	r3, [r3, #0]
   26324:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   26326:	2308      	movs	r3, #8
   26328:	60fb      	str	r3, [r7, #12]
		break;
   2632a:	e01b      	b.n	26364 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2632c:	2304      	movs	r3, #4
   2632e:	60fb      	str	r3, [r7, #12]
		break;
   26330:	e018      	b.n	26364 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   26332:	2301      	movs	r3, #1
   26334:	60fb      	str	r3, [r7, #12]
		break;
   26336:	e015      	b.n	26364 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   26338:	2302      	movs	r3, #2
   2633a:	60fb      	str	r3, [r7, #12]
		break;
   2633c:	e012      	b.n	26364 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2633e:	2310      	movs	r3, #16
   26340:	60fb      	str	r3, [r7, #12]
		}
		break;
   26342:	e00f      	b.n	26364 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   26344:	4a0f      	ldr	r2, [pc, #60]	; (26384 <system_clock_source_is_ready+0x80>)
   26346:	2350      	movs	r3, #80	; 0x50
   26348:	5cd3      	ldrb	r3, [r2, r3]
   2634a:	b2db      	uxtb	r3, r3
   2634c:	001a      	movs	r2, r3
   2634e:	2303      	movs	r3, #3
   26350:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   26352:	3b03      	subs	r3, #3
   26354:	425a      	negs	r2, r3
   26356:	4153      	adcs	r3, r2
   26358:	b2db      	uxtb	r3, r3
   2635a:	e00c      	b.n	26376 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2635c:	2301      	movs	r3, #1
   2635e:	e00a      	b.n	26376 <system_clock_source_is_ready+0x72>

	default:
		return false;
   26360:	2300      	movs	r3, #0
   26362:	e008      	b.n	26376 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   26364:	4b07      	ldr	r3, [pc, #28]	; (26384 <system_clock_source_is_ready+0x80>)
   26366:	68db      	ldr	r3, [r3, #12]
   26368:	68fa      	ldr	r2, [r7, #12]
   2636a:	401a      	ands	r2, r3
   2636c:	68fb      	ldr	r3, [r7, #12]
   2636e:	1ad3      	subs	r3, r2, r3
   26370:	425a      	negs	r2, r3
   26372:	4153      	adcs	r3, r2
   26374:	b2db      	uxtb	r3, r3
}
   26376:	0018      	movs	r0, r3
   26378:	46bd      	mov	sp, r7
   2637a:	b004      	add	sp, #16
   2637c:	bd80      	pop	{r7, pc}
   2637e:	46c0      	nop			; (mov r8, r8)
   26380:	00037840 	.word	0x00037840
   26384:	40000800 	.word	0x40000800

00026388 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   26388:	b580      	push	{r7, lr}
   2638a:	b082      	sub	sp, #8
   2638c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2638e:	003b      	movs	r3, r7
   26390:	2203      	movs	r2, #3
   26392:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   26394:	2300      	movs	r3, #0
   26396:	607b      	str	r3, [r7, #4]
   26398:	e009      	b.n	263ae <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2639a:	687b      	ldr	r3, [r7, #4]
   2639c:	b2db      	uxtb	r3, r3
   2639e:	003a      	movs	r2, r7
   263a0:	0011      	movs	r1, r2
   263a2:	0018      	movs	r0, r3
   263a4:	4b05      	ldr	r3, [pc, #20]	; (263bc <_switch_peripheral_gclk+0x34>)
   263a6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   263a8:	687b      	ldr	r3, [r7, #4]
   263aa:	3301      	adds	r3, #1
   263ac:	607b      	str	r3, [r7, #4]
   263ae:	687b      	ldr	r3, [r7, #4]
   263b0:	2b24      	cmp	r3, #36	; 0x24
   263b2:	d9f2      	bls.n	2639a <_switch_peripheral_gclk+0x12>
	}
}
   263b4:	46c0      	nop			; (mov r8, r8)
   263b6:	46bd      	mov	sp, r7
   263b8:	b002      	add	sp, #8
   263ba:	bd80      	pop	{r7, pc}
   263bc:	0002698d 	.word	0x0002698d

000263c0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   263c0:	b580      	push	{r7, lr}
   263c2:	b0a6      	sub	sp, #152	; 0x98
   263c4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   263c6:	4b92      	ldr	r3, [pc, #584]	; (26610 <system_clock_init+0x250>)
   263c8:	22c2      	movs	r2, #194	; 0xc2
   263ca:	00d2      	lsls	r2, r2, #3
   263cc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   263ce:	2003      	movs	r0, #3
   263d0:	4b90      	ldr	r3, [pc, #576]	; (26614 <system_clock_init+0x254>)
   263d2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   263d4:	4b90      	ldr	r3, [pc, #576]	; (26618 <system_clock_init+0x258>)
   263d6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   263d8:	2394      	movs	r3, #148	; 0x94
   263da:	18fb      	adds	r3, r7, r3
   263dc:	0018      	movs	r0, r3
   263de:	4b8f      	ldr	r3, [pc, #572]	; (2661c <system_clock_init+0x25c>)
   263e0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   263e2:	2394      	movs	r3, #148	; 0x94
   263e4:	18fb      	adds	r3, r7, r3
   263e6:	2200      	movs	r2, #0
   263e8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   263ea:	2394      	movs	r3, #148	; 0x94
   263ec:	18fb      	adds	r3, r7, r3
   263ee:	2201      	movs	r2, #1
   263f0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   263f2:	2394      	movs	r3, #148	; 0x94
   263f4:	18fb      	adds	r3, r7, r3
   263f6:	2200      	movs	r2, #0
   263f8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   263fa:	2394      	movs	r3, #148	; 0x94
   263fc:	18fb      	adds	r3, r7, r3
   263fe:	0018      	movs	r0, r3
   26400:	4b87      	ldr	r3, [pc, #540]	; (26620 <system_clock_init+0x260>)
   26402:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   26404:	2006      	movs	r0, #6
   26406:	4b87      	ldr	r3, [pc, #540]	; (26624 <system_clock_init+0x264>)
   26408:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2640a:	4b87      	ldr	r3, [pc, #540]	; (26628 <system_clock_init+0x268>)
   2640c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2640e:	2360      	movs	r3, #96	; 0x60
   26410:	18fb      	adds	r3, r7, r3
   26412:	0018      	movs	r0, r3
   26414:	4b85      	ldr	r3, [pc, #532]	; (2662c <system_clock_init+0x26c>)
   26416:	4798      	blx	r3
   26418:	2360      	movs	r3, #96	; 0x60
   2641a:	18fb      	adds	r3, r7, r3
   2641c:	2206      	movs	r2, #6
   2641e:	701a      	strb	r2, [r3, #0]
   26420:	2360      	movs	r3, #96	; 0x60
   26422:	18fb      	adds	r3, r7, r3
   26424:	2208      	movs	r2, #8
   26426:	605a      	str	r2, [r3, #4]
   26428:	2360      	movs	r3, #96	; 0x60
   2642a:	18fb      	adds	r3, r7, r3
   2642c:	2200      	movs	r2, #0
   2642e:	721a      	strb	r2, [r3, #8]
   26430:	2360      	movs	r3, #96	; 0x60
   26432:	18fb      	adds	r3, r7, r3
   26434:	2200      	movs	r2, #0
   26436:	725a      	strb	r2, [r3, #9]
   26438:	2360      	movs	r3, #96	; 0x60
   2643a:	18fb      	adds	r3, r7, r3
   2643c:	0019      	movs	r1, r3
   2643e:	2001      	movs	r0, #1
   26440:	4b7b      	ldr	r3, [pc, #492]	; (26630 <system_clock_init+0x270>)
   26442:	4798      	blx	r3
   26444:	2001      	movs	r0, #1
   26446:	4b7b      	ldr	r3, [pc, #492]	; (26634 <system_clock_init+0x274>)
   26448:	4798      	blx	r3
   2644a:	2354      	movs	r3, #84	; 0x54
   2644c:	18fb      	adds	r3, r7, r3
   2644e:	0018      	movs	r0, r3
   26450:	4b76      	ldr	r3, [pc, #472]	; (2662c <system_clock_init+0x26c>)
   26452:	4798      	blx	r3
   26454:	2354      	movs	r3, #84	; 0x54
   26456:	18fb      	adds	r3, r7, r3
   26458:	2203      	movs	r2, #3
   2645a:	701a      	strb	r2, [r3, #0]
   2645c:	2354      	movs	r3, #84	; 0x54
   2645e:	18fb      	adds	r3, r7, r3
   26460:	2201      	movs	r2, #1
   26462:	605a      	str	r2, [r3, #4]
   26464:	2354      	movs	r3, #84	; 0x54
   26466:	18fb      	adds	r3, r7, r3
   26468:	2201      	movs	r2, #1
   2646a:	721a      	strb	r2, [r3, #8]
   2646c:	2354      	movs	r3, #84	; 0x54
   2646e:	18fb      	adds	r3, r7, r3
   26470:	2200      	movs	r2, #0
   26472:	725a      	strb	r2, [r3, #9]
   26474:	2354      	movs	r3, #84	; 0x54
   26476:	18fb      	adds	r3, r7, r3
   26478:	0019      	movs	r1, r3
   2647a:	2002      	movs	r0, #2
   2647c:	4b6c      	ldr	r3, [pc, #432]	; (26630 <system_clock_init+0x270>)
   2647e:	4798      	blx	r3
   26480:	2002      	movs	r0, #2
   26482:	4b6c      	ldr	r3, [pc, #432]	; (26634 <system_clock_init+0x274>)
   26484:	4798      	blx	r3
   26486:	233c      	movs	r3, #60	; 0x3c
   26488:	18fb      	adds	r3, r7, r3
   2648a:	0018      	movs	r0, r3
   2648c:	4b67      	ldr	r3, [pc, #412]	; (2662c <system_clock_init+0x26c>)
   2648e:	4798      	blx	r3
   26490:	233c      	movs	r3, #60	; 0x3c
   26492:	18fb      	adds	r3, r7, r3
   26494:	2203      	movs	r2, #3
   26496:	701a      	strb	r2, [r3, #0]
   26498:	233c      	movs	r3, #60	; 0x3c
   2649a:	18fb      	adds	r3, r7, r3
   2649c:	2220      	movs	r2, #32
   2649e:	605a      	str	r2, [r3, #4]
   264a0:	233c      	movs	r3, #60	; 0x3c
   264a2:	18fb      	adds	r3, r7, r3
   264a4:	2200      	movs	r2, #0
   264a6:	721a      	strb	r2, [r3, #8]
   264a8:	233c      	movs	r3, #60	; 0x3c
   264aa:	18fb      	adds	r3, r7, r3
   264ac:	2200      	movs	r2, #0
   264ae:	725a      	strb	r2, [r3, #9]
   264b0:	233c      	movs	r3, #60	; 0x3c
   264b2:	18fb      	adds	r3, r7, r3
   264b4:	0019      	movs	r1, r3
   264b6:	2004      	movs	r0, #4
   264b8:	4b5d      	ldr	r3, [pc, #372]	; (26630 <system_clock_init+0x270>)
   264ba:	4798      	blx	r3
   264bc:	2004      	movs	r0, #4
   264be:	4b5d      	ldr	r3, [pc, #372]	; (26634 <system_clock_init+0x274>)
   264c0:	4798      	blx	r3
   264c2:	2330      	movs	r3, #48	; 0x30
   264c4:	18fb      	adds	r3, r7, r3
   264c6:	0018      	movs	r0, r3
   264c8:	4b58      	ldr	r3, [pc, #352]	; (2662c <system_clock_init+0x26c>)
   264ca:	4798      	blx	r3
   264cc:	2330      	movs	r3, #48	; 0x30
   264ce:	18fb      	adds	r3, r7, r3
   264d0:	2206      	movs	r2, #6
   264d2:	701a      	strb	r2, [r3, #0]
   264d4:	2330      	movs	r3, #48	; 0x30
   264d6:	18fb      	adds	r3, r7, r3
   264d8:	2201      	movs	r2, #1
   264da:	605a      	str	r2, [r3, #4]
   264dc:	2330      	movs	r3, #48	; 0x30
   264de:	18fb      	adds	r3, r7, r3
   264e0:	2200      	movs	r2, #0
   264e2:	721a      	strb	r2, [r3, #8]
   264e4:	2330      	movs	r3, #48	; 0x30
   264e6:	18fb      	adds	r3, r7, r3
   264e8:	2200      	movs	r2, #0
   264ea:	725a      	strb	r2, [r3, #9]
   264ec:	2330      	movs	r3, #48	; 0x30
   264ee:	18fb      	adds	r3, r7, r3
   264f0:	0019      	movs	r1, r3
   264f2:	2005      	movs	r0, #5
   264f4:	4b4e      	ldr	r3, [pc, #312]	; (26630 <system_clock_init+0x270>)
   264f6:	4798      	blx	r3
   264f8:	2005      	movs	r0, #5
   264fa:	4b4e      	ldr	r3, [pc, #312]	; (26634 <system_clock_init+0x274>)
   264fc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   264fe:	2390      	movs	r3, #144	; 0x90
   26500:	18fb      	adds	r3, r7, r3
   26502:	0018      	movs	r0, r3
   26504:	4b4c      	ldr	r3, [pc, #304]	; (26638 <system_clock_init+0x278>)
   26506:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   26508:	2390      	movs	r3, #144	; 0x90
   2650a:	18fb      	adds	r3, r7, r3
   2650c:	2201      	movs	r2, #1
   2650e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   26510:	2390      	movs	r3, #144	; 0x90
   26512:	18fb      	adds	r3, r7, r3
   26514:	0019      	movs	r1, r3
   26516:	2001      	movs	r0, #1
   26518:	4b48      	ldr	r3, [pc, #288]	; (2663c <system_clock_init+0x27c>)
   2651a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2651c:	2001      	movs	r0, #1
   2651e:	4b48      	ldr	r3, [pc, #288]	; (26640 <system_clock_init+0x280>)
   26520:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   26522:	2378      	movs	r3, #120	; 0x78
   26524:	18fb      	adds	r3, r7, r3
   26526:	0018      	movs	r0, r3
   26528:	4b46      	ldr	r3, [pc, #280]	; (26644 <system_clock_init+0x284>)
   2652a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2652c:	2378      	movs	r3, #120	; 0x78
   2652e:	18fb      	adds	r3, r7, r3
   26530:	2200      	movs	r2, #0
   26532:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   26534:	2378      	movs	r3, #120	; 0x78
   26536:	18fb      	adds	r3, r7, r3
   26538:	2200      	movs	r2, #0
   2653a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2653c:	2378      	movs	r3, #120	; 0x78
   2653e:	18fb      	adds	r3, r7, r3
   26540:	2200      	movs	r2, #0
   26542:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   26544:	2378      	movs	r3, #120	; 0x78
   26546:	18fb      	adds	r3, r7, r3
   26548:	2200      	movs	r2, #0
   2654a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2654c:	2378      	movs	r3, #120	; 0x78
   2654e:	18fb      	adds	r3, r7, r3
   26550:	2200      	movs	r2, #0
   26552:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   26554:	2378      	movs	r3, #120	; 0x78
   26556:	18fb      	adds	r3, r7, r3
   26558:	2200      	movs	r2, #0
   2655a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2655c:	2378      	movs	r3, #120	; 0x78
   2655e:	18fb      	adds	r3, r7, r3
   26560:	2200      	movs	r2, #0
   26562:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   26564:	2378      	movs	r3, #120	; 0x78
   26566:	18fb      	adds	r3, r7, r3
   26568:	2202      	movs	r2, #2
   2656a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2656c:	2378      	movs	r3, #120	; 0x78
   2656e:	18fb      	adds	r3, r7, r3
   26570:	4a35      	ldr	r2, [pc, #212]	; (26648 <system_clock_init+0x288>)
   26572:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   26574:	2378      	movs	r3, #120	; 0x78
   26576:	18fb      	adds	r3, r7, r3
   26578:	2201      	movs	r2, #1
   2657a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2657c:	2378      	movs	r3, #120	; 0x78
   2657e:	18fb      	adds	r3, r7, r3
   26580:	4a32      	ldr	r2, [pc, #200]	; (2664c <system_clock_init+0x28c>)
   26582:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   26584:	2378      	movs	r3, #120	; 0x78
   26586:	18fb      	adds	r3, r7, r3
   26588:	0018      	movs	r0, r3
   2658a:	4b31      	ldr	r3, [pc, #196]	; (26650 <system_clock_init+0x290>)
   2658c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2658e:	2008      	movs	r0, #8
   26590:	4b24      	ldr	r3, [pc, #144]	; (26624 <system_clock_init+0x264>)
   26592:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   26594:	46c0      	nop			; (mov r8, r8)
   26596:	2008      	movs	r0, #8
   26598:	4b2e      	ldr	r3, [pc, #184]	; (26654 <system_clock_init+0x294>)
   2659a:	4798      	blx	r3
   2659c:	0003      	movs	r3, r0
   2659e:	001a      	movs	r2, r3
   265a0:	2301      	movs	r3, #1
   265a2:	4053      	eors	r3, r2
   265a4:	b2db      	uxtb	r3, r3
   265a6:	2b00      	cmp	r3, #0
   265a8:	d1f5      	bne.n	26596 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   265aa:	4919      	ldr	r1, [pc, #100]	; (26610 <system_clock_init+0x250>)
   265ac:	2244      	movs	r2, #68	; 0x44
   265ae:	5c8b      	ldrb	r3, [r1, r2]
   265b0:	2080      	movs	r0, #128	; 0x80
   265b2:	4240      	negs	r0, r0
   265b4:	4303      	orrs	r3, r0
   265b6:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   265b8:	2000      	movs	r0, #0
   265ba:	4b27      	ldr	r3, [pc, #156]	; (26658 <system_clock_init+0x298>)
   265bc:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   265be:	2100      	movs	r1, #0
   265c0:	2000      	movs	r0, #0
   265c2:	4b26      	ldr	r3, [pc, #152]	; (2665c <system_clock_init+0x29c>)
   265c4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   265c6:	2100      	movs	r1, #0
   265c8:	2001      	movs	r0, #1
   265ca:	4b24      	ldr	r3, [pc, #144]	; (2665c <system_clock_init+0x29c>)
   265cc:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   265ce:	2100      	movs	r1, #0
   265d0:	2002      	movs	r0, #2
   265d2:	4b22      	ldr	r3, [pc, #136]	; (2665c <system_clock_init+0x29c>)
   265d4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   265d6:	003b      	movs	r3, r7
   265d8:	0018      	movs	r0, r3
   265da:	4b14      	ldr	r3, [pc, #80]	; (2662c <system_clock_init+0x26c>)
   265dc:	4798      	blx	r3
   265de:	003b      	movs	r3, r7
   265e0:	2208      	movs	r2, #8
   265e2:	701a      	strb	r2, [r3, #0]
   265e4:	003b      	movs	r3, r7
   265e6:	2201      	movs	r2, #1
   265e8:	605a      	str	r2, [r3, #4]
   265ea:	003b      	movs	r3, r7
   265ec:	2200      	movs	r2, #0
   265ee:	721a      	strb	r2, [r3, #8]
   265f0:	003b      	movs	r3, r7
   265f2:	2201      	movs	r2, #1
   265f4:	725a      	strb	r2, [r3, #9]
   265f6:	003b      	movs	r3, r7
   265f8:	0019      	movs	r1, r3
   265fa:	2000      	movs	r0, #0
   265fc:	4b0c      	ldr	r3, [pc, #48]	; (26630 <system_clock_init+0x270>)
   265fe:	4798      	blx	r3
   26600:	2000      	movs	r0, #0
   26602:	4b0c      	ldr	r3, [pc, #48]	; (26634 <system_clock_init+0x274>)
   26604:	4798      	blx	r3
#endif
}
   26606:	46c0      	nop			; (mov r8, r8)
   26608:	46bd      	mov	sp, r7
   2660a:	b026      	add	sp, #152	; 0x98
   2660c:	bd80      	pop	{r7, pc}
   2660e:	46c0      	nop			; (mov r8, r8)
   26610:	40000800 	.word	0x40000800
   26614:	00025f81 	.word	0x00025f81
   26618:	00026389 	.word	0x00026389
   2661c:	00025e91 	.word	0x00025e91
   26620:	000260d5 	.word	0x000260d5
   26624:	00026259 	.word	0x00026259
   26628:	00026705 	.word	0x00026705
   2662c:	00025e4d 	.word	0x00025e4d
   26630:	00026735 	.word	0x00026735
   26634:	00026859 	.word	0x00026859
   26638:	00025e7b 	.word	0x00025e7b
   2663c:	0002698d 	.word	0x0002698d
   26640:	000269d1 	.word	0x000269d1
   26644:	00025f29 	.word	0x00025f29
   26648:	000f4240 	.word	0x000f4240
   2664c:	02dc6c00 	.word	0x02dc6c00
   26650:	0002614d 	.word	0x0002614d
   26654:	00026305 	.word	0x00026305
   26658:	00025eb5 	.word	0x00025eb5
   2665c:	00025ed5 	.word	0x00025ed5

00026660 <system_apb_clock_set_mask>:
{
   26660:	b580      	push	{r7, lr}
   26662:	b082      	sub	sp, #8
   26664:	af00      	add	r7, sp, #0
   26666:	0002      	movs	r2, r0
   26668:	6039      	str	r1, [r7, #0]
   2666a:	1dfb      	adds	r3, r7, #7
   2666c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2666e:	1dfb      	adds	r3, r7, #7
   26670:	781b      	ldrb	r3, [r3, #0]
   26672:	2b01      	cmp	r3, #1
   26674:	d00a      	beq.n	2668c <system_apb_clock_set_mask+0x2c>
   26676:	2b02      	cmp	r3, #2
   26678:	d00f      	beq.n	2669a <system_apb_clock_set_mask+0x3a>
   2667a:	2b00      	cmp	r3, #0
   2667c:	d114      	bne.n	266a8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2667e:	4b0e      	ldr	r3, [pc, #56]	; (266b8 <system_apb_clock_set_mask+0x58>)
   26680:	4a0d      	ldr	r2, [pc, #52]	; (266b8 <system_apb_clock_set_mask+0x58>)
   26682:	6991      	ldr	r1, [r2, #24]
   26684:	683a      	ldr	r2, [r7, #0]
   26686:	430a      	orrs	r2, r1
   26688:	619a      	str	r2, [r3, #24]
			break;
   2668a:	e00f      	b.n	266ac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2668c:	4b0a      	ldr	r3, [pc, #40]	; (266b8 <system_apb_clock_set_mask+0x58>)
   2668e:	4a0a      	ldr	r2, [pc, #40]	; (266b8 <system_apb_clock_set_mask+0x58>)
   26690:	69d1      	ldr	r1, [r2, #28]
   26692:	683a      	ldr	r2, [r7, #0]
   26694:	430a      	orrs	r2, r1
   26696:	61da      	str	r2, [r3, #28]
			break;
   26698:	e008      	b.n	266ac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2669a:	4b07      	ldr	r3, [pc, #28]	; (266b8 <system_apb_clock_set_mask+0x58>)
   2669c:	4a06      	ldr	r2, [pc, #24]	; (266b8 <system_apb_clock_set_mask+0x58>)
   2669e:	6a11      	ldr	r1, [r2, #32]
   266a0:	683a      	ldr	r2, [r7, #0]
   266a2:	430a      	orrs	r2, r1
   266a4:	621a      	str	r2, [r3, #32]
			break;
   266a6:	e001      	b.n	266ac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   266a8:	2317      	movs	r3, #23
   266aa:	e000      	b.n	266ae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   266ac:	2300      	movs	r3, #0
}
   266ae:	0018      	movs	r0, r3
   266b0:	46bd      	mov	sp, r7
   266b2:	b002      	add	sp, #8
   266b4:	bd80      	pop	{r7, pc}
   266b6:	46c0      	nop			; (mov r8, r8)
   266b8:	40000400 	.word	0x40000400

000266bc <system_interrupt_enter_critical_section>:
{
   266bc:	b580      	push	{r7, lr}
   266be:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   266c0:	4b02      	ldr	r3, [pc, #8]	; (266cc <system_interrupt_enter_critical_section+0x10>)
   266c2:	4798      	blx	r3
}
   266c4:	46c0      	nop			; (mov r8, r8)
   266c6:	46bd      	mov	sp, r7
   266c8:	bd80      	pop	{r7, pc}
   266ca:	46c0      	nop			; (mov r8, r8)
   266cc:	00022af9 	.word	0x00022af9

000266d0 <system_interrupt_leave_critical_section>:
{
   266d0:	b580      	push	{r7, lr}
   266d2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   266d4:	4b02      	ldr	r3, [pc, #8]	; (266e0 <system_interrupt_leave_critical_section+0x10>)
   266d6:	4798      	blx	r3
}
   266d8:	46c0      	nop			; (mov r8, r8)
   266da:	46bd      	mov	sp, r7
   266dc:	bd80      	pop	{r7, pc}
   266de:	46c0      	nop			; (mov r8, r8)
   266e0:	00022b4d 	.word	0x00022b4d

000266e4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   266e4:	b580      	push	{r7, lr}
   266e6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   266e8:	4b05      	ldr	r3, [pc, #20]	; (26700 <system_gclk_is_syncing+0x1c>)
   266ea:	785b      	ldrb	r3, [r3, #1]
   266ec:	b2db      	uxtb	r3, r3
   266ee:	b25b      	sxtb	r3, r3
   266f0:	2b00      	cmp	r3, #0
   266f2:	da01      	bge.n	266f8 <system_gclk_is_syncing+0x14>
		return true;
   266f4:	2301      	movs	r3, #1
   266f6:	e000      	b.n	266fa <system_gclk_is_syncing+0x16>
	}

	return false;
   266f8:	2300      	movs	r3, #0
}
   266fa:	0018      	movs	r0, r3
   266fc:	46bd      	mov	sp, r7
   266fe:	bd80      	pop	{r7, pc}
   26700:	40000c00 	.word	0x40000c00

00026704 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   26704:	b580      	push	{r7, lr}
   26706:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   26708:	2108      	movs	r1, #8
   2670a:	2000      	movs	r0, #0
   2670c:	4b07      	ldr	r3, [pc, #28]	; (2672c <system_gclk_init+0x28>)
   2670e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   26710:	4b07      	ldr	r3, [pc, #28]	; (26730 <system_gclk_init+0x2c>)
   26712:	2201      	movs	r2, #1
   26714:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   26716:	46c0      	nop			; (mov r8, r8)
   26718:	4b05      	ldr	r3, [pc, #20]	; (26730 <system_gclk_init+0x2c>)
   2671a:	781b      	ldrb	r3, [r3, #0]
   2671c:	b2db      	uxtb	r3, r3
   2671e:	001a      	movs	r2, r3
   26720:	2301      	movs	r3, #1
   26722:	4013      	ands	r3, r2
   26724:	d1f8      	bne.n	26718 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   26726:	46c0      	nop			; (mov r8, r8)
   26728:	46bd      	mov	sp, r7
   2672a:	bd80      	pop	{r7, pc}
   2672c:	00026661 	.word	0x00026661
   26730:	40000c00 	.word	0x40000c00

00026734 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   26734:	b580      	push	{r7, lr}
   26736:	b086      	sub	sp, #24
   26738:	af00      	add	r7, sp, #0
   2673a:	0002      	movs	r2, r0
   2673c:	6039      	str	r1, [r7, #0]
   2673e:	1dfb      	adds	r3, r7, #7
   26740:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   26742:	1dfb      	adds	r3, r7, #7
   26744:	781b      	ldrb	r3, [r3, #0]
   26746:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   26748:	1dfb      	adds	r3, r7, #7
   2674a:	781b      	ldrb	r3, [r3, #0]
   2674c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2674e:	683b      	ldr	r3, [r7, #0]
   26750:	781b      	ldrb	r3, [r3, #0]
   26752:	021b      	lsls	r3, r3, #8
   26754:	001a      	movs	r2, r3
   26756:	697b      	ldr	r3, [r7, #20]
   26758:	4313      	orrs	r3, r2
   2675a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2675c:	683b      	ldr	r3, [r7, #0]
   2675e:	785b      	ldrb	r3, [r3, #1]
   26760:	2b00      	cmp	r3, #0
   26762:	d004      	beq.n	2676e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   26764:	697b      	ldr	r3, [r7, #20]
   26766:	2280      	movs	r2, #128	; 0x80
   26768:	02d2      	lsls	r2, r2, #11
   2676a:	4313      	orrs	r3, r2
   2676c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2676e:	683b      	ldr	r3, [r7, #0]
   26770:	7a5b      	ldrb	r3, [r3, #9]
   26772:	2b00      	cmp	r3, #0
   26774:	d004      	beq.n	26780 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   26776:	697b      	ldr	r3, [r7, #20]
   26778:	2280      	movs	r2, #128	; 0x80
   2677a:	0312      	lsls	r2, r2, #12
   2677c:	4313      	orrs	r3, r2
   2677e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   26780:	683b      	ldr	r3, [r7, #0]
   26782:	685b      	ldr	r3, [r3, #4]
   26784:	2b01      	cmp	r3, #1
   26786:	d92c      	bls.n	267e2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   26788:	683b      	ldr	r3, [r7, #0]
   2678a:	685a      	ldr	r2, [r3, #4]
   2678c:	683b      	ldr	r3, [r7, #0]
   2678e:	685b      	ldr	r3, [r3, #4]
   26790:	3b01      	subs	r3, #1
   26792:	4013      	ands	r3, r2
   26794:	d11a      	bne.n	267cc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   26796:	2300      	movs	r3, #0
   26798:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2679a:	2302      	movs	r3, #2
   2679c:	60bb      	str	r3, [r7, #8]
   2679e:	e005      	b.n	267ac <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   267a0:	68fb      	ldr	r3, [r7, #12]
   267a2:	3301      	adds	r3, #1
   267a4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   267a6:	68bb      	ldr	r3, [r7, #8]
   267a8:	005b      	lsls	r3, r3, #1
   267aa:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   267ac:	683b      	ldr	r3, [r7, #0]
   267ae:	685a      	ldr	r2, [r3, #4]
   267b0:	68bb      	ldr	r3, [r7, #8]
   267b2:	429a      	cmp	r2, r3
   267b4:	d8f4      	bhi.n	267a0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   267b6:	68fb      	ldr	r3, [r7, #12]
   267b8:	021b      	lsls	r3, r3, #8
   267ba:	693a      	ldr	r2, [r7, #16]
   267bc:	4313      	orrs	r3, r2
   267be:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   267c0:	697b      	ldr	r3, [r7, #20]
   267c2:	2280      	movs	r2, #128	; 0x80
   267c4:	0352      	lsls	r2, r2, #13
   267c6:	4313      	orrs	r3, r2
   267c8:	617b      	str	r3, [r7, #20]
   267ca:	e00a      	b.n	267e2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   267cc:	683b      	ldr	r3, [r7, #0]
   267ce:	685b      	ldr	r3, [r3, #4]
   267d0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   267d2:	693a      	ldr	r2, [r7, #16]
   267d4:	4313      	orrs	r3, r2
   267d6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   267d8:	697b      	ldr	r3, [r7, #20]
   267da:	2280      	movs	r2, #128	; 0x80
   267dc:	0292      	lsls	r2, r2, #10
   267de:	4313      	orrs	r3, r2
   267e0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   267e2:	683b      	ldr	r3, [r7, #0]
   267e4:	7a1b      	ldrb	r3, [r3, #8]
   267e6:	2b00      	cmp	r3, #0
   267e8:	d004      	beq.n	267f4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   267ea:	697b      	ldr	r3, [r7, #20]
   267ec:	2280      	movs	r2, #128	; 0x80
   267ee:	0392      	lsls	r2, r2, #14
   267f0:	4313      	orrs	r3, r2
   267f2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   267f4:	46c0      	nop			; (mov r8, r8)
   267f6:	4b13      	ldr	r3, [pc, #76]	; (26844 <system_gclk_gen_set_config+0x110>)
   267f8:	4798      	blx	r3
   267fa:	1e03      	subs	r3, r0, #0
   267fc:	d1fb      	bne.n	267f6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   267fe:	4b12      	ldr	r3, [pc, #72]	; (26848 <system_gclk_gen_set_config+0x114>)
   26800:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   26802:	4a12      	ldr	r2, [pc, #72]	; (2684c <system_gclk_gen_set_config+0x118>)
   26804:	1dfb      	adds	r3, r7, #7
   26806:	781b      	ldrb	r3, [r3, #0]
   26808:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2680a:	46c0      	nop			; (mov r8, r8)
   2680c:	4b0d      	ldr	r3, [pc, #52]	; (26844 <system_gclk_gen_set_config+0x110>)
   2680e:	4798      	blx	r3
   26810:	1e03      	subs	r3, r0, #0
   26812:	d1fb      	bne.n	2680c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   26814:	4b0e      	ldr	r3, [pc, #56]	; (26850 <system_gclk_gen_set_config+0x11c>)
   26816:	693a      	ldr	r2, [r7, #16]
   26818:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2681a:	46c0      	nop			; (mov r8, r8)
   2681c:	4b09      	ldr	r3, [pc, #36]	; (26844 <system_gclk_gen_set_config+0x110>)
   2681e:	4798      	blx	r3
   26820:	1e03      	subs	r3, r0, #0
   26822:	d1fb      	bne.n	2681c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   26824:	4b0a      	ldr	r3, [pc, #40]	; (26850 <system_gclk_gen_set_config+0x11c>)
   26826:	4a0a      	ldr	r2, [pc, #40]	; (26850 <system_gclk_gen_set_config+0x11c>)
   26828:	6851      	ldr	r1, [r2, #4]
   2682a:	2280      	movs	r2, #128	; 0x80
   2682c:	0252      	lsls	r2, r2, #9
   2682e:	4011      	ands	r1, r2
   26830:	697a      	ldr	r2, [r7, #20]
   26832:	430a      	orrs	r2, r1
   26834:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   26836:	4b07      	ldr	r3, [pc, #28]	; (26854 <system_gclk_gen_set_config+0x120>)
   26838:	4798      	blx	r3
}
   2683a:	46c0      	nop			; (mov r8, r8)
   2683c:	46bd      	mov	sp, r7
   2683e:	b006      	add	sp, #24
   26840:	bd80      	pop	{r7, pc}
   26842:	46c0      	nop			; (mov r8, r8)
   26844:	000266e5 	.word	0x000266e5
   26848:	000266bd 	.word	0x000266bd
   2684c:	40000c08 	.word	0x40000c08
   26850:	40000c00 	.word	0x40000c00
   26854:	000266d1 	.word	0x000266d1

00026858 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   26858:	b580      	push	{r7, lr}
   2685a:	b082      	sub	sp, #8
   2685c:	af00      	add	r7, sp, #0
   2685e:	0002      	movs	r2, r0
   26860:	1dfb      	adds	r3, r7, #7
   26862:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   26864:	46c0      	nop			; (mov r8, r8)
   26866:	4b0e      	ldr	r3, [pc, #56]	; (268a0 <system_gclk_gen_enable+0x48>)
   26868:	4798      	blx	r3
   2686a:	1e03      	subs	r3, r0, #0
   2686c:	d1fb      	bne.n	26866 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2686e:	4b0d      	ldr	r3, [pc, #52]	; (268a4 <system_gclk_gen_enable+0x4c>)
   26870:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   26872:	4a0d      	ldr	r2, [pc, #52]	; (268a8 <system_gclk_gen_enable+0x50>)
   26874:	1dfb      	adds	r3, r7, #7
   26876:	781b      	ldrb	r3, [r3, #0]
   26878:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2687a:	46c0      	nop			; (mov r8, r8)
   2687c:	4b08      	ldr	r3, [pc, #32]	; (268a0 <system_gclk_gen_enable+0x48>)
   2687e:	4798      	blx	r3
   26880:	1e03      	subs	r3, r0, #0
   26882:	d1fb      	bne.n	2687c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   26884:	4b09      	ldr	r3, [pc, #36]	; (268ac <system_gclk_gen_enable+0x54>)
   26886:	4a09      	ldr	r2, [pc, #36]	; (268ac <system_gclk_gen_enable+0x54>)
   26888:	6852      	ldr	r2, [r2, #4]
   2688a:	2180      	movs	r1, #128	; 0x80
   2688c:	0249      	lsls	r1, r1, #9
   2688e:	430a      	orrs	r2, r1
   26890:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   26892:	4b07      	ldr	r3, [pc, #28]	; (268b0 <system_gclk_gen_enable+0x58>)
   26894:	4798      	blx	r3
}
   26896:	46c0      	nop			; (mov r8, r8)
   26898:	46bd      	mov	sp, r7
   2689a:	b002      	add	sp, #8
   2689c:	bd80      	pop	{r7, pc}
   2689e:	46c0      	nop			; (mov r8, r8)
   268a0:	000266e5 	.word	0x000266e5
   268a4:	000266bd 	.word	0x000266bd
   268a8:	40000c04 	.word	0x40000c04
   268ac:	40000c00 	.word	0x40000c00
   268b0:	000266d1 	.word	0x000266d1

000268b4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   268b4:	b580      	push	{r7, lr}
   268b6:	b086      	sub	sp, #24
   268b8:	af00      	add	r7, sp, #0
   268ba:	0002      	movs	r2, r0
   268bc:	1dfb      	adds	r3, r7, #7
   268be:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   268c0:	46c0      	nop			; (mov r8, r8)
   268c2:	4b2a      	ldr	r3, [pc, #168]	; (2696c <system_gclk_gen_get_hz+0xb8>)
   268c4:	4798      	blx	r3
   268c6:	1e03      	subs	r3, r0, #0
   268c8:	d1fb      	bne.n	268c2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   268ca:	4b29      	ldr	r3, [pc, #164]	; (26970 <system_gclk_gen_get_hz+0xbc>)
   268cc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   268ce:	4a29      	ldr	r2, [pc, #164]	; (26974 <system_gclk_gen_get_hz+0xc0>)
   268d0:	1dfb      	adds	r3, r7, #7
   268d2:	781b      	ldrb	r3, [r3, #0]
   268d4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   268d6:	46c0      	nop			; (mov r8, r8)
   268d8:	4b24      	ldr	r3, [pc, #144]	; (2696c <system_gclk_gen_get_hz+0xb8>)
   268da:	4798      	blx	r3
   268dc:	1e03      	subs	r3, r0, #0
   268de:	d1fb      	bne.n	268d8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   268e0:	4b25      	ldr	r3, [pc, #148]	; (26978 <system_gclk_gen_get_hz+0xc4>)
   268e2:	685b      	ldr	r3, [r3, #4]
   268e4:	04db      	lsls	r3, r3, #19
   268e6:	0edb      	lsrs	r3, r3, #27
   268e8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   268ea:	0018      	movs	r0, r3
   268ec:	4b23      	ldr	r3, [pc, #140]	; (2697c <system_gclk_gen_get_hz+0xc8>)
   268ee:	4798      	blx	r3
   268f0:	0003      	movs	r3, r0
   268f2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   268f4:	4a1f      	ldr	r2, [pc, #124]	; (26974 <system_gclk_gen_get_hz+0xc0>)
   268f6:	1dfb      	adds	r3, r7, #7
   268f8:	781b      	ldrb	r3, [r3, #0]
   268fa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   268fc:	4b1e      	ldr	r3, [pc, #120]	; (26978 <system_gclk_gen_get_hz+0xc4>)
   268fe:	685b      	ldr	r3, [r3, #4]
   26900:	02db      	lsls	r3, r3, #11
   26902:	0fdb      	lsrs	r3, r3, #31
   26904:	b2da      	uxtb	r2, r3
   26906:	2313      	movs	r3, #19
   26908:	18fb      	adds	r3, r7, r3
   2690a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2690c:	4a1c      	ldr	r2, [pc, #112]	; (26980 <system_gclk_gen_get_hz+0xcc>)
   2690e:	1dfb      	adds	r3, r7, #7
   26910:	781b      	ldrb	r3, [r3, #0]
   26912:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   26914:	46c0      	nop			; (mov r8, r8)
   26916:	4b15      	ldr	r3, [pc, #84]	; (2696c <system_gclk_gen_get_hz+0xb8>)
   26918:	4798      	blx	r3
   2691a:	1e03      	subs	r3, r0, #0
   2691c:	d1fb      	bne.n	26916 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2691e:	4b16      	ldr	r3, [pc, #88]	; (26978 <system_gclk_gen_get_hz+0xc4>)
   26920:	689b      	ldr	r3, [r3, #8]
   26922:	021b      	lsls	r3, r3, #8
   26924:	0c1b      	lsrs	r3, r3, #16
   26926:	b29b      	uxth	r3, r3
   26928:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2692a:	4b16      	ldr	r3, [pc, #88]	; (26984 <system_gclk_gen_get_hz+0xd0>)
   2692c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2692e:	2313      	movs	r3, #19
   26930:	18fb      	adds	r3, r7, r3
   26932:	781b      	ldrb	r3, [r3, #0]
   26934:	2b00      	cmp	r3, #0
   26936:	d109      	bne.n	2694c <system_gclk_gen_get_hz+0x98>
   26938:	68fb      	ldr	r3, [r7, #12]
   2693a:	2b01      	cmp	r3, #1
   2693c:	d906      	bls.n	2694c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2693e:	4b12      	ldr	r3, [pc, #72]	; (26988 <system_gclk_gen_get_hz+0xd4>)
   26940:	68f9      	ldr	r1, [r7, #12]
   26942:	6978      	ldr	r0, [r7, #20]
   26944:	4798      	blx	r3
   26946:	0003      	movs	r3, r0
   26948:	617b      	str	r3, [r7, #20]
   2694a:	e00a      	b.n	26962 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2694c:	2313      	movs	r3, #19
   2694e:	18fb      	adds	r3, r7, r3
   26950:	781b      	ldrb	r3, [r3, #0]
   26952:	2b00      	cmp	r3, #0
   26954:	d005      	beq.n	26962 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   26956:	68fb      	ldr	r3, [r7, #12]
   26958:	3301      	adds	r3, #1
   2695a:	697a      	ldr	r2, [r7, #20]
   2695c:	40da      	lsrs	r2, r3
   2695e:	0013      	movs	r3, r2
   26960:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   26962:	697b      	ldr	r3, [r7, #20]
}
   26964:	0018      	movs	r0, r3
   26966:	46bd      	mov	sp, r7
   26968:	b006      	add	sp, #24
   2696a:	bd80      	pop	{r7, pc}
   2696c:	000266e5 	.word	0x000266e5
   26970:	000266bd 	.word	0x000266bd
   26974:	40000c04 	.word	0x40000c04
   26978:	40000c00 	.word	0x40000c00
   2697c:	00026015 	.word	0x00026015
   26980:	40000c08 	.word	0x40000c08
   26984:	000266d1 	.word	0x000266d1
   26988:	0002fded 	.word	0x0002fded

0002698c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2698c:	b580      	push	{r7, lr}
   2698e:	b084      	sub	sp, #16
   26990:	af00      	add	r7, sp, #0
   26992:	0002      	movs	r2, r0
   26994:	6039      	str	r1, [r7, #0]
   26996:	1dfb      	adds	r3, r7, #7
   26998:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2699a:	1dfb      	adds	r3, r7, #7
   2699c:	781b      	ldrb	r3, [r3, #0]
   2699e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   269a0:	683b      	ldr	r3, [r7, #0]
   269a2:	781b      	ldrb	r3, [r3, #0]
   269a4:	021b      	lsls	r3, r3, #8
   269a6:	001a      	movs	r2, r3
   269a8:	68fb      	ldr	r3, [r7, #12]
   269aa:	4313      	orrs	r3, r2
   269ac:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   269ae:	1dfb      	adds	r3, r7, #7
   269b0:	781b      	ldrb	r3, [r3, #0]
   269b2:	0018      	movs	r0, r3
   269b4:	4b04      	ldr	r3, [pc, #16]	; (269c8 <system_gclk_chan_set_config+0x3c>)
   269b6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   269b8:	4b04      	ldr	r3, [pc, #16]	; (269cc <system_gclk_chan_set_config+0x40>)
   269ba:	68fa      	ldr	r2, [r7, #12]
   269bc:	b292      	uxth	r2, r2
   269be:	805a      	strh	r2, [r3, #2]
}
   269c0:	46c0      	nop			; (mov r8, r8)
   269c2:	46bd      	mov	sp, r7
   269c4:	b004      	add	sp, #16
   269c6:	bd80      	pop	{r7, pc}
   269c8:	00026a19 	.word	0x00026a19
   269cc:	40000c00 	.word	0x40000c00

000269d0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   269d0:	b580      	push	{r7, lr}
   269d2:	b082      	sub	sp, #8
   269d4:	af00      	add	r7, sp, #0
   269d6:	0002      	movs	r2, r0
   269d8:	1dfb      	adds	r3, r7, #7
   269da:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   269dc:	4b0a      	ldr	r3, [pc, #40]	; (26a08 <system_gclk_chan_enable+0x38>)
   269de:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   269e0:	4a0a      	ldr	r2, [pc, #40]	; (26a0c <system_gclk_chan_enable+0x3c>)
   269e2:	1dfb      	adds	r3, r7, #7
   269e4:	781b      	ldrb	r3, [r3, #0]
   269e6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   269e8:	4909      	ldr	r1, [pc, #36]	; (26a10 <system_gclk_chan_enable+0x40>)
   269ea:	4b09      	ldr	r3, [pc, #36]	; (26a10 <system_gclk_chan_enable+0x40>)
   269ec:	885b      	ldrh	r3, [r3, #2]
   269ee:	b29b      	uxth	r3, r3
   269f0:	2280      	movs	r2, #128	; 0x80
   269f2:	01d2      	lsls	r2, r2, #7
   269f4:	4313      	orrs	r3, r2
   269f6:	b29b      	uxth	r3, r3
   269f8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   269fa:	4b06      	ldr	r3, [pc, #24]	; (26a14 <system_gclk_chan_enable+0x44>)
   269fc:	4798      	blx	r3
}
   269fe:	46c0      	nop			; (mov r8, r8)
   26a00:	46bd      	mov	sp, r7
   26a02:	b002      	add	sp, #8
   26a04:	bd80      	pop	{r7, pc}
   26a06:	46c0      	nop			; (mov r8, r8)
   26a08:	000266bd 	.word	0x000266bd
   26a0c:	40000c02 	.word	0x40000c02
   26a10:	40000c00 	.word	0x40000c00
   26a14:	000266d1 	.word	0x000266d1

00026a18 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   26a18:	b580      	push	{r7, lr}
   26a1a:	b084      	sub	sp, #16
   26a1c:	af00      	add	r7, sp, #0
   26a1e:	0002      	movs	r2, r0
   26a20:	1dfb      	adds	r3, r7, #7
   26a22:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   26a24:	4b1c      	ldr	r3, [pc, #112]	; (26a98 <system_gclk_chan_disable+0x80>)
   26a26:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   26a28:	4a1c      	ldr	r2, [pc, #112]	; (26a9c <system_gclk_chan_disable+0x84>)
   26a2a:	1dfb      	adds	r3, r7, #7
   26a2c:	781b      	ldrb	r3, [r3, #0]
   26a2e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   26a30:	4b1b      	ldr	r3, [pc, #108]	; (26aa0 <system_gclk_chan_disable+0x88>)
   26a32:	885b      	ldrh	r3, [r3, #2]
   26a34:	051b      	lsls	r3, r3, #20
   26a36:	0f1b      	lsrs	r3, r3, #28
   26a38:	b2db      	uxtb	r3, r3
   26a3a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   26a3c:	4a18      	ldr	r2, [pc, #96]	; (26aa0 <system_gclk_chan_disable+0x88>)
   26a3e:	8853      	ldrh	r3, [r2, #2]
   26a40:	4918      	ldr	r1, [pc, #96]	; (26aa4 <system_gclk_chan_disable+0x8c>)
   26a42:	400b      	ands	r3, r1
   26a44:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   26a46:	4a16      	ldr	r2, [pc, #88]	; (26aa0 <system_gclk_chan_disable+0x88>)
   26a48:	4b15      	ldr	r3, [pc, #84]	; (26aa0 <system_gclk_chan_disable+0x88>)
   26a4a:	885b      	ldrh	r3, [r3, #2]
   26a4c:	b29b      	uxth	r3, r3
   26a4e:	4916      	ldr	r1, [pc, #88]	; (26aa8 <system_gclk_chan_disable+0x90>)
   26a50:	400b      	ands	r3, r1
   26a52:	b29b      	uxth	r3, r3
   26a54:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   26a56:	46c0      	nop			; (mov r8, r8)
   26a58:	4b11      	ldr	r3, [pc, #68]	; (26aa0 <system_gclk_chan_disable+0x88>)
   26a5a:	885b      	ldrh	r3, [r3, #2]
   26a5c:	b29b      	uxth	r3, r3
   26a5e:	001a      	movs	r2, r3
   26a60:	2380      	movs	r3, #128	; 0x80
   26a62:	01db      	lsls	r3, r3, #7
   26a64:	4013      	ands	r3, r2
   26a66:	d1f7      	bne.n	26a58 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   26a68:	4a0d      	ldr	r2, [pc, #52]	; (26aa0 <system_gclk_chan_disable+0x88>)
   26a6a:	68fb      	ldr	r3, [r7, #12]
   26a6c:	b2db      	uxtb	r3, r3
   26a6e:	1c19      	adds	r1, r3, #0
   26a70:	230f      	movs	r3, #15
   26a72:	400b      	ands	r3, r1
   26a74:	b2d9      	uxtb	r1, r3
   26a76:	8853      	ldrh	r3, [r2, #2]
   26a78:	1c08      	adds	r0, r1, #0
   26a7a:	210f      	movs	r1, #15
   26a7c:	4001      	ands	r1, r0
   26a7e:	0208      	lsls	r0, r1, #8
   26a80:	4908      	ldr	r1, [pc, #32]	; (26aa4 <system_gclk_chan_disable+0x8c>)
   26a82:	400b      	ands	r3, r1
   26a84:	1c19      	adds	r1, r3, #0
   26a86:	1c03      	adds	r3, r0, #0
   26a88:	430b      	orrs	r3, r1
   26a8a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   26a8c:	4b07      	ldr	r3, [pc, #28]	; (26aac <system_gclk_chan_disable+0x94>)
   26a8e:	4798      	blx	r3
}
   26a90:	46c0      	nop			; (mov r8, r8)
   26a92:	46bd      	mov	sp, r7
   26a94:	b004      	add	sp, #16
   26a96:	bd80      	pop	{r7, pc}
   26a98:	000266bd 	.word	0x000266bd
   26a9c:	40000c02 	.word	0x40000c02
   26aa0:	40000c00 	.word	0x40000c00
   26aa4:	fffff0ff 	.word	0xfffff0ff
   26aa8:	ffffbfff 	.word	0xffffbfff
   26aac:	000266d1 	.word	0x000266d1

00026ab0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   26ab0:	b580      	push	{r7, lr}
   26ab2:	b084      	sub	sp, #16
   26ab4:	af00      	add	r7, sp, #0
   26ab6:	0002      	movs	r2, r0
   26ab8:	1dfb      	adds	r3, r7, #7
   26aba:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   26abc:	4b0d      	ldr	r3, [pc, #52]	; (26af4 <system_gclk_chan_get_hz+0x44>)
   26abe:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   26ac0:	4a0d      	ldr	r2, [pc, #52]	; (26af8 <system_gclk_chan_get_hz+0x48>)
   26ac2:	1dfb      	adds	r3, r7, #7
   26ac4:	781b      	ldrb	r3, [r3, #0]
   26ac6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   26ac8:	4b0c      	ldr	r3, [pc, #48]	; (26afc <system_gclk_chan_get_hz+0x4c>)
   26aca:	885b      	ldrh	r3, [r3, #2]
   26acc:	051b      	lsls	r3, r3, #20
   26ace:	0f1b      	lsrs	r3, r3, #28
   26ad0:	b2da      	uxtb	r2, r3
   26ad2:	230f      	movs	r3, #15
   26ad4:	18fb      	adds	r3, r7, r3
   26ad6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   26ad8:	4b09      	ldr	r3, [pc, #36]	; (26b00 <system_gclk_chan_get_hz+0x50>)
   26ada:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   26adc:	230f      	movs	r3, #15
   26ade:	18fb      	adds	r3, r7, r3
   26ae0:	781b      	ldrb	r3, [r3, #0]
   26ae2:	0018      	movs	r0, r3
   26ae4:	4b07      	ldr	r3, [pc, #28]	; (26b04 <system_gclk_chan_get_hz+0x54>)
   26ae6:	4798      	blx	r3
   26ae8:	0003      	movs	r3, r0
}
   26aea:	0018      	movs	r0, r3
   26aec:	46bd      	mov	sp, r7
   26aee:	b004      	add	sp, #16
   26af0:	bd80      	pop	{r7, pc}
   26af2:	46c0      	nop			; (mov r8, r8)
   26af4:	000266bd 	.word	0x000266bd
   26af8:	40000c02 	.word	0x40000c02
   26afc:	40000c00 	.word	0x40000c00
   26b00:	000266d1 	.word	0x000266d1
   26b04:	000268b5 	.word	0x000268b5

00026b08 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   26b08:	b580      	push	{r7, lr}
   26b0a:	b084      	sub	sp, #16
   26b0c:	af00      	add	r7, sp, #0
   26b0e:	0002      	movs	r2, r0
   26b10:	1dfb      	adds	r3, r7, #7
   26b12:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   26b14:	230f      	movs	r3, #15
   26b16:	18fb      	adds	r3, r7, r3
   26b18:	2200      	movs	r2, #0
   26b1a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   26b1c:	1dfb      	adds	r3, r7, #7
   26b1e:	781b      	ldrb	r3, [r3, #0]
   26b20:	2b7f      	cmp	r3, #127	; 0x7f
   26b22:	d80b      	bhi.n	26b3c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   26b24:	4a13      	ldr	r2, [pc, #76]	; (26b74 <system_interrupt_clear_pending+0x6c>)
   26b26:	1dfb      	adds	r3, r7, #7
   26b28:	781b      	ldrb	r3, [r3, #0]
   26b2a:	b25b      	sxtb	r3, r3
   26b2c:	2101      	movs	r1, #1
   26b2e:	4099      	lsls	r1, r3
   26b30:	000b      	movs	r3, r1
   26b32:	0019      	movs	r1, r3
   26b34:	23c0      	movs	r3, #192	; 0xc0
   26b36:	005b      	lsls	r3, r3, #1
   26b38:	50d1      	str	r1, [r2, r3]
   26b3a:	e014      	b.n	26b66 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   26b3c:	1dfb      	adds	r3, r7, #7
   26b3e:	781b      	ldrb	r3, [r3, #0]
   26b40:	b25b      	sxtb	r3, r3
   26b42:	330e      	adds	r3, #14
   26b44:	d101      	bne.n	26b4a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   26b46:	2317      	movs	r3, #23
   26b48:	e010      	b.n	26b6c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   26b4a:	1dfb      	adds	r3, r7, #7
   26b4c:	781b      	ldrb	r3, [r3, #0]
   26b4e:	b25b      	sxtb	r3, r3
   26b50:	3301      	adds	r3, #1
   26b52:	d104      	bne.n	26b5e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   26b54:	4b08      	ldr	r3, [pc, #32]	; (26b78 <system_interrupt_clear_pending+0x70>)
   26b56:	2280      	movs	r2, #128	; 0x80
   26b58:	0492      	lsls	r2, r2, #18
   26b5a:	605a      	str	r2, [r3, #4]
   26b5c:	e003      	b.n	26b66 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   26b5e:	230f      	movs	r3, #15
   26b60:	18fb      	adds	r3, r7, r3
   26b62:	2217      	movs	r2, #23
   26b64:	701a      	strb	r2, [r3, #0]
	}

	return status;
   26b66:	230f      	movs	r3, #15
   26b68:	18fb      	adds	r3, r7, r3
   26b6a:	781b      	ldrb	r3, [r3, #0]
}
   26b6c:	0018      	movs	r0, r3
   26b6e:	46bd      	mov	sp, r7
   26b70:	b004      	add	sp, #16
   26b72:	bd80      	pop	{r7, pc}
   26b74:	e000e100 	.word	0xe000e100
   26b78:	e000ed00 	.word	0xe000ed00

00026b7c <system_pinmux_get_group_from_gpio_pin>:
{
   26b7c:	b580      	push	{r7, lr}
   26b7e:	b084      	sub	sp, #16
   26b80:	af00      	add	r7, sp, #0
   26b82:	0002      	movs	r2, r0
   26b84:	1dfb      	adds	r3, r7, #7
   26b86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26b88:	230f      	movs	r3, #15
   26b8a:	18fb      	adds	r3, r7, r3
   26b8c:	1dfa      	adds	r2, r7, #7
   26b8e:	7812      	ldrb	r2, [r2, #0]
   26b90:	09d2      	lsrs	r2, r2, #7
   26b92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26b94:	230e      	movs	r3, #14
   26b96:	18fb      	adds	r3, r7, r3
   26b98:	1dfa      	adds	r2, r7, #7
   26b9a:	7812      	ldrb	r2, [r2, #0]
   26b9c:	0952      	lsrs	r2, r2, #5
   26b9e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26ba0:	4b0d      	ldr	r3, [pc, #52]	; (26bd8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26ba2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26ba4:	230f      	movs	r3, #15
   26ba6:	18fb      	adds	r3, r7, r3
   26ba8:	781b      	ldrb	r3, [r3, #0]
   26baa:	2b00      	cmp	r3, #0
   26bac:	d10f      	bne.n	26bce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26bae:	230f      	movs	r3, #15
   26bb0:	18fb      	adds	r3, r7, r3
   26bb2:	781b      	ldrb	r3, [r3, #0]
   26bb4:	009b      	lsls	r3, r3, #2
   26bb6:	2210      	movs	r2, #16
   26bb8:	4694      	mov	ip, r2
   26bba:	44bc      	add	ip, r7
   26bbc:	4463      	add	r3, ip
   26bbe:	3b08      	subs	r3, #8
   26bc0:	681a      	ldr	r2, [r3, #0]
   26bc2:	230e      	movs	r3, #14
   26bc4:	18fb      	adds	r3, r7, r3
   26bc6:	781b      	ldrb	r3, [r3, #0]
   26bc8:	01db      	lsls	r3, r3, #7
   26bca:	18d3      	adds	r3, r2, r3
   26bcc:	e000      	b.n	26bd0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26bce:	2300      	movs	r3, #0
}
   26bd0:	0018      	movs	r0, r3
   26bd2:	46bd      	mov	sp, r7
   26bd4:	b004      	add	sp, #16
   26bd6:	bd80      	pop	{r7, pc}
   26bd8:	41004400 	.word	0x41004400

00026bdc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   26bdc:	b580      	push	{r7, lr}
   26bde:	b088      	sub	sp, #32
   26be0:	af00      	add	r7, sp, #0
   26be2:	60f8      	str	r0, [r7, #12]
   26be4:	60b9      	str	r1, [r7, #8]
   26be6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   26be8:	2300      	movs	r3, #0
   26bea:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   26bec:	687b      	ldr	r3, [r7, #4]
   26bee:	78db      	ldrb	r3, [r3, #3]
   26bf0:	2201      	movs	r2, #1
   26bf2:	4053      	eors	r3, r2
   26bf4:	b2db      	uxtb	r3, r3
   26bf6:	2b00      	cmp	r3, #0
   26bf8:	d035      	beq.n	26c66 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   26bfa:	687b      	ldr	r3, [r7, #4]
   26bfc:	781b      	ldrb	r3, [r3, #0]
   26bfe:	2b80      	cmp	r3, #128	; 0x80
   26c00:	d00b      	beq.n	26c1a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   26c02:	69fb      	ldr	r3, [r7, #28]
   26c04:	2280      	movs	r2, #128	; 0x80
   26c06:	0252      	lsls	r2, r2, #9
   26c08:	4313      	orrs	r3, r2
   26c0a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   26c0c:	687b      	ldr	r3, [r7, #4]
   26c0e:	781b      	ldrb	r3, [r3, #0]
   26c10:	061b      	lsls	r3, r3, #24
   26c12:	001a      	movs	r2, r3
   26c14:	69fb      	ldr	r3, [r7, #28]
   26c16:	4313      	orrs	r3, r2
   26c18:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   26c1a:	687b      	ldr	r3, [r7, #4]
   26c1c:	785b      	ldrb	r3, [r3, #1]
   26c1e:	2b00      	cmp	r3, #0
   26c20:	d003      	beq.n	26c2a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   26c22:	687b      	ldr	r3, [r7, #4]
   26c24:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   26c26:	2b02      	cmp	r3, #2
   26c28:	d110      	bne.n	26c4c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   26c2a:	69fb      	ldr	r3, [r7, #28]
   26c2c:	2280      	movs	r2, #128	; 0x80
   26c2e:	0292      	lsls	r2, r2, #10
   26c30:	4313      	orrs	r3, r2
   26c32:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   26c34:	687b      	ldr	r3, [r7, #4]
   26c36:	789b      	ldrb	r3, [r3, #2]
   26c38:	2b00      	cmp	r3, #0
   26c3a:	d004      	beq.n	26c46 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   26c3c:	69fb      	ldr	r3, [r7, #28]
   26c3e:	2280      	movs	r2, #128	; 0x80
   26c40:	02d2      	lsls	r2, r2, #11
   26c42:	4313      	orrs	r3, r2
   26c44:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   26c46:	68fb      	ldr	r3, [r7, #12]
   26c48:	68ba      	ldr	r2, [r7, #8]
   26c4a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   26c4c:	687b      	ldr	r3, [r7, #4]
   26c4e:	785b      	ldrb	r3, [r3, #1]
   26c50:	2b01      	cmp	r3, #1
   26c52:	d003      	beq.n	26c5c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   26c54:	687b      	ldr	r3, [r7, #4]
   26c56:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   26c58:	2b02      	cmp	r3, #2
   26c5a:	d107      	bne.n	26c6c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   26c5c:	69fb      	ldr	r3, [r7, #28]
   26c5e:	4a22      	ldr	r2, [pc, #136]	; (26ce8 <_system_pinmux_config+0x10c>)
   26c60:	4013      	ands	r3, r2
   26c62:	61fb      	str	r3, [r7, #28]
   26c64:	e002      	b.n	26c6c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   26c66:	68fb      	ldr	r3, [r7, #12]
   26c68:	68ba      	ldr	r2, [r7, #8]
   26c6a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   26c6c:	68bb      	ldr	r3, [r7, #8]
   26c6e:	041b      	lsls	r3, r3, #16
   26c70:	0c1b      	lsrs	r3, r3, #16
   26c72:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   26c74:	68bb      	ldr	r3, [r7, #8]
   26c76:	0c1b      	lsrs	r3, r3, #16
   26c78:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   26c7a:	69ba      	ldr	r2, [r7, #24]
   26c7c:	69fb      	ldr	r3, [r7, #28]
   26c7e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   26c80:	22a0      	movs	r2, #160	; 0xa0
   26c82:	05d2      	lsls	r2, r2, #23
   26c84:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   26c86:	68fb      	ldr	r3, [r7, #12]
   26c88:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   26c8a:	697a      	ldr	r2, [r7, #20]
   26c8c:	69fb      	ldr	r3, [r7, #28]
   26c8e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   26c90:	22d0      	movs	r2, #208	; 0xd0
   26c92:	0612      	lsls	r2, r2, #24
   26c94:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   26c96:	68fb      	ldr	r3, [r7, #12]
   26c98:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   26c9a:	687b      	ldr	r3, [r7, #4]
   26c9c:	78db      	ldrb	r3, [r3, #3]
   26c9e:	2201      	movs	r2, #1
   26ca0:	4053      	eors	r3, r2
   26ca2:	b2db      	uxtb	r3, r3
   26ca4:	2b00      	cmp	r3, #0
   26ca6:	d01a      	beq.n	26cde <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   26ca8:	69fa      	ldr	r2, [r7, #28]
   26caa:	2380      	movs	r3, #128	; 0x80
   26cac:	02db      	lsls	r3, r3, #11
   26cae:	4013      	ands	r3, r2
   26cb0:	d00a      	beq.n	26cc8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   26cb2:	687b      	ldr	r3, [r7, #4]
   26cb4:	789b      	ldrb	r3, [r3, #2]
   26cb6:	2b01      	cmp	r3, #1
   26cb8:	d103      	bne.n	26cc2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   26cba:	68fb      	ldr	r3, [r7, #12]
   26cbc:	68ba      	ldr	r2, [r7, #8]
   26cbe:	619a      	str	r2, [r3, #24]
   26cc0:	e002      	b.n	26cc8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   26cc2:	68fb      	ldr	r3, [r7, #12]
   26cc4:	68ba      	ldr	r2, [r7, #8]
   26cc6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   26cc8:	687b      	ldr	r3, [r7, #4]
   26cca:	785b      	ldrb	r3, [r3, #1]
   26ccc:	2b01      	cmp	r3, #1
   26cce:	d003      	beq.n	26cd8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   26cd0:	687b      	ldr	r3, [r7, #4]
   26cd2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   26cd4:	2b02      	cmp	r3, #2
   26cd6:	d102      	bne.n	26cde <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   26cd8:	68fb      	ldr	r3, [r7, #12]
   26cda:	68ba      	ldr	r2, [r7, #8]
   26cdc:	609a      	str	r2, [r3, #8]
		}
	}
}
   26cde:	46c0      	nop			; (mov r8, r8)
   26ce0:	46bd      	mov	sp, r7
   26ce2:	b008      	add	sp, #32
   26ce4:	bd80      	pop	{r7, pc}
   26ce6:	46c0      	nop			; (mov r8, r8)
   26ce8:	fffbffff 	.word	0xfffbffff

00026cec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   26cec:	b580      	push	{r7, lr}
   26cee:	b084      	sub	sp, #16
   26cf0:	af00      	add	r7, sp, #0
   26cf2:	0002      	movs	r2, r0
   26cf4:	6039      	str	r1, [r7, #0]
   26cf6:	1dfb      	adds	r3, r7, #7
   26cf8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26cfa:	1dfb      	adds	r3, r7, #7
   26cfc:	781b      	ldrb	r3, [r3, #0]
   26cfe:	0018      	movs	r0, r3
   26d00:	4b0a      	ldr	r3, [pc, #40]	; (26d2c <system_pinmux_pin_set_config+0x40>)
   26d02:	4798      	blx	r3
   26d04:	0003      	movs	r3, r0
   26d06:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   26d08:	1dfb      	adds	r3, r7, #7
   26d0a:	781b      	ldrb	r3, [r3, #0]
   26d0c:	221f      	movs	r2, #31
   26d0e:	4013      	ands	r3, r2
   26d10:	2201      	movs	r2, #1
   26d12:	409a      	lsls	r2, r3
   26d14:	0013      	movs	r3, r2
   26d16:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   26d18:	683a      	ldr	r2, [r7, #0]
   26d1a:	68b9      	ldr	r1, [r7, #8]
   26d1c:	68fb      	ldr	r3, [r7, #12]
   26d1e:	0018      	movs	r0, r3
   26d20:	4b03      	ldr	r3, [pc, #12]	; (26d30 <system_pinmux_pin_set_config+0x44>)
   26d22:	4798      	blx	r3
}
   26d24:	46c0      	nop			; (mov r8, r8)
   26d26:	46bd      	mov	sp, r7
   26d28:	b004      	add	sp, #16
   26d2a:	bd80      	pop	{r7, pc}
   26d2c:	00026b7d 	.word	0x00026b7d
   26d30:	00026bdd 	.word	0x00026bdd

00026d34 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   26d34:	b580      	push	{r7, lr}
   26d36:	af00      	add	r7, sp, #0
	return;
   26d38:	46c0      	nop			; (mov r8, r8)
}
   26d3a:	46bd      	mov	sp, r7
   26d3c:	bd80      	pop	{r7, pc}
	...

00026d40 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   26d40:	b580      	push	{r7, lr}
   26d42:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   26d44:	4b06      	ldr	r3, [pc, #24]	; (26d60 <system_init+0x20>)
   26d46:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   26d48:	4b06      	ldr	r3, [pc, #24]	; (26d64 <system_init+0x24>)
   26d4a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   26d4c:	4b06      	ldr	r3, [pc, #24]	; (26d68 <system_init+0x28>)
   26d4e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   26d50:	4b06      	ldr	r3, [pc, #24]	; (26d6c <system_init+0x2c>)
   26d52:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   26d54:	4b06      	ldr	r3, [pc, #24]	; (26d70 <system_init+0x30>)
   26d56:	4798      	blx	r3
	


}
   26d58:	46c0      	nop			; (mov r8, r8)
   26d5a:	46bd      	mov	sp, r7
   26d5c:	bd80      	pop	{r7, pc}
   26d5e:	46c0      	nop			; (mov r8, r8)
   26d60:	000263c1 	.word	0x000263c1
   26d64:	00022c89 	.word	0x00022c89
   26d68:	0000f669 	.word	0x0000f669
   26d6c:	00023061 	.word	0x00023061
   26d70:	00026d35 	.word	0x00026d35

00026d74 <system_gclk_chan_get_config_defaults>:
{
   26d74:	b580      	push	{r7, lr}
   26d76:	b082      	sub	sp, #8
   26d78:	af00      	add	r7, sp, #0
   26d7a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26d7c:	687b      	ldr	r3, [r7, #4]
   26d7e:	2200      	movs	r2, #0
   26d80:	701a      	strb	r2, [r3, #0]
}
   26d82:	46c0      	nop			; (mov r8, r8)
   26d84:	46bd      	mov	sp, r7
   26d86:	b002      	add	sp, #8
   26d88:	bd80      	pop	{r7, pc}
	...

00026d8c <system_apb_clock_set_mask>:
{
   26d8c:	b580      	push	{r7, lr}
   26d8e:	b082      	sub	sp, #8
   26d90:	af00      	add	r7, sp, #0
   26d92:	0002      	movs	r2, r0
   26d94:	6039      	str	r1, [r7, #0]
   26d96:	1dfb      	adds	r3, r7, #7
   26d98:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26d9a:	1dfb      	adds	r3, r7, #7
   26d9c:	781b      	ldrb	r3, [r3, #0]
   26d9e:	2b01      	cmp	r3, #1
   26da0:	d00a      	beq.n	26db8 <system_apb_clock_set_mask+0x2c>
   26da2:	2b02      	cmp	r3, #2
   26da4:	d00f      	beq.n	26dc6 <system_apb_clock_set_mask+0x3a>
   26da6:	2b00      	cmp	r3, #0
   26da8:	d114      	bne.n	26dd4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26daa:	4b0e      	ldr	r3, [pc, #56]	; (26de4 <system_apb_clock_set_mask+0x58>)
   26dac:	4a0d      	ldr	r2, [pc, #52]	; (26de4 <system_apb_clock_set_mask+0x58>)
   26dae:	6991      	ldr	r1, [r2, #24]
   26db0:	683a      	ldr	r2, [r7, #0]
   26db2:	430a      	orrs	r2, r1
   26db4:	619a      	str	r2, [r3, #24]
			break;
   26db6:	e00f      	b.n	26dd8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26db8:	4b0a      	ldr	r3, [pc, #40]	; (26de4 <system_apb_clock_set_mask+0x58>)
   26dba:	4a0a      	ldr	r2, [pc, #40]	; (26de4 <system_apb_clock_set_mask+0x58>)
   26dbc:	69d1      	ldr	r1, [r2, #28]
   26dbe:	683a      	ldr	r2, [r7, #0]
   26dc0:	430a      	orrs	r2, r1
   26dc2:	61da      	str	r2, [r3, #28]
			break;
   26dc4:	e008      	b.n	26dd8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26dc6:	4b07      	ldr	r3, [pc, #28]	; (26de4 <system_apb_clock_set_mask+0x58>)
   26dc8:	4a06      	ldr	r2, [pc, #24]	; (26de4 <system_apb_clock_set_mask+0x58>)
   26dca:	6a11      	ldr	r1, [r2, #32]
   26dcc:	683a      	ldr	r2, [r7, #0]
   26dce:	430a      	orrs	r2, r1
   26dd0:	621a      	str	r2, [r3, #32]
			break;
   26dd2:	e001      	b.n	26dd8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26dd4:	2317      	movs	r3, #23
   26dd6:	e000      	b.n	26dda <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26dd8:	2300      	movs	r3, #0
}
   26dda:	0018      	movs	r0, r3
   26ddc:	46bd      	mov	sp, r7
   26dde:	b002      	add	sp, #8
   26de0:	bd80      	pop	{r7, pc}
   26de2:	46c0      	nop			; (mov r8, r8)
   26de4:	40000400 	.word	0x40000400

00026de8 <system_pinmux_get_config_defaults>:
{
   26de8:	b580      	push	{r7, lr}
   26dea:	b082      	sub	sp, #8
   26dec:	af00      	add	r7, sp, #0
   26dee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26df0:	687b      	ldr	r3, [r7, #4]
   26df2:	2280      	movs	r2, #128	; 0x80
   26df4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26df6:	687b      	ldr	r3, [r7, #4]
   26df8:	2200      	movs	r2, #0
   26dfa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26dfc:	687b      	ldr	r3, [r7, #4]
   26dfe:	2201      	movs	r2, #1
   26e00:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26e02:	687b      	ldr	r3, [r7, #4]
   26e04:	2200      	movs	r2, #0
   26e06:	70da      	strb	r2, [r3, #3]
}
   26e08:	46c0      	nop			; (mov r8, r8)
   26e0a:	46bd      	mov	sp, r7
   26e0c:	b002      	add	sp, #8
   26e0e:	bd80      	pop	{r7, pc}

00026e10 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   26e10:	b580      	push	{r7, lr}
   26e12:	b084      	sub	sp, #16
   26e14:	af00      	add	r7, sp, #0
   26e16:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   26e18:	2300      	movs	r3, #0
   26e1a:	60fb      	str	r3, [r7, #12]
   26e1c:	e00c      	b.n	26e38 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   26e1e:	4b0a      	ldr	r3, [pc, #40]	; (26e48 <_tcc_get_inst_index+0x38>)
   26e20:	68fa      	ldr	r2, [r7, #12]
   26e22:	0092      	lsls	r2, r2, #2
   26e24:	58d2      	ldr	r2, [r2, r3]
   26e26:	687b      	ldr	r3, [r7, #4]
   26e28:	429a      	cmp	r2, r3
   26e2a:	d102      	bne.n	26e32 <_tcc_get_inst_index+0x22>
			return i;
   26e2c:	68fb      	ldr	r3, [r7, #12]
   26e2e:	b2db      	uxtb	r3, r3
   26e30:	e006      	b.n	26e40 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   26e32:	68fb      	ldr	r3, [r7, #12]
   26e34:	3301      	adds	r3, #1
   26e36:	60fb      	str	r3, [r7, #12]
   26e38:	68fb      	ldr	r3, [r7, #12]
   26e3a:	2b02      	cmp	r3, #2
   26e3c:	d9ef      	bls.n	26e1e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   26e3e:	2300      	movs	r3, #0
}
   26e40:	0018      	movs	r0, r3
   26e42:	46bd      	mov	sp, r7
   26e44:	b004      	add	sp, #16
   26e46:	bd80      	pop	{r7, pc}
   26e48:	00037864 	.word	0x00037864

00026e4c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   26e4c:	b590      	push	{r4, r7, lr}
   26e4e:	b085      	sub	sp, #20
   26e50:	af00      	add	r7, sp, #0
   26e52:	6078      	str	r0, [r7, #4]
   26e54:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   26e56:	230f      	movs	r3, #15
   26e58:	18fc      	adds	r4, r7, r3
   26e5a:	683b      	ldr	r3, [r7, #0]
   26e5c:	0018      	movs	r0, r3
   26e5e:	4bad      	ldr	r3, [pc, #692]	; (27114 <tcc_get_config_defaults+0x2c8>)
   26e60:	4798      	blx	r3
   26e62:	0003      	movs	r3, r0
   26e64:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   26e66:	687b      	ldr	r3, [r7, #4]
   26e68:	2200      	movs	r2, #0
   26e6a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   26e6c:	230f      	movs	r3, #15
   26e6e:	18fb      	adds	r3, r7, r3
   26e70:	781a      	ldrb	r2, [r3, #0]
   26e72:	4ba9      	ldr	r3, [pc, #676]	; (27118 <tcc_get_config_defaults+0x2cc>)
   26e74:	0092      	lsls	r2, r2, #2
   26e76:	58d2      	ldr	r2, [r2, r3]
   26e78:	687b      	ldr	r3, [r7, #4]
   26e7a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   26e7c:	687b      	ldr	r3, [r7, #4]
   26e7e:	2200      	movs	r2, #0
   26e80:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   26e82:	687b      	ldr	r3, [r7, #4]
   26e84:	2200      	movs	r2, #0
   26e86:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   26e88:	687b      	ldr	r3, [r7, #4]
   26e8a:	2200      	movs	r2, #0
   26e8c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   26e8e:	687b      	ldr	r3, [r7, #4]
   26e90:	2200      	movs	r2, #0
   26e92:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   26e94:	687b      	ldr	r3, [r7, #4]
   26e96:	2200      	movs	r2, #0
   26e98:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   26e9a:	687b      	ldr	r3, [r7, #4]
   26e9c:	2200      	movs	r2, #0
   26e9e:	61da      	str	r2, [r3, #28]
   26ea0:	687b      	ldr	r3, [r7, #4]
   26ea2:	2200      	movs	r2, #0
   26ea4:	621a      	str	r2, [r3, #32]
   26ea6:	687b      	ldr	r3, [r7, #4]
   26ea8:	2200      	movs	r2, #0
   26eaa:	625a      	str	r2, [r3, #36]	; 0x24
   26eac:	687b      	ldr	r3, [r7, #4]
   26eae:	2200      	movs	r2, #0
   26eb0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   26eb2:	687b      	ldr	r3, [r7, #4]
   26eb4:	2200      	movs	r2, #0
   26eb6:	751a      	strb	r2, [r3, #20]
   26eb8:	687b      	ldr	r3, [r7, #4]
   26eba:	2200      	movs	r2, #0
   26ebc:	755a      	strb	r2, [r3, #21]
   26ebe:	687b      	ldr	r3, [r7, #4]
   26ec0:	2200      	movs	r2, #0
   26ec2:	759a      	strb	r2, [r3, #22]
   26ec4:	687b      	ldr	r3, [r7, #4]
   26ec6:	2200      	movs	r2, #0
   26ec8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   26eca:	687b      	ldr	r3, [r7, #4]
   26ecc:	2200      	movs	r2, #0
   26ece:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   26ed0:	687b      	ldr	r3, [r7, #4]
   26ed2:	2200      	movs	r2, #0
   26ed4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   26ed6:	687b      	ldr	r3, [r7, #4]
   26ed8:	2200      	movs	r2, #0
   26eda:	741a      	strb	r2, [r3, #16]
   26edc:	687b      	ldr	r3, [r7, #4]
   26ede:	2200      	movs	r2, #0
   26ee0:	745a      	strb	r2, [r3, #17]
   26ee2:	687b      	ldr	r3, [r7, #4]
   26ee4:	2200      	movs	r2, #0
   26ee6:	749a      	strb	r2, [r3, #18]
   26ee8:	687b      	ldr	r3, [r7, #4]
   26eea:	2200      	movs	r2, #0
   26eec:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   26eee:	687b      	ldr	r3, [r7, #4]
   26ef0:	222c      	movs	r2, #44	; 0x2c
   26ef2:	2100      	movs	r1, #0
   26ef4:	5499      	strb	r1, [r3, r2]
   26ef6:	687b      	ldr	r3, [r7, #4]
   26ef8:	222d      	movs	r2, #45	; 0x2d
   26efa:	2100      	movs	r1, #0
   26efc:	5499      	strb	r1, [r3, r2]
   26efe:	687b      	ldr	r3, [r7, #4]
   26f00:	222e      	movs	r2, #46	; 0x2e
   26f02:	2100      	movs	r1, #0
   26f04:	5499      	strb	r1, [r3, r2]
   26f06:	687b      	ldr	r3, [r7, #4]
   26f08:	222f      	movs	r2, #47	; 0x2f
   26f0a:	2100      	movs	r1, #0
   26f0c:	5499      	strb	r1, [r3, r2]
   26f0e:	687b      	ldr	r3, [r7, #4]
   26f10:	2230      	movs	r2, #48	; 0x30
   26f12:	2100      	movs	r1, #0
   26f14:	5499      	strb	r1, [r3, r2]
   26f16:	687b      	ldr	r3, [r7, #4]
   26f18:	2231      	movs	r2, #49	; 0x31
   26f1a:	2100      	movs	r1, #0
   26f1c:	5499      	strb	r1, [r3, r2]
   26f1e:	687b      	ldr	r3, [r7, #4]
   26f20:	2232      	movs	r2, #50	; 0x32
   26f22:	2100      	movs	r1, #0
   26f24:	5499      	strb	r1, [r3, r2]
   26f26:	687b      	ldr	r3, [r7, #4]
   26f28:	2233      	movs	r2, #51	; 0x33
   26f2a:	2100      	movs	r1, #0
   26f2c:	5499      	strb	r1, [r3, r2]
   26f2e:	687b      	ldr	r3, [r7, #4]
   26f30:	2234      	movs	r2, #52	; 0x34
   26f32:	2100      	movs	r1, #0
   26f34:	5499      	strb	r1, [r3, r2]
   26f36:	687b      	ldr	r3, [r7, #4]
   26f38:	2235      	movs	r2, #53	; 0x35
   26f3a:	2100      	movs	r1, #0
   26f3c:	5499      	strb	r1, [r3, r2]
   26f3e:	687b      	ldr	r3, [r7, #4]
   26f40:	2236      	movs	r2, #54	; 0x36
   26f42:	2100      	movs	r1, #0
   26f44:	5499      	strb	r1, [r3, r2]
   26f46:	687b      	ldr	r3, [r7, #4]
   26f48:	2237      	movs	r2, #55	; 0x37
   26f4a:	2100      	movs	r1, #0
   26f4c:	5499      	strb	r1, [r3, r2]
   26f4e:	687b      	ldr	r3, [r7, #4]
   26f50:	2238      	movs	r2, #56	; 0x38
   26f52:	2100      	movs	r1, #0
   26f54:	5499      	strb	r1, [r3, r2]
   26f56:	687b      	ldr	r3, [r7, #4]
   26f58:	2239      	movs	r2, #57	; 0x39
   26f5a:	2100      	movs	r1, #0
   26f5c:	5499      	strb	r1, [r3, r2]
   26f5e:	687b      	ldr	r3, [r7, #4]
   26f60:	223a      	movs	r2, #58	; 0x3a
   26f62:	2100      	movs	r1, #0
   26f64:	5499      	strb	r1, [r3, r2]
   26f66:	687b      	ldr	r3, [r7, #4]
   26f68:	223b      	movs	r2, #59	; 0x3b
   26f6a:	2100      	movs	r1, #0
   26f6c:	5499      	strb	r1, [r3, r2]
   26f6e:	687b      	ldr	r3, [r7, #4]
   26f70:	223c      	movs	r2, #60	; 0x3c
   26f72:	2100      	movs	r1, #0
   26f74:	5499      	strb	r1, [r3, r2]
   26f76:	687b      	ldr	r3, [r7, #4]
   26f78:	223d      	movs	r2, #61	; 0x3d
   26f7a:	2100      	movs	r1, #0
   26f7c:	5499      	strb	r1, [r3, r2]
   26f7e:	687b      	ldr	r3, [r7, #4]
   26f80:	223e      	movs	r2, #62	; 0x3e
   26f82:	2100      	movs	r1, #0
   26f84:	5499      	strb	r1, [r3, r2]
   26f86:	687b      	ldr	r3, [r7, #4]
   26f88:	223f      	movs	r2, #63	; 0x3f
   26f8a:	2100      	movs	r1, #0
   26f8c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   26f8e:	687b      	ldr	r3, [r7, #4]
   26f90:	2240      	movs	r2, #64	; 0x40
   26f92:	2100      	movs	r1, #0
   26f94:	5499      	strb	r1, [r3, r2]
   26f96:	687b      	ldr	r3, [r7, #4]
   26f98:	2241      	movs	r2, #65	; 0x41
   26f9a:	2100      	movs	r1, #0
   26f9c:	5499      	strb	r1, [r3, r2]
   26f9e:	687b      	ldr	r3, [r7, #4]
   26fa0:	2242      	movs	r2, #66	; 0x42
   26fa2:	2100      	movs	r1, #0
   26fa4:	5499      	strb	r1, [r3, r2]
   26fa6:	687b      	ldr	r3, [r7, #4]
   26fa8:	2243      	movs	r2, #67	; 0x43
   26faa:	2100      	movs	r1, #0
   26fac:	5499      	strb	r1, [r3, r2]
   26fae:	687b      	ldr	r3, [r7, #4]
   26fb0:	2244      	movs	r2, #68	; 0x44
   26fb2:	2100      	movs	r1, #0
   26fb4:	5499      	strb	r1, [r3, r2]
   26fb6:	687b      	ldr	r3, [r7, #4]
   26fb8:	2245      	movs	r2, #69	; 0x45
   26fba:	2100      	movs	r1, #0
   26fbc:	5499      	strb	r1, [r3, r2]
   26fbe:	687b      	ldr	r3, [r7, #4]
   26fc0:	2246      	movs	r2, #70	; 0x46
   26fc2:	2100      	movs	r1, #0
   26fc4:	5499      	strb	r1, [r3, r2]
   26fc6:	687b      	ldr	r3, [r7, #4]
   26fc8:	2247      	movs	r2, #71	; 0x47
   26fca:	2100      	movs	r1, #0
   26fcc:	5499      	strb	r1, [r3, r2]
   26fce:	687b      	ldr	r3, [r7, #4]
   26fd0:	2248      	movs	r2, #72	; 0x48
   26fd2:	2100      	movs	r1, #0
   26fd4:	5499      	strb	r1, [r3, r2]
   26fd6:	687b      	ldr	r3, [r7, #4]
   26fd8:	2249      	movs	r2, #73	; 0x49
   26fda:	2100      	movs	r1, #0
   26fdc:	5499      	strb	r1, [r3, r2]
   26fde:	687b      	ldr	r3, [r7, #4]
   26fe0:	224a      	movs	r2, #74	; 0x4a
   26fe2:	2100      	movs	r1, #0
   26fe4:	5499      	strb	r1, [r3, r2]
   26fe6:	687b      	ldr	r3, [r7, #4]
   26fe8:	224b      	movs	r2, #75	; 0x4b
   26fea:	2100      	movs	r1, #0
   26fec:	5499      	strb	r1, [r3, r2]
   26fee:	687b      	ldr	r3, [r7, #4]
   26ff0:	224c      	movs	r2, #76	; 0x4c
   26ff2:	2100      	movs	r1, #0
   26ff4:	5499      	strb	r1, [r3, r2]
   26ff6:	687b      	ldr	r3, [r7, #4]
   26ff8:	224d      	movs	r2, #77	; 0x4d
   26ffa:	2100      	movs	r1, #0
   26ffc:	5499      	strb	r1, [r3, r2]
   26ffe:	687b      	ldr	r3, [r7, #4]
   27000:	224e      	movs	r2, #78	; 0x4e
   27002:	2100      	movs	r1, #0
   27004:	5499      	strb	r1, [r3, r2]
   27006:	687b      	ldr	r3, [r7, #4]
   27008:	224f      	movs	r2, #79	; 0x4f
   2700a:	2100      	movs	r1, #0
   2700c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2700e:	687b      	ldr	r3, [r7, #4]
   27010:	2250      	movs	r2, #80	; 0x50
   27012:	2100      	movs	r1, #0
   27014:	5499      	strb	r1, [r3, r2]
   27016:	687b      	ldr	r3, [r7, #4]
   27018:	2251      	movs	r2, #81	; 0x51
   2701a:	2100      	movs	r1, #0
   2701c:	5499      	strb	r1, [r3, r2]
   2701e:	687b      	ldr	r3, [r7, #4]
   27020:	2252      	movs	r2, #82	; 0x52
   27022:	2100      	movs	r1, #0
   27024:	5499      	strb	r1, [r3, r2]
   27026:	687b      	ldr	r3, [r7, #4]
   27028:	2253      	movs	r2, #83	; 0x53
   2702a:	2100      	movs	r1, #0
   2702c:	5499      	strb	r1, [r3, r2]
   2702e:	687b      	ldr	r3, [r7, #4]
   27030:	2254      	movs	r2, #84	; 0x54
   27032:	2100      	movs	r1, #0
   27034:	5499      	strb	r1, [r3, r2]
   27036:	687b      	ldr	r3, [r7, #4]
   27038:	2255      	movs	r2, #85	; 0x55
   2703a:	2100      	movs	r1, #0
   2703c:	5499      	strb	r1, [r3, r2]
   2703e:	687b      	ldr	r3, [r7, #4]
   27040:	2256      	movs	r2, #86	; 0x56
   27042:	2100      	movs	r1, #0
   27044:	5499      	strb	r1, [r3, r2]
   27046:	687b      	ldr	r3, [r7, #4]
   27048:	2257      	movs	r2, #87	; 0x57
   2704a:	2100      	movs	r1, #0
   2704c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2704e:	687b      	ldr	r3, [r7, #4]
   27050:	2298      	movs	r2, #152	; 0x98
   27052:	2100      	movs	r1, #0
   27054:	5499      	strb	r1, [r3, r2]
   27056:	687b      	ldr	r3, [r7, #4]
   27058:	2200      	movs	r2, #0
   2705a:	659a      	str	r2, [r3, #88]	; 0x58
   2705c:	687b      	ldr	r3, [r7, #4]
   2705e:	2200      	movs	r2, #0
   27060:	679a      	str	r2, [r3, #120]	; 0x78
   27062:	687b      	ldr	r3, [r7, #4]
   27064:	2299      	movs	r2, #153	; 0x99
   27066:	2100      	movs	r1, #0
   27068:	5499      	strb	r1, [r3, r2]
   2706a:	687b      	ldr	r3, [r7, #4]
   2706c:	2200      	movs	r2, #0
   2706e:	65da      	str	r2, [r3, #92]	; 0x5c
   27070:	687b      	ldr	r3, [r7, #4]
   27072:	2200      	movs	r2, #0
   27074:	67da      	str	r2, [r3, #124]	; 0x7c
   27076:	687b      	ldr	r3, [r7, #4]
   27078:	229a      	movs	r2, #154	; 0x9a
   2707a:	2100      	movs	r1, #0
   2707c:	5499      	strb	r1, [r3, r2]
   2707e:	687b      	ldr	r3, [r7, #4]
   27080:	2200      	movs	r2, #0
   27082:	661a      	str	r2, [r3, #96]	; 0x60
   27084:	687b      	ldr	r3, [r7, #4]
   27086:	2280      	movs	r2, #128	; 0x80
   27088:	2100      	movs	r1, #0
   2708a:	5099      	str	r1, [r3, r2]
   2708c:	687b      	ldr	r3, [r7, #4]
   2708e:	229b      	movs	r2, #155	; 0x9b
   27090:	2100      	movs	r1, #0
   27092:	5499      	strb	r1, [r3, r2]
   27094:	687b      	ldr	r3, [r7, #4]
   27096:	2200      	movs	r2, #0
   27098:	665a      	str	r2, [r3, #100]	; 0x64
   2709a:	687b      	ldr	r3, [r7, #4]
   2709c:	2284      	movs	r2, #132	; 0x84
   2709e:	2100      	movs	r1, #0
   270a0:	5099      	str	r1, [r3, r2]
   270a2:	687b      	ldr	r3, [r7, #4]
   270a4:	229c      	movs	r2, #156	; 0x9c
   270a6:	2100      	movs	r1, #0
   270a8:	5499      	strb	r1, [r3, r2]
   270aa:	687b      	ldr	r3, [r7, #4]
   270ac:	2200      	movs	r2, #0
   270ae:	669a      	str	r2, [r3, #104]	; 0x68
   270b0:	687b      	ldr	r3, [r7, #4]
   270b2:	2288      	movs	r2, #136	; 0x88
   270b4:	2100      	movs	r1, #0
   270b6:	5099      	str	r1, [r3, r2]
   270b8:	687b      	ldr	r3, [r7, #4]
   270ba:	229d      	movs	r2, #157	; 0x9d
   270bc:	2100      	movs	r1, #0
   270be:	5499      	strb	r1, [r3, r2]
   270c0:	687b      	ldr	r3, [r7, #4]
   270c2:	2200      	movs	r2, #0
   270c4:	66da      	str	r2, [r3, #108]	; 0x6c
   270c6:	687b      	ldr	r3, [r7, #4]
   270c8:	228c      	movs	r2, #140	; 0x8c
   270ca:	2100      	movs	r1, #0
   270cc:	5099      	str	r1, [r3, r2]
   270ce:	687b      	ldr	r3, [r7, #4]
   270d0:	229e      	movs	r2, #158	; 0x9e
   270d2:	2100      	movs	r1, #0
   270d4:	5499      	strb	r1, [r3, r2]
   270d6:	687b      	ldr	r3, [r7, #4]
   270d8:	2200      	movs	r2, #0
   270da:	671a      	str	r2, [r3, #112]	; 0x70
   270dc:	687b      	ldr	r3, [r7, #4]
   270de:	2290      	movs	r2, #144	; 0x90
   270e0:	2100      	movs	r1, #0
   270e2:	5099      	str	r1, [r3, r2]
   270e4:	687b      	ldr	r3, [r7, #4]
   270e6:	229f      	movs	r2, #159	; 0x9f
   270e8:	2100      	movs	r1, #0
   270ea:	5499      	strb	r1, [r3, r2]
   270ec:	687b      	ldr	r3, [r7, #4]
   270ee:	2200      	movs	r2, #0
   270f0:	675a      	str	r2, [r3, #116]	; 0x74
   270f2:	687b      	ldr	r3, [r7, #4]
   270f4:	2294      	movs	r2, #148	; 0x94
   270f6:	2100      	movs	r1, #0
   270f8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   270fa:	687b      	ldr	r3, [r7, #4]
   270fc:	22a0      	movs	r2, #160	; 0xa0
   270fe:	2101      	movs	r1, #1
   27100:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   27102:	687b      	ldr	r3, [r7, #4]
   27104:	22a1      	movs	r2, #161	; 0xa1
   27106:	2100      	movs	r1, #0
   27108:	5499      	strb	r1, [r3, r2]
}
   2710a:	46c0      	nop			; (mov r8, r8)
   2710c:	46bd      	mov	sp, r7
   2710e:	b005      	add	sp, #20
   27110:	bd90      	pop	{r4, r7, pc}
   27112:	46c0      	nop			; (mov r8, r8)
   27114:	00026e11 	.word	0x00026e11
   27118:	00037880 	.word	0x00037880

0002711c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2711c:	b580      	push	{r7, lr}
   2711e:	b086      	sub	sp, #24
   27120:	af00      	add	r7, sp, #0
   27122:	60b9      	str	r1, [r7, #8]
   27124:	607a      	str	r2, [r7, #4]
   27126:	230f      	movs	r3, #15
   27128:	18fb      	adds	r3, r7, r3
   2712a:	1c02      	adds	r2, r0, #0
   2712c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2712e:	2300      	movs	r3, #0
   27130:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   27132:	2300      	movs	r3, #0
   27134:	613b      	str	r3, [r7, #16]
   27136:	e01d      	b.n	27174 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   27138:	68ba      	ldr	r2, [r7, #8]
   2713a:	693b      	ldr	r3, [r7, #16]
   2713c:	18d3      	adds	r3, r2, r3
   2713e:	3310      	adds	r3, #16
   27140:	781b      	ldrb	r3, [r3, #0]
   27142:	2b01      	cmp	r3, #1
   27144:	d113      	bne.n	2716e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   27146:	230f      	movs	r3, #15
   27148:	18fb      	adds	r3, r7, r3
   2714a:	781b      	ldrb	r3, [r3, #0]
   2714c:	4a1b      	ldr	r2, [pc, #108]	; (271bc <_tcc_build_ctrla+0xa0>)
   2714e:	5cd3      	ldrb	r3, [r2, r3]
   27150:	001a      	movs	r2, r3
   27152:	693b      	ldr	r3, [r7, #16]
   27154:	429a      	cmp	r2, r3
   27156:	da01      	bge.n	2715c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   27158:	2317      	movs	r3, #23
   2715a:	e02a      	b.n	271b2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2715c:	2380      	movs	r3, #128	; 0x80
   2715e:	045a      	lsls	r2, r3, #17
   27160:	693b      	ldr	r3, [r7, #16]
   27162:	409a      	lsls	r2, r3
   27164:	0013      	movs	r3, r2
   27166:	001a      	movs	r2, r3
   27168:	697b      	ldr	r3, [r7, #20]
   2716a:	4313      	orrs	r3, r2
   2716c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2716e:	693b      	ldr	r3, [r7, #16]
   27170:	3301      	adds	r3, #1
   27172:	613b      	str	r3, [r7, #16]
   27174:	693b      	ldr	r3, [r7, #16]
   27176:	2b03      	cmp	r3, #3
   27178:	ddde      	ble.n	27138 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2717a:	68bb      	ldr	r3, [r7, #8]
   2717c:	22a1      	movs	r2, #161	; 0xa1
   2717e:	5c9b      	ldrb	r3, [r3, r2]
   27180:	2b00      	cmp	r3, #0
   27182:	d004      	beq.n	2718e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   27184:	697b      	ldr	r3, [r7, #20]
   27186:	2280      	movs	r2, #128	; 0x80
   27188:	0112      	lsls	r2, r2, #4
   2718a:	4313      	orrs	r3, r2
   2718c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2718e:	68bb      	ldr	r3, [r7, #8]
   27190:	7b1b      	ldrb	r3, [r3, #12]
   27192:	031b      	lsls	r3, r3, #12
   27194:	001a      	movs	r2, r3
   27196:	697b      	ldr	r3, [r7, #20]
   27198:	4313      	orrs	r3, r2
   2719a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2719c:	68bb      	ldr	r3, [r7, #8]
   2719e:	7adb      	ldrb	r3, [r3, #11]
   271a0:	021b      	lsls	r3, r3, #8
   271a2:	001a      	movs	r2, r3
   271a4:	697b      	ldr	r3, [r7, #20]
   271a6:	4313      	orrs	r3, r2
   271a8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   271aa:	687b      	ldr	r3, [r7, #4]
   271ac:	697a      	ldr	r2, [r7, #20]
   271ae:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   271b0:	2300      	movs	r3, #0
}
   271b2:	0018      	movs	r0, r3
   271b4:	46bd      	mov	sp, r7
   271b6:	b006      	add	sp, #24
   271b8:	bd80      	pop	{r7, pc}
   271ba:	46c0      	nop			; (mov r8, r8)
   271bc:	0003788c 	.word	0x0003788c

000271c0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   271c0:	b580      	push	{r7, lr}
   271c2:	b086      	sub	sp, #24
   271c4:	af00      	add	r7, sp, #0
   271c6:	60b9      	str	r1, [r7, #8]
   271c8:	607a      	str	r2, [r7, #4]
   271ca:	230f      	movs	r3, #15
   271cc:	18fb      	adds	r3, r7, r3
   271ce:	1c02      	adds	r2, r0, #0
   271d0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   271d2:	2317      	movs	r3, #23
   271d4:	18fb      	adds	r3, r7, r3
   271d6:	2200      	movs	r2, #0
   271d8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   271da:	68bb      	ldr	r3, [r7, #8]
   271dc:	7a1b      	ldrb	r3, [r3, #8]
   271de:	2b00      	cmp	r3, #0
   271e0:	d007      	beq.n	271f2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   271e2:	2317      	movs	r3, #23
   271e4:	18fb      	adds	r3, r7, r3
   271e6:	2217      	movs	r2, #23
   271e8:	18ba      	adds	r2, r7, r2
   271ea:	7812      	ldrb	r2, [r2, #0]
   271ec:	2104      	movs	r1, #4
   271ee:	430a      	orrs	r2, r1
   271f0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   271f2:	68bb      	ldr	r3, [r7, #8]
   271f4:	7a5b      	ldrb	r3, [r3, #9]
   271f6:	2b01      	cmp	r3, #1
   271f8:	d107      	bne.n	2720a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   271fa:	2317      	movs	r3, #23
   271fc:	18fb      	adds	r3, r7, r3
   271fe:	2217      	movs	r2, #23
   27200:	18ba      	adds	r2, r7, r2
   27202:	7812      	ldrb	r2, [r2, #0]
   27204:	2101      	movs	r1, #1
   27206:	430a      	orrs	r2, r1
   27208:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2720a:	687b      	ldr	r3, [r7, #4]
   2720c:	2217      	movs	r2, #23
   2720e:	18ba      	adds	r2, r7, r2
   27210:	7812      	ldrb	r2, [r2, #0]
   27212:	701a      	strb	r2, [r3, #0]
}
   27214:	46c0      	nop			; (mov r8, r8)
   27216:	46bd      	mov	sp, r7
   27218:	b006      	add	sp, #24
   2721a:	bd80      	pop	{r7, pc}

0002721c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2721c:	b580      	push	{r7, lr}
   2721e:	b088      	sub	sp, #32
   27220:	af00      	add	r7, sp, #0
   27222:	60b9      	str	r1, [r7, #8]
   27224:	607a      	str	r2, [r7, #4]
   27226:	230f      	movs	r3, #15
   27228:	18fb      	adds	r3, r7, r3
   2722a:	1c02      	adds	r2, r0, #0
   2722c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2722e:	230f      	movs	r3, #15
   27230:	18fb      	adds	r3, r7, r3
   27232:	781a      	ldrb	r2, [r3, #0]
   27234:	231b      	movs	r3, #27
   27236:	18fb      	adds	r3, r7, r3
   27238:	493e      	ldr	r1, [pc, #248]	; (27334 <_tcc_build_faults+0x118>)
   2723a:	5c8a      	ldrb	r2, [r1, r2]
   2723c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2723e:	2300      	movs	r3, #0
   27240:	61fb      	str	r3, [r7, #28]
   27242:	e06e      	b.n	27322 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   27244:	69fa      	ldr	r2, [r7, #28]
   27246:	0013      	movs	r3, r2
   27248:	009b      	lsls	r3, r3, #2
   2724a:	189b      	adds	r3, r3, r2
   2724c:	005b      	lsls	r3, r3, #1
   2724e:	3328      	adds	r3, #40	; 0x28
   27250:	68ba      	ldr	r2, [r7, #8]
   27252:	18d3      	adds	r3, r2, r3
   27254:	3304      	adds	r3, #4
   27256:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   27258:	697b      	ldr	r3, [r7, #20]
   2725a:	7a5b      	ldrb	r3, [r3, #9]
   2725c:	221b      	movs	r2, #27
   2725e:	18ba      	adds	r2, r7, r2
   27260:	7812      	ldrb	r2, [r2, #0]
   27262:	429a      	cmp	r2, r3
   27264:	d801      	bhi.n	2726a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   27266:	2317      	movs	r3, #23
   27268:	e05f      	b.n	2732a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2726a:	697b      	ldr	r3, [r7, #20]
   2726c:	781b      	ldrb	r3, [r3, #0]
   2726e:	2b0f      	cmp	r3, #15
   27270:	d901      	bls.n	27276 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   27272:	2317      	movs	r3, #23
   27274:	e059      	b.n	2732a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   27276:	697b      	ldr	r3, [r7, #20]
   27278:	781b      	ldrb	r3, [r3, #0]
   2727a:	061b      	lsls	r3, r3, #24
   2727c:	001a      	movs	r2, r3
   2727e:	23f0      	movs	r3, #240	; 0xf0
   27280:	051b      	lsls	r3, r3, #20
   27282:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   27284:	697b      	ldr	r3, [r7, #20]
   27286:	785b      	ldrb	r3, [r3, #1]
   27288:	041b      	lsls	r3, r3, #16
   2728a:	0019      	movs	r1, r3
   2728c:	23ff      	movs	r3, #255	; 0xff
   2728e:	041b      	lsls	r3, r3, #16
   27290:	400b      	ands	r3, r1
   27292:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   27294:	697b      	ldr	r3, [r7, #20]
   27296:	789b      	ldrb	r3, [r3, #2]
   27298:	2b00      	cmp	r3, #0
   2729a:	d001      	beq.n	272a0 <_tcc_build_faults+0x84>
   2729c:	2380      	movs	r3, #128	; 0x80
   2729e:	e000      	b.n	272a2 <_tcc_build_faults+0x86>
   272a0:	2300      	movs	r3, #0
   272a2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   272a4:	697b      	ldr	r3, [r7, #20]
   272a6:	78db      	ldrb	r3, [r3, #3]
   272a8:	2b00      	cmp	r3, #0
   272aa:	d001      	beq.n	272b0 <_tcc_build_faults+0x94>
   272ac:	2308      	movs	r3, #8
   272ae:	e000      	b.n	272b2 <_tcc_build_faults+0x96>
   272b0:	2300      	movs	r3, #0
   272b2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   272b4:	697b      	ldr	r3, [r7, #20]
   272b6:	791b      	ldrb	r3, [r3, #4]
   272b8:	2b00      	cmp	r3, #0
   272ba:	d001      	beq.n	272c0 <_tcc_build_faults+0xa4>
   272bc:	2310      	movs	r3, #16
   272be:	e000      	b.n	272c2 <_tcc_build_faults+0xa6>
   272c0:	2300      	movs	r3, #0
   272c2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   272c4:	697b      	ldr	r3, [r7, #20]
   272c6:	795b      	ldrb	r3, [r3, #5]
   272c8:	0019      	movs	r1, r3
   272ca:	2303      	movs	r3, #3
   272cc:	400b      	ands	r3, r1
   272ce:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   272d0:	697b      	ldr	r3, [r7, #20]
   272d2:	799b      	ldrb	r3, [r3, #6]
   272d4:	015b      	lsls	r3, r3, #5
   272d6:	0019      	movs	r1, r3
   272d8:	2360      	movs	r3, #96	; 0x60
   272da:	400b      	ands	r3, r1
   272dc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   272de:	697b      	ldr	r3, [r7, #20]
   272e0:	79db      	ldrb	r3, [r3, #7]
   272e2:	021b      	lsls	r3, r3, #8
   272e4:	0019      	movs	r1, r3
   272e6:	23c0      	movs	r3, #192	; 0xc0
   272e8:	009b      	lsls	r3, r3, #2
   272ea:	400b      	ands	r3, r1
   272ec:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   272ee:	697b      	ldr	r3, [r7, #20]
   272f0:	7a1b      	ldrb	r3, [r3, #8]
   272f2:	031b      	lsls	r3, r3, #12
   272f4:	0019      	movs	r1, r3
   272f6:	23e0      	movs	r3, #224	; 0xe0
   272f8:	01db      	lsls	r3, r3, #7
   272fa:	400b      	ands	r3, r1
   272fc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   272fe:	697b      	ldr	r3, [r7, #20]
   27300:	7a5b      	ldrb	r3, [r3, #9]
   27302:	029b      	lsls	r3, r3, #10
   27304:	0019      	movs	r1, r3
   27306:	23c0      	movs	r3, #192	; 0xc0
   27308:	011b      	lsls	r3, r3, #4
   2730a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2730c:	4313      	orrs	r3, r2
   2730e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   27310:	69fb      	ldr	r3, [r7, #28]
   27312:	009b      	lsls	r3, r3, #2
   27314:	687a      	ldr	r2, [r7, #4]
   27316:	18d3      	adds	r3, r2, r3
   27318:	693a      	ldr	r2, [r7, #16]
   2731a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2731c:	69fb      	ldr	r3, [r7, #28]
   2731e:	3301      	adds	r3, #1
   27320:	61fb      	str	r3, [r7, #28]
   27322:	69fb      	ldr	r3, [r7, #28]
   27324:	2b01      	cmp	r3, #1
   27326:	dd8d      	ble.n	27244 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   27328:	2300      	movs	r3, #0
}
   2732a:	0018      	movs	r0, r3
   2732c:	46bd      	mov	sp, r7
   2732e:	b008      	add	sp, #32
   27330:	bd80      	pop	{r7, pc}
   27332:	46c0      	nop			; (mov r8, r8)
   27334:	0003788c 	.word	0x0003788c

00027338 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   27338:	b580      	push	{r7, lr}
   2733a:	b088      	sub	sp, #32
   2733c:	af00      	add	r7, sp, #0
   2733e:	60b9      	str	r1, [r7, #8]
   27340:	607a      	str	r2, [r7, #4]
   27342:	230f      	movs	r3, #15
   27344:	18fb      	adds	r3, r7, r3
   27346:	1c02      	adds	r2, r0, #0
   27348:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2734a:	230f      	movs	r3, #15
   2734c:	18fb      	adds	r3, r7, r3
   2734e:	781a      	ldrb	r2, [r3, #0]
   27350:	2317      	movs	r3, #23
   27352:	18fb      	adds	r3, r7, r3
   27354:	492d      	ldr	r1, [pc, #180]	; (2740c <_tcc_build_drvctrl+0xd4>)
   27356:	5c8a      	ldrb	r2, [r1, r2]
   27358:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2735a:	2300      	movs	r3, #0
   2735c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2735e:	2300      	movs	r3, #0
   27360:	61fb      	str	r3, [r7, #28]
   27362:	e048      	b.n	273f6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   27364:	68ba      	ldr	r2, [r7, #8]
   27366:	2150      	movs	r1, #80	; 0x50
   27368:	69fb      	ldr	r3, [r7, #28]
   2736a:	18d3      	adds	r3, r2, r3
   2736c:	185b      	adds	r3, r3, r1
   2736e:	781b      	ldrb	r3, [r3, #0]
   27370:	2b00      	cmp	r3, #0
   27372:	d010      	beq.n	27396 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   27374:	2317      	movs	r3, #23
   27376:	18fb      	adds	r3, r7, r3
   27378:	781a      	ldrb	r2, [r3, #0]
   2737a:	69fb      	ldr	r3, [r7, #28]
   2737c:	429a      	cmp	r2, r3
   2737e:	d801      	bhi.n	27384 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   27380:	2317      	movs	r3, #23
   27382:	e03f      	b.n	27404 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   27384:	2380      	movs	r3, #128	; 0x80
   27386:	025a      	lsls	r2, r3, #9
   27388:	69fb      	ldr	r3, [r7, #28]
   2738a:	409a      	lsls	r2, r3
   2738c:	0013      	movs	r3, r2
   2738e:	001a      	movs	r2, r3
   27390:	69bb      	ldr	r3, [r7, #24]
   27392:	4313      	orrs	r3, r2
   27394:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   27396:	68ba      	ldr	r2, [r7, #8]
   27398:	69fb      	ldr	r3, [r7, #28]
   2739a:	331c      	adds	r3, #28
   2739c:	005b      	lsls	r3, r3, #1
   2739e:	18d3      	adds	r3, r2, r3
   273a0:	3309      	adds	r3, #9
   273a2:	781b      	ldrb	r3, [r3, #0]
   273a4:	2b00      	cmp	r3, #0
   273a6:	d023      	beq.n	273f0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   273a8:	2317      	movs	r3, #23
   273aa:	18fb      	adds	r3, r7, r3
   273ac:	781a      	ldrb	r2, [r3, #0]
   273ae:	69fb      	ldr	r3, [r7, #28]
   273b0:	429a      	cmp	r2, r3
   273b2:	d801      	bhi.n	273b8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   273b4:	2317      	movs	r3, #23
   273b6:	e025      	b.n	27404 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   273b8:	68ba      	ldr	r2, [r7, #8]
   273ba:	69fb      	ldr	r3, [r7, #28]
   273bc:	331c      	adds	r3, #28
   273be:	005b      	lsls	r3, r3, #1
   273c0:	18d3      	adds	r3, r2, r3
   273c2:	3309      	adds	r3, #9
   273c4:	781b      	ldrb	r3, [r3, #0]
   273c6:	2b02      	cmp	r3, #2
   273c8:	d10a      	bne.n	273e0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   273ca:	2302      	movs	r3, #2
   273cc:	33ff      	adds	r3, #255	; 0xff
   273ce:	001a      	movs	r2, r3
   273d0:	69fb      	ldr	r3, [r7, #28]
   273d2:	409a      	lsls	r2, r3
   273d4:	0013      	movs	r3, r2
   273d6:	001a      	movs	r2, r3
   273d8:	69bb      	ldr	r3, [r7, #24]
   273da:	4313      	orrs	r3, r2
   273dc:	61bb      	str	r3, [r7, #24]
   273de:	e007      	b.n	273f0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   273e0:	2201      	movs	r2, #1
   273e2:	69fb      	ldr	r3, [r7, #28]
   273e4:	409a      	lsls	r2, r3
   273e6:	0013      	movs	r3, r2
   273e8:	001a      	movs	r2, r3
   273ea:	69bb      	ldr	r3, [r7, #24]
   273ec:	4313      	orrs	r3, r2
   273ee:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   273f0:	69fb      	ldr	r3, [r7, #28]
   273f2:	3301      	adds	r3, #1
   273f4:	61fb      	str	r3, [r7, #28]
   273f6:	69fb      	ldr	r3, [r7, #28]
   273f8:	2b07      	cmp	r3, #7
   273fa:	d9b3      	bls.n	27364 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   273fc:	687b      	ldr	r3, [r7, #4]
   273fe:	69ba      	ldr	r2, [r7, #24]
   27400:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   27402:	2300      	movs	r3, #0
}
   27404:	0018      	movs	r0, r3
   27406:	46bd      	mov	sp, r7
   27408:	b008      	add	sp, #32
   2740a:	bd80      	pop	{r7, pc}
   2740c:	00037890 	.word	0x00037890

00027410 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   27410:	b580      	push	{r7, lr}
   27412:	b088      	sub	sp, #32
   27414:	af00      	add	r7, sp, #0
   27416:	60b9      	str	r1, [r7, #8]
   27418:	607a      	str	r2, [r7, #4]
   2741a:	230f      	movs	r3, #15
   2741c:	18fb      	adds	r3, r7, r3
   2741e:	1c02      	adds	r2, r0, #0
   27420:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   27422:	230f      	movs	r3, #15
   27424:	18fb      	adds	r3, r7, r3
   27426:	781a      	ldrb	r2, [r3, #0]
   27428:	2317      	movs	r3, #23
   2742a:	18fb      	adds	r3, r7, r3
   2742c:	491d      	ldr	r1, [pc, #116]	; (274a4 <_tcc_build_waves+0x94>)
   2742e:	5c8a      	ldrb	r2, [r1, r2]
   27430:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   27432:	68bb      	ldr	r3, [r7, #8]
   27434:	3310      	adds	r3, #16
   27436:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   27438:	693b      	ldr	r3, [r7, #16]
   2743a:	7a5b      	ldrb	r3, [r3, #9]
   2743c:	011b      	lsls	r3, r3, #4
   2743e:	001a      	movs	r2, r3
   27440:	2330      	movs	r3, #48	; 0x30
   27442:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   27444:	693b      	ldr	r3, [r7, #16]
   27446:	7a1b      	ldrb	r3, [r3, #8]
   27448:	0019      	movs	r1, r3
   2744a:	2307      	movs	r3, #7
   2744c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2744e:	4313      	orrs	r3, r2
   27450:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   27452:	2300      	movs	r3, #0
   27454:	61fb      	str	r3, [r7, #28]
   27456:	e01a      	b.n	2748e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   27458:	693a      	ldr	r2, [r7, #16]
   2745a:	69fb      	ldr	r3, [r7, #28]
   2745c:	18d3      	adds	r3, r2, r3
   2745e:	3304      	adds	r3, #4
   27460:	781b      	ldrb	r3, [r3, #0]
   27462:	2b00      	cmp	r3, #0
   27464:	d010      	beq.n	27488 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   27466:	2317      	movs	r3, #23
   27468:	18fb      	adds	r3, r7, r3
   2746a:	781a      	ldrb	r2, [r3, #0]
   2746c:	69fb      	ldr	r3, [r7, #28]
   2746e:	429a      	cmp	r2, r3
   27470:	dc01      	bgt.n	27476 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   27472:	2317      	movs	r3, #23
   27474:	e012      	b.n	2749c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   27476:	2380      	movs	r3, #128	; 0x80
   27478:	025a      	lsls	r2, r3, #9
   2747a:	69fb      	ldr	r3, [r7, #28]
   2747c:	409a      	lsls	r2, r3
   2747e:	0013      	movs	r3, r2
   27480:	001a      	movs	r2, r3
   27482:	69bb      	ldr	r3, [r7, #24]
   27484:	4313      	orrs	r3, r2
   27486:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   27488:	69fb      	ldr	r3, [r7, #28]
   2748a:	3301      	adds	r3, #1
   2748c:	61fb      	str	r3, [r7, #28]
   2748e:	69fb      	ldr	r3, [r7, #28]
   27490:	2b03      	cmp	r3, #3
   27492:	dde1      	ble.n	27458 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   27494:	687b      	ldr	r3, [r7, #4]
   27496:	69ba      	ldr	r2, [r7, #24]
   27498:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2749a:	2300      	movs	r3, #0
}
   2749c:	0018      	movs	r0, r3
   2749e:	46bd      	mov	sp, r7
   274a0:	b008      	add	sp, #32
   274a2:	bd80      	pop	{r7, pc}
   274a4:	0003788c 	.word	0x0003788c

000274a8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   274a8:	b590      	push	{r4, r7, lr}
   274aa:	b091      	sub	sp, #68	; 0x44
   274ac:	af00      	add	r7, sp, #0
   274ae:	60f8      	str	r0, [r7, #12]
   274b0:	60b9      	str	r1, [r7, #8]
   274b2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   274b4:	233b      	movs	r3, #59	; 0x3b
   274b6:	18fc      	adds	r4, r7, r3
   274b8:	68bb      	ldr	r3, [r7, #8]
   274ba:	0018      	movs	r0, r3
   274bc:	4bc4      	ldr	r3, [pc, #784]	; (277d0 <tcc_init+0x328>)
   274be:	4798      	blx	r3
   274c0:	0003      	movs	r3, r0
   274c2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   274c4:	233b      	movs	r3, #59	; 0x3b
   274c6:	18fb      	adds	r3, r7, r3
   274c8:	781a      	ldrb	r2, [r3, #0]
   274ca:	4bc2      	ldr	r3, [pc, #776]	; (277d4 <tcc_init+0x32c>)
   274cc:	0092      	lsls	r2, r2, #2
   274ce:	58d3      	ldr	r3, [r2, r3]
   274d0:	0019      	movs	r1, r3
   274d2:	2002      	movs	r0, #2
   274d4:	4bc0      	ldr	r3, [pc, #768]	; (277d8 <tcc_init+0x330>)
   274d6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   274d8:	68bb      	ldr	r3, [r7, #8]
   274da:	681b      	ldr	r3, [r3, #0]
   274dc:	2202      	movs	r2, #2
   274de:	4013      	ands	r3, r2
   274e0:	d001      	beq.n	274e6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   274e2:	231c      	movs	r3, #28
   274e4:	e1be      	b.n	27864 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   274e6:	68bb      	ldr	r3, [r7, #8]
   274e8:	681b      	ldr	r3, [r3, #0]
   274ea:	2201      	movs	r2, #1
   274ec:	4013      	ands	r3, r2
   274ee:	d001      	beq.n	274f4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   274f0:	231c      	movs	r3, #28
   274f2:	e1b7      	b.n	27864 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   274f4:	233b      	movs	r3, #59	; 0x3b
   274f6:	18fb      	adds	r3, r7, r3
   274f8:	781a      	ldrb	r2, [r3, #0]
   274fa:	4bb8      	ldr	r3, [pc, #736]	; (277dc <tcc_init+0x334>)
   274fc:	0092      	lsls	r2, r2, #2
   274fe:	58d3      	ldr	r3, [r2, r3]
   27500:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   27502:	687b      	ldr	r3, [r7, #4]
   27504:	681a      	ldr	r2, [r3, #0]
   27506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27508:	429a      	cmp	r2, r3
   2750a:	d804      	bhi.n	27516 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2750c:	687b      	ldr	r3, [r7, #4]
   2750e:	685a      	ldr	r2, [r3, #4]
   27510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27512:	429a      	cmp	r2, r3
   27514:	d901      	bls.n	2751a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   27516:	2317      	movs	r3, #23
   27518:	e1a4      	b.n	27864 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2751a:	2300      	movs	r3, #0
   2751c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2751e:	e00e      	b.n	2753e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   27520:	687a      	ldr	r2, [r7, #4]
   27522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27524:	3306      	adds	r3, #6
   27526:	009b      	lsls	r3, r3, #2
   27528:	18d3      	adds	r3, r2, r3
   2752a:	3304      	adds	r3, #4
   2752c:	681a      	ldr	r2, [r3, #0]
   2752e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27530:	429a      	cmp	r2, r3
   27532:	d901      	bls.n	27538 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   27534:	2317      	movs	r3, #23
   27536:	e195      	b.n	27864 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   27538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2753a:	3301      	adds	r3, #1
   2753c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27540:	2b03      	cmp	r3, #3
   27542:	dded      	ble.n	27520 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   27544:	2300      	movs	r3, #0
   27546:	63fb      	str	r3, [r7, #60]	; 0x3c
   27548:	e019      	b.n	2757e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2754a:	687a      	ldr	r2, [r7, #4]
   2754c:	2198      	movs	r1, #152	; 0x98
   2754e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27550:	18d3      	adds	r3, r2, r3
   27552:	185b      	adds	r3, r3, r1
   27554:	781b      	ldrb	r3, [r3, #0]
   27556:	2201      	movs	r2, #1
   27558:	4053      	eors	r3, r2
   2755a:	b2db      	uxtb	r3, r3
   2755c:	2b00      	cmp	r3, #0
   2755e:	d10a      	bne.n	27576 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   27560:	233b      	movs	r3, #59	; 0x3b
   27562:	18fb      	adds	r3, r7, r3
   27564:	781b      	ldrb	r3, [r3, #0]
   27566:	4a9e      	ldr	r2, [pc, #632]	; (277e0 <tcc_init+0x338>)
   27568:	5cd3      	ldrb	r3, [r2, r3]
   2756a:	001a      	movs	r2, r3
   2756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2756e:	429a      	cmp	r2, r3
   27570:	dc02      	bgt.n	27578 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   27572:	2317      	movs	r3, #23
   27574:	e176      	b.n	27864 <tcc_init+0x3bc>
			continue;
   27576:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   27578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2757a:	3301      	adds	r3, #1
   2757c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2757e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27580:	2b07      	cmp	r3, #7
   27582:	dde2      	ble.n	2754a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   27584:	2300      	movs	r3, #0
   27586:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   27588:	2333      	movs	r3, #51	; 0x33
   2758a:	18fc      	adds	r4, r7, r3
   2758c:	232c      	movs	r3, #44	; 0x2c
   2758e:	18fa      	adds	r2, r7, r3
   27590:	6879      	ldr	r1, [r7, #4]
   27592:	233b      	movs	r3, #59	; 0x3b
   27594:	18fb      	adds	r3, r7, r3
   27596:	781b      	ldrb	r3, [r3, #0]
   27598:	0018      	movs	r0, r3
   2759a:	4b92      	ldr	r3, [pc, #584]	; (277e4 <tcc_init+0x33c>)
   2759c:	4798      	blx	r3
   2759e:	0003      	movs	r3, r0
   275a0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   275a2:	2333      	movs	r3, #51	; 0x33
   275a4:	18fb      	adds	r3, r7, r3
   275a6:	781b      	ldrb	r3, [r3, #0]
   275a8:	2b00      	cmp	r3, #0
   275aa:	d003      	beq.n	275b4 <tcc_init+0x10c>
		return status;
   275ac:	2333      	movs	r3, #51	; 0x33
   275ae:	18fb      	adds	r3, r7, r3
   275b0:	781b      	ldrb	r3, [r3, #0]
   275b2:	e157      	b.n	27864 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   275b4:	232b      	movs	r3, #43	; 0x2b
   275b6:	18fa      	adds	r2, r7, r3
   275b8:	6879      	ldr	r1, [r7, #4]
   275ba:	233b      	movs	r3, #59	; 0x3b
   275bc:	18fb      	adds	r3, r7, r3
   275be:	781b      	ldrb	r3, [r3, #0]
   275c0:	0018      	movs	r0, r3
   275c2:	4b89      	ldr	r3, [pc, #548]	; (277e8 <tcc_init+0x340>)
   275c4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   275c6:	2333      	movs	r3, #51	; 0x33
   275c8:	18fc      	adds	r4, r7, r3
   275ca:	2320      	movs	r3, #32
   275cc:	18fa      	adds	r2, r7, r3
   275ce:	6879      	ldr	r1, [r7, #4]
   275d0:	233b      	movs	r3, #59	; 0x3b
   275d2:	18fb      	adds	r3, r7, r3
   275d4:	781b      	ldrb	r3, [r3, #0]
   275d6:	0018      	movs	r0, r3
   275d8:	4b84      	ldr	r3, [pc, #528]	; (277ec <tcc_init+0x344>)
   275da:	4798      	blx	r3
   275dc:	0003      	movs	r3, r0
   275de:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   275e0:	2333      	movs	r3, #51	; 0x33
   275e2:	18fb      	adds	r3, r7, r3
   275e4:	781b      	ldrb	r3, [r3, #0]
   275e6:	2b00      	cmp	r3, #0
   275e8:	d003      	beq.n	275f2 <tcc_init+0x14a>
		return status;
   275ea:	2333      	movs	r3, #51	; 0x33
   275ec:	18fb      	adds	r3, r7, r3
   275ee:	781b      	ldrb	r3, [r3, #0]
   275f0:	e138      	b.n	27864 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   275f2:	2300      	movs	r3, #0
   275f4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   275f6:	2333      	movs	r3, #51	; 0x33
   275f8:	18fc      	adds	r4, r7, r3
   275fa:	231c      	movs	r3, #28
   275fc:	18fa      	adds	r2, r7, r3
   275fe:	6879      	ldr	r1, [r7, #4]
   27600:	233b      	movs	r3, #59	; 0x3b
   27602:	18fb      	adds	r3, r7, r3
   27604:	781b      	ldrb	r3, [r3, #0]
   27606:	0018      	movs	r0, r3
   27608:	4b79      	ldr	r3, [pc, #484]	; (277f0 <tcc_init+0x348>)
   2760a:	4798      	blx	r3
   2760c:	0003      	movs	r3, r0
   2760e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   27610:	2333      	movs	r3, #51	; 0x33
   27612:	18fb      	adds	r3, r7, r3
   27614:	781b      	ldrb	r3, [r3, #0]
   27616:	2b00      	cmp	r3, #0
   27618:	d003      	beq.n	27622 <tcc_init+0x17a>
		return status;
   2761a:	2333      	movs	r3, #51	; 0x33
   2761c:	18fb      	adds	r3, r7, r3
   2761e:	781b      	ldrb	r3, [r3, #0]
   27620:	e120      	b.n	27864 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   27622:	2333      	movs	r3, #51	; 0x33
   27624:	18fc      	adds	r4, r7, r3
   27626:	2318      	movs	r3, #24
   27628:	18fa      	adds	r2, r7, r3
   2762a:	6879      	ldr	r1, [r7, #4]
   2762c:	233b      	movs	r3, #59	; 0x3b
   2762e:	18fb      	adds	r3, r7, r3
   27630:	781b      	ldrb	r3, [r3, #0]
   27632:	0018      	movs	r0, r3
   27634:	4b6f      	ldr	r3, [pc, #444]	; (277f4 <tcc_init+0x34c>)
   27636:	4798      	blx	r3
   27638:	0003      	movs	r3, r0
   2763a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2763c:	2333      	movs	r3, #51	; 0x33
   2763e:	18fb      	adds	r3, r7, r3
   27640:	781b      	ldrb	r3, [r3, #0]
   27642:	2b00      	cmp	r3, #0
   27644:	d003      	beq.n	2764e <tcc_init+0x1a6>
		return status;
   27646:	2333      	movs	r3, #51	; 0x33
   27648:	18fb      	adds	r3, r7, r3
   2764a:	781b      	ldrb	r3, [r3, #0]
   2764c:	e10a      	b.n	27864 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2764e:	2300      	movs	r3, #0
   27650:	63fb      	str	r3, [r7, #60]	; 0x3c
   27652:	e009      	b.n	27668 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   27654:	68fa      	ldr	r2, [r7, #12]
   27656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27658:	009b      	lsls	r3, r3, #2
   2765a:	18d3      	adds	r3, r2, r3
   2765c:	3304      	adds	r3, #4
   2765e:	2200      	movs	r2, #0
   27660:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   27662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27664:	3301      	adds	r3, #1
   27666:	63fb      	str	r3, [r7, #60]	; 0x3c
   27668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2766a:	2b0b      	cmp	r3, #11
   2766c:	ddf2      	ble.n	27654 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2766e:	68fb      	ldr	r3, [r7, #12]
   27670:	2200      	movs	r2, #0
   27672:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   27674:	68fb      	ldr	r3, [r7, #12]
   27676:	2200      	movs	r2, #0
   27678:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2767a:	233b      	movs	r3, #59	; 0x3b
   2767c:	18fb      	adds	r3, r7, r3
   2767e:	781a      	ldrb	r2, [r3, #0]
   27680:	4b5d      	ldr	r3, [pc, #372]	; (277f8 <tcc_init+0x350>)
   27682:	0092      	lsls	r2, r2, #2
   27684:	68f9      	ldr	r1, [r7, #12]
   27686:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   27688:	68fb      	ldr	r3, [r7, #12]
   2768a:	68ba      	ldr	r2, [r7, #8]
   2768c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2768e:	687b      	ldr	r3, [r7, #4]
   27690:	22a0      	movs	r2, #160	; 0xa0
   27692:	5c99      	ldrb	r1, [r3, r2]
   27694:	68fb      	ldr	r3, [r7, #12]
   27696:	223c      	movs	r2, #60	; 0x3c
   27698:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2769a:	2314      	movs	r3, #20
   2769c:	18fb      	adds	r3, r7, r3
   2769e:	0018      	movs	r0, r3
   276a0:	4b56      	ldr	r3, [pc, #344]	; (277fc <tcc_init+0x354>)
   276a2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   276a4:	687b      	ldr	r3, [r7, #4]
   276a6:	7a9a      	ldrb	r2, [r3, #10]
   276a8:	2314      	movs	r3, #20
   276aa:	18fb      	adds	r3, r7, r3
   276ac:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   276ae:	233b      	movs	r3, #59	; 0x3b
   276b0:	18fb      	adds	r3, r7, r3
   276b2:	781b      	ldrb	r3, [r3, #0]
   276b4:	4a52      	ldr	r2, [pc, #328]	; (27800 <tcc_init+0x358>)
   276b6:	5cd3      	ldrb	r3, [r2, r3]
   276b8:	2214      	movs	r2, #20
   276ba:	18ba      	adds	r2, r7, r2
   276bc:	0011      	movs	r1, r2
   276be:	0018      	movs	r0, r3
   276c0:	4b50      	ldr	r3, [pc, #320]	; (27804 <tcc_init+0x35c>)
   276c2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   276c4:	233b      	movs	r3, #59	; 0x3b
   276c6:	18fb      	adds	r3, r7, r3
   276c8:	781b      	ldrb	r3, [r3, #0]
   276ca:	4a4d      	ldr	r2, [pc, #308]	; (27800 <tcc_init+0x358>)
   276cc:	5cd3      	ldrb	r3, [r2, r3]
   276ce:	0018      	movs	r0, r3
   276d0:	4b4d      	ldr	r3, [pc, #308]	; (27808 <tcc_init+0x360>)
   276d2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   276d4:	2300      	movs	r3, #0
   276d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   276d8:	e02d      	b.n	27736 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   276da:	687a      	ldr	r2, [r7, #4]
   276dc:	2198      	movs	r1, #152	; 0x98
   276de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   276e0:	18d3      	adds	r3, r2, r3
   276e2:	185b      	adds	r3, r3, r1
   276e4:	781b      	ldrb	r3, [r3, #0]
   276e6:	2201      	movs	r2, #1
   276e8:	4053      	eors	r3, r2
   276ea:	b2db      	uxtb	r3, r3
   276ec:	2b00      	cmp	r3, #0
   276ee:	d11e      	bne.n	2772e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   276f0:	2310      	movs	r3, #16
   276f2:	18fb      	adds	r3, r7, r3
   276f4:	0018      	movs	r0, r3
   276f6:	4b45      	ldr	r3, [pc, #276]	; (2780c <tcc_init+0x364>)
   276f8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   276fa:	687b      	ldr	r3, [r7, #4]
   276fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   276fe:	321e      	adds	r2, #30
   27700:	0092      	lsls	r2, r2, #2
   27702:	58d3      	ldr	r3, [r2, r3]
   27704:	b2da      	uxtb	r2, r3
   27706:	2310      	movs	r3, #16
   27708:	18fb      	adds	r3, r7, r3
   2770a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2770c:	2310      	movs	r3, #16
   2770e:	18fb      	adds	r3, r7, r3
   27710:	2201      	movs	r2, #1
   27712:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   27714:	687b      	ldr	r3, [r7, #4]
   27716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27718:	3216      	adds	r2, #22
   2771a:	0092      	lsls	r2, r2, #2
   2771c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2771e:	b2db      	uxtb	r3, r3
   27720:	2210      	movs	r2, #16
   27722:	18ba      	adds	r2, r7, r2
   27724:	0011      	movs	r1, r2
   27726:	0018      	movs	r0, r3
   27728:	4b39      	ldr	r3, [pc, #228]	; (27810 <tcc_init+0x368>)
   2772a:	4798      	blx	r3
   2772c:	e000      	b.n	27730 <tcc_init+0x288>
			continue;
   2772e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   27730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27732:	3301      	adds	r3, #1
   27734:	63fb      	str	r3, [r7, #60]	; 0x3c
   27736:	233b      	movs	r3, #59	; 0x3b
   27738:	18fb      	adds	r3, r7, r3
   2773a:	781b      	ldrb	r3, [r3, #0]
   2773c:	4a28      	ldr	r2, [pc, #160]	; (277e0 <tcc_init+0x338>)
   2773e:	5cd3      	ldrb	r3, [r2, r3]
   27740:	001a      	movs	r2, r3
   27742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27744:	429a      	cmp	r2, r3
   27746:	dcc8      	bgt.n	276da <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   27748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2774a:	68bb      	ldr	r3, [r7, #8]
   2774c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2774e:	46c0      	nop			; (mov r8, r8)
   27750:	68bb      	ldr	r3, [r7, #8]
   27752:	689b      	ldr	r3, [r3, #8]
   27754:	2204      	movs	r2, #4
   27756:	4013      	ands	r3, r2
   27758:	d1fa      	bne.n	27750 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2775a:	68bb      	ldr	r3, [r7, #8]
   2775c:	22ff      	movs	r2, #255	; 0xff
   2775e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   27760:	46c0      	nop			; (mov r8, r8)
   27762:	68bb      	ldr	r3, [r7, #8]
   27764:	689b      	ldr	r3, [r3, #8]
   27766:	2204      	movs	r2, #4
   27768:	4013      	ands	r3, r2
   2776a:	d1fa      	bne.n	27762 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2776c:	232b      	movs	r3, #43	; 0x2b
   2776e:	18fb      	adds	r3, r7, r3
   27770:	781a      	ldrb	r2, [r3, #0]
   27772:	68bb      	ldr	r3, [r7, #8]
   27774:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   27776:	2320      	movs	r3, #32
   27778:	18fb      	adds	r3, r7, r3
   2777a:	681a      	ldr	r2, [r3, #0]
   2777c:	68bb      	ldr	r3, [r7, #8]
   2777e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   27780:	2320      	movs	r3, #32
   27782:	18fb      	adds	r3, r7, r3
   27784:	685a      	ldr	r2, [r3, #4]
   27786:	68bb      	ldr	r3, [r7, #8]
   27788:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2778a:	69fa      	ldr	r2, [r7, #28]
   2778c:	68bb      	ldr	r3, [r7, #8]
   2778e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   27790:	46c0      	nop			; (mov r8, r8)
   27792:	68bb      	ldr	r3, [r7, #8]
   27794:	689b      	ldr	r3, [r3, #8]
   27796:	4a1f      	ldr	r2, [pc, #124]	; (27814 <tcc_init+0x36c>)
   27798:	4013      	ands	r3, r2
   2779a:	d1fa      	bne.n	27792 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2779c:	69ba      	ldr	r2, [r7, #24]
   2779e:	68bb      	ldr	r3, [r7, #8]
   277a0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   277a2:	46c0      	nop			; (mov r8, r8)
   277a4:	68bb      	ldr	r3, [r7, #8]
   277a6:	689b      	ldr	r3, [r3, #8]
   277a8:	2210      	movs	r2, #16
   277aa:	4013      	ands	r3, r2
   277ac:	d1fa      	bne.n	277a4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   277ae:	687b      	ldr	r3, [r7, #4]
   277b0:	681a      	ldr	r2, [r3, #0]
   277b2:	68bb      	ldr	r3, [r7, #8]
   277b4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   277b6:	46c0      	nop			; (mov r8, r8)
   277b8:	68bb      	ldr	r3, [r7, #8]
   277ba:	689b      	ldr	r3, [r3, #8]
   277bc:	4a16      	ldr	r2, [pc, #88]	; (27818 <tcc_init+0x370>)
   277be:	4013      	ands	r3, r2
   277c0:	d1fa      	bne.n	277b8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   277c2:	687b      	ldr	r3, [r7, #4]
   277c4:	685a      	ldr	r2, [r3, #4]
   277c6:	68bb      	ldr	r3, [r7, #8]
   277c8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   277ca:	2300      	movs	r3, #0
   277cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   277ce:	e03f      	b.n	27850 <tcc_init+0x3a8>
   277d0:	00026e11 	.word	0x00026e11
   277d4:	00037874 	.word	0x00037874
   277d8:	00026d8d 	.word	0x00026d8d
   277dc:	00037880 	.word	0x00037880
   277e0:	00037890 	.word	0x00037890
   277e4:	0002711d 	.word	0x0002711d
   277e8:	000271c1 	.word	0x000271c1
   277ec:	0002721d 	.word	0x0002721d
   277f0:	00027339 	.word	0x00027339
   277f4:	00027411 	.word	0x00027411
   277f8:	20005654 	.word	0x20005654
   277fc:	00026d75 	.word	0x00026d75
   27800:	00037870 	.word	0x00037870
   27804:	0002698d 	.word	0x0002698d
   27808:	000269d1 	.word	0x000269d1
   2780c:	00026de9 	.word	0x00026de9
   27810:	00026ced 	.word	0x00026ced
   27814:	00020040 	.word	0x00020040
   27818:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2781c:	46c0      	nop			; (mov r8, r8)
   2781e:	68bb      	ldr	r3, [r7, #8]
   27820:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   27822:	4912      	ldr	r1, [pc, #72]	; (2786c <tcc_init+0x3c4>)
   27824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27826:	4091      	lsls	r1, r2
   27828:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2782a:	4013      	ands	r3, r2
   2782c:	d1f7      	bne.n	2781e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2782e:	687a      	ldr	r2, [r7, #4]
   27830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27832:	3306      	adds	r3, #6
   27834:	009b      	lsls	r3, r3, #2
   27836:	18d3      	adds	r3, r2, r3
   27838:	3304      	adds	r3, #4
   2783a:	681a      	ldr	r2, [r3, #0]
   2783c:	68b9      	ldr	r1, [r7, #8]
   2783e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27840:	3310      	adds	r3, #16
   27842:	009b      	lsls	r3, r3, #2
   27844:	18cb      	adds	r3, r1, r3
   27846:	3304      	adds	r3, #4
   27848:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2784c:	3301      	adds	r3, #1
   2784e:	63fb      	str	r3, [r7, #60]	; 0x3c
   27850:	233b      	movs	r3, #59	; 0x3b
   27852:	18fb      	adds	r3, r7, r3
   27854:	781b      	ldrb	r3, [r3, #0]
   27856:	4a06      	ldr	r2, [pc, #24]	; (27870 <tcc_init+0x3c8>)
   27858:	5cd3      	ldrb	r3, [r2, r3]
   2785a:	001a      	movs	r2, r3
   2785c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2785e:	429a      	cmp	r2, r3
   27860:	dcdc      	bgt.n	2781c <tcc_init+0x374>
	}

	return STATUS_OK;
   27862:	2300      	movs	r3, #0
}
   27864:	0018      	movs	r0, r3
   27866:	46bd      	mov	sp, r7
   27868:	b011      	add	sp, #68	; 0x44
   2786a:	bd90      	pop	{r4, r7, pc}
   2786c:	00080100 	.word	0x00080100
   27870:	0003788c 	.word	0x0003788c

00027874 <system_interrupt_enable>:
{
   27874:	b580      	push	{r7, lr}
   27876:	b082      	sub	sp, #8
   27878:	af00      	add	r7, sp, #0
   2787a:	0002      	movs	r2, r0
   2787c:	1dfb      	adds	r3, r7, #7
   2787e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27880:	4b06      	ldr	r3, [pc, #24]	; (2789c <system_interrupt_enable+0x28>)
   27882:	1dfa      	adds	r2, r7, #7
   27884:	7812      	ldrb	r2, [r2, #0]
   27886:	0011      	movs	r1, r2
   27888:	221f      	movs	r2, #31
   2788a:	400a      	ands	r2, r1
   2788c:	2101      	movs	r1, #1
   2788e:	4091      	lsls	r1, r2
   27890:	000a      	movs	r2, r1
   27892:	601a      	str	r2, [r3, #0]
}
   27894:	46c0      	nop			; (mov r8, r8)
   27896:	46bd      	mov	sp, r7
   27898:	b002      	add	sp, #8
   2789a:	bd80      	pop	{r7, pc}
   2789c:	e000e100 	.word	0xe000e100

000278a0 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   278a0:	b580      	push	{r7, lr}
   278a2:	b082      	sub	sp, #8
   278a4:	af00      	add	r7, sp, #0
   278a6:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   278a8:	4a04      	ldr	r2, [pc, #16]	; (278bc <_tcc_interrupt_get_interrupt_vector+0x1c>)
   278aa:	687b      	ldr	r3, [r7, #4]
   278ac:	18d3      	adds	r3, r2, r3
   278ae:	781b      	ldrb	r3, [r3, #0]
   278b0:	b25b      	sxtb	r3, r3
}
   278b2:	0018      	movs	r0, r3
   278b4:	46bd      	mov	sp, r7
   278b6:	b002      	add	sp, #8
   278b8:	bd80      	pop	{r7, pc}
   278ba:	46c0      	nop			; (mov r8, r8)
   278bc:	200000cc 	.word	0x200000cc

000278c0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   278c0:	b580      	push	{r7, lr}
   278c2:	b084      	sub	sp, #16
   278c4:	af00      	add	r7, sp, #0
   278c6:	60f8      	str	r0, [r7, #12]
   278c8:	60b9      	str	r1, [r7, #8]
   278ca:	1dfb      	adds	r3, r7, #7
   278cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   278ce:	1dfb      	adds	r3, r7, #7
   278d0:	781b      	ldrb	r3, [r3, #0]
   278d2:	68fa      	ldr	r2, [r7, #12]
   278d4:	009b      	lsls	r3, r3, #2
   278d6:	18d3      	adds	r3, r2, r3
   278d8:	3304      	adds	r3, #4
   278da:	68ba      	ldr	r2, [r7, #8]
   278dc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   278de:	68fb      	ldr	r3, [r7, #12]
   278e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   278e2:	1dfb      	adds	r3, r7, #7
   278e4:	7819      	ldrb	r1, [r3, #0]
   278e6:	4b05      	ldr	r3, [pc, #20]	; (278fc <tcc_register_callback+0x3c>)
   278e8:	0089      	lsls	r1, r1, #2
   278ea:	58cb      	ldr	r3, [r1, r3]
   278ec:	431a      	orrs	r2, r3
   278ee:	68fb      	ldr	r3, [r7, #12]
   278f0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   278f2:	2300      	movs	r3, #0
}
   278f4:	0018      	movs	r0, r3
   278f6:	46bd      	mov	sp, r7
   278f8:	b004      	add	sp, #16
   278fa:	bd80      	pop	{r7, pc}
   278fc:	00037894 	.word	0x00037894

00027900 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   27900:	b580      	push	{r7, lr}
   27902:	b082      	sub	sp, #8
   27904:	af00      	add	r7, sp, #0
   27906:	6078      	str	r0, [r7, #4]
   27908:	000a      	movs	r2, r1
   2790a:	1cfb      	adds	r3, r7, #3
   2790c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2790e:	687b      	ldr	r3, [r7, #4]
   27910:	681b      	ldr	r3, [r3, #0]
   27912:	0018      	movs	r0, r3
   27914:	4b0f      	ldr	r3, [pc, #60]	; (27954 <tcc_enable_callback+0x54>)
   27916:	4798      	blx	r3
   27918:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2791a:	0018      	movs	r0, r3
   2791c:	4b0e      	ldr	r3, [pc, #56]	; (27958 <tcc_enable_callback+0x58>)
   2791e:	4798      	blx	r3
   27920:	0003      	movs	r3, r0
   27922:	0018      	movs	r0, r3
   27924:	4b0d      	ldr	r3, [pc, #52]	; (2795c <tcc_enable_callback+0x5c>)
   27926:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   27928:	687b      	ldr	r3, [r7, #4]
   2792a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2792c:	1cfb      	adds	r3, r7, #3
   2792e:	7819      	ldrb	r1, [r3, #0]
   27930:	4b0b      	ldr	r3, [pc, #44]	; (27960 <tcc_enable_callback+0x60>)
   27932:	0089      	lsls	r1, r1, #2
   27934:	58cb      	ldr	r3, [r1, r3]
   27936:	431a      	orrs	r2, r3
   27938:	687b      	ldr	r3, [r7, #4]
   2793a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2793c:	687b      	ldr	r3, [r7, #4]
   2793e:	681b      	ldr	r3, [r3, #0]
   27940:	1cfa      	adds	r2, r7, #3
   27942:	7811      	ldrb	r1, [r2, #0]
   27944:	4a06      	ldr	r2, [pc, #24]	; (27960 <tcc_enable_callback+0x60>)
   27946:	0089      	lsls	r1, r1, #2
   27948:	588a      	ldr	r2, [r1, r2]
   2794a:	629a      	str	r2, [r3, #40]	; 0x28
}
   2794c:	46c0      	nop			; (mov r8, r8)
   2794e:	46bd      	mov	sp, r7
   27950:	b002      	add	sp, #8
   27952:	bd80      	pop	{r7, pc}
   27954:	00026e11 	.word	0x00026e11
   27958:	000278a1 	.word	0x000278a1
   2795c:	00027875 	.word	0x00027875
   27960:	00037894 	.word	0x00037894

00027964 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   27964:	b580      	push	{r7, lr}
   27966:	af00      	add	r7, sp, #0
   27968:	2000      	movs	r0, #0
   2796a:	4b02      	ldr	r3, [pc, #8]	; (27974 <TCC0_Handler+0x10>)
   2796c:	4798      	blx	r3
   2796e:	46c0      	nop			; (mov r8, r8)
   27970:	46bd      	mov	sp, r7
   27972:	bd80      	pop	{r7, pc}
   27974:	000279a1 	.word	0x000279a1

00027978 <TCC1_Handler>:
   27978:	b580      	push	{r7, lr}
   2797a:	af00      	add	r7, sp, #0
   2797c:	2001      	movs	r0, #1
   2797e:	4b02      	ldr	r3, [pc, #8]	; (27988 <TCC1_Handler+0x10>)
   27980:	4798      	blx	r3
   27982:	46c0      	nop			; (mov r8, r8)
   27984:	46bd      	mov	sp, r7
   27986:	bd80      	pop	{r7, pc}
   27988:	000279a1 	.word	0x000279a1

0002798c <TCC2_Handler>:
   2798c:	b580      	push	{r7, lr}
   2798e:	af00      	add	r7, sp, #0
   27990:	2002      	movs	r0, #2
   27992:	4b02      	ldr	r3, [pc, #8]	; (2799c <TCC2_Handler+0x10>)
   27994:	4798      	blx	r3
   27996:	46c0      	nop			; (mov r8, r8)
   27998:	46bd      	mov	sp, r7
   2799a:	bd80      	pop	{r7, pc}
   2799c:	000279a1 	.word	0x000279a1

000279a0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   279a0:	b580      	push	{r7, lr}
   279a2:	b086      	sub	sp, #24
   279a4:	af00      	add	r7, sp, #0
   279a6:	0002      	movs	r2, r0
   279a8:	1dfb      	adds	r3, r7, #7
   279aa:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   279ac:	1dfb      	adds	r3, r7, #7
   279ae:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   279b0:	4b18      	ldr	r3, [pc, #96]	; (27a14 <_tcc_interrupt_handler+0x74>)
   279b2:	0092      	lsls	r2, r2, #2
   279b4:	58d3      	ldr	r3, [r2, r3]
   279b6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   279b8:	693b      	ldr	r3, [r7, #16]
   279ba:	681b      	ldr	r3, [r3, #0]
   279bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   279be:	693b      	ldr	r3, [r7, #16]
   279c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   279c2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   279c4:	693b      	ldr	r3, [r7, #16]
   279c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   279c8:	4013      	ands	r3, r2
   279ca:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   279cc:	2300      	movs	r3, #0
   279ce:	617b      	str	r3, [r7, #20]
   279d0:	e019      	b.n	27a06 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   279d2:	4b11      	ldr	r3, [pc, #68]	; (27a18 <_tcc_interrupt_handler+0x78>)
   279d4:	697a      	ldr	r2, [r7, #20]
   279d6:	0092      	lsls	r2, r2, #2
   279d8:	58d3      	ldr	r3, [r2, r3]
   279da:	68fa      	ldr	r2, [r7, #12]
   279dc:	4013      	ands	r3, r2
   279de:	d00f      	beq.n	27a00 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   279e0:	693a      	ldr	r2, [r7, #16]
   279e2:	697b      	ldr	r3, [r7, #20]
   279e4:	009b      	lsls	r3, r3, #2
   279e6:	18d3      	adds	r3, r2, r3
   279e8:	3304      	adds	r3, #4
   279ea:	681b      	ldr	r3, [r3, #0]
   279ec:	693a      	ldr	r2, [r7, #16]
   279ee:	0010      	movs	r0, r2
   279f0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   279f2:	693b      	ldr	r3, [r7, #16]
   279f4:	681b      	ldr	r3, [r3, #0]
   279f6:	4a08      	ldr	r2, [pc, #32]	; (27a18 <_tcc_interrupt_handler+0x78>)
   279f8:	6979      	ldr	r1, [r7, #20]
   279fa:	0089      	lsls	r1, r1, #2
   279fc:	588a      	ldr	r2, [r1, r2]
   279fe:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   27a00:	697b      	ldr	r3, [r7, #20]
   27a02:	3301      	adds	r3, #1
   27a04:	617b      	str	r3, [r7, #20]
   27a06:	697b      	ldr	r3, [r7, #20]
   27a08:	2b0b      	cmp	r3, #11
   27a0a:	dde2      	ble.n	279d2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   27a0c:	46c0      	nop			; (mov r8, r8)
   27a0e:	46bd      	mov	sp, r7
   27a10:	b006      	add	sp, #24
   27a12:	bd80      	pop	{r7, pc}
   27a14:	20005654 	.word	0x20005654
   27a18:	00037894 	.word	0x00037894

00027a1c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   27a1c:	b580      	push	{r7, lr}
   27a1e:	b082      	sub	sp, #8
   27a20:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   27a22:	4b2f      	ldr	r3, [pc, #188]	; (27ae0 <Reset_Handler+0xc4>)
   27a24:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   27a26:	4b2f      	ldr	r3, [pc, #188]	; (27ae4 <Reset_Handler+0xc8>)
   27a28:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   27a2a:	687a      	ldr	r2, [r7, #4]
   27a2c:	683b      	ldr	r3, [r7, #0]
   27a2e:	429a      	cmp	r2, r3
   27a30:	d00c      	beq.n	27a4c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   27a32:	e007      	b.n	27a44 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   27a34:	683b      	ldr	r3, [r7, #0]
   27a36:	1d1a      	adds	r2, r3, #4
   27a38:	603a      	str	r2, [r7, #0]
   27a3a:	687a      	ldr	r2, [r7, #4]
   27a3c:	1d11      	adds	r1, r2, #4
   27a3e:	6079      	str	r1, [r7, #4]
   27a40:	6812      	ldr	r2, [r2, #0]
   27a42:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   27a44:	683a      	ldr	r2, [r7, #0]
   27a46:	4b28      	ldr	r3, [pc, #160]	; (27ae8 <Reset_Handler+0xcc>)
   27a48:	429a      	cmp	r2, r3
   27a4a:	d3f3      	bcc.n	27a34 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   27a4c:	4b27      	ldr	r3, [pc, #156]	; (27aec <Reset_Handler+0xd0>)
   27a4e:	603b      	str	r3, [r7, #0]
   27a50:	e004      	b.n	27a5c <Reset_Handler+0x40>
                *pDest++ = 0;
   27a52:	683b      	ldr	r3, [r7, #0]
   27a54:	1d1a      	adds	r2, r3, #4
   27a56:	603a      	str	r2, [r7, #0]
   27a58:	2200      	movs	r2, #0
   27a5a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   27a5c:	683a      	ldr	r2, [r7, #0]
   27a5e:	4b24      	ldr	r3, [pc, #144]	; (27af0 <Reset_Handler+0xd4>)
   27a60:	429a      	cmp	r2, r3
   27a62:	d3f6      	bcc.n	27a52 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   27a64:	4b23      	ldr	r3, [pc, #140]	; (27af4 <Reset_Handler+0xd8>)
   27a66:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   27a68:	4b23      	ldr	r3, [pc, #140]	; (27af8 <Reset_Handler+0xdc>)
   27a6a:	687a      	ldr	r2, [r7, #4]
   27a6c:	21ff      	movs	r1, #255	; 0xff
   27a6e:	438a      	bics	r2, r1
   27a70:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   27a72:	4a22      	ldr	r2, [pc, #136]	; (27afc <Reset_Handler+0xe0>)
   27a74:	2390      	movs	r3, #144	; 0x90
   27a76:	005b      	lsls	r3, r3, #1
   27a78:	2102      	movs	r1, #2
   27a7a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   27a7c:	4a20      	ldr	r2, [pc, #128]	; (27b00 <Reset_Handler+0xe4>)
   27a7e:	78d3      	ldrb	r3, [r2, #3]
   27a80:	2103      	movs	r1, #3
   27a82:	438b      	bics	r3, r1
   27a84:	1c19      	adds	r1, r3, #0
   27a86:	2302      	movs	r3, #2
   27a88:	430b      	orrs	r3, r1
   27a8a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   27a8c:	4a1c      	ldr	r2, [pc, #112]	; (27b00 <Reset_Handler+0xe4>)
   27a8e:	78d3      	ldrb	r3, [r2, #3]
   27a90:	210c      	movs	r1, #12
   27a92:	438b      	bics	r3, r1
   27a94:	1c19      	adds	r1, r3, #0
   27a96:	2308      	movs	r3, #8
   27a98:	430b      	orrs	r3, r1
   27a9a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   27a9c:	4a19      	ldr	r2, [pc, #100]	; (27b04 <Reset_Handler+0xe8>)
   27a9e:	7b93      	ldrb	r3, [r2, #14]
   27aa0:	2130      	movs	r1, #48	; 0x30
   27aa2:	438b      	bics	r3, r1
   27aa4:	1c19      	adds	r1, r3, #0
   27aa6:	2320      	movs	r3, #32
   27aa8:	430b      	orrs	r3, r1
   27aaa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   27aac:	4a15      	ldr	r2, [pc, #84]	; (27b04 <Reset_Handler+0xe8>)
   27aae:	7b93      	ldrb	r3, [r2, #14]
   27ab0:	210c      	movs	r1, #12
   27ab2:	438b      	bics	r3, r1
   27ab4:	1c19      	adds	r1, r3, #0
   27ab6:	2308      	movs	r3, #8
   27ab8:	430b      	orrs	r3, r1
   27aba:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   27abc:	4a11      	ldr	r2, [pc, #68]	; (27b04 <Reset_Handler+0xe8>)
   27abe:	7b93      	ldrb	r3, [r2, #14]
   27ac0:	2103      	movs	r1, #3
   27ac2:	438b      	bics	r3, r1
   27ac4:	1c19      	adds	r1, r3, #0
   27ac6:	2302      	movs	r3, #2
   27ac8:	430b      	orrs	r3, r1
   27aca:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   27acc:	4a0e      	ldr	r2, [pc, #56]	; (27b08 <Reset_Handler+0xec>)
   27ace:	6853      	ldr	r3, [r2, #4]
   27ad0:	2180      	movs	r1, #128	; 0x80
   27ad2:	430b      	orrs	r3, r1
   27ad4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   27ad6:	4b0d      	ldr	r3, [pc, #52]	; (27b0c <Reset_Handler+0xf0>)
   27ad8:	4798      	blx	r3

        /* Branch to main function */
        main();
   27ada:	4b0d      	ldr	r3, [pc, #52]	; (27b10 <Reset_Handler+0xf4>)
   27adc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   27ade:	e7fe      	b.n	27ade <Reset_Handler+0xc2>
   27ae0:	00038638 	.word	0x00038638
   27ae4:	20000000 	.word	0x20000000
   27ae8:	200002a4 	.word	0x200002a4
   27aec:	200002b0 	.word	0x200002b0
   27af0:	200056c4 	.word	0x200056c4
   27af4:	0000f000 	.word	0x0000f000
   27af8:	e000ed00 	.word	0xe000ed00
   27afc:	41007000 	.word	0x41007000
   27b00:	41005000 	.word	0x41005000
   27b04:	41004800 	.word	0x41004800
   27b08:	41004000 	.word	0x41004000
   27b0c:	00032801 	.word	0x00032801
   27b10:	0002fbad 	.word	0x0002fbad

00027b14 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   27b14:	b580      	push	{r7, lr}
   27b16:	af00      	add	r7, sp, #0
  __asm volatile (
   27b18:	2004      	movs	r0, #4
   27b1a:	4671      	mov	r1, lr
   27b1c:	4208      	tst	r0, r1
   27b1e:	d002      	beq.n	27b26 <_MSP>
   27b20:	f3ef 8009 	mrs	r0, PSP
   27b24:	e001      	b.n	27b2a <_HALT>

00027b26 <_MSP>:
   27b26:	f3ef 8008 	mrs	r0, MSP

00027b2a <_HALT>:
   27b2a:	6941      	ldr	r1, [r0, #20]
   27b2c:	e004      	b.n	27b38 <HardFault_HandlerC>
   27b2e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   27b30:	46c0      	nop			; (mov r8, r8)
   27b32:	46bd      	mov	sp, r7
   27b34:	bd80      	pop	{r7, pc}
	...

00027b38 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   27b38:	b580      	push	{r7, lr}
   27b3a:	b090      	sub	sp, #64	; 0x40
   27b3c:	af00      	add	r7, sp, #0
   27b3e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   27b40:	687b      	ldr	r3, [r7, #4]
   27b42:	681b      	ldr	r3, [r3, #0]
   27b44:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   27b46:	687b      	ldr	r3, [r7, #4]
   27b48:	685b      	ldr	r3, [r3, #4]
   27b4a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   27b4c:	687b      	ldr	r3, [r7, #4]
   27b4e:	689b      	ldr	r3, [r3, #8]
   27b50:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   27b52:	687b      	ldr	r3, [r7, #4]
   27b54:	68db      	ldr	r3, [r3, #12]
   27b56:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   27b58:	687b      	ldr	r3, [r7, #4]
   27b5a:	691b      	ldr	r3, [r3, #16]
   27b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   27b5e:	687b      	ldr	r3, [r7, #4]
   27b60:	695b      	ldr	r3, [r3, #20]
   27b62:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   27b64:	687b      	ldr	r3, [r7, #4]
   27b66:	699b      	ldr	r3, [r3, #24]
   27b68:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   27b6a:	687b      	ldr	r3, [r7, #4]
   27b6c:	69db      	ldr	r3, [r3, #28]
   27b6e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   27b70:	4b0b      	ldr	r3, [pc, #44]	; (27ba0 <HardFault_HandlerC+0x68>)
   27b72:	681b      	ldr	r3, [r3, #0]
   27b74:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   27b76:	4b0b      	ldr	r3, [pc, #44]	; (27ba4 <HardFault_HandlerC+0x6c>)
   27b78:	681b      	ldr	r3, [r3, #0]
   27b7a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   27b7c:	4b0a      	ldr	r3, [pc, #40]	; (27ba8 <HardFault_HandlerC+0x70>)
   27b7e:	681b      	ldr	r3, [r3, #0]
   27b80:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   27b82:	4b0a      	ldr	r3, [pc, #40]	; (27bac <HardFault_HandlerC+0x74>)
   27b84:	681b      	ldr	r3, [r3, #0]
   27b86:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   27b88:	4b09      	ldr	r3, [pc, #36]	; (27bb0 <HardFault_HandlerC+0x78>)
   27b8a:	681b      	ldr	r3, [r3, #0]
   27b8c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   27b8e:	4b09      	ldr	r3, [pc, #36]	; (27bb4 <HardFault_HandlerC+0x7c>)
   27b90:	681b      	ldr	r3, [r3, #0]
   27b92:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   27b94:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   27b96:	46c0      	nop			; (mov r8, r8)
   27b98:	46bd      	mov	sp, r7
   27b9a:	b010      	add	sp, #64	; 0x40
   27b9c:	bd80      	pop	{r7, pc}
   27b9e:	46c0      	nop			; (mov r8, r8)
   27ba0:	e000ed28 	.word	0xe000ed28
   27ba4:	e000ed2c 	.word	0xe000ed2c
   27ba8:	e000ed30 	.word	0xe000ed30
   27bac:	e000ed3c 	.word	0xe000ed3c
   27bb0:	e000ed34 	.word	0xe000ed34
   27bb4:	e000ed38 	.word	0xe000ed38

00027bb8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   27bb8:	b580      	push	{r7, lr}
   27bba:	b086      	sub	sp, #24
   27bbc:	af00      	add	r7, sp, #0
   27bbe:	60f8      	str	r0, [r7, #12]
   27bc0:	60b9      	str	r1, [r7, #8]
   27bc2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   27bc4:	2300      	movs	r3, #0
   27bc6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   27bc8:	68fb      	ldr	r3, [r7, #12]
   27bca:	2b00      	cmp	r3, #0
   27bcc:	d012      	beq.n	27bf4 <_read+0x3c>
		return -1;
   27bce:	2301      	movs	r3, #1
   27bd0:	425b      	negs	r3, r3
   27bd2:	e013      	b.n	27bfc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   27bd4:	4b0b      	ldr	r3, [pc, #44]	; (27c04 <_read+0x4c>)
   27bd6:	681a      	ldr	r2, [r3, #0]
   27bd8:	4b0b      	ldr	r3, [pc, #44]	; (27c08 <_read+0x50>)
   27bda:	681b      	ldr	r3, [r3, #0]
   27bdc:	68b9      	ldr	r1, [r7, #8]
   27bde:	0018      	movs	r0, r3
   27be0:	4790      	blx	r2
		ptr++;
   27be2:	68bb      	ldr	r3, [r7, #8]
   27be4:	3301      	adds	r3, #1
   27be6:	60bb      	str	r3, [r7, #8]
		nChars++;
   27be8:	697b      	ldr	r3, [r7, #20]
   27bea:	3301      	adds	r3, #1
   27bec:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   27bee:	687b      	ldr	r3, [r7, #4]
   27bf0:	3b01      	subs	r3, #1
   27bf2:	607b      	str	r3, [r7, #4]
   27bf4:	687b      	ldr	r3, [r7, #4]
   27bf6:	2b00      	cmp	r3, #0
   27bf8:	dcec      	bgt.n	27bd4 <_read+0x1c>
	}
	return nChars;
   27bfa:	697b      	ldr	r3, [r7, #20]
}
   27bfc:	0018      	movs	r0, r3
   27bfe:	46bd      	mov	sp, r7
   27c00:	b006      	add	sp, #24
   27c02:	bd80      	pop	{r7, pc}
   27c04:	20005660 	.word	0x20005660
   27c08:	20005668 	.word	0x20005668

00027c0c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   27c0c:	b580      	push	{r7, lr}
   27c0e:	b086      	sub	sp, #24
   27c10:	af00      	add	r7, sp, #0
   27c12:	60f8      	str	r0, [r7, #12]
   27c14:	60b9      	str	r1, [r7, #8]
   27c16:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   27c18:	2300      	movs	r3, #0
   27c1a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   27c1c:	68fb      	ldr	r3, [r7, #12]
   27c1e:	2b01      	cmp	r3, #1
   27c20:	d01d      	beq.n	27c5e <_write+0x52>
   27c22:	68fb      	ldr	r3, [r7, #12]
   27c24:	2b02      	cmp	r3, #2
   27c26:	d01a      	beq.n	27c5e <_write+0x52>
   27c28:	68fb      	ldr	r3, [r7, #12]
   27c2a:	2b03      	cmp	r3, #3
   27c2c:	d017      	beq.n	27c5e <_write+0x52>
		return -1;
   27c2e:	2301      	movs	r3, #1
   27c30:	425b      	negs	r3, r3
   27c32:	e018      	b.n	27c66 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   27c34:	4b0e      	ldr	r3, [pc, #56]	; (27c70 <_write+0x64>)
   27c36:	681a      	ldr	r2, [r3, #0]
   27c38:	4b0e      	ldr	r3, [pc, #56]	; (27c74 <_write+0x68>)
   27c3a:	6818      	ldr	r0, [r3, #0]
   27c3c:	68bb      	ldr	r3, [r7, #8]
   27c3e:	1c59      	adds	r1, r3, #1
   27c40:	60b9      	str	r1, [r7, #8]
   27c42:	781b      	ldrb	r3, [r3, #0]
   27c44:	0019      	movs	r1, r3
   27c46:	4790      	blx	r2
   27c48:	1e03      	subs	r3, r0, #0
   27c4a:	da02      	bge.n	27c52 <_write+0x46>
			return -1;
   27c4c:	2301      	movs	r3, #1
   27c4e:	425b      	negs	r3, r3
   27c50:	e009      	b.n	27c66 <_write+0x5a>
		}
		++nChars;
   27c52:	697b      	ldr	r3, [r7, #20]
   27c54:	3301      	adds	r3, #1
   27c56:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   27c58:	687b      	ldr	r3, [r7, #4]
   27c5a:	3b01      	subs	r3, #1
   27c5c:	607b      	str	r3, [r7, #4]
   27c5e:	687b      	ldr	r3, [r7, #4]
   27c60:	2b00      	cmp	r3, #0
   27c62:	d1e7      	bne.n	27c34 <_write+0x28>
	}
	return nChars;
   27c64:	697b      	ldr	r3, [r7, #20]
}
   27c66:	0018      	movs	r0, r3
   27c68:	46bd      	mov	sp, r7
   27c6a:	b006      	add	sp, #24
   27c6c:	bd80      	pop	{r7, pc}
   27c6e:	46c0      	nop			; (mov r8, r8)
   27c70:	20005664 	.word	0x20005664
   27c74:	20005668 	.word	0x20005668

00027c78 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   27c78:	b580      	push	{r7, lr}
   27c7a:	b084      	sub	sp, #16
   27c7c:	af00      	add	r7, sp, #0
   27c7e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   27c80:	4b0a      	ldr	r3, [pc, #40]	; (27cac <_sbrk+0x34>)
   27c82:	681b      	ldr	r3, [r3, #0]
   27c84:	2b00      	cmp	r3, #0
   27c86:	d102      	bne.n	27c8e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   27c88:	4b08      	ldr	r3, [pc, #32]	; (27cac <_sbrk+0x34>)
   27c8a:	4a09      	ldr	r2, [pc, #36]	; (27cb0 <_sbrk+0x38>)
   27c8c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   27c8e:	4b07      	ldr	r3, [pc, #28]	; (27cac <_sbrk+0x34>)
   27c90:	681b      	ldr	r3, [r3, #0]
   27c92:	60fb      	str	r3, [r7, #12]

	heap += incr;
   27c94:	4b05      	ldr	r3, [pc, #20]	; (27cac <_sbrk+0x34>)
   27c96:	681a      	ldr	r2, [r3, #0]
   27c98:	687b      	ldr	r3, [r7, #4]
   27c9a:	18d2      	adds	r2, r2, r3
   27c9c:	4b03      	ldr	r3, [pc, #12]	; (27cac <_sbrk+0x34>)
   27c9e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   27ca0:	68fb      	ldr	r3, [r7, #12]
}
   27ca2:	0018      	movs	r0, r3
   27ca4:	46bd      	mov	sp, r7
   27ca6:	b004      	add	sp, #16
   27ca8:	bd80      	pop	{r7, pc}
   27caa:	46c0      	nop			; (mov r8, r8)
   27cac:	20003d70 	.word	0x20003d70
   27cb0:	200076c8 	.word	0x200076c8

00027cb4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   27cb4:	b580      	push	{r7, lr}
   27cb6:	b082      	sub	sp, #8
   27cb8:	af00      	add	r7, sp, #0
   27cba:	6078      	str	r0, [r7, #4]
	return -1;
   27cbc:	2301      	movs	r3, #1
   27cbe:	425b      	negs	r3, r3
}
   27cc0:	0018      	movs	r0, r3
   27cc2:	46bd      	mov	sp, r7
   27cc4:	b002      	add	sp, #8
   27cc6:	bd80      	pop	{r7, pc}

00027cc8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   27cc8:	b580      	push	{r7, lr}
   27cca:	b082      	sub	sp, #8
   27ccc:	af00      	add	r7, sp, #0
   27cce:	6078      	str	r0, [r7, #4]
   27cd0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   27cd2:	683b      	ldr	r3, [r7, #0]
   27cd4:	2280      	movs	r2, #128	; 0x80
   27cd6:	0192      	lsls	r2, r2, #6
   27cd8:	605a      	str	r2, [r3, #4]

	return 0;
   27cda:	2300      	movs	r3, #0
}
   27cdc:	0018      	movs	r0, r3
   27cde:	46bd      	mov	sp, r7
   27ce0:	b002      	add	sp, #8
   27ce2:	bd80      	pop	{r7, pc}

00027ce4 <_isatty>:

extern int _isatty(int file)
{
   27ce4:	b580      	push	{r7, lr}
   27ce6:	b082      	sub	sp, #8
   27ce8:	af00      	add	r7, sp, #0
   27cea:	6078      	str	r0, [r7, #4]
	return 1;
   27cec:	2301      	movs	r3, #1
}
   27cee:	0018      	movs	r0, r3
   27cf0:	46bd      	mov	sp, r7
   27cf2:	b002      	add	sp, #8
   27cf4:	bd80      	pop	{r7, pc}

00027cf6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   27cf6:	b580      	push	{r7, lr}
   27cf8:	b084      	sub	sp, #16
   27cfa:	af00      	add	r7, sp, #0
   27cfc:	60f8      	str	r0, [r7, #12]
   27cfe:	60b9      	str	r1, [r7, #8]
   27d00:	607a      	str	r2, [r7, #4]
	return 0;
   27d02:	2300      	movs	r3, #0
}
   27d04:	0018      	movs	r0, r3
   27d06:	46bd      	mov	sp, r7
   27d08:	b004      	add	sp, #16
   27d0a:	bd80      	pop	{r7, pc}

00027d0c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   27d0c:	b580      	push	{r7, lr}
   27d0e:	b082      	sub	sp, #8
   27d10:	af00      	add	r7, sp, #0
   27d12:	6078      	str	r0, [r7, #4]
	time->second = 0;
   27d14:	687b      	ldr	r3, [r7, #4]
   27d16:	2200      	movs	r2, #0
   27d18:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   27d1a:	687b      	ldr	r3, [r7, #4]
   27d1c:	2200      	movs	r2, #0
   27d1e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   27d20:	687b      	ldr	r3, [r7, #4]
   27d22:	2200      	movs	r2, #0
   27d24:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   27d26:	687b      	ldr	r3, [r7, #4]
   27d28:	2200      	movs	r2, #0
   27d2a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   27d2c:	687b      	ldr	r3, [r7, #4]
   27d2e:	2201      	movs	r2, #1
   27d30:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   27d32:	687b      	ldr	r3, [r7, #4]
   27d34:	2201      	movs	r2, #1
   27d36:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   27d38:	687b      	ldr	r3, [r7, #4]
   27d3a:	22fa      	movs	r2, #250	; 0xfa
   27d3c:	00d2      	lsls	r2, r2, #3
   27d3e:	80da      	strh	r2, [r3, #6]
}
   27d40:	46c0      	nop			; (mov r8, r8)
   27d42:	46bd      	mov	sp, r7
   27d44:	b002      	add	sp, #8
   27d46:	bd80      	pop	{r7, pc}

00027d48 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   27d48:	b580      	push	{r7, lr}
   27d4a:	b086      	sub	sp, #24
   27d4c:	af00      	add	r7, sp, #0
   27d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   27d50:	230c      	movs	r3, #12
   27d52:	18fb      	adds	r3, r7, r3
   27d54:	0018      	movs	r0, r3
   27d56:	4b23      	ldr	r3, [pc, #140]	; (27de4 <rtc_calendar_get_config_defaults+0x9c>)
   27d58:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   27d5a:	687b      	ldr	r3, [r7, #4]
   27d5c:	22a0      	movs	r2, #160	; 0xa0
   27d5e:	0112      	lsls	r2, r2, #4
   27d60:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   27d62:	687b      	ldr	r3, [r7, #4]
   27d64:	2200      	movs	r2, #0
   27d66:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   27d68:	687b      	ldr	r3, [r7, #4]
   27d6a:	2200      	movs	r2, #0
   27d6c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   27d6e:	687b      	ldr	r3, [r7, #4]
   27d70:	2200      	movs	r2, #0
   27d72:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   27d74:	687b      	ldr	r3, [r7, #4]
   27d76:	22fa      	movs	r2, #250	; 0xfa
   27d78:	00d2      	lsls	r2, r2, #3
   27d7a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27d7c:	2317      	movs	r3, #23
   27d7e:	18fb      	adds	r3, r7, r3
   27d80:	2200      	movs	r2, #0
   27d82:	701a      	strb	r2, [r3, #0]
   27d84:	e025      	b.n	27dd2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   27d86:	2317      	movs	r3, #23
   27d88:	18fb      	adds	r3, r7, r3
   27d8a:	781a      	ldrb	r2, [r3, #0]
   27d8c:	6879      	ldr	r1, [r7, #4]
   27d8e:	2008      	movs	r0, #8
   27d90:	0013      	movs	r3, r2
   27d92:	009b      	lsls	r3, r3, #2
   27d94:	189b      	adds	r3, r3, r2
   27d96:	005b      	lsls	r3, r3, #1
   27d98:	18cb      	adds	r3, r1, r3
   27d9a:	181a      	adds	r2, r3, r0
   27d9c:	230c      	movs	r3, #12
   27d9e:	18fb      	adds	r3, r7, r3
   27da0:	0010      	movs	r0, r2
   27da2:	0019      	movs	r1, r3
   27da4:	2308      	movs	r3, #8
   27da6:	001a      	movs	r2, r3
   27da8:	4b0f      	ldr	r3, [pc, #60]	; (27de8 <rtc_calendar_get_config_defaults+0xa0>)
   27daa:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   27dac:	2317      	movs	r3, #23
   27dae:	18fb      	adds	r3, r7, r3
   27db0:	781a      	ldrb	r2, [r3, #0]
   27db2:	6879      	ldr	r1, [r7, #4]
   27db4:	0013      	movs	r3, r2
   27db6:	009b      	lsls	r3, r3, #2
   27db8:	189b      	adds	r3, r3, r2
   27dba:	005b      	lsls	r3, r3, #1
   27dbc:	18cb      	adds	r3, r1, r3
   27dbe:	3310      	adds	r3, #16
   27dc0:	2206      	movs	r2, #6
   27dc2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27dc4:	2317      	movs	r3, #23
   27dc6:	18fb      	adds	r3, r7, r3
   27dc8:	781a      	ldrb	r2, [r3, #0]
   27dca:	2317      	movs	r3, #23
   27dcc:	18fb      	adds	r3, r7, r3
   27dce:	3201      	adds	r2, #1
   27dd0:	701a      	strb	r2, [r3, #0]
   27dd2:	2317      	movs	r3, #23
   27dd4:	18fb      	adds	r3, r7, r3
   27dd6:	781b      	ldrb	r3, [r3, #0]
   27dd8:	2b00      	cmp	r3, #0
   27dda:	d0d4      	beq.n	27d86 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   27ddc:	46c0      	nop			; (mov r8, r8)
   27dde:	46bd      	mov	sp, r7
   27de0:	b006      	add	sp, #24
   27de2:	bd80      	pop	{r7, pc}
   27de4:	00027d0d 	.word	0x00027d0d
   27de8:	00032871 	.word	0x00032871

00027dec <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   27dec:	b580      	push	{r7, lr}
   27dee:	b088      	sub	sp, #32
   27df0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   27df2:	230c      	movs	r3, #12
   27df4:	18fb      	adds	r3, r7, r3
   27df6:	0018      	movs	r0, r3
   27df8:	4b1a      	ldr	r3, [pc, #104]	; (27e64 <configure_rtc_calendar+0x78>)
   27dfa:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   27dfc:	1d3b      	adds	r3, r7, #4
   27dfe:	0018      	movs	r0, r3
   27e00:	4b19      	ldr	r3, [pc, #100]	; (27e68 <configure_rtc_calendar+0x7c>)
   27e02:	4798      	blx	r3
	init_time.year   = 2014;
   27e04:	1d3b      	adds	r3, r7, #4
   27e06:	4a19      	ldr	r2, [pc, #100]	; (27e6c <configure_rtc_calendar+0x80>)
   27e08:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   27e0a:	1d3b      	adds	r3, r7, #4
   27e0c:	2201      	movs	r2, #1
   27e0e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   27e10:	1d3b      	adds	r3, r7, #4
   27e12:	2201      	movs	r2, #1
   27e14:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   27e16:	1d3b      	adds	r3, r7, #4
   27e18:	2200      	movs	r2, #0
   27e1a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   27e1c:	1d3b      	adds	r3, r7, #4
   27e1e:	2200      	movs	r2, #0
   27e20:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   27e22:	1d3b      	adds	r3, r7, #4
   27e24:	2204      	movs	r2, #4
   27e26:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   27e28:	230c      	movs	r3, #12
   27e2a:	18fb      	adds	r3, r7, r3
   27e2c:	2201      	movs	r2, #1
   27e2e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   27e30:	230c      	movs	r3, #12
   27e32:	18fb      	adds	r3, r7, r3
   27e34:	1d3a      	adds	r2, r7, #4
   27e36:	3308      	adds	r3, #8
   27e38:	ca03      	ldmia	r2!, {r0, r1}
   27e3a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   27e3c:	230c      	movs	r3, #12
   27e3e:	18fb      	adds	r3, r7, r3
   27e40:	2206      	movs	r2, #6
   27e42:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   27e44:	230c      	movs	r3, #12
   27e46:	18fa      	adds	r2, r7, r3
   27e48:	4909      	ldr	r1, [pc, #36]	; (27e70 <configure_rtc_calendar+0x84>)
   27e4a:	4b0a      	ldr	r3, [pc, #40]	; (27e74 <configure_rtc_calendar+0x88>)
   27e4c:	0018      	movs	r0, r3
   27e4e:	4b0a      	ldr	r3, [pc, #40]	; (27e78 <configure_rtc_calendar+0x8c>)
   27e50:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   27e52:	4b08      	ldr	r3, [pc, #32]	; (27e74 <configure_rtc_calendar+0x88>)
   27e54:	0018      	movs	r0, r3
   27e56:	4b09      	ldr	r3, [pc, #36]	; (27e7c <configure_rtc_calendar+0x90>)
   27e58:	4798      	blx	r3
}
   27e5a:	46c0      	nop			; (mov r8, r8)
   27e5c:	46bd      	mov	sp, r7
   27e5e:	b008      	add	sp, #32
   27e60:	bd80      	pop	{r7, pc}
   27e62:	46c0      	nop			; (mov r8, r8)
   27e64:	00027d49 	.word	0x00027d49
   27e68:	00027d0d 	.word	0x00027d0d
   27e6c:	000007de 	.word	0x000007de
   27e70:	40001400 	.word	0x40001400
   27e74:	2000566c 	.word	0x2000566c
   27e78:	00023729 	.word	0x00023729
   27e7c:	00023455 	.word	0x00023455

00027e80 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   27e80:	b590      	push	{r4, r7, lr}
   27e82:	b085      	sub	sp, #20
   27e84:	af00      	add	r7, sp, #0
   27e86:	0002      	movs	r2, r0
   27e88:	1dfb      	adds	r3, r7, #7
   27e8a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   27e8c:	4b1a      	ldr	r3, [pc, #104]	; (27ef8 <disk_initialize+0x78>)
   27e8e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   27e90:	1dfb      	adds	r3, r7, #7
   27e92:	781b      	ldrb	r3, [r3, #0]
   27e94:	2b01      	cmp	r3, #1
   27e96:	d901      	bls.n	27e9c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   27e98:	2301      	movs	r3, #1
   27e9a:	e029      	b.n	27ef0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   27e9c:	2300      	movs	r3, #0
   27e9e:	60fb      	str	r3, [r7, #12]
   27ea0:	e010      	b.n	27ec4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   27ea2:	230b      	movs	r3, #11
   27ea4:	18fc      	adds	r4, r7, r3
   27ea6:	1dfb      	adds	r3, r7, #7
   27ea8:	781b      	ldrb	r3, [r3, #0]
   27eaa:	0018      	movs	r0, r3
   27eac:	4b13      	ldr	r3, [pc, #76]	; (27efc <disk_initialize+0x7c>)
   27eae:	4798      	blx	r3
   27eb0:	0003      	movs	r3, r0
   27eb2:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   27eb4:	230b      	movs	r3, #11
   27eb6:	18fb      	adds	r3, r7, r3
   27eb8:	781b      	ldrb	r3, [r3, #0]
   27eba:	2b03      	cmp	r3, #3
   27ebc:	d106      	bne.n	27ecc <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   27ebe:	68fb      	ldr	r3, [r7, #12]
   27ec0:	3301      	adds	r3, #1
   27ec2:	60fb      	str	r3, [r7, #12]
   27ec4:	68fb      	ldr	r3, [r7, #12]
   27ec6:	2b01      	cmp	r3, #1
   27ec8:	ddeb      	ble.n	27ea2 <disk_initialize+0x22>
   27eca:	e000      	b.n	27ece <disk_initialize+0x4e>
			break;
   27ecc:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   27ece:	230b      	movs	r3, #11
   27ed0:	18fb      	adds	r3, r7, r3
   27ed2:	781b      	ldrb	r3, [r3, #0]
   27ed4:	2b00      	cmp	r3, #0
   27ed6:	d001      	beq.n	27edc <disk_initialize+0x5c>
		return STA_NOINIT;
   27ed8:	2301      	movs	r3, #1
   27eda:	e009      	b.n	27ef0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   27edc:	1dfb      	adds	r3, r7, #7
   27ede:	781b      	ldrb	r3, [r3, #0]
   27ee0:	0018      	movs	r0, r3
   27ee2:	4b07      	ldr	r3, [pc, #28]	; (27f00 <disk_initialize+0x80>)
   27ee4:	4798      	blx	r3
   27ee6:	1e03      	subs	r3, r0, #0
   27ee8:	d001      	beq.n	27eee <disk_initialize+0x6e>
		return STA_PROTECT;
   27eea:	2304      	movs	r3, #4
   27eec:	e000      	b.n	27ef0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   27eee:	2300      	movs	r3, #0
}
   27ef0:	0018      	movs	r0, r3
   27ef2:	46bd      	mov	sp, r7
   27ef4:	b005      	add	sp, #20
   27ef6:	bd90      	pop	{r4, r7, pc}
   27ef8:	00027ded 	.word	0x00027ded
   27efc:	00022951 	.word	0x00022951
   27f00:	00022a09 	.word	0x00022a09

00027f04 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   27f04:	b580      	push	{r7, lr}
   27f06:	b082      	sub	sp, #8
   27f08:	af00      	add	r7, sp, #0
   27f0a:	0002      	movs	r2, r0
   27f0c:	1dfb      	adds	r3, r7, #7
   27f0e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   27f10:	1dfb      	adds	r3, r7, #7
   27f12:	781b      	ldrb	r3, [r3, #0]
   27f14:	0018      	movs	r0, r3
   27f16:	4b08      	ldr	r3, [pc, #32]	; (27f38 <disk_status+0x34>)
   27f18:	4798      	blx	r3
   27f1a:	1e03      	subs	r3, r0, #0
   27f1c:	d002      	beq.n	27f24 <disk_status+0x20>
   27f1e:	2b02      	cmp	r3, #2
   27f20:	d002      	beq.n	27f28 <disk_status+0x24>
   27f22:	e003      	b.n	27f2c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   27f24:	2300      	movs	r3, #0
   27f26:	e002      	b.n	27f2e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   27f28:	2303      	movs	r3, #3
   27f2a:	e000      	b.n	27f2e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   27f2c:	2301      	movs	r3, #1
	}
}
   27f2e:	0018      	movs	r0, r3
   27f30:	46bd      	mov	sp, r7
   27f32:	b002      	add	sp, #8
   27f34:	bd80      	pop	{r7, pc}
   27f36:	46c0      	nop			; (mov r8, r8)
   27f38:	00022951 	.word	0x00022951

00027f3c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   27f3c:	b590      	push	{r4, r7, lr}
   27f3e:	b089      	sub	sp, #36	; 0x24
   27f40:	af00      	add	r7, sp, #0
   27f42:	60b9      	str	r1, [r7, #8]
   27f44:	607a      	str	r2, [r7, #4]
   27f46:	0019      	movs	r1, r3
   27f48:	230f      	movs	r3, #15
   27f4a:	18fb      	adds	r3, r7, r3
   27f4c:	1c02      	adds	r2, r0, #0
   27f4e:	701a      	strb	r2, [r3, #0]
   27f50:	230e      	movs	r3, #14
   27f52:	18fb      	adds	r3, r7, r3
   27f54:	1c0a      	adds	r2, r1, #0
   27f56:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   27f58:	231b      	movs	r3, #27
   27f5a:	18fc      	adds	r4, r7, r3
   27f5c:	230f      	movs	r3, #15
   27f5e:	18fb      	adds	r3, r7, r3
   27f60:	781b      	ldrb	r3, [r3, #0]
   27f62:	0018      	movs	r0, r3
   27f64:	4b28      	ldr	r3, [pc, #160]	; (28008 <disk_read+0xcc>)
   27f66:	4798      	blx	r3
   27f68:	0003      	movs	r3, r0
   27f6a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   27f6c:	231b      	movs	r3, #27
   27f6e:	18fb      	adds	r3, r7, r3
   27f70:	781b      	ldrb	r3, [r3, #0]
   27f72:	2b00      	cmp	r3, #0
   27f74:	d101      	bne.n	27f7a <disk_read+0x3e>
		return RES_ERROR;
   27f76:	2301      	movs	r3, #1
   27f78:	e042      	b.n	28000 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   27f7a:	2314      	movs	r3, #20
   27f7c:	18fa      	adds	r2, r7, r3
   27f7e:	230f      	movs	r3, #15
   27f80:	18fb      	adds	r3, r7, r3
   27f82:	781b      	ldrb	r3, [r3, #0]
   27f84:	0011      	movs	r1, r2
   27f86:	0018      	movs	r0, r3
   27f88:	4b20      	ldr	r3, [pc, #128]	; (2800c <disk_read+0xd0>)
   27f8a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   27f8c:	230e      	movs	r3, #14
   27f8e:	18fb      	adds	r3, r7, r3
   27f90:	781b      	ldrb	r3, [r3, #0]
   27f92:	221b      	movs	r2, #27
   27f94:	18ba      	adds	r2, r7, r2
   27f96:	7812      	ldrb	r2, [r2, #0]
   27f98:	4353      	muls	r3, r2
   27f9a:	001a      	movs	r2, r3
   27f9c:	687b      	ldr	r3, [r7, #4]
   27f9e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   27fa0:	697b      	ldr	r3, [r7, #20]
   27fa2:	3301      	adds	r3, #1
   27fa4:	211b      	movs	r1, #27
   27fa6:	1879      	adds	r1, r7, r1
   27fa8:	7809      	ldrb	r1, [r1, #0]
   27faa:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   27fac:	429a      	cmp	r2, r3
   27fae:	d901      	bls.n	27fb4 <disk_read+0x78>
		return RES_PARERR;
   27fb0:	2304      	movs	r3, #4
   27fb2:	e025      	b.n	28000 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   27fb4:	2300      	movs	r3, #0
   27fb6:	61fb      	str	r3, [r7, #28]
   27fb8:	e01b      	b.n	27ff2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   27fba:	231b      	movs	r3, #27
   27fbc:	18fb      	adds	r3, r7, r3
   27fbe:	781b      	ldrb	r3, [r3, #0]
   27fc0:	69fa      	ldr	r2, [r7, #28]
   27fc2:	435a      	muls	r2, r3
   27fc4:	687b      	ldr	r3, [r7, #4]
   27fc6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   27fc8:	231b      	movs	r3, #27
   27fca:	18fb      	adds	r3, r7, r3
   27fcc:	781b      	ldrb	r3, [r3, #0]
   27fce:	69fa      	ldr	r2, [r7, #28]
   27fd0:	4353      	muls	r3, r2
   27fd2:	025b      	lsls	r3, r3, #9
   27fd4:	68ba      	ldr	r2, [r7, #8]
   27fd6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   27fd8:	230f      	movs	r3, #15
   27fda:	18fb      	adds	r3, r7, r3
   27fdc:	781b      	ldrb	r3, [r3, #0]
   27fde:	0018      	movs	r0, r3
   27fe0:	4b0b      	ldr	r3, [pc, #44]	; (28010 <disk_read+0xd4>)
   27fe2:	4798      	blx	r3
   27fe4:	1e03      	subs	r3, r0, #0
   27fe6:	d001      	beq.n	27fec <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   27fe8:	2301      	movs	r3, #1
   27fea:	e009      	b.n	28000 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   27fec:	69fb      	ldr	r3, [r7, #28]
   27fee:	3301      	adds	r3, #1
   27ff0:	61fb      	str	r3, [r7, #28]
   27ff2:	230e      	movs	r3, #14
   27ff4:	18fb      	adds	r3, r7, r3
   27ff6:	781a      	ldrb	r2, [r3, #0]
   27ff8:	69fb      	ldr	r3, [r7, #28]
   27ffa:	429a      	cmp	r2, r3
   27ffc:	d8dd      	bhi.n	27fba <disk_read+0x7e>
		}
	}

	return RES_OK;
   27ffe:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   28000:	0018      	movs	r0, r3
   28002:	46bd      	mov	sp, r7
   28004:	b009      	add	sp, #36	; 0x24
   28006:	bd90      	pop	{r4, r7, pc}
   28008:	000229dd 	.word	0x000229dd
   2800c:	00022991 	.word	0x00022991
   28010:	00022a51 	.word	0x00022a51

00028014 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   28014:	b590      	push	{r4, r7, lr}
   28016:	b089      	sub	sp, #36	; 0x24
   28018:	af00      	add	r7, sp, #0
   2801a:	60b9      	str	r1, [r7, #8]
   2801c:	607a      	str	r2, [r7, #4]
   2801e:	0019      	movs	r1, r3
   28020:	230f      	movs	r3, #15
   28022:	18fb      	adds	r3, r7, r3
   28024:	1c02      	adds	r2, r0, #0
   28026:	701a      	strb	r2, [r3, #0]
   28028:	230e      	movs	r3, #14
   2802a:	18fb      	adds	r3, r7, r3
   2802c:	1c0a      	adds	r2, r1, #0
   2802e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   28030:	231b      	movs	r3, #27
   28032:	18fc      	adds	r4, r7, r3
   28034:	230f      	movs	r3, #15
   28036:	18fb      	adds	r3, r7, r3
   28038:	781b      	ldrb	r3, [r3, #0]
   2803a:	0018      	movs	r0, r3
   2803c:	4b28      	ldr	r3, [pc, #160]	; (280e0 <disk_write+0xcc>)
   2803e:	4798      	blx	r3
   28040:	0003      	movs	r3, r0
   28042:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   28044:	231b      	movs	r3, #27
   28046:	18fb      	adds	r3, r7, r3
   28048:	781b      	ldrb	r3, [r3, #0]
   2804a:	2b00      	cmp	r3, #0
   2804c:	d101      	bne.n	28052 <disk_write+0x3e>
		return RES_ERROR;
   2804e:	2301      	movs	r3, #1
   28050:	e042      	b.n	280d8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   28052:	2314      	movs	r3, #20
   28054:	18fa      	adds	r2, r7, r3
   28056:	230f      	movs	r3, #15
   28058:	18fb      	adds	r3, r7, r3
   2805a:	781b      	ldrb	r3, [r3, #0]
   2805c:	0011      	movs	r1, r2
   2805e:	0018      	movs	r0, r3
   28060:	4b20      	ldr	r3, [pc, #128]	; (280e4 <disk_write+0xd0>)
   28062:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   28064:	230e      	movs	r3, #14
   28066:	18fb      	adds	r3, r7, r3
   28068:	781b      	ldrb	r3, [r3, #0]
   2806a:	221b      	movs	r2, #27
   2806c:	18ba      	adds	r2, r7, r2
   2806e:	7812      	ldrb	r2, [r2, #0]
   28070:	4353      	muls	r3, r2
   28072:	001a      	movs	r2, r3
   28074:	687b      	ldr	r3, [r7, #4]
   28076:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   28078:	697b      	ldr	r3, [r7, #20]
   2807a:	3301      	adds	r3, #1
   2807c:	211b      	movs	r1, #27
   2807e:	1879      	adds	r1, r7, r1
   28080:	7809      	ldrb	r1, [r1, #0]
   28082:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   28084:	429a      	cmp	r2, r3
   28086:	d901      	bls.n	2808c <disk_write+0x78>
		return RES_PARERR;
   28088:	2304      	movs	r3, #4
   2808a:	e025      	b.n	280d8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2808c:	2300      	movs	r3, #0
   2808e:	61fb      	str	r3, [r7, #28]
   28090:	e01b      	b.n	280ca <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   28092:	231b      	movs	r3, #27
   28094:	18fb      	adds	r3, r7, r3
   28096:	781b      	ldrb	r3, [r3, #0]
   28098:	69fa      	ldr	r2, [r7, #28]
   2809a:	435a      	muls	r2, r3
   2809c:	687b      	ldr	r3, [r7, #4]
   2809e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   280a0:	231b      	movs	r3, #27
   280a2:	18fb      	adds	r3, r7, r3
   280a4:	781b      	ldrb	r3, [r3, #0]
   280a6:	69fa      	ldr	r2, [r7, #28]
   280a8:	4353      	muls	r3, r2
   280aa:	025b      	lsls	r3, r3, #9
   280ac:	68ba      	ldr	r2, [r7, #8]
   280ae:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   280b0:	230f      	movs	r3, #15
   280b2:	18fb      	adds	r3, r7, r3
   280b4:	781b      	ldrb	r3, [r3, #0]
   280b6:	0018      	movs	r0, r3
   280b8:	4b0b      	ldr	r3, [pc, #44]	; (280e8 <disk_write+0xd4>)
   280ba:	4798      	blx	r3
   280bc:	1e03      	subs	r3, r0, #0
   280be:	d001      	beq.n	280c4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   280c0:	2301      	movs	r3, #1
   280c2:	e009      	b.n	280d8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   280c4:	69fb      	ldr	r3, [r7, #28]
   280c6:	3301      	adds	r3, #1
   280c8:	61fb      	str	r3, [r7, #28]
   280ca:	230e      	movs	r3, #14
   280cc:	18fb      	adds	r3, r7, r3
   280ce:	781a      	ldrb	r2, [r3, #0]
   280d0:	69fb      	ldr	r3, [r7, #28]
   280d2:	429a      	cmp	r2, r3
   280d4:	d8dd      	bhi.n	28092 <disk_write+0x7e>
		}
	}

	return RES_OK;
   280d6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   280d8:	0018      	movs	r0, r3
   280da:	46bd      	mov	sp, r7
   280dc:	b009      	add	sp, #36	; 0x24
   280de:	bd90      	pop	{r4, r7, pc}
   280e0:	000229dd 	.word	0x000229dd
   280e4:	00022991 	.word	0x00022991
   280e8:	00022aa5 	.word	0x00022aa5

000280ec <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   280ec:	b590      	push	{r4, r7, lr}
   280ee:	b085      	sub	sp, #20
   280f0:	af00      	add	r7, sp, #0
   280f2:	603a      	str	r2, [r7, #0]
   280f4:	1dfb      	adds	r3, r7, #7
   280f6:	1c02      	adds	r2, r0, #0
   280f8:	701a      	strb	r2, [r3, #0]
   280fa:	1dbb      	adds	r3, r7, #6
   280fc:	1c0a      	adds	r2, r1, #0
   280fe:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   28100:	230f      	movs	r3, #15
   28102:	18fb      	adds	r3, r7, r3
   28104:	2204      	movs	r2, #4
   28106:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   28108:	1dbb      	adds	r3, r7, #6
   2810a:	781b      	ldrb	r3, [r3, #0]
   2810c:	2b01      	cmp	r3, #1
   2810e:	d00f      	beq.n	28130 <disk_ioctl+0x44>
   28110:	dc02      	bgt.n	28118 <disk_ioctl+0x2c>
   28112:	2b00      	cmp	r3, #0
   28114:	d044      	beq.n	281a0 <disk_ioctl+0xb4>
   28116:	e054      	b.n	281c2 <disk_ioctl+0xd6>
   28118:	2b02      	cmp	r3, #2
   2811a:	d01a      	beq.n	28152 <disk_ioctl+0x66>
   2811c:	2b03      	cmp	r3, #3
   2811e:	d150      	bne.n	281c2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   28120:	683b      	ldr	r3, [r7, #0]
   28122:	2201      	movs	r2, #1
   28124:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   28126:	230f      	movs	r3, #15
   28128:	18fb      	adds	r3, r7, r3
   2812a:	2200      	movs	r2, #0
   2812c:	701a      	strb	r2, [r3, #0]
		break;
   2812e:	e04c      	b.n	281ca <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   28130:	2308      	movs	r3, #8
   28132:	18fa      	adds	r2, r7, r3
   28134:	1dfb      	adds	r3, r7, #7
   28136:	781b      	ldrb	r3, [r3, #0]
   28138:	0011      	movs	r1, r2
   2813a:	0018      	movs	r0, r3
   2813c:	4b26      	ldr	r3, [pc, #152]	; (281d8 <disk_ioctl+0xec>)
   2813e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   28140:	68bb      	ldr	r3, [r7, #8]
   28142:	1c5a      	adds	r2, r3, #1
   28144:	683b      	ldr	r3, [r7, #0]
   28146:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   28148:	230f      	movs	r3, #15
   2814a:	18fb      	adds	r3, r7, r3
   2814c:	2200      	movs	r2, #0
   2814e:	701a      	strb	r2, [r3, #0]
	}
	break;
   28150:	e03b      	b.n	281ca <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   28152:	230e      	movs	r3, #14
   28154:	18fc      	adds	r4, r7, r3
   28156:	1dfb      	adds	r3, r7, #7
   28158:	781b      	ldrb	r3, [r3, #0]
   2815a:	0018      	movs	r0, r3
   2815c:	4b1f      	ldr	r3, [pc, #124]	; (281dc <disk_ioctl+0xf0>)
   2815e:	4798      	blx	r3
   28160:	0003      	movs	r3, r0
   28162:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   28164:	230e      	movs	r3, #14
   28166:	18fb      	adds	r3, r7, r3
   28168:	781b      	ldrb	r3, [r3, #0]
   2816a:	2b01      	cmp	r3, #1
   2816c:	d010      	beq.n	28190 <disk_ioctl+0xa4>
   2816e:	230e      	movs	r3, #14
   28170:	18fb      	adds	r3, r7, r3
   28172:	781b      	ldrb	r3, [r3, #0]
   28174:	2b02      	cmp	r3, #2
   28176:	d00b      	beq.n	28190 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   28178:	230e      	movs	r3, #14
   2817a:	18fb      	adds	r3, r7, r3
   2817c:	781b      	ldrb	r3, [r3, #0]
   2817e:	2b04      	cmp	r3, #4
   28180:	d006      	beq.n	28190 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   28182:	230e      	movs	r3, #14
   28184:	18fb      	adds	r3, r7, r3
   28186:	781b      	ldrb	r3, [r3, #0]
   28188:	2b08      	cmp	r3, #8
   2818a:	d001      	beq.n	28190 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2818c:	2301      	movs	r3, #1
   2818e:	e01f      	b.n	281d0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   28190:	683b      	ldr	r3, [r7, #0]
   28192:	2200      	movs	r2, #0
   28194:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   28196:	230f      	movs	r3, #15
   28198:	18fb      	adds	r3, r7, r3
   2819a:	2200      	movs	r2, #0
   2819c:	701a      	strb	r2, [r3, #0]
	}
	break;
   2819e:	e014      	b.n	281ca <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   281a0:	1dfb      	adds	r3, r7, #7
   281a2:	781b      	ldrb	r3, [r3, #0]
   281a4:	0018      	movs	r0, r3
   281a6:	4b0e      	ldr	r3, [pc, #56]	; (281e0 <disk_ioctl+0xf4>)
   281a8:	4798      	blx	r3
   281aa:	1e03      	subs	r3, r0, #0
   281ac:	d104      	bne.n	281b8 <disk_ioctl+0xcc>
			res = RES_OK;
   281ae:	230f      	movs	r3, #15
   281b0:	18fb      	adds	r3, r7, r3
   281b2:	2200      	movs	r2, #0
   281b4:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   281b6:	e008      	b.n	281ca <disk_ioctl+0xde>
			res = RES_NOTRDY;
   281b8:	230f      	movs	r3, #15
   281ba:	18fb      	adds	r3, r7, r3
   281bc:	2203      	movs	r2, #3
   281be:	701a      	strb	r2, [r3, #0]
		break;
   281c0:	e003      	b.n	281ca <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   281c2:	230f      	movs	r3, #15
   281c4:	18fb      	adds	r3, r7, r3
   281c6:	2204      	movs	r2, #4
   281c8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   281ca:	230f      	movs	r3, #15
   281cc:	18fb      	adds	r3, r7, r3
   281ce:	781b      	ldrb	r3, [r3, #0]
}
   281d0:	0018      	movs	r0, r3
   281d2:	46bd      	mov	sp, r7
   281d4:	b005      	add	sp, #20
   281d6:	bd90      	pop	{r4, r7, pc}
   281d8:	00022991 	.word	0x00022991
   281dc:	000229dd 	.word	0x000229dd
   281e0:	00022951 	.word	0x00022951

000281e4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   281e4:	b580      	push	{r7, lr}
   281e6:	b084      	sub	sp, #16
   281e8:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   281ea:	1d3a      	adds	r2, r7, #4
   281ec:	4b12      	ldr	r3, [pc, #72]	; (28238 <get_fattime+0x54>)
   281ee:	0011      	movs	r1, r2
   281f0:	0018      	movs	r0, r3
   281f2:	4b12      	ldr	r3, [pc, #72]	; (2823c <get_fattime+0x58>)
   281f4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   281f6:	1d3b      	adds	r3, r7, #4
   281f8:	88db      	ldrh	r3, [r3, #6]
   281fa:	4a11      	ldr	r2, [pc, #68]	; (28240 <get_fattime+0x5c>)
   281fc:	4694      	mov	ip, r2
   281fe:	4463      	add	r3, ip
   28200:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   28202:	1d3b      	adds	r3, r7, #4
   28204:	795b      	ldrb	r3, [r3, #5]
   28206:	055b      	lsls	r3, r3, #21
   28208:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2820a:	1d3b      	adds	r3, r7, #4
   2820c:	791b      	ldrb	r3, [r3, #4]
   2820e:	041b      	lsls	r3, r3, #16
   28210:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   28212:	1d3b      	adds	r3, r7, #4
   28214:	789b      	ldrb	r3, [r3, #2]
   28216:	02db      	lsls	r3, r3, #11
   28218:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2821a:	1d3b      	adds	r3, r7, #4
   2821c:	785b      	ldrb	r3, [r3, #1]
   2821e:	015b      	lsls	r3, r3, #5
   28220:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   28222:	1d3a      	adds	r2, r7, #4
   28224:	7812      	ldrb	r2, [r2, #0]
   28226:	0852      	lsrs	r2, r2, #1
   28228:	b2d2      	uxtb	r2, r2
   2822a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2822c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2822e:	68fb      	ldr	r3, [r7, #12]
}
   28230:	0018      	movs	r0, r3
   28232:	46bd      	mov	sp, r7
   28234:	b004      	add	sp, #16
   28236:	bd80      	pop	{r7, pc}
   28238:	2000566c 	.word	0x2000566c
   2823c:	000237bd 	.word	0x000237bd
   28240:	fffff844 	.word	0xfffff844

00028244 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   28244:	b580      	push	{r7, lr}
   28246:	b086      	sub	sp, #24
   28248:	af00      	add	r7, sp, #0
   2824a:	60f8      	str	r0, [r7, #12]
   2824c:	60b9      	str	r1, [r7, #8]
   2824e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   28250:	68fb      	ldr	r3, [r7, #12]
   28252:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   28254:	68bb      	ldr	r3, [r7, #8]
   28256:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   28258:	e007      	b.n	2826a <mem_cpy+0x26>
		*d++ = *s++;
   2825a:	697b      	ldr	r3, [r7, #20]
   2825c:	1c5a      	adds	r2, r3, #1
   2825e:	617a      	str	r2, [r7, #20]
   28260:	693a      	ldr	r2, [r7, #16]
   28262:	1c51      	adds	r1, r2, #1
   28264:	6139      	str	r1, [r7, #16]
   28266:	7812      	ldrb	r2, [r2, #0]
   28268:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2826a:	687b      	ldr	r3, [r7, #4]
   2826c:	1e5a      	subs	r2, r3, #1
   2826e:	607a      	str	r2, [r7, #4]
   28270:	2b00      	cmp	r3, #0
   28272:	d1f2      	bne.n	2825a <mem_cpy+0x16>
}
   28274:	46c0      	nop			; (mov r8, r8)
   28276:	46bd      	mov	sp, r7
   28278:	b006      	add	sp, #24
   2827a:	bd80      	pop	{r7, pc}

0002827c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2827c:	b580      	push	{r7, lr}
   2827e:	b086      	sub	sp, #24
   28280:	af00      	add	r7, sp, #0
   28282:	60f8      	str	r0, [r7, #12]
   28284:	60b9      	str	r1, [r7, #8]
   28286:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   28288:	68fb      	ldr	r3, [r7, #12]
   2828a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2828c:	e005      	b.n	2829a <mem_set+0x1e>
		*d++ = (BYTE)val;
   2828e:	697b      	ldr	r3, [r7, #20]
   28290:	1c5a      	adds	r2, r3, #1
   28292:	617a      	str	r2, [r7, #20]
   28294:	68ba      	ldr	r2, [r7, #8]
   28296:	b2d2      	uxtb	r2, r2
   28298:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2829a:	687b      	ldr	r3, [r7, #4]
   2829c:	1e5a      	subs	r2, r3, #1
   2829e:	607a      	str	r2, [r7, #4]
   282a0:	2b00      	cmp	r3, #0
   282a2:	d1f4      	bne.n	2828e <mem_set+0x12>
}
   282a4:	46c0      	nop			; (mov r8, r8)
   282a6:	46bd      	mov	sp, r7
   282a8:	b006      	add	sp, #24
   282aa:	bd80      	pop	{r7, pc}

000282ac <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   282ac:	b580      	push	{r7, lr}
   282ae:	b088      	sub	sp, #32
   282b0:	af00      	add	r7, sp, #0
   282b2:	60f8      	str	r0, [r7, #12]
   282b4:	60b9      	str	r1, [r7, #8]
   282b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   282b8:	68fb      	ldr	r3, [r7, #12]
   282ba:	61fb      	str	r3, [r7, #28]
   282bc:	68bb      	ldr	r3, [r7, #8]
   282be:	61bb      	str	r3, [r7, #24]
	int r = 0;
   282c0:	2300      	movs	r3, #0
   282c2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   282c4:	46c0      	nop			; (mov r8, r8)
   282c6:	687b      	ldr	r3, [r7, #4]
   282c8:	1e5a      	subs	r2, r3, #1
   282ca:	607a      	str	r2, [r7, #4]
   282cc:	2b00      	cmp	r3, #0
   282ce:	d00d      	beq.n	282ec <mem_cmp+0x40>
   282d0:	69fb      	ldr	r3, [r7, #28]
   282d2:	1c5a      	adds	r2, r3, #1
   282d4:	61fa      	str	r2, [r7, #28]
   282d6:	781b      	ldrb	r3, [r3, #0]
   282d8:	0019      	movs	r1, r3
   282da:	69bb      	ldr	r3, [r7, #24]
   282dc:	1c5a      	adds	r2, r3, #1
   282de:	61ba      	str	r2, [r7, #24]
   282e0:	781b      	ldrb	r3, [r3, #0]
   282e2:	1acb      	subs	r3, r1, r3
   282e4:	617b      	str	r3, [r7, #20]
   282e6:	697b      	ldr	r3, [r7, #20]
   282e8:	2b00      	cmp	r3, #0
   282ea:	d0ec      	beq.n	282c6 <mem_cmp+0x1a>
	return r;
   282ec:	697b      	ldr	r3, [r7, #20]
}
   282ee:	0018      	movs	r0, r3
   282f0:	46bd      	mov	sp, r7
   282f2:	b008      	add	sp, #32
   282f4:	bd80      	pop	{r7, pc}

000282f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   282f6:	b580      	push	{r7, lr}
   282f8:	b082      	sub	sp, #8
   282fa:	af00      	add	r7, sp, #0
   282fc:	6078      	str	r0, [r7, #4]
   282fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   28300:	e002      	b.n	28308 <chk_chr+0x12>
   28302:	687b      	ldr	r3, [r7, #4]
   28304:	3301      	adds	r3, #1
   28306:	607b      	str	r3, [r7, #4]
   28308:	687b      	ldr	r3, [r7, #4]
   2830a:	781b      	ldrb	r3, [r3, #0]
   2830c:	2b00      	cmp	r3, #0
   2830e:	d005      	beq.n	2831c <chk_chr+0x26>
   28310:	687b      	ldr	r3, [r7, #4]
   28312:	781b      	ldrb	r3, [r3, #0]
   28314:	001a      	movs	r2, r3
   28316:	683b      	ldr	r3, [r7, #0]
   28318:	429a      	cmp	r2, r3
   2831a:	d1f2      	bne.n	28302 <chk_chr+0xc>
	return *str;
   2831c:	687b      	ldr	r3, [r7, #4]
   2831e:	781b      	ldrb	r3, [r3, #0]
}
   28320:	0018      	movs	r0, r3
   28322:	46bd      	mov	sp, r7
   28324:	b002      	add	sp, #8
   28326:	bd80      	pop	{r7, pc}

00028328 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   28328:	b590      	push	{r4, r7, lr}
   2832a:	b085      	sub	sp, #20
   2832c:	af00      	add	r7, sp, #0
   2832e:	6078      	str	r0, [r7, #4]
   28330:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   28332:	687b      	ldr	r3, [r7, #4]
   28334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28336:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   28338:	68fa      	ldr	r2, [r7, #12]
   2833a:	683b      	ldr	r3, [r7, #0]
   2833c:	429a      	cmp	r2, r3
   2833e:	d04e      	beq.n	283de <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   28340:	687b      	ldr	r3, [r7, #4]
   28342:	791b      	ldrb	r3, [r3, #4]
   28344:	2b00      	cmp	r3, #0
   28346:	d037      	beq.n	283b8 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   28348:	687b      	ldr	r3, [r7, #4]
   2834a:	7858      	ldrb	r0, [r3, #1]
   2834c:	687b      	ldr	r3, [r7, #4]
   2834e:	3330      	adds	r3, #48	; 0x30
   28350:	0019      	movs	r1, r3
   28352:	68fa      	ldr	r2, [r7, #12]
   28354:	2301      	movs	r3, #1
   28356:	4c24      	ldr	r4, [pc, #144]	; (283e8 <move_window+0xc0>)
   28358:	47a0      	blx	r4
   2835a:	1e03      	subs	r3, r0, #0
   2835c:	d001      	beq.n	28362 <move_window+0x3a>
				return FR_DISK_ERR;
   2835e:	2301      	movs	r3, #1
   28360:	e03e      	b.n	283e0 <move_window+0xb8>
			fs->wflag = 0;
   28362:	687b      	ldr	r3, [r7, #4]
   28364:	2200      	movs	r2, #0
   28366:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   28368:	687b      	ldr	r3, [r7, #4]
   2836a:	6a1a      	ldr	r2, [r3, #32]
   2836c:	687b      	ldr	r3, [r7, #4]
   2836e:	69db      	ldr	r3, [r3, #28]
   28370:	18d2      	adds	r2, r2, r3
   28372:	68fb      	ldr	r3, [r7, #12]
   28374:	429a      	cmp	r2, r3
   28376:	d91f      	bls.n	283b8 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   28378:	230b      	movs	r3, #11
   2837a:	18fb      	adds	r3, r7, r3
   2837c:	687a      	ldr	r2, [r7, #4]
   2837e:	78d2      	ldrb	r2, [r2, #3]
   28380:	701a      	strb	r2, [r3, #0]
   28382:	e014      	b.n	283ae <move_window+0x86>
					wsect += fs->fsize;
   28384:	687b      	ldr	r3, [r7, #4]
   28386:	69db      	ldr	r3, [r3, #28]
   28388:	68fa      	ldr	r2, [r7, #12]
   2838a:	18d3      	adds	r3, r2, r3
   2838c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2838e:	687b      	ldr	r3, [r7, #4]
   28390:	7858      	ldrb	r0, [r3, #1]
   28392:	687b      	ldr	r3, [r7, #4]
   28394:	3330      	adds	r3, #48	; 0x30
   28396:	0019      	movs	r1, r3
   28398:	68fa      	ldr	r2, [r7, #12]
   2839a:	2301      	movs	r3, #1
   2839c:	4c12      	ldr	r4, [pc, #72]	; (283e8 <move_window+0xc0>)
   2839e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   283a0:	230b      	movs	r3, #11
   283a2:	18fb      	adds	r3, r7, r3
   283a4:	781a      	ldrb	r2, [r3, #0]
   283a6:	230b      	movs	r3, #11
   283a8:	18fb      	adds	r3, r7, r3
   283aa:	3a01      	subs	r2, #1
   283ac:	701a      	strb	r2, [r3, #0]
   283ae:	230b      	movs	r3, #11
   283b0:	18fb      	adds	r3, r7, r3
   283b2:	781b      	ldrb	r3, [r3, #0]
   283b4:	2b01      	cmp	r3, #1
   283b6:	d8e5      	bhi.n	28384 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   283b8:	683b      	ldr	r3, [r7, #0]
   283ba:	2b00      	cmp	r3, #0
   283bc:	d00f      	beq.n	283de <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   283be:	687b      	ldr	r3, [r7, #4]
   283c0:	7858      	ldrb	r0, [r3, #1]
   283c2:	687b      	ldr	r3, [r7, #4]
   283c4:	3330      	adds	r3, #48	; 0x30
   283c6:	0019      	movs	r1, r3
   283c8:	683a      	ldr	r2, [r7, #0]
   283ca:	2301      	movs	r3, #1
   283cc:	4c07      	ldr	r4, [pc, #28]	; (283ec <move_window+0xc4>)
   283ce:	47a0      	blx	r4
   283d0:	1e03      	subs	r3, r0, #0
   283d2:	d001      	beq.n	283d8 <move_window+0xb0>
				return FR_DISK_ERR;
   283d4:	2301      	movs	r3, #1
   283d6:	e003      	b.n	283e0 <move_window+0xb8>
			fs->winsect = sector;
   283d8:	687b      	ldr	r3, [r7, #4]
   283da:	683a      	ldr	r2, [r7, #0]
   283dc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   283de:	2300      	movs	r3, #0
}
   283e0:	0018      	movs	r0, r3
   283e2:	46bd      	mov	sp, r7
   283e4:	b005      	add	sp, #20
   283e6:	bd90      	pop	{r4, r7, pc}
   283e8:	00028015 	.word	0x00028015
   283ec:	00027f3d 	.word	0x00027f3d

000283f0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   283f0:	b590      	push	{r4, r7, lr}
   283f2:	b085      	sub	sp, #20
   283f4:	af00      	add	r7, sp, #0
   283f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   283f8:	230f      	movs	r3, #15
   283fa:	18fc      	adds	r4, r7, r3
   283fc:	687b      	ldr	r3, [r7, #4]
   283fe:	2100      	movs	r1, #0
   28400:	0018      	movs	r0, r3
   28402:	4b52      	ldr	r3, [pc, #328]	; (2854c <sync+0x15c>)
   28404:	4798      	blx	r3
   28406:	0003      	movs	r3, r0
   28408:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2840a:	230f      	movs	r3, #15
   2840c:	18fb      	adds	r3, r7, r3
   2840e:	781b      	ldrb	r3, [r3, #0]
   28410:	2b00      	cmp	r3, #0
   28412:	d000      	beq.n	28416 <sync+0x26>
   28414:	e093      	b.n	2853e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   28416:	687b      	ldr	r3, [r7, #4]
   28418:	781b      	ldrb	r3, [r3, #0]
   2841a:	2b03      	cmp	r3, #3
   2841c:	d000      	beq.n	28420 <sync+0x30>
   2841e:	e081      	b.n	28524 <sync+0x134>
   28420:	687b      	ldr	r3, [r7, #4]
   28422:	795b      	ldrb	r3, [r3, #5]
   28424:	2b00      	cmp	r3, #0
   28426:	d07d      	beq.n	28524 <sync+0x134>
			fs->winsect = 0;
   28428:	687b      	ldr	r3, [r7, #4]
   2842a:	2200      	movs	r2, #0
   2842c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2842e:	687b      	ldr	r3, [r7, #4]
   28430:	3330      	adds	r3, #48	; 0x30
   28432:	0018      	movs	r0, r3
   28434:	2380      	movs	r3, #128	; 0x80
   28436:	009b      	lsls	r3, r3, #2
   28438:	001a      	movs	r2, r3
   2843a:	2100      	movs	r1, #0
   2843c:	4b44      	ldr	r3, [pc, #272]	; (28550 <sync+0x160>)
   2843e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   28440:	687b      	ldr	r3, [r7, #4]
   28442:	4a44      	ldr	r2, [pc, #272]	; (28554 <sync+0x164>)
   28444:	2155      	movs	r1, #85	; 0x55
   28446:	5499      	strb	r1, [r3, r2]
   28448:	687b      	ldr	r3, [r7, #4]
   2844a:	4a43      	ldr	r2, [pc, #268]	; (28558 <sync+0x168>)
   2844c:	21aa      	movs	r1, #170	; 0xaa
   2844e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   28450:	687b      	ldr	r3, [r7, #4]
   28452:	2230      	movs	r2, #48	; 0x30
   28454:	2152      	movs	r1, #82	; 0x52
   28456:	5499      	strb	r1, [r3, r2]
   28458:	687b      	ldr	r3, [r7, #4]
   2845a:	2231      	movs	r2, #49	; 0x31
   2845c:	2152      	movs	r1, #82	; 0x52
   2845e:	5499      	strb	r1, [r3, r2]
   28460:	687b      	ldr	r3, [r7, #4]
   28462:	2232      	movs	r2, #50	; 0x32
   28464:	2161      	movs	r1, #97	; 0x61
   28466:	5499      	strb	r1, [r3, r2]
   28468:	687b      	ldr	r3, [r7, #4]
   2846a:	2233      	movs	r2, #51	; 0x33
   2846c:	2141      	movs	r1, #65	; 0x41
   2846e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   28470:	687a      	ldr	r2, [r7, #4]
   28472:	2385      	movs	r3, #133	; 0x85
   28474:	009b      	lsls	r3, r3, #2
   28476:	2172      	movs	r1, #114	; 0x72
   28478:	54d1      	strb	r1, [r2, r3]
   2847a:	687b      	ldr	r3, [r7, #4]
   2847c:	4a37      	ldr	r2, [pc, #220]	; (2855c <sync+0x16c>)
   2847e:	2172      	movs	r1, #114	; 0x72
   28480:	5499      	strb	r1, [r3, r2]
   28482:	687b      	ldr	r3, [r7, #4]
   28484:	4a36      	ldr	r2, [pc, #216]	; (28560 <sync+0x170>)
   28486:	2141      	movs	r1, #65	; 0x41
   28488:	5499      	strb	r1, [r3, r2]
   2848a:	687b      	ldr	r3, [r7, #4]
   2848c:	4a35      	ldr	r2, [pc, #212]	; (28564 <sync+0x174>)
   2848e:	2161      	movs	r1, #97	; 0x61
   28490:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   28492:	687b      	ldr	r3, [r7, #4]
   28494:	691b      	ldr	r3, [r3, #16]
   28496:	b2d9      	uxtb	r1, r3
   28498:	687a      	ldr	r2, [r7, #4]
   2849a:	2386      	movs	r3, #134	; 0x86
   2849c:	009b      	lsls	r3, r3, #2
   2849e:	54d1      	strb	r1, [r2, r3]
   284a0:	687b      	ldr	r3, [r7, #4]
   284a2:	691b      	ldr	r3, [r3, #16]
   284a4:	b29b      	uxth	r3, r3
   284a6:	0a1b      	lsrs	r3, r3, #8
   284a8:	b29b      	uxth	r3, r3
   284aa:	b2d9      	uxtb	r1, r3
   284ac:	687b      	ldr	r3, [r7, #4]
   284ae:	4a2e      	ldr	r2, [pc, #184]	; (28568 <sync+0x178>)
   284b0:	5499      	strb	r1, [r3, r2]
   284b2:	687b      	ldr	r3, [r7, #4]
   284b4:	691b      	ldr	r3, [r3, #16]
   284b6:	0c1b      	lsrs	r3, r3, #16
   284b8:	b2d9      	uxtb	r1, r3
   284ba:	687b      	ldr	r3, [r7, #4]
   284bc:	4a2b      	ldr	r2, [pc, #172]	; (2856c <sync+0x17c>)
   284be:	5499      	strb	r1, [r3, r2]
   284c0:	687b      	ldr	r3, [r7, #4]
   284c2:	691b      	ldr	r3, [r3, #16]
   284c4:	0e1b      	lsrs	r3, r3, #24
   284c6:	b2d9      	uxtb	r1, r3
   284c8:	687b      	ldr	r3, [r7, #4]
   284ca:	4a29      	ldr	r2, [pc, #164]	; (28570 <sync+0x180>)
   284cc:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   284ce:	687b      	ldr	r3, [r7, #4]
   284d0:	68db      	ldr	r3, [r3, #12]
   284d2:	b2d9      	uxtb	r1, r3
   284d4:	687a      	ldr	r2, [r7, #4]
   284d6:	2387      	movs	r3, #135	; 0x87
   284d8:	009b      	lsls	r3, r3, #2
   284da:	54d1      	strb	r1, [r2, r3]
   284dc:	687b      	ldr	r3, [r7, #4]
   284de:	68db      	ldr	r3, [r3, #12]
   284e0:	b29b      	uxth	r3, r3
   284e2:	0a1b      	lsrs	r3, r3, #8
   284e4:	b29b      	uxth	r3, r3
   284e6:	b2d9      	uxtb	r1, r3
   284e8:	687b      	ldr	r3, [r7, #4]
   284ea:	4a22      	ldr	r2, [pc, #136]	; (28574 <sync+0x184>)
   284ec:	5499      	strb	r1, [r3, r2]
   284ee:	687b      	ldr	r3, [r7, #4]
   284f0:	68db      	ldr	r3, [r3, #12]
   284f2:	0c1b      	lsrs	r3, r3, #16
   284f4:	b2d9      	uxtb	r1, r3
   284f6:	687b      	ldr	r3, [r7, #4]
   284f8:	4a1f      	ldr	r2, [pc, #124]	; (28578 <sync+0x188>)
   284fa:	5499      	strb	r1, [r3, r2]
   284fc:	687b      	ldr	r3, [r7, #4]
   284fe:	68db      	ldr	r3, [r3, #12]
   28500:	0e1b      	lsrs	r3, r3, #24
   28502:	b2d9      	uxtb	r1, r3
   28504:	687b      	ldr	r3, [r7, #4]
   28506:	4a1d      	ldr	r2, [pc, #116]	; (2857c <sync+0x18c>)
   28508:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2850a:	687b      	ldr	r3, [r7, #4]
   2850c:	7858      	ldrb	r0, [r3, #1]
   2850e:	687b      	ldr	r3, [r7, #4]
   28510:	3330      	adds	r3, #48	; 0x30
   28512:	0019      	movs	r1, r3
   28514:	687b      	ldr	r3, [r7, #4]
   28516:	695a      	ldr	r2, [r3, #20]
   28518:	2301      	movs	r3, #1
   2851a:	4c19      	ldr	r4, [pc, #100]	; (28580 <sync+0x190>)
   2851c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2851e:	687b      	ldr	r3, [r7, #4]
   28520:	2200      	movs	r2, #0
   28522:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   28524:	687b      	ldr	r3, [r7, #4]
   28526:	785b      	ldrb	r3, [r3, #1]
   28528:	2200      	movs	r2, #0
   2852a:	2100      	movs	r1, #0
   2852c:	0018      	movs	r0, r3
   2852e:	4b15      	ldr	r3, [pc, #84]	; (28584 <sync+0x194>)
   28530:	4798      	blx	r3
   28532:	1e03      	subs	r3, r0, #0
   28534:	d003      	beq.n	2853e <sync+0x14e>
			res = FR_DISK_ERR;
   28536:	230f      	movs	r3, #15
   28538:	18fb      	adds	r3, r7, r3
   2853a:	2201      	movs	r2, #1
   2853c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2853e:	230f      	movs	r3, #15
   28540:	18fb      	adds	r3, r7, r3
   28542:	781b      	ldrb	r3, [r3, #0]
}
   28544:	0018      	movs	r0, r3
   28546:	46bd      	mov	sp, r7
   28548:	b005      	add	sp, #20
   2854a:	bd90      	pop	{r4, r7, pc}
   2854c:	00028329 	.word	0x00028329
   28550:	0002827d 	.word	0x0002827d
   28554:	0000022e 	.word	0x0000022e
   28558:	0000022f 	.word	0x0000022f
   2855c:	00000215 	.word	0x00000215
   28560:	00000216 	.word	0x00000216
   28564:	00000217 	.word	0x00000217
   28568:	00000219 	.word	0x00000219
   2856c:	0000021a 	.word	0x0000021a
   28570:	0000021b 	.word	0x0000021b
   28574:	0000021d 	.word	0x0000021d
   28578:	0000021e 	.word	0x0000021e
   2857c:	0000021f 	.word	0x0000021f
   28580:	00028015 	.word	0x00028015
   28584:	000280ed 	.word	0x000280ed

00028588 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   28588:	b580      	push	{r7, lr}
   2858a:	b082      	sub	sp, #8
   2858c:	af00      	add	r7, sp, #0
   2858e:	6078      	str	r0, [r7, #4]
   28590:	6039      	str	r1, [r7, #0]
	clst -= 2;
   28592:	683b      	ldr	r3, [r7, #0]
   28594:	3b02      	subs	r3, #2
   28596:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   28598:	687b      	ldr	r3, [r7, #4]
   2859a:	699b      	ldr	r3, [r3, #24]
   2859c:	1e9a      	subs	r2, r3, #2
   2859e:	683b      	ldr	r3, [r7, #0]
   285a0:	429a      	cmp	r2, r3
   285a2:	d801      	bhi.n	285a8 <clust2sect+0x20>
   285a4:	2300      	movs	r3, #0
   285a6:	e007      	b.n	285b8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   285a8:	687b      	ldr	r3, [r7, #4]
   285aa:	789b      	ldrb	r3, [r3, #2]
   285ac:	001a      	movs	r2, r3
   285ae:	683b      	ldr	r3, [r7, #0]
   285b0:	435a      	muls	r2, r3
   285b2:	687b      	ldr	r3, [r7, #4]
   285b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   285b6:	18d3      	adds	r3, r2, r3
}
   285b8:	0018      	movs	r0, r3
   285ba:	46bd      	mov	sp, r7
   285bc:	b002      	add	sp, #8
   285be:	bd80      	pop	{r7, pc}

000285c0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   285c0:	b580      	push	{r7, lr}
   285c2:	b086      	sub	sp, #24
   285c4:	af00      	add	r7, sp, #0
   285c6:	6078      	str	r0, [r7, #4]
   285c8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   285ca:	683b      	ldr	r3, [r7, #0]
   285cc:	2b01      	cmp	r3, #1
   285ce:	d904      	bls.n	285da <get_fat+0x1a>
   285d0:	687b      	ldr	r3, [r7, #4]
   285d2:	699a      	ldr	r2, [r3, #24]
   285d4:	683b      	ldr	r3, [r7, #0]
   285d6:	429a      	cmp	r2, r3
   285d8:	d801      	bhi.n	285de <get_fat+0x1e>
		return 1;
   285da:	2301      	movs	r3, #1
   285dc:	e09f      	b.n	2871e <get_fat+0x15e>

	switch (fs->fs_type) {
   285de:	687b      	ldr	r3, [r7, #4]
   285e0:	781b      	ldrb	r3, [r3, #0]
   285e2:	2b02      	cmp	r3, #2
   285e4:	d048      	beq.n	28678 <get_fat+0xb8>
   285e6:	2b03      	cmp	r3, #3
   285e8:	d067      	beq.n	286ba <get_fat+0xfa>
   285ea:	2b01      	cmp	r3, #1
   285ec:	d000      	beq.n	285f0 <get_fat+0x30>
   285ee:	e094      	b.n	2871a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   285f0:	683b      	ldr	r3, [r7, #0]
   285f2:	617b      	str	r3, [r7, #20]
   285f4:	697b      	ldr	r3, [r7, #20]
   285f6:	085b      	lsrs	r3, r3, #1
   285f8:	697a      	ldr	r2, [r7, #20]
   285fa:	18d3      	adds	r3, r2, r3
   285fc:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   285fe:	687b      	ldr	r3, [r7, #4]
   28600:	6a1a      	ldr	r2, [r3, #32]
   28602:	697b      	ldr	r3, [r7, #20]
   28604:	0a5b      	lsrs	r3, r3, #9
   28606:	18d2      	adds	r2, r2, r3
   28608:	687b      	ldr	r3, [r7, #4]
   2860a:	0011      	movs	r1, r2
   2860c:	0018      	movs	r0, r3
   2860e:	4b46      	ldr	r3, [pc, #280]	; (28728 <get_fat+0x168>)
   28610:	4798      	blx	r3
   28612:	1e03      	subs	r3, r0, #0
   28614:	d000      	beq.n	28618 <get_fat+0x58>
   28616:	e079      	b.n	2870c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   28618:	697b      	ldr	r3, [r7, #20]
   2861a:	05db      	lsls	r3, r3, #23
   2861c:	0ddb      	lsrs	r3, r3, #23
   2861e:	687a      	ldr	r2, [r7, #4]
   28620:	2130      	movs	r1, #48	; 0x30
   28622:	18d3      	adds	r3, r2, r3
   28624:	185b      	adds	r3, r3, r1
   28626:	781b      	ldrb	r3, [r3, #0]
   28628:	613b      	str	r3, [r7, #16]
   2862a:	697b      	ldr	r3, [r7, #20]
   2862c:	3301      	adds	r3, #1
   2862e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   28630:	687b      	ldr	r3, [r7, #4]
   28632:	6a1a      	ldr	r2, [r3, #32]
   28634:	697b      	ldr	r3, [r7, #20]
   28636:	0a5b      	lsrs	r3, r3, #9
   28638:	18d2      	adds	r2, r2, r3
   2863a:	687b      	ldr	r3, [r7, #4]
   2863c:	0011      	movs	r1, r2
   2863e:	0018      	movs	r0, r3
   28640:	4b39      	ldr	r3, [pc, #228]	; (28728 <get_fat+0x168>)
   28642:	4798      	blx	r3
   28644:	1e03      	subs	r3, r0, #0
   28646:	d163      	bne.n	28710 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   28648:	697b      	ldr	r3, [r7, #20]
   2864a:	05db      	lsls	r3, r3, #23
   2864c:	0ddb      	lsrs	r3, r3, #23
   2864e:	687a      	ldr	r2, [r7, #4]
   28650:	2130      	movs	r1, #48	; 0x30
   28652:	18d3      	adds	r3, r2, r3
   28654:	185b      	adds	r3, r3, r1
   28656:	781b      	ldrb	r3, [r3, #0]
   28658:	021b      	lsls	r3, r3, #8
   2865a:	001a      	movs	r2, r3
   2865c:	693b      	ldr	r3, [r7, #16]
   2865e:	4313      	orrs	r3, r2
   28660:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   28662:	683b      	ldr	r3, [r7, #0]
   28664:	2201      	movs	r2, #1
   28666:	4013      	ands	r3, r2
   28668:	d002      	beq.n	28670 <get_fat+0xb0>
   2866a:	693b      	ldr	r3, [r7, #16]
   2866c:	091b      	lsrs	r3, r3, #4
   2866e:	e056      	b.n	2871e <get_fat+0x15e>
   28670:	693b      	ldr	r3, [r7, #16]
   28672:	051b      	lsls	r3, r3, #20
   28674:	0d1b      	lsrs	r3, r3, #20
   28676:	e052      	b.n	2871e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   28678:	687b      	ldr	r3, [r7, #4]
   2867a:	6a1a      	ldr	r2, [r3, #32]
   2867c:	683b      	ldr	r3, [r7, #0]
   2867e:	0a1b      	lsrs	r3, r3, #8
   28680:	18d2      	adds	r2, r2, r3
   28682:	687b      	ldr	r3, [r7, #4]
   28684:	0011      	movs	r1, r2
   28686:	0018      	movs	r0, r3
   28688:	4b27      	ldr	r3, [pc, #156]	; (28728 <get_fat+0x168>)
   2868a:	4798      	blx	r3
   2868c:	1e03      	subs	r3, r0, #0
   2868e:	d141      	bne.n	28714 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   28690:	683b      	ldr	r3, [r7, #0]
   28692:	005a      	lsls	r2, r3, #1
   28694:	23ff      	movs	r3, #255	; 0xff
   28696:	005b      	lsls	r3, r3, #1
   28698:	4013      	ands	r3, r2
   2869a:	3330      	adds	r3, #48	; 0x30
   2869c:	687a      	ldr	r2, [r7, #4]
   2869e:	18d3      	adds	r3, r2, r3
   286a0:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   286a2:	68fb      	ldr	r3, [r7, #12]
   286a4:	3301      	adds	r3, #1
   286a6:	781b      	ldrb	r3, [r3, #0]
   286a8:	021b      	lsls	r3, r3, #8
   286aa:	b21a      	sxth	r2, r3
   286ac:	68fb      	ldr	r3, [r7, #12]
   286ae:	781b      	ldrb	r3, [r3, #0]
   286b0:	b21b      	sxth	r3, r3
   286b2:	4313      	orrs	r3, r2
   286b4:	b21b      	sxth	r3, r3
   286b6:	b29b      	uxth	r3, r3
   286b8:	e031      	b.n	2871e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   286ba:	687b      	ldr	r3, [r7, #4]
   286bc:	6a1a      	ldr	r2, [r3, #32]
   286be:	683b      	ldr	r3, [r7, #0]
   286c0:	09db      	lsrs	r3, r3, #7
   286c2:	18d2      	adds	r2, r2, r3
   286c4:	687b      	ldr	r3, [r7, #4]
   286c6:	0011      	movs	r1, r2
   286c8:	0018      	movs	r0, r3
   286ca:	4b17      	ldr	r3, [pc, #92]	; (28728 <get_fat+0x168>)
   286cc:	4798      	blx	r3
   286ce:	1e03      	subs	r3, r0, #0
   286d0:	d122      	bne.n	28718 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   286d2:	683b      	ldr	r3, [r7, #0]
   286d4:	009a      	lsls	r2, r3, #2
   286d6:	23fe      	movs	r3, #254	; 0xfe
   286d8:	005b      	lsls	r3, r3, #1
   286da:	4013      	ands	r3, r2
   286dc:	3330      	adds	r3, #48	; 0x30
   286de:	687a      	ldr	r2, [r7, #4]
   286e0:	18d3      	adds	r3, r2, r3
   286e2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   286e4:	68fb      	ldr	r3, [r7, #12]
   286e6:	3303      	adds	r3, #3
   286e8:	781b      	ldrb	r3, [r3, #0]
   286ea:	061a      	lsls	r2, r3, #24
   286ec:	68fb      	ldr	r3, [r7, #12]
   286ee:	3302      	adds	r3, #2
   286f0:	781b      	ldrb	r3, [r3, #0]
   286f2:	041b      	lsls	r3, r3, #16
   286f4:	4313      	orrs	r3, r2
   286f6:	68fa      	ldr	r2, [r7, #12]
   286f8:	3201      	adds	r2, #1
   286fa:	7812      	ldrb	r2, [r2, #0]
   286fc:	0212      	lsls	r2, r2, #8
   286fe:	4313      	orrs	r3, r2
   28700:	68fa      	ldr	r2, [r7, #12]
   28702:	7812      	ldrb	r2, [r2, #0]
   28704:	4313      	orrs	r3, r2
   28706:	011b      	lsls	r3, r3, #4
   28708:	091b      	lsrs	r3, r3, #4
   2870a:	e008      	b.n	2871e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2870c:	46c0      	nop			; (mov r8, r8)
   2870e:	e004      	b.n	2871a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   28710:	46c0      	nop			; (mov r8, r8)
   28712:	e002      	b.n	2871a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   28714:	46c0      	nop			; (mov r8, r8)
   28716:	e000      	b.n	2871a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   28718:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2871a:	2301      	movs	r3, #1
   2871c:	425b      	negs	r3, r3
}
   2871e:	0018      	movs	r0, r3
   28720:	46bd      	mov	sp, r7
   28722:	b006      	add	sp, #24
   28724:	bd80      	pop	{r7, pc}
   28726:	46c0      	nop			; (mov r8, r8)
   28728:	00028329 	.word	0x00028329

0002872c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2872c:	b590      	push	{r4, r7, lr}
   2872e:	b089      	sub	sp, #36	; 0x24
   28730:	af00      	add	r7, sp, #0
   28732:	60f8      	str	r0, [r7, #12]
   28734:	60b9      	str	r1, [r7, #8]
   28736:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   28738:	68bb      	ldr	r3, [r7, #8]
   2873a:	2b01      	cmp	r3, #1
   2873c:	d904      	bls.n	28748 <put_fat+0x1c>
   2873e:	68fb      	ldr	r3, [r7, #12]
   28740:	699a      	ldr	r2, [r3, #24]
   28742:	68bb      	ldr	r3, [r7, #8]
   28744:	429a      	cmp	r2, r3
   28746:	d804      	bhi.n	28752 <put_fat+0x26>
		res = FR_INT_ERR;
   28748:	231f      	movs	r3, #31
   2874a:	18fb      	adds	r3, r7, r3
   2874c:	2202      	movs	r2, #2
   2874e:	701a      	strb	r2, [r3, #0]
   28750:	e100      	b.n	28954 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   28752:	68fb      	ldr	r3, [r7, #12]
   28754:	781b      	ldrb	r3, [r3, #0]
   28756:	2b02      	cmp	r3, #2
   28758:	d100      	bne.n	2875c <put_fat+0x30>
   2875a:	e078      	b.n	2884e <put_fat+0x122>
   2875c:	2b03      	cmp	r3, #3
   2875e:	d100      	bne.n	28762 <put_fat+0x36>
   28760:	e09e      	b.n	288a0 <put_fat+0x174>
   28762:	2b01      	cmp	r3, #1
   28764:	d000      	beq.n	28768 <put_fat+0x3c>
   28766:	e0e6      	b.n	28936 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   28768:	68bb      	ldr	r3, [r7, #8]
   2876a:	61bb      	str	r3, [r7, #24]
   2876c:	69bb      	ldr	r3, [r7, #24]
   2876e:	085b      	lsrs	r3, r3, #1
   28770:	69ba      	ldr	r2, [r7, #24]
   28772:	18d3      	adds	r3, r2, r3
   28774:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   28776:	68fb      	ldr	r3, [r7, #12]
   28778:	6a1a      	ldr	r2, [r3, #32]
   2877a:	69bb      	ldr	r3, [r7, #24]
   2877c:	0a5b      	lsrs	r3, r3, #9
   2877e:	18d2      	adds	r2, r2, r3
   28780:	231f      	movs	r3, #31
   28782:	18fc      	adds	r4, r7, r3
   28784:	68fb      	ldr	r3, [r7, #12]
   28786:	0011      	movs	r1, r2
   28788:	0018      	movs	r0, r3
   2878a:	4b76      	ldr	r3, [pc, #472]	; (28964 <put_fat+0x238>)
   2878c:	4798      	blx	r3
   2878e:	0003      	movs	r3, r0
   28790:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   28792:	231f      	movs	r3, #31
   28794:	18fb      	adds	r3, r7, r3
   28796:	781b      	ldrb	r3, [r3, #0]
   28798:	2b00      	cmp	r3, #0
   2879a:	d000      	beq.n	2879e <put_fat+0x72>
   2879c:	e0d0      	b.n	28940 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2879e:	69bb      	ldr	r3, [r7, #24]
   287a0:	05db      	lsls	r3, r3, #23
   287a2:	0ddb      	lsrs	r3, r3, #23
   287a4:	3330      	adds	r3, #48	; 0x30
   287a6:	68fa      	ldr	r2, [r7, #12]
   287a8:	18d3      	adds	r3, r2, r3
   287aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   287ac:	68bb      	ldr	r3, [r7, #8]
   287ae:	2201      	movs	r2, #1
   287b0:	4013      	ands	r3, r2
   287b2:	d00d      	beq.n	287d0 <put_fat+0xa4>
   287b4:	697b      	ldr	r3, [r7, #20]
   287b6:	781b      	ldrb	r3, [r3, #0]
   287b8:	b25b      	sxtb	r3, r3
   287ba:	220f      	movs	r2, #15
   287bc:	4013      	ands	r3, r2
   287be:	b25a      	sxtb	r2, r3
   287c0:	687b      	ldr	r3, [r7, #4]
   287c2:	b2db      	uxtb	r3, r3
   287c4:	011b      	lsls	r3, r3, #4
   287c6:	b25b      	sxtb	r3, r3
   287c8:	4313      	orrs	r3, r2
   287ca:	b25b      	sxtb	r3, r3
   287cc:	b2db      	uxtb	r3, r3
   287ce:	e001      	b.n	287d4 <put_fat+0xa8>
   287d0:	687b      	ldr	r3, [r7, #4]
   287d2:	b2db      	uxtb	r3, r3
   287d4:	697a      	ldr	r2, [r7, #20]
   287d6:	7013      	strb	r3, [r2, #0]
			bc++;
   287d8:	69bb      	ldr	r3, [r7, #24]
   287da:	3301      	adds	r3, #1
   287dc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   287de:	68fb      	ldr	r3, [r7, #12]
   287e0:	2201      	movs	r2, #1
   287e2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   287e4:	68fb      	ldr	r3, [r7, #12]
   287e6:	6a1a      	ldr	r2, [r3, #32]
   287e8:	69bb      	ldr	r3, [r7, #24]
   287ea:	0a5b      	lsrs	r3, r3, #9
   287ec:	18d2      	adds	r2, r2, r3
   287ee:	231f      	movs	r3, #31
   287f0:	18fc      	adds	r4, r7, r3
   287f2:	68fb      	ldr	r3, [r7, #12]
   287f4:	0011      	movs	r1, r2
   287f6:	0018      	movs	r0, r3
   287f8:	4b5a      	ldr	r3, [pc, #360]	; (28964 <put_fat+0x238>)
   287fa:	4798      	blx	r3
   287fc:	0003      	movs	r3, r0
   287fe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   28800:	231f      	movs	r3, #31
   28802:	18fb      	adds	r3, r7, r3
   28804:	781b      	ldrb	r3, [r3, #0]
   28806:	2b00      	cmp	r3, #0
   28808:	d000      	beq.n	2880c <put_fat+0xe0>
   2880a:	e09b      	b.n	28944 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2880c:	69bb      	ldr	r3, [r7, #24]
   2880e:	05db      	lsls	r3, r3, #23
   28810:	0ddb      	lsrs	r3, r3, #23
   28812:	3330      	adds	r3, #48	; 0x30
   28814:	68fa      	ldr	r2, [r7, #12]
   28816:	18d3      	adds	r3, r2, r3
   28818:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2881a:	68bb      	ldr	r3, [r7, #8]
   2881c:	2201      	movs	r2, #1
   2881e:	4013      	ands	r3, r2
   28820:	d003      	beq.n	2882a <put_fat+0xfe>
   28822:	687b      	ldr	r3, [r7, #4]
   28824:	091b      	lsrs	r3, r3, #4
   28826:	b2db      	uxtb	r3, r3
   28828:	e00e      	b.n	28848 <put_fat+0x11c>
   2882a:	697b      	ldr	r3, [r7, #20]
   2882c:	781b      	ldrb	r3, [r3, #0]
   2882e:	b25b      	sxtb	r3, r3
   28830:	220f      	movs	r2, #15
   28832:	4393      	bics	r3, r2
   28834:	b25a      	sxtb	r2, r3
   28836:	687b      	ldr	r3, [r7, #4]
   28838:	0a1b      	lsrs	r3, r3, #8
   2883a:	b25b      	sxtb	r3, r3
   2883c:	210f      	movs	r1, #15
   2883e:	400b      	ands	r3, r1
   28840:	b25b      	sxtb	r3, r3
   28842:	4313      	orrs	r3, r2
   28844:	b25b      	sxtb	r3, r3
   28846:	b2db      	uxtb	r3, r3
   28848:	697a      	ldr	r2, [r7, #20]
   2884a:	7013      	strb	r3, [r2, #0]
			break;
   2884c:	e07f      	b.n	2894e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2884e:	68fb      	ldr	r3, [r7, #12]
   28850:	6a1a      	ldr	r2, [r3, #32]
   28852:	68bb      	ldr	r3, [r7, #8]
   28854:	0a1b      	lsrs	r3, r3, #8
   28856:	18d2      	adds	r2, r2, r3
   28858:	231f      	movs	r3, #31
   2885a:	18fc      	adds	r4, r7, r3
   2885c:	68fb      	ldr	r3, [r7, #12]
   2885e:	0011      	movs	r1, r2
   28860:	0018      	movs	r0, r3
   28862:	4b40      	ldr	r3, [pc, #256]	; (28964 <put_fat+0x238>)
   28864:	4798      	blx	r3
   28866:	0003      	movs	r3, r0
   28868:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2886a:	231f      	movs	r3, #31
   2886c:	18fb      	adds	r3, r7, r3
   2886e:	781b      	ldrb	r3, [r3, #0]
   28870:	2b00      	cmp	r3, #0
   28872:	d169      	bne.n	28948 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   28874:	68bb      	ldr	r3, [r7, #8]
   28876:	005a      	lsls	r2, r3, #1
   28878:	23ff      	movs	r3, #255	; 0xff
   2887a:	005b      	lsls	r3, r3, #1
   2887c:	4013      	ands	r3, r2
   2887e:	3330      	adds	r3, #48	; 0x30
   28880:	68fa      	ldr	r2, [r7, #12]
   28882:	18d3      	adds	r3, r2, r3
   28884:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   28886:	687b      	ldr	r3, [r7, #4]
   28888:	b2da      	uxtb	r2, r3
   2888a:	697b      	ldr	r3, [r7, #20]
   2888c:	701a      	strb	r2, [r3, #0]
   2888e:	697b      	ldr	r3, [r7, #20]
   28890:	3301      	adds	r3, #1
   28892:	687a      	ldr	r2, [r7, #4]
   28894:	b292      	uxth	r2, r2
   28896:	0a12      	lsrs	r2, r2, #8
   28898:	b292      	uxth	r2, r2
   2889a:	b2d2      	uxtb	r2, r2
   2889c:	701a      	strb	r2, [r3, #0]
			break;
   2889e:	e056      	b.n	2894e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   288a0:	68fb      	ldr	r3, [r7, #12]
   288a2:	6a1a      	ldr	r2, [r3, #32]
   288a4:	68bb      	ldr	r3, [r7, #8]
   288a6:	09db      	lsrs	r3, r3, #7
   288a8:	18d2      	adds	r2, r2, r3
   288aa:	231f      	movs	r3, #31
   288ac:	18fc      	adds	r4, r7, r3
   288ae:	68fb      	ldr	r3, [r7, #12]
   288b0:	0011      	movs	r1, r2
   288b2:	0018      	movs	r0, r3
   288b4:	4b2b      	ldr	r3, [pc, #172]	; (28964 <put_fat+0x238>)
   288b6:	4798      	blx	r3
   288b8:	0003      	movs	r3, r0
   288ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   288bc:	231f      	movs	r3, #31
   288be:	18fb      	adds	r3, r7, r3
   288c0:	781b      	ldrb	r3, [r3, #0]
   288c2:	2b00      	cmp	r3, #0
   288c4:	d142      	bne.n	2894c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   288c6:	68bb      	ldr	r3, [r7, #8]
   288c8:	009a      	lsls	r2, r3, #2
   288ca:	23fe      	movs	r3, #254	; 0xfe
   288cc:	005b      	lsls	r3, r3, #1
   288ce:	4013      	ands	r3, r2
   288d0:	3330      	adds	r3, #48	; 0x30
   288d2:	68fa      	ldr	r2, [r7, #12]
   288d4:	18d3      	adds	r3, r2, r3
   288d6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   288d8:	697b      	ldr	r3, [r7, #20]
   288da:	3303      	adds	r3, #3
   288dc:	781b      	ldrb	r3, [r3, #0]
   288de:	061a      	lsls	r2, r3, #24
   288e0:	697b      	ldr	r3, [r7, #20]
   288e2:	3302      	adds	r3, #2
   288e4:	781b      	ldrb	r3, [r3, #0]
   288e6:	041b      	lsls	r3, r3, #16
   288e8:	4313      	orrs	r3, r2
   288ea:	697a      	ldr	r2, [r7, #20]
   288ec:	3201      	adds	r2, #1
   288ee:	7812      	ldrb	r2, [r2, #0]
   288f0:	0212      	lsls	r2, r2, #8
   288f2:	4313      	orrs	r3, r2
   288f4:	697a      	ldr	r2, [r7, #20]
   288f6:	7812      	ldrb	r2, [r2, #0]
   288f8:	4313      	orrs	r3, r2
   288fa:	0f1b      	lsrs	r3, r3, #28
   288fc:	071b      	lsls	r3, r3, #28
   288fe:	687a      	ldr	r2, [r7, #4]
   28900:	4313      	orrs	r3, r2
   28902:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   28904:	687b      	ldr	r3, [r7, #4]
   28906:	b2da      	uxtb	r2, r3
   28908:	697b      	ldr	r3, [r7, #20]
   2890a:	701a      	strb	r2, [r3, #0]
   2890c:	697b      	ldr	r3, [r7, #20]
   2890e:	3301      	adds	r3, #1
   28910:	687a      	ldr	r2, [r7, #4]
   28912:	b292      	uxth	r2, r2
   28914:	0a12      	lsrs	r2, r2, #8
   28916:	b292      	uxth	r2, r2
   28918:	b2d2      	uxtb	r2, r2
   2891a:	701a      	strb	r2, [r3, #0]
   2891c:	697b      	ldr	r3, [r7, #20]
   2891e:	3302      	adds	r3, #2
   28920:	687a      	ldr	r2, [r7, #4]
   28922:	0c12      	lsrs	r2, r2, #16
   28924:	b2d2      	uxtb	r2, r2
   28926:	701a      	strb	r2, [r3, #0]
   28928:	697b      	ldr	r3, [r7, #20]
   2892a:	3303      	adds	r3, #3
   2892c:	687a      	ldr	r2, [r7, #4]
   2892e:	0e12      	lsrs	r2, r2, #24
   28930:	b2d2      	uxtb	r2, r2
   28932:	701a      	strb	r2, [r3, #0]
			break;
   28934:	e00b      	b.n	2894e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   28936:	231f      	movs	r3, #31
   28938:	18fb      	adds	r3, r7, r3
   2893a:	2202      	movs	r2, #2
   2893c:	701a      	strb	r2, [r3, #0]
   2893e:	e006      	b.n	2894e <put_fat+0x222>
			if (res != FR_OK) break;
   28940:	46c0      	nop			; (mov r8, r8)
   28942:	e004      	b.n	2894e <put_fat+0x222>
			if (res != FR_OK) break;
   28944:	46c0      	nop			; (mov r8, r8)
   28946:	e002      	b.n	2894e <put_fat+0x222>
			if (res != FR_OK) break;
   28948:	46c0      	nop			; (mov r8, r8)
   2894a:	e000      	b.n	2894e <put_fat+0x222>
			if (res != FR_OK) break;
   2894c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2894e:	68fb      	ldr	r3, [r7, #12]
   28950:	2201      	movs	r2, #1
   28952:	711a      	strb	r2, [r3, #4]
	}

	return res;
   28954:	231f      	movs	r3, #31
   28956:	18fb      	adds	r3, r7, r3
   28958:	781b      	ldrb	r3, [r3, #0]
}
   2895a:	0018      	movs	r0, r3
   2895c:	46bd      	mov	sp, r7
   2895e:	b009      	add	sp, #36	; 0x24
   28960:	bd90      	pop	{r4, r7, pc}
   28962:	46c0      	nop			; (mov r8, r8)
   28964:	00028329 	.word	0x00028329

00028968 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   28968:	b590      	push	{r4, r7, lr}
   2896a:	b085      	sub	sp, #20
   2896c:	af00      	add	r7, sp, #0
   2896e:	6078      	str	r0, [r7, #4]
   28970:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   28972:	683b      	ldr	r3, [r7, #0]
   28974:	2b01      	cmp	r3, #1
   28976:	d904      	bls.n	28982 <remove_chain+0x1a>
   28978:	687b      	ldr	r3, [r7, #4]
   2897a:	699a      	ldr	r2, [r3, #24]
   2897c:	683b      	ldr	r3, [r7, #0]
   2897e:	429a      	cmp	r2, r3
   28980:	d804      	bhi.n	2898c <remove_chain+0x24>
		res = FR_INT_ERR;
   28982:	230f      	movs	r3, #15
   28984:	18fb      	adds	r3, r7, r3
   28986:	2202      	movs	r2, #2
   28988:	701a      	strb	r2, [r3, #0]
   2898a:	e045      	b.n	28a18 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2898c:	230f      	movs	r3, #15
   2898e:	18fb      	adds	r3, r7, r3
   28990:	2200      	movs	r2, #0
   28992:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   28994:	e037      	b.n	28a06 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   28996:	683a      	ldr	r2, [r7, #0]
   28998:	687b      	ldr	r3, [r7, #4]
   2899a:	0011      	movs	r1, r2
   2899c:	0018      	movs	r0, r3
   2899e:	4b22      	ldr	r3, [pc, #136]	; (28a28 <remove_chain+0xc0>)
   289a0:	4798      	blx	r3
   289a2:	0003      	movs	r3, r0
   289a4:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   289a6:	68bb      	ldr	r3, [r7, #8]
   289a8:	2b00      	cmp	r3, #0
   289aa:	d032      	beq.n	28a12 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   289ac:	68bb      	ldr	r3, [r7, #8]
   289ae:	2b01      	cmp	r3, #1
   289b0:	d104      	bne.n	289bc <remove_chain+0x54>
   289b2:	230f      	movs	r3, #15
   289b4:	18fb      	adds	r3, r7, r3
   289b6:	2202      	movs	r2, #2
   289b8:	701a      	strb	r2, [r3, #0]
   289ba:	e02d      	b.n	28a18 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   289bc:	68bb      	ldr	r3, [r7, #8]
   289be:	3301      	adds	r3, #1
   289c0:	d104      	bne.n	289cc <remove_chain+0x64>
   289c2:	230f      	movs	r3, #15
   289c4:	18fb      	adds	r3, r7, r3
   289c6:	2201      	movs	r2, #1
   289c8:	701a      	strb	r2, [r3, #0]
   289ca:	e025      	b.n	28a18 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   289cc:	230f      	movs	r3, #15
   289ce:	18fc      	adds	r4, r7, r3
   289d0:	6839      	ldr	r1, [r7, #0]
   289d2:	687b      	ldr	r3, [r7, #4]
   289d4:	2200      	movs	r2, #0
   289d6:	0018      	movs	r0, r3
   289d8:	4b14      	ldr	r3, [pc, #80]	; (28a2c <remove_chain+0xc4>)
   289da:	4798      	blx	r3
   289dc:	0003      	movs	r3, r0
   289de:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   289e0:	230f      	movs	r3, #15
   289e2:	18fb      	adds	r3, r7, r3
   289e4:	781b      	ldrb	r3, [r3, #0]
   289e6:	2b00      	cmp	r3, #0
   289e8:	d115      	bne.n	28a16 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   289ea:	687b      	ldr	r3, [r7, #4]
   289ec:	691b      	ldr	r3, [r3, #16]
   289ee:	3301      	adds	r3, #1
   289f0:	d007      	beq.n	28a02 <remove_chain+0x9a>
				fs->free_clust++;
   289f2:	687b      	ldr	r3, [r7, #4]
   289f4:	691b      	ldr	r3, [r3, #16]
   289f6:	1c5a      	adds	r2, r3, #1
   289f8:	687b      	ldr	r3, [r7, #4]
   289fa:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   289fc:	687b      	ldr	r3, [r7, #4]
   289fe:	2201      	movs	r2, #1
   28a00:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   28a02:	68bb      	ldr	r3, [r7, #8]
   28a04:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   28a06:	687b      	ldr	r3, [r7, #4]
   28a08:	699a      	ldr	r2, [r3, #24]
   28a0a:	683b      	ldr	r3, [r7, #0]
   28a0c:	429a      	cmp	r2, r3
   28a0e:	d8c2      	bhi.n	28996 <remove_chain+0x2e>
   28a10:	e002      	b.n	28a18 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   28a12:	46c0      	nop			; (mov r8, r8)
   28a14:	e000      	b.n	28a18 <remove_chain+0xb0>
			if (res != FR_OK) break;
   28a16:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   28a18:	230f      	movs	r3, #15
   28a1a:	18fb      	adds	r3, r7, r3
   28a1c:	781b      	ldrb	r3, [r3, #0]
}
   28a1e:	0018      	movs	r0, r3
   28a20:	46bd      	mov	sp, r7
   28a22:	b005      	add	sp, #20
   28a24:	bd90      	pop	{r4, r7, pc}
   28a26:	46c0      	nop			; (mov r8, r8)
   28a28:	000285c1 	.word	0x000285c1
   28a2c:	0002872d 	.word	0x0002872d

00028a30 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   28a30:	b590      	push	{r4, r7, lr}
   28a32:	b087      	sub	sp, #28
   28a34:	af00      	add	r7, sp, #0
   28a36:	6078      	str	r0, [r7, #4]
   28a38:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   28a3a:	683b      	ldr	r3, [r7, #0]
   28a3c:	2b00      	cmp	r3, #0
   28a3e:	d10d      	bne.n	28a5c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   28a40:	687b      	ldr	r3, [r7, #4]
   28a42:	68db      	ldr	r3, [r3, #12]
   28a44:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   28a46:	693b      	ldr	r3, [r7, #16]
   28a48:	2b00      	cmp	r3, #0
   28a4a:	d004      	beq.n	28a56 <create_chain+0x26>
   28a4c:	687b      	ldr	r3, [r7, #4]
   28a4e:	699a      	ldr	r2, [r3, #24]
   28a50:	693b      	ldr	r3, [r7, #16]
   28a52:	429a      	cmp	r2, r3
   28a54:	d818      	bhi.n	28a88 <create_chain+0x58>
   28a56:	2301      	movs	r3, #1
   28a58:	613b      	str	r3, [r7, #16]
   28a5a:	e015      	b.n	28a88 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   28a5c:	683a      	ldr	r2, [r7, #0]
   28a5e:	687b      	ldr	r3, [r7, #4]
   28a60:	0011      	movs	r1, r2
   28a62:	0018      	movs	r0, r3
   28a64:	4b3e      	ldr	r3, [pc, #248]	; (28b60 <create_chain+0x130>)
   28a66:	4798      	blx	r3
   28a68:	0003      	movs	r3, r0
   28a6a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   28a6c:	68bb      	ldr	r3, [r7, #8]
   28a6e:	2b01      	cmp	r3, #1
   28a70:	d801      	bhi.n	28a76 <create_chain+0x46>
   28a72:	2301      	movs	r3, #1
   28a74:	e070      	b.n	28b58 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   28a76:	687b      	ldr	r3, [r7, #4]
   28a78:	699a      	ldr	r2, [r3, #24]
   28a7a:	68bb      	ldr	r3, [r7, #8]
   28a7c:	429a      	cmp	r2, r3
   28a7e:	d901      	bls.n	28a84 <create_chain+0x54>
   28a80:	68bb      	ldr	r3, [r7, #8]
   28a82:	e069      	b.n	28b58 <create_chain+0x128>
		scl = clst;
   28a84:	683b      	ldr	r3, [r7, #0]
   28a86:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   28a88:	693b      	ldr	r3, [r7, #16]
   28a8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   28a8c:	697b      	ldr	r3, [r7, #20]
   28a8e:	3301      	adds	r3, #1
   28a90:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   28a92:	687b      	ldr	r3, [r7, #4]
   28a94:	699a      	ldr	r2, [r3, #24]
   28a96:	697b      	ldr	r3, [r7, #20]
   28a98:	429a      	cmp	r2, r3
   28a9a:	d807      	bhi.n	28aac <create_chain+0x7c>
			ncl = 2;
   28a9c:	2302      	movs	r3, #2
   28a9e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   28aa0:	697a      	ldr	r2, [r7, #20]
   28aa2:	693b      	ldr	r3, [r7, #16]
   28aa4:	429a      	cmp	r2, r3
   28aa6:	d901      	bls.n	28aac <create_chain+0x7c>
   28aa8:	2300      	movs	r3, #0
   28aaa:	e055      	b.n	28b58 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   28aac:	697a      	ldr	r2, [r7, #20]
   28aae:	687b      	ldr	r3, [r7, #4]
   28ab0:	0011      	movs	r1, r2
   28ab2:	0018      	movs	r0, r3
   28ab4:	4b2a      	ldr	r3, [pc, #168]	; (28b60 <create_chain+0x130>)
   28ab6:	4798      	blx	r3
   28ab8:	0003      	movs	r3, r0
   28aba:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   28abc:	68bb      	ldr	r3, [r7, #8]
   28abe:	2b00      	cmp	r3, #0
   28ac0:	d00d      	beq.n	28ade <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   28ac2:	68bb      	ldr	r3, [r7, #8]
   28ac4:	3301      	adds	r3, #1
   28ac6:	d002      	beq.n	28ace <create_chain+0x9e>
   28ac8:	68bb      	ldr	r3, [r7, #8]
   28aca:	2b01      	cmp	r3, #1
   28acc:	d101      	bne.n	28ad2 <create_chain+0xa2>
			return cs;
   28ace:	68bb      	ldr	r3, [r7, #8]
   28ad0:	e042      	b.n	28b58 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   28ad2:	697a      	ldr	r2, [r7, #20]
   28ad4:	693b      	ldr	r3, [r7, #16]
   28ad6:	429a      	cmp	r2, r3
   28ad8:	d1d8      	bne.n	28a8c <create_chain+0x5c>
   28ada:	2300      	movs	r3, #0
   28adc:	e03c      	b.n	28b58 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   28ade:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   28ae0:	230f      	movs	r3, #15
   28ae2:	18fc      	adds	r4, r7, r3
   28ae4:	4a1f      	ldr	r2, [pc, #124]	; (28b64 <create_chain+0x134>)
   28ae6:	6979      	ldr	r1, [r7, #20]
   28ae8:	687b      	ldr	r3, [r7, #4]
   28aea:	0018      	movs	r0, r3
   28aec:	4b1e      	ldr	r3, [pc, #120]	; (28b68 <create_chain+0x138>)
   28aee:	4798      	blx	r3
   28af0:	0003      	movs	r3, r0
   28af2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   28af4:	230f      	movs	r3, #15
   28af6:	18fb      	adds	r3, r7, r3
   28af8:	781b      	ldrb	r3, [r3, #0]
   28afa:	2b00      	cmp	r3, #0
   28afc:	d10c      	bne.n	28b18 <create_chain+0xe8>
   28afe:	683b      	ldr	r3, [r7, #0]
   28b00:	2b00      	cmp	r3, #0
   28b02:	d009      	beq.n	28b18 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   28b04:	230f      	movs	r3, #15
   28b06:	18fc      	adds	r4, r7, r3
   28b08:	697a      	ldr	r2, [r7, #20]
   28b0a:	6839      	ldr	r1, [r7, #0]
   28b0c:	687b      	ldr	r3, [r7, #4]
   28b0e:	0018      	movs	r0, r3
   28b10:	4b15      	ldr	r3, [pc, #84]	; (28b68 <create_chain+0x138>)
   28b12:	4798      	blx	r3
   28b14:	0003      	movs	r3, r0
   28b16:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   28b18:	230f      	movs	r3, #15
   28b1a:	18fb      	adds	r3, r7, r3
   28b1c:	781b      	ldrb	r3, [r3, #0]
   28b1e:	2b00      	cmp	r3, #0
   28b20:	d10f      	bne.n	28b42 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   28b22:	687b      	ldr	r3, [r7, #4]
   28b24:	697a      	ldr	r2, [r7, #20]
   28b26:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   28b28:	687b      	ldr	r3, [r7, #4]
   28b2a:	691b      	ldr	r3, [r3, #16]
   28b2c:	3301      	adds	r3, #1
   28b2e:	d012      	beq.n	28b56 <create_chain+0x126>
			fs->free_clust--;
   28b30:	687b      	ldr	r3, [r7, #4]
   28b32:	691b      	ldr	r3, [r3, #16]
   28b34:	1e5a      	subs	r2, r3, #1
   28b36:	687b      	ldr	r3, [r7, #4]
   28b38:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   28b3a:	687b      	ldr	r3, [r7, #4]
   28b3c:	2201      	movs	r2, #1
   28b3e:	715a      	strb	r2, [r3, #5]
   28b40:	e009      	b.n	28b56 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   28b42:	230f      	movs	r3, #15
   28b44:	18fb      	adds	r3, r7, r3
   28b46:	781b      	ldrb	r3, [r3, #0]
   28b48:	2b01      	cmp	r3, #1
   28b4a:	d102      	bne.n	28b52 <create_chain+0x122>
   28b4c:	2301      	movs	r3, #1
   28b4e:	425b      	negs	r3, r3
   28b50:	e000      	b.n	28b54 <create_chain+0x124>
   28b52:	2301      	movs	r3, #1
   28b54:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   28b56:	697b      	ldr	r3, [r7, #20]
}
   28b58:	0018      	movs	r0, r3
   28b5a:	46bd      	mov	sp, r7
   28b5c:	b007      	add	sp, #28
   28b5e:	bd90      	pop	{r4, r7, pc}
   28b60:	000285c1 	.word	0x000285c1
   28b64:	0fffffff 	.word	0x0fffffff
   28b68:	0002872d 	.word	0x0002872d

00028b6c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   28b6c:	b580      	push	{r7, lr}
   28b6e:	b084      	sub	sp, #16
   28b70:	af00      	add	r7, sp, #0
   28b72:	6078      	str	r0, [r7, #4]
   28b74:	000a      	movs	r2, r1
   28b76:	1cbb      	adds	r3, r7, #2
   28b78:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   28b7a:	687b      	ldr	r3, [r7, #4]
   28b7c:	1cba      	adds	r2, r7, #2
   28b7e:	8812      	ldrh	r2, [r2, #0]
   28b80:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   28b82:	687b      	ldr	r3, [r7, #4]
   28b84:	689b      	ldr	r3, [r3, #8]
   28b86:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   28b88:	68fb      	ldr	r3, [r7, #12]
   28b8a:	2b01      	cmp	r3, #1
   28b8c:	d005      	beq.n	28b9a <dir_sdi+0x2e>
   28b8e:	687b      	ldr	r3, [r7, #4]
   28b90:	681b      	ldr	r3, [r3, #0]
   28b92:	699a      	ldr	r2, [r3, #24]
   28b94:	68fb      	ldr	r3, [r7, #12]
   28b96:	429a      	cmp	r2, r3
   28b98:	d801      	bhi.n	28b9e <dir_sdi+0x32>
		return FR_INT_ERR;
   28b9a:	2302      	movs	r3, #2
   28b9c:	e075      	b.n	28c8a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   28b9e:	68fb      	ldr	r3, [r7, #12]
   28ba0:	2b00      	cmp	r3, #0
   28ba2:	d108      	bne.n	28bb6 <dir_sdi+0x4a>
   28ba4:	687b      	ldr	r3, [r7, #4]
   28ba6:	681b      	ldr	r3, [r3, #0]
   28ba8:	781b      	ldrb	r3, [r3, #0]
   28baa:	2b03      	cmp	r3, #3
   28bac:	d103      	bne.n	28bb6 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   28bae:	687b      	ldr	r3, [r7, #4]
   28bb0:	681b      	ldr	r3, [r3, #0]
   28bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28bb4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   28bb6:	68fb      	ldr	r3, [r7, #12]
   28bb8:	2b00      	cmp	r3, #0
   28bba:	d116      	bne.n	28bea <dir_sdi+0x7e>
		dj->clust = clst;
   28bbc:	687b      	ldr	r3, [r7, #4]
   28bbe:	68fa      	ldr	r2, [r7, #12]
   28bc0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   28bc2:	687b      	ldr	r3, [r7, #4]
   28bc4:	681b      	ldr	r3, [r3, #0]
   28bc6:	891b      	ldrh	r3, [r3, #8]
   28bc8:	1cba      	adds	r2, r7, #2
   28bca:	8812      	ldrh	r2, [r2, #0]
   28bcc:	429a      	cmp	r2, r3
   28bce:	d301      	bcc.n	28bd4 <dir_sdi+0x68>
			return FR_INT_ERR;
   28bd0:	2302      	movs	r3, #2
   28bd2:	e05a      	b.n	28c8a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   28bd4:	687b      	ldr	r3, [r7, #4]
   28bd6:	681b      	ldr	r3, [r3, #0]
   28bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28bda:	1cba      	adds	r2, r7, #2
   28bdc:	8812      	ldrh	r2, [r2, #0]
   28bde:	0912      	lsrs	r2, r2, #4
   28be0:	b292      	uxth	r2, r2
   28be2:	189a      	adds	r2, r3, r2
   28be4:	687b      	ldr	r3, [r7, #4]
   28be6:	611a      	str	r2, [r3, #16]
   28be8:	e042      	b.n	28c70 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   28bea:	687b      	ldr	r3, [r7, #4]
   28bec:	681b      	ldr	r3, [r3, #0]
   28bee:	789b      	ldrb	r3, [r3, #2]
   28bf0:	b29a      	uxth	r2, r3
   28bf2:	230a      	movs	r3, #10
   28bf4:	18fb      	adds	r3, r7, r3
   28bf6:	0112      	lsls	r2, r2, #4
   28bf8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   28bfa:	e020      	b.n	28c3e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   28bfc:	687b      	ldr	r3, [r7, #4]
   28bfe:	681b      	ldr	r3, [r3, #0]
   28c00:	68fa      	ldr	r2, [r7, #12]
   28c02:	0011      	movs	r1, r2
   28c04:	0018      	movs	r0, r3
   28c06:	4b23      	ldr	r3, [pc, #140]	; (28c94 <dir_sdi+0x128>)
   28c08:	4798      	blx	r3
   28c0a:	0003      	movs	r3, r0
   28c0c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   28c0e:	68fb      	ldr	r3, [r7, #12]
   28c10:	3301      	adds	r3, #1
   28c12:	d101      	bne.n	28c18 <dir_sdi+0xac>
   28c14:	2301      	movs	r3, #1
   28c16:	e038      	b.n	28c8a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   28c18:	68fb      	ldr	r3, [r7, #12]
   28c1a:	2b01      	cmp	r3, #1
   28c1c:	d905      	bls.n	28c2a <dir_sdi+0xbe>
   28c1e:	687b      	ldr	r3, [r7, #4]
   28c20:	681b      	ldr	r3, [r3, #0]
   28c22:	699a      	ldr	r2, [r3, #24]
   28c24:	68fb      	ldr	r3, [r7, #12]
   28c26:	429a      	cmp	r2, r3
   28c28:	d801      	bhi.n	28c2e <dir_sdi+0xc2>
				return FR_INT_ERR;
   28c2a:	2302      	movs	r3, #2
   28c2c:	e02d      	b.n	28c8a <dir_sdi+0x11e>
			idx -= ic;
   28c2e:	1cbb      	adds	r3, r7, #2
   28c30:	1cb9      	adds	r1, r7, #2
   28c32:	220a      	movs	r2, #10
   28c34:	18ba      	adds	r2, r7, r2
   28c36:	8809      	ldrh	r1, [r1, #0]
   28c38:	8812      	ldrh	r2, [r2, #0]
   28c3a:	1a8a      	subs	r2, r1, r2
   28c3c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   28c3e:	1cba      	adds	r2, r7, #2
   28c40:	230a      	movs	r3, #10
   28c42:	18fb      	adds	r3, r7, r3
   28c44:	8812      	ldrh	r2, [r2, #0]
   28c46:	881b      	ldrh	r3, [r3, #0]
   28c48:	429a      	cmp	r2, r3
   28c4a:	d2d7      	bcs.n	28bfc <dir_sdi+0x90>
		}
		dj->clust = clst;
   28c4c:	687b      	ldr	r3, [r7, #4]
   28c4e:	68fa      	ldr	r2, [r7, #12]
   28c50:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   28c52:	687b      	ldr	r3, [r7, #4]
   28c54:	681b      	ldr	r3, [r3, #0]
   28c56:	68fa      	ldr	r2, [r7, #12]
   28c58:	0011      	movs	r1, r2
   28c5a:	0018      	movs	r0, r3
   28c5c:	4b0e      	ldr	r3, [pc, #56]	; (28c98 <dir_sdi+0x12c>)
   28c5e:	4798      	blx	r3
   28c60:	0002      	movs	r2, r0
   28c62:	1cbb      	adds	r3, r7, #2
   28c64:	881b      	ldrh	r3, [r3, #0]
   28c66:	091b      	lsrs	r3, r3, #4
   28c68:	b29b      	uxth	r3, r3
   28c6a:	18d2      	adds	r2, r2, r3
   28c6c:	687b      	ldr	r3, [r7, #4]
   28c6e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   28c70:	687b      	ldr	r3, [r7, #4]
   28c72:	681b      	ldr	r3, [r3, #0]
   28c74:	3330      	adds	r3, #48	; 0x30
   28c76:	001a      	movs	r2, r3
   28c78:	1cbb      	adds	r3, r7, #2
   28c7a:	881b      	ldrh	r3, [r3, #0]
   28c7c:	210f      	movs	r1, #15
   28c7e:	400b      	ands	r3, r1
   28c80:	015b      	lsls	r3, r3, #5
   28c82:	18d2      	adds	r2, r2, r3
   28c84:	687b      	ldr	r3, [r7, #4]
   28c86:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   28c88:	2300      	movs	r3, #0
}
   28c8a:	0018      	movs	r0, r3
   28c8c:	46bd      	mov	sp, r7
   28c8e:	b004      	add	sp, #16
   28c90:	bd80      	pop	{r7, pc}
   28c92:	46c0      	nop			; (mov r8, r8)
   28c94:	000285c1 	.word	0x000285c1
   28c98:	00028589 	.word	0x00028589

00028c9c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   28c9c:	b590      	push	{r4, r7, lr}
   28c9e:	b085      	sub	sp, #20
   28ca0:	af00      	add	r7, sp, #0
   28ca2:	6078      	str	r0, [r7, #4]
   28ca4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   28ca6:	687b      	ldr	r3, [r7, #4]
   28ca8:	88da      	ldrh	r2, [r3, #6]
   28caa:	2308      	movs	r3, #8
   28cac:	18fb      	adds	r3, r7, r3
   28cae:	3201      	adds	r2, #1
   28cb0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   28cb2:	2308      	movs	r3, #8
   28cb4:	18fb      	adds	r3, r7, r3
   28cb6:	881b      	ldrh	r3, [r3, #0]
   28cb8:	2b00      	cmp	r3, #0
   28cba:	d003      	beq.n	28cc4 <dir_next+0x28>
   28cbc:	687b      	ldr	r3, [r7, #4]
   28cbe:	691b      	ldr	r3, [r3, #16]
   28cc0:	2b00      	cmp	r3, #0
   28cc2:	d101      	bne.n	28cc8 <dir_next+0x2c>
		return FR_NO_FILE;
   28cc4:	2304      	movs	r3, #4
   28cc6:	e0d2      	b.n	28e6e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   28cc8:	2308      	movs	r3, #8
   28cca:	18fb      	adds	r3, r7, r3
   28ccc:	881b      	ldrh	r3, [r3, #0]
   28cce:	220f      	movs	r2, #15
   28cd0:	4013      	ands	r3, r2
   28cd2:	b29b      	uxth	r3, r3
   28cd4:	2b00      	cmp	r3, #0
   28cd6:	d000      	beq.n	28cda <dir_next+0x3e>
   28cd8:	e0b6      	b.n	28e48 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   28cda:	687b      	ldr	r3, [r7, #4]
   28cdc:	691b      	ldr	r3, [r3, #16]
   28cde:	1c5a      	adds	r2, r3, #1
   28ce0:	687b      	ldr	r3, [r7, #4]
   28ce2:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   28ce4:	687b      	ldr	r3, [r7, #4]
   28ce6:	68db      	ldr	r3, [r3, #12]
   28ce8:	2b00      	cmp	r3, #0
   28cea:	d10a      	bne.n	28d02 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   28cec:	687b      	ldr	r3, [r7, #4]
   28cee:	681b      	ldr	r3, [r3, #0]
   28cf0:	891b      	ldrh	r3, [r3, #8]
   28cf2:	2208      	movs	r2, #8
   28cf4:	18ba      	adds	r2, r7, r2
   28cf6:	8812      	ldrh	r2, [r2, #0]
   28cf8:	429a      	cmp	r2, r3
   28cfa:	d200      	bcs.n	28cfe <dir_next+0x62>
   28cfc:	e0a4      	b.n	28e48 <dir_next+0x1ac>
				return FR_NO_FILE;
   28cfe:	2304      	movs	r3, #4
   28d00:	e0b5      	b.n	28e6e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   28d02:	2308      	movs	r3, #8
   28d04:	18fb      	adds	r3, r7, r3
   28d06:	881b      	ldrh	r3, [r3, #0]
   28d08:	091b      	lsrs	r3, r3, #4
   28d0a:	b29b      	uxth	r3, r3
   28d0c:	001a      	movs	r2, r3
   28d0e:	687b      	ldr	r3, [r7, #4]
   28d10:	681b      	ldr	r3, [r3, #0]
   28d12:	789b      	ldrb	r3, [r3, #2]
   28d14:	3b01      	subs	r3, #1
   28d16:	4013      	ands	r3, r2
   28d18:	d000      	beq.n	28d1c <dir_next+0x80>
   28d1a:	e095      	b.n	28e48 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   28d1c:	687b      	ldr	r3, [r7, #4]
   28d1e:	681a      	ldr	r2, [r3, #0]
   28d20:	687b      	ldr	r3, [r7, #4]
   28d22:	68db      	ldr	r3, [r3, #12]
   28d24:	0019      	movs	r1, r3
   28d26:	0010      	movs	r0, r2
   28d28:	4b53      	ldr	r3, [pc, #332]	; (28e78 <dir_next+0x1dc>)
   28d2a:	4798      	blx	r3
   28d2c:	0003      	movs	r3, r0
   28d2e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   28d30:	68fb      	ldr	r3, [r7, #12]
   28d32:	2b01      	cmp	r3, #1
   28d34:	d801      	bhi.n	28d3a <dir_next+0x9e>
   28d36:	2302      	movs	r3, #2
   28d38:	e099      	b.n	28e6e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   28d3a:	68fb      	ldr	r3, [r7, #12]
   28d3c:	3301      	adds	r3, #1
   28d3e:	d101      	bne.n	28d44 <dir_next+0xa8>
   28d40:	2301      	movs	r3, #1
   28d42:	e094      	b.n	28e6e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   28d44:	687b      	ldr	r3, [r7, #4]
   28d46:	681b      	ldr	r3, [r3, #0]
   28d48:	699a      	ldr	r2, [r3, #24]
   28d4a:	68fb      	ldr	r3, [r7, #12]
   28d4c:	429a      	cmp	r2, r3
   28d4e:	d900      	bls.n	28d52 <dir_next+0xb6>
   28d50:	e06d      	b.n	28e2e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   28d52:	683b      	ldr	r3, [r7, #0]
   28d54:	2b00      	cmp	r3, #0
   28d56:	d101      	bne.n	28d5c <dir_next+0xc0>
   28d58:	2304      	movs	r3, #4
   28d5a:	e088      	b.n	28e6e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   28d5c:	687b      	ldr	r3, [r7, #4]
   28d5e:	681a      	ldr	r2, [r3, #0]
   28d60:	687b      	ldr	r3, [r7, #4]
   28d62:	68db      	ldr	r3, [r3, #12]
   28d64:	0019      	movs	r1, r3
   28d66:	0010      	movs	r0, r2
   28d68:	4b44      	ldr	r3, [pc, #272]	; (28e7c <dir_next+0x1e0>)
   28d6a:	4798      	blx	r3
   28d6c:	0003      	movs	r3, r0
   28d6e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   28d70:	68fb      	ldr	r3, [r7, #12]
   28d72:	2b00      	cmp	r3, #0
   28d74:	d101      	bne.n	28d7a <dir_next+0xde>
   28d76:	2307      	movs	r3, #7
   28d78:	e079      	b.n	28e6e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   28d7a:	68fb      	ldr	r3, [r7, #12]
   28d7c:	2b01      	cmp	r3, #1
   28d7e:	d101      	bne.n	28d84 <dir_next+0xe8>
   28d80:	2302      	movs	r3, #2
   28d82:	e074      	b.n	28e6e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   28d84:	68fb      	ldr	r3, [r7, #12]
   28d86:	3301      	adds	r3, #1
   28d88:	d101      	bne.n	28d8e <dir_next+0xf2>
   28d8a:	2301      	movs	r3, #1
   28d8c:	e06f      	b.n	28e6e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   28d8e:	687b      	ldr	r3, [r7, #4]
   28d90:	681b      	ldr	r3, [r3, #0]
   28d92:	2100      	movs	r1, #0
   28d94:	0018      	movs	r0, r3
   28d96:	4b3a      	ldr	r3, [pc, #232]	; (28e80 <dir_next+0x1e4>)
   28d98:	4798      	blx	r3
   28d9a:	1e03      	subs	r3, r0, #0
   28d9c:	d001      	beq.n	28da2 <dir_next+0x106>
   28d9e:	2301      	movs	r3, #1
   28da0:	e065      	b.n	28e6e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   28da2:	687b      	ldr	r3, [r7, #4]
   28da4:	681b      	ldr	r3, [r3, #0]
   28da6:	3330      	adds	r3, #48	; 0x30
   28da8:	0018      	movs	r0, r3
   28daa:	2380      	movs	r3, #128	; 0x80
   28dac:	009b      	lsls	r3, r3, #2
   28dae:	001a      	movs	r2, r3
   28db0:	2100      	movs	r1, #0
   28db2:	4b34      	ldr	r3, [pc, #208]	; (28e84 <dir_next+0x1e8>)
   28db4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   28db6:	687b      	ldr	r3, [r7, #4]
   28db8:	681c      	ldr	r4, [r3, #0]
   28dba:	687b      	ldr	r3, [r7, #4]
   28dbc:	681b      	ldr	r3, [r3, #0]
   28dbe:	68fa      	ldr	r2, [r7, #12]
   28dc0:	0011      	movs	r1, r2
   28dc2:	0018      	movs	r0, r3
   28dc4:	4b30      	ldr	r3, [pc, #192]	; (28e88 <dir_next+0x1ec>)
   28dc6:	4798      	blx	r3
   28dc8:	0003      	movs	r3, r0
   28dca:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   28dcc:	230b      	movs	r3, #11
   28dce:	18fb      	adds	r3, r7, r3
   28dd0:	2200      	movs	r2, #0
   28dd2:	701a      	strb	r2, [r3, #0]
   28dd4:	e019      	b.n	28e0a <dir_next+0x16e>
						dj->fs->wflag = 1;
   28dd6:	687b      	ldr	r3, [r7, #4]
   28dd8:	681b      	ldr	r3, [r3, #0]
   28dda:	2201      	movs	r2, #1
   28ddc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   28dde:	687b      	ldr	r3, [r7, #4]
   28de0:	681b      	ldr	r3, [r3, #0]
   28de2:	2100      	movs	r1, #0
   28de4:	0018      	movs	r0, r3
   28de6:	4b26      	ldr	r3, [pc, #152]	; (28e80 <dir_next+0x1e4>)
   28de8:	4798      	blx	r3
   28dea:	1e03      	subs	r3, r0, #0
   28dec:	d001      	beq.n	28df2 <dir_next+0x156>
   28dee:	2301      	movs	r3, #1
   28df0:	e03d      	b.n	28e6e <dir_next+0x1d2>
						dj->fs->winsect++;
   28df2:	687b      	ldr	r3, [r7, #4]
   28df4:	681b      	ldr	r3, [r3, #0]
   28df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   28df8:	3201      	adds	r2, #1
   28dfa:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   28dfc:	230b      	movs	r3, #11
   28dfe:	18fb      	adds	r3, r7, r3
   28e00:	781a      	ldrb	r2, [r3, #0]
   28e02:	230b      	movs	r3, #11
   28e04:	18fb      	adds	r3, r7, r3
   28e06:	3201      	adds	r2, #1
   28e08:	701a      	strb	r2, [r3, #0]
   28e0a:	687b      	ldr	r3, [r7, #4]
   28e0c:	681b      	ldr	r3, [r3, #0]
   28e0e:	789b      	ldrb	r3, [r3, #2]
   28e10:	220b      	movs	r2, #11
   28e12:	18ba      	adds	r2, r7, r2
   28e14:	7812      	ldrb	r2, [r2, #0]
   28e16:	429a      	cmp	r2, r3
   28e18:	d3dd      	bcc.n	28dd6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   28e1a:	687b      	ldr	r3, [r7, #4]
   28e1c:	681b      	ldr	r3, [r3, #0]
   28e1e:	687a      	ldr	r2, [r7, #4]
   28e20:	6812      	ldr	r2, [r2, #0]
   28e22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   28e24:	220b      	movs	r2, #11
   28e26:	18ba      	adds	r2, r7, r2
   28e28:	7812      	ldrb	r2, [r2, #0]
   28e2a:	1a8a      	subs	r2, r1, r2
   28e2c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   28e2e:	687b      	ldr	r3, [r7, #4]
   28e30:	68fa      	ldr	r2, [r7, #12]
   28e32:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   28e34:	687b      	ldr	r3, [r7, #4]
   28e36:	681b      	ldr	r3, [r3, #0]
   28e38:	68fa      	ldr	r2, [r7, #12]
   28e3a:	0011      	movs	r1, r2
   28e3c:	0018      	movs	r0, r3
   28e3e:	4b12      	ldr	r3, [pc, #72]	; (28e88 <dir_next+0x1ec>)
   28e40:	4798      	blx	r3
   28e42:	0002      	movs	r2, r0
   28e44:	687b      	ldr	r3, [r7, #4]
   28e46:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   28e48:	687b      	ldr	r3, [r7, #4]
   28e4a:	2208      	movs	r2, #8
   28e4c:	18ba      	adds	r2, r7, r2
   28e4e:	8812      	ldrh	r2, [r2, #0]
   28e50:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   28e52:	687b      	ldr	r3, [r7, #4]
   28e54:	681b      	ldr	r3, [r3, #0]
   28e56:	3330      	adds	r3, #48	; 0x30
   28e58:	001a      	movs	r2, r3
   28e5a:	2308      	movs	r3, #8
   28e5c:	18fb      	adds	r3, r7, r3
   28e5e:	881b      	ldrh	r3, [r3, #0]
   28e60:	210f      	movs	r1, #15
   28e62:	400b      	ands	r3, r1
   28e64:	015b      	lsls	r3, r3, #5
   28e66:	18d2      	adds	r2, r2, r3
   28e68:	687b      	ldr	r3, [r7, #4]
   28e6a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   28e6c:	2300      	movs	r3, #0
}
   28e6e:	0018      	movs	r0, r3
   28e70:	46bd      	mov	sp, r7
   28e72:	b005      	add	sp, #20
   28e74:	bd90      	pop	{r4, r7, pc}
   28e76:	46c0      	nop			; (mov r8, r8)
   28e78:	000285c1 	.word	0x000285c1
   28e7c:	00028a31 	.word	0x00028a31
   28e80:	00028329 	.word	0x00028329
   28e84:	0002827d 	.word	0x0002827d
   28e88:	00028589 	.word	0x00028589

00028e8c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   28e8c:	b590      	push	{r4, r7, lr}
   28e8e:	b087      	sub	sp, #28
   28e90:	af00      	add	r7, sp, #0
   28e92:	6078      	str	r0, [r7, #4]
   28e94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   28e96:	683b      	ldr	r3, [r7, #0]
   28e98:	781b      	ldrb	r3, [r3, #0]
   28e9a:	001a      	movs	r2, r3
   28e9c:	2340      	movs	r3, #64	; 0x40
   28e9e:	439a      	bics	r2, r3
   28ea0:	0013      	movs	r3, r2
   28ea2:	1e5a      	subs	r2, r3, #1
   28ea4:	0013      	movs	r3, r2
   28ea6:	005b      	lsls	r3, r3, #1
   28ea8:	189b      	adds	r3, r3, r2
   28eaa:	009b      	lsls	r3, r3, #2
   28eac:	189b      	adds	r3, r3, r2
   28eae:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   28eb0:	2300      	movs	r3, #0
   28eb2:	613b      	str	r3, [r7, #16]
   28eb4:	230e      	movs	r3, #14
   28eb6:	18fb      	adds	r3, r7, r3
   28eb8:	2201      	movs	r2, #1
   28eba:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   28ebc:	4a31      	ldr	r2, [pc, #196]	; (28f84 <cmp_lfn+0xf8>)
   28ebe:	693b      	ldr	r3, [r7, #16]
   28ec0:	18d3      	adds	r3, r2, r3
   28ec2:	781b      	ldrb	r3, [r3, #0]
   28ec4:	3301      	adds	r3, #1
   28ec6:	683a      	ldr	r2, [r7, #0]
   28ec8:	18d3      	adds	r3, r2, r3
   28eca:	781b      	ldrb	r3, [r3, #0]
   28ecc:	021b      	lsls	r3, r3, #8
   28ece:	b21a      	sxth	r2, r3
   28ed0:	492c      	ldr	r1, [pc, #176]	; (28f84 <cmp_lfn+0xf8>)
   28ed2:	693b      	ldr	r3, [r7, #16]
   28ed4:	18cb      	adds	r3, r1, r3
   28ed6:	781b      	ldrb	r3, [r3, #0]
   28ed8:	0019      	movs	r1, r3
   28eda:	683b      	ldr	r3, [r7, #0]
   28edc:	185b      	adds	r3, r3, r1
   28ede:	781b      	ldrb	r3, [r3, #0]
   28ee0:	b21b      	sxth	r3, r3
   28ee2:	4313      	orrs	r3, r2
   28ee4:	b21a      	sxth	r2, r3
   28ee6:	230c      	movs	r3, #12
   28ee8:	18fb      	adds	r3, r7, r3
   28eea:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   28eec:	230e      	movs	r3, #14
   28eee:	18fb      	adds	r3, r7, r3
   28ef0:	881b      	ldrh	r3, [r3, #0]
   28ef2:	2b00      	cmp	r3, #0
   28ef4:	d01f      	beq.n	28f36 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   28ef6:	230e      	movs	r3, #14
   28ef8:	18fc      	adds	r4, r7, r3
   28efa:	230c      	movs	r3, #12
   28efc:	18fb      	adds	r3, r7, r3
   28efe:	881b      	ldrh	r3, [r3, #0]
   28f00:	0018      	movs	r0, r3
   28f02:	4b21      	ldr	r3, [pc, #132]	; (28f88 <cmp_lfn+0xfc>)
   28f04:	4798      	blx	r3
   28f06:	0003      	movs	r3, r0
   28f08:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   28f0a:	697b      	ldr	r3, [r7, #20]
   28f0c:	2bfe      	cmp	r3, #254	; 0xfe
   28f0e:	d810      	bhi.n	28f32 <cmp_lfn+0xa6>
   28f10:	697b      	ldr	r3, [r7, #20]
   28f12:	1c5a      	adds	r2, r3, #1
   28f14:	617a      	str	r2, [r7, #20]
   28f16:	005b      	lsls	r3, r3, #1
   28f18:	687a      	ldr	r2, [r7, #4]
   28f1a:	18d3      	adds	r3, r2, r3
   28f1c:	881b      	ldrh	r3, [r3, #0]
   28f1e:	0018      	movs	r0, r3
   28f20:	4b19      	ldr	r3, [pc, #100]	; (28f88 <cmp_lfn+0xfc>)
   28f22:	4798      	blx	r3
   28f24:	0003      	movs	r3, r0
   28f26:	001a      	movs	r2, r3
   28f28:	230e      	movs	r3, #14
   28f2a:	18fb      	adds	r3, r7, r3
   28f2c:	881b      	ldrh	r3, [r3, #0]
   28f2e:	4293      	cmp	r3, r2
   28f30:	d009      	beq.n	28f46 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   28f32:	2300      	movs	r3, #0
   28f34:	e022      	b.n	28f7c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   28f36:	230c      	movs	r3, #12
   28f38:	18fb      	adds	r3, r7, r3
   28f3a:	881b      	ldrh	r3, [r3, #0]
   28f3c:	4a13      	ldr	r2, [pc, #76]	; (28f8c <cmp_lfn+0x100>)
   28f3e:	4293      	cmp	r3, r2
   28f40:	d001      	beq.n	28f46 <cmp_lfn+0xba>
   28f42:	2300      	movs	r3, #0
   28f44:	e01a      	b.n	28f7c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   28f46:	693b      	ldr	r3, [r7, #16]
   28f48:	3301      	adds	r3, #1
   28f4a:	613b      	str	r3, [r7, #16]
   28f4c:	693b      	ldr	r3, [r7, #16]
   28f4e:	2b0c      	cmp	r3, #12
   28f50:	d9b4      	bls.n	28ebc <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   28f52:	683b      	ldr	r3, [r7, #0]
   28f54:	781b      	ldrb	r3, [r3, #0]
   28f56:	001a      	movs	r2, r3
   28f58:	2340      	movs	r3, #64	; 0x40
   28f5a:	4013      	ands	r3, r2
   28f5c:	d00d      	beq.n	28f7a <cmp_lfn+0xee>
   28f5e:	230e      	movs	r3, #14
   28f60:	18fb      	adds	r3, r7, r3
   28f62:	881b      	ldrh	r3, [r3, #0]
   28f64:	2b00      	cmp	r3, #0
   28f66:	d008      	beq.n	28f7a <cmp_lfn+0xee>
   28f68:	697b      	ldr	r3, [r7, #20]
   28f6a:	005b      	lsls	r3, r3, #1
   28f6c:	687a      	ldr	r2, [r7, #4]
   28f6e:	18d3      	adds	r3, r2, r3
   28f70:	881b      	ldrh	r3, [r3, #0]
   28f72:	2b00      	cmp	r3, #0
   28f74:	d001      	beq.n	28f7a <cmp_lfn+0xee>
		return 0;
   28f76:	2300      	movs	r3, #0
   28f78:	e000      	b.n	28f7c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   28f7a:	2301      	movs	r3, #1
}
   28f7c:	0018      	movs	r0, r3
   28f7e:	46bd      	mov	sp, r7
   28f80:	b007      	add	sp, #28
   28f82:	bd90      	pop	{r4, r7, pc}
   28f84:	000378c4 	.word	0x000378c4
   28f88:	0002b7b5 	.word	0x0002b7b5
   28f8c:	0000ffff 	.word	0x0000ffff

00028f90 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
   28f90:	b580      	push	{r7, lr}
   28f92:	b086      	sub	sp, #24
   28f94:	af00      	add	r7, sp, #0
   28f96:	6078      	str	r0, [r7, #4]
   28f98:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   28f9a:	683b      	ldr	r3, [r7, #0]
   28f9c:	781b      	ldrb	r3, [r3, #0]
   28f9e:	001a      	movs	r2, r3
   28fa0:	233f      	movs	r3, #63	; 0x3f
   28fa2:	4013      	ands	r3, r2
   28fa4:	1e5a      	subs	r2, r3, #1
   28fa6:	0013      	movs	r3, r2
   28fa8:	005b      	lsls	r3, r3, #1
   28faa:	189b      	adds	r3, r3, r2
   28fac:	009b      	lsls	r3, r3, #2
   28fae:	189b      	adds	r3, r3, r2
   28fb0:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
   28fb2:	2300      	movs	r3, #0
   28fb4:	613b      	str	r3, [r7, #16]
   28fb6:	230e      	movs	r3, #14
   28fb8:	18fb      	adds	r3, r7, r3
   28fba:	2201      	movs	r2, #1
   28fbc:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   28fbe:	4a2b      	ldr	r2, [pc, #172]	; (2906c <pick_lfn+0xdc>)
   28fc0:	693b      	ldr	r3, [r7, #16]
   28fc2:	18d3      	adds	r3, r2, r3
   28fc4:	781b      	ldrb	r3, [r3, #0]
   28fc6:	3301      	adds	r3, #1
   28fc8:	683a      	ldr	r2, [r7, #0]
   28fca:	18d3      	adds	r3, r2, r3
   28fcc:	781b      	ldrb	r3, [r3, #0]
   28fce:	021b      	lsls	r3, r3, #8
   28fd0:	b21a      	sxth	r2, r3
   28fd2:	4926      	ldr	r1, [pc, #152]	; (2906c <pick_lfn+0xdc>)
   28fd4:	693b      	ldr	r3, [r7, #16]
   28fd6:	18cb      	adds	r3, r1, r3
   28fd8:	781b      	ldrb	r3, [r3, #0]
   28fda:	0019      	movs	r1, r3
   28fdc:	683b      	ldr	r3, [r7, #0]
   28fde:	185b      	adds	r3, r3, r1
   28fe0:	781b      	ldrb	r3, [r3, #0]
   28fe2:	b21b      	sxth	r3, r3
   28fe4:	4313      	orrs	r3, r2
   28fe6:	b21a      	sxth	r2, r3
   28fe8:	230c      	movs	r3, #12
   28fea:	18fb      	adds	r3, r7, r3
   28fec:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   28fee:	230e      	movs	r3, #14
   28ff0:	18fb      	adds	r3, r7, r3
   28ff2:	881b      	ldrh	r3, [r3, #0]
   28ff4:	2b00      	cmp	r3, #0
   28ff6:	d015      	beq.n	29024 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   28ff8:	697b      	ldr	r3, [r7, #20]
   28ffa:	2bfe      	cmp	r3, #254	; 0xfe
   28ffc:	d901      	bls.n	29002 <pick_lfn+0x72>
   28ffe:	2300      	movs	r3, #0
   29000:	e030      	b.n	29064 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   29002:	697b      	ldr	r3, [r7, #20]
   29004:	1c5a      	adds	r2, r3, #1
   29006:	617a      	str	r2, [r7, #20]
   29008:	005b      	lsls	r3, r3, #1
   2900a:	687a      	ldr	r2, [r7, #4]
   2900c:	18d3      	adds	r3, r2, r3
   2900e:	220e      	movs	r2, #14
   29010:	18ba      	adds	r2, r7, r2
   29012:	210c      	movs	r1, #12
   29014:	1879      	adds	r1, r7, r1
   29016:	8809      	ldrh	r1, [r1, #0]
   29018:	8011      	strh	r1, [r2, #0]
   2901a:	220e      	movs	r2, #14
   2901c:	18ba      	adds	r2, r7, r2
   2901e:	8812      	ldrh	r2, [r2, #0]
   29020:	801a      	strh	r2, [r3, #0]
   29022:	e007      	b.n	29034 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   29024:	230c      	movs	r3, #12
   29026:	18fb      	adds	r3, r7, r3
   29028:	881b      	ldrh	r3, [r3, #0]
   2902a:	4a11      	ldr	r2, [pc, #68]	; (29070 <pick_lfn+0xe0>)
   2902c:	4293      	cmp	r3, r2
   2902e:	d001      	beq.n	29034 <pick_lfn+0xa4>
   29030:	2300      	movs	r3, #0
   29032:	e017      	b.n	29064 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
   29034:	693b      	ldr	r3, [r7, #16]
   29036:	3301      	adds	r3, #1
   29038:	613b      	str	r3, [r7, #16]
   2903a:	693b      	ldr	r3, [r7, #16]
   2903c:	2b0c      	cmp	r3, #12
   2903e:	d9be      	bls.n	28fbe <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   29040:	683b      	ldr	r3, [r7, #0]
   29042:	781b      	ldrb	r3, [r3, #0]
   29044:	001a      	movs	r2, r3
   29046:	2340      	movs	r3, #64	; 0x40
   29048:	4013      	ands	r3, r2
   2904a:	d00a      	beq.n	29062 <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   2904c:	697b      	ldr	r3, [r7, #20]
   2904e:	2bfe      	cmp	r3, #254	; 0xfe
   29050:	d901      	bls.n	29056 <pick_lfn+0xc6>
   29052:	2300      	movs	r3, #0
   29054:	e006      	b.n	29064 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
   29056:	697b      	ldr	r3, [r7, #20]
   29058:	005b      	lsls	r3, r3, #1
   2905a:	687a      	ldr	r2, [r7, #4]
   2905c:	18d3      	adds	r3, r2, r3
   2905e:	2200      	movs	r2, #0
   29060:	801a      	strh	r2, [r3, #0]
	}

	return 1;
   29062:	2301      	movs	r3, #1
}
   29064:	0018      	movs	r0, r3
   29066:	46bd      	mov	sp, r7
   29068:	b006      	add	sp, #24
   2906a:	bd80      	pop	{r7, pc}
   2906c:	000378c4 	.word	0x000378c4
   29070:	0000ffff 	.word	0x0000ffff

00029074 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   29074:	b580      	push	{r7, lr}
   29076:	b088      	sub	sp, #32
   29078:	af00      	add	r7, sp, #0
   2907a:	60f8      	str	r0, [r7, #12]
   2907c:	60b9      	str	r1, [r7, #8]
   2907e:	0019      	movs	r1, r3
   29080:	1dfb      	adds	r3, r7, #7
   29082:	701a      	strb	r2, [r3, #0]
   29084:	1dbb      	adds	r3, r7, #6
   29086:	1c0a      	adds	r2, r1, #0
   29088:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2908a:	68bb      	ldr	r3, [r7, #8]
   2908c:	330d      	adds	r3, #13
   2908e:	1dba      	adds	r2, r7, #6
   29090:	7812      	ldrb	r2, [r2, #0]
   29092:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   29094:	68bb      	ldr	r3, [r7, #8]
   29096:	330b      	adds	r3, #11
   29098:	220f      	movs	r2, #15
   2909a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2909c:	68bb      	ldr	r3, [r7, #8]
   2909e:	330c      	adds	r3, #12
   290a0:	2200      	movs	r2, #0
   290a2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   290a4:	68bb      	ldr	r3, [r7, #8]
   290a6:	331a      	adds	r3, #26
   290a8:	2200      	movs	r2, #0
   290aa:	701a      	strb	r2, [r3, #0]
   290ac:	68bb      	ldr	r3, [r7, #8]
   290ae:	331b      	adds	r3, #27
   290b0:	2200      	movs	r2, #0
   290b2:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   290b4:	1dfb      	adds	r3, r7, #7
   290b6:	781b      	ldrb	r3, [r3, #0]
   290b8:	1e5a      	subs	r2, r3, #1
   290ba:	0013      	movs	r3, r2
   290bc:	005b      	lsls	r3, r3, #1
   290be:	189b      	adds	r3, r3, r2
   290c0:	009b      	lsls	r3, r3, #2
   290c2:	189b      	adds	r3, r3, r2
   290c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   290c6:	2316      	movs	r3, #22
   290c8:	18fb      	adds	r3, r7, r3
   290ca:	2200      	movs	r2, #0
   290cc:	801a      	strh	r2, [r3, #0]
   290ce:	2300      	movs	r3, #0
   290d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   290d2:	2316      	movs	r3, #22
   290d4:	18fb      	adds	r3, r7, r3
   290d6:	881b      	ldrh	r3, [r3, #0]
   290d8:	4a28      	ldr	r2, [pc, #160]	; (2917c <fit_lfn+0x108>)
   290da:	4293      	cmp	r3, r2
   290dc:	d009      	beq.n	290f2 <fit_lfn+0x7e>
   290de:	69fb      	ldr	r3, [r7, #28]
   290e0:	1c5a      	adds	r2, r3, #1
   290e2:	61fa      	str	r2, [r7, #28]
   290e4:	005b      	lsls	r3, r3, #1
   290e6:	68fa      	ldr	r2, [r7, #12]
   290e8:	18d2      	adds	r2, r2, r3
   290ea:	2316      	movs	r3, #22
   290ec:	18fb      	adds	r3, r7, r3
   290ee:	8812      	ldrh	r2, [r2, #0]
   290f0:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   290f2:	4a23      	ldr	r2, [pc, #140]	; (29180 <fit_lfn+0x10c>)
   290f4:	69bb      	ldr	r3, [r7, #24]
   290f6:	18d3      	adds	r3, r2, r3
   290f8:	781b      	ldrb	r3, [r3, #0]
   290fa:	001a      	movs	r2, r3
   290fc:	68bb      	ldr	r3, [r7, #8]
   290fe:	189b      	adds	r3, r3, r2
   29100:	2216      	movs	r2, #22
   29102:	18ba      	adds	r2, r7, r2
   29104:	8812      	ldrh	r2, [r2, #0]
   29106:	b2d2      	uxtb	r2, r2
   29108:	701a      	strb	r2, [r3, #0]
   2910a:	4a1d      	ldr	r2, [pc, #116]	; (29180 <fit_lfn+0x10c>)
   2910c:	69bb      	ldr	r3, [r7, #24]
   2910e:	18d3      	adds	r3, r2, r3
   29110:	781b      	ldrb	r3, [r3, #0]
   29112:	3301      	adds	r3, #1
   29114:	68ba      	ldr	r2, [r7, #8]
   29116:	18d3      	adds	r3, r2, r3
   29118:	2216      	movs	r2, #22
   2911a:	18ba      	adds	r2, r7, r2
   2911c:	8812      	ldrh	r2, [r2, #0]
   2911e:	0a12      	lsrs	r2, r2, #8
   29120:	b292      	uxth	r2, r2
   29122:	b2d2      	uxtb	r2, r2
   29124:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   29126:	2316      	movs	r3, #22
   29128:	18fb      	adds	r3, r7, r3
   2912a:	881b      	ldrh	r3, [r3, #0]
   2912c:	2b00      	cmp	r3, #0
   2912e:	d104      	bne.n	2913a <fit_lfn+0xc6>
   29130:	2316      	movs	r3, #22
   29132:	18fb      	adds	r3, r7, r3
   29134:	2201      	movs	r2, #1
   29136:	4252      	negs	r2, r2
   29138:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2913a:	69bb      	ldr	r3, [r7, #24]
   2913c:	3301      	adds	r3, #1
   2913e:	61bb      	str	r3, [r7, #24]
   29140:	69bb      	ldr	r3, [r7, #24]
   29142:	2b0c      	cmp	r3, #12
   29144:	d9c5      	bls.n	290d2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   29146:	2316      	movs	r3, #22
   29148:	18fb      	adds	r3, r7, r3
   2914a:	881b      	ldrh	r3, [r3, #0]
   2914c:	4a0b      	ldr	r2, [pc, #44]	; (2917c <fit_lfn+0x108>)
   2914e:	4293      	cmp	r3, r2
   29150:	d006      	beq.n	29160 <fit_lfn+0xec>
   29152:	69fb      	ldr	r3, [r7, #28]
   29154:	005b      	lsls	r3, r3, #1
   29156:	68fa      	ldr	r2, [r7, #12]
   29158:	18d3      	adds	r3, r2, r3
   2915a:	881b      	ldrh	r3, [r3, #0]
   2915c:	2b00      	cmp	r3, #0
   2915e:	d105      	bne.n	2916c <fit_lfn+0xf8>
   29160:	1dfb      	adds	r3, r7, #7
   29162:	1dfa      	adds	r2, r7, #7
   29164:	7812      	ldrb	r2, [r2, #0]
   29166:	2140      	movs	r1, #64	; 0x40
   29168:	430a      	orrs	r2, r1
   2916a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2916c:	68bb      	ldr	r3, [r7, #8]
   2916e:	1dfa      	adds	r2, r7, #7
   29170:	7812      	ldrb	r2, [r2, #0]
   29172:	701a      	strb	r2, [r3, #0]
}
   29174:	46c0      	nop			; (mov r8, r8)
   29176:	46bd      	mov	sp, r7
   29178:	b008      	add	sp, #32
   2917a:	bd80      	pop	{r7, pc}
   2917c:	0000ffff 	.word	0x0000ffff
   29180:	000378c4 	.word	0x000378c4

00029184 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   29184:	b580      	push	{r7, lr}
   29186:	b08a      	sub	sp, #40	; 0x28
   29188:	af00      	add	r7, sp, #0
   2918a:	60f8      	str	r0, [r7, #12]
   2918c:	60b9      	str	r1, [r7, #8]
   2918e:	607a      	str	r2, [r7, #4]
   29190:	001a      	movs	r2, r3
   29192:	1cbb      	adds	r3, r7, #2
   29194:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   29196:	68b9      	ldr	r1, [r7, #8]
   29198:	68fb      	ldr	r3, [r7, #12]
   2919a:	220b      	movs	r2, #11
   2919c:	0018      	movs	r0, r3
   2919e:	4b38      	ldr	r3, [pc, #224]	; (29280 <gen_numname+0xfc>)
   291a0:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   291a2:	1cbb      	adds	r3, r7, #2
   291a4:	881b      	ldrh	r3, [r3, #0]
   291a6:	2b05      	cmp	r3, #5
   291a8:	d911      	bls.n	291ce <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   291aa:	1cbb      	adds	r3, r7, #2
   291ac:	881b      	ldrh	r3, [r3, #0]
   291ae:	b29a      	uxth	r2, r3
   291b0:	0852      	lsrs	r2, r2, #1
   291b2:	03db      	lsls	r3, r3, #15
   291b4:	4313      	orrs	r3, r2
   291b6:	b299      	uxth	r1, r3
   291b8:	687b      	ldr	r3, [r7, #4]
   291ba:	1c9a      	adds	r2, r3, #2
   291bc:	607a      	str	r2, [r7, #4]
   291be:	881a      	ldrh	r2, [r3, #0]
   291c0:	1cbb      	adds	r3, r7, #2
   291c2:	188a      	adds	r2, r1, r2
   291c4:	801a      	strh	r2, [r3, #0]
   291c6:	687b      	ldr	r3, [r7, #4]
   291c8:	881b      	ldrh	r3, [r3, #0]
   291ca:	2b00      	cmp	r3, #0
   291cc:	d1ed      	bne.n	291aa <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   291ce:	2307      	movs	r3, #7
   291d0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   291d2:	1cbb      	adds	r3, r7, #2
   291d4:	881b      	ldrh	r3, [r3, #0]
   291d6:	b2db      	uxtb	r3, r3
   291d8:	220f      	movs	r2, #15
   291da:	4013      	ands	r3, r2
   291dc:	b2da      	uxtb	r2, r3
   291de:	2327      	movs	r3, #39	; 0x27
   291e0:	18fb      	adds	r3, r7, r3
   291e2:	3230      	adds	r2, #48	; 0x30
   291e4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   291e6:	2327      	movs	r3, #39	; 0x27
   291e8:	18fb      	adds	r3, r7, r3
   291ea:	781b      	ldrb	r3, [r3, #0]
   291ec:	2b39      	cmp	r3, #57	; 0x39
   291ee:	d906      	bls.n	291fe <gen_numname+0x7a>
   291f0:	2327      	movs	r3, #39	; 0x27
   291f2:	18fb      	adds	r3, r7, r3
   291f4:	2227      	movs	r2, #39	; 0x27
   291f6:	18ba      	adds	r2, r7, r2
   291f8:	7812      	ldrb	r2, [r2, #0]
   291fa:	3207      	adds	r2, #7
   291fc:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   291fe:	6a3b      	ldr	r3, [r7, #32]
   29200:	1e5a      	subs	r2, r3, #1
   29202:	623a      	str	r2, [r7, #32]
   29204:	2214      	movs	r2, #20
   29206:	18ba      	adds	r2, r7, r2
   29208:	2127      	movs	r1, #39	; 0x27
   2920a:	1879      	adds	r1, r7, r1
   2920c:	7809      	ldrb	r1, [r1, #0]
   2920e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   29210:	1cbb      	adds	r3, r7, #2
   29212:	1cba      	adds	r2, r7, #2
   29214:	8812      	ldrh	r2, [r2, #0]
   29216:	0912      	lsrs	r2, r2, #4
   29218:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2921a:	1cbb      	adds	r3, r7, #2
   2921c:	881b      	ldrh	r3, [r3, #0]
   2921e:	2b00      	cmp	r3, #0
   29220:	d1d7      	bne.n	291d2 <gen_numname+0x4e>
	ns[i] = '~';
   29222:	2314      	movs	r3, #20
   29224:	18fa      	adds	r2, r7, r3
   29226:	6a3b      	ldr	r3, [r7, #32]
   29228:	18d3      	adds	r3, r2, r3
   2922a:	227e      	movs	r2, #126	; 0x7e
   2922c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2922e:	2300      	movs	r3, #0
   29230:	61fb      	str	r3, [r7, #28]
   29232:	e002      	b.n	2923a <gen_numname+0xb6>
   29234:	69fb      	ldr	r3, [r7, #28]
   29236:	3301      	adds	r3, #1
   29238:	61fb      	str	r3, [r7, #28]
   2923a:	69fa      	ldr	r2, [r7, #28]
   2923c:	6a3b      	ldr	r3, [r7, #32]
   2923e:	429a      	cmp	r2, r3
   29240:	d205      	bcs.n	2924e <gen_numname+0xca>
   29242:	68fa      	ldr	r2, [r7, #12]
   29244:	69fb      	ldr	r3, [r7, #28]
   29246:	18d3      	adds	r3, r2, r3
   29248:	781b      	ldrb	r3, [r3, #0]
   2924a:	2b20      	cmp	r3, #32
   2924c:	d1f2      	bne.n	29234 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2924e:	69fb      	ldr	r3, [r7, #28]
   29250:	1c5a      	adds	r2, r3, #1
   29252:	61fa      	str	r2, [r7, #28]
   29254:	68fa      	ldr	r2, [r7, #12]
   29256:	18d2      	adds	r2, r2, r3
   29258:	6a3b      	ldr	r3, [r7, #32]
   2925a:	2b07      	cmp	r3, #7
   2925c:	d806      	bhi.n	2926c <gen_numname+0xe8>
   2925e:	6a3b      	ldr	r3, [r7, #32]
   29260:	1c59      	adds	r1, r3, #1
   29262:	6239      	str	r1, [r7, #32]
   29264:	2114      	movs	r1, #20
   29266:	1879      	adds	r1, r7, r1
   29268:	5ccb      	ldrb	r3, [r1, r3]
   2926a:	e000      	b.n	2926e <gen_numname+0xea>
   2926c:	2320      	movs	r3, #32
   2926e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   29270:	69fb      	ldr	r3, [r7, #28]
   29272:	2b07      	cmp	r3, #7
   29274:	d9eb      	bls.n	2924e <gen_numname+0xca>
}
   29276:	46c0      	nop			; (mov r8, r8)
   29278:	46bd      	mov	sp, r7
   2927a:	b00a      	add	sp, #40	; 0x28
   2927c:	bd80      	pop	{r7, pc}
   2927e:	46c0      	nop			; (mov r8, r8)
   29280:	00028245 	.word	0x00028245

00029284 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   29284:	b580      	push	{r7, lr}
   29286:	b084      	sub	sp, #16
   29288:	af00      	add	r7, sp, #0
   2928a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2928c:	230f      	movs	r3, #15
   2928e:	18fb      	adds	r3, r7, r3
   29290:	2200      	movs	r2, #0
   29292:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   29294:	230b      	movs	r3, #11
   29296:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   29298:	230f      	movs	r3, #15
   2929a:	18fb      	adds	r3, r7, r3
   2929c:	781b      	ldrb	r3, [r3, #0]
   2929e:	b2da      	uxtb	r2, r3
   292a0:	0852      	lsrs	r2, r2, #1
   292a2:	01db      	lsls	r3, r3, #7
   292a4:	4313      	orrs	r3, r2
   292a6:	b2d9      	uxtb	r1, r3
   292a8:	687b      	ldr	r3, [r7, #4]
   292aa:	1c5a      	adds	r2, r3, #1
   292ac:	607a      	str	r2, [r7, #4]
   292ae:	781a      	ldrb	r2, [r3, #0]
   292b0:	230f      	movs	r3, #15
   292b2:	18fb      	adds	r3, r7, r3
   292b4:	188a      	adds	r2, r1, r2
   292b6:	701a      	strb	r2, [r3, #0]
   292b8:	68bb      	ldr	r3, [r7, #8]
   292ba:	3b01      	subs	r3, #1
   292bc:	60bb      	str	r3, [r7, #8]
   292be:	68bb      	ldr	r3, [r7, #8]
   292c0:	2b00      	cmp	r3, #0
   292c2:	d1e9      	bne.n	29298 <sum_sfn+0x14>
	return sum;
   292c4:	230f      	movs	r3, #15
   292c6:	18fb      	adds	r3, r7, r3
   292c8:	781b      	ldrb	r3, [r3, #0]
}
   292ca:	0018      	movs	r0, r3
   292cc:	46bd      	mov	sp, r7
   292ce:	b004      	add	sp, #16
   292d0:	bd80      	pop	{r7, pc}
	...

000292d4 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   292d4:	b590      	push	{r4, r7, lr}
   292d6:	b087      	sub	sp, #28
   292d8:	af00      	add	r7, sp, #0
   292da:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   292dc:	2317      	movs	r3, #23
   292de:	18fc      	adds	r4, r7, r3
   292e0:	687b      	ldr	r3, [r7, #4]
   292e2:	2100      	movs	r1, #0
   292e4:	0018      	movs	r0, r3
   292e6:	4b74      	ldr	r3, [pc, #464]	; (294b8 <dir_find+0x1e4>)
   292e8:	4798      	blx	r3
   292ea:	0003      	movs	r3, r0
   292ec:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   292ee:	2317      	movs	r3, #23
   292f0:	18fb      	adds	r3, r7, r3
   292f2:	781b      	ldrb	r3, [r3, #0]
   292f4:	2b00      	cmp	r3, #0
   292f6:	d003      	beq.n	29300 <dir_find+0x2c>
   292f8:	2317      	movs	r3, #23
   292fa:	18fb      	adds	r3, r7, r3
   292fc:	781b      	ldrb	r3, [r3, #0]
   292fe:	e0d6      	b.n	294ae <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   29300:	2314      	movs	r3, #20
   29302:	18fb      	adds	r3, r7, r3
   29304:	22ff      	movs	r2, #255	; 0xff
   29306:	701a      	strb	r2, [r3, #0]
   29308:	2315      	movs	r3, #21
   2930a:	18fb      	adds	r3, r7, r3
   2930c:	2214      	movs	r2, #20
   2930e:	18ba      	adds	r2, r7, r2
   29310:	7812      	ldrb	r2, [r2, #0]
   29312:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   29314:	687b      	ldr	r3, [r7, #4]
   29316:	681a      	ldr	r2, [r3, #0]
   29318:	687b      	ldr	r3, [r7, #4]
   2931a:	691b      	ldr	r3, [r3, #16]
   2931c:	2117      	movs	r1, #23
   2931e:	187c      	adds	r4, r7, r1
   29320:	0019      	movs	r1, r3
   29322:	0010      	movs	r0, r2
   29324:	4b65      	ldr	r3, [pc, #404]	; (294bc <dir_find+0x1e8>)
   29326:	4798      	blx	r3
   29328:	0003      	movs	r3, r0
   2932a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2932c:	2317      	movs	r3, #23
   2932e:	18fb      	adds	r3, r7, r3
   29330:	781b      	ldrb	r3, [r3, #0]
   29332:	2b00      	cmp	r3, #0
   29334:	d000      	beq.n	29338 <dir_find+0x64>
   29336:	e0b2      	b.n	2949e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   29338:	687b      	ldr	r3, [r7, #4]
   2933a:	695b      	ldr	r3, [r3, #20]
   2933c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2933e:	2316      	movs	r3, #22
   29340:	18fb      	adds	r3, r7, r3
   29342:	693a      	ldr	r2, [r7, #16]
   29344:	7812      	ldrb	r2, [r2, #0]
   29346:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   29348:	2316      	movs	r3, #22
   2934a:	18fb      	adds	r3, r7, r3
   2934c:	781b      	ldrb	r3, [r3, #0]
   2934e:	2b00      	cmp	r3, #0
   29350:	d104      	bne.n	2935c <dir_find+0x88>
   29352:	2317      	movs	r3, #23
   29354:	18fb      	adds	r3, r7, r3
   29356:	2204      	movs	r2, #4
   29358:	701a      	strb	r2, [r3, #0]
   2935a:	e0a5      	b.n	294a8 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2935c:	693b      	ldr	r3, [r7, #16]
   2935e:	330b      	adds	r3, #11
   29360:	781a      	ldrb	r2, [r3, #0]
   29362:	230f      	movs	r3, #15
   29364:	18fb      	adds	r3, r7, r3
   29366:	213f      	movs	r1, #63	; 0x3f
   29368:	400a      	ands	r2, r1
   2936a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2936c:	2316      	movs	r3, #22
   2936e:	18fb      	adds	r3, r7, r3
   29370:	781b      	ldrb	r3, [r3, #0]
   29372:	2be5      	cmp	r3, #229	; 0xe5
   29374:	d00a      	beq.n	2938c <dir_find+0xb8>
   29376:	230f      	movs	r3, #15
   29378:	18fb      	adds	r3, r7, r3
   2937a:	781b      	ldrb	r3, [r3, #0]
   2937c:	2208      	movs	r2, #8
   2937e:	4013      	ands	r3, r2
   29380:	d009      	beq.n	29396 <dir_find+0xc2>
   29382:	230f      	movs	r3, #15
   29384:	18fb      	adds	r3, r7, r3
   29386:	781b      	ldrb	r3, [r3, #0]
   29388:	2b0f      	cmp	r3, #15
   2938a:	d004      	beq.n	29396 <dir_find+0xc2>
			ord = 0xFF;
   2938c:	2315      	movs	r3, #21
   2938e:	18fb      	adds	r3, r7, r3
   29390:	22ff      	movs	r2, #255	; 0xff
   29392:	701a      	strb	r2, [r3, #0]
   29394:	e073      	b.n	2947e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   29396:	230f      	movs	r3, #15
   29398:	18fb      	adds	r3, r7, r3
   2939a:	781b      	ldrb	r3, [r3, #0]
   2939c:	2b0f      	cmp	r3, #15
   2939e:	d145      	bne.n	2942c <dir_find+0x158>
				if (dj->lfn) {
   293a0:	687b      	ldr	r3, [r7, #4]
   293a2:	69db      	ldr	r3, [r3, #28]
   293a4:	2b00      	cmp	r3, #0
   293a6:	d100      	bne.n	293aa <dir_find+0xd6>
   293a8:	e069      	b.n	2947e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   293aa:	2316      	movs	r3, #22
   293ac:	18fb      	adds	r3, r7, r3
   293ae:	781b      	ldrb	r3, [r3, #0]
   293b0:	2240      	movs	r2, #64	; 0x40
   293b2:	4013      	ands	r3, r2
   293b4:	d016      	beq.n	293e4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   293b6:	2314      	movs	r3, #20
   293b8:	18fb      	adds	r3, r7, r3
   293ba:	693a      	ldr	r2, [r7, #16]
   293bc:	7b52      	ldrb	r2, [r2, #13]
   293be:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   293c0:	2316      	movs	r3, #22
   293c2:	18fb      	adds	r3, r7, r3
   293c4:	2216      	movs	r2, #22
   293c6:	18ba      	adds	r2, r7, r2
   293c8:	7812      	ldrb	r2, [r2, #0]
   293ca:	2140      	movs	r1, #64	; 0x40
   293cc:	438a      	bics	r2, r1
   293ce:	701a      	strb	r2, [r3, #0]
   293d0:	2315      	movs	r3, #21
   293d2:	18fb      	adds	r3, r7, r3
   293d4:	2216      	movs	r2, #22
   293d6:	18ba      	adds	r2, r7, r2
   293d8:	7812      	ldrb	r2, [r2, #0]
   293da:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   293dc:	687b      	ldr	r3, [r7, #4]
   293de:	88da      	ldrh	r2, [r3, #6]
   293e0:	687b      	ldr	r3, [r7, #4]
   293e2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   293e4:	2316      	movs	r3, #22
   293e6:	18fa      	adds	r2, r7, r3
   293e8:	2315      	movs	r3, #21
   293ea:	18fb      	adds	r3, r7, r3
   293ec:	7812      	ldrb	r2, [r2, #0]
   293ee:	781b      	ldrb	r3, [r3, #0]
   293f0:	429a      	cmp	r2, r3
   293f2:	d116      	bne.n	29422 <dir_find+0x14e>
   293f4:	693b      	ldr	r3, [r7, #16]
   293f6:	330d      	adds	r3, #13
   293f8:	781b      	ldrb	r3, [r3, #0]
   293fa:	2214      	movs	r2, #20
   293fc:	18ba      	adds	r2, r7, r2
   293fe:	7812      	ldrb	r2, [r2, #0]
   29400:	429a      	cmp	r2, r3
   29402:	d10e      	bne.n	29422 <dir_find+0x14e>
   29404:	687b      	ldr	r3, [r7, #4]
   29406:	69db      	ldr	r3, [r3, #28]
   29408:	693a      	ldr	r2, [r7, #16]
   2940a:	0011      	movs	r1, r2
   2940c:	0018      	movs	r0, r3
   2940e:	4b2c      	ldr	r3, [pc, #176]	; (294c0 <dir_find+0x1ec>)
   29410:	4798      	blx	r3
   29412:	1e03      	subs	r3, r0, #0
   29414:	d005      	beq.n	29422 <dir_find+0x14e>
   29416:	2315      	movs	r3, #21
   29418:	18fb      	adds	r3, r7, r3
   2941a:	781b      	ldrb	r3, [r3, #0]
   2941c:	3b01      	subs	r3, #1
   2941e:	b2da      	uxtb	r2, r3
   29420:	e000      	b.n	29424 <dir_find+0x150>
   29422:	22ff      	movs	r2, #255	; 0xff
   29424:	2315      	movs	r3, #21
   29426:	18fb      	adds	r3, r7, r3
   29428:	701a      	strb	r2, [r3, #0]
   2942a:	e028      	b.n	2947e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2942c:	2315      	movs	r3, #21
   2942e:	18fb      	adds	r3, r7, r3
   29430:	781b      	ldrb	r3, [r3, #0]
   29432:	2b00      	cmp	r3, #0
   29434:	d10a      	bne.n	2944c <dir_find+0x178>
   29436:	693b      	ldr	r3, [r7, #16]
   29438:	0018      	movs	r0, r3
   2943a:	4b22      	ldr	r3, [pc, #136]	; (294c4 <dir_find+0x1f0>)
   2943c:	4798      	blx	r3
   2943e:	0003      	movs	r3, r0
   29440:	001a      	movs	r2, r3
   29442:	2314      	movs	r3, #20
   29444:	18fb      	adds	r3, r7, r3
   29446:	781b      	ldrb	r3, [r3, #0]
   29448:	4293      	cmp	r3, r2
   2944a:	d02a      	beq.n	294a2 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2944c:	2315      	movs	r3, #21
   2944e:	18fb      	adds	r3, r7, r3
   29450:	22ff      	movs	r2, #255	; 0xff
   29452:	701a      	strb	r2, [r3, #0]
   29454:	687b      	ldr	r3, [r7, #4]
   29456:	2201      	movs	r2, #1
   29458:	4252      	negs	r2, r2
   2945a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2945c:	687b      	ldr	r3, [r7, #4]
   2945e:	699b      	ldr	r3, [r3, #24]
   29460:	330b      	adds	r3, #11
   29462:	781b      	ldrb	r3, [r3, #0]
   29464:	001a      	movs	r2, r3
   29466:	2301      	movs	r3, #1
   29468:	4013      	ands	r3, r2
   2946a:	d108      	bne.n	2947e <dir_find+0x1aa>
   2946c:	687b      	ldr	r3, [r7, #4]
   2946e:	6999      	ldr	r1, [r3, #24]
   29470:	693b      	ldr	r3, [r7, #16]
   29472:	220b      	movs	r2, #11
   29474:	0018      	movs	r0, r3
   29476:	4b14      	ldr	r3, [pc, #80]	; (294c8 <dir_find+0x1f4>)
   29478:	4798      	blx	r3
   2947a:	1e03      	subs	r3, r0, #0
   2947c:	d013      	beq.n	294a6 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2947e:	2317      	movs	r3, #23
   29480:	18fc      	adds	r4, r7, r3
   29482:	687b      	ldr	r3, [r7, #4]
   29484:	2100      	movs	r1, #0
   29486:	0018      	movs	r0, r3
   29488:	4b10      	ldr	r3, [pc, #64]	; (294cc <dir_find+0x1f8>)
   2948a:	4798      	blx	r3
   2948c:	0003      	movs	r3, r0
   2948e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   29490:	2317      	movs	r3, #23
   29492:	18fb      	adds	r3, r7, r3
   29494:	781b      	ldrb	r3, [r3, #0]
   29496:	2b00      	cmp	r3, #0
   29498:	d100      	bne.n	2949c <dir_find+0x1c8>
   2949a:	e73b      	b.n	29314 <dir_find+0x40>
   2949c:	e004      	b.n	294a8 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2949e:	46c0      	nop			; (mov r8, r8)
   294a0:	e002      	b.n	294a8 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   294a2:	46c0      	nop			; (mov r8, r8)
   294a4:	e000      	b.n	294a8 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   294a6:	46c0      	nop			; (mov r8, r8)

	return res;
   294a8:	2317      	movs	r3, #23
   294aa:	18fb      	adds	r3, r7, r3
   294ac:	781b      	ldrb	r3, [r3, #0]
}
   294ae:	0018      	movs	r0, r3
   294b0:	46bd      	mov	sp, r7
   294b2:	b007      	add	sp, #28
   294b4:	bd90      	pop	{r4, r7, pc}
   294b6:	46c0      	nop			; (mov r8, r8)
   294b8:	00028b6d 	.word	0x00028b6d
   294bc:	00028329 	.word	0x00028329
   294c0:	00028e8d 	.word	0x00028e8d
   294c4:	00029285 	.word	0x00029285
   294c8:	000282ad 	.word	0x000282ad
   294cc:	00028c9d 	.word	0x00028c9d

000294d0 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
   294d0:	b590      	push	{r4, r7, lr}
   294d2:	b087      	sub	sp, #28
   294d4:	af00      	add	r7, sp, #0
   294d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
   294d8:	2315      	movs	r3, #21
   294da:	18fb      	adds	r3, r7, r3
   294dc:	22ff      	movs	r2, #255	; 0xff
   294de:	701a      	strb	r2, [r3, #0]
   294e0:	2314      	movs	r3, #20
   294e2:	18fb      	adds	r3, r7, r3
   294e4:	22ff      	movs	r2, #255	; 0xff
   294e6:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
   294e8:	2317      	movs	r3, #23
   294ea:	18fb      	adds	r3, r7, r3
   294ec:	2204      	movs	r2, #4
   294ee:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
   294f0:	e0ae      	b.n	29650 <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
   294f2:	687b      	ldr	r3, [r7, #4]
   294f4:	681a      	ldr	r2, [r3, #0]
   294f6:	687b      	ldr	r3, [r7, #4]
   294f8:	691b      	ldr	r3, [r3, #16]
   294fa:	2117      	movs	r1, #23
   294fc:	187c      	adds	r4, r7, r1
   294fe:	0019      	movs	r1, r3
   29500:	0010      	movs	r0, r2
   29502:	4b60      	ldr	r3, [pc, #384]	; (29684 <dir_read+0x1b4>)
   29504:	4798      	blx	r3
   29506:	0003      	movs	r3, r0
   29508:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2950a:	2317      	movs	r3, #23
   2950c:	18fb      	adds	r3, r7, r3
   2950e:	781b      	ldrb	r3, [r3, #0]
   29510:	2b00      	cmp	r3, #0
   29512:	d000      	beq.n	29516 <dir_read+0x46>
   29514:	e0a2      	b.n	2965c <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   29516:	687b      	ldr	r3, [r7, #4]
   29518:	695b      	ldr	r3, [r3, #20]
   2951a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2951c:	2316      	movs	r3, #22
   2951e:	18fb      	adds	r3, r7, r3
   29520:	693a      	ldr	r2, [r7, #16]
   29522:	7812      	ldrb	r2, [r2, #0]
   29524:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   29526:	2316      	movs	r3, #22
   29528:	18fb      	adds	r3, r7, r3
   2952a:	781b      	ldrb	r3, [r3, #0]
   2952c:	2b00      	cmp	r3, #0
   2952e:	d104      	bne.n	2953a <dir_read+0x6a>
   29530:	2317      	movs	r3, #23
   29532:	18fb      	adds	r3, r7, r3
   29534:	2204      	movs	r2, #4
   29536:	701a      	strb	r2, [r3, #0]
   29538:	e095      	b.n	29666 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2953a:	693b      	ldr	r3, [r7, #16]
   2953c:	330b      	adds	r3, #11
   2953e:	781a      	ldrb	r2, [r3, #0]
   29540:	230f      	movs	r3, #15
   29542:	18fb      	adds	r3, r7, r3
   29544:	213f      	movs	r1, #63	; 0x3f
   29546:	400a      	ands	r2, r1
   29548:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2954a:	2316      	movs	r3, #22
   2954c:	18fb      	adds	r3, r7, r3
   2954e:	781b      	ldrb	r3, [r3, #0]
   29550:	2be5      	cmp	r3, #229	; 0xe5
   29552:	d00f      	beq.n	29574 <dir_read+0xa4>
   29554:	2316      	movs	r3, #22
   29556:	18fb      	adds	r3, r7, r3
   29558:	781b      	ldrb	r3, [r3, #0]
   2955a:	2b2e      	cmp	r3, #46	; 0x2e
   2955c:	d00a      	beq.n	29574 <dir_read+0xa4>
   2955e:	230f      	movs	r3, #15
   29560:	18fb      	adds	r3, r7, r3
   29562:	781b      	ldrb	r3, [r3, #0]
   29564:	2208      	movs	r2, #8
   29566:	4013      	ands	r3, r2
   29568:	d009      	beq.n	2957e <dir_read+0xae>
   2956a:	230f      	movs	r3, #15
   2956c:	18fb      	adds	r3, r7, r3
   2956e:	781b      	ldrb	r3, [r3, #0]
   29570:	2b0f      	cmp	r3, #15
   29572:	d004      	beq.n	2957e <dir_read+0xae>
			ord = 0xFF;
   29574:	2315      	movs	r3, #21
   29576:	18fb      	adds	r3, r7, r3
   29578:	22ff      	movs	r2, #255	; 0xff
   2957a:	701a      	strb	r2, [r3, #0]
   2957c:	e05a      	b.n	29634 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2957e:	230f      	movs	r3, #15
   29580:	18fb      	adds	r3, r7, r3
   29582:	781b      	ldrb	r3, [r3, #0]
   29584:	2b0f      	cmp	r3, #15
   29586:	d140      	bne.n	2960a <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
   29588:	2316      	movs	r3, #22
   2958a:	18fb      	adds	r3, r7, r3
   2958c:	781b      	ldrb	r3, [r3, #0]
   2958e:	2240      	movs	r2, #64	; 0x40
   29590:	4013      	ands	r3, r2
   29592:	d016      	beq.n	295c2 <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
   29594:	2314      	movs	r3, #20
   29596:	18fb      	adds	r3, r7, r3
   29598:	693a      	ldr	r2, [r7, #16]
   2959a:	7b52      	ldrb	r2, [r2, #13]
   2959c:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
   2959e:	2316      	movs	r3, #22
   295a0:	18fb      	adds	r3, r7, r3
   295a2:	2216      	movs	r2, #22
   295a4:	18ba      	adds	r2, r7, r2
   295a6:	7812      	ldrb	r2, [r2, #0]
   295a8:	2140      	movs	r1, #64	; 0x40
   295aa:	438a      	bics	r2, r1
   295ac:	701a      	strb	r2, [r3, #0]
   295ae:	2315      	movs	r3, #21
   295b0:	18fb      	adds	r3, r7, r3
   295b2:	2216      	movs	r2, #22
   295b4:	18ba      	adds	r2, r7, r2
   295b6:	7812      	ldrb	r2, [r2, #0]
   295b8:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
   295ba:	687b      	ldr	r3, [r7, #4]
   295bc:	88da      	ldrh	r2, [r3, #6]
   295be:	687b      	ldr	r3, [r7, #4]
   295c0:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   295c2:	2316      	movs	r3, #22
   295c4:	18fa      	adds	r2, r7, r3
   295c6:	2315      	movs	r3, #21
   295c8:	18fb      	adds	r3, r7, r3
   295ca:	7812      	ldrb	r2, [r2, #0]
   295cc:	781b      	ldrb	r3, [r3, #0]
   295ce:	429a      	cmp	r2, r3
   295d0:	d116      	bne.n	29600 <dir_read+0x130>
   295d2:	693b      	ldr	r3, [r7, #16]
   295d4:	330d      	adds	r3, #13
   295d6:	781b      	ldrb	r3, [r3, #0]
   295d8:	2214      	movs	r2, #20
   295da:	18ba      	adds	r2, r7, r2
   295dc:	7812      	ldrb	r2, [r2, #0]
   295de:	429a      	cmp	r2, r3
   295e0:	d10e      	bne.n	29600 <dir_read+0x130>
   295e2:	687b      	ldr	r3, [r7, #4]
   295e4:	69db      	ldr	r3, [r3, #28]
   295e6:	693a      	ldr	r2, [r7, #16]
   295e8:	0011      	movs	r1, r2
   295ea:	0018      	movs	r0, r3
   295ec:	4b26      	ldr	r3, [pc, #152]	; (29688 <dir_read+0x1b8>)
   295ee:	4798      	blx	r3
   295f0:	1e03      	subs	r3, r0, #0
   295f2:	d005      	beq.n	29600 <dir_read+0x130>
   295f4:	2315      	movs	r3, #21
   295f6:	18fb      	adds	r3, r7, r3
   295f8:	781b      	ldrb	r3, [r3, #0]
   295fa:	3b01      	subs	r3, #1
   295fc:	b2da      	uxtb	r2, r3
   295fe:	e000      	b.n	29602 <dir_read+0x132>
   29600:	22ff      	movs	r2, #255	; 0xff
   29602:	2315      	movs	r3, #21
   29604:	18fb      	adds	r3, r7, r3
   29606:	701a      	strb	r2, [r3, #0]
   29608:	e014      	b.n	29634 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   2960a:	2315      	movs	r3, #21
   2960c:	18fb      	adds	r3, r7, r3
   2960e:	781b      	ldrb	r3, [r3, #0]
   29610:	2b00      	cmp	r3, #0
   29612:	d10a      	bne.n	2962a <dir_read+0x15a>
   29614:	693b      	ldr	r3, [r7, #16]
   29616:	0018      	movs	r0, r3
   29618:	4b1c      	ldr	r3, [pc, #112]	; (2968c <dir_read+0x1bc>)
   2961a:	4798      	blx	r3
   2961c:	0003      	movs	r3, r0
   2961e:	001a      	movs	r2, r3
   29620:	2314      	movs	r3, #20
   29622:	18fb      	adds	r3, r7, r3
   29624:	781b      	ldrb	r3, [r3, #0]
   29626:	4293      	cmp	r3, r2
   29628:	d01a      	beq.n	29660 <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   2962a:	687b      	ldr	r3, [r7, #4]
   2962c:	2201      	movs	r2, #1
   2962e:	4252      	negs	r2, r2
   29630:	841a      	strh	r2, [r3, #32]
				break;
   29632:	e015      	b.n	29660 <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
   29634:	2317      	movs	r3, #23
   29636:	18fc      	adds	r4, r7, r3
   29638:	687b      	ldr	r3, [r7, #4]
   2963a:	2100      	movs	r1, #0
   2963c:	0018      	movs	r0, r3
   2963e:	4b14      	ldr	r3, [pc, #80]	; (29690 <dir_read+0x1c0>)
   29640:	4798      	blx	r3
   29642:	0003      	movs	r3, r0
   29644:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   29646:	2317      	movs	r3, #23
   29648:	18fb      	adds	r3, r7, r3
   2964a:	781b      	ldrb	r3, [r3, #0]
   2964c:	2b00      	cmp	r3, #0
   2964e:	d109      	bne.n	29664 <dir_read+0x194>
	while (dj->sect) {
   29650:	687b      	ldr	r3, [r7, #4]
   29652:	691b      	ldr	r3, [r3, #16]
   29654:	2b00      	cmp	r3, #0
   29656:	d000      	beq.n	2965a <dir_read+0x18a>
   29658:	e74b      	b.n	294f2 <dir_read+0x22>
   2965a:	e004      	b.n	29666 <dir_read+0x196>
		if (res != FR_OK) break;
   2965c:	46c0      	nop			; (mov r8, r8)
   2965e:	e002      	b.n	29666 <dir_read+0x196>
				break;
   29660:	46c0      	nop			; (mov r8, r8)
   29662:	e000      	b.n	29666 <dir_read+0x196>
		if (res != FR_OK) break;
   29664:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
   29666:	2317      	movs	r3, #23
   29668:	18fb      	adds	r3, r7, r3
   2966a:	781b      	ldrb	r3, [r3, #0]
   2966c:	2b00      	cmp	r3, #0
   2966e:	d002      	beq.n	29676 <dir_read+0x1a6>
   29670:	687b      	ldr	r3, [r7, #4]
   29672:	2200      	movs	r2, #0
   29674:	611a      	str	r2, [r3, #16]

	return res;
   29676:	2317      	movs	r3, #23
   29678:	18fb      	adds	r3, r7, r3
   2967a:	781b      	ldrb	r3, [r3, #0]
}
   2967c:	0018      	movs	r0, r3
   2967e:	46bd      	mov	sp, r7
   29680:	b007      	add	sp, #28
   29682:	bd90      	pop	{r4, r7, pc}
   29684:	00028329 	.word	0x00028329
   29688:	00028f91 	.word	0x00028f91
   2968c:	00029285 	.word	0x00029285
   29690:	00028c9d 	.word	0x00028c9d

00029694 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   29694:	b590      	push	{r4, r7, lr}
   29696:	b08d      	sub	sp, #52	; 0x34
   29698:	af00      	add	r7, sp, #0
   2969a:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2969c:	687b      	ldr	r3, [r7, #4]
   2969e:	699b      	ldr	r3, [r3, #24]
   296a0:	627b      	str	r3, [r7, #36]	; 0x24
   296a2:	687b      	ldr	r3, [r7, #4]
   296a4:	69db      	ldr	r3, [r3, #28]
   296a6:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   296a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   296aa:	230c      	movs	r3, #12
   296ac:	18fb      	adds	r3, r7, r3
   296ae:	220c      	movs	r2, #12
   296b0:	0018      	movs	r0, r3
   296b2:	4bc8      	ldr	r3, [pc, #800]	; (299d4 <dir_register+0x340>)
   296b4:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   296b6:	230c      	movs	r3, #12
   296b8:	18fb      	adds	r3, r7, r3
   296ba:	7adb      	ldrb	r3, [r3, #11]
   296bc:	001a      	movs	r2, r3
   296be:	2301      	movs	r3, #1
   296c0:	4013      	ands	r3, r2
   296c2:	d048      	beq.n	29756 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   296c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   296c6:	330b      	adds	r3, #11
   296c8:	2200      	movs	r2, #0
   296ca:	701a      	strb	r2, [r3, #0]
   296cc:	687b      	ldr	r3, [r7, #4]
   296ce:	2200      	movs	r2, #0
   296d0:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   296d2:	232c      	movs	r3, #44	; 0x2c
   296d4:	18fb      	adds	r3, r7, r3
   296d6:	2201      	movs	r2, #1
   296d8:	801a      	strh	r2, [r3, #0]
   296da:	e01c      	b.n	29716 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   296dc:	232c      	movs	r3, #44	; 0x2c
   296de:	18fb      	adds	r3, r7, r3
   296e0:	881b      	ldrh	r3, [r3, #0]
   296e2:	6a3a      	ldr	r2, [r7, #32]
   296e4:	210c      	movs	r1, #12
   296e6:	1879      	adds	r1, r7, r1
   296e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   296ea:	4cbb      	ldr	r4, [pc, #748]	; (299d8 <dir_register+0x344>)
   296ec:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   296ee:	232f      	movs	r3, #47	; 0x2f
   296f0:	18fc      	adds	r4, r7, r3
   296f2:	687b      	ldr	r3, [r7, #4]
   296f4:	0018      	movs	r0, r3
   296f6:	4bb9      	ldr	r3, [pc, #740]	; (299dc <dir_register+0x348>)
   296f8:	4798      	blx	r3
   296fa:	0003      	movs	r3, r0
   296fc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   296fe:	232f      	movs	r3, #47	; 0x2f
   29700:	18fb      	adds	r3, r7, r3
   29702:	781b      	ldrb	r3, [r3, #0]
   29704:	2b00      	cmp	r3, #0
   29706:	d10c      	bne.n	29722 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   29708:	232c      	movs	r3, #44	; 0x2c
   2970a:	18fb      	adds	r3, r7, r3
   2970c:	881a      	ldrh	r2, [r3, #0]
   2970e:	232c      	movs	r3, #44	; 0x2c
   29710:	18fb      	adds	r3, r7, r3
   29712:	3201      	adds	r2, #1
   29714:	801a      	strh	r2, [r3, #0]
   29716:	232c      	movs	r3, #44	; 0x2c
   29718:	18fb      	adds	r3, r7, r3
   2971a:	881b      	ldrh	r3, [r3, #0]
   2971c:	2b63      	cmp	r3, #99	; 0x63
   2971e:	d9dd      	bls.n	296dc <dir_register+0x48>
   29720:	e000      	b.n	29724 <dir_register+0x90>
			if (res != FR_OK) break;
   29722:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   29724:	232c      	movs	r3, #44	; 0x2c
   29726:	18fb      	adds	r3, r7, r3
   29728:	881b      	ldrh	r3, [r3, #0]
   2972a:	2b64      	cmp	r3, #100	; 0x64
   2972c:	d101      	bne.n	29732 <dir_register+0x9e>
   2972e:	2307      	movs	r3, #7
   29730:	e14c      	b.n	299cc <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   29732:	232f      	movs	r3, #47	; 0x2f
   29734:	18fb      	adds	r3, r7, r3
   29736:	781b      	ldrb	r3, [r3, #0]
   29738:	2b04      	cmp	r3, #4
   2973a:	d003      	beq.n	29744 <dir_register+0xb0>
   2973c:	232f      	movs	r3, #47	; 0x2f
   2973e:	18fb      	adds	r3, r7, r3
   29740:	781b      	ldrb	r3, [r3, #0]
   29742:	e143      	b.n	299cc <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   29744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29746:	330b      	adds	r3, #11
   29748:	220c      	movs	r2, #12
   2974a:	18ba      	adds	r2, r7, r2
   2974c:	7ad2      	ldrb	r2, [r2, #11]
   2974e:	701a      	strb	r2, [r3, #0]
   29750:	687b      	ldr	r3, [r7, #4]
   29752:	6a3a      	ldr	r2, [r7, #32]
   29754:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   29756:	230c      	movs	r3, #12
   29758:	18fb      	adds	r3, r7, r3
   2975a:	7adb      	ldrb	r3, [r3, #11]
   2975c:	001a      	movs	r2, r3
   2975e:	2302      	movs	r3, #2
   29760:	4013      	ands	r3, r2
   29762:	d023      	beq.n	297ac <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   29764:	232a      	movs	r3, #42	; 0x2a
   29766:	18fb      	adds	r3, r7, r3
   29768:	2200      	movs	r2, #0
   2976a:	801a      	strh	r2, [r3, #0]
   2976c:	e006      	b.n	2977c <dir_register+0xe8>
   2976e:	232a      	movs	r3, #42	; 0x2a
   29770:	18fb      	adds	r3, r7, r3
   29772:	881a      	ldrh	r2, [r3, #0]
   29774:	232a      	movs	r3, #42	; 0x2a
   29776:	18fb      	adds	r3, r7, r3
   29778:	3201      	adds	r2, #1
   2977a:	801a      	strh	r2, [r3, #0]
   2977c:	232a      	movs	r3, #42	; 0x2a
   2977e:	18fb      	adds	r3, r7, r3
   29780:	881b      	ldrh	r3, [r3, #0]
   29782:	005b      	lsls	r3, r3, #1
   29784:	6a3a      	ldr	r2, [r7, #32]
   29786:	18d3      	adds	r3, r2, r3
   29788:	881b      	ldrh	r3, [r3, #0]
   2978a:	2b00      	cmp	r3, #0
   2978c:	d1ef      	bne.n	2976e <dir_register+0xda>
		ne = (ne + 25) / 13;
   2978e:	232a      	movs	r3, #42	; 0x2a
   29790:	18fb      	adds	r3, r7, r3
   29792:	881b      	ldrh	r3, [r3, #0]
   29794:	3319      	adds	r3, #25
   29796:	001a      	movs	r2, r3
   29798:	4b91      	ldr	r3, [pc, #580]	; (299e0 <dir_register+0x34c>)
   2979a:	210d      	movs	r1, #13
   2979c:	0010      	movs	r0, r2
   2979e:	4798      	blx	r3
   297a0:	0003      	movs	r3, r0
   297a2:	001a      	movs	r2, r3
   297a4:	232a      	movs	r3, #42	; 0x2a
   297a6:	18fb      	adds	r3, r7, r3
   297a8:	801a      	strh	r2, [r3, #0]
   297aa:	e003      	b.n	297b4 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   297ac:	232a      	movs	r3, #42	; 0x2a
   297ae:	18fb      	adds	r3, r7, r3
   297b0:	2201      	movs	r2, #1
   297b2:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   297b4:	232f      	movs	r3, #47	; 0x2f
   297b6:	18fc      	adds	r4, r7, r3
   297b8:	687b      	ldr	r3, [r7, #4]
   297ba:	2100      	movs	r1, #0
   297bc:	0018      	movs	r0, r3
   297be:	4b89      	ldr	r3, [pc, #548]	; (299e4 <dir_register+0x350>)
   297c0:	4798      	blx	r3
   297c2:	0003      	movs	r3, r0
   297c4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   297c6:	232f      	movs	r3, #47	; 0x2f
   297c8:	18fb      	adds	r3, r7, r3
   297ca:	781b      	ldrb	r3, [r3, #0]
   297cc:	2b00      	cmp	r3, #0
   297ce:	d003      	beq.n	297d8 <dir_register+0x144>
   297d0:	232f      	movs	r3, #47	; 0x2f
   297d2:	18fb      	adds	r3, r7, r3
   297d4:	781b      	ldrb	r3, [r3, #0]
   297d6:	e0f9      	b.n	299cc <dir_register+0x338>
	n = is = 0;
   297d8:	2328      	movs	r3, #40	; 0x28
   297da:	18fb      	adds	r3, r7, r3
   297dc:	2200      	movs	r2, #0
   297de:	801a      	strh	r2, [r3, #0]
   297e0:	232c      	movs	r3, #44	; 0x2c
   297e2:	18fb      	adds	r3, r7, r3
   297e4:	2228      	movs	r2, #40	; 0x28
   297e6:	18ba      	adds	r2, r7, r2
   297e8:	8812      	ldrh	r2, [r2, #0]
   297ea:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   297ec:	687b      	ldr	r3, [r7, #4]
   297ee:	681a      	ldr	r2, [r3, #0]
   297f0:	687b      	ldr	r3, [r7, #4]
   297f2:	691b      	ldr	r3, [r3, #16]
   297f4:	212f      	movs	r1, #47	; 0x2f
   297f6:	187c      	adds	r4, r7, r1
   297f8:	0019      	movs	r1, r3
   297fa:	0010      	movs	r0, r2
   297fc:	4b7a      	ldr	r3, [pc, #488]	; (299e8 <dir_register+0x354>)
   297fe:	4798      	blx	r3
   29800:	0003      	movs	r3, r0
   29802:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   29804:	232f      	movs	r3, #47	; 0x2f
   29806:	18fb      	adds	r3, r7, r3
   29808:	781b      	ldrb	r3, [r3, #0]
   2980a:	2b00      	cmp	r3, #0
   2980c:	d13c      	bne.n	29888 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2980e:	687b      	ldr	r3, [r7, #4]
   29810:	695a      	ldr	r2, [r3, #20]
   29812:	231f      	movs	r3, #31
   29814:	18fb      	adds	r3, r7, r3
   29816:	7812      	ldrb	r2, [r2, #0]
   29818:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2981a:	231f      	movs	r3, #31
   2981c:	18fb      	adds	r3, r7, r3
   2981e:	781b      	ldrb	r3, [r3, #0]
   29820:	2be5      	cmp	r3, #229	; 0xe5
   29822:	d004      	beq.n	2982e <dir_register+0x19a>
   29824:	231f      	movs	r3, #31
   29826:	18fb      	adds	r3, r7, r3
   29828:	781b      	ldrb	r3, [r3, #0]
   2982a:	2b00      	cmp	r3, #0
   2982c:	d119      	bne.n	29862 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2982e:	232c      	movs	r3, #44	; 0x2c
   29830:	18fb      	adds	r3, r7, r3
   29832:	881b      	ldrh	r3, [r3, #0]
   29834:	2b00      	cmp	r3, #0
   29836:	d104      	bne.n	29842 <dir_register+0x1ae>
   29838:	2328      	movs	r3, #40	; 0x28
   2983a:	18fb      	adds	r3, r7, r3
   2983c:	687a      	ldr	r2, [r7, #4]
   2983e:	88d2      	ldrh	r2, [r2, #6]
   29840:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   29842:	232c      	movs	r3, #44	; 0x2c
   29844:	18fb      	adds	r3, r7, r3
   29846:	222c      	movs	r2, #44	; 0x2c
   29848:	18ba      	adds	r2, r7, r2
   2984a:	8812      	ldrh	r2, [r2, #0]
   2984c:	3201      	adds	r2, #1
   2984e:	801a      	strh	r2, [r3, #0]
   29850:	232c      	movs	r3, #44	; 0x2c
   29852:	18fa      	adds	r2, r7, r3
   29854:	232a      	movs	r3, #42	; 0x2a
   29856:	18fb      	adds	r3, r7, r3
   29858:	8812      	ldrh	r2, [r2, #0]
   2985a:	881b      	ldrh	r3, [r3, #0]
   2985c:	429a      	cmp	r2, r3
   2985e:	d104      	bne.n	2986a <dir_register+0x1d6>
   29860:	e013      	b.n	2988a <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   29862:	232c      	movs	r3, #44	; 0x2c
   29864:	18fb      	adds	r3, r7, r3
   29866:	2200      	movs	r2, #0
   29868:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2986a:	232f      	movs	r3, #47	; 0x2f
   2986c:	18fc      	adds	r4, r7, r3
   2986e:	687b      	ldr	r3, [r7, #4]
   29870:	2101      	movs	r1, #1
   29872:	0018      	movs	r0, r3
   29874:	4b5d      	ldr	r3, [pc, #372]	; (299ec <dir_register+0x358>)
   29876:	4798      	blx	r3
   29878:	0003      	movs	r3, r0
   2987a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2987c:	232f      	movs	r3, #47	; 0x2f
   2987e:	18fb      	adds	r3, r7, r3
   29880:	781b      	ldrb	r3, [r3, #0]
   29882:	2b00      	cmp	r3, #0
   29884:	d0b2      	beq.n	297ec <dir_register+0x158>
   29886:	e000      	b.n	2988a <dir_register+0x1f6>
		if (res != FR_OK) break;
   29888:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2988a:	232f      	movs	r3, #47	; 0x2f
   2988c:	18fb      	adds	r3, r7, r3
   2988e:	781b      	ldrb	r3, [r3, #0]
   29890:	2b00      	cmp	r3, #0
   29892:	d163      	bne.n	2995c <dir_register+0x2c8>
   29894:	232a      	movs	r3, #42	; 0x2a
   29896:	18fb      	adds	r3, r7, r3
   29898:	881b      	ldrh	r3, [r3, #0]
   2989a:	2b01      	cmp	r3, #1
   2989c:	d95e      	bls.n	2995c <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2989e:	232f      	movs	r3, #47	; 0x2f
   298a0:	18fc      	adds	r4, r7, r3
   298a2:	2328      	movs	r3, #40	; 0x28
   298a4:	18fb      	adds	r3, r7, r3
   298a6:	881a      	ldrh	r2, [r3, #0]
   298a8:	687b      	ldr	r3, [r7, #4]
   298aa:	0011      	movs	r1, r2
   298ac:	0018      	movs	r0, r3
   298ae:	4b4d      	ldr	r3, [pc, #308]	; (299e4 <dir_register+0x350>)
   298b0:	4798      	blx	r3
   298b2:	0003      	movs	r3, r0
   298b4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   298b6:	232f      	movs	r3, #47	; 0x2f
   298b8:	18fb      	adds	r3, r7, r3
   298ba:	781b      	ldrb	r3, [r3, #0]
   298bc:	2b00      	cmp	r3, #0
   298be:	d14d      	bne.n	2995c <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   298c0:	687b      	ldr	r3, [r7, #4]
   298c2:	699b      	ldr	r3, [r3, #24]
   298c4:	221e      	movs	r2, #30
   298c6:	18bc      	adds	r4, r7, r2
   298c8:	0018      	movs	r0, r3
   298ca:	4b49      	ldr	r3, [pc, #292]	; (299f0 <dir_register+0x35c>)
   298cc:	4798      	blx	r3
   298ce:	0003      	movs	r3, r0
   298d0:	7023      	strb	r3, [r4, #0]
			ne--;
   298d2:	232a      	movs	r3, #42	; 0x2a
   298d4:	18fb      	adds	r3, r7, r3
   298d6:	881a      	ldrh	r2, [r3, #0]
   298d8:	232a      	movs	r3, #42	; 0x2a
   298da:	18fb      	adds	r3, r7, r3
   298dc:	3a01      	subs	r2, #1
   298de:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   298e0:	687b      	ldr	r3, [r7, #4]
   298e2:	681a      	ldr	r2, [r3, #0]
   298e4:	687b      	ldr	r3, [r7, #4]
   298e6:	691b      	ldr	r3, [r3, #16]
   298e8:	212f      	movs	r1, #47	; 0x2f
   298ea:	187c      	adds	r4, r7, r1
   298ec:	0019      	movs	r1, r3
   298ee:	0010      	movs	r0, r2
   298f0:	4b3d      	ldr	r3, [pc, #244]	; (299e8 <dir_register+0x354>)
   298f2:	4798      	blx	r3
   298f4:	0003      	movs	r3, r0
   298f6:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   298f8:	232f      	movs	r3, #47	; 0x2f
   298fa:	18fb      	adds	r3, r7, r3
   298fc:	781b      	ldrb	r3, [r3, #0]
   298fe:	2b00      	cmp	r3, #0
   29900:	d12b      	bne.n	2995a <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   29902:	687b      	ldr	r3, [r7, #4]
   29904:	69d8      	ldr	r0, [r3, #28]
   29906:	687b      	ldr	r3, [r7, #4]
   29908:	6959      	ldr	r1, [r3, #20]
   2990a:	232a      	movs	r3, #42	; 0x2a
   2990c:	18fb      	adds	r3, r7, r3
   2990e:	881b      	ldrh	r3, [r3, #0]
   29910:	b2da      	uxtb	r2, r3
   29912:	231e      	movs	r3, #30
   29914:	18fb      	adds	r3, r7, r3
   29916:	781b      	ldrb	r3, [r3, #0]
   29918:	4c36      	ldr	r4, [pc, #216]	; (299f4 <dir_register+0x360>)
   2991a:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2991c:	687b      	ldr	r3, [r7, #4]
   2991e:	681b      	ldr	r3, [r3, #0]
   29920:	2201      	movs	r2, #1
   29922:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   29924:	232f      	movs	r3, #47	; 0x2f
   29926:	18fc      	adds	r4, r7, r3
   29928:	687b      	ldr	r3, [r7, #4]
   2992a:	2100      	movs	r1, #0
   2992c:	0018      	movs	r0, r3
   2992e:	4b2f      	ldr	r3, [pc, #188]	; (299ec <dir_register+0x358>)
   29930:	4798      	blx	r3
   29932:	0003      	movs	r3, r0
   29934:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   29936:	232f      	movs	r3, #47	; 0x2f
   29938:	18fb      	adds	r3, r7, r3
   2993a:	781b      	ldrb	r3, [r3, #0]
   2993c:	2b00      	cmp	r3, #0
   2993e:	d10d      	bne.n	2995c <dir_register+0x2c8>
   29940:	232a      	movs	r3, #42	; 0x2a
   29942:	18fb      	adds	r3, r7, r3
   29944:	222a      	movs	r2, #42	; 0x2a
   29946:	18ba      	adds	r2, r7, r2
   29948:	8812      	ldrh	r2, [r2, #0]
   2994a:	3a01      	subs	r2, #1
   2994c:	801a      	strh	r2, [r3, #0]
   2994e:	232a      	movs	r3, #42	; 0x2a
   29950:	18fb      	adds	r3, r7, r3
   29952:	881b      	ldrh	r3, [r3, #0]
   29954:	2b00      	cmp	r3, #0
   29956:	d1c3      	bne.n	298e0 <dir_register+0x24c>
   29958:	e000      	b.n	2995c <dir_register+0x2c8>
				if (res != FR_OK) break;
   2995a:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2995c:	232f      	movs	r3, #47	; 0x2f
   2995e:	18fb      	adds	r3, r7, r3
   29960:	781b      	ldrb	r3, [r3, #0]
   29962:	2b00      	cmp	r3, #0
   29964:	d12f      	bne.n	299c6 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   29966:	687b      	ldr	r3, [r7, #4]
   29968:	681a      	ldr	r2, [r3, #0]
   2996a:	687b      	ldr	r3, [r7, #4]
   2996c:	691b      	ldr	r3, [r3, #16]
   2996e:	212f      	movs	r1, #47	; 0x2f
   29970:	187c      	adds	r4, r7, r1
   29972:	0019      	movs	r1, r3
   29974:	0010      	movs	r0, r2
   29976:	4b1c      	ldr	r3, [pc, #112]	; (299e8 <dir_register+0x354>)
   29978:	4798      	blx	r3
   2997a:	0003      	movs	r3, r0
   2997c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2997e:	232f      	movs	r3, #47	; 0x2f
   29980:	18fb      	adds	r3, r7, r3
   29982:	781b      	ldrb	r3, [r3, #0]
   29984:	2b00      	cmp	r3, #0
   29986:	d11e      	bne.n	299c6 <dir_register+0x332>
			dir = dj->dir;
   29988:	687b      	ldr	r3, [r7, #4]
   2998a:	695b      	ldr	r3, [r3, #20]
   2998c:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2998e:	69bb      	ldr	r3, [r7, #24]
   29990:	2220      	movs	r2, #32
   29992:	2100      	movs	r1, #0
   29994:	0018      	movs	r0, r3
   29996:	4b18      	ldr	r3, [pc, #96]	; (299f8 <dir_register+0x364>)
   29998:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2999a:	687b      	ldr	r3, [r7, #4]
   2999c:	6999      	ldr	r1, [r3, #24]
   2999e:	69bb      	ldr	r3, [r7, #24]
   299a0:	220b      	movs	r2, #11
   299a2:	0018      	movs	r0, r3
   299a4:	4b0b      	ldr	r3, [pc, #44]	; (299d4 <dir_register+0x340>)
   299a6:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   299a8:	69bb      	ldr	r3, [r7, #24]
   299aa:	330c      	adds	r3, #12
   299ac:	001a      	movs	r2, r3
   299ae:	687b      	ldr	r3, [r7, #4]
   299b0:	699b      	ldr	r3, [r3, #24]
   299b2:	330b      	adds	r3, #11
   299b4:	781b      	ldrb	r3, [r3, #0]
   299b6:	2118      	movs	r1, #24
   299b8:	400b      	ands	r3, r1
   299ba:	b2db      	uxtb	r3, r3
   299bc:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   299be:	687b      	ldr	r3, [r7, #4]
   299c0:	681b      	ldr	r3, [r3, #0]
   299c2:	2201      	movs	r2, #1
   299c4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   299c6:	232f      	movs	r3, #47	; 0x2f
   299c8:	18fb      	adds	r3, r7, r3
   299ca:	781b      	ldrb	r3, [r3, #0]
}
   299cc:	0018      	movs	r0, r3
   299ce:	46bd      	mov	sp, r7
   299d0:	b00d      	add	sp, #52	; 0x34
   299d2:	bd90      	pop	{r4, r7, pc}
   299d4:	00028245 	.word	0x00028245
   299d8:	00029185 	.word	0x00029185
   299dc:	000292d5 	.word	0x000292d5
   299e0:	0002ff01 	.word	0x0002ff01
   299e4:	00028b6d 	.word	0x00028b6d
   299e8:	00028329 	.word	0x00028329
   299ec:	00028c9d 	.word	0x00028c9d
   299f0:	00029285 	.word	0x00029285
   299f4:	00029075 	.word	0x00029075
   299f8:	0002827d 	.word	0x0002827d

000299fc <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
   299fc:	b590      	push	{r4, r7, lr}
   299fe:	b085      	sub	sp, #20
   29a00:	af00      	add	r7, sp, #0
   29a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
   29a04:	230c      	movs	r3, #12
   29a06:	18fb      	adds	r3, r7, r3
   29a08:	687a      	ldr	r2, [r7, #4]
   29a0a:	88d2      	ldrh	r2, [r2, #6]
   29a0c:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   29a0e:	687b      	ldr	r3, [r7, #4]
   29a10:	8c1b      	ldrh	r3, [r3, #32]
   29a12:	4a2c      	ldr	r2, [pc, #176]	; (29ac4 <dir_remove+0xc8>)
   29a14:	4293      	cmp	r3, r2
   29a16:	d002      	beq.n	29a1e <dir_remove+0x22>
   29a18:	687b      	ldr	r3, [r7, #4]
   29a1a:	8c1b      	ldrh	r3, [r3, #32]
   29a1c:	e002      	b.n	29a24 <dir_remove+0x28>
   29a1e:	230c      	movs	r3, #12
   29a20:	18fb      	adds	r3, r7, r3
   29a22:	881b      	ldrh	r3, [r3, #0]
   29a24:	220f      	movs	r2, #15
   29a26:	18bc      	adds	r4, r7, r2
   29a28:	687a      	ldr	r2, [r7, #4]
   29a2a:	0019      	movs	r1, r3
   29a2c:	0010      	movs	r0, r2
   29a2e:	4b26      	ldr	r3, [pc, #152]	; (29ac8 <dir_remove+0xcc>)
   29a30:	4798      	blx	r3
   29a32:	0003      	movs	r3, r0
   29a34:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   29a36:	230f      	movs	r3, #15
   29a38:	18fb      	adds	r3, r7, r3
   29a3a:	781b      	ldrb	r3, [r3, #0]
   29a3c:	2b00      	cmp	r3, #0
   29a3e:	d13a      	bne.n	29ab6 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
   29a40:	687b      	ldr	r3, [r7, #4]
   29a42:	681a      	ldr	r2, [r3, #0]
   29a44:	687b      	ldr	r3, [r7, #4]
   29a46:	691b      	ldr	r3, [r3, #16]
   29a48:	210f      	movs	r1, #15
   29a4a:	187c      	adds	r4, r7, r1
   29a4c:	0019      	movs	r1, r3
   29a4e:	0010      	movs	r0, r2
   29a50:	4b1e      	ldr	r3, [pc, #120]	; (29acc <dir_remove+0xd0>)
   29a52:	4798      	blx	r3
   29a54:	0003      	movs	r3, r0
   29a56:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   29a58:	230f      	movs	r3, #15
   29a5a:	18fb      	adds	r3, r7, r3
   29a5c:	781b      	ldrb	r3, [r3, #0]
   29a5e:	2b00      	cmp	r3, #0
   29a60:	d11d      	bne.n	29a9e <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   29a62:	687b      	ldr	r3, [r7, #4]
   29a64:	695b      	ldr	r3, [r3, #20]
   29a66:	22e5      	movs	r2, #229	; 0xe5
   29a68:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
   29a6a:	687b      	ldr	r3, [r7, #4]
   29a6c:	681b      	ldr	r3, [r3, #0]
   29a6e:	2201      	movs	r2, #1
   29a70:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   29a72:	687b      	ldr	r3, [r7, #4]
   29a74:	88db      	ldrh	r3, [r3, #6]
   29a76:	220c      	movs	r2, #12
   29a78:	18ba      	adds	r2, r7, r2
   29a7a:	8812      	ldrh	r2, [r2, #0]
   29a7c:	429a      	cmp	r2, r3
   29a7e:	d910      	bls.n	29aa2 <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
   29a80:	230f      	movs	r3, #15
   29a82:	18fc      	adds	r4, r7, r3
   29a84:	687b      	ldr	r3, [r7, #4]
   29a86:	2100      	movs	r1, #0
   29a88:	0018      	movs	r0, r3
   29a8a:	4b11      	ldr	r3, [pc, #68]	; (29ad0 <dir_remove+0xd4>)
   29a8c:	4798      	blx	r3
   29a8e:	0003      	movs	r3, r0
   29a90:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
   29a92:	230f      	movs	r3, #15
   29a94:	18fb      	adds	r3, r7, r3
   29a96:	781b      	ldrb	r3, [r3, #0]
   29a98:	2b00      	cmp	r3, #0
   29a9a:	d0d1      	beq.n	29a40 <dir_remove+0x44>
   29a9c:	e002      	b.n	29aa4 <dir_remove+0xa8>
			if (res != FR_OK) break;
   29a9e:	46c0      	nop			; (mov r8, r8)
   29aa0:	e000      	b.n	29aa4 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   29aa2:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   29aa4:	230f      	movs	r3, #15
   29aa6:	18fb      	adds	r3, r7, r3
   29aa8:	781b      	ldrb	r3, [r3, #0]
   29aaa:	2b04      	cmp	r3, #4
   29aac:	d103      	bne.n	29ab6 <dir_remove+0xba>
   29aae:	230f      	movs	r3, #15
   29ab0:	18fb      	adds	r3, r7, r3
   29ab2:	2202      	movs	r2, #2
   29ab4:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
   29ab6:	230f      	movs	r3, #15
   29ab8:	18fb      	adds	r3, r7, r3
   29aba:	781b      	ldrb	r3, [r3, #0]
}
   29abc:	0018      	movs	r0, r3
   29abe:	46bd      	mov	sp, r7
   29ac0:	b005      	add	sp, #20
   29ac2:	bd90      	pop	{r4, r7, pc}
   29ac4:	0000ffff 	.word	0x0000ffff
   29ac8:	00028b6d 	.word	0x00028b6d
   29acc:	00028329 	.word	0x00028329
   29ad0:	00028c9d 	.word	0x00028c9d

00029ad4 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   29ad4:	b590      	push	{r4, r7, lr}
   29ad6:	b08b      	sub	sp, #44	; 0x2c
   29ad8:	af00      	add	r7, sp, #0
   29ada:	6078      	str	r0, [r7, #4]
   29adc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   29ade:	683b      	ldr	r3, [r7, #0]
   29ae0:	681b      	ldr	r3, [r3, #0]
   29ae2:	613b      	str	r3, [r7, #16]
   29ae4:	e002      	b.n	29aec <create_name+0x18>
   29ae6:	693b      	ldr	r3, [r7, #16]
   29ae8:	3301      	adds	r3, #1
   29aea:	613b      	str	r3, [r7, #16]
   29aec:	693b      	ldr	r3, [r7, #16]
   29aee:	781b      	ldrb	r3, [r3, #0]
   29af0:	2b2f      	cmp	r3, #47	; 0x2f
   29af2:	d0f8      	beq.n	29ae6 <create_name+0x12>
   29af4:	693b      	ldr	r3, [r7, #16]
   29af6:	781b      	ldrb	r3, [r3, #0]
   29af8:	2b5c      	cmp	r3, #92	; 0x5c
   29afa:	d0f4      	beq.n	29ae6 <create_name+0x12>
	lfn = dj->lfn;
   29afc:	687b      	ldr	r3, [r7, #4]
   29afe:	69db      	ldr	r3, [r3, #28]
   29b00:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   29b02:	2300      	movs	r3, #0
   29b04:	617b      	str	r3, [r7, #20]
   29b06:	697b      	ldr	r3, [r7, #20]
   29b08:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   29b0a:	69bb      	ldr	r3, [r7, #24]
   29b0c:	1c5a      	adds	r2, r3, #1
   29b0e:	61ba      	str	r2, [r7, #24]
   29b10:	693a      	ldr	r2, [r7, #16]
   29b12:	18d3      	adds	r3, r2, r3
   29b14:	781a      	ldrb	r2, [r3, #0]
   29b16:	2324      	movs	r3, #36	; 0x24
   29b18:	18fb      	adds	r3, r7, r3
   29b1a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   29b1c:	2324      	movs	r3, #36	; 0x24
   29b1e:	18fb      	adds	r3, r7, r3
   29b20:	881b      	ldrh	r3, [r3, #0]
   29b22:	2b1f      	cmp	r3, #31
   29b24:	d944      	bls.n	29bb0 <create_name+0xdc>
   29b26:	2324      	movs	r3, #36	; 0x24
   29b28:	18fb      	adds	r3, r7, r3
   29b2a:	881b      	ldrh	r3, [r3, #0]
   29b2c:	2b2f      	cmp	r3, #47	; 0x2f
   29b2e:	d03f      	beq.n	29bb0 <create_name+0xdc>
   29b30:	2324      	movs	r3, #36	; 0x24
   29b32:	18fb      	adds	r3, r7, r3
   29b34:	881b      	ldrh	r3, [r3, #0]
   29b36:	2b5c      	cmp	r3, #92	; 0x5c
   29b38:	d03a      	beq.n	29bb0 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   29b3a:	697b      	ldr	r3, [r7, #20]
   29b3c:	2bfe      	cmp	r3, #254	; 0xfe
   29b3e:	d901      	bls.n	29b44 <create_name+0x70>
			return FR_INVALID_NAME;
   29b40:	2306      	movs	r3, #6
   29b42:	e1e7      	b.n	29f14 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   29b44:	2324      	movs	r3, #36	; 0x24
   29b46:	18fb      	adds	r3, r7, r3
   29b48:	2224      	movs	r2, #36	; 0x24
   29b4a:	18ba      	adds	r2, r7, r2
   29b4c:	8812      	ldrh	r2, [r2, #0]
   29b4e:	21ff      	movs	r1, #255	; 0xff
   29b50:	400a      	ands	r2, r1
   29b52:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   29b54:	2324      	movs	r3, #36	; 0x24
   29b56:	18fc      	adds	r4, r7, r3
   29b58:	2324      	movs	r3, #36	; 0x24
   29b5a:	18fb      	adds	r3, r7, r3
   29b5c:	881b      	ldrh	r3, [r3, #0]
   29b5e:	2101      	movs	r1, #1
   29b60:	0018      	movs	r0, r3
   29b62:	4bba      	ldr	r3, [pc, #744]	; (29e4c <create_name+0x378>)
   29b64:	4798      	blx	r3
   29b66:	0003      	movs	r3, r0
   29b68:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   29b6a:	2324      	movs	r3, #36	; 0x24
   29b6c:	18fb      	adds	r3, r7, r3
   29b6e:	881b      	ldrh	r3, [r3, #0]
   29b70:	2b00      	cmp	r3, #0
   29b72:	d101      	bne.n	29b78 <create_name+0xa4>
   29b74:	2306      	movs	r3, #6
   29b76:	e1cd      	b.n	29f14 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   29b78:	2324      	movs	r3, #36	; 0x24
   29b7a:	18fb      	adds	r3, r7, r3
   29b7c:	881b      	ldrh	r3, [r3, #0]
   29b7e:	2b7f      	cmp	r3, #127	; 0x7f
   29b80:	d80b      	bhi.n	29b9a <create_name+0xc6>
   29b82:	2324      	movs	r3, #36	; 0x24
   29b84:	18fb      	adds	r3, r7, r3
   29b86:	881a      	ldrh	r2, [r3, #0]
   29b88:	4bb1      	ldr	r3, [pc, #708]	; (29e50 <create_name+0x37c>)
   29b8a:	0011      	movs	r1, r2
   29b8c:	0018      	movs	r0, r3
   29b8e:	4bb1      	ldr	r3, [pc, #708]	; (29e54 <create_name+0x380>)
   29b90:	4798      	blx	r3
   29b92:	1e03      	subs	r3, r0, #0
   29b94:	d001      	beq.n	29b9a <create_name+0xc6>
			return FR_INVALID_NAME;
   29b96:	2306      	movs	r3, #6
   29b98:	e1bc      	b.n	29f14 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   29b9a:	697b      	ldr	r3, [r7, #20]
   29b9c:	1c5a      	adds	r2, r3, #1
   29b9e:	617a      	str	r2, [r7, #20]
   29ba0:	005b      	lsls	r3, r3, #1
   29ba2:	68fa      	ldr	r2, [r7, #12]
   29ba4:	18d3      	adds	r3, r2, r3
   29ba6:	2224      	movs	r2, #36	; 0x24
   29ba8:	18ba      	adds	r2, r7, r2
   29baa:	8812      	ldrh	r2, [r2, #0]
   29bac:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   29bae:	e7ac      	b.n	29b0a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   29bb0:	693a      	ldr	r2, [r7, #16]
   29bb2:	69bb      	ldr	r3, [r7, #24]
   29bb4:	18d2      	adds	r2, r2, r3
   29bb6:	683b      	ldr	r3, [r7, #0]
   29bb8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   29bba:	2324      	movs	r3, #36	; 0x24
   29bbc:	18fb      	adds	r3, r7, r3
   29bbe:	881b      	ldrh	r3, [r3, #0]
   29bc0:	2b1f      	cmp	r3, #31
   29bc2:	d801      	bhi.n	29bc8 <create_name+0xf4>
   29bc4:	2204      	movs	r2, #4
   29bc6:	e000      	b.n	29bca <create_name+0xf6>
   29bc8:	2200      	movs	r2, #0
   29bca:	2326      	movs	r3, #38	; 0x26
   29bcc:	18fb      	adds	r3, r7, r3
   29bce:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   29bd0:	e017      	b.n	29c02 <create_name+0x12e>
		w = lfn[di-1];
   29bd2:	697b      	ldr	r3, [r7, #20]
   29bd4:	4aa0      	ldr	r2, [pc, #640]	; (29e58 <create_name+0x384>)
   29bd6:	4694      	mov	ip, r2
   29bd8:	4463      	add	r3, ip
   29bda:	005b      	lsls	r3, r3, #1
   29bdc:	68fa      	ldr	r2, [r7, #12]
   29bde:	18d2      	adds	r2, r2, r3
   29be0:	2324      	movs	r3, #36	; 0x24
   29be2:	18fb      	adds	r3, r7, r3
   29be4:	8812      	ldrh	r2, [r2, #0]
   29be6:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   29be8:	2324      	movs	r3, #36	; 0x24
   29bea:	18fb      	adds	r3, r7, r3
   29bec:	881b      	ldrh	r3, [r3, #0]
   29bee:	2b20      	cmp	r3, #32
   29bf0:	d004      	beq.n	29bfc <create_name+0x128>
   29bf2:	2324      	movs	r3, #36	; 0x24
   29bf4:	18fb      	adds	r3, r7, r3
   29bf6:	881b      	ldrh	r3, [r3, #0]
   29bf8:	2b2e      	cmp	r3, #46	; 0x2e
   29bfa:	d106      	bne.n	29c0a <create_name+0x136>
		di--;
   29bfc:	697b      	ldr	r3, [r7, #20]
   29bfe:	3b01      	subs	r3, #1
   29c00:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   29c02:	697b      	ldr	r3, [r7, #20]
   29c04:	2b00      	cmp	r3, #0
   29c06:	d1e4      	bne.n	29bd2 <create_name+0xfe>
   29c08:	e000      	b.n	29c0c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   29c0a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   29c0c:	697b      	ldr	r3, [r7, #20]
   29c0e:	2b00      	cmp	r3, #0
   29c10:	d101      	bne.n	29c16 <create_name+0x142>
   29c12:	2306      	movs	r3, #6
   29c14:	e17e      	b.n	29f14 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   29c16:	697b      	ldr	r3, [r7, #20]
   29c18:	005b      	lsls	r3, r3, #1
   29c1a:	68fa      	ldr	r2, [r7, #12]
   29c1c:	18d3      	adds	r3, r2, r3
   29c1e:	2200      	movs	r2, #0
   29c20:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   29c22:	687b      	ldr	r3, [r7, #4]
   29c24:	699b      	ldr	r3, [r3, #24]
   29c26:	220b      	movs	r2, #11
   29c28:	2120      	movs	r1, #32
   29c2a:	0018      	movs	r0, r3
   29c2c:	4b8b      	ldr	r3, [pc, #556]	; (29e5c <create_name+0x388>)
   29c2e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   29c30:	2300      	movs	r3, #0
   29c32:	61bb      	str	r3, [r7, #24]
   29c34:	e002      	b.n	29c3c <create_name+0x168>
   29c36:	69bb      	ldr	r3, [r7, #24]
   29c38:	3301      	adds	r3, #1
   29c3a:	61bb      	str	r3, [r7, #24]
   29c3c:	69bb      	ldr	r3, [r7, #24]
   29c3e:	005b      	lsls	r3, r3, #1
   29c40:	68fa      	ldr	r2, [r7, #12]
   29c42:	18d3      	adds	r3, r2, r3
   29c44:	881b      	ldrh	r3, [r3, #0]
   29c46:	2b20      	cmp	r3, #32
   29c48:	d0f5      	beq.n	29c36 <create_name+0x162>
   29c4a:	69bb      	ldr	r3, [r7, #24]
   29c4c:	005b      	lsls	r3, r3, #1
   29c4e:	68fa      	ldr	r2, [r7, #12]
   29c50:	18d3      	adds	r3, r2, r3
   29c52:	881b      	ldrh	r3, [r3, #0]
   29c54:	2b2e      	cmp	r3, #46	; 0x2e
   29c56:	d0ee      	beq.n	29c36 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   29c58:	69bb      	ldr	r3, [r7, #24]
   29c5a:	2b00      	cmp	r3, #0
   29c5c:	d00b      	beq.n	29c76 <create_name+0x1a2>
   29c5e:	2326      	movs	r3, #38	; 0x26
   29c60:	18fb      	adds	r3, r7, r3
   29c62:	2226      	movs	r2, #38	; 0x26
   29c64:	18ba      	adds	r2, r7, r2
   29c66:	7812      	ldrb	r2, [r2, #0]
   29c68:	2103      	movs	r1, #3
   29c6a:	430a      	orrs	r2, r1
   29c6c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   29c6e:	e002      	b.n	29c76 <create_name+0x1a2>
   29c70:	697b      	ldr	r3, [r7, #20]
   29c72:	3b01      	subs	r3, #1
   29c74:	617b      	str	r3, [r7, #20]
   29c76:	697b      	ldr	r3, [r7, #20]
   29c78:	2b00      	cmp	r3, #0
   29c7a:	d009      	beq.n	29c90 <create_name+0x1bc>
   29c7c:	697b      	ldr	r3, [r7, #20]
   29c7e:	4a76      	ldr	r2, [pc, #472]	; (29e58 <create_name+0x384>)
   29c80:	4694      	mov	ip, r2
   29c82:	4463      	add	r3, ip
   29c84:	005b      	lsls	r3, r3, #1
   29c86:	68fa      	ldr	r2, [r7, #12]
   29c88:	18d3      	adds	r3, r2, r3
   29c8a:	881b      	ldrh	r3, [r3, #0]
   29c8c:	2b2e      	cmp	r3, #46	; 0x2e
   29c8e:	d1ef      	bne.n	29c70 <create_name+0x19c>

	b = i = 0; ni = 8;
   29c90:	2300      	movs	r3, #0
   29c92:	623b      	str	r3, [r7, #32]
   29c94:	2327      	movs	r3, #39	; 0x27
   29c96:	18fb      	adds	r3, r7, r3
   29c98:	2200      	movs	r2, #0
   29c9a:	701a      	strb	r2, [r3, #0]
   29c9c:	2308      	movs	r3, #8
   29c9e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   29ca0:	69bb      	ldr	r3, [r7, #24]
   29ca2:	1c5a      	adds	r2, r3, #1
   29ca4:	61ba      	str	r2, [r7, #24]
   29ca6:	005b      	lsls	r3, r3, #1
   29ca8:	68fa      	ldr	r2, [r7, #12]
   29caa:	18d2      	adds	r2, r2, r3
   29cac:	2324      	movs	r3, #36	; 0x24
   29cae:	18fb      	adds	r3, r7, r3
   29cb0:	8812      	ldrh	r2, [r2, #0]
   29cb2:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   29cb4:	2324      	movs	r3, #36	; 0x24
   29cb6:	18fb      	adds	r3, r7, r3
   29cb8:	881b      	ldrh	r3, [r3, #0]
   29cba:	2b00      	cmp	r3, #0
   29cbc:	d100      	bne.n	29cc0 <create_name+0x1ec>
   29cbe:	e0c3      	b.n	29e48 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   29cc0:	2324      	movs	r3, #36	; 0x24
   29cc2:	18fb      	adds	r3, r7, r3
   29cc4:	881b      	ldrh	r3, [r3, #0]
   29cc6:	2b20      	cmp	r3, #32
   29cc8:	d008      	beq.n	29cdc <create_name+0x208>
   29cca:	2324      	movs	r3, #36	; 0x24
   29ccc:	18fb      	adds	r3, r7, r3
   29cce:	881b      	ldrh	r3, [r3, #0]
   29cd0:	2b2e      	cmp	r3, #46	; 0x2e
   29cd2:	d10c      	bne.n	29cee <create_name+0x21a>
   29cd4:	69ba      	ldr	r2, [r7, #24]
   29cd6:	697b      	ldr	r3, [r7, #20]
   29cd8:	429a      	cmp	r2, r3
   29cda:	d008      	beq.n	29cee <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   29cdc:	2326      	movs	r3, #38	; 0x26
   29cde:	18fb      	adds	r3, r7, r3
   29ce0:	2226      	movs	r2, #38	; 0x26
   29ce2:	18ba      	adds	r2, r7, r2
   29ce4:	7812      	ldrb	r2, [r2, #0]
   29ce6:	2103      	movs	r1, #3
   29ce8:	430a      	orrs	r2, r1
   29cea:	701a      	strb	r2, [r3, #0]
   29cec:	e0ab      	b.n	29e46 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   29cee:	6a3a      	ldr	r2, [r7, #32]
   29cf0:	69fb      	ldr	r3, [r7, #28]
   29cf2:	429a      	cmp	r2, r3
   29cf4:	d203      	bcs.n	29cfe <create_name+0x22a>
   29cf6:	69ba      	ldr	r2, [r7, #24]
   29cf8:	697b      	ldr	r3, [r7, #20]
   29cfa:	429a      	cmp	r2, r3
   29cfc:	d12a      	bne.n	29d54 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   29cfe:	69fb      	ldr	r3, [r7, #28]
   29d00:	2b0b      	cmp	r3, #11
   29d02:	d108      	bne.n	29d16 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   29d04:	2326      	movs	r3, #38	; 0x26
   29d06:	18fb      	adds	r3, r7, r3
   29d08:	2226      	movs	r2, #38	; 0x26
   29d0a:	18ba      	adds	r2, r7, r2
   29d0c:	7812      	ldrb	r2, [r2, #0]
   29d0e:	2103      	movs	r1, #3
   29d10:	430a      	orrs	r2, r1
   29d12:	701a      	strb	r2, [r3, #0]
   29d14:	e0a9      	b.n	29e6a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   29d16:	69ba      	ldr	r2, [r7, #24]
   29d18:	697b      	ldr	r3, [r7, #20]
   29d1a:	429a      	cmp	r2, r3
   29d1c:	d007      	beq.n	29d2e <create_name+0x25a>
   29d1e:	2326      	movs	r3, #38	; 0x26
   29d20:	18fb      	adds	r3, r7, r3
   29d22:	2226      	movs	r2, #38	; 0x26
   29d24:	18ba      	adds	r2, r7, r2
   29d26:	7812      	ldrb	r2, [r2, #0]
   29d28:	2103      	movs	r1, #3
   29d2a:	430a      	orrs	r2, r1
   29d2c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   29d2e:	69ba      	ldr	r2, [r7, #24]
   29d30:	697b      	ldr	r3, [r7, #20]
   29d32:	429a      	cmp	r2, r3
   29d34:	d900      	bls.n	29d38 <create_name+0x264>
   29d36:	e097      	b.n	29e68 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   29d38:	697b      	ldr	r3, [r7, #20]
   29d3a:	61bb      	str	r3, [r7, #24]
   29d3c:	2308      	movs	r3, #8
   29d3e:	623b      	str	r3, [r7, #32]
   29d40:	230b      	movs	r3, #11
   29d42:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   29d44:	2327      	movs	r3, #39	; 0x27
   29d46:	18fb      	adds	r3, r7, r3
   29d48:	2227      	movs	r2, #39	; 0x27
   29d4a:	18ba      	adds	r2, r7, r2
   29d4c:	7812      	ldrb	r2, [r2, #0]
   29d4e:	0092      	lsls	r2, r2, #2
   29d50:	701a      	strb	r2, [r3, #0]
   29d52:	e078      	b.n	29e46 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   29d54:	2324      	movs	r3, #36	; 0x24
   29d56:	18fb      	adds	r3, r7, r3
   29d58:	881b      	ldrh	r3, [r3, #0]
   29d5a:	2b7f      	cmp	r3, #127	; 0x7f
   29d5c:	d920      	bls.n	29da0 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   29d5e:	2324      	movs	r3, #36	; 0x24
   29d60:	18fc      	adds	r4, r7, r3
   29d62:	2324      	movs	r3, #36	; 0x24
   29d64:	18fb      	adds	r3, r7, r3
   29d66:	881b      	ldrh	r3, [r3, #0]
   29d68:	2100      	movs	r1, #0
   29d6a:	0018      	movs	r0, r3
   29d6c:	4b37      	ldr	r3, [pc, #220]	; (29e4c <create_name+0x378>)
   29d6e:	4798      	blx	r3
   29d70:	0003      	movs	r3, r0
   29d72:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   29d74:	2324      	movs	r3, #36	; 0x24
   29d76:	18fb      	adds	r3, r7, r3
   29d78:	881b      	ldrh	r3, [r3, #0]
   29d7a:	2b00      	cmp	r3, #0
   29d7c:	d008      	beq.n	29d90 <create_name+0x2bc>
   29d7e:	2324      	movs	r3, #36	; 0x24
   29d80:	18fb      	adds	r3, r7, r3
   29d82:	881b      	ldrh	r3, [r3, #0]
   29d84:	3b80      	subs	r3, #128	; 0x80
   29d86:	4a36      	ldr	r2, [pc, #216]	; (29e60 <create_name+0x38c>)
   29d88:	5cd2      	ldrb	r2, [r2, r3]
   29d8a:	2324      	movs	r3, #36	; 0x24
   29d8c:	18fb      	adds	r3, r7, r3
   29d8e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   29d90:	2326      	movs	r3, #38	; 0x26
   29d92:	18fb      	adds	r3, r7, r3
   29d94:	2226      	movs	r2, #38	; 0x26
   29d96:	18ba      	adds	r2, r7, r2
   29d98:	7812      	ldrb	r2, [r2, #0]
   29d9a:	2102      	movs	r1, #2
   29d9c:	430a      	orrs	r2, r1
   29d9e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   29da0:	2324      	movs	r3, #36	; 0x24
   29da2:	18fb      	adds	r3, r7, r3
   29da4:	881b      	ldrh	r3, [r3, #0]
   29da6:	2b00      	cmp	r3, #0
   29da8:	d009      	beq.n	29dbe <create_name+0x2ea>
   29daa:	2324      	movs	r3, #36	; 0x24
   29dac:	18fb      	adds	r3, r7, r3
   29dae:	881a      	ldrh	r2, [r3, #0]
   29db0:	4b2c      	ldr	r3, [pc, #176]	; (29e64 <create_name+0x390>)
   29db2:	0011      	movs	r1, r2
   29db4:	0018      	movs	r0, r3
   29db6:	4b27      	ldr	r3, [pc, #156]	; (29e54 <create_name+0x380>)
   29db8:	4798      	blx	r3
   29dba:	1e03      	subs	r3, r0, #0
   29dbc:	d00c      	beq.n	29dd8 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   29dbe:	2324      	movs	r3, #36	; 0x24
   29dc0:	18fb      	adds	r3, r7, r3
   29dc2:	225f      	movs	r2, #95	; 0x5f
   29dc4:	801a      	strh	r2, [r3, #0]
   29dc6:	2326      	movs	r3, #38	; 0x26
   29dc8:	18fb      	adds	r3, r7, r3
   29dca:	2226      	movs	r2, #38	; 0x26
   29dcc:	18ba      	adds	r2, r7, r2
   29dce:	7812      	ldrb	r2, [r2, #0]
   29dd0:	2103      	movs	r1, #3
   29dd2:	430a      	orrs	r2, r1
   29dd4:	701a      	strb	r2, [r3, #0]
   29dd6:	e02b      	b.n	29e30 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   29dd8:	2324      	movs	r3, #36	; 0x24
   29dda:	18fb      	adds	r3, r7, r3
   29ddc:	881b      	ldrh	r3, [r3, #0]
   29dde:	2b40      	cmp	r3, #64	; 0x40
   29de0:	d90d      	bls.n	29dfe <create_name+0x32a>
   29de2:	2324      	movs	r3, #36	; 0x24
   29de4:	18fb      	adds	r3, r7, r3
   29de6:	881b      	ldrh	r3, [r3, #0]
   29de8:	2b5a      	cmp	r3, #90	; 0x5a
   29dea:	d808      	bhi.n	29dfe <create_name+0x32a>
					b |= 2;
   29dec:	2327      	movs	r3, #39	; 0x27
   29dee:	18fb      	adds	r3, r7, r3
   29df0:	2227      	movs	r2, #39	; 0x27
   29df2:	18ba      	adds	r2, r7, r2
   29df4:	7812      	ldrb	r2, [r2, #0]
   29df6:	2102      	movs	r1, #2
   29df8:	430a      	orrs	r2, r1
   29dfa:	701a      	strb	r2, [r3, #0]
   29dfc:	e018      	b.n	29e30 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   29dfe:	2324      	movs	r3, #36	; 0x24
   29e00:	18fb      	adds	r3, r7, r3
   29e02:	881b      	ldrh	r3, [r3, #0]
   29e04:	2b60      	cmp	r3, #96	; 0x60
   29e06:	d913      	bls.n	29e30 <create_name+0x35c>
   29e08:	2324      	movs	r3, #36	; 0x24
   29e0a:	18fb      	adds	r3, r7, r3
   29e0c:	881b      	ldrh	r3, [r3, #0]
   29e0e:	2b7a      	cmp	r3, #122	; 0x7a
   29e10:	d80e      	bhi.n	29e30 <create_name+0x35c>
						b |= 1; w -= 0x20;
   29e12:	2327      	movs	r3, #39	; 0x27
   29e14:	18fb      	adds	r3, r7, r3
   29e16:	2227      	movs	r2, #39	; 0x27
   29e18:	18ba      	adds	r2, r7, r2
   29e1a:	7812      	ldrb	r2, [r2, #0]
   29e1c:	2101      	movs	r1, #1
   29e1e:	430a      	orrs	r2, r1
   29e20:	701a      	strb	r2, [r3, #0]
   29e22:	2324      	movs	r3, #36	; 0x24
   29e24:	18fb      	adds	r3, r7, r3
   29e26:	2224      	movs	r2, #36	; 0x24
   29e28:	18ba      	adds	r2, r7, r2
   29e2a:	8812      	ldrh	r2, [r2, #0]
   29e2c:	3a20      	subs	r2, #32
   29e2e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   29e30:	687b      	ldr	r3, [r7, #4]
   29e32:	699a      	ldr	r2, [r3, #24]
   29e34:	6a3b      	ldr	r3, [r7, #32]
   29e36:	1c59      	adds	r1, r3, #1
   29e38:	6239      	str	r1, [r7, #32]
   29e3a:	18d3      	adds	r3, r2, r3
   29e3c:	2224      	movs	r2, #36	; 0x24
   29e3e:	18ba      	adds	r2, r7, r2
   29e40:	8812      	ldrh	r2, [r2, #0]
   29e42:	b2d2      	uxtb	r2, r2
   29e44:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   29e46:	e72b      	b.n	29ca0 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   29e48:	46c0      	nop			; (mov r8, r8)
   29e4a:	e00e      	b.n	29e6a <create_name+0x396>
   29e4c:	0002b709 	.word	0x0002b709
   29e50:	000378d4 	.word	0x000378d4
   29e54:	000282f7 	.word	0x000282f7
   29e58:	7fffffff 	.word	0x7fffffff
   29e5c:	0002827d 	.word	0x0002827d
   29e60:	0003791c 	.word	0x0003791c
   29e64:	000378e0 	.word	0x000378e0
			if (si > di) break;			/* No extension */
   29e68:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   29e6a:	687b      	ldr	r3, [r7, #4]
   29e6c:	699b      	ldr	r3, [r3, #24]
   29e6e:	781b      	ldrb	r3, [r3, #0]
   29e70:	2be5      	cmp	r3, #229	; 0xe5
   29e72:	d103      	bne.n	29e7c <create_name+0x3a8>
   29e74:	687b      	ldr	r3, [r7, #4]
   29e76:	699b      	ldr	r3, [r3, #24]
   29e78:	2205      	movs	r2, #5
   29e7a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   29e7c:	69fb      	ldr	r3, [r7, #28]
   29e7e:	2b08      	cmp	r3, #8
   29e80:	d106      	bne.n	29e90 <create_name+0x3bc>
   29e82:	2327      	movs	r3, #39	; 0x27
   29e84:	18fb      	adds	r3, r7, r3
   29e86:	2227      	movs	r2, #39	; 0x27
   29e88:	18ba      	adds	r2, r7, r2
   29e8a:	7812      	ldrb	r2, [r2, #0]
   29e8c:	0092      	lsls	r2, r2, #2
   29e8e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   29e90:	2327      	movs	r3, #39	; 0x27
   29e92:	18fb      	adds	r3, r7, r3
   29e94:	781b      	ldrb	r3, [r3, #0]
   29e96:	220c      	movs	r2, #12
   29e98:	4013      	ands	r3, r2
   29e9a:	2b0c      	cmp	r3, #12
   29e9c:	d006      	beq.n	29eac <create_name+0x3d8>
   29e9e:	2327      	movs	r3, #39	; 0x27
   29ea0:	18fb      	adds	r3, r7, r3
   29ea2:	781b      	ldrb	r3, [r3, #0]
   29ea4:	2203      	movs	r2, #3
   29ea6:	4013      	ands	r3, r2
   29ea8:	2b03      	cmp	r3, #3
   29eaa:	d107      	bne.n	29ebc <create_name+0x3e8>
		cf |= NS_LFN;
   29eac:	2326      	movs	r3, #38	; 0x26
   29eae:	18fb      	adds	r3, r7, r3
   29eb0:	2226      	movs	r2, #38	; 0x26
   29eb2:	18ba      	adds	r2, r7, r2
   29eb4:	7812      	ldrb	r2, [r2, #0]
   29eb6:	2102      	movs	r1, #2
   29eb8:	430a      	orrs	r2, r1
   29eba:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   29ebc:	2326      	movs	r3, #38	; 0x26
   29ebe:	18fb      	adds	r3, r7, r3
   29ec0:	781b      	ldrb	r3, [r3, #0]
   29ec2:	2202      	movs	r2, #2
   29ec4:	4013      	ands	r3, r2
   29ec6:	d11d      	bne.n	29f04 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   29ec8:	2327      	movs	r3, #39	; 0x27
   29eca:	18fb      	adds	r3, r7, r3
   29ecc:	781b      	ldrb	r3, [r3, #0]
   29ece:	2203      	movs	r2, #3
   29ed0:	4013      	ands	r3, r2
   29ed2:	2b01      	cmp	r3, #1
   29ed4:	d107      	bne.n	29ee6 <create_name+0x412>
   29ed6:	2326      	movs	r3, #38	; 0x26
   29ed8:	18fb      	adds	r3, r7, r3
   29eda:	2226      	movs	r2, #38	; 0x26
   29edc:	18ba      	adds	r2, r7, r2
   29ede:	7812      	ldrb	r2, [r2, #0]
   29ee0:	2110      	movs	r1, #16
   29ee2:	430a      	orrs	r2, r1
   29ee4:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   29ee6:	2327      	movs	r3, #39	; 0x27
   29ee8:	18fb      	adds	r3, r7, r3
   29eea:	781b      	ldrb	r3, [r3, #0]
   29eec:	220c      	movs	r2, #12
   29eee:	4013      	ands	r3, r2
   29ef0:	2b04      	cmp	r3, #4
   29ef2:	d107      	bne.n	29f04 <create_name+0x430>
   29ef4:	2326      	movs	r3, #38	; 0x26
   29ef6:	18fb      	adds	r3, r7, r3
   29ef8:	2226      	movs	r2, #38	; 0x26
   29efa:	18ba      	adds	r2, r7, r2
   29efc:	7812      	ldrb	r2, [r2, #0]
   29efe:	2108      	movs	r1, #8
   29f00:	430a      	orrs	r2, r1
   29f02:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   29f04:	687b      	ldr	r3, [r7, #4]
   29f06:	699b      	ldr	r3, [r3, #24]
   29f08:	330b      	adds	r3, #11
   29f0a:	2226      	movs	r2, #38	; 0x26
   29f0c:	18ba      	adds	r2, r7, r2
   29f0e:	7812      	ldrb	r2, [r2, #0]
   29f10:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   29f12:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   29f14:	0018      	movs	r0, r3
   29f16:	46bd      	mov	sp, r7
   29f18:	b00b      	add	sp, #44	; 0x2c
   29f1a:	bd90      	pop	{r4, r7, pc}

00029f1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   29f1c:	b590      	push	{r4, r7, lr}
   29f1e:	b085      	sub	sp, #20
   29f20:	af00      	add	r7, sp, #0
   29f22:	6078      	str	r0, [r7, #4]
   29f24:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   29f26:	683b      	ldr	r3, [r7, #0]
   29f28:	781b      	ldrb	r3, [r3, #0]
   29f2a:	2b2f      	cmp	r3, #47	; 0x2f
   29f2c:	d003      	beq.n	29f36 <follow_path+0x1a>
   29f2e:	683b      	ldr	r3, [r7, #0]
   29f30:	781b      	ldrb	r3, [r3, #0]
   29f32:	2b5c      	cmp	r3, #92	; 0x5c
   29f34:	d102      	bne.n	29f3c <follow_path+0x20>
		path++;
   29f36:	683b      	ldr	r3, [r7, #0]
   29f38:	3301      	adds	r3, #1
   29f3a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   29f3c:	687b      	ldr	r3, [r7, #4]
   29f3e:	2200      	movs	r2, #0
   29f40:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   29f42:	683b      	ldr	r3, [r7, #0]
   29f44:	781b      	ldrb	r3, [r3, #0]
   29f46:	2b1f      	cmp	r3, #31
   29f48:	d80c      	bhi.n	29f64 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   29f4a:	230f      	movs	r3, #15
   29f4c:	18fc      	adds	r4, r7, r3
   29f4e:	687b      	ldr	r3, [r7, #4]
   29f50:	2100      	movs	r1, #0
   29f52:	0018      	movs	r0, r3
   29f54:	4b3c      	ldr	r3, [pc, #240]	; (2a048 <follow_path+0x12c>)
   29f56:	4798      	blx	r3
   29f58:	0003      	movs	r3, r0
   29f5a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   29f5c:	687b      	ldr	r3, [r7, #4]
   29f5e:	2200      	movs	r2, #0
   29f60:	615a      	str	r2, [r3, #20]
   29f62:	e06a      	b.n	2a03a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   29f64:	230f      	movs	r3, #15
   29f66:	18fc      	adds	r4, r7, r3
   29f68:	003a      	movs	r2, r7
   29f6a:	687b      	ldr	r3, [r7, #4]
   29f6c:	0011      	movs	r1, r2
   29f6e:	0018      	movs	r0, r3
   29f70:	4b36      	ldr	r3, [pc, #216]	; (2a04c <follow_path+0x130>)
   29f72:	4798      	blx	r3
   29f74:	0003      	movs	r3, r0
   29f76:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   29f78:	230f      	movs	r3, #15
   29f7a:	18fb      	adds	r3, r7, r3
   29f7c:	781b      	ldrb	r3, [r3, #0]
   29f7e:	2b00      	cmp	r3, #0
   29f80:	d154      	bne.n	2a02c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   29f82:	230f      	movs	r3, #15
   29f84:	18fc      	adds	r4, r7, r3
   29f86:	687b      	ldr	r3, [r7, #4]
   29f88:	0018      	movs	r0, r3
   29f8a:	4b31      	ldr	r3, [pc, #196]	; (2a050 <follow_path+0x134>)
   29f8c:	4798      	blx	r3
   29f8e:	0003      	movs	r3, r0
   29f90:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   29f92:	687b      	ldr	r3, [r7, #4]
   29f94:	699a      	ldr	r2, [r3, #24]
   29f96:	230e      	movs	r3, #14
   29f98:	18fb      	adds	r3, r7, r3
   29f9a:	7ad2      	ldrb	r2, [r2, #11]
   29f9c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   29f9e:	230f      	movs	r3, #15
   29fa0:	18fb      	adds	r3, r7, r3
   29fa2:	781b      	ldrb	r3, [r3, #0]
   29fa4:	2b00      	cmp	r3, #0
   29fa6:	d00f      	beq.n	29fc8 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   29fa8:	230f      	movs	r3, #15
   29faa:	18fb      	adds	r3, r7, r3
   29fac:	781b      	ldrb	r3, [r3, #0]
   29fae:	2b04      	cmp	r3, #4
   29fb0:	d13e      	bne.n	2a030 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   29fb2:	230e      	movs	r3, #14
   29fb4:	18fb      	adds	r3, r7, r3
   29fb6:	781b      	ldrb	r3, [r3, #0]
   29fb8:	2204      	movs	r2, #4
   29fba:	4013      	ands	r3, r2
   29fbc:	d13a      	bne.n	2a034 <follow_path+0x118>
   29fbe:	230f      	movs	r3, #15
   29fc0:	18fb      	adds	r3, r7, r3
   29fc2:	2205      	movs	r2, #5
   29fc4:	701a      	strb	r2, [r3, #0]
				}
				break;
   29fc6:	e035      	b.n	2a034 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   29fc8:	230e      	movs	r3, #14
   29fca:	18fb      	adds	r3, r7, r3
   29fcc:	781b      	ldrb	r3, [r3, #0]
   29fce:	2204      	movs	r2, #4
   29fd0:	4013      	ands	r3, r2
   29fd2:	d131      	bne.n	2a038 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   29fd4:	687b      	ldr	r3, [r7, #4]
   29fd6:	695b      	ldr	r3, [r3, #20]
   29fd8:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   29fda:	68bb      	ldr	r3, [r7, #8]
   29fdc:	330b      	adds	r3, #11
   29fde:	781b      	ldrb	r3, [r3, #0]
   29fe0:	001a      	movs	r2, r3
   29fe2:	2310      	movs	r3, #16
   29fe4:	4013      	ands	r3, r2
   29fe6:	d104      	bne.n	29ff2 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   29fe8:	230f      	movs	r3, #15
   29fea:	18fb      	adds	r3, r7, r3
   29fec:	2205      	movs	r2, #5
   29fee:	701a      	strb	r2, [r3, #0]
   29ff0:	e023      	b.n	2a03a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   29ff2:	68bb      	ldr	r3, [r7, #8]
   29ff4:	3315      	adds	r3, #21
   29ff6:	781b      	ldrb	r3, [r3, #0]
   29ff8:	021b      	lsls	r3, r3, #8
   29ffa:	b21a      	sxth	r2, r3
   29ffc:	68bb      	ldr	r3, [r7, #8]
   29ffe:	3314      	adds	r3, #20
   2a000:	781b      	ldrb	r3, [r3, #0]
   2a002:	b21b      	sxth	r3, r3
   2a004:	4313      	orrs	r3, r2
   2a006:	b21b      	sxth	r3, r3
   2a008:	b29b      	uxth	r3, r3
   2a00a:	041b      	lsls	r3, r3, #16
   2a00c:	68ba      	ldr	r2, [r7, #8]
   2a00e:	321b      	adds	r2, #27
   2a010:	7812      	ldrb	r2, [r2, #0]
   2a012:	0212      	lsls	r2, r2, #8
   2a014:	b211      	sxth	r1, r2
   2a016:	68ba      	ldr	r2, [r7, #8]
   2a018:	321a      	adds	r2, #26
   2a01a:	7812      	ldrb	r2, [r2, #0]
   2a01c:	b212      	sxth	r2, r2
   2a01e:	430a      	orrs	r2, r1
   2a020:	b212      	sxth	r2, r2
   2a022:	b292      	uxth	r2, r2
   2a024:	431a      	orrs	r2, r3
   2a026:	687b      	ldr	r3, [r7, #4]
   2a028:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2a02a:	e79b      	b.n	29f64 <follow_path+0x48>
			if (res != FR_OK) break;
   2a02c:	46c0      	nop			; (mov r8, r8)
   2a02e:	e004      	b.n	2a03a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2a030:	46c0      	nop			; (mov r8, r8)
   2a032:	e002      	b.n	2a03a <follow_path+0x11e>
				break;
   2a034:	46c0      	nop			; (mov r8, r8)
   2a036:	e000      	b.n	2a03a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2a038:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2a03a:	230f      	movs	r3, #15
   2a03c:	18fb      	adds	r3, r7, r3
   2a03e:	781b      	ldrb	r3, [r3, #0]
}
   2a040:	0018      	movs	r0, r3
   2a042:	46bd      	mov	sp, r7
   2a044:	b005      	add	sp, #20
   2a046:	bd90      	pop	{r4, r7, pc}
   2a048:	00028b6d 	.word	0x00028b6d
   2a04c:	00029ad5 	.word	0x00029ad5
   2a050:	000292d5 	.word	0x000292d5

0002a054 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2a054:	b590      	push	{r4, r7, lr}
   2a056:	b083      	sub	sp, #12
   2a058:	af00      	add	r7, sp, #0
   2a05a:	6078      	str	r0, [r7, #4]
   2a05c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2a05e:	687b      	ldr	r3, [r7, #4]
   2a060:	7858      	ldrb	r0, [r3, #1]
   2a062:	687b      	ldr	r3, [r7, #4]
   2a064:	3330      	adds	r3, #48	; 0x30
   2a066:	0019      	movs	r1, r3
   2a068:	683a      	ldr	r2, [r7, #0]
   2a06a:	2301      	movs	r3, #1
   2a06c:	4c2a      	ldr	r4, [pc, #168]	; (2a118 <check_fs+0xc4>)
   2a06e:	47a0      	blx	r4
   2a070:	1e03      	subs	r3, r0, #0
   2a072:	d001      	beq.n	2a078 <check_fs+0x24>
		return 3;
   2a074:	2303      	movs	r3, #3
   2a076:	e04b      	b.n	2a110 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2a078:	687b      	ldr	r3, [r7, #4]
   2a07a:	4a28      	ldr	r2, [pc, #160]	; (2a11c <check_fs+0xc8>)
   2a07c:	4694      	mov	ip, r2
   2a07e:	4463      	add	r3, ip
   2a080:	3301      	adds	r3, #1
   2a082:	781b      	ldrb	r3, [r3, #0]
   2a084:	021b      	lsls	r3, r3, #8
   2a086:	b21a      	sxth	r2, r3
   2a088:	687b      	ldr	r3, [r7, #4]
   2a08a:	4924      	ldr	r1, [pc, #144]	; (2a11c <check_fs+0xc8>)
   2a08c:	5c5b      	ldrb	r3, [r3, r1]
   2a08e:	b21b      	sxth	r3, r3
   2a090:	4313      	orrs	r3, r2
   2a092:	b21b      	sxth	r3, r3
   2a094:	4a22      	ldr	r2, [pc, #136]	; (2a120 <check_fs+0xcc>)
   2a096:	4293      	cmp	r3, r2
   2a098:	d001      	beq.n	2a09e <check_fs+0x4a>
		return 2;
   2a09a:	2302      	movs	r3, #2
   2a09c:	e038      	b.n	2a110 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2a09e:	687b      	ldr	r3, [r7, #4]
   2a0a0:	3366      	adds	r3, #102	; 0x66
   2a0a2:	3303      	adds	r3, #3
   2a0a4:	781b      	ldrb	r3, [r3, #0]
   2a0a6:	061a      	lsls	r2, r3, #24
   2a0a8:	687b      	ldr	r3, [r7, #4]
   2a0aa:	3366      	adds	r3, #102	; 0x66
   2a0ac:	3302      	adds	r3, #2
   2a0ae:	781b      	ldrb	r3, [r3, #0]
   2a0b0:	041b      	lsls	r3, r3, #16
   2a0b2:	4313      	orrs	r3, r2
   2a0b4:	687a      	ldr	r2, [r7, #4]
   2a0b6:	3266      	adds	r2, #102	; 0x66
   2a0b8:	3201      	adds	r2, #1
   2a0ba:	7812      	ldrb	r2, [r2, #0]
   2a0bc:	0212      	lsls	r2, r2, #8
   2a0be:	4313      	orrs	r3, r2
   2a0c0:	687a      	ldr	r2, [r7, #4]
   2a0c2:	2166      	movs	r1, #102	; 0x66
   2a0c4:	5c52      	ldrb	r2, [r2, r1]
   2a0c6:	4313      	orrs	r3, r2
   2a0c8:	021b      	lsls	r3, r3, #8
   2a0ca:	0a1b      	lsrs	r3, r3, #8
   2a0cc:	4a15      	ldr	r2, [pc, #84]	; (2a124 <check_fs+0xd0>)
   2a0ce:	4293      	cmp	r3, r2
   2a0d0:	d101      	bne.n	2a0d6 <check_fs+0x82>
		return 0;
   2a0d2:	2300      	movs	r3, #0
   2a0d4:	e01c      	b.n	2a110 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2a0d6:	687b      	ldr	r3, [r7, #4]
   2a0d8:	3382      	adds	r3, #130	; 0x82
   2a0da:	3303      	adds	r3, #3
   2a0dc:	781b      	ldrb	r3, [r3, #0]
   2a0de:	061a      	lsls	r2, r3, #24
   2a0e0:	687b      	ldr	r3, [r7, #4]
   2a0e2:	3382      	adds	r3, #130	; 0x82
   2a0e4:	3302      	adds	r3, #2
   2a0e6:	781b      	ldrb	r3, [r3, #0]
   2a0e8:	041b      	lsls	r3, r3, #16
   2a0ea:	4313      	orrs	r3, r2
   2a0ec:	687a      	ldr	r2, [r7, #4]
   2a0ee:	3282      	adds	r2, #130	; 0x82
   2a0f0:	3201      	adds	r2, #1
   2a0f2:	7812      	ldrb	r2, [r2, #0]
   2a0f4:	0212      	lsls	r2, r2, #8
   2a0f6:	4313      	orrs	r3, r2
   2a0f8:	687a      	ldr	r2, [r7, #4]
   2a0fa:	2182      	movs	r1, #130	; 0x82
   2a0fc:	5c52      	ldrb	r2, [r2, r1]
   2a0fe:	4313      	orrs	r3, r2
   2a100:	021b      	lsls	r3, r3, #8
   2a102:	0a1b      	lsrs	r3, r3, #8
   2a104:	4a07      	ldr	r2, [pc, #28]	; (2a124 <check_fs+0xd0>)
   2a106:	4293      	cmp	r3, r2
   2a108:	d101      	bne.n	2a10e <check_fs+0xba>
		return 0;
   2a10a:	2300      	movs	r3, #0
   2a10c:	e000      	b.n	2a110 <check_fs+0xbc>

	return 1;
   2a10e:	2301      	movs	r3, #1
}
   2a110:	0018      	movs	r0, r3
   2a112:	46bd      	mov	sp, r7
   2a114:	b003      	add	sp, #12
   2a116:	bd90      	pop	{r4, r7, pc}
   2a118:	00027f3d 	.word	0x00027f3d
   2a11c:	0000022e 	.word	0x0000022e
   2a120:	ffffaa55 	.word	0xffffaa55
   2a124:	00544146 	.word	0x00544146

0002a128 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2a128:	b590      	push	{r4, r7, lr}
   2a12a:	b093      	sub	sp, #76	; 0x4c
   2a12c:	af00      	add	r7, sp, #0
   2a12e:	60f8      	str	r0, [r7, #12]
   2a130:	60b9      	str	r1, [r7, #8]
   2a132:	1dfb      	adds	r3, r7, #7
   2a134:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2a136:	68fb      	ldr	r3, [r7, #12]
   2a138:	681b      	ldr	r3, [r3, #0]
   2a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a13e:	781b      	ldrb	r3, [r3, #0]
   2a140:	3b30      	subs	r3, #48	; 0x30
   2a142:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2a144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a146:	2b09      	cmp	r3, #9
   2a148:	d80b      	bhi.n	2a162 <chk_mounted+0x3a>
   2a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a14c:	3301      	adds	r3, #1
   2a14e:	781b      	ldrb	r3, [r3, #0]
   2a150:	2b3a      	cmp	r3, #58	; 0x3a
   2a152:	d106      	bne.n	2a162 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a156:	3302      	adds	r3, #2
   2a158:	62fb      	str	r3, [r7, #44]	; 0x2c
   2a15a:	68fb      	ldr	r3, [r7, #12]
   2a15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a15e:	601a      	str	r2, [r3, #0]
   2a160:	e001      	b.n	2a166 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2a162:	2300      	movs	r3, #0
   2a164:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2a166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a168:	2b07      	cmp	r3, #7
   2a16a:	d901      	bls.n	2a170 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2a16c:	230b      	movs	r3, #11
   2a16e:	e2af      	b.n	2a6d0 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2a170:	4bc5      	ldr	r3, [pc, #788]	; (2a488 <chk_mounted+0x360>)
   2a172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2a174:	0092      	lsls	r2, r2, #2
   2a176:	58d3      	ldr	r3, [r2, r3]
   2a178:	62bb      	str	r3, [r7, #40]	; 0x28
   2a17a:	68bb      	ldr	r3, [r7, #8]
   2a17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a17e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a182:	2b00      	cmp	r3, #0
   2a184:	d101      	bne.n	2a18a <chk_mounted+0x62>
   2a186:	230c      	movs	r3, #12
   2a188:	e2a2      	b.n	2a6d0 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a18c:	781b      	ldrb	r3, [r3, #0]
   2a18e:	2b00      	cmp	r3, #0
   2a190:	d01c      	beq.n	2a1cc <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a194:	785b      	ldrb	r3, [r3, #1]
   2a196:	2227      	movs	r2, #39	; 0x27
   2a198:	18bc      	adds	r4, r7, r2
   2a19a:	0018      	movs	r0, r3
   2a19c:	4bbb      	ldr	r3, [pc, #748]	; (2a48c <chk_mounted+0x364>)
   2a19e:	4798      	blx	r3
   2a1a0:	0003      	movs	r3, r0
   2a1a2:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2a1a4:	2327      	movs	r3, #39	; 0x27
   2a1a6:	18fb      	adds	r3, r7, r3
   2a1a8:	781b      	ldrb	r3, [r3, #0]
   2a1aa:	2201      	movs	r2, #1
   2a1ac:	4013      	ands	r3, r2
   2a1ae:	d10d      	bne.n	2a1cc <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2a1b0:	1dfb      	adds	r3, r7, #7
   2a1b2:	781b      	ldrb	r3, [r3, #0]
   2a1b4:	2b00      	cmp	r3, #0
   2a1b6:	d007      	beq.n	2a1c8 <chk_mounted+0xa0>
   2a1b8:	2327      	movs	r3, #39	; 0x27
   2a1ba:	18fb      	adds	r3, r7, r3
   2a1bc:	781b      	ldrb	r3, [r3, #0]
   2a1be:	2204      	movs	r2, #4
   2a1c0:	4013      	ands	r3, r2
   2a1c2:	d001      	beq.n	2a1c8 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2a1c4:	230a      	movs	r3, #10
   2a1c6:	e283      	b.n	2a6d0 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2a1c8:	2300      	movs	r3, #0
   2a1ca:	e281      	b.n	2a6d0 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a1ce:	2200      	movs	r2, #0
   2a1d0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2a1d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a1d4:	b2da      	uxtb	r2, r3
   2a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a1d8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a1dc:	785b      	ldrb	r3, [r3, #1]
   2a1de:	2227      	movs	r2, #39	; 0x27
   2a1e0:	18bc      	adds	r4, r7, r2
   2a1e2:	0018      	movs	r0, r3
   2a1e4:	4baa      	ldr	r3, [pc, #680]	; (2a490 <chk_mounted+0x368>)
   2a1e6:	4798      	blx	r3
   2a1e8:	0003      	movs	r3, r0
   2a1ea:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2a1ec:	2327      	movs	r3, #39	; 0x27
   2a1ee:	18fb      	adds	r3, r7, r3
   2a1f0:	781b      	ldrb	r3, [r3, #0]
   2a1f2:	2201      	movs	r2, #1
   2a1f4:	4013      	ands	r3, r2
   2a1f6:	d001      	beq.n	2a1fc <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2a1f8:	2303      	movs	r3, #3
   2a1fa:	e269      	b.n	2a6d0 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2a1fc:	1dfb      	adds	r3, r7, #7
   2a1fe:	781b      	ldrb	r3, [r3, #0]
   2a200:	2b00      	cmp	r3, #0
   2a202:	d007      	beq.n	2a214 <chk_mounted+0xec>
   2a204:	2327      	movs	r3, #39	; 0x27
   2a206:	18fb      	adds	r3, r7, r3
   2a208:	781b      	ldrb	r3, [r3, #0]
   2a20a:	2204      	movs	r2, #4
   2a20c:	4013      	ands	r3, r2
   2a20e:	d001      	beq.n	2a214 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2a210:	230a      	movs	r3, #10
   2a212:	e25d      	b.n	2a6d0 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2a214:	2300      	movs	r3, #0
   2a216:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a218:	2347      	movs	r3, #71	; 0x47
   2a21a:	18fc      	adds	r4, r7, r3
   2a21c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a220:	0011      	movs	r1, r2
   2a222:	0018      	movs	r0, r3
   2a224:	4b9b      	ldr	r3, [pc, #620]	; (2a494 <chk_mounted+0x36c>)
   2a226:	4798      	blx	r3
   2a228:	0003      	movs	r3, r0
   2a22a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2a22c:	2347      	movs	r3, #71	; 0x47
   2a22e:	18fb      	adds	r3, r7, r3
   2a230:	781b      	ldrb	r3, [r3, #0]
   2a232:	2b01      	cmp	r3, #1
   2a234:	d13b      	bne.n	2a2ae <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2a236:	2346      	movs	r3, #70	; 0x46
   2a238:	18fb      	adds	r3, r7, r3
   2a23a:	2200      	movs	r2, #0
   2a23c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2a23e:	2346      	movs	r3, #70	; 0x46
   2a240:	18fb      	adds	r3, r7, r3
   2a242:	781b      	ldrb	r3, [r3, #0]
   2a244:	2b00      	cmp	r3, #0
   2a246:	d006      	beq.n	2a256 <chk_mounted+0x12e>
   2a248:	2346      	movs	r3, #70	; 0x46
   2a24a:	18fb      	adds	r3, r7, r3
   2a24c:	781a      	ldrb	r2, [r3, #0]
   2a24e:	2346      	movs	r3, #70	; 0x46
   2a250:	18fb      	adds	r3, r7, r3
   2a252:	3a01      	subs	r2, #1
   2a254:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2a256:	2346      	movs	r3, #70	; 0x46
   2a258:	18fb      	adds	r3, r7, r3
   2a25a:	781b      	ldrb	r3, [r3, #0]
   2a25c:	011b      	lsls	r3, r3, #4
   2a25e:	33bf      	adds	r3, #191	; 0xbf
   2a260:	33ff      	adds	r3, #255	; 0xff
   2a262:	3330      	adds	r3, #48	; 0x30
   2a264:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a266:	18d3      	adds	r3, r2, r3
   2a268:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2a26a:	6a3b      	ldr	r3, [r7, #32]
   2a26c:	3304      	adds	r3, #4
   2a26e:	781b      	ldrb	r3, [r3, #0]
   2a270:	2b00      	cmp	r3, #0
   2a272:	d01c      	beq.n	2a2ae <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2a274:	6a3b      	ldr	r3, [r7, #32]
   2a276:	330b      	adds	r3, #11
   2a278:	781b      	ldrb	r3, [r3, #0]
   2a27a:	061a      	lsls	r2, r3, #24
   2a27c:	6a3b      	ldr	r3, [r7, #32]
   2a27e:	330a      	adds	r3, #10
   2a280:	781b      	ldrb	r3, [r3, #0]
   2a282:	041b      	lsls	r3, r3, #16
   2a284:	4313      	orrs	r3, r2
   2a286:	6a3a      	ldr	r2, [r7, #32]
   2a288:	3209      	adds	r2, #9
   2a28a:	7812      	ldrb	r2, [r2, #0]
   2a28c:	0212      	lsls	r2, r2, #8
   2a28e:	4313      	orrs	r3, r2
   2a290:	6a3a      	ldr	r2, [r7, #32]
   2a292:	3208      	adds	r2, #8
   2a294:	7812      	ldrb	r2, [r2, #0]
   2a296:	4313      	orrs	r3, r2
   2a298:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2a29a:	2347      	movs	r3, #71	; 0x47
   2a29c:	18fc      	adds	r4, r7, r3
   2a29e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a2a2:	0011      	movs	r1, r2
   2a2a4:	0018      	movs	r0, r3
   2a2a6:	4b7b      	ldr	r3, [pc, #492]	; (2a494 <chk_mounted+0x36c>)
   2a2a8:	4798      	blx	r3
   2a2aa:	0003      	movs	r3, r0
   2a2ac:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2a2ae:	2347      	movs	r3, #71	; 0x47
   2a2b0:	18fb      	adds	r3, r7, r3
   2a2b2:	781b      	ldrb	r3, [r3, #0]
   2a2b4:	2b03      	cmp	r3, #3
   2a2b6:	d101      	bne.n	2a2bc <chk_mounted+0x194>
   2a2b8:	2301      	movs	r3, #1
   2a2ba:	e209      	b.n	2a6d0 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2a2bc:	2347      	movs	r3, #71	; 0x47
   2a2be:	18fb      	adds	r3, r7, r3
   2a2c0:	781b      	ldrb	r3, [r3, #0]
   2a2c2:	2b00      	cmp	r3, #0
   2a2c4:	d001      	beq.n	2a2ca <chk_mounted+0x1a2>
   2a2c6:	230d      	movs	r3, #13
   2a2c8:	e202      	b.n	2a6d0 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a2cc:	223c      	movs	r2, #60	; 0x3c
   2a2ce:	5c9b      	ldrb	r3, [r3, r2]
   2a2d0:	021b      	lsls	r3, r3, #8
   2a2d2:	b21a      	sxth	r2, r3
   2a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a2d6:	213b      	movs	r1, #59	; 0x3b
   2a2d8:	5c5b      	ldrb	r3, [r3, r1]
   2a2da:	b21b      	sxth	r3, r3
   2a2dc:	4313      	orrs	r3, r2
   2a2de:	b21a      	sxth	r2, r3
   2a2e0:	2380      	movs	r3, #128	; 0x80
   2a2e2:	009b      	lsls	r3, r3, #2
   2a2e4:	429a      	cmp	r2, r3
   2a2e6:	d001      	beq.n	2a2ec <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2a2e8:	230d      	movs	r3, #13
   2a2ea:	e1f1      	b.n	2a6d0 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a2ee:	2247      	movs	r2, #71	; 0x47
   2a2f0:	5c9b      	ldrb	r3, [r3, r2]
   2a2f2:	021b      	lsls	r3, r3, #8
   2a2f4:	b21a      	sxth	r2, r3
   2a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a2f8:	2146      	movs	r1, #70	; 0x46
   2a2fa:	5c5b      	ldrb	r3, [r3, r1]
   2a2fc:	b21b      	sxth	r3, r3
   2a2fe:	4313      	orrs	r3, r2
   2a300:	b21b      	sxth	r3, r3
   2a302:	b29b      	uxth	r3, r3
   2a304:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2a306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a308:	2b00      	cmp	r3, #0
   2a30a:	d112      	bne.n	2a332 <chk_mounted+0x20a>
   2a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a30e:	2257      	movs	r2, #87	; 0x57
   2a310:	5c9b      	ldrb	r3, [r3, r2]
   2a312:	061a      	lsls	r2, r3, #24
   2a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a316:	2156      	movs	r1, #86	; 0x56
   2a318:	5c5b      	ldrb	r3, [r3, r1]
   2a31a:	041b      	lsls	r3, r3, #16
   2a31c:	4313      	orrs	r3, r2
   2a31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a320:	2155      	movs	r1, #85	; 0x55
   2a322:	5c52      	ldrb	r2, [r2, r1]
   2a324:	0212      	lsls	r2, r2, #8
   2a326:	4313      	orrs	r3, r2
   2a328:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a32a:	2154      	movs	r1, #84	; 0x54
   2a32c:	5c52      	ldrb	r2, [r2, r1]
   2a32e:	4313      	orrs	r3, r2
   2a330:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a334:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2a336:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2a338:	231f      	movs	r3, #31
   2a33a:	18fb      	adds	r3, r7, r3
   2a33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a33e:	2140      	movs	r1, #64	; 0x40
   2a340:	5c52      	ldrb	r2, [r2, r1]
   2a342:	701a      	strb	r2, [r3, #0]
   2a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a346:	221f      	movs	r2, #31
   2a348:	18ba      	adds	r2, r7, r2
   2a34a:	7812      	ldrb	r2, [r2, #0]
   2a34c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2a34e:	231f      	movs	r3, #31
   2a350:	18fb      	adds	r3, r7, r3
   2a352:	781b      	ldrb	r3, [r3, #0]
   2a354:	2b01      	cmp	r3, #1
   2a356:	d006      	beq.n	2a366 <chk_mounted+0x23e>
   2a358:	231f      	movs	r3, #31
   2a35a:	18fb      	adds	r3, r7, r3
   2a35c:	781b      	ldrb	r3, [r3, #0]
   2a35e:	2b02      	cmp	r3, #2
   2a360:	d001      	beq.n	2a366 <chk_mounted+0x23e>
   2a362:	230d      	movs	r3, #13
   2a364:	e1b4      	b.n	2a6d0 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2a366:	231f      	movs	r3, #31
   2a368:	18fb      	adds	r3, r7, r3
   2a36a:	781a      	ldrb	r2, [r3, #0]
   2a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a36e:	4353      	muls	r3, r2
   2a370:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2a372:	231f      	movs	r3, #31
   2a374:	18fb      	adds	r3, r7, r3
   2a376:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a378:	213d      	movs	r1, #61	; 0x3d
   2a37a:	5c52      	ldrb	r2, [r2, r1]
   2a37c:	701a      	strb	r2, [r3, #0]
   2a37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a380:	221f      	movs	r2, #31
   2a382:	18ba      	adds	r2, r7, r2
   2a384:	7812      	ldrb	r2, [r2, #0]
   2a386:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2a388:	231f      	movs	r3, #31
   2a38a:	18fb      	adds	r3, r7, r3
   2a38c:	781b      	ldrb	r3, [r3, #0]
   2a38e:	2b00      	cmp	r3, #0
   2a390:	d008      	beq.n	2a3a4 <chk_mounted+0x27c>
   2a392:	231f      	movs	r3, #31
   2a394:	18fb      	adds	r3, r7, r3
   2a396:	781b      	ldrb	r3, [r3, #0]
   2a398:	221f      	movs	r2, #31
   2a39a:	18ba      	adds	r2, r7, r2
   2a39c:	7812      	ldrb	r2, [r2, #0]
   2a39e:	3a01      	subs	r2, #1
   2a3a0:	4013      	ands	r3, r2
   2a3a2:	d001      	beq.n	2a3a8 <chk_mounted+0x280>
   2a3a4:	230d      	movs	r3, #13
   2a3a6:	e193      	b.n	2a6d0 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a3aa:	2242      	movs	r2, #66	; 0x42
   2a3ac:	5c9b      	ldrb	r3, [r3, r2]
   2a3ae:	021b      	lsls	r3, r3, #8
   2a3b0:	b21a      	sxth	r2, r3
   2a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a3b4:	2141      	movs	r1, #65	; 0x41
   2a3b6:	5c5b      	ldrb	r3, [r3, r1]
   2a3b8:	b21b      	sxth	r3, r3
   2a3ba:	4313      	orrs	r3, r2
   2a3bc:	b21b      	sxth	r3, r3
   2a3be:	b29a      	uxth	r2, r3
   2a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a3c2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a3c6:	891b      	ldrh	r3, [r3, #8]
   2a3c8:	220f      	movs	r2, #15
   2a3ca:	4013      	ands	r3, r2
   2a3cc:	b29b      	uxth	r3, r3
   2a3ce:	2b00      	cmp	r3, #0
   2a3d0:	d001      	beq.n	2a3d6 <chk_mounted+0x2ae>
   2a3d2:	230d      	movs	r3, #13
   2a3d4:	e17c      	b.n	2a6d0 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a3d8:	2244      	movs	r2, #68	; 0x44
   2a3da:	5c9b      	ldrb	r3, [r3, r2]
   2a3dc:	021b      	lsls	r3, r3, #8
   2a3de:	b21a      	sxth	r2, r3
   2a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a3e2:	2143      	movs	r1, #67	; 0x43
   2a3e4:	5c5b      	ldrb	r3, [r3, r1]
   2a3e6:	b21b      	sxth	r3, r3
   2a3e8:	4313      	orrs	r3, r2
   2a3ea:	b21b      	sxth	r3, r3
   2a3ec:	b29b      	uxth	r3, r3
   2a3ee:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3f2:	2b00      	cmp	r3, #0
   2a3f4:	d112      	bne.n	2a41c <chk_mounted+0x2f4>
   2a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a3f8:	2253      	movs	r2, #83	; 0x53
   2a3fa:	5c9b      	ldrb	r3, [r3, r2]
   2a3fc:	061a      	lsls	r2, r3, #24
   2a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a400:	2152      	movs	r1, #82	; 0x52
   2a402:	5c5b      	ldrb	r3, [r3, r1]
   2a404:	041b      	lsls	r3, r3, #16
   2a406:	4313      	orrs	r3, r2
   2a408:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a40a:	2151      	movs	r1, #81	; 0x51
   2a40c:	5c52      	ldrb	r2, [r2, r1]
   2a40e:	0212      	lsls	r2, r2, #8
   2a410:	4313      	orrs	r3, r2
   2a412:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a414:	2150      	movs	r1, #80	; 0x50
   2a416:	5c52      	ldrb	r2, [r2, r1]
   2a418:	4313      	orrs	r3, r2
   2a41a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a41e:	223f      	movs	r2, #63	; 0x3f
   2a420:	5c9b      	ldrb	r3, [r3, r2]
   2a422:	021b      	lsls	r3, r3, #8
   2a424:	b21a      	sxth	r2, r3
   2a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a428:	213e      	movs	r1, #62	; 0x3e
   2a42a:	5c5b      	ldrb	r3, [r3, r1]
   2a42c:	b21b      	sxth	r3, r3
   2a42e:	4313      	orrs	r3, r2
   2a430:	b21a      	sxth	r2, r3
   2a432:	231c      	movs	r3, #28
   2a434:	18fb      	adds	r3, r7, r3
   2a436:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2a438:	231c      	movs	r3, #28
   2a43a:	18fb      	adds	r3, r7, r3
   2a43c:	881b      	ldrh	r3, [r3, #0]
   2a43e:	2b00      	cmp	r3, #0
   2a440:	d101      	bne.n	2a446 <chk_mounted+0x31e>
   2a442:	230d      	movs	r3, #13
   2a444:	e144      	b.n	2a6d0 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2a446:	231c      	movs	r3, #28
   2a448:	18fb      	adds	r3, r7, r3
   2a44a:	881a      	ldrh	r2, [r3, #0]
   2a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a44e:	18d3      	adds	r3, r2, r3
   2a450:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a452:	8912      	ldrh	r2, [r2, #8]
   2a454:	0912      	lsrs	r2, r2, #4
   2a456:	b292      	uxth	r2, r2
   2a458:	189b      	adds	r3, r3, r2
   2a45a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2a45c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a45e:	69bb      	ldr	r3, [r7, #24]
   2a460:	429a      	cmp	r2, r3
   2a462:	d201      	bcs.n	2a468 <chk_mounted+0x340>
   2a464:	230d      	movs	r3, #13
   2a466:	e133      	b.n	2a6d0 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2a468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a46a:	69bb      	ldr	r3, [r7, #24]
   2a46c:	1ad2      	subs	r2, r2, r3
   2a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a470:	789b      	ldrb	r3, [r3, #2]
   2a472:	0019      	movs	r1, r3
   2a474:	4b08      	ldr	r3, [pc, #32]	; (2a498 <chk_mounted+0x370>)
   2a476:	0010      	movs	r0, r2
   2a478:	4798      	blx	r3
   2a47a:	0003      	movs	r3, r0
   2a47c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2a47e:	697b      	ldr	r3, [r7, #20]
   2a480:	2b00      	cmp	r3, #0
   2a482:	d10b      	bne.n	2a49c <chk_mounted+0x374>
   2a484:	230d      	movs	r3, #13
   2a486:	e123      	b.n	2a6d0 <chk_mounted+0x5a8>
   2a488:	20003d74 	.word	0x20003d74
   2a48c:	00027f05 	.word	0x00027f05
   2a490:	00027e81 	.word	0x00027e81
   2a494:	0002a055 	.word	0x0002a055
   2a498:	0002fded 	.word	0x0002fded
	fmt = FS_FAT12;
   2a49c:	2347      	movs	r3, #71	; 0x47
   2a49e:	18fb      	adds	r3, r7, r3
   2a4a0:	2201      	movs	r2, #1
   2a4a2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2a4a4:	697b      	ldr	r3, [r7, #20]
   2a4a6:	4a8c      	ldr	r2, [pc, #560]	; (2a6d8 <chk_mounted+0x5b0>)
   2a4a8:	4293      	cmp	r3, r2
   2a4aa:	d903      	bls.n	2a4b4 <chk_mounted+0x38c>
   2a4ac:	2347      	movs	r3, #71	; 0x47
   2a4ae:	18fb      	adds	r3, r7, r3
   2a4b0:	2202      	movs	r2, #2
   2a4b2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2a4b4:	697b      	ldr	r3, [r7, #20]
   2a4b6:	4a89      	ldr	r2, [pc, #548]	; (2a6dc <chk_mounted+0x5b4>)
   2a4b8:	4293      	cmp	r3, r2
   2a4ba:	d903      	bls.n	2a4c4 <chk_mounted+0x39c>
   2a4bc:	2347      	movs	r3, #71	; 0x47
   2a4be:	18fb      	adds	r3, r7, r3
   2a4c0:	2203      	movs	r2, #3
   2a4c2:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2a4c4:	697b      	ldr	r3, [r7, #20]
   2a4c6:	1c9a      	adds	r2, r3, #2
   2a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a4ca:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2a4cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a4ce:	69bb      	ldr	r3, [r7, #24]
   2a4d0:	18d2      	adds	r2, r2, r3
   2a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a4d4:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2a4d6:	231c      	movs	r3, #28
   2a4d8:	18fb      	adds	r3, r7, r3
   2a4da:	881a      	ldrh	r2, [r3, #0]
   2a4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a4de:	18d2      	adds	r2, r2, r3
   2a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a4e2:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2a4e4:	2347      	movs	r3, #71	; 0x47
   2a4e6:	18fb      	adds	r3, r7, r3
   2a4e8:	781b      	ldrb	r3, [r3, #0]
   2a4ea:	2b03      	cmp	r3, #3
   2a4ec:	d11e      	bne.n	2a52c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a4f0:	891b      	ldrh	r3, [r3, #8]
   2a4f2:	2b00      	cmp	r3, #0
   2a4f4:	d001      	beq.n	2a4fa <chk_mounted+0x3d2>
   2a4f6:	230d      	movs	r3, #13
   2a4f8:	e0ea      	b.n	2a6d0 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a4fc:	225f      	movs	r2, #95	; 0x5f
   2a4fe:	5c9b      	ldrb	r3, [r3, r2]
   2a500:	061a      	lsls	r2, r3, #24
   2a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a504:	215e      	movs	r1, #94	; 0x5e
   2a506:	5c5b      	ldrb	r3, [r3, r1]
   2a508:	041b      	lsls	r3, r3, #16
   2a50a:	4313      	orrs	r3, r2
   2a50c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a50e:	215d      	movs	r1, #93	; 0x5d
   2a510:	5c52      	ldrb	r2, [r2, r1]
   2a512:	0212      	lsls	r2, r2, #8
   2a514:	4313      	orrs	r3, r2
   2a516:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a518:	215c      	movs	r1, #92	; 0x5c
   2a51a:	5c52      	ldrb	r2, [r2, r1]
   2a51c:	431a      	orrs	r2, r3
   2a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a520:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a524:	699b      	ldr	r3, [r3, #24]
   2a526:	009b      	lsls	r3, r3, #2
   2a528:	633b      	str	r3, [r7, #48]	; 0x30
   2a52a:	e020      	b.n	2a56e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a52e:	891b      	ldrh	r3, [r3, #8]
   2a530:	2b00      	cmp	r3, #0
   2a532:	d101      	bne.n	2a538 <chk_mounted+0x410>
   2a534:	230d      	movs	r3, #13
   2a536:	e0cb      	b.n	2a6d0 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a53a:	6a1a      	ldr	r2, [r3, #32]
   2a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a53e:	18d2      	adds	r2, r2, r3
   2a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a542:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2a544:	2347      	movs	r3, #71	; 0x47
   2a546:	18fb      	adds	r3, r7, r3
   2a548:	781b      	ldrb	r3, [r3, #0]
   2a54a:	2b02      	cmp	r3, #2
   2a54c:	d103      	bne.n	2a556 <chk_mounted+0x42e>
   2a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a550:	699b      	ldr	r3, [r3, #24]
   2a552:	005b      	lsls	r3, r3, #1
   2a554:	e00a      	b.n	2a56c <chk_mounted+0x444>
   2a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a558:	699a      	ldr	r2, [r3, #24]
   2a55a:	0013      	movs	r3, r2
   2a55c:	005b      	lsls	r3, r3, #1
   2a55e:	189b      	adds	r3, r3, r2
   2a560:	085a      	lsrs	r2, r3, #1
   2a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a564:	699b      	ldr	r3, [r3, #24]
   2a566:	2101      	movs	r1, #1
   2a568:	400b      	ands	r3, r1
   2a56a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2a56c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a570:	69da      	ldr	r2, [r3, #28]
   2a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a574:	495a      	ldr	r1, [pc, #360]	; (2a6e0 <chk_mounted+0x5b8>)
   2a576:	468c      	mov	ip, r1
   2a578:	4463      	add	r3, ip
   2a57a:	0a5b      	lsrs	r3, r3, #9
   2a57c:	429a      	cmp	r2, r3
   2a57e:	d201      	bcs.n	2a584 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2a580:	230d      	movs	r3, #13
   2a582:	e0a5      	b.n	2a6d0 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a586:	2201      	movs	r2, #1
   2a588:	4252      	negs	r2, r2
   2a58a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a58e:	2200      	movs	r2, #0
   2a590:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2a592:	2347      	movs	r3, #71	; 0x47
   2a594:	18fb      	adds	r3, r7, r3
   2a596:	781b      	ldrb	r3, [r3, #0]
   2a598:	2b03      	cmp	r3, #3
   2a59a:	d000      	beq.n	2a59e <chk_mounted+0x476>
   2a59c:	e082      	b.n	2a6a4 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5a0:	2200      	movs	r2, #0
   2a5a2:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5a6:	2261      	movs	r2, #97	; 0x61
   2a5a8:	5c9b      	ldrb	r3, [r3, r2]
   2a5aa:	021b      	lsls	r3, r3, #8
   2a5ac:	b21a      	sxth	r2, r3
   2a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5b0:	2160      	movs	r1, #96	; 0x60
   2a5b2:	5c5b      	ldrb	r3, [r3, r1]
   2a5b4:	b21b      	sxth	r3, r3
   2a5b6:	4313      	orrs	r3, r2
   2a5b8:	b21b      	sxth	r3, r3
   2a5ba:	b29b      	uxth	r3, r3
   2a5bc:	001a      	movs	r2, r3
   2a5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5c0:	18d2      	adds	r2, r2, r3
   2a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5c4:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5c8:	7858      	ldrb	r0, [r3, #1]
   2a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5cc:	3330      	adds	r3, #48	; 0x30
   2a5ce:	0019      	movs	r1, r3
   2a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5d2:	695a      	ldr	r2, [r3, #20]
   2a5d4:	2301      	movs	r3, #1
   2a5d6:	4c43      	ldr	r4, [pc, #268]	; (2a6e4 <chk_mounted+0x5bc>)
   2a5d8:	47a0      	blx	r4
   2a5da:	1e03      	subs	r3, r0, #0
   2a5dc:	d162      	bne.n	2a6a4 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5e0:	4a41      	ldr	r2, [pc, #260]	; (2a6e8 <chk_mounted+0x5c0>)
   2a5e2:	5c9b      	ldrb	r3, [r3, r2]
   2a5e4:	021b      	lsls	r3, r3, #8
   2a5e6:	b21a      	sxth	r2, r3
   2a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5ea:	4940      	ldr	r1, [pc, #256]	; (2a6ec <chk_mounted+0x5c4>)
   2a5ec:	5c5b      	ldrb	r3, [r3, r1]
   2a5ee:	b21b      	sxth	r3, r3
   2a5f0:	4313      	orrs	r3, r2
   2a5f2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2a5f4:	4a3e      	ldr	r2, [pc, #248]	; (2a6f0 <chk_mounted+0x5c8>)
   2a5f6:	4293      	cmp	r3, r2
   2a5f8:	d154      	bne.n	2a6a4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a5fc:	2233      	movs	r2, #51	; 0x33
   2a5fe:	5c9b      	ldrb	r3, [r3, r2]
   2a600:	061a      	lsls	r2, r3, #24
   2a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a604:	2132      	movs	r1, #50	; 0x32
   2a606:	5c5b      	ldrb	r3, [r3, r1]
   2a608:	041b      	lsls	r3, r3, #16
   2a60a:	4313      	orrs	r3, r2
   2a60c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a60e:	2131      	movs	r1, #49	; 0x31
   2a610:	5c52      	ldrb	r2, [r2, r1]
   2a612:	0212      	lsls	r2, r2, #8
   2a614:	4313      	orrs	r3, r2
   2a616:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a618:	2130      	movs	r1, #48	; 0x30
   2a61a:	5c52      	ldrb	r2, [r2, r1]
   2a61c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2a61e:	4a35      	ldr	r2, [pc, #212]	; (2a6f4 <chk_mounted+0x5cc>)
   2a620:	4293      	cmp	r3, r2
   2a622:	d13f      	bne.n	2a6a4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a626:	4a34      	ldr	r2, [pc, #208]	; (2a6f8 <chk_mounted+0x5d0>)
   2a628:	5c9b      	ldrb	r3, [r3, r2]
   2a62a:	061a      	lsls	r2, r3, #24
   2a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a62e:	4933      	ldr	r1, [pc, #204]	; (2a6fc <chk_mounted+0x5d4>)
   2a630:	5c5b      	ldrb	r3, [r3, r1]
   2a632:	041b      	lsls	r3, r3, #16
   2a634:	4313      	orrs	r3, r2
   2a636:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a638:	4931      	ldr	r1, [pc, #196]	; (2a700 <chk_mounted+0x5d8>)
   2a63a:	5c52      	ldrb	r2, [r2, r1]
   2a63c:	0212      	lsls	r2, r2, #8
   2a63e:	4313      	orrs	r3, r2
   2a640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2a642:	2285      	movs	r2, #133	; 0x85
   2a644:	0092      	lsls	r2, r2, #2
   2a646:	5c8a      	ldrb	r2, [r1, r2]
   2a648:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2a64a:	4a2e      	ldr	r2, [pc, #184]	; (2a704 <chk_mounted+0x5dc>)
   2a64c:	4293      	cmp	r3, r2
   2a64e:	d129      	bne.n	2a6a4 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a652:	4a2d      	ldr	r2, [pc, #180]	; (2a708 <chk_mounted+0x5e0>)
   2a654:	5c9b      	ldrb	r3, [r3, r2]
   2a656:	061a      	lsls	r2, r3, #24
   2a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a65a:	492c      	ldr	r1, [pc, #176]	; (2a70c <chk_mounted+0x5e4>)
   2a65c:	5c5b      	ldrb	r3, [r3, r1]
   2a65e:	041b      	lsls	r3, r3, #16
   2a660:	4313      	orrs	r3, r2
   2a662:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a664:	492a      	ldr	r1, [pc, #168]	; (2a710 <chk_mounted+0x5e8>)
   2a666:	5c52      	ldrb	r2, [r2, r1]
   2a668:	0212      	lsls	r2, r2, #8
   2a66a:	4313      	orrs	r3, r2
   2a66c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2a66e:	2287      	movs	r2, #135	; 0x87
   2a670:	0092      	lsls	r2, r2, #2
   2a672:	5c8a      	ldrb	r2, [r1, r2]
   2a674:	431a      	orrs	r2, r3
   2a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a678:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a67c:	4a25      	ldr	r2, [pc, #148]	; (2a714 <chk_mounted+0x5ec>)
   2a67e:	5c9b      	ldrb	r3, [r3, r2]
   2a680:	061a      	lsls	r2, r3, #24
   2a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a684:	4924      	ldr	r1, [pc, #144]	; (2a718 <chk_mounted+0x5f0>)
   2a686:	5c5b      	ldrb	r3, [r3, r1]
   2a688:	041b      	lsls	r3, r3, #16
   2a68a:	4313      	orrs	r3, r2
   2a68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a68e:	4923      	ldr	r1, [pc, #140]	; (2a71c <chk_mounted+0x5f4>)
   2a690:	5c52      	ldrb	r2, [r2, r1]
   2a692:	0212      	lsls	r2, r2, #8
   2a694:	4313      	orrs	r3, r2
   2a696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2a698:	2286      	movs	r2, #134	; 0x86
   2a69a:	0092      	lsls	r2, r2, #2
   2a69c:	5c8a      	ldrb	r2, [r1, r2]
   2a69e:	431a      	orrs	r2, r3
   2a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a6a2:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a6a6:	2247      	movs	r2, #71	; 0x47
   2a6a8:	18ba      	adds	r2, r7, r2
   2a6aa:	7812      	ldrb	r2, [r2, #0]
   2a6ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2a6ae:	4b1c      	ldr	r3, [pc, #112]	; (2a720 <chk_mounted+0x5f8>)
   2a6b0:	881b      	ldrh	r3, [r3, #0]
   2a6b2:	3301      	adds	r3, #1
   2a6b4:	b29a      	uxth	r2, r3
   2a6b6:	4b1a      	ldr	r3, [pc, #104]	; (2a720 <chk_mounted+0x5f8>)
   2a6b8:	801a      	strh	r2, [r3, #0]
   2a6ba:	4b19      	ldr	r3, [pc, #100]	; (2a720 <chk_mounted+0x5f8>)
   2a6bc:	881a      	ldrh	r2, [r3, #0]
   2a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a6c0:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a6c4:	2200      	movs	r2, #0
   2a6c6:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a6ca:	2200      	movs	r2, #0
   2a6cc:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2a6ce:	2300      	movs	r3, #0
}
   2a6d0:	0018      	movs	r0, r3
   2a6d2:	46bd      	mov	sp, r7
   2a6d4:	b013      	add	sp, #76	; 0x4c
   2a6d6:	bd90      	pop	{r4, r7, pc}
   2a6d8:	00000ff5 	.word	0x00000ff5
   2a6dc:	0000fff5 	.word	0x0000fff5
   2a6e0:	000001ff 	.word	0x000001ff
   2a6e4:	00027f3d 	.word	0x00027f3d
   2a6e8:	0000022f 	.word	0x0000022f
   2a6ec:	0000022e 	.word	0x0000022e
   2a6f0:	ffffaa55 	.word	0xffffaa55
   2a6f4:	41615252 	.word	0x41615252
   2a6f8:	00000217 	.word	0x00000217
   2a6fc:	00000216 	.word	0x00000216
   2a700:	00000215 	.word	0x00000215
   2a704:	61417272 	.word	0x61417272
   2a708:	0000021f 	.word	0x0000021f
   2a70c:	0000021e 	.word	0x0000021e
   2a710:	0000021d 	.word	0x0000021d
   2a714:	0000021b 	.word	0x0000021b
   2a718:	0000021a 	.word	0x0000021a
   2a71c:	00000219 	.word	0x00000219
   2a720:	20003d94 	.word	0x20003d94

0002a724 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2a724:	b580      	push	{r7, lr}
   2a726:	b082      	sub	sp, #8
   2a728:	af00      	add	r7, sp, #0
   2a72a:	6078      	str	r0, [r7, #4]
   2a72c:	000a      	movs	r2, r1
   2a72e:	1cbb      	adds	r3, r7, #2
   2a730:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2a732:	687b      	ldr	r3, [r7, #4]
   2a734:	2b00      	cmp	r3, #0
   2a736:	d009      	beq.n	2a74c <validate+0x28>
   2a738:	687b      	ldr	r3, [r7, #4]
   2a73a:	781b      	ldrb	r3, [r3, #0]
   2a73c:	2b00      	cmp	r3, #0
   2a73e:	d005      	beq.n	2a74c <validate+0x28>
   2a740:	687b      	ldr	r3, [r7, #4]
   2a742:	88db      	ldrh	r3, [r3, #6]
   2a744:	1cba      	adds	r2, r7, #2
   2a746:	8812      	ldrh	r2, [r2, #0]
   2a748:	429a      	cmp	r2, r3
   2a74a:	d001      	beq.n	2a750 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2a74c:	2309      	movs	r3, #9
   2a74e:	e00c      	b.n	2a76a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2a750:	687b      	ldr	r3, [r7, #4]
   2a752:	785b      	ldrb	r3, [r3, #1]
   2a754:	0018      	movs	r0, r3
   2a756:	4b07      	ldr	r3, [pc, #28]	; (2a774 <validate+0x50>)
   2a758:	4798      	blx	r3
   2a75a:	0003      	movs	r3, r0
   2a75c:	001a      	movs	r2, r3
   2a75e:	2301      	movs	r3, #1
   2a760:	4013      	ands	r3, r2
   2a762:	d001      	beq.n	2a768 <validate+0x44>
		return FR_NOT_READY;
   2a764:	2303      	movs	r3, #3
   2a766:	e000      	b.n	2a76a <validate+0x46>

	return FR_OK;
   2a768:	2300      	movs	r3, #0
}
   2a76a:	0018      	movs	r0, r3
   2a76c:	46bd      	mov	sp, r7
   2a76e:	b002      	add	sp, #8
   2a770:	bd80      	pop	{r7, pc}
   2a772:	46c0      	nop			; (mov r8, r8)
   2a774:	00027f05 	.word	0x00027f05

0002a778 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2a778:	b580      	push	{r7, lr}
   2a77a:	b084      	sub	sp, #16
   2a77c:	af00      	add	r7, sp, #0
   2a77e:	0002      	movs	r2, r0
   2a780:	6039      	str	r1, [r7, #0]
   2a782:	1dfb      	adds	r3, r7, #7
   2a784:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2a786:	1dfb      	adds	r3, r7, #7
   2a788:	781b      	ldrb	r3, [r3, #0]
   2a78a:	2b07      	cmp	r3, #7
   2a78c:	d901      	bls.n	2a792 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2a78e:	230b      	movs	r3, #11
   2a790:	e018      	b.n	2a7c4 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2a792:	1dfb      	adds	r3, r7, #7
   2a794:	781a      	ldrb	r2, [r3, #0]
   2a796:	4b0d      	ldr	r3, [pc, #52]	; (2a7cc <f_mount+0x54>)
   2a798:	0092      	lsls	r2, r2, #2
   2a79a:	58d3      	ldr	r3, [r2, r3]
   2a79c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2a79e:	68fb      	ldr	r3, [r7, #12]
   2a7a0:	2b00      	cmp	r3, #0
   2a7a2:	d002      	beq.n	2a7aa <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2a7a4:	68fb      	ldr	r3, [r7, #12]
   2a7a6:	2200      	movs	r2, #0
   2a7a8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2a7aa:	683b      	ldr	r3, [r7, #0]
   2a7ac:	2b00      	cmp	r3, #0
   2a7ae:	d002      	beq.n	2a7b6 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2a7b0:	683b      	ldr	r3, [r7, #0]
   2a7b2:	2200      	movs	r2, #0
   2a7b4:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2a7b6:	1dfb      	adds	r3, r7, #7
   2a7b8:	781a      	ldrb	r2, [r3, #0]
   2a7ba:	4b04      	ldr	r3, [pc, #16]	; (2a7cc <f_mount+0x54>)
   2a7bc:	0092      	lsls	r2, r2, #2
   2a7be:	6839      	ldr	r1, [r7, #0]
   2a7c0:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2a7c2:	2300      	movs	r3, #0
}
   2a7c4:	0018      	movs	r0, r3
   2a7c6:	46bd      	mov	sp, r7
   2a7c8:	b004      	add	sp, #16
   2a7ca:	bd80      	pop	{r7, pc}
   2a7cc:	20003d74 	.word	0x20003d74

0002a7d0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2a7d0:	b590      	push	{r4, r7, lr}
   2a7d2:	4ce5      	ldr	r4, [pc, #916]	; (2ab68 <f_open+0x398>)
   2a7d4:	44a5      	add	sp, r4
   2a7d6:	af00      	add	r7, sp, #0
   2a7d8:	60f8      	str	r0, [r7, #12]
   2a7da:	60b9      	str	r1, [r7, #8]
   2a7dc:	4be3      	ldr	r3, [pc, #908]	; (2ab6c <f_open+0x39c>)
   2a7de:	2194      	movs	r1, #148	; 0x94
   2a7e0:	0089      	lsls	r1, r1, #2
   2a7e2:	468c      	mov	ip, r1
   2a7e4:	44bc      	add	ip, r7
   2a7e6:	4463      	add	r3, ip
   2a7e8:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2a7ea:	68fb      	ldr	r3, [r7, #12]
   2a7ec:	2200      	movs	r2, #0
   2a7ee:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2a7f0:	4bde      	ldr	r3, [pc, #888]	; (2ab6c <f_open+0x39c>)
   2a7f2:	2294      	movs	r2, #148	; 0x94
   2a7f4:	0092      	lsls	r2, r2, #2
   2a7f6:	4694      	mov	ip, r2
   2a7f8:	44bc      	add	ip, r7
   2a7fa:	4463      	add	r3, ip
   2a7fc:	4adb      	ldr	r2, [pc, #876]	; (2ab6c <f_open+0x39c>)
   2a7fe:	2194      	movs	r1, #148	; 0x94
   2a800:	0089      	lsls	r1, r1, #2
   2a802:	468c      	mov	ip, r1
   2a804:	44bc      	add	ip, r7
   2a806:	4462      	add	r2, ip
   2a808:	7812      	ldrb	r2, [r2, #0]
   2a80a:	211f      	movs	r1, #31
   2a80c:	400a      	ands	r2, r1
   2a80e:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2a810:	4bd6      	ldr	r3, [pc, #856]	; (2ab6c <f_open+0x39c>)
   2a812:	2294      	movs	r2, #148	; 0x94
   2a814:	0092      	lsls	r2, r2, #2
   2a816:	4694      	mov	ip, r2
   2a818:	44bc      	add	ip, r7
   2a81a:	4463      	add	r3, ip
   2a81c:	781b      	ldrb	r3, [r3, #0]
   2a81e:	2201      	movs	r2, #1
   2a820:	4393      	bics	r3, r2
   2a822:	b2da      	uxtb	r2, r3
   2a824:	4bd2      	ldr	r3, [pc, #840]	; (2ab70 <f_open+0x3a0>)
   2a826:	18fc      	adds	r4, r7, r3
   2a828:	2387      	movs	r3, #135	; 0x87
   2a82a:	009b      	lsls	r3, r3, #2
   2a82c:	18f9      	adds	r1, r7, r3
   2a82e:	2308      	movs	r3, #8
   2a830:	18fb      	adds	r3, r7, r3
   2a832:	0018      	movs	r0, r3
   2a834:	4bcf      	ldr	r3, [pc, #828]	; (2ab74 <f_open+0x3a4>)
   2a836:	4798      	blx	r3
   2a838:	0003      	movs	r3, r0
   2a83a:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2a83c:	2387      	movs	r3, #135	; 0x87
   2a83e:	009b      	lsls	r3, r3, #2
   2a840:	18fb      	adds	r3, r7, r3
   2a842:	2284      	movs	r2, #132	; 0x84
   2a844:	0092      	lsls	r2, r2, #2
   2a846:	18ba      	adds	r2, r7, r2
   2a848:	619a      	str	r2, [r3, #24]
   2a84a:	2387      	movs	r3, #135	; 0x87
   2a84c:	009b      	lsls	r3, r3, #2
   2a84e:	18fb      	adds	r3, r7, r3
   2a850:	2210      	movs	r2, #16
   2a852:	18ba      	adds	r2, r7, r2
   2a854:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2a856:	4bc6      	ldr	r3, [pc, #792]	; (2ab70 <f_open+0x3a0>)
   2a858:	18fb      	adds	r3, r7, r3
   2a85a:	781b      	ldrb	r3, [r3, #0]
   2a85c:	2b00      	cmp	r3, #0
   2a85e:	d10b      	bne.n	2a878 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2a860:	68ba      	ldr	r2, [r7, #8]
   2a862:	4bc3      	ldr	r3, [pc, #780]	; (2ab70 <f_open+0x3a0>)
   2a864:	18fc      	adds	r4, r7, r3
   2a866:	2387      	movs	r3, #135	; 0x87
   2a868:	009b      	lsls	r3, r3, #2
   2a86a:	18fb      	adds	r3, r7, r3
   2a86c:	0011      	movs	r1, r2
   2a86e:	0018      	movs	r0, r3
   2a870:	4bc1      	ldr	r3, [pc, #772]	; (2ab78 <f_open+0x3a8>)
   2a872:	4798      	blx	r3
   2a874:	0003      	movs	r3, r0
   2a876:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2a878:	2387      	movs	r3, #135	; 0x87
   2a87a:	009b      	lsls	r3, r3, #2
   2a87c:	18fb      	adds	r3, r7, r3
   2a87e:	695b      	ldr	r3, [r3, #20]
   2a880:	2292      	movs	r2, #146	; 0x92
   2a882:	0092      	lsls	r2, r2, #2
   2a884:	18ba      	adds	r2, r7, r2
   2a886:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2a888:	4bb9      	ldr	r3, [pc, #740]	; (2ab70 <f_open+0x3a0>)
   2a88a:	18fb      	adds	r3, r7, r3
   2a88c:	781b      	ldrb	r3, [r3, #0]
   2a88e:	2b00      	cmp	r3, #0
   2a890:	d109      	bne.n	2a8a6 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2a892:	2392      	movs	r3, #146	; 0x92
   2a894:	009b      	lsls	r3, r3, #2
   2a896:	18fb      	adds	r3, r7, r3
   2a898:	681b      	ldr	r3, [r3, #0]
   2a89a:	2b00      	cmp	r3, #0
   2a89c:	d103      	bne.n	2a8a6 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2a89e:	4bb4      	ldr	r3, [pc, #720]	; (2ab70 <f_open+0x3a0>)
   2a8a0:	18fb      	adds	r3, r7, r3
   2a8a2:	2206      	movs	r2, #6
   2a8a4:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2a8a6:	4bb1      	ldr	r3, [pc, #708]	; (2ab6c <f_open+0x39c>)
   2a8a8:	2294      	movs	r2, #148	; 0x94
   2a8aa:	0092      	lsls	r2, r2, #2
   2a8ac:	4694      	mov	ip, r2
   2a8ae:	44bc      	add	ip, r7
   2a8b0:	4463      	add	r3, ip
   2a8b2:	781b      	ldrb	r3, [r3, #0]
   2a8b4:	221c      	movs	r2, #28
   2a8b6:	4013      	ands	r3, r2
   2a8b8:	d100      	bne.n	2a8bc <f_open+0xec>
   2a8ba:	e141      	b.n	2ab40 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2a8bc:	4bac      	ldr	r3, [pc, #688]	; (2ab70 <f_open+0x3a0>)
   2a8be:	18fb      	adds	r3, r7, r3
   2a8c0:	781b      	ldrb	r3, [r3, #0]
   2a8c2:	2b00      	cmp	r3, #0
   2a8c4:	d027      	beq.n	2a916 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2a8c6:	4baa      	ldr	r3, [pc, #680]	; (2ab70 <f_open+0x3a0>)
   2a8c8:	18fb      	adds	r3, r7, r3
   2a8ca:	781b      	ldrb	r3, [r3, #0]
   2a8cc:	2b04      	cmp	r3, #4
   2a8ce:	d109      	bne.n	2a8e4 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2a8d0:	4ba7      	ldr	r3, [pc, #668]	; (2ab70 <f_open+0x3a0>)
   2a8d2:	18fc      	adds	r4, r7, r3
   2a8d4:	2387      	movs	r3, #135	; 0x87
   2a8d6:	009b      	lsls	r3, r3, #2
   2a8d8:	18fb      	adds	r3, r7, r3
   2a8da:	0018      	movs	r0, r3
   2a8dc:	4ba7      	ldr	r3, [pc, #668]	; (2ab7c <f_open+0x3ac>)
   2a8de:	4798      	blx	r3
   2a8e0:	0003      	movs	r3, r0
   2a8e2:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2a8e4:	4ba1      	ldr	r3, [pc, #644]	; (2ab6c <f_open+0x39c>)
   2a8e6:	2294      	movs	r2, #148	; 0x94
   2a8e8:	0092      	lsls	r2, r2, #2
   2a8ea:	4694      	mov	ip, r2
   2a8ec:	44bc      	add	ip, r7
   2a8ee:	4463      	add	r3, ip
   2a8f0:	4a9e      	ldr	r2, [pc, #632]	; (2ab6c <f_open+0x39c>)
   2a8f2:	2194      	movs	r1, #148	; 0x94
   2a8f4:	0089      	lsls	r1, r1, #2
   2a8f6:	468c      	mov	ip, r1
   2a8f8:	44bc      	add	ip, r7
   2a8fa:	4462      	add	r2, ip
   2a8fc:	7812      	ldrb	r2, [r2, #0]
   2a8fe:	2108      	movs	r1, #8
   2a900:	430a      	orrs	r2, r1
   2a902:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2a904:	2387      	movs	r3, #135	; 0x87
   2a906:	009b      	lsls	r3, r3, #2
   2a908:	18fb      	adds	r3, r7, r3
   2a90a:	695b      	ldr	r3, [r3, #20]
   2a90c:	2292      	movs	r2, #146	; 0x92
   2a90e:	0092      	lsls	r2, r2, #2
   2a910:	18ba      	adds	r2, r7, r2
   2a912:	6013      	str	r3, [r2, #0]
   2a914:	e01c      	b.n	2a950 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2a916:	2392      	movs	r3, #146	; 0x92
   2a918:	009b      	lsls	r3, r3, #2
   2a91a:	18fb      	adds	r3, r7, r3
   2a91c:	681b      	ldr	r3, [r3, #0]
   2a91e:	330b      	adds	r3, #11
   2a920:	781b      	ldrb	r3, [r3, #0]
   2a922:	001a      	movs	r2, r3
   2a924:	2311      	movs	r3, #17
   2a926:	4013      	ands	r3, r2
   2a928:	d004      	beq.n	2a934 <f_open+0x164>
				res = FR_DENIED;
   2a92a:	4b91      	ldr	r3, [pc, #580]	; (2ab70 <f_open+0x3a0>)
   2a92c:	18fb      	adds	r3, r7, r3
   2a92e:	2207      	movs	r2, #7
   2a930:	701a      	strb	r2, [r3, #0]
   2a932:	e00d      	b.n	2a950 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2a934:	4b8d      	ldr	r3, [pc, #564]	; (2ab6c <f_open+0x39c>)
   2a936:	2294      	movs	r2, #148	; 0x94
   2a938:	0092      	lsls	r2, r2, #2
   2a93a:	4694      	mov	ip, r2
   2a93c:	44bc      	add	ip, r7
   2a93e:	4463      	add	r3, ip
   2a940:	781b      	ldrb	r3, [r3, #0]
   2a942:	2204      	movs	r2, #4
   2a944:	4013      	ands	r3, r2
   2a946:	d003      	beq.n	2a950 <f_open+0x180>
					res = FR_EXIST;
   2a948:	4b89      	ldr	r3, [pc, #548]	; (2ab70 <f_open+0x3a0>)
   2a94a:	18fb      	adds	r3, r7, r3
   2a94c:	2208      	movs	r2, #8
   2a94e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2a950:	4b87      	ldr	r3, [pc, #540]	; (2ab70 <f_open+0x3a0>)
   2a952:	18fb      	adds	r3, r7, r3
   2a954:	781b      	ldrb	r3, [r3, #0]
   2a956:	2b00      	cmp	r3, #0
   2a958:	d000      	beq.n	2a95c <f_open+0x18c>
   2a95a:	e12f      	b.n	2abbc <f_open+0x3ec>
   2a95c:	4b83      	ldr	r3, [pc, #524]	; (2ab6c <f_open+0x39c>)
   2a95e:	2294      	movs	r2, #148	; 0x94
   2a960:	0092      	lsls	r2, r2, #2
   2a962:	4694      	mov	ip, r2
   2a964:	44bc      	add	ip, r7
   2a966:	4463      	add	r3, ip
   2a968:	781b      	ldrb	r3, [r3, #0]
   2a96a:	2208      	movs	r2, #8
   2a96c:	4013      	ands	r3, r2
   2a96e:	d100      	bne.n	2a972 <f_open+0x1a2>
   2a970:	e124      	b.n	2abbc <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2a972:	4b83      	ldr	r3, [pc, #524]	; (2ab80 <f_open+0x3b0>)
   2a974:	4798      	blx	r3
   2a976:	0003      	movs	r3, r0
   2a978:	2291      	movs	r2, #145	; 0x91
   2a97a:	0092      	lsls	r2, r2, #2
   2a97c:	18ba      	adds	r2, r7, r2
   2a97e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2a980:	2392      	movs	r3, #146	; 0x92
   2a982:	009b      	lsls	r3, r3, #2
   2a984:	18fb      	adds	r3, r7, r3
   2a986:	681b      	ldr	r3, [r3, #0]
   2a988:	330e      	adds	r3, #14
   2a98a:	2291      	movs	r2, #145	; 0x91
   2a98c:	0092      	lsls	r2, r2, #2
   2a98e:	18ba      	adds	r2, r7, r2
   2a990:	6812      	ldr	r2, [r2, #0]
   2a992:	b2d2      	uxtb	r2, r2
   2a994:	701a      	strb	r2, [r3, #0]
   2a996:	2392      	movs	r3, #146	; 0x92
   2a998:	009b      	lsls	r3, r3, #2
   2a99a:	18fb      	adds	r3, r7, r3
   2a99c:	681b      	ldr	r3, [r3, #0]
   2a99e:	330f      	adds	r3, #15
   2a9a0:	2291      	movs	r2, #145	; 0x91
   2a9a2:	0092      	lsls	r2, r2, #2
   2a9a4:	18ba      	adds	r2, r7, r2
   2a9a6:	6812      	ldr	r2, [r2, #0]
   2a9a8:	b292      	uxth	r2, r2
   2a9aa:	0a12      	lsrs	r2, r2, #8
   2a9ac:	b292      	uxth	r2, r2
   2a9ae:	b2d2      	uxtb	r2, r2
   2a9b0:	701a      	strb	r2, [r3, #0]
   2a9b2:	2392      	movs	r3, #146	; 0x92
   2a9b4:	009b      	lsls	r3, r3, #2
   2a9b6:	18fb      	adds	r3, r7, r3
   2a9b8:	681b      	ldr	r3, [r3, #0]
   2a9ba:	3310      	adds	r3, #16
   2a9bc:	2291      	movs	r2, #145	; 0x91
   2a9be:	0092      	lsls	r2, r2, #2
   2a9c0:	18ba      	adds	r2, r7, r2
   2a9c2:	6812      	ldr	r2, [r2, #0]
   2a9c4:	0c12      	lsrs	r2, r2, #16
   2a9c6:	b2d2      	uxtb	r2, r2
   2a9c8:	701a      	strb	r2, [r3, #0]
   2a9ca:	2392      	movs	r3, #146	; 0x92
   2a9cc:	009b      	lsls	r3, r3, #2
   2a9ce:	18fb      	adds	r3, r7, r3
   2a9d0:	681b      	ldr	r3, [r3, #0]
   2a9d2:	3311      	adds	r3, #17
   2a9d4:	2291      	movs	r2, #145	; 0x91
   2a9d6:	0092      	lsls	r2, r2, #2
   2a9d8:	18ba      	adds	r2, r7, r2
   2a9da:	6812      	ldr	r2, [r2, #0]
   2a9dc:	0e12      	lsrs	r2, r2, #24
   2a9de:	b2d2      	uxtb	r2, r2
   2a9e0:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2a9e2:	2392      	movs	r3, #146	; 0x92
   2a9e4:	009b      	lsls	r3, r3, #2
   2a9e6:	18fb      	adds	r3, r7, r3
   2a9e8:	681b      	ldr	r3, [r3, #0]
   2a9ea:	330b      	adds	r3, #11
   2a9ec:	2200      	movs	r2, #0
   2a9ee:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2a9f0:	2392      	movs	r3, #146	; 0x92
   2a9f2:	009b      	lsls	r3, r3, #2
   2a9f4:	18fb      	adds	r3, r7, r3
   2a9f6:	681b      	ldr	r3, [r3, #0]
   2a9f8:	331c      	adds	r3, #28
   2a9fa:	2200      	movs	r2, #0
   2a9fc:	701a      	strb	r2, [r3, #0]
   2a9fe:	2392      	movs	r3, #146	; 0x92
   2aa00:	009b      	lsls	r3, r3, #2
   2aa02:	18fb      	adds	r3, r7, r3
   2aa04:	681b      	ldr	r3, [r3, #0]
   2aa06:	331d      	adds	r3, #29
   2aa08:	2200      	movs	r2, #0
   2aa0a:	701a      	strb	r2, [r3, #0]
   2aa0c:	2392      	movs	r3, #146	; 0x92
   2aa0e:	009b      	lsls	r3, r3, #2
   2aa10:	18fb      	adds	r3, r7, r3
   2aa12:	681b      	ldr	r3, [r3, #0]
   2aa14:	331e      	adds	r3, #30
   2aa16:	2200      	movs	r2, #0
   2aa18:	701a      	strb	r2, [r3, #0]
   2aa1a:	2392      	movs	r3, #146	; 0x92
   2aa1c:	009b      	lsls	r3, r3, #2
   2aa1e:	18fb      	adds	r3, r7, r3
   2aa20:	681b      	ldr	r3, [r3, #0]
   2aa22:	331f      	adds	r3, #31
   2aa24:	2200      	movs	r2, #0
   2aa26:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2aa28:	2392      	movs	r3, #146	; 0x92
   2aa2a:	009b      	lsls	r3, r3, #2
   2aa2c:	18fb      	adds	r3, r7, r3
   2aa2e:	681b      	ldr	r3, [r3, #0]
   2aa30:	3315      	adds	r3, #21
   2aa32:	781b      	ldrb	r3, [r3, #0]
   2aa34:	021b      	lsls	r3, r3, #8
   2aa36:	b21a      	sxth	r2, r3
   2aa38:	2392      	movs	r3, #146	; 0x92
   2aa3a:	009b      	lsls	r3, r3, #2
   2aa3c:	18fb      	adds	r3, r7, r3
   2aa3e:	681b      	ldr	r3, [r3, #0]
   2aa40:	3314      	adds	r3, #20
   2aa42:	781b      	ldrb	r3, [r3, #0]
   2aa44:	b21b      	sxth	r3, r3
   2aa46:	4313      	orrs	r3, r2
   2aa48:	b21b      	sxth	r3, r3
   2aa4a:	b29b      	uxth	r3, r3
   2aa4c:	041b      	lsls	r3, r3, #16
   2aa4e:	2292      	movs	r2, #146	; 0x92
   2aa50:	0092      	lsls	r2, r2, #2
   2aa52:	18ba      	adds	r2, r7, r2
   2aa54:	6812      	ldr	r2, [r2, #0]
   2aa56:	321b      	adds	r2, #27
   2aa58:	7812      	ldrb	r2, [r2, #0]
   2aa5a:	0212      	lsls	r2, r2, #8
   2aa5c:	b211      	sxth	r1, r2
   2aa5e:	2292      	movs	r2, #146	; 0x92
   2aa60:	0092      	lsls	r2, r2, #2
   2aa62:	18ba      	adds	r2, r7, r2
   2aa64:	6812      	ldr	r2, [r2, #0]
   2aa66:	321a      	adds	r2, #26
   2aa68:	7812      	ldrb	r2, [r2, #0]
   2aa6a:	b212      	sxth	r2, r2
   2aa6c:	430a      	orrs	r2, r1
   2aa6e:	b212      	sxth	r2, r2
   2aa70:	b292      	uxth	r2, r2
   2aa72:	4313      	orrs	r3, r2
   2aa74:	2290      	movs	r2, #144	; 0x90
   2aa76:	0092      	lsls	r2, r2, #2
   2aa78:	18ba      	adds	r2, r7, r2
   2aa7a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2aa7c:	2392      	movs	r3, #146	; 0x92
   2aa7e:	009b      	lsls	r3, r3, #2
   2aa80:	18fb      	adds	r3, r7, r3
   2aa82:	681b      	ldr	r3, [r3, #0]
   2aa84:	331a      	adds	r3, #26
   2aa86:	2200      	movs	r2, #0
   2aa88:	701a      	strb	r2, [r3, #0]
   2aa8a:	2392      	movs	r3, #146	; 0x92
   2aa8c:	009b      	lsls	r3, r3, #2
   2aa8e:	18fb      	adds	r3, r7, r3
   2aa90:	681b      	ldr	r3, [r3, #0]
   2aa92:	331b      	adds	r3, #27
   2aa94:	2200      	movs	r2, #0
   2aa96:	701a      	strb	r2, [r3, #0]
   2aa98:	2392      	movs	r3, #146	; 0x92
   2aa9a:	009b      	lsls	r3, r3, #2
   2aa9c:	18fb      	adds	r3, r7, r3
   2aa9e:	681b      	ldr	r3, [r3, #0]
   2aaa0:	3314      	adds	r3, #20
   2aaa2:	2200      	movs	r2, #0
   2aaa4:	701a      	strb	r2, [r3, #0]
   2aaa6:	2392      	movs	r3, #146	; 0x92
   2aaa8:	009b      	lsls	r3, r3, #2
   2aaaa:	18fb      	adds	r3, r7, r3
   2aaac:	681b      	ldr	r3, [r3, #0]
   2aaae:	3315      	adds	r3, #21
   2aab0:	2200      	movs	r2, #0
   2aab2:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2aab4:	2387      	movs	r3, #135	; 0x87
   2aab6:	009b      	lsls	r3, r3, #2
   2aab8:	18fb      	adds	r3, r7, r3
   2aaba:	681b      	ldr	r3, [r3, #0]
   2aabc:	2201      	movs	r2, #1
   2aabe:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2aac0:	2390      	movs	r3, #144	; 0x90
   2aac2:	009b      	lsls	r3, r3, #2
   2aac4:	18fb      	adds	r3, r7, r3
   2aac6:	681b      	ldr	r3, [r3, #0]
   2aac8:	2b00      	cmp	r3, #0
   2aaca:	d100      	bne.n	2aace <f_open+0x2fe>
   2aacc:	e076      	b.n	2abbc <f_open+0x3ec>
				dw = dj.fs->winsect;
   2aace:	2387      	movs	r3, #135	; 0x87
   2aad0:	009b      	lsls	r3, r3, #2
   2aad2:	18fb      	adds	r3, r7, r3
   2aad4:	681b      	ldr	r3, [r3, #0]
   2aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2aad8:	2291      	movs	r2, #145	; 0x91
   2aada:	0092      	lsls	r2, r2, #2
   2aadc:	18ba      	adds	r2, r7, r2
   2aade:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2aae0:	2387      	movs	r3, #135	; 0x87
   2aae2:	009b      	lsls	r3, r3, #2
   2aae4:	18fb      	adds	r3, r7, r3
   2aae6:	681b      	ldr	r3, [r3, #0]
   2aae8:	4a21      	ldr	r2, [pc, #132]	; (2ab70 <f_open+0x3a0>)
   2aaea:	18bc      	adds	r4, r7, r2
   2aaec:	2290      	movs	r2, #144	; 0x90
   2aaee:	0092      	lsls	r2, r2, #2
   2aaf0:	18ba      	adds	r2, r7, r2
   2aaf2:	6812      	ldr	r2, [r2, #0]
   2aaf4:	0011      	movs	r1, r2
   2aaf6:	0018      	movs	r0, r3
   2aaf8:	4b22      	ldr	r3, [pc, #136]	; (2ab84 <f_open+0x3b4>)
   2aafa:	4798      	blx	r3
   2aafc:	0003      	movs	r3, r0
   2aafe:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2ab00:	4b1b      	ldr	r3, [pc, #108]	; (2ab70 <f_open+0x3a0>)
   2ab02:	18fb      	adds	r3, r7, r3
   2ab04:	781b      	ldrb	r3, [r3, #0]
   2ab06:	2b00      	cmp	r3, #0
   2ab08:	d158      	bne.n	2abbc <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2ab0a:	2387      	movs	r3, #135	; 0x87
   2ab0c:	009b      	lsls	r3, r3, #2
   2ab0e:	18fb      	adds	r3, r7, r3
   2ab10:	681b      	ldr	r3, [r3, #0]
   2ab12:	2290      	movs	r2, #144	; 0x90
   2ab14:	0092      	lsls	r2, r2, #2
   2ab16:	18ba      	adds	r2, r7, r2
   2ab18:	6812      	ldr	r2, [r2, #0]
   2ab1a:	3a01      	subs	r2, #1
   2ab1c:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2ab1e:	2387      	movs	r3, #135	; 0x87
   2ab20:	009b      	lsls	r3, r3, #2
   2ab22:	18fb      	adds	r3, r7, r3
   2ab24:	681b      	ldr	r3, [r3, #0]
   2ab26:	4a12      	ldr	r2, [pc, #72]	; (2ab70 <f_open+0x3a0>)
   2ab28:	18bc      	adds	r4, r7, r2
   2ab2a:	2291      	movs	r2, #145	; 0x91
   2ab2c:	0092      	lsls	r2, r2, #2
   2ab2e:	18ba      	adds	r2, r7, r2
   2ab30:	6812      	ldr	r2, [r2, #0]
   2ab32:	0011      	movs	r1, r2
   2ab34:	0018      	movs	r0, r3
   2ab36:	4b14      	ldr	r3, [pc, #80]	; (2ab88 <f_open+0x3b8>)
   2ab38:	4798      	blx	r3
   2ab3a:	0003      	movs	r3, r0
   2ab3c:	7023      	strb	r3, [r4, #0]
   2ab3e:	e03d      	b.n	2abbc <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2ab40:	4b0b      	ldr	r3, [pc, #44]	; (2ab70 <f_open+0x3a0>)
   2ab42:	18fb      	adds	r3, r7, r3
   2ab44:	781b      	ldrb	r3, [r3, #0]
   2ab46:	2b00      	cmp	r3, #0
   2ab48:	d138      	bne.n	2abbc <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2ab4a:	2392      	movs	r3, #146	; 0x92
   2ab4c:	009b      	lsls	r3, r3, #2
   2ab4e:	18fb      	adds	r3, r7, r3
   2ab50:	681b      	ldr	r3, [r3, #0]
   2ab52:	330b      	adds	r3, #11
   2ab54:	781b      	ldrb	r3, [r3, #0]
   2ab56:	001a      	movs	r2, r3
   2ab58:	2310      	movs	r3, #16
   2ab5a:	4013      	ands	r3, r2
   2ab5c:	d016      	beq.n	2ab8c <f_open+0x3bc>
				res = FR_NO_FILE;
   2ab5e:	4b04      	ldr	r3, [pc, #16]	; (2ab70 <f_open+0x3a0>)
   2ab60:	18fb      	adds	r3, r7, r3
   2ab62:	2204      	movs	r2, #4
   2ab64:	701a      	strb	r2, [r3, #0]
   2ab66:	e029      	b.n	2abbc <f_open+0x3ec>
   2ab68:	fffffdac 	.word	0xfffffdac
   2ab6c:	fffffdb7 	.word	0xfffffdb7
   2ab70:	0000024f 	.word	0x0000024f
   2ab74:	0002a129 	.word	0x0002a129
   2ab78:	00029f1d 	.word	0x00029f1d
   2ab7c:	00029695 	.word	0x00029695
   2ab80:	000281e5 	.word	0x000281e5
   2ab84:	00028969 	.word	0x00028969
   2ab88:	00028329 	.word	0x00028329
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2ab8c:	4b5a      	ldr	r3, [pc, #360]	; (2acf8 <f_open+0x528>)
   2ab8e:	2294      	movs	r2, #148	; 0x94
   2ab90:	0092      	lsls	r2, r2, #2
   2ab92:	4694      	mov	ip, r2
   2ab94:	44bc      	add	ip, r7
   2ab96:	4463      	add	r3, ip
   2ab98:	781b      	ldrb	r3, [r3, #0]
   2ab9a:	2202      	movs	r2, #2
   2ab9c:	4013      	ands	r3, r2
   2ab9e:	d00d      	beq.n	2abbc <f_open+0x3ec>
   2aba0:	2392      	movs	r3, #146	; 0x92
   2aba2:	009b      	lsls	r3, r3, #2
   2aba4:	18fb      	adds	r3, r7, r3
   2aba6:	681b      	ldr	r3, [r3, #0]
   2aba8:	330b      	adds	r3, #11
   2abaa:	781b      	ldrb	r3, [r3, #0]
   2abac:	001a      	movs	r2, r3
   2abae:	2301      	movs	r3, #1
   2abb0:	4013      	ands	r3, r2
   2abb2:	d003      	beq.n	2abbc <f_open+0x3ec>
					res = FR_DENIED;
   2abb4:	4b51      	ldr	r3, [pc, #324]	; (2acfc <f_open+0x52c>)
   2abb6:	18fb      	adds	r3, r7, r3
   2abb8:	2207      	movs	r2, #7
   2abba:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2abbc:	4b4f      	ldr	r3, [pc, #316]	; (2acfc <f_open+0x52c>)
   2abbe:	18fb      	adds	r3, r7, r3
   2abc0:	781b      	ldrb	r3, [r3, #0]
   2abc2:	2b00      	cmp	r3, #0
   2abc4:	d126      	bne.n	2ac14 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2abc6:	4b4c      	ldr	r3, [pc, #304]	; (2acf8 <f_open+0x528>)
   2abc8:	2294      	movs	r2, #148	; 0x94
   2abca:	0092      	lsls	r2, r2, #2
   2abcc:	4694      	mov	ip, r2
   2abce:	44bc      	add	ip, r7
   2abd0:	4463      	add	r3, ip
   2abd2:	781b      	ldrb	r3, [r3, #0]
   2abd4:	2208      	movs	r2, #8
   2abd6:	4013      	ands	r3, r2
   2abd8:	d00f      	beq.n	2abfa <f_open+0x42a>
			mode |= FA__WRITTEN;
   2abda:	4b47      	ldr	r3, [pc, #284]	; (2acf8 <f_open+0x528>)
   2abdc:	2294      	movs	r2, #148	; 0x94
   2abde:	0092      	lsls	r2, r2, #2
   2abe0:	4694      	mov	ip, r2
   2abe2:	44bc      	add	ip, r7
   2abe4:	4463      	add	r3, ip
   2abe6:	4a44      	ldr	r2, [pc, #272]	; (2acf8 <f_open+0x528>)
   2abe8:	2194      	movs	r1, #148	; 0x94
   2abea:	0089      	lsls	r1, r1, #2
   2abec:	468c      	mov	ip, r1
   2abee:	44bc      	add	ip, r7
   2abf0:	4462      	add	r2, ip
   2abf2:	7812      	ldrb	r2, [r2, #0]
   2abf4:	2120      	movs	r1, #32
   2abf6:	430a      	orrs	r2, r1
   2abf8:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2abfa:	2387      	movs	r3, #135	; 0x87
   2abfc:	009b      	lsls	r3, r3, #2
   2abfe:	18fb      	adds	r3, r7, r3
   2ac00:	681b      	ldr	r3, [r3, #0]
   2ac02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ac04:	68fb      	ldr	r3, [r7, #12]
   2ac06:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2ac08:	68fb      	ldr	r3, [r7, #12]
   2ac0a:	2292      	movs	r2, #146	; 0x92
   2ac0c:	0092      	lsls	r2, r2, #2
   2ac0e:	18ba      	adds	r2, r7, r2
   2ac10:	6812      	ldr	r2, [r2, #0]
   2ac12:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2ac14:	4b39      	ldr	r3, [pc, #228]	; (2acfc <f_open+0x52c>)
   2ac16:	18fb      	adds	r3, r7, r3
   2ac18:	781b      	ldrb	r3, [r3, #0]
   2ac1a:	2b00      	cmp	r3, #0
   2ac1c:	d163      	bne.n	2ace6 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2ac1e:	68fb      	ldr	r3, [r7, #12]
   2ac20:	4a35      	ldr	r2, [pc, #212]	; (2acf8 <f_open+0x528>)
   2ac22:	2194      	movs	r1, #148	; 0x94
   2ac24:	0089      	lsls	r1, r1, #2
   2ac26:	468c      	mov	ip, r1
   2ac28:	44bc      	add	ip, r7
   2ac2a:	4462      	add	r2, ip
   2ac2c:	7812      	ldrb	r2, [r2, #0]
   2ac2e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2ac30:	2392      	movs	r3, #146	; 0x92
   2ac32:	009b      	lsls	r3, r3, #2
   2ac34:	18fb      	adds	r3, r7, r3
   2ac36:	681b      	ldr	r3, [r3, #0]
   2ac38:	3315      	adds	r3, #21
   2ac3a:	781b      	ldrb	r3, [r3, #0]
   2ac3c:	021b      	lsls	r3, r3, #8
   2ac3e:	b21a      	sxth	r2, r3
   2ac40:	2392      	movs	r3, #146	; 0x92
   2ac42:	009b      	lsls	r3, r3, #2
   2ac44:	18fb      	adds	r3, r7, r3
   2ac46:	681b      	ldr	r3, [r3, #0]
   2ac48:	3314      	adds	r3, #20
   2ac4a:	781b      	ldrb	r3, [r3, #0]
   2ac4c:	b21b      	sxth	r3, r3
   2ac4e:	4313      	orrs	r3, r2
   2ac50:	b21b      	sxth	r3, r3
   2ac52:	b29b      	uxth	r3, r3
   2ac54:	041b      	lsls	r3, r3, #16
   2ac56:	2292      	movs	r2, #146	; 0x92
   2ac58:	0092      	lsls	r2, r2, #2
   2ac5a:	18ba      	adds	r2, r7, r2
   2ac5c:	6812      	ldr	r2, [r2, #0]
   2ac5e:	321b      	adds	r2, #27
   2ac60:	7812      	ldrb	r2, [r2, #0]
   2ac62:	0212      	lsls	r2, r2, #8
   2ac64:	b211      	sxth	r1, r2
   2ac66:	2292      	movs	r2, #146	; 0x92
   2ac68:	0092      	lsls	r2, r2, #2
   2ac6a:	18ba      	adds	r2, r7, r2
   2ac6c:	6812      	ldr	r2, [r2, #0]
   2ac6e:	321a      	adds	r2, #26
   2ac70:	7812      	ldrb	r2, [r2, #0]
   2ac72:	b212      	sxth	r2, r2
   2ac74:	430a      	orrs	r2, r1
   2ac76:	b212      	sxth	r2, r2
   2ac78:	b292      	uxth	r2, r2
   2ac7a:	431a      	orrs	r2, r3
   2ac7c:	68fb      	ldr	r3, [r7, #12]
   2ac7e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2ac80:	2392      	movs	r3, #146	; 0x92
   2ac82:	009b      	lsls	r3, r3, #2
   2ac84:	18fb      	adds	r3, r7, r3
   2ac86:	681b      	ldr	r3, [r3, #0]
   2ac88:	331f      	adds	r3, #31
   2ac8a:	781b      	ldrb	r3, [r3, #0]
   2ac8c:	061a      	lsls	r2, r3, #24
   2ac8e:	2392      	movs	r3, #146	; 0x92
   2ac90:	009b      	lsls	r3, r3, #2
   2ac92:	18fb      	adds	r3, r7, r3
   2ac94:	681b      	ldr	r3, [r3, #0]
   2ac96:	331e      	adds	r3, #30
   2ac98:	781b      	ldrb	r3, [r3, #0]
   2ac9a:	041b      	lsls	r3, r3, #16
   2ac9c:	4313      	orrs	r3, r2
   2ac9e:	2292      	movs	r2, #146	; 0x92
   2aca0:	0092      	lsls	r2, r2, #2
   2aca2:	18ba      	adds	r2, r7, r2
   2aca4:	6812      	ldr	r2, [r2, #0]
   2aca6:	321d      	adds	r2, #29
   2aca8:	7812      	ldrb	r2, [r2, #0]
   2acaa:	0212      	lsls	r2, r2, #8
   2acac:	4313      	orrs	r3, r2
   2acae:	2292      	movs	r2, #146	; 0x92
   2acb0:	0092      	lsls	r2, r2, #2
   2acb2:	18ba      	adds	r2, r7, r2
   2acb4:	6812      	ldr	r2, [r2, #0]
   2acb6:	321c      	adds	r2, #28
   2acb8:	7812      	ldrb	r2, [r2, #0]
   2acba:	431a      	orrs	r2, r3
   2acbc:	68fb      	ldr	r3, [r7, #12]
   2acbe:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2acc0:	68fb      	ldr	r3, [r7, #12]
   2acc2:	2200      	movs	r2, #0
   2acc4:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2acc6:	68fb      	ldr	r3, [r7, #12]
   2acc8:	2200      	movs	r2, #0
   2acca:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2accc:	2387      	movs	r3, #135	; 0x87
   2acce:	009b      	lsls	r3, r3, #2
   2acd0:	18fb      	adds	r3, r7, r3
   2acd2:	681a      	ldr	r2, [r3, #0]
   2acd4:	68fb      	ldr	r3, [r7, #12]
   2acd6:	601a      	str	r2, [r3, #0]
   2acd8:	2387      	movs	r3, #135	; 0x87
   2acda:	009b      	lsls	r3, r3, #2
   2acdc:	18fb      	adds	r3, r7, r3
   2acde:	681b      	ldr	r3, [r3, #0]
   2ace0:	88da      	ldrh	r2, [r3, #6]
   2ace2:	68fb      	ldr	r3, [r7, #12]
   2ace4:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2ace6:	4b05      	ldr	r3, [pc, #20]	; (2acfc <f_open+0x52c>)
   2ace8:	18fb      	adds	r3, r7, r3
   2acea:	781b      	ldrb	r3, [r3, #0]
}
   2acec:	0018      	movs	r0, r3
   2acee:	46bd      	mov	sp, r7
   2acf0:	2395      	movs	r3, #149	; 0x95
   2acf2:	009b      	lsls	r3, r3, #2
   2acf4:	449d      	add	sp, r3
   2acf6:	bd90      	pop	{r4, r7, pc}
   2acf8:	fffffdb7 	.word	0xfffffdb7
   2acfc:	0000024f 	.word	0x0000024f

0002ad00 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   2ad00:	b590      	push	{r4, r7, lr}
   2ad02:	b08d      	sub	sp, #52	; 0x34
   2ad04:	af00      	add	r7, sp, #0
   2ad06:	60f8      	str	r0, [r7, #12]
   2ad08:	60b9      	str	r1, [r7, #8]
   2ad0a:	607a      	str	r2, [r7, #4]
   2ad0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
   2ad0e:	68bb      	ldr	r3, [r7, #8]
   2ad10:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
   2ad12:	683b      	ldr	r3, [r7, #0]
   2ad14:	2200      	movs	r2, #0
   2ad16:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
   2ad18:	68fb      	ldr	r3, [r7, #12]
   2ad1a:	681a      	ldr	r2, [r3, #0]
   2ad1c:	68fb      	ldr	r3, [r7, #12]
   2ad1e:	889b      	ldrh	r3, [r3, #4]
   2ad20:	211f      	movs	r1, #31
   2ad22:	187c      	adds	r4, r7, r1
   2ad24:	0019      	movs	r1, r3
   2ad26:	0010      	movs	r0, r2
   2ad28:	4b96      	ldr	r3, [pc, #600]	; (2af84 <f_read+0x284>)
   2ad2a:	4798      	blx	r3
   2ad2c:	0003      	movs	r3, r0
   2ad2e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2ad30:	231f      	movs	r3, #31
   2ad32:	18fb      	adds	r3, r7, r3
   2ad34:	781b      	ldrb	r3, [r3, #0]
   2ad36:	2b00      	cmp	r3, #0
   2ad38:	d003      	beq.n	2ad42 <f_read+0x42>
   2ad3a:	231f      	movs	r3, #31
   2ad3c:	18fb      	adds	r3, r7, r3
   2ad3e:	781b      	ldrb	r3, [r3, #0]
   2ad40:	e11b      	b.n	2af7a <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
   2ad42:	68fb      	ldr	r3, [r7, #12]
   2ad44:	799b      	ldrb	r3, [r3, #6]
   2ad46:	b25b      	sxtb	r3, r3
   2ad48:	2b00      	cmp	r3, #0
   2ad4a:	da01      	bge.n	2ad50 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2ad4c:	2302      	movs	r3, #2
   2ad4e:	e114      	b.n	2af7a <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   2ad50:	68fb      	ldr	r3, [r7, #12]
   2ad52:	799b      	ldrb	r3, [r3, #6]
   2ad54:	001a      	movs	r2, r3
   2ad56:	2301      	movs	r3, #1
   2ad58:	4013      	ands	r3, r2
   2ad5a:	d101      	bne.n	2ad60 <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2ad5c:	2307      	movs	r3, #7
   2ad5e:	e10c      	b.n	2af7a <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
   2ad60:	68fb      	ldr	r3, [r7, #12]
   2ad62:	68da      	ldr	r2, [r3, #12]
   2ad64:	68fb      	ldr	r3, [r7, #12]
   2ad66:	689b      	ldr	r3, [r3, #8]
   2ad68:	1ad3      	subs	r3, r2, r3
   2ad6a:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   2ad6c:	687a      	ldr	r2, [r7, #4]
   2ad6e:	69bb      	ldr	r3, [r7, #24]
   2ad70:	429a      	cmp	r2, r3
   2ad72:	d800      	bhi.n	2ad76 <f_read+0x76>
   2ad74:	e0fc      	b.n	2af70 <f_read+0x270>
   2ad76:	69bb      	ldr	r3, [r7, #24]
   2ad78:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
   2ad7a:	e0f9      	b.n	2af70 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   2ad7c:	68fb      	ldr	r3, [r7, #12]
   2ad7e:	689b      	ldr	r3, [r3, #8]
   2ad80:	05db      	lsls	r3, r3, #23
   2ad82:	0ddb      	lsrs	r3, r3, #23
   2ad84:	d000      	beq.n	2ad88 <f_read+0x88>
   2ad86:	e0b0      	b.n	2aeea <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2ad88:	68fb      	ldr	r3, [r7, #12]
   2ad8a:	689b      	ldr	r3, [r3, #8]
   2ad8c:	0a5b      	lsrs	r3, r3, #9
   2ad8e:	b2da      	uxtb	r2, r3
   2ad90:	68fb      	ldr	r3, [r7, #12]
   2ad92:	681b      	ldr	r3, [r3, #0]
   2ad94:	789b      	ldrb	r3, [r3, #2]
   2ad96:	3b01      	subs	r3, #1
   2ad98:	b2d9      	uxtb	r1, r3
   2ad9a:	2317      	movs	r3, #23
   2ad9c:	18fb      	adds	r3, r7, r3
   2ad9e:	400a      	ands	r2, r1
   2ada0:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
   2ada2:	2317      	movs	r3, #23
   2ada4:	18fb      	adds	r3, r7, r3
   2ada6:	781b      	ldrb	r3, [r3, #0]
   2ada8:	2b00      	cmp	r3, #0
   2adaa:	d12e      	bne.n	2ae0a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
   2adac:	68fb      	ldr	r3, [r7, #12]
   2adae:	689b      	ldr	r3, [r3, #8]
   2adb0:	2b00      	cmp	r3, #0
   2adb2:	d103      	bne.n	2adbc <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
   2adb4:	68fb      	ldr	r3, [r7, #12]
   2adb6:	691b      	ldr	r3, [r3, #16]
   2adb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2adba:	e009      	b.n	2add0 <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   2adbc:	68fb      	ldr	r3, [r7, #12]
   2adbe:	681a      	ldr	r2, [r3, #0]
   2adc0:	68fb      	ldr	r3, [r7, #12]
   2adc2:	695b      	ldr	r3, [r3, #20]
   2adc4:	0019      	movs	r1, r3
   2adc6:	0010      	movs	r0, r2
   2adc8:	4b6f      	ldr	r3, [pc, #444]	; (2af88 <f_read+0x288>)
   2adca:	4798      	blx	r3
   2adcc:	0003      	movs	r3, r0
   2adce:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   2add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2add2:	2b01      	cmp	r3, #1
   2add4:	d809      	bhi.n	2adea <f_read+0xea>
   2add6:	68fb      	ldr	r3, [r7, #12]
   2add8:	799b      	ldrb	r3, [r3, #6]
   2adda:	2280      	movs	r2, #128	; 0x80
   2addc:	4252      	negs	r2, r2
   2adde:	4313      	orrs	r3, r2
   2ade0:	b2da      	uxtb	r2, r3
   2ade2:	68fb      	ldr	r3, [r7, #12]
   2ade4:	719a      	strb	r2, [r3, #6]
   2ade6:	2302      	movs	r3, #2
   2ade8:	e0c7      	b.n	2af7a <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2adec:	3301      	adds	r3, #1
   2adee:	d109      	bne.n	2ae04 <f_read+0x104>
   2adf0:	68fb      	ldr	r3, [r7, #12]
   2adf2:	799b      	ldrb	r3, [r3, #6]
   2adf4:	2280      	movs	r2, #128	; 0x80
   2adf6:	4252      	negs	r2, r2
   2adf8:	4313      	orrs	r3, r2
   2adfa:	b2da      	uxtb	r2, r3
   2adfc:	68fb      	ldr	r3, [r7, #12]
   2adfe:	719a      	strb	r2, [r3, #6]
   2ae00:	2301      	movs	r3, #1
   2ae02:	e0ba      	b.n	2af7a <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
   2ae04:	68fb      	ldr	r3, [r7, #12]
   2ae06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ae08:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2ae0a:	68fb      	ldr	r3, [r7, #12]
   2ae0c:	681a      	ldr	r2, [r3, #0]
   2ae0e:	68fb      	ldr	r3, [r7, #12]
   2ae10:	695b      	ldr	r3, [r3, #20]
   2ae12:	0019      	movs	r1, r3
   2ae14:	0010      	movs	r0, r2
   2ae16:	4b5d      	ldr	r3, [pc, #372]	; (2af8c <f_read+0x28c>)
   2ae18:	4798      	blx	r3
   2ae1a:	0003      	movs	r3, r0
   2ae1c:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2ae1e:	693b      	ldr	r3, [r7, #16]
   2ae20:	2b00      	cmp	r3, #0
   2ae22:	d109      	bne.n	2ae38 <f_read+0x138>
   2ae24:	68fb      	ldr	r3, [r7, #12]
   2ae26:	799b      	ldrb	r3, [r3, #6]
   2ae28:	2280      	movs	r2, #128	; 0x80
   2ae2a:	4252      	negs	r2, r2
   2ae2c:	4313      	orrs	r3, r2
   2ae2e:	b2da      	uxtb	r2, r3
   2ae30:	68fb      	ldr	r3, [r7, #12]
   2ae32:	719a      	strb	r2, [r3, #6]
   2ae34:	2302      	movs	r3, #2
   2ae36:	e0a0      	b.n	2af7a <f_read+0x27a>
			sect += csect;
   2ae38:	2317      	movs	r3, #23
   2ae3a:	18fb      	adds	r3, r7, r3
   2ae3c:	781b      	ldrb	r3, [r3, #0]
   2ae3e:	693a      	ldr	r2, [r7, #16]
   2ae40:	18d3      	adds	r3, r2, r3
   2ae42:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   2ae44:	687b      	ldr	r3, [r7, #4]
   2ae46:	0a5b      	lsrs	r3, r3, #9
   2ae48:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
   2ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ae4c:	2b00      	cmp	r3, #0
   2ae4e:	d049      	beq.n	2aee4 <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2ae50:	2317      	movs	r3, #23
   2ae52:	18fb      	adds	r3, r7, r3
   2ae54:	781a      	ldrb	r2, [r3, #0]
   2ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ae58:	18d2      	adds	r2, r2, r3
   2ae5a:	68fb      	ldr	r3, [r7, #12]
   2ae5c:	681b      	ldr	r3, [r3, #0]
   2ae5e:	789b      	ldrb	r3, [r3, #2]
   2ae60:	429a      	cmp	r2, r3
   2ae62:	d908      	bls.n	2ae76 <f_read+0x176>
					cc = fp->fs->csize - csect;
   2ae64:	68fb      	ldr	r3, [r7, #12]
   2ae66:	681b      	ldr	r3, [r3, #0]
   2ae68:	789b      	ldrb	r3, [r3, #2]
   2ae6a:	001a      	movs	r2, r3
   2ae6c:	2317      	movs	r3, #23
   2ae6e:	18fb      	adds	r3, r7, r3
   2ae70:	781b      	ldrb	r3, [r3, #0]
   2ae72:	1ad3      	subs	r3, r2, r3
   2ae74:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   2ae76:	68fb      	ldr	r3, [r7, #12]
   2ae78:	681b      	ldr	r3, [r3, #0]
   2ae7a:	7858      	ldrb	r0, [r3, #1]
   2ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ae7e:	b2db      	uxtb	r3, r3
   2ae80:	693a      	ldr	r2, [r7, #16]
   2ae82:	6a39      	ldr	r1, [r7, #32]
   2ae84:	4c42      	ldr	r4, [pc, #264]	; (2af90 <f_read+0x290>)
   2ae86:	47a0      	blx	r4
   2ae88:	1e03      	subs	r3, r0, #0
   2ae8a:	d009      	beq.n	2aea0 <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
   2ae8c:	68fb      	ldr	r3, [r7, #12]
   2ae8e:	799b      	ldrb	r3, [r3, #6]
   2ae90:	2280      	movs	r2, #128	; 0x80
   2ae92:	4252      	negs	r2, r2
   2ae94:	4313      	orrs	r3, r2
   2ae96:	b2da      	uxtb	r2, r3
   2ae98:	68fb      	ldr	r3, [r7, #12]
   2ae9a:	719a      	strb	r2, [r3, #6]
   2ae9c:	2301      	movs	r3, #1
   2ae9e:	e06c      	b.n	2af7a <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   2aea0:	68fb      	ldr	r3, [r7, #12]
   2aea2:	681b      	ldr	r3, [r3, #0]
   2aea4:	791b      	ldrb	r3, [r3, #4]
   2aea6:	2b00      	cmp	r3, #0
   2aea8:	d018      	beq.n	2aedc <f_read+0x1dc>
   2aeaa:	68fb      	ldr	r3, [r7, #12]
   2aeac:	681b      	ldr	r3, [r3, #0]
   2aeae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2aeb0:	693b      	ldr	r3, [r7, #16]
   2aeb2:	1ad2      	subs	r2, r2, r3
   2aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2aeb6:	429a      	cmp	r2, r3
   2aeb8:	d210      	bcs.n	2aedc <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   2aeba:	68fb      	ldr	r3, [r7, #12]
   2aebc:	681b      	ldr	r3, [r3, #0]
   2aebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2aec0:	693b      	ldr	r3, [r7, #16]
   2aec2:	1ad3      	subs	r3, r2, r3
   2aec4:	025b      	lsls	r3, r3, #9
   2aec6:	6a3a      	ldr	r2, [r7, #32]
   2aec8:	18d0      	adds	r0, r2, r3
   2aeca:	68fb      	ldr	r3, [r7, #12]
   2aecc:	681b      	ldr	r3, [r3, #0]
   2aece:	3330      	adds	r3, #48	; 0x30
   2aed0:	0019      	movs	r1, r3
   2aed2:	2380      	movs	r3, #128	; 0x80
   2aed4:	009b      	lsls	r3, r3, #2
   2aed6:	001a      	movs	r2, r3
   2aed8:	4b2e      	ldr	r3, [pc, #184]	; (2af94 <f_read+0x294>)
   2aeda:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   2aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2aede:	025b      	lsls	r3, r3, #9
   2aee0:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
   2aee2:	e031      	b.n	2af48 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2aee4:	68fb      	ldr	r3, [r7, #12]
   2aee6:	693a      	ldr	r2, [r7, #16]
   2aee8:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   2aeea:	68fb      	ldr	r3, [r7, #12]
   2aeec:	689b      	ldr	r3, [r3, #8]
   2aeee:	05db      	lsls	r3, r3, #23
   2aef0:	0ddb      	lsrs	r3, r3, #23
   2aef2:	2280      	movs	r2, #128	; 0x80
   2aef4:	0092      	lsls	r2, r2, #2
   2aef6:	1ad3      	subs	r3, r2, r3
   2aef8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
   2aefa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2aefc:	687b      	ldr	r3, [r7, #4]
   2aefe:	429a      	cmp	r2, r3
   2af00:	d901      	bls.n	2af06 <f_read+0x206>
   2af02:	687b      	ldr	r3, [r7, #4]
   2af04:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   2af06:	68fb      	ldr	r3, [r7, #12]
   2af08:	681a      	ldr	r2, [r3, #0]
   2af0a:	68fb      	ldr	r3, [r7, #12]
   2af0c:	699b      	ldr	r3, [r3, #24]
   2af0e:	0019      	movs	r1, r3
   2af10:	0010      	movs	r0, r2
   2af12:	4b21      	ldr	r3, [pc, #132]	; (2af98 <f_read+0x298>)
   2af14:	4798      	blx	r3
   2af16:	1e03      	subs	r3, r0, #0
   2af18:	d009      	beq.n	2af2e <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
   2af1a:	68fb      	ldr	r3, [r7, #12]
   2af1c:	799b      	ldrb	r3, [r3, #6]
   2af1e:	2280      	movs	r2, #128	; 0x80
   2af20:	4252      	negs	r2, r2
   2af22:	4313      	orrs	r3, r2
   2af24:	b2da      	uxtb	r2, r3
   2af26:	68fb      	ldr	r3, [r7, #12]
   2af28:	719a      	strb	r2, [r3, #6]
   2af2a:	2301      	movs	r3, #1
   2af2c:	e025      	b.n	2af7a <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   2af2e:	68fb      	ldr	r3, [r7, #12]
   2af30:	681a      	ldr	r2, [r3, #0]
   2af32:	68fb      	ldr	r3, [r7, #12]
   2af34:	689b      	ldr	r3, [r3, #8]
   2af36:	05db      	lsls	r3, r3, #23
   2af38:	0ddb      	lsrs	r3, r3, #23
   2af3a:	3330      	adds	r3, #48	; 0x30
   2af3c:	18d1      	adds	r1, r2, r3
   2af3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2af40:	6a3b      	ldr	r3, [r7, #32]
   2af42:	0018      	movs	r0, r3
   2af44:	4b13      	ldr	r3, [pc, #76]	; (2af94 <f_read+0x294>)
   2af46:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   2af48:	6a3a      	ldr	r2, [r7, #32]
   2af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af4c:	18d3      	adds	r3, r2, r3
   2af4e:	623b      	str	r3, [r7, #32]
   2af50:	68fb      	ldr	r3, [r7, #12]
   2af52:	689a      	ldr	r2, [r3, #8]
   2af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af56:	18d2      	adds	r2, r2, r3
   2af58:	68fb      	ldr	r3, [r7, #12]
   2af5a:	609a      	str	r2, [r3, #8]
   2af5c:	683b      	ldr	r3, [r7, #0]
   2af5e:	681a      	ldr	r2, [r3, #0]
   2af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af62:	18d2      	adds	r2, r2, r3
   2af64:	683b      	ldr	r3, [r7, #0]
   2af66:	601a      	str	r2, [r3, #0]
   2af68:	687a      	ldr	r2, [r7, #4]
   2af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2af6c:	1ad3      	subs	r3, r2, r3
   2af6e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
   2af70:	687b      	ldr	r3, [r7, #4]
   2af72:	2b00      	cmp	r3, #0
   2af74:	d000      	beq.n	2af78 <f_read+0x278>
   2af76:	e701      	b.n	2ad7c <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
   2af78:	2300      	movs	r3, #0
}
   2af7a:	0018      	movs	r0, r3
   2af7c:	46bd      	mov	sp, r7
   2af7e:	b00d      	add	sp, #52	; 0x34
   2af80:	bd90      	pop	{r4, r7, pc}
   2af82:	46c0      	nop			; (mov r8, r8)
   2af84:	0002a725 	.word	0x0002a725
   2af88:	000285c1 	.word	0x000285c1
   2af8c:	00028589 	.word	0x00028589
   2af90:	00027f3d 	.word	0x00027f3d
   2af94:	00028245 	.word	0x00028245
   2af98:	00028329 	.word	0x00028329

0002af9c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2af9c:	b590      	push	{r4, r7, lr}
   2af9e:	b08b      	sub	sp, #44	; 0x2c
   2afa0:	af00      	add	r7, sp, #0
   2afa2:	60f8      	str	r0, [r7, #12]
   2afa4:	60b9      	str	r1, [r7, #8]
   2afa6:	607a      	str	r2, [r7, #4]
   2afa8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2afaa:	68bb      	ldr	r3, [r7, #8]
   2afac:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2afae:	683b      	ldr	r3, [r7, #0]
   2afb0:	2200      	movs	r2, #0
   2afb2:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2afb4:	68fb      	ldr	r3, [r7, #12]
   2afb6:	681a      	ldr	r2, [r3, #0]
   2afb8:	68fb      	ldr	r3, [r7, #12]
   2afba:	889b      	ldrh	r3, [r3, #4]
   2afbc:	2117      	movs	r1, #23
   2afbe:	187c      	adds	r4, r7, r1
   2afc0:	0019      	movs	r1, r3
   2afc2:	0010      	movs	r0, r2
   2afc4:	4bc3      	ldr	r3, [pc, #780]	; (2b2d4 <f_write+0x338>)
   2afc6:	4798      	blx	r3
   2afc8:	0003      	movs	r3, r0
   2afca:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2afcc:	2317      	movs	r3, #23
   2afce:	18fb      	adds	r3, r7, r3
   2afd0:	781b      	ldrb	r3, [r3, #0]
   2afd2:	2b00      	cmp	r3, #0
   2afd4:	d003      	beq.n	2afde <f_write+0x42>
   2afd6:	2317      	movs	r3, #23
   2afd8:	18fb      	adds	r3, r7, r3
   2afda:	781b      	ldrb	r3, [r3, #0]
   2afdc:	e176      	b.n	2b2cc <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2afde:	68fb      	ldr	r3, [r7, #12]
   2afe0:	799b      	ldrb	r3, [r3, #6]
   2afe2:	b25b      	sxtb	r3, r3
   2afe4:	2b00      	cmp	r3, #0
   2afe6:	da01      	bge.n	2afec <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2afe8:	2302      	movs	r3, #2
   2afea:	e16f      	b.n	2b2cc <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2afec:	68fb      	ldr	r3, [r7, #12]
   2afee:	799b      	ldrb	r3, [r3, #6]
   2aff0:	001a      	movs	r2, r3
   2aff2:	2302      	movs	r3, #2
   2aff4:	4013      	ands	r3, r2
   2aff6:	d101      	bne.n	2affc <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2aff8:	2307      	movs	r3, #7
   2affa:	e167      	b.n	2b2cc <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2affc:	68fb      	ldr	r3, [r7, #12]
   2affe:	68da      	ldr	r2, [r3, #12]
   2b000:	687b      	ldr	r3, [r7, #4]
   2b002:	18d2      	adds	r2, r2, r3
   2b004:	68fb      	ldr	r3, [r7, #12]
   2b006:	68db      	ldr	r3, [r3, #12]
   2b008:	429a      	cmp	r2, r3
   2b00a:	d300      	bcc.n	2b00e <f_write+0x72>
   2b00c:	e146      	b.n	2b29c <f_write+0x300>
   2b00e:	2300      	movs	r3, #0
   2b010:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2b012:	e143      	b.n	2b29c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2b014:	68fb      	ldr	r3, [r7, #12]
   2b016:	689b      	ldr	r3, [r3, #8]
   2b018:	05db      	lsls	r3, r3, #23
   2b01a:	0ddb      	lsrs	r3, r3, #23
   2b01c:	d000      	beq.n	2b020 <f_write+0x84>
   2b01e:	e0f6      	b.n	2b20e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2b020:	68fb      	ldr	r3, [r7, #12]
   2b022:	689b      	ldr	r3, [r3, #8]
   2b024:	0a5b      	lsrs	r3, r3, #9
   2b026:	b2da      	uxtb	r2, r3
   2b028:	68fb      	ldr	r3, [r7, #12]
   2b02a:	681b      	ldr	r3, [r3, #0]
   2b02c:	789b      	ldrb	r3, [r3, #2]
   2b02e:	3b01      	subs	r3, #1
   2b030:	b2d9      	uxtb	r1, r3
   2b032:	2316      	movs	r3, #22
   2b034:	18fb      	adds	r3, r7, r3
   2b036:	400a      	ands	r2, r1
   2b038:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2b03a:	2316      	movs	r3, #22
   2b03c:	18fb      	adds	r3, r7, r3
   2b03e:	781b      	ldrb	r3, [r3, #0]
   2b040:	2b00      	cmp	r3, #0
   2b042:	d140      	bne.n	2b0c6 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2b044:	68fb      	ldr	r3, [r7, #12]
   2b046:	689b      	ldr	r3, [r3, #8]
   2b048:	2b00      	cmp	r3, #0
   2b04a:	d111      	bne.n	2b070 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2b04c:	68fb      	ldr	r3, [r7, #12]
   2b04e:	691b      	ldr	r3, [r3, #16]
   2b050:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b054:	2b00      	cmp	r3, #0
   2b056:	d115      	bne.n	2b084 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2b058:	68fb      	ldr	r3, [r7, #12]
   2b05a:	681b      	ldr	r3, [r3, #0]
   2b05c:	2100      	movs	r1, #0
   2b05e:	0018      	movs	r0, r3
   2b060:	4b9d      	ldr	r3, [pc, #628]	; (2b2d8 <f_write+0x33c>)
   2b062:	4798      	blx	r3
   2b064:	0003      	movs	r3, r0
   2b066:	627b      	str	r3, [r7, #36]	; 0x24
   2b068:	68fb      	ldr	r3, [r7, #12]
   2b06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2b06c:	611a      	str	r2, [r3, #16]
   2b06e:	e009      	b.n	2b084 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2b070:	68fb      	ldr	r3, [r7, #12]
   2b072:	681a      	ldr	r2, [r3, #0]
   2b074:	68fb      	ldr	r3, [r7, #12]
   2b076:	695b      	ldr	r3, [r3, #20]
   2b078:	0019      	movs	r1, r3
   2b07a:	0010      	movs	r0, r2
   2b07c:	4b96      	ldr	r3, [pc, #600]	; (2b2d8 <f_write+0x33c>)
   2b07e:	4798      	blx	r3
   2b080:	0003      	movs	r3, r0
   2b082:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b086:	2b00      	cmp	r3, #0
   2b088:	d100      	bne.n	2b08c <f_write+0xf0>
   2b08a:	e10c      	b.n	2b2a6 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b08e:	2b01      	cmp	r3, #1
   2b090:	d109      	bne.n	2b0a6 <f_write+0x10a>
   2b092:	68fb      	ldr	r3, [r7, #12]
   2b094:	799b      	ldrb	r3, [r3, #6]
   2b096:	2280      	movs	r2, #128	; 0x80
   2b098:	4252      	negs	r2, r2
   2b09a:	4313      	orrs	r3, r2
   2b09c:	b2da      	uxtb	r2, r3
   2b09e:	68fb      	ldr	r3, [r7, #12]
   2b0a0:	719a      	strb	r2, [r3, #6]
   2b0a2:	2302      	movs	r3, #2
   2b0a4:	e112      	b.n	2b2cc <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b0a8:	3301      	adds	r3, #1
   2b0aa:	d109      	bne.n	2b0c0 <f_write+0x124>
   2b0ac:	68fb      	ldr	r3, [r7, #12]
   2b0ae:	799b      	ldrb	r3, [r3, #6]
   2b0b0:	2280      	movs	r2, #128	; 0x80
   2b0b2:	4252      	negs	r2, r2
   2b0b4:	4313      	orrs	r3, r2
   2b0b6:	b2da      	uxtb	r2, r3
   2b0b8:	68fb      	ldr	r3, [r7, #12]
   2b0ba:	719a      	strb	r2, [r3, #6]
   2b0bc:	2301      	movs	r3, #1
   2b0be:	e105      	b.n	2b2cc <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2b0c0:	68fb      	ldr	r3, [r7, #12]
   2b0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2b0c4:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2b0c6:	68fb      	ldr	r3, [r7, #12]
   2b0c8:	681b      	ldr	r3, [r3, #0]
   2b0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b0cc:	68fb      	ldr	r3, [r7, #12]
   2b0ce:	699b      	ldr	r3, [r3, #24]
   2b0d0:	429a      	cmp	r2, r3
   2b0d2:	d111      	bne.n	2b0f8 <f_write+0x15c>
   2b0d4:	68fb      	ldr	r3, [r7, #12]
   2b0d6:	681b      	ldr	r3, [r3, #0]
   2b0d8:	2100      	movs	r1, #0
   2b0da:	0018      	movs	r0, r3
   2b0dc:	4b7f      	ldr	r3, [pc, #508]	; (2b2dc <f_write+0x340>)
   2b0de:	4798      	blx	r3
   2b0e0:	1e03      	subs	r3, r0, #0
   2b0e2:	d009      	beq.n	2b0f8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2b0e4:	68fb      	ldr	r3, [r7, #12]
   2b0e6:	799b      	ldrb	r3, [r3, #6]
   2b0e8:	2280      	movs	r2, #128	; 0x80
   2b0ea:	4252      	negs	r2, r2
   2b0ec:	4313      	orrs	r3, r2
   2b0ee:	b2da      	uxtb	r2, r3
   2b0f0:	68fb      	ldr	r3, [r7, #12]
   2b0f2:	719a      	strb	r2, [r3, #6]
   2b0f4:	2301      	movs	r3, #1
   2b0f6:	e0e9      	b.n	2b2cc <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2b0f8:	68fb      	ldr	r3, [r7, #12]
   2b0fa:	681a      	ldr	r2, [r3, #0]
   2b0fc:	68fb      	ldr	r3, [r7, #12]
   2b0fe:	695b      	ldr	r3, [r3, #20]
   2b100:	0019      	movs	r1, r3
   2b102:	0010      	movs	r0, r2
   2b104:	4b76      	ldr	r3, [pc, #472]	; (2b2e0 <f_write+0x344>)
   2b106:	4798      	blx	r3
   2b108:	0003      	movs	r3, r0
   2b10a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2b10c:	693b      	ldr	r3, [r7, #16]
   2b10e:	2b00      	cmp	r3, #0
   2b110:	d109      	bne.n	2b126 <f_write+0x18a>
   2b112:	68fb      	ldr	r3, [r7, #12]
   2b114:	799b      	ldrb	r3, [r3, #6]
   2b116:	2280      	movs	r2, #128	; 0x80
   2b118:	4252      	negs	r2, r2
   2b11a:	4313      	orrs	r3, r2
   2b11c:	b2da      	uxtb	r2, r3
   2b11e:	68fb      	ldr	r3, [r7, #12]
   2b120:	719a      	strb	r2, [r3, #6]
   2b122:	2302      	movs	r3, #2
   2b124:	e0d2      	b.n	2b2cc <f_write+0x330>
			sect += csect;
   2b126:	2316      	movs	r3, #22
   2b128:	18fb      	adds	r3, r7, r3
   2b12a:	781b      	ldrb	r3, [r3, #0]
   2b12c:	693a      	ldr	r2, [r7, #16]
   2b12e:	18d3      	adds	r3, r2, r3
   2b130:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2b132:	687b      	ldr	r3, [r7, #4]
   2b134:	0a5b      	lsrs	r3, r3, #9
   2b136:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2b138:	69fb      	ldr	r3, [r7, #28]
   2b13a:	2b00      	cmp	r3, #0
   2b13c:	d048      	beq.n	2b1d0 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2b13e:	2316      	movs	r3, #22
   2b140:	18fb      	adds	r3, r7, r3
   2b142:	781a      	ldrb	r2, [r3, #0]
   2b144:	69fb      	ldr	r3, [r7, #28]
   2b146:	18d2      	adds	r2, r2, r3
   2b148:	68fb      	ldr	r3, [r7, #12]
   2b14a:	681b      	ldr	r3, [r3, #0]
   2b14c:	789b      	ldrb	r3, [r3, #2]
   2b14e:	429a      	cmp	r2, r3
   2b150:	d908      	bls.n	2b164 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2b152:	68fb      	ldr	r3, [r7, #12]
   2b154:	681b      	ldr	r3, [r3, #0]
   2b156:	789b      	ldrb	r3, [r3, #2]
   2b158:	001a      	movs	r2, r3
   2b15a:	2316      	movs	r3, #22
   2b15c:	18fb      	adds	r3, r7, r3
   2b15e:	781b      	ldrb	r3, [r3, #0]
   2b160:	1ad3      	subs	r3, r2, r3
   2b162:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2b164:	68fb      	ldr	r3, [r7, #12]
   2b166:	681b      	ldr	r3, [r3, #0]
   2b168:	7858      	ldrb	r0, [r3, #1]
   2b16a:	69fb      	ldr	r3, [r7, #28]
   2b16c:	b2db      	uxtb	r3, r3
   2b16e:	693a      	ldr	r2, [r7, #16]
   2b170:	69b9      	ldr	r1, [r7, #24]
   2b172:	4c5c      	ldr	r4, [pc, #368]	; (2b2e4 <f_write+0x348>)
   2b174:	47a0      	blx	r4
   2b176:	1e03      	subs	r3, r0, #0
   2b178:	d009      	beq.n	2b18e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2b17a:	68fb      	ldr	r3, [r7, #12]
   2b17c:	799b      	ldrb	r3, [r3, #6]
   2b17e:	2280      	movs	r2, #128	; 0x80
   2b180:	4252      	negs	r2, r2
   2b182:	4313      	orrs	r3, r2
   2b184:	b2da      	uxtb	r2, r3
   2b186:	68fb      	ldr	r3, [r7, #12]
   2b188:	719a      	strb	r2, [r3, #6]
   2b18a:	2301      	movs	r3, #1
   2b18c:	e09e      	b.n	2b2cc <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2b18e:	68fb      	ldr	r3, [r7, #12]
   2b190:	681b      	ldr	r3, [r3, #0]
   2b192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b194:	693b      	ldr	r3, [r7, #16]
   2b196:	1ad2      	subs	r2, r2, r3
   2b198:	69fb      	ldr	r3, [r7, #28]
   2b19a:	429a      	cmp	r2, r3
   2b19c:	d214      	bcs.n	2b1c8 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2b19e:	68fb      	ldr	r3, [r7, #12]
   2b1a0:	681b      	ldr	r3, [r3, #0]
   2b1a2:	3330      	adds	r3, #48	; 0x30
   2b1a4:	0018      	movs	r0, r3
   2b1a6:	68fb      	ldr	r3, [r7, #12]
   2b1a8:	681b      	ldr	r3, [r3, #0]
   2b1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b1ac:	693b      	ldr	r3, [r7, #16]
   2b1ae:	1ad3      	subs	r3, r2, r3
   2b1b0:	025b      	lsls	r3, r3, #9
   2b1b2:	69ba      	ldr	r2, [r7, #24]
   2b1b4:	18d1      	adds	r1, r2, r3
   2b1b6:	2380      	movs	r3, #128	; 0x80
   2b1b8:	009b      	lsls	r3, r3, #2
   2b1ba:	001a      	movs	r2, r3
   2b1bc:	4b4a      	ldr	r3, [pc, #296]	; (2b2e8 <f_write+0x34c>)
   2b1be:	4798      	blx	r3
					fp->fs->wflag = 0;
   2b1c0:	68fb      	ldr	r3, [r7, #12]
   2b1c2:	681b      	ldr	r3, [r3, #0]
   2b1c4:	2200      	movs	r2, #0
   2b1c6:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2b1c8:	69fb      	ldr	r3, [r7, #28]
   2b1ca:	025b      	lsls	r3, r3, #9
   2b1cc:	623b      	str	r3, [r7, #32]
				continue;
   2b1ce:	e051      	b.n	2b274 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2b1d0:	68fb      	ldr	r3, [r7, #12]
   2b1d2:	689a      	ldr	r2, [r3, #8]
   2b1d4:	68fb      	ldr	r3, [r7, #12]
   2b1d6:	68db      	ldr	r3, [r3, #12]
   2b1d8:	429a      	cmp	r2, r3
   2b1da:	d315      	bcc.n	2b208 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2b1dc:	68fb      	ldr	r3, [r7, #12]
   2b1de:	681b      	ldr	r3, [r3, #0]
   2b1e0:	2100      	movs	r1, #0
   2b1e2:	0018      	movs	r0, r3
   2b1e4:	4b3d      	ldr	r3, [pc, #244]	; (2b2dc <f_write+0x340>)
   2b1e6:	4798      	blx	r3
   2b1e8:	1e03      	subs	r3, r0, #0
   2b1ea:	d009      	beq.n	2b200 <f_write+0x264>
   2b1ec:	68fb      	ldr	r3, [r7, #12]
   2b1ee:	799b      	ldrb	r3, [r3, #6]
   2b1f0:	2280      	movs	r2, #128	; 0x80
   2b1f2:	4252      	negs	r2, r2
   2b1f4:	4313      	orrs	r3, r2
   2b1f6:	b2da      	uxtb	r2, r3
   2b1f8:	68fb      	ldr	r3, [r7, #12]
   2b1fa:	719a      	strb	r2, [r3, #6]
   2b1fc:	2301      	movs	r3, #1
   2b1fe:	e065      	b.n	2b2cc <f_write+0x330>
				fp->fs->winsect = sect;
   2b200:	68fb      	ldr	r3, [r7, #12]
   2b202:	681b      	ldr	r3, [r3, #0]
   2b204:	693a      	ldr	r2, [r7, #16]
   2b206:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2b208:	68fb      	ldr	r3, [r7, #12]
   2b20a:	693a      	ldr	r2, [r7, #16]
   2b20c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2b20e:	68fb      	ldr	r3, [r7, #12]
   2b210:	689b      	ldr	r3, [r3, #8]
   2b212:	05db      	lsls	r3, r3, #23
   2b214:	0ddb      	lsrs	r3, r3, #23
   2b216:	2280      	movs	r2, #128	; 0x80
   2b218:	0092      	lsls	r2, r2, #2
   2b21a:	1ad3      	subs	r3, r2, r3
   2b21c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2b21e:	6a3a      	ldr	r2, [r7, #32]
   2b220:	687b      	ldr	r3, [r7, #4]
   2b222:	429a      	cmp	r2, r3
   2b224:	d901      	bls.n	2b22a <f_write+0x28e>
   2b226:	687b      	ldr	r3, [r7, #4]
   2b228:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2b22a:	68fb      	ldr	r3, [r7, #12]
   2b22c:	681a      	ldr	r2, [r3, #0]
   2b22e:	68fb      	ldr	r3, [r7, #12]
   2b230:	699b      	ldr	r3, [r3, #24]
   2b232:	0019      	movs	r1, r3
   2b234:	0010      	movs	r0, r2
   2b236:	4b29      	ldr	r3, [pc, #164]	; (2b2dc <f_write+0x340>)
   2b238:	4798      	blx	r3
   2b23a:	1e03      	subs	r3, r0, #0
   2b23c:	d009      	beq.n	2b252 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2b23e:	68fb      	ldr	r3, [r7, #12]
   2b240:	799b      	ldrb	r3, [r3, #6]
   2b242:	2280      	movs	r2, #128	; 0x80
   2b244:	4252      	negs	r2, r2
   2b246:	4313      	orrs	r3, r2
   2b248:	b2da      	uxtb	r2, r3
   2b24a:	68fb      	ldr	r3, [r7, #12]
   2b24c:	719a      	strb	r2, [r3, #6]
   2b24e:	2301      	movs	r3, #1
   2b250:	e03c      	b.n	2b2cc <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2b252:	68fb      	ldr	r3, [r7, #12]
   2b254:	681a      	ldr	r2, [r3, #0]
   2b256:	68fb      	ldr	r3, [r7, #12]
   2b258:	689b      	ldr	r3, [r3, #8]
   2b25a:	05db      	lsls	r3, r3, #23
   2b25c:	0ddb      	lsrs	r3, r3, #23
   2b25e:	3330      	adds	r3, #48	; 0x30
   2b260:	18d3      	adds	r3, r2, r3
   2b262:	6a3a      	ldr	r2, [r7, #32]
   2b264:	69b9      	ldr	r1, [r7, #24]
   2b266:	0018      	movs	r0, r3
   2b268:	4b1f      	ldr	r3, [pc, #124]	; (2b2e8 <f_write+0x34c>)
   2b26a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2b26c:	68fb      	ldr	r3, [r7, #12]
   2b26e:	681b      	ldr	r3, [r3, #0]
   2b270:	2201      	movs	r2, #1
   2b272:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2b274:	69ba      	ldr	r2, [r7, #24]
   2b276:	6a3b      	ldr	r3, [r7, #32]
   2b278:	18d3      	adds	r3, r2, r3
   2b27a:	61bb      	str	r3, [r7, #24]
   2b27c:	68fb      	ldr	r3, [r7, #12]
   2b27e:	689a      	ldr	r2, [r3, #8]
   2b280:	6a3b      	ldr	r3, [r7, #32]
   2b282:	18d2      	adds	r2, r2, r3
   2b284:	68fb      	ldr	r3, [r7, #12]
   2b286:	609a      	str	r2, [r3, #8]
   2b288:	683b      	ldr	r3, [r7, #0]
   2b28a:	681a      	ldr	r2, [r3, #0]
   2b28c:	6a3b      	ldr	r3, [r7, #32]
   2b28e:	18d2      	adds	r2, r2, r3
   2b290:	683b      	ldr	r3, [r7, #0]
   2b292:	601a      	str	r2, [r3, #0]
   2b294:	687a      	ldr	r2, [r7, #4]
   2b296:	6a3b      	ldr	r3, [r7, #32]
   2b298:	1ad3      	subs	r3, r2, r3
   2b29a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2b29c:	687b      	ldr	r3, [r7, #4]
   2b29e:	2b00      	cmp	r3, #0
   2b2a0:	d000      	beq.n	2b2a4 <f_write+0x308>
   2b2a2:	e6b7      	b.n	2b014 <f_write+0x78>
   2b2a4:	e000      	b.n	2b2a8 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2b2a6:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2b2a8:	68fb      	ldr	r3, [r7, #12]
   2b2aa:	689a      	ldr	r2, [r3, #8]
   2b2ac:	68fb      	ldr	r3, [r7, #12]
   2b2ae:	68db      	ldr	r3, [r3, #12]
   2b2b0:	429a      	cmp	r2, r3
   2b2b2:	d903      	bls.n	2b2bc <f_write+0x320>
   2b2b4:	68fb      	ldr	r3, [r7, #12]
   2b2b6:	689a      	ldr	r2, [r3, #8]
   2b2b8:	68fb      	ldr	r3, [r7, #12]
   2b2ba:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2b2bc:	68fb      	ldr	r3, [r7, #12]
   2b2be:	799b      	ldrb	r3, [r3, #6]
   2b2c0:	2220      	movs	r2, #32
   2b2c2:	4313      	orrs	r3, r2
   2b2c4:	b2da      	uxtb	r2, r3
   2b2c6:	68fb      	ldr	r3, [r7, #12]
   2b2c8:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2b2ca:	2300      	movs	r3, #0
}
   2b2cc:	0018      	movs	r0, r3
   2b2ce:	46bd      	mov	sp, r7
   2b2d0:	b00b      	add	sp, #44	; 0x2c
   2b2d2:	bd90      	pop	{r4, r7, pc}
   2b2d4:	0002a725 	.word	0x0002a725
   2b2d8:	00028a31 	.word	0x00028a31
   2b2dc:	00028329 	.word	0x00028329
   2b2e0:	00028589 	.word	0x00028589
   2b2e4:	00028015 	.word	0x00028015
   2b2e8:	00028245 	.word	0x00028245

0002b2ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2b2ec:	b590      	push	{r4, r7, lr}
   2b2ee:	b087      	sub	sp, #28
   2b2f0:	af00      	add	r7, sp, #0
   2b2f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2b2f4:	687b      	ldr	r3, [r7, #4]
   2b2f6:	681a      	ldr	r2, [r3, #0]
   2b2f8:	687b      	ldr	r3, [r7, #4]
   2b2fa:	889b      	ldrh	r3, [r3, #4]
   2b2fc:	2117      	movs	r1, #23
   2b2fe:	187c      	adds	r4, r7, r1
   2b300:	0019      	movs	r1, r3
   2b302:	0010      	movs	r0, r2
   2b304:	4b55      	ldr	r3, [pc, #340]	; (2b45c <f_sync+0x170>)
   2b306:	4798      	blx	r3
   2b308:	0003      	movs	r3, r0
   2b30a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b30c:	2317      	movs	r3, #23
   2b30e:	18fb      	adds	r3, r7, r3
   2b310:	781b      	ldrb	r3, [r3, #0]
   2b312:	2b00      	cmp	r3, #0
   2b314:	d000      	beq.n	2b318 <f_sync+0x2c>
   2b316:	e09a      	b.n	2b44e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2b318:	687b      	ldr	r3, [r7, #4]
   2b31a:	799b      	ldrb	r3, [r3, #6]
   2b31c:	001a      	movs	r2, r3
   2b31e:	2320      	movs	r3, #32
   2b320:	4013      	ands	r3, r2
   2b322:	d100      	bne.n	2b326 <f_sync+0x3a>
   2b324:	e093      	b.n	2b44e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2b326:	687b      	ldr	r3, [r7, #4]
   2b328:	681a      	ldr	r2, [r3, #0]
   2b32a:	687b      	ldr	r3, [r7, #4]
   2b32c:	69db      	ldr	r3, [r3, #28]
   2b32e:	2117      	movs	r1, #23
   2b330:	187c      	adds	r4, r7, r1
   2b332:	0019      	movs	r1, r3
   2b334:	0010      	movs	r0, r2
   2b336:	4b4a      	ldr	r3, [pc, #296]	; (2b460 <f_sync+0x174>)
   2b338:	4798      	blx	r3
   2b33a:	0003      	movs	r3, r0
   2b33c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2b33e:	2317      	movs	r3, #23
   2b340:	18fb      	adds	r3, r7, r3
   2b342:	781b      	ldrb	r3, [r3, #0]
   2b344:	2b00      	cmp	r3, #0
   2b346:	d000      	beq.n	2b34a <f_sync+0x5e>
   2b348:	e081      	b.n	2b44e <f_sync+0x162>
				dir = fp->dir_ptr;
   2b34a:	687b      	ldr	r3, [r7, #4]
   2b34c:	6a1b      	ldr	r3, [r3, #32]
   2b34e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2b350:	693b      	ldr	r3, [r7, #16]
   2b352:	330b      	adds	r3, #11
   2b354:	693a      	ldr	r2, [r7, #16]
   2b356:	320b      	adds	r2, #11
   2b358:	7812      	ldrb	r2, [r2, #0]
   2b35a:	2120      	movs	r1, #32
   2b35c:	430a      	orrs	r2, r1
   2b35e:	b2d2      	uxtb	r2, r2
   2b360:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2b362:	693b      	ldr	r3, [r7, #16]
   2b364:	331c      	adds	r3, #28
   2b366:	001a      	movs	r2, r3
   2b368:	687b      	ldr	r3, [r7, #4]
   2b36a:	68db      	ldr	r3, [r3, #12]
   2b36c:	b2db      	uxtb	r3, r3
   2b36e:	7013      	strb	r3, [r2, #0]
   2b370:	693b      	ldr	r3, [r7, #16]
   2b372:	331d      	adds	r3, #29
   2b374:	001a      	movs	r2, r3
   2b376:	687b      	ldr	r3, [r7, #4]
   2b378:	68db      	ldr	r3, [r3, #12]
   2b37a:	b29b      	uxth	r3, r3
   2b37c:	0a1b      	lsrs	r3, r3, #8
   2b37e:	b29b      	uxth	r3, r3
   2b380:	b2db      	uxtb	r3, r3
   2b382:	7013      	strb	r3, [r2, #0]
   2b384:	693b      	ldr	r3, [r7, #16]
   2b386:	331e      	adds	r3, #30
   2b388:	001a      	movs	r2, r3
   2b38a:	687b      	ldr	r3, [r7, #4]
   2b38c:	68db      	ldr	r3, [r3, #12]
   2b38e:	0c1b      	lsrs	r3, r3, #16
   2b390:	b2db      	uxtb	r3, r3
   2b392:	7013      	strb	r3, [r2, #0]
   2b394:	693b      	ldr	r3, [r7, #16]
   2b396:	331f      	adds	r3, #31
   2b398:	001a      	movs	r2, r3
   2b39a:	687b      	ldr	r3, [r7, #4]
   2b39c:	68db      	ldr	r3, [r3, #12]
   2b39e:	0e1b      	lsrs	r3, r3, #24
   2b3a0:	b2db      	uxtb	r3, r3
   2b3a2:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2b3a4:	693b      	ldr	r3, [r7, #16]
   2b3a6:	331a      	adds	r3, #26
   2b3a8:	001a      	movs	r2, r3
   2b3aa:	687b      	ldr	r3, [r7, #4]
   2b3ac:	691b      	ldr	r3, [r3, #16]
   2b3ae:	b2db      	uxtb	r3, r3
   2b3b0:	7013      	strb	r3, [r2, #0]
   2b3b2:	693b      	ldr	r3, [r7, #16]
   2b3b4:	331b      	adds	r3, #27
   2b3b6:	001a      	movs	r2, r3
   2b3b8:	687b      	ldr	r3, [r7, #4]
   2b3ba:	691b      	ldr	r3, [r3, #16]
   2b3bc:	b29b      	uxth	r3, r3
   2b3be:	0a1b      	lsrs	r3, r3, #8
   2b3c0:	b29b      	uxth	r3, r3
   2b3c2:	b2db      	uxtb	r3, r3
   2b3c4:	7013      	strb	r3, [r2, #0]
   2b3c6:	693b      	ldr	r3, [r7, #16]
   2b3c8:	3314      	adds	r3, #20
   2b3ca:	001a      	movs	r2, r3
   2b3cc:	687b      	ldr	r3, [r7, #4]
   2b3ce:	691b      	ldr	r3, [r3, #16]
   2b3d0:	0c1b      	lsrs	r3, r3, #16
   2b3d2:	b2db      	uxtb	r3, r3
   2b3d4:	7013      	strb	r3, [r2, #0]
   2b3d6:	693b      	ldr	r3, [r7, #16]
   2b3d8:	3315      	adds	r3, #21
   2b3da:	001a      	movs	r2, r3
   2b3dc:	687b      	ldr	r3, [r7, #4]
   2b3de:	691b      	ldr	r3, [r3, #16]
   2b3e0:	0c1b      	lsrs	r3, r3, #16
   2b3e2:	b29b      	uxth	r3, r3
   2b3e4:	0a1b      	lsrs	r3, r3, #8
   2b3e6:	b29b      	uxth	r3, r3
   2b3e8:	b2db      	uxtb	r3, r3
   2b3ea:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2b3ec:	4b1d      	ldr	r3, [pc, #116]	; (2b464 <f_sync+0x178>)
   2b3ee:	4798      	blx	r3
   2b3f0:	0003      	movs	r3, r0
   2b3f2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2b3f4:	693b      	ldr	r3, [r7, #16]
   2b3f6:	3316      	adds	r3, #22
   2b3f8:	68fa      	ldr	r2, [r7, #12]
   2b3fa:	b2d2      	uxtb	r2, r2
   2b3fc:	701a      	strb	r2, [r3, #0]
   2b3fe:	693b      	ldr	r3, [r7, #16]
   2b400:	3317      	adds	r3, #23
   2b402:	68fa      	ldr	r2, [r7, #12]
   2b404:	b292      	uxth	r2, r2
   2b406:	0a12      	lsrs	r2, r2, #8
   2b408:	b292      	uxth	r2, r2
   2b40a:	b2d2      	uxtb	r2, r2
   2b40c:	701a      	strb	r2, [r3, #0]
   2b40e:	693b      	ldr	r3, [r7, #16]
   2b410:	3318      	adds	r3, #24
   2b412:	68fa      	ldr	r2, [r7, #12]
   2b414:	0c12      	lsrs	r2, r2, #16
   2b416:	b2d2      	uxtb	r2, r2
   2b418:	701a      	strb	r2, [r3, #0]
   2b41a:	693b      	ldr	r3, [r7, #16]
   2b41c:	3319      	adds	r3, #25
   2b41e:	68fa      	ldr	r2, [r7, #12]
   2b420:	0e12      	lsrs	r2, r2, #24
   2b422:	b2d2      	uxtb	r2, r2
   2b424:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2b426:	687b      	ldr	r3, [r7, #4]
   2b428:	799b      	ldrb	r3, [r3, #6]
   2b42a:	2220      	movs	r2, #32
   2b42c:	4393      	bics	r3, r2
   2b42e:	b2da      	uxtb	r2, r3
   2b430:	687b      	ldr	r3, [r7, #4]
   2b432:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2b434:	687b      	ldr	r3, [r7, #4]
   2b436:	681b      	ldr	r3, [r3, #0]
   2b438:	2201      	movs	r2, #1
   2b43a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2b43c:	687b      	ldr	r3, [r7, #4]
   2b43e:	681b      	ldr	r3, [r3, #0]
   2b440:	2217      	movs	r2, #23
   2b442:	18bc      	adds	r4, r7, r2
   2b444:	0018      	movs	r0, r3
   2b446:	4b08      	ldr	r3, [pc, #32]	; (2b468 <f_sync+0x17c>)
   2b448:	4798      	blx	r3
   2b44a:	0003      	movs	r3, r0
   2b44c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2b44e:	2317      	movs	r3, #23
   2b450:	18fb      	adds	r3, r7, r3
   2b452:	781b      	ldrb	r3, [r3, #0]
}
   2b454:	0018      	movs	r0, r3
   2b456:	46bd      	mov	sp, r7
   2b458:	b007      	add	sp, #28
   2b45a:	bd90      	pop	{r4, r7, pc}
   2b45c:	0002a725 	.word	0x0002a725
   2b460:	00028329 	.word	0x00028329
   2b464:	000281e5 	.word	0x000281e5
   2b468:	000283f1 	.word	0x000283f1

0002b46c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2b46c:	b590      	push	{r4, r7, lr}
   2b46e:	b085      	sub	sp, #20
   2b470:	af00      	add	r7, sp, #0
   2b472:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2b474:	230f      	movs	r3, #15
   2b476:	18fc      	adds	r4, r7, r3
   2b478:	687b      	ldr	r3, [r7, #4]
   2b47a:	0018      	movs	r0, r3
   2b47c:	4b09      	ldr	r3, [pc, #36]	; (2b4a4 <f_close+0x38>)
   2b47e:	4798      	blx	r3
   2b480:	0003      	movs	r3, r0
   2b482:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2b484:	230f      	movs	r3, #15
   2b486:	18fb      	adds	r3, r7, r3
   2b488:	781b      	ldrb	r3, [r3, #0]
   2b48a:	2b00      	cmp	r3, #0
   2b48c:	d102      	bne.n	2b494 <f_close+0x28>
   2b48e:	687b      	ldr	r3, [r7, #4]
   2b490:	2200      	movs	r2, #0
   2b492:	601a      	str	r2, [r3, #0]
	return res;
   2b494:	230f      	movs	r3, #15
   2b496:	18fb      	adds	r3, r7, r3
   2b498:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2b49a:	0018      	movs	r0, r3
   2b49c:	46bd      	mov	sp, r7
   2b49e:	b005      	add	sp, #20
   2b4a0:	bd90      	pop	{r4, r7, pc}
   2b4a2:	46c0      	nop			; (mov r8, r8)
   2b4a4:	0002b2ed 	.word	0x0002b2ed

0002b4a8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
   2b4a8:	b590      	push	{r4, r7, lr}
   2b4aa:	4c8d      	ldr	r4, [pc, #564]	; (2b6e0 <f_unlink+0x238>)
   2b4ac:	44a5      	add	sp, r4
   2b4ae:	af00      	add	r7, sp, #0
   2b4b0:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   2b4b2:	4b8c      	ldr	r3, [pc, #560]	; (2b6e4 <f_unlink+0x23c>)
   2b4b4:	18fc      	adds	r4, r7, r3
   2b4b6:	238e      	movs	r3, #142	; 0x8e
   2b4b8:	009b      	lsls	r3, r3, #2
   2b4ba:	18f9      	adds	r1, r7, r3
   2b4bc:	1d3b      	adds	r3, r7, #4
   2b4be:	2201      	movs	r2, #1
   2b4c0:	0018      	movs	r0, r3
   2b4c2:	4b89      	ldr	r3, [pc, #548]	; (2b6e8 <f_unlink+0x240>)
   2b4c4:	4798      	blx	r3
   2b4c6:	0003      	movs	r3, r0
   2b4c8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b4ca:	4b86      	ldr	r3, [pc, #536]	; (2b6e4 <f_unlink+0x23c>)
   2b4cc:	18fb      	adds	r3, r7, r3
   2b4ce:	781b      	ldrb	r3, [r3, #0]
   2b4d0:	2b00      	cmp	r3, #0
   2b4d2:	d000      	beq.n	2b4d6 <f_unlink+0x2e>
   2b4d4:	e0fb      	b.n	2b6ce <f_unlink+0x226>
		INIT_BUF(dj);
   2b4d6:	238e      	movs	r3, #142	; 0x8e
   2b4d8:	009b      	lsls	r3, r3, #2
   2b4da:	18fb      	adds	r3, r7, r3
   2b4dc:	2282      	movs	r2, #130	; 0x82
   2b4de:	0092      	lsls	r2, r2, #2
   2b4e0:	18ba      	adds	r2, r7, r2
   2b4e2:	619a      	str	r2, [r3, #24]
   2b4e4:	238e      	movs	r3, #142	; 0x8e
   2b4e6:	009b      	lsls	r3, r3, #2
   2b4e8:	18fb      	adds	r3, r7, r3
   2b4ea:	2208      	movs	r2, #8
   2b4ec:	18ba      	adds	r2, r7, r2
   2b4ee:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
   2b4f0:	687a      	ldr	r2, [r7, #4]
   2b4f2:	4b7c      	ldr	r3, [pc, #496]	; (2b6e4 <f_unlink+0x23c>)
   2b4f4:	18fc      	adds	r4, r7, r3
   2b4f6:	238e      	movs	r3, #142	; 0x8e
   2b4f8:	009b      	lsls	r3, r3, #2
   2b4fa:	18fb      	adds	r3, r7, r3
   2b4fc:	0011      	movs	r1, r2
   2b4fe:	0018      	movs	r0, r3
   2b500:	4b7a      	ldr	r3, [pc, #488]	; (2b6ec <f_unlink+0x244>)
   2b502:	4798      	blx	r3
   2b504:	0003      	movs	r3, r0
   2b506:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
   2b508:	4b76      	ldr	r3, [pc, #472]	; (2b6e4 <f_unlink+0x23c>)
   2b50a:	18fb      	adds	r3, r7, r3
   2b50c:	781b      	ldrb	r3, [r3, #0]
   2b50e:	2b00      	cmp	r3, #0
   2b510:	d000      	beq.n	2b514 <f_unlink+0x6c>
   2b512:	e0dc      	b.n	2b6ce <f_unlink+0x226>
			dir = dj.dir;
   2b514:	238e      	movs	r3, #142	; 0x8e
   2b516:	009b      	lsls	r3, r3, #2
   2b518:	18fb      	adds	r3, r7, r3
   2b51a:	695b      	ldr	r3, [r3, #20]
   2b51c:	2298      	movs	r2, #152	; 0x98
   2b51e:	0092      	lsls	r2, r2, #2
   2b520:	18ba      	adds	r2, r7, r2
   2b522:	6013      	str	r3, [r2, #0]
			if (!dir) {
   2b524:	2398      	movs	r3, #152	; 0x98
   2b526:	009b      	lsls	r3, r3, #2
   2b528:	18fb      	adds	r3, r7, r3
   2b52a:	681b      	ldr	r3, [r3, #0]
   2b52c:	2b00      	cmp	r3, #0
   2b52e:	d104      	bne.n	2b53a <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   2b530:	4b6c      	ldr	r3, [pc, #432]	; (2b6e4 <f_unlink+0x23c>)
   2b532:	18fb      	adds	r3, r7, r3
   2b534:	2206      	movs	r2, #6
   2b536:	701a      	strb	r2, [r3, #0]
   2b538:	e00d      	b.n	2b556 <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
   2b53a:	2398      	movs	r3, #152	; 0x98
   2b53c:	009b      	lsls	r3, r3, #2
   2b53e:	18fb      	adds	r3, r7, r3
   2b540:	681b      	ldr	r3, [r3, #0]
   2b542:	330b      	adds	r3, #11
   2b544:	781b      	ldrb	r3, [r3, #0]
   2b546:	001a      	movs	r2, r3
   2b548:	2301      	movs	r3, #1
   2b54a:	4013      	ands	r3, r2
   2b54c:	d003      	beq.n	2b556 <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
   2b54e:	4b65      	ldr	r3, [pc, #404]	; (2b6e4 <f_unlink+0x23c>)
   2b550:	18fb      	adds	r3, r7, r3
   2b552:	2207      	movs	r2, #7
   2b554:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
   2b556:	2398      	movs	r3, #152	; 0x98
   2b558:	009b      	lsls	r3, r3, #2
   2b55a:	18fb      	adds	r3, r7, r3
   2b55c:	681b      	ldr	r3, [r3, #0]
   2b55e:	3315      	adds	r3, #21
   2b560:	781b      	ldrb	r3, [r3, #0]
   2b562:	021b      	lsls	r3, r3, #8
   2b564:	b21a      	sxth	r2, r3
   2b566:	2398      	movs	r3, #152	; 0x98
   2b568:	009b      	lsls	r3, r3, #2
   2b56a:	18fb      	adds	r3, r7, r3
   2b56c:	681b      	ldr	r3, [r3, #0]
   2b56e:	3314      	adds	r3, #20
   2b570:	781b      	ldrb	r3, [r3, #0]
   2b572:	b21b      	sxth	r3, r3
   2b574:	4313      	orrs	r3, r2
   2b576:	b21b      	sxth	r3, r3
   2b578:	b29b      	uxth	r3, r3
   2b57a:	041b      	lsls	r3, r3, #16
   2b57c:	2298      	movs	r2, #152	; 0x98
   2b57e:	0092      	lsls	r2, r2, #2
   2b580:	18ba      	adds	r2, r7, r2
   2b582:	6812      	ldr	r2, [r2, #0]
   2b584:	321b      	adds	r2, #27
   2b586:	7812      	ldrb	r2, [r2, #0]
   2b588:	0212      	lsls	r2, r2, #8
   2b58a:	b211      	sxth	r1, r2
   2b58c:	2298      	movs	r2, #152	; 0x98
   2b58e:	0092      	lsls	r2, r2, #2
   2b590:	18ba      	adds	r2, r7, r2
   2b592:	6812      	ldr	r2, [r2, #0]
   2b594:	321a      	adds	r2, #26
   2b596:	7812      	ldrb	r2, [r2, #0]
   2b598:	b212      	sxth	r2, r2
   2b59a:	430a      	orrs	r2, r1
   2b59c:	b212      	sxth	r2, r2
   2b59e:	b292      	uxth	r2, r2
   2b5a0:	4313      	orrs	r3, r2
   2b5a2:	2297      	movs	r2, #151	; 0x97
   2b5a4:	0092      	lsls	r2, r2, #2
   2b5a6:	18ba      	adds	r2, r7, r2
   2b5a8:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   2b5aa:	4b4e      	ldr	r3, [pc, #312]	; (2b6e4 <f_unlink+0x23c>)
   2b5ac:	18fb      	adds	r3, r7, r3
   2b5ae:	781b      	ldrb	r3, [r3, #0]
   2b5b0:	2b00      	cmp	r3, #0
   2b5b2:	d152      	bne.n	2b65a <f_unlink+0x1b2>
   2b5b4:	2398      	movs	r3, #152	; 0x98
   2b5b6:	009b      	lsls	r3, r3, #2
   2b5b8:	18fb      	adds	r3, r7, r3
   2b5ba:	681b      	ldr	r3, [r3, #0]
   2b5bc:	330b      	adds	r3, #11
   2b5be:	781b      	ldrb	r3, [r3, #0]
   2b5c0:	001a      	movs	r2, r3
   2b5c2:	2310      	movs	r3, #16
   2b5c4:	4013      	ands	r3, r2
   2b5c6:	d048      	beq.n	2b65a <f_unlink+0x1b2>
				if (dclst < 2) {
   2b5c8:	2397      	movs	r3, #151	; 0x97
   2b5ca:	009b      	lsls	r3, r3, #2
   2b5cc:	18fb      	adds	r3, r7, r3
   2b5ce:	681b      	ldr	r3, [r3, #0]
   2b5d0:	2b01      	cmp	r3, #1
   2b5d2:	d804      	bhi.n	2b5de <f_unlink+0x136>
					res = FR_INT_ERR;
   2b5d4:	4b43      	ldr	r3, [pc, #268]	; (2b6e4 <f_unlink+0x23c>)
   2b5d6:	18fb      	adds	r3, r7, r3
   2b5d8:	2202      	movs	r2, #2
   2b5da:	701a      	strb	r2, [r3, #0]
   2b5dc:	e03d      	b.n	2b65a <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   2b5de:	238e      	movs	r3, #142	; 0x8e
   2b5e0:	009b      	lsls	r3, r3, #2
   2b5e2:	18f9      	adds	r1, r7, r3
   2b5e4:	2385      	movs	r3, #133	; 0x85
   2b5e6:	009b      	lsls	r3, r3, #2
   2b5e8:	18fb      	adds	r3, r7, r3
   2b5ea:	2224      	movs	r2, #36	; 0x24
   2b5ec:	0018      	movs	r0, r3
   2b5ee:	4b40      	ldr	r3, [pc, #256]	; (2b6f0 <f_unlink+0x248>)
   2b5f0:	4798      	blx	r3
					sdj.sclust = dclst;
   2b5f2:	2385      	movs	r3, #133	; 0x85
   2b5f4:	009b      	lsls	r3, r3, #2
   2b5f6:	18fb      	adds	r3, r7, r3
   2b5f8:	2297      	movs	r2, #151	; 0x97
   2b5fa:	0092      	lsls	r2, r2, #2
   2b5fc:	18ba      	adds	r2, r7, r2
   2b5fe:	6812      	ldr	r2, [r2, #0]
   2b600:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   2b602:	4b38      	ldr	r3, [pc, #224]	; (2b6e4 <f_unlink+0x23c>)
   2b604:	18fc      	adds	r4, r7, r3
   2b606:	2385      	movs	r3, #133	; 0x85
   2b608:	009b      	lsls	r3, r3, #2
   2b60a:	18fb      	adds	r3, r7, r3
   2b60c:	2102      	movs	r1, #2
   2b60e:	0018      	movs	r0, r3
   2b610:	4b38      	ldr	r3, [pc, #224]	; (2b6f4 <f_unlink+0x24c>)
   2b612:	4798      	blx	r3
   2b614:	0003      	movs	r3, r0
   2b616:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
   2b618:	4b32      	ldr	r3, [pc, #200]	; (2b6e4 <f_unlink+0x23c>)
   2b61a:	18fb      	adds	r3, r7, r3
   2b61c:	781b      	ldrb	r3, [r3, #0]
   2b61e:	2b00      	cmp	r3, #0
   2b620:	d11b      	bne.n	2b65a <f_unlink+0x1b2>
						res = dir_read(&sdj);
   2b622:	4b30      	ldr	r3, [pc, #192]	; (2b6e4 <f_unlink+0x23c>)
   2b624:	18fc      	adds	r4, r7, r3
   2b626:	2385      	movs	r3, #133	; 0x85
   2b628:	009b      	lsls	r3, r3, #2
   2b62a:	18fb      	adds	r3, r7, r3
   2b62c:	0018      	movs	r0, r3
   2b62e:	4b32      	ldr	r3, [pc, #200]	; (2b6f8 <f_unlink+0x250>)
   2b630:	4798      	blx	r3
   2b632:	0003      	movs	r3, r0
   2b634:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
   2b636:	4b2b      	ldr	r3, [pc, #172]	; (2b6e4 <f_unlink+0x23c>)
   2b638:	18fb      	adds	r3, r7, r3
   2b63a:	781b      	ldrb	r3, [r3, #0]
   2b63c:	2b00      	cmp	r3, #0
   2b63e:	d103      	bne.n	2b648 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
   2b640:	4b28      	ldr	r3, [pc, #160]	; (2b6e4 <f_unlink+0x23c>)
   2b642:	18fb      	adds	r3, r7, r3
   2b644:	2207      	movs	r2, #7
   2b646:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   2b648:	4b26      	ldr	r3, [pc, #152]	; (2b6e4 <f_unlink+0x23c>)
   2b64a:	18fb      	adds	r3, r7, r3
   2b64c:	781b      	ldrb	r3, [r3, #0]
   2b64e:	2b04      	cmp	r3, #4
   2b650:	d103      	bne.n	2b65a <f_unlink+0x1b2>
   2b652:	4b24      	ldr	r3, [pc, #144]	; (2b6e4 <f_unlink+0x23c>)
   2b654:	18fb      	adds	r3, r7, r3
   2b656:	2200      	movs	r2, #0
   2b658:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
   2b65a:	4b22      	ldr	r3, [pc, #136]	; (2b6e4 <f_unlink+0x23c>)
   2b65c:	18fb      	adds	r3, r7, r3
   2b65e:	781b      	ldrb	r3, [r3, #0]
   2b660:	2b00      	cmp	r3, #0
   2b662:	d134      	bne.n	2b6ce <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
   2b664:	4b1f      	ldr	r3, [pc, #124]	; (2b6e4 <f_unlink+0x23c>)
   2b666:	18fc      	adds	r4, r7, r3
   2b668:	238e      	movs	r3, #142	; 0x8e
   2b66a:	009b      	lsls	r3, r3, #2
   2b66c:	18fb      	adds	r3, r7, r3
   2b66e:	0018      	movs	r0, r3
   2b670:	4b22      	ldr	r3, [pc, #136]	; (2b6fc <f_unlink+0x254>)
   2b672:	4798      	blx	r3
   2b674:	0003      	movs	r3, r0
   2b676:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2b678:	4b1a      	ldr	r3, [pc, #104]	; (2b6e4 <f_unlink+0x23c>)
   2b67a:	18fb      	adds	r3, r7, r3
   2b67c:	781b      	ldrb	r3, [r3, #0]
   2b67e:	2b00      	cmp	r3, #0
   2b680:	d125      	bne.n	2b6ce <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
   2b682:	2397      	movs	r3, #151	; 0x97
   2b684:	009b      	lsls	r3, r3, #2
   2b686:	18fb      	adds	r3, r7, r3
   2b688:	681b      	ldr	r3, [r3, #0]
   2b68a:	2b00      	cmp	r3, #0
   2b68c:	d00f      	beq.n	2b6ae <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
   2b68e:	238e      	movs	r3, #142	; 0x8e
   2b690:	009b      	lsls	r3, r3, #2
   2b692:	18fb      	adds	r3, r7, r3
   2b694:	681b      	ldr	r3, [r3, #0]
   2b696:	4a13      	ldr	r2, [pc, #76]	; (2b6e4 <f_unlink+0x23c>)
   2b698:	18bc      	adds	r4, r7, r2
   2b69a:	2297      	movs	r2, #151	; 0x97
   2b69c:	0092      	lsls	r2, r2, #2
   2b69e:	18ba      	adds	r2, r7, r2
   2b6a0:	6812      	ldr	r2, [r2, #0]
   2b6a2:	0011      	movs	r1, r2
   2b6a4:	0018      	movs	r0, r3
   2b6a6:	4b16      	ldr	r3, [pc, #88]	; (2b700 <f_unlink+0x258>)
   2b6a8:	4798      	blx	r3
   2b6aa:	0003      	movs	r3, r0
   2b6ac:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
   2b6ae:	4b0d      	ldr	r3, [pc, #52]	; (2b6e4 <f_unlink+0x23c>)
   2b6b0:	18fb      	adds	r3, r7, r3
   2b6b2:	781b      	ldrb	r3, [r3, #0]
   2b6b4:	2b00      	cmp	r3, #0
   2b6b6:	d10a      	bne.n	2b6ce <f_unlink+0x226>
   2b6b8:	238e      	movs	r3, #142	; 0x8e
   2b6ba:	009b      	lsls	r3, r3, #2
   2b6bc:	18fb      	adds	r3, r7, r3
   2b6be:	681b      	ldr	r3, [r3, #0]
   2b6c0:	4a08      	ldr	r2, [pc, #32]	; (2b6e4 <f_unlink+0x23c>)
   2b6c2:	18bc      	adds	r4, r7, r2
   2b6c4:	0018      	movs	r0, r3
   2b6c6:	4b0f      	ldr	r3, [pc, #60]	; (2b704 <f_unlink+0x25c>)
   2b6c8:	4798      	blx	r3
   2b6ca:	0003      	movs	r3, r0
   2b6cc:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
   2b6ce:	4b05      	ldr	r3, [pc, #20]	; (2b6e4 <f_unlink+0x23c>)
   2b6d0:	18fb      	adds	r3, r7, r3
   2b6d2:	781b      	ldrb	r3, [r3, #0]
}
   2b6d4:	0018      	movs	r0, r3
   2b6d6:	46bd      	mov	sp, r7
   2b6d8:	239b      	movs	r3, #155	; 0x9b
   2b6da:	009b      	lsls	r3, r3, #2
   2b6dc:	449d      	add	sp, r3
   2b6de:	bd90      	pop	{r4, r7, pc}
   2b6e0:	fffffd94 	.word	0xfffffd94
   2b6e4:	00000267 	.word	0x00000267
   2b6e8:	0002a129 	.word	0x0002a129
   2b6ec:	00029f1d 	.word	0x00029f1d
   2b6f0:	00028245 	.word	0x00028245
   2b6f4:	00028b6d 	.word	0x00028b6d
   2b6f8:	000294d1 	.word	0x000294d1
   2b6fc:	000299fd 	.word	0x000299fd
   2b700:	00028969 	.word	0x00028969
   2b704:	000283f1 	.word	0x000283f1

0002b708 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2b708:	b580      	push	{r7, lr}
   2b70a:	b084      	sub	sp, #16
   2b70c:	af00      	add	r7, sp, #0
   2b70e:	0002      	movs	r2, r0
   2b710:	6039      	str	r1, [r7, #0]
   2b712:	1dbb      	adds	r3, r7, #6
   2b714:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2b716:	1dbb      	adds	r3, r7, #6
   2b718:	881b      	ldrh	r3, [r3, #0]
   2b71a:	2b7f      	cmp	r3, #127	; 0x7f
   2b71c:	d805      	bhi.n	2b72a <ff_convert+0x22>
		c = src;
   2b71e:	230e      	movs	r3, #14
   2b720:	18fb      	adds	r3, r7, r3
   2b722:	1dba      	adds	r2, r7, #6
   2b724:	8812      	ldrh	r2, [r2, #0]
   2b726:	801a      	strh	r2, [r3, #0]
   2b728:	e03a      	b.n	2b7a0 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2b72a:	683b      	ldr	r3, [r7, #0]
   2b72c:	2b00      	cmp	r3, #0
   2b72e:	d010      	beq.n	2b752 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2b730:	1dbb      	adds	r3, r7, #6
   2b732:	881b      	ldrh	r3, [r3, #0]
   2b734:	2bff      	cmp	r3, #255	; 0xff
   2b736:	d807      	bhi.n	2b748 <ff_convert+0x40>
   2b738:	1dbb      	adds	r3, r7, #6
   2b73a:	881b      	ldrh	r3, [r3, #0]
   2b73c:	3b80      	subs	r3, #128	; 0x80
   2b73e:	001a      	movs	r2, r3
   2b740:	4b1b      	ldr	r3, [pc, #108]	; (2b7b0 <ff_convert+0xa8>)
   2b742:	0052      	lsls	r2, r2, #1
   2b744:	5ad2      	ldrh	r2, [r2, r3]
   2b746:	e000      	b.n	2b74a <ff_convert+0x42>
   2b748:	2200      	movs	r2, #0
   2b74a:	230e      	movs	r3, #14
   2b74c:	18fb      	adds	r3, r7, r3
   2b74e:	801a      	strh	r2, [r3, #0]
   2b750:	e026      	b.n	2b7a0 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2b752:	230e      	movs	r3, #14
   2b754:	18fb      	adds	r3, r7, r3
   2b756:	2200      	movs	r2, #0
   2b758:	801a      	strh	r2, [r3, #0]
   2b75a:	e010      	b.n	2b77e <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2b75c:	230e      	movs	r3, #14
   2b75e:	18fb      	adds	r3, r7, r3
   2b760:	881a      	ldrh	r2, [r3, #0]
   2b762:	4b13      	ldr	r3, [pc, #76]	; (2b7b0 <ff_convert+0xa8>)
   2b764:	0052      	lsls	r2, r2, #1
   2b766:	5ad3      	ldrh	r3, [r2, r3]
   2b768:	1dba      	adds	r2, r7, #6
   2b76a:	8812      	ldrh	r2, [r2, #0]
   2b76c:	429a      	cmp	r2, r3
   2b76e:	d00c      	beq.n	2b78a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2b770:	230e      	movs	r3, #14
   2b772:	18fb      	adds	r3, r7, r3
   2b774:	881a      	ldrh	r2, [r3, #0]
   2b776:	230e      	movs	r3, #14
   2b778:	18fb      	adds	r3, r7, r3
   2b77a:	3201      	adds	r2, #1
   2b77c:	801a      	strh	r2, [r3, #0]
   2b77e:	230e      	movs	r3, #14
   2b780:	18fb      	adds	r3, r7, r3
   2b782:	881b      	ldrh	r3, [r3, #0]
   2b784:	2b7f      	cmp	r3, #127	; 0x7f
   2b786:	d9e9      	bls.n	2b75c <ff_convert+0x54>
   2b788:	e000      	b.n	2b78c <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2b78a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2b78c:	230e      	movs	r3, #14
   2b78e:	18fb      	adds	r3, r7, r3
   2b790:	881b      	ldrh	r3, [r3, #0]
   2b792:	3380      	adds	r3, #128	; 0x80
   2b794:	b29a      	uxth	r2, r3
   2b796:	230e      	movs	r3, #14
   2b798:	18fb      	adds	r3, r7, r3
   2b79a:	21ff      	movs	r1, #255	; 0xff
   2b79c:	400a      	ands	r2, r1
   2b79e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2b7a0:	230e      	movs	r3, #14
   2b7a2:	18fb      	adds	r3, r7, r3
   2b7a4:	881b      	ldrh	r3, [r3, #0]
}
   2b7a6:	0018      	movs	r0, r3
   2b7a8:	46bd      	mov	sp, r7
   2b7aa:	b004      	add	sp, #16
   2b7ac:	bd80      	pop	{r7, pc}
   2b7ae:	46c0      	nop			; (mov r8, r8)
   2b7b0:	0003799c 	.word	0x0003799c

0002b7b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2b7b4:	b580      	push	{r7, lr}
   2b7b6:	b084      	sub	sp, #16
   2b7b8:	af00      	add	r7, sp, #0
   2b7ba:	0002      	movs	r2, r0
   2b7bc:	1dbb      	adds	r3, r7, #6
   2b7be:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2b7c0:	2300      	movs	r3, #0
   2b7c2:	60fb      	str	r3, [r7, #12]
   2b7c4:	e002      	b.n	2b7cc <ff_wtoupper+0x18>
   2b7c6:	68fb      	ldr	r3, [r7, #12]
   2b7c8:	3301      	adds	r3, #1
   2b7ca:	60fb      	str	r3, [r7, #12]
   2b7cc:	4b0f      	ldr	r3, [pc, #60]	; (2b80c <ff_wtoupper+0x58>)
   2b7ce:	68fa      	ldr	r2, [r7, #12]
   2b7d0:	0052      	lsls	r2, r2, #1
   2b7d2:	5ad3      	ldrh	r3, [r2, r3]
   2b7d4:	2b00      	cmp	r3, #0
   2b7d6:	d007      	beq.n	2b7e8 <ff_wtoupper+0x34>
   2b7d8:	4b0c      	ldr	r3, [pc, #48]	; (2b80c <ff_wtoupper+0x58>)
   2b7da:	68fa      	ldr	r2, [r7, #12]
   2b7dc:	0052      	lsls	r2, r2, #1
   2b7de:	5ad3      	ldrh	r3, [r2, r3]
   2b7e0:	1dba      	adds	r2, r7, #6
   2b7e2:	8812      	ldrh	r2, [r2, #0]
   2b7e4:	429a      	cmp	r2, r3
   2b7e6:	d1ee      	bne.n	2b7c6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2b7e8:	4b08      	ldr	r3, [pc, #32]	; (2b80c <ff_wtoupper+0x58>)
   2b7ea:	68fa      	ldr	r2, [r7, #12]
   2b7ec:	0052      	lsls	r2, r2, #1
   2b7ee:	5ad3      	ldrh	r3, [r2, r3]
   2b7f0:	2b00      	cmp	r3, #0
   2b7f2:	d004      	beq.n	2b7fe <ff_wtoupper+0x4a>
   2b7f4:	4b06      	ldr	r3, [pc, #24]	; (2b810 <ff_wtoupper+0x5c>)
   2b7f6:	68fa      	ldr	r2, [r7, #12]
   2b7f8:	0052      	lsls	r2, r2, #1
   2b7fa:	5ad3      	ldrh	r3, [r2, r3]
   2b7fc:	e001      	b.n	2b802 <ff_wtoupper+0x4e>
   2b7fe:	1dbb      	adds	r3, r7, #6
   2b800:	881b      	ldrh	r3, [r3, #0]
}
   2b802:	0018      	movs	r0, r3
   2b804:	46bd      	mov	sp, r7
   2b806:	b004      	add	sp, #16
   2b808:	bd80      	pop	{r7, pc}
   2b80a:	46c0      	nop			; (mov r8, r8)
   2b80c:	00037a9c 	.word	0x00037a9c
   2b810:	00037c7c 	.word	0x00037c7c

0002b814 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2b814:	b580      	push	{r7, lr}
   2b816:	b084      	sub	sp, #16
   2b818:	af00      	add	r7, sp, #0
   2b81a:	60f8      	str	r0, [r7, #12]
   2b81c:	60b9      	str	r1, [r7, #8]
   2b81e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2b820:	68fb      	ldr	r3, [r7, #12]
   2b822:	68ba      	ldr	r2, [r7, #8]
   2b824:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2b826:	68fb      	ldr	r3, [r7, #12]
   2b828:	687a      	ldr	r2, [r7, #4]
   2b82a:	601a      	str	r2, [r3, #0]
}
   2b82c:	46c0      	nop			; (mov r8, r8)
   2b82e:	46bd      	mov	sp, r7
   2b830:	b004      	add	sp, #16
   2b832:	bd80      	pop	{r7, pc}

0002b834 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2b834:	b580      	push	{r7, lr}
   2b836:	b082      	sub	sp, #8
   2b838:	af00      	add	r7, sp, #0
   2b83a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2b83c:	687b      	ldr	r3, [r7, #4]
   2b83e:	681b      	ldr	r3, [r3, #0]
   2b840:	4a07      	ldr	r2, [pc, #28]	; (2b860 <getNextPacketId+0x2c>)
   2b842:	4293      	cmp	r3, r2
   2b844:	d003      	beq.n	2b84e <getNextPacketId+0x1a>
   2b846:	687b      	ldr	r3, [r7, #4]
   2b848:	681b      	ldr	r3, [r3, #0]
   2b84a:	1c5a      	adds	r2, r3, #1
   2b84c:	e000      	b.n	2b850 <getNextPacketId+0x1c>
   2b84e:	2201      	movs	r2, #1
   2b850:	687b      	ldr	r3, [r7, #4]
   2b852:	601a      	str	r2, [r3, #0]
   2b854:	687b      	ldr	r3, [r7, #4]
   2b856:	681b      	ldr	r3, [r3, #0]
}
   2b858:	0018      	movs	r0, r3
   2b85a:	46bd      	mov	sp, r7
   2b85c:	b002      	add	sp, #8
   2b85e:	bd80      	pop	{r7, pc}
   2b860:	0000ffff 	.word	0x0000ffff

0002b864 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2b864:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b866:	b087      	sub	sp, #28
   2b868:	af00      	add	r7, sp, #0
   2b86a:	60f8      	str	r0, [r7, #12]
   2b86c:	60b9      	str	r1, [r7, #8]
   2b86e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2b870:	2301      	movs	r3, #1
   2b872:	425b      	negs	r3, r3
   2b874:	617b      	str	r3, [r7, #20]
        sent = 0;
   2b876:	2300      	movs	r3, #0
   2b878:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2b87a:	e01a      	b.n	2b8b2 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2b87c:	68fb      	ldr	r3, [r7, #12]
   2b87e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   2b880:	68dc      	ldr	r4, [r3, #12]
   2b882:	68fb      	ldr	r3, [r7, #12]
   2b884:	6f9d      	ldr	r5, [r3, #120]	; 0x78
   2b886:	68fb      	ldr	r3, [r7, #12]
   2b888:	691a      	ldr	r2, [r3, #16]
   2b88a:	693b      	ldr	r3, [r7, #16]
   2b88c:	18d6      	adds	r6, r2, r3
   2b88e:	687b      	ldr	r3, [r7, #4]
   2b890:	0018      	movs	r0, r3
   2b892:	4b1a      	ldr	r3, [pc, #104]	; (2b8fc <sendPacket+0x98>)
   2b894:	4798      	blx	r3
   2b896:	0003      	movs	r3, r0
   2b898:	68ba      	ldr	r2, [r7, #8]
   2b89a:	0031      	movs	r1, r6
   2b89c:	0028      	movs	r0, r5
   2b89e:	47a0      	blx	r4
   2b8a0:	0003      	movs	r3, r0
   2b8a2:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2b8a4:	697b      	ldr	r3, [r7, #20]
   2b8a6:	2b00      	cmp	r3, #0
   2b8a8:	db0e      	blt.n	2b8c8 <sendPacket+0x64>
            break;
        sent += rc;
   2b8aa:	693a      	ldr	r2, [r7, #16]
   2b8ac:	697b      	ldr	r3, [r7, #20]
   2b8ae:	18d3      	adds	r3, r2, r3
   2b8b0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2b8b2:	693a      	ldr	r2, [r7, #16]
   2b8b4:	68bb      	ldr	r3, [r7, #8]
   2b8b6:	429a      	cmp	r2, r3
   2b8b8:	da07      	bge.n	2b8ca <sendPacket+0x66>
   2b8ba:	687b      	ldr	r3, [r7, #4]
   2b8bc:	0018      	movs	r0, r3
   2b8be:	4b10      	ldr	r3, [pc, #64]	; (2b900 <sendPacket+0x9c>)
   2b8c0:	4798      	blx	r3
   2b8c2:	1e03      	subs	r3, r0, #0
   2b8c4:	d0da      	beq.n	2b87c <sendPacket+0x18>
   2b8c6:	e000      	b.n	2b8ca <sendPacket+0x66>
            break;
   2b8c8:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2b8ca:	693a      	ldr	r2, [r7, #16]
   2b8cc:	68bb      	ldr	r3, [r7, #8]
   2b8ce:	429a      	cmp	r2, r3
   2b8d0:	d10b      	bne.n	2b8ea <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2b8d2:	68fb      	ldr	r3, [r7, #12]
   2b8d4:	337c      	adds	r3, #124	; 0x7c
   2b8d6:	001a      	movs	r2, r3
   2b8d8:	68fb      	ldr	r3, [r7, #12]
   2b8da:	699b      	ldr	r3, [r3, #24]
   2b8dc:	0019      	movs	r1, r3
   2b8de:	0010      	movs	r0, r2
   2b8e0:	4b08      	ldr	r3, [pc, #32]	; (2b904 <sendPacket+0xa0>)
   2b8e2:	4798      	blx	r3
        rc = SUCCESS;
   2b8e4:	2300      	movs	r3, #0
   2b8e6:	617b      	str	r3, [r7, #20]
   2b8e8:	e002      	b.n	2b8f0 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2b8ea:	2301      	movs	r3, #1
   2b8ec:	425b      	negs	r3, r3
   2b8ee:	617b      	str	r3, [r7, #20]
    return rc;
   2b8f0:	697b      	ldr	r3, [r7, #20]
}
   2b8f2:	0018      	movs	r0, r3
   2b8f4:	46bd      	mov	sp, r7
   2b8f6:	b007      	add	sp, #28
   2b8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b8fa:	46c0      	nop			; (mov r8, r8)
   2b8fc:	0002c6c9 	.word	0x0002c6c9
   2b900:	0002c64d 	.word	0x0002c64d
   2b904:	0002c6a1 	.word	0x0002c6a1

0002b908 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2b908:	b580      	push	{r7, lr}
   2b90a:	b086      	sub	sp, #24
   2b90c:	af00      	add	r7, sp, #0
   2b90e:	60f8      	str	r0, [r7, #12]
   2b910:	60b9      	str	r1, [r7, #8]
   2b912:	607a      	str	r2, [r7, #4]
   2b914:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2b916:	68fb      	ldr	r3, [r7, #12]
   2b918:	68ba      	ldr	r2, [r7, #8]
   2b91a:	679a      	str	r2, [r3, #120]	; 0x78
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2b91c:	2300      	movs	r3, #0
   2b91e:	617b      	str	r3, [r7, #20]
   2b920:	e00a      	b.n	2b938 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2b922:	68fa      	ldr	r2, [r7, #12]
   2b924:	697b      	ldr	r3, [r7, #20]
   2b926:	3304      	adds	r3, #4
   2b928:	00db      	lsls	r3, r3, #3
   2b92a:	18d3      	adds	r3, r2, r3
   2b92c:	3304      	adds	r3, #4
   2b92e:	2200      	movs	r2, #0
   2b930:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2b932:	697b      	ldr	r3, [r7, #20]
   2b934:	3301      	adds	r3, #1
   2b936:	617b      	str	r3, [r7, #20]
   2b938:	697b      	ldr	r3, [r7, #20]
   2b93a:	2b09      	cmp	r3, #9
   2b93c:	ddf1      	ble.n	2b922 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2b93e:	68fb      	ldr	r3, [r7, #12]
   2b940:	687a      	ldr	r2, [r7, #4]
   2b942:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2b944:	68fb      	ldr	r3, [r7, #12]
   2b946:	683a      	ldr	r2, [r7, #0]
   2b948:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2b94a:	68fb      	ldr	r3, [r7, #12]
   2b94c:	6a3a      	ldr	r2, [r7, #32]
   2b94e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2b950:	68fb      	ldr	r3, [r7, #12]
   2b952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2b954:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2b956:	68fb      	ldr	r3, [r7, #12]
   2b958:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2b95a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2b95c:	68fb      	ldr	r3, [r7, #12]
   2b95e:	2200      	movs	r2, #0
   2b960:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2b962:	68fb      	ldr	r3, [r7, #12]
   2b964:	2200      	movs	r2, #0
   2b966:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2b968:	68fb      	ldr	r3, [r7, #12]
   2b96a:	2200      	movs	r2, #0
   2b96c:	675a      	str	r2, [r3, #116]	; 0x74
	c->next_packetid = 1;
   2b96e:	68fb      	ldr	r3, [r7, #12]
   2b970:	2201      	movs	r2, #1
   2b972:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2b974:	68fb      	ldr	r3, [r7, #12]
   2b976:	337c      	adds	r3, #124	; 0x7c
   2b978:	0018      	movs	r0, r3
   2b97a:	4b03      	ldr	r3, [pc, #12]	; (2b988 <MQTTClientInit+0x80>)
   2b97c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2b97e:	46c0      	nop			; (mov r8, r8)
   2b980:	46bd      	mov	sp, r7
   2b982:	b006      	add	sp, #24
   2b984:	bd80      	pop	{r7, pc}
   2b986:	46c0      	nop			; (mov r8, r8)
   2b988:	0002c6f1 	.word	0x0002c6f1

0002b98c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2b98c:	b590      	push	{r4, r7, lr}
   2b98e:	b08b      	sub	sp, #44	; 0x2c
   2b990:	af00      	add	r7, sp, #0
   2b992:	60f8      	str	r0, [r7, #12]
   2b994:	60b9      	str	r1, [r7, #8]
   2b996:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2b998:	2301      	movs	r3, #1
   2b99a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2b99c:	2300      	movs	r3, #0
   2b99e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2b9a0:	2304      	movs	r3, #4
   2b9a2:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2b9a4:	68bb      	ldr	r3, [r7, #8]
   2b9a6:	2200      	movs	r2, #0
   2b9a8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2b9aa:	2301      	movs	r3, #1
   2b9ac:	425b      	negs	r3, r3
   2b9ae:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2b9b0:	6a3b      	ldr	r3, [r7, #32]
   2b9b2:	3301      	adds	r3, #1
   2b9b4:	623b      	str	r3, [r7, #32]
   2b9b6:	6a3a      	ldr	r2, [r7, #32]
   2b9b8:	69fb      	ldr	r3, [r7, #28]
   2b9ba:	429a      	cmp	r2, r3
   2b9bc:	dd03      	ble.n	2b9c6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2b9be:	2301      	movs	r3, #1
   2b9c0:	425b      	negs	r3, r3
   2b9c2:	61bb      	str	r3, [r7, #24]
            goto exit;
   2b9c4:	e026      	b.n	2ba14 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2b9c6:	68fb      	ldr	r3, [r7, #12]
   2b9c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   2b9ca:	689c      	ldr	r4, [r3, #8]
   2b9cc:	68fb      	ldr	r3, [r7, #12]
   2b9ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
   2b9d0:	687b      	ldr	r3, [r7, #4]
   2b9d2:	2217      	movs	r2, #23
   2b9d4:	18b9      	adds	r1, r7, r2
   2b9d6:	2201      	movs	r2, #1
   2b9d8:	47a0      	blx	r4
   2b9da:	0003      	movs	r3, r0
   2b9dc:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2b9de:	69bb      	ldr	r3, [r7, #24]
   2b9e0:	2b01      	cmp	r3, #1
   2b9e2:	d116      	bne.n	2ba12 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2b9e4:	68bb      	ldr	r3, [r7, #8]
   2b9e6:	681a      	ldr	r2, [r3, #0]
   2b9e8:	2317      	movs	r3, #23
   2b9ea:	18fb      	adds	r3, r7, r3
   2b9ec:	781b      	ldrb	r3, [r3, #0]
   2b9ee:	0019      	movs	r1, r3
   2b9f0:	237f      	movs	r3, #127	; 0x7f
   2b9f2:	400b      	ands	r3, r1
   2b9f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2b9f6:	434b      	muls	r3, r1
   2b9f8:	18d2      	adds	r2, r2, r3
   2b9fa:	68bb      	ldr	r3, [r7, #8]
   2b9fc:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ba00:	01db      	lsls	r3, r3, #7
   2ba02:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2ba04:	2317      	movs	r3, #23
   2ba06:	18fb      	adds	r3, r7, r3
   2ba08:	781b      	ldrb	r3, [r3, #0]
   2ba0a:	b25b      	sxtb	r3, r3
   2ba0c:	2b00      	cmp	r3, #0
   2ba0e:	dbcc      	blt.n	2b9aa <decodePacket+0x1e>
   2ba10:	e000      	b.n	2ba14 <decodePacket+0x88>
            goto exit;
   2ba12:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2ba14:	6a3b      	ldr	r3, [r7, #32]
}
   2ba16:	0018      	movs	r0, r3
   2ba18:	46bd      	mov	sp, r7
   2ba1a:	b00b      	add	sp, #44	; 0x2c
   2ba1c:	bd90      	pop	{r4, r7, pc}
	...

0002ba20 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba22:	46c6      	mov	lr, r8
   2ba24:	b500      	push	{lr}
   2ba26:	b086      	sub	sp, #24
   2ba28:	af00      	add	r7, sp, #0
   2ba2a:	6078      	str	r0, [r7, #4]
   2ba2c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2ba2e:	2301      	movs	r3, #1
   2ba30:	425b      	negs	r3, r3
   2ba32:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2ba34:	2300      	movs	r3, #0
   2ba36:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2ba38:	2300      	movs	r3, #0
   2ba3a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2ba3c:	2300      	movs	r3, #0
   2ba3e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2ba40:	687b      	ldr	r3, [r7, #4]
   2ba42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   2ba44:	689c      	ldr	r4, [r3, #8]
   2ba46:	687b      	ldr	r3, [r7, #4]
   2ba48:	6f9d      	ldr	r5, [r3, #120]	; 0x78
   2ba4a:	687b      	ldr	r3, [r7, #4]
   2ba4c:	695e      	ldr	r6, [r3, #20]
   2ba4e:	683b      	ldr	r3, [r7, #0]
   2ba50:	0018      	movs	r0, r3
   2ba52:	4b2b      	ldr	r3, [pc, #172]	; (2bb00 <readPacket+0xe0>)
   2ba54:	4798      	blx	r3
   2ba56:	0003      	movs	r3, r0
   2ba58:	2201      	movs	r2, #1
   2ba5a:	0031      	movs	r1, r6
   2ba5c:	0028      	movs	r0, r5
   2ba5e:	47a0      	blx	r4
   2ba60:	0003      	movs	r3, r0
   2ba62:	2b01      	cmp	r3, #1
   2ba64:	d141      	bne.n	2baea <readPacket+0xca>
        goto exit;

    len = 1;
   2ba66:	2301      	movs	r3, #1
   2ba68:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2ba6a:	683b      	ldr	r3, [r7, #0]
   2ba6c:	0018      	movs	r0, r3
   2ba6e:	4b24      	ldr	r3, [pc, #144]	; (2bb00 <readPacket+0xe0>)
   2ba70:	4798      	blx	r3
   2ba72:	0002      	movs	r2, r0
   2ba74:	2308      	movs	r3, #8
   2ba76:	18f9      	adds	r1, r7, r3
   2ba78:	687b      	ldr	r3, [r7, #4]
   2ba7a:	0018      	movs	r0, r3
   2ba7c:	4b21      	ldr	r3, [pc, #132]	; (2bb04 <readPacket+0xe4>)
   2ba7e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2ba80:	687b      	ldr	r3, [r7, #4]
   2ba82:	695b      	ldr	r3, [r3, #20]
   2ba84:	3301      	adds	r3, #1
   2ba86:	68ba      	ldr	r2, [r7, #8]
   2ba88:	0011      	movs	r1, r2
   2ba8a:	0018      	movs	r0, r3
   2ba8c:	4b1e      	ldr	r3, [pc, #120]	; (2bb08 <readPacket+0xe8>)
   2ba8e:	4798      	blx	r3
   2ba90:	0002      	movs	r2, r0
   2ba92:	693b      	ldr	r3, [r7, #16]
   2ba94:	189b      	adds	r3, r3, r2
   2ba96:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2ba98:	68bb      	ldr	r3, [r7, #8]
   2ba9a:	2b00      	cmp	r3, #0
   2ba9c:	dd17      	ble.n	2bace <readPacket+0xae>
   2ba9e:	687b      	ldr	r3, [r7, #4]
   2baa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   2baa2:	689c      	ldr	r4, [r3, #8]
   2baa4:	687b      	ldr	r3, [r7, #4]
   2baa6:	6f9d      	ldr	r5, [r3, #120]	; 0x78
   2baa8:	687b      	ldr	r3, [r7, #4]
   2baaa:	695a      	ldr	r2, [r3, #20]
   2baac:	693b      	ldr	r3, [r7, #16]
   2baae:	18d6      	adds	r6, r2, r3
   2bab0:	68bb      	ldr	r3, [r7, #8]
   2bab2:	4698      	mov	r8, r3
   2bab4:	683b      	ldr	r3, [r7, #0]
   2bab6:	0018      	movs	r0, r3
   2bab8:	4b11      	ldr	r3, [pc, #68]	; (2bb00 <readPacket+0xe0>)
   2baba:	4798      	blx	r3
   2babc:	0003      	movs	r3, r0
   2babe:	4642      	mov	r2, r8
   2bac0:	0031      	movs	r1, r6
   2bac2:	0028      	movs	r0, r5
   2bac4:	47a0      	blx	r4
   2bac6:	0002      	movs	r2, r0
   2bac8:	68bb      	ldr	r3, [r7, #8]
   2baca:	429a      	cmp	r2, r3
   2bacc:	d10f      	bne.n	2baee <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2bace:	687b      	ldr	r3, [r7, #4]
   2bad0:	695b      	ldr	r3, [r3, #20]
   2bad2:	781a      	ldrb	r2, [r3, #0]
   2bad4:	230c      	movs	r3, #12
   2bad6:	18fb      	adds	r3, r7, r3
   2bad8:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2bada:	230c      	movs	r3, #12
   2badc:	18fb      	adds	r3, r7, r3
   2bade:	781b      	ldrb	r3, [r3, #0]
   2bae0:	061b      	lsls	r3, r3, #24
   2bae2:	0f1b      	lsrs	r3, r3, #28
   2bae4:	b2db      	uxtb	r3, r3
   2bae6:	617b      	str	r3, [r7, #20]
   2bae8:	e002      	b.n	2baf0 <readPacket+0xd0>
        goto exit;
   2baea:	46c0      	nop			; (mov r8, r8)
   2baec:	e000      	b.n	2baf0 <readPacket+0xd0>
        goto exit;
   2baee:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2baf0:	697b      	ldr	r3, [r7, #20]
}
   2baf2:	0018      	movs	r0, r3
   2baf4:	46bd      	mov	sp, r7
   2baf6:	b006      	add	sp, #24
   2baf8:	bc04      	pop	{r2}
   2bafa:	4690      	mov	r8, r2
   2bafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bafe:	46c0      	nop			; (mov r8, r8)
   2bb00:	0002c6c9 	.word	0x0002c6c9
   2bb04:	0002b98d 	.word	0x0002b98d
   2bb08:	0002d4a5 	.word	0x0002d4a5

0002bb0c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2bb0c:	b580      	push	{r7, lr}
   2bb0e:	b086      	sub	sp, #24
   2bb10:	af00      	add	r7, sp, #0
   2bb12:	6078      	str	r0, [r7, #4]
   2bb14:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2bb16:	687b      	ldr	r3, [r7, #4]
   2bb18:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2bb1a:	683b      	ldr	r3, [r7, #0]
   2bb1c:	689b      	ldr	r3, [r3, #8]
   2bb1e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2bb20:	683b      	ldr	r3, [r7, #0]
   2bb22:	685b      	ldr	r3, [r3, #4]
   2bb24:	001a      	movs	r2, r3
   2bb26:	693b      	ldr	r3, [r7, #16]
   2bb28:	189b      	adds	r3, r3, r2
   2bb2a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2bb2c:	e039      	b.n	2bba2 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2bb2e:	693b      	ldr	r3, [r7, #16]
   2bb30:	781b      	ldrb	r3, [r3, #0]
   2bb32:	2b2f      	cmp	r3, #47	; 0x2f
   2bb34:	d103      	bne.n	2bb3e <isTopicMatched+0x32>
   2bb36:	697b      	ldr	r3, [r7, #20]
   2bb38:	781b      	ldrb	r3, [r3, #0]
   2bb3a:	2b2f      	cmp	r3, #47	; 0x2f
   2bb3c:	d13a      	bne.n	2bbb4 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2bb3e:	697b      	ldr	r3, [r7, #20]
   2bb40:	781b      	ldrb	r3, [r3, #0]
   2bb42:	2b2b      	cmp	r3, #43	; 0x2b
   2bb44:	d009      	beq.n	2bb5a <isTopicMatched+0x4e>
   2bb46:	697b      	ldr	r3, [r7, #20]
   2bb48:	781b      	ldrb	r3, [r3, #0]
   2bb4a:	2b23      	cmp	r3, #35	; 0x23
   2bb4c:	d005      	beq.n	2bb5a <isTopicMatched+0x4e>
   2bb4e:	697b      	ldr	r3, [r7, #20]
   2bb50:	781a      	ldrb	r2, [r3, #0]
   2bb52:	693b      	ldr	r3, [r7, #16]
   2bb54:	781b      	ldrb	r3, [r3, #0]
   2bb56:	429a      	cmp	r2, r3
   2bb58:	d12e      	bne.n	2bbb8 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2bb5a:	697b      	ldr	r3, [r7, #20]
   2bb5c:	781b      	ldrb	r3, [r3, #0]
   2bb5e:	2b2b      	cmp	r3, #43	; 0x2b
   2bb60:	d112      	bne.n	2bb88 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2bb62:	693b      	ldr	r3, [r7, #16]
   2bb64:	3301      	adds	r3, #1
   2bb66:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2bb68:	e005      	b.n	2bb76 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2bb6a:	693b      	ldr	r3, [r7, #16]
   2bb6c:	3301      	adds	r3, #1
   2bb6e:	613b      	str	r3, [r7, #16]
   2bb70:	693b      	ldr	r3, [r7, #16]
   2bb72:	3301      	adds	r3, #1
   2bb74:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2bb76:	68fa      	ldr	r2, [r7, #12]
   2bb78:	68bb      	ldr	r3, [r7, #8]
   2bb7a:	429a      	cmp	r2, r3
   2bb7c:	d20b      	bcs.n	2bb96 <isTopicMatched+0x8a>
   2bb7e:	68fb      	ldr	r3, [r7, #12]
   2bb80:	781b      	ldrb	r3, [r3, #0]
   2bb82:	2b2f      	cmp	r3, #47	; 0x2f
   2bb84:	d1f1      	bne.n	2bb6a <isTopicMatched+0x5e>
   2bb86:	e006      	b.n	2bb96 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2bb88:	697b      	ldr	r3, [r7, #20]
   2bb8a:	781b      	ldrb	r3, [r3, #0]
   2bb8c:	2b23      	cmp	r3, #35	; 0x23
   2bb8e:	d102      	bne.n	2bb96 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2bb90:	68bb      	ldr	r3, [r7, #8]
   2bb92:	3b01      	subs	r3, #1
   2bb94:	613b      	str	r3, [r7, #16]
        curf++;
   2bb96:	697b      	ldr	r3, [r7, #20]
   2bb98:	3301      	adds	r3, #1
   2bb9a:	617b      	str	r3, [r7, #20]
        curn++;
   2bb9c:	693b      	ldr	r3, [r7, #16]
   2bb9e:	3301      	adds	r3, #1
   2bba0:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2bba2:	697b      	ldr	r3, [r7, #20]
   2bba4:	781b      	ldrb	r3, [r3, #0]
   2bba6:	2b00      	cmp	r3, #0
   2bba8:	d007      	beq.n	2bbba <isTopicMatched+0xae>
   2bbaa:	693a      	ldr	r2, [r7, #16]
   2bbac:	68bb      	ldr	r3, [r7, #8]
   2bbae:	429a      	cmp	r2, r3
   2bbb0:	d3bd      	bcc.n	2bb2e <isTopicMatched+0x22>
   2bbb2:	e002      	b.n	2bbba <isTopicMatched+0xae>
            break;
   2bbb4:	46c0      	nop			; (mov r8, r8)
   2bbb6:	e000      	b.n	2bbba <isTopicMatched+0xae>
            break;
   2bbb8:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2bbba:	693a      	ldr	r2, [r7, #16]
   2bbbc:	68bb      	ldr	r3, [r7, #8]
   2bbbe:	429a      	cmp	r2, r3
   2bbc0:	d105      	bne.n	2bbce <isTopicMatched+0xc2>
   2bbc2:	697b      	ldr	r3, [r7, #20]
   2bbc4:	781b      	ldrb	r3, [r3, #0]
   2bbc6:	2b00      	cmp	r3, #0
   2bbc8:	d101      	bne.n	2bbce <isTopicMatched+0xc2>
   2bbca:	2301      	movs	r3, #1
   2bbcc:	e000      	b.n	2bbd0 <isTopicMatched+0xc4>
   2bbce:	2300      	movs	r3, #0
   2bbd0:	b2db      	uxtb	r3, r3
}
   2bbd2:	0018      	movs	r0, r3
   2bbd4:	46bd      	mov	sp, r7
   2bbd6:	b006      	add	sp, #24
   2bbd8:	bd80      	pop	{r7, pc}
	...

0002bbdc <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2bbdc:	b580      	push	{r7, lr}
   2bbde:	b08a      	sub	sp, #40	; 0x28
   2bbe0:	af00      	add	r7, sp, #0
   2bbe2:	60f8      	str	r0, [r7, #12]
   2bbe4:	60b9      	str	r1, [r7, #8]
   2bbe6:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2bbe8:	2301      	movs	r3, #1
   2bbea:	425b      	negs	r3, r3
   2bbec:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2bbee:	2300      	movs	r3, #0
   2bbf0:	627b      	str	r3, [r7, #36]	; 0x24
   2bbf2:	e044      	b.n	2bc7e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2bbf4:	68fa      	ldr	r2, [r7, #12]
   2bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bbf8:	3304      	adds	r3, #4
   2bbfa:	00db      	lsls	r3, r3, #3
   2bbfc:	18d3      	adds	r3, r2, r3
   2bbfe:	3304      	adds	r3, #4
   2bc00:	681b      	ldr	r3, [r3, #0]
   2bc02:	2b00      	cmp	r3, #0
   2bc04:	d038      	beq.n	2bc78 <deliverMessage+0x9c>
   2bc06:	68fa      	ldr	r2, [r7, #12]
   2bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bc0a:	3304      	adds	r3, #4
   2bc0c:	00db      	lsls	r3, r3, #3
   2bc0e:	18d3      	adds	r3, r2, r3
   2bc10:	3304      	adds	r3, #4
   2bc12:	681a      	ldr	r2, [r3, #0]
   2bc14:	68bb      	ldr	r3, [r7, #8]
   2bc16:	0011      	movs	r1, r2
   2bc18:	0018      	movs	r0, r3
   2bc1a:	4b28      	ldr	r3, [pc, #160]	; (2bcbc <deliverMessage+0xe0>)
   2bc1c:	4798      	blx	r3
   2bc1e:	1e03      	subs	r3, r0, #0
   2bc20:	d10d      	bne.n	2bc3e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2bc22:	68fa      	ldr	r2, [r7, #12]
   2bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bc26:	3304      	adds	r3, #4
   2bc28:	00db      	lsls	r3, r3, #3
   2bc2a:	18d3      	adds	r3, r2, r3
   2bc2c:	3304      	adds	r3, #4
   2bc2e:	681b      	ldr	r3, [r3, #0]
   2bc30:	68ba      	ldr	r2, [r7, #8]
   2bc32:	0011      	movs	r1, r2
   2bc34:	0018      	movs	r0, r3
   2bc36:	4b22      	ldr	r3, [pc, #136]	; (2bcc0 <deliverMessage+0xe4>)
   2bc38:	4798      	blx	r3
   2bc3a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2bc3c:	d01c      	beq.n	2bc78 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2bc3e:	68fa      	ldr	r2, [r7, #12]
   2bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bc42:	3304      	adds	r3, #4
   2bc44:	00db      	lsls	r3, r3, #3
   2bc46:	18d3      	adds	r3, r2, r3
   2bc48:	3308      	adds	r3, #8
   2bc4a:	681b      	ldr	r3, [r3, #0]
   2bc4c:	2b00      	cmp	r3, #0
   2bc4e:	d013      	beq.n	2bc78 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2bc50:	687a      	ldr	r2, [r7, #4]
   2bc52:	68b9      	ldr	r1, [r7, #8]
   2bc54:	2318      	movs	r3, #24
   2bc56:	18fb      	adds	r3, r7, r3
   2bc58:	0018      	movs	r0, r3
   2bc5a:	4b1a      	ldr	r3, [pc, #104]	; (2bcc4 <deliverMessage+0xe8>)
   2bc5c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2bc5e:	68fa      	ldr	r2, [r7, #12]
   2bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bc62:	3304      	adds	r3, #4
   2bc64:	00db      	lsls	r3, r3, #3
   2bc66:	18d3      	adds	r3, r2, r3
   2bc68:	3308      	adds	r3, #8
   2bc6a:	681b      	ldr	r3, [r3, #0]
   2bc6c:	2218      	movs	r2, #24
   2bc6e:	18ba      	adds	r2, r7, r2
   2bc70:	0010      	movs	r0, r2
   2bc72:	4798      	blx	r3
                rc = SUCCESS;
   2bc74:	2300      	movs	r3, #0
   2bc76:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bc7a:	3301      	adds	r3, #1
   2bc7c:	627b      	str	r3, [r7, #36]	; 0x24
   2bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bc80:	2b09      	cmp	r3, #9
   2bc82:	ddb7      	ble.n	2bbf4 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2bc84:	6a3b      	ldr	r3, [r7, #32]
   2bc86:	3301      	adds	r3, #1
   2bc88:	d112      	bne.n	2bcb0 <deliverMessage+0xd4>
   2bc8a:	68fb      	ldr	r3, [r7, #12]
   2bc8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   2bc8e:	2b00      	cmp	r3, #0
   2bc90:	d00e      	beq.n	2bcb0 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2bc92:	687a      	ldr	r2, [r7, #4]
   2bc94:	68b9      	ldr	r1, [r7, #8]
   2bc96:	2310      	movs	r3, #16
   2bc98:	18fb      	adds	r3, r7, r3
   2bc9a:	0018      	movs	r0, r3
   2bc9c:	4b09      	ldr	r3, [pc, #36]	; (2bcc4 <deliverMessage+0xe8>)
   2bc9e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2bca0:	68fb      	ldr	r3, [r7, #12]
   2bca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   2bca4:	2210      	movs	r2, #16
   2bca6:	18ba      	adds	r2, r7, r2
   2bca8:	0010      	movs	r0, r2
   2bcaa:	4798      	blx	r3
        rc = SUCCESS;
   2bcac:	2300      	movs	r3, #0
   2bcae:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2bcb0:	6a3b      	ldr	r3, [r7, #32]
}
   2bcb2:	0018      	movs	r0, r3
   2bcb4:	46bd      	mov	sp, r7
   2bcb6:	b00a      	add	sp, #40	; 0x28
   2bcb8:	bd80      	pop	{r7, pc}
   2bcba:	46c0      	nop			; (mov r8, r8)
   2bcbc:	0002d8b9 	.word	0x0002d8b9
   2bcc0:	0002bb0d 	.word	0x0002bb0d
   2bcc4:	0002b815 	.word	0x0002b815

0002bcc8 <keepalive>:


int keepalive(MQTTClient* c)
{
   2bcc8:	b580      	push	{r7, lr}
   2bcca:	b088      	sub	sp, #32
   2bccc:	af00      	add	r7, sp, #0
   2bcce:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2bcd0:	2301      	movs	r3, #1
   2bcd2:	425b      	negs	r3, r3
   2bcd4:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2bcd6:	687b      	ldr	r3, [r7, #4]
   2bcd8:	699b      	ldr	r3, [r3, #24]
   2bcda:	2b00      	cmp	r3, #0
   2bcdc:	d102      	bne.n	2bce4 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2bcde:	2300      	movs	r3, #0
   2bce0:	61fb      	str	r3, [r7, #28]
        goto exit;
   2bce2:	e033      	b.n	2bd4c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2bce4:	687b      	ldr	r3, [r7, #4]
   2bce6:	337c      	adds	r3, #124	; 0x7c
   2bce8:	0018      	movs	r0, r3
   2bcea:	4b1b      	ldr	r3, [pc, #108]	; (2bd58 <keepalive+0x90>)
   2bcec:	4798      	blx	r3
   2bcee:	1e03      	subs	r3, r0, #0
   2bcf0:	d02c      	beq.n	2bd4c <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2bcf2:	687b      	ldr	r3, [r7, #4]
   2bcf4:	7f1b      	ldrb	r3, [r3, #28]
   2bcf6:	2b00      	cmp	r3, #0
   2bcf8:	d128      	bne.n	2bd4c <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2bcfa:	230c      	movs	r3, #12
   2bcfc:	18fb      	adds	r3, r7, r3
   2bcfe:	0018      	movs	r0, r3
   2bd00:	4b16      	ldr	r3, [pc, #88]	; (2bd5c <keepalive+0x94>)
   2bd02:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2bd04:	23fa      	movs	r3, #250	; 0xfa
   2bd06:	009a      	lsls	r2, r3, #2
   2bd08:	230c      	movs	r3, #12
   2bd0a:	18fb      	adds	r3, r7, r3
   2bd0c:	0011      	movs	r1, r2
   2bd0e:	0018      	movs	r0, r3
   2bd10:	4b13      	ldr	r3, [pc, #76]	; (2bd60 <keepalive+0x98>)
   2bd12:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2bd14:	687b      	ldr	r3, [r7, #4]
   2bd16:	691a      	ldr	r2, [r3, #16]
   2bd18:	687b      	ldr	r3, [r7, #4]
   2bd1a:	689b      	ldr	r3, [r3, #8]
   2bd1c:	0019      	movs	r1, r3
   2bd1e:	0010      	movs	r0, r2
   2bd20:	4b10      	ldr	r3, [pc, #64]	; (2bd64 <keepalive+0x9c>)
   2bd22:	4798      	blx	r3
   2bd24:	0003      	movs	r3, r0
   2bd26:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2bd28:	69bb      	ldr	r3, [r7, #24]
   2bd2a:	2b00      	cmp	r3, #0
   2bd2c:	dd0e      	ble.n	2bd4c <keepalive+0x84>
   2bd2e:	230c      	movs	r3, #12
   2bd30:	18fa      	adds	r2, r7, r3
   2bd32:	69b9      	ldr	r1, [r7, #24]
   2bd34:	687b      	ldr	r3, [r7, #4]
   2bd36:	0018      	movs	r0, r3
   2bd38:	4b0b      	ldr	r3, [pc, #44]	; (2bd68 <keepalive+0xa0>)
   2bd3a:	4798      	blx	r3
   2bd3c:	0003      	movs	r3, r0
   2bd3e:	61fb      	str	r3, [r7, #28]
   2bd40:	69fb      	ldr	r3, [r7, #28]
   2bd42:	2b00      	cmp	r3, #0
   2bd44:	d102      	bne.n	2bd4c <keepalive+0x84>
                c->ping_outstanding = 1;
   2bd46:	687b      	ldr	r3, [r7, #4]
   2bd48:	2201      	movs	r2, #1
   2bd4a:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2bd4c:	69fb      	ldr	r3, [r7, #28]
}
   2bd4e:	0018      	movs	r0, r3
   2bd50:	46bd      	mov	sp, r7
   2bd52:	b008      	add	sp, #32
   2bd54:	bd80      	pop	{r7, pc}
   2bd56:	46c0      	nop			; (mov r8, r8)
   2bd58:	0002c64d 	.word	0x0002c64d
   2bd5c:	0002c6f1 	.word	0x0002c6f1
   2bd60:	0002c679 	.word	0x0002c679
   2bd64:	0002d2c9 	.word	0x0002d2c9
   2bd68:	0002b865 	.word	0x0002b865

0002bd6c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2bd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bd6e:	b095      	sub	sp, #84	; 0x54
   2bd70:	af06      	add	r7, sp, #24
   2bd72:	6078      	str	r0, [r7, #4]
   2bd74:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2bd76:	683a      	ldr	r2, [r7, #0]
   2bd78:	687b      	ldr	r3, [r7, #4]
   2bd7a:	0011      	movs	r1, r2
   2bd7c:	0018      	movs	r0, r3
   2bd7e:	4b70      	ldr	r3, [pc, #448]	; (2bf40 <cycle+0x1d4>)
   2bd80:	4798      	blx	r3
   2bd82:	0002      	movs	r2, r0
   2bd84:	232e      	movs	r3, #46	; 0x2e
   2bd86:	18fb      	adds	r3, r7, r3
   2bd88:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2bd8a:	2300      	movs	r3, #0
   2bd8c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2bd8e:	2300      	movs	r3, #0
   2bd90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2bd92:	232e      	movs	r3, #46	; 0x2e
   2bd94:	18fb      	adds	r3, r7, r3
   2bd96:	881b      	ldrh	r3, [r3, #0]
   2bd98:	2b0d      	cmp	r3, #13
   2bd9a:	d900      	bls.n	2bd9e <cycle+0x32>
   2bd9c:	e0bd      	b.n	2bf1a <cycle+0x1ae>
   2bd9e:	009a      	lsls	r2, r3, #2
   2bda0:	4b68      	ldr	r3, [pc, #416]	; (2bf44 <cycle+0x1d8>)
   2bda2:	18d3      	adds	r3, r2, r3
   2bda4:	681b      	ldr	r3, [r3, #0]
   2bda6:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2bda8:	687b      	ldr	r3, [r7, #4]
   2bdaa:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2bdac:	687b      	ldr	r3, [r7, #4]
   2bdae:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2bdb0:	001e      	movs	r6, r3
   2bdb2:	2310      	movs	r3, #16
   2bdb4:	18fb      	adds	r3, r7, r3
   2bdb6:	1d1d      	adds	r5, r3, #4
   2bdb8:	2310      	movs	r3, #16
   2bdba:	18fb      	adds	r3, r7, r3
   2bdbc:	1c5c      	adds	r4, r3, #1
   2bdbe:	230c      	movs	r3, #12
   2bdc0:	18f9      	adds	r1, r7, r3
   2bdc2:	2310      	movs	r3, #16
   2bdc4:	18fb      	adds	r3, r7, r3
   2bdc6:	1c98      	adds	r0, r3, #2
   2bdc8:	9604      	str	r6, [sp, #16]
   2bdca:	9203      	str	r2, [sp, #12]
   2bdcc:	2310      	movs	r3, #16
   2bdce:	18fb      	adds	r3, r7, r3
   2bdd0:	330c      	adds	r3, #12
   2bdd2:	9302      	str	r3, [sp, #8]
   2bdd4:	2310      	movs	r3, #16
   2bdd6:	18fb      	adds	r3, r7, r3
   2bdd8:	3308      	adds	r3, #8
   2bdda:	9301      	str	r3, [sp, #4]
   2bddc:	2320      	movs	r3, #32
   2bdde:	18fb      	adds	r3, r7, r3
   2bde0:	9300      	str	r3, [sp, #0]
   2bde2:	002b      	movs	r3, r5
   2bde4:	0022      	movs	r2, r4
   2bde6:	4c58      	ldr	r4, [pc, #352]	; (2bf48 <cycle+0x1dc>)
   2bde8:	47a0      	blx	r4
   2bdea:	0003      	movs	r3, r0
   2bdec:	2b01      	cmp	r3, #1
   2bdee:	d000      	beq.n	2bdf2 <cycle+0x86>
   2bdf0:	e098      	b.n	2bf24 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2bdf2:	68fb      	ldr	r3, [r7, #12]
   2bdf4:	b2da      	uxtb	r2, r3
   2bdf6:	2310      	movs	r3, #16
   2bdf8:	18fb      	adds	r3, r7, r3
   2bdfa:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2bdfc:	2310      	movs	r3, #16
   2bdfe:	18fa      	adds	r2, r7, r3
   2be00:	2320      	movs	r3, #32
   2be02:	18f9      	adds	r1, r7, r3
   2be04:	687b      	ldr	r3, [r7, #4]
   2be06:	0018      	movs	r0, r3
   2be08:	4b50      	ldr	r3, [pc, #320]	; (2bf4c <cycle+0x1e0>)
   2be0a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2be0c:	2310      	movs	r3, #16
   2be0e:	18fb      	adds	r3, r7, r3
   2be10:	781b      	ldrb	r3, [r3, #0]
   2be12:	2b00      	cmp	r3, #0
   2be14:	d100      	bne.n	2be18 <cycle+0xac>
   2be16:	e07d      	b.n	2bf14 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2be18:	2310      	movs	r3, #16
   2be1a:	18fb      	adds	r3, r7, r3
   2be1c:	781b      	ldrb	r3, [r3, #0]
   2be1e:	2b01      	cmp	r3, #1
   2be20:	d10f      	bne.n	2be42 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2be22:	687b      	ldr	r3, [r7, #4]
   2be24:	6918      	ldr	r0, [r3, #16]
   2be26:	687b      	ldr	r3, [r7, #4]
   2be28:	689b      	ldr	r3, [r3, #8]
   2be2a:	0019      	movs	r1, r3
   2be2c:	2310      	movs	r3, #16
   2be2e:	18fb      	adds	r3, r7, r3
   2be30:	889b      	ldrh	r3, [r3, #4]
   2be32:	9300      	str	r3, [sp, #0]
   2be34:	2300      	movs	r3, #0
   2be36:	2204      	movs	r2, #4
   2be38:	4c45      	ldr	r4, [pc, #276]	; (2bf50 <cycle+0x1e4>)
   2be3a:	47a0      	blx	r4
   2be3c:	0003      	movs	r3, r0
   2be3e:	637b      	str	r3, [r7, #52]	; 0x34
   2be40:	e013      	b.n	2be6a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2be42:	2310      	movs	r3, #16
   2be44:	18fb      	adds	r3, r7, r3
   2be46:	781b      	ldrb	r3, [r3, #0]
   2be48:	2b02      	cmp	r3, #2
   2be4a:	d10e      	bne.n	2be6a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2be4c:	687b      	ldr	r3, [r7, #4]
   2be4e:	6918      	ldr	r0, [r3, #16]
   2be50:	687b      	ldr	r3, [r7, #4]
   2be52:	689b      	ldr	r3, [r3, #8]
   2be54:	0019      	movs	r1, r3
   2be56:	2310      	movs	r3, #16
   2be58:	18fb      	adds	r3, r7, r3
   2be5a:	889b      	ldrh	r3, [r3, #4]
   2be5c:	9300      	str	r3, [sp, #0]
   2be5e:	2300      	movs	r3, #0
   2be60:	2205      	movs	r2, #5
   2be62:	4c3b      	ldr	r4, [pc, #236]	; (2bf50 <cycle+0x1e4>)
   2be64:	47a0      	blx	r4
   2be66:	0003      	movs	r3, r0
   2be68:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2be6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2be6c:	2b00      	cmp	r3, #0
   2be6e:	dc03      	bgt.n	2be78 <cycle+0x10c>
                    rc = FAILURE;
   2be70:	2301      	movs	r3, #1
   2be72:	425b      	negs	r3, r3
   2be74:	633b      	str	r3, [r7, #48]	; 0x30
   2be76:	e007      	b.n	2be88 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2be78:	683a      	ldr	r2, [r7, #0]
   2be7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2be7c:	687b      	ldr	r3, [r7, #4]
   2be7e:	0018      	movs	r0, r3
   2be80:	4b34      	ldr	r3, [pc, #208]	; (2bf54 <cycle+0x1e8>)
   2be82:	4798      	blx	r3
   2be84:	0003      	movs	r3, r0
   2be86:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2be8a:	3301      	adds	r3, #1
   2be8c:	d142      	bne.n	2bf14 <cycle+0x1a8>
                    goto exit; // there was a problem
   2be8e:	46c0      	nop			; (mov r8, r8)
   2be90:	e049      	b.n	2bf26 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2be92:	687b      	ldr	r3, [r7, #4]
   2be94:	695c      	ldr	r4, [r3, #20]
   2be96:	687b      	ldr	r3, [r7, #4]
   2be98:	68db      	ldr	r3, [r3, #12]
   2be9a:	220a      	movs	r2, #10
   2be9c:	18ba      	adds	r2, r7, r2
   2be9e:	2109      	movs	r1, #9
   2bea0:	1879      	adds	r1, r7, r1
   2bea2:	2008      	movs	r0, #8
   2bea4:	1838      	adds	r0, r7, r0
   2bea6:	9300      	str	r3, [sp, #0]
   2bea8:	0023      	movs	r3, r4
   2beaa:	4c2b      	ldr	r4, [pc, #172]	; (2bf58 <cycle+0x1ec>)
   2beac:	47a0      	blx	r4
   2beae:	0003      	movs	r3, r0
   2beb0:	2b01      	cmp	r3, #1
   2beb2:	d003      	beq.n	2bebc <cycle+0x150>
                rc = FAILURE;
   2beb4:	2301      	movs	r3, #1
   2beb6:	425b      	negs	r3, r3
   2beb8:	633b      	str	r3, [r7, #48]	; 0x30
   2beba:	e023      	b.n	2bf04 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2bebc:	687b      	ldr	r3, [r7, #4]
   2bebe:	6918      	ldr	r0, [r3, #16]
   2bec0:	687b      	ldr	r3, [r7, #4]
   2bec2:	689b      	ldr	r3, [r3, #8]
   2bec4:	0019      	movs	r1, r3
   2bec6:	230a      	movs	r3, #10
   2bec8:	18fb      	adds	r3, r7, r3
   2beca:	881b      	ldrh	r3, [r3, #0]
   2becc:	9300      	str	r3, [sp, #0]
   2bece:	2300      	movs	r3, #0
   2bed0:	2206      	movs	r2, #6
   2bed2:	4c1f      	ldr	r4, [pc, #124]	; (2bf50 <cycle+0x1e4>)
   2bed4:	47a0      	blx	r4
   2bed6:	0003      	movs	r3, r0
   2bed8:	637b      	str	r3, [r7, #52]	; 0x34
   2beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2bedc:	2b00      	cmp	r3, #0
   2bede:	dc03      	bgt.n	2bee8 <cycle+0x17c>
                rc = FAILURE;
   2bee0:	2301      	movs	r3, #1
   2bee2:	425b      	negs	r3, r3
   2bee4:	633b      	str	r3, [r7, #48]	; 0x30
   2bee6:	e00d      	b.n	2bf04 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2bee8:	683a      	ldr	r2, [r7, #0]
   2beea:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2beec:	687b      	ldr	r3, [r7, #4]
   2beee:	0018      	movs	r0, r3
   2bef0:	4b18      	ldr	r3, [pc, #96]	; (2bf54 <cycle+0x1e8>)
   2bef2:	4798      	blx	r3
   2bef4:	0003      	movs	r3, r0
   2bef6:	633b      	str	r3, [r7, #48]	; 0x30
   2bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2befa:	2b00      	cmp	r3, #0
   2befc:	d002      	beq.n	2bf04 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2befe:	2301      	movs	r3, #1
   2bf00:	425b      	negs	r3, r3
   2bf02:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2bf06:	3301      	adds	r3, #1
   2bf08:	d106      	bne.n	2bf18 <cycle+0x1ac>
                goto exit; // there was a problem
   2bf0a:	e00c      	b.n	2bf26 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2bf0c:	687b      	ldr	r3, [r7, #4]
   2bf0e:	2200      	movs	r2, #0
   2bf10:	771a      	strb	r2, [r3, #28]
            break;
   2bf12:	e002      	b.n	2bf1a <cycle+0x1ae>
            break;
   2bf14:	46c0      	nop			; (mov r8, r8)
   2bf16:	e000      	b.n	2bf1a <cycle+0x1ae>
            break;
   2bf18:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2bf1a:	687b      	ldr	r3, [r7, #4]
   2bf1c:	0018      	movs	r0, r3
   2bf1e:	4b0f      	ldr	r3, [pc, #60]	; (2bf5c <cycle+0x1f0>)
   2bf20:	4798      	blx	r3
   2bf22:	e000      	b.n	2bf26 <cycle+0x1ba>
                goto exit;
   2bf24:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2bf28:	2b00      	cmp	r3, #0
   2bf2a:	d103      	bne.n	2bf34 <cycle+0x1c8>
        rc = packet_type;
   2bf2c:	232e      	movs	r3, #46	; 0x2e
   2bf2e:	18fb      	adds	r3, r7, r3
   2bf30:	881b      	ldrh	r3, [r3, #0]
   2bf32:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2bf36:	0018      	movs	r0, r3
   2bf38:	46bd      	mov	sp, r7
   2bf3a:	b00f      	add	sp, #60	; 0x3c
   2bf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bf3e:	46c0      	nop			; (mov r8, r8)
   2bf40:	0002ba21 	.word	0x0002ba21
   2bf44:	00037e5c 	.word	0x00037e5c
   2bf48:	0002d2ed 	.word	0x0002d2ed
   2bf4c:	0002bbdd 	.word	0x0002bbdd
   2bf50:	0002dae5 	.word	0x0002dae5
   2bf54:	0002b865 	.word	0x0002b865
   2bf58:	0002d3f1 	.word	0x0002d3f1
   2bf5c:	0002bcc9 	.word	0x0002bcc9

0002bf60 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2bf60:	b580      	push	{r7, lr}
   2bf62:	b086      	sub	sp, #24
   2bf64:	af00      	add	r7, sp, #0
   2bf66:	6078      	str	r0, [r7, #4]
   2bf68:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2bf6a:	2300      	movs	r3, #0
   2bf6c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2bf6e:	2308      	movs	r3, #8
   2bf70:	18fb      	adds	r3, r7, r3
   2bf72:	0018      	movs	r0, r3
   2bf74:	4b11      	ldr	r3, [pc, #68]	; (2bfbc <MQTTYield+0x5c>)
   2bf76:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2bf78:	683a      	ldr	r2, [r7, #0]
   2bf7a:	2308      	movs	r3, #8
   2bf7c:	18fb      	adds	r3, r7, r3
   2bf7e:	0011      	movs	r1, r2
   2bf80:	0018      	movs	r0, r3
   2bf82:	4b0f      	ldr	r3, [pc, #60]	; (2bfc0 <MQTTYield+0x60>)
   2bf84:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2bf86:	2308      	movs	r3, #8
   2bf88:	18fa      	adds	r2, r7, r3
   2bf8a:	687b      	ldr	r3, [r7, #4]
   2bf8c:	0011      	movs	r1, r2
   2bf8e:	0018      	movs	r0, r3
   2bf90:	4b0c      	ldr	r3, [pc, #48]	; (2bfc4 <MQTTYield+0x64>)
   2bf92:	4798      	blx	r3
   2bf94:	0003      	movs	r3, r0
   2bf96:	3301      	adds	r3, #1
   2bf98:	d103      	bne.n	2bfa2 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2bf9a:	2301      	movs	r3, #1
   2bf9c:	425b      	negs	r3, r3
   2bf9e:	617b      	str	r3, [r7, #20]
            break;
   2bfa0:	e006      	b.n	2bfb0 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2bfa2:	2308      	movs	r3, #8
   2bfa4:	18fb      	adds	r3, r7, r3
   2bfa6:	0018      	movs	r0, r3
   2bfa8:	4b07      	ldr	r3, [pc, #28]	; (2bfc8 <MQTTYield+0x68>)
   2bfaa:	4798      	blx	r3
   2bfac:	1e03      	subs	r3, r0, #0
   2bfae:	d0ea      	beq.n	2bf86 <MQTTYield+0x26>
        
    return rc;
   2bfb0:	697b      	ldr	r3, [r7, #20]
}
   2bfb2:	0018      	movs	r0, r3
   2bfb4:	46bd      	mov	sp, r7
   2bfb6:	b006      	add	sp, #24
   2bfb8:	bd80      	pop	{r7, pc}
   2bfba:	46c0      	nop			; (mov r8, r8)
   2bfbc:	0002c6f1 	.word	0x0002c6f1
   2bfc0:	0002c679 	.word	0x0002c679
   2bfc4:	0002bd6d 	.word	0x0002bd6d
   2bfc8:	0002c64d 	.word	0x0002c64d

0002bfcc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2bfcc:	b580      	push	{r7, lr}
   2bfce:	b086      	sub	sp, #24
   2bfd0:	af00      	add	r7, sp, #0
   2bfd2:	60f8      	str	r0, [r7, #12]
   2bfd4:	60b9      	str	r1, [r7, #8]
   2bfd6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2bfd8:	2301      	movs	r3, #1
   2bfda:	425b      	negs	r3, r3
   2bfdc:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2bfde:	687b      	ldr	r3, [r7, #4]
   2bfe0:	0018      	movs	r0, r3
   2bfe2:	4b0b      	ldr	r3, [pc, #44]	; (2c010 <waitfor+0x44>)
   2bfe4:	4798      	blx	r3
   2bfe6:	1e03      	subs	r3, r0, #0
   2bfe8:	d10c      	bne.n	2c004 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2bfea:	687a      	ldr	r2, [r7, #4]
   2bfec:	68fb      	ldr	r3, [r7, #12]
   2bfee:	0011      	movs	r1, r2
   2bff0:	0018      	movs	r0, r3
   2bff2:	4b08      	ldr	r3, [pc, #32]	; (2c014 <waitfor+0x48>)
   2bff4:	4798      	blx	r3
   2bff6:	0003      	movs	r3, r0
   2bff8:	617b      	str	r3, [r7, #20]
   2bffa:	697a      	ldr	r2, [r7, #20]
   2bffc:	68bb      	ldr	r3, [r7, #8]
   2bffe:	429a      	cmp	r2, r3
   2c000:	d1ed      	bne.n	2bfde <waitfor+0x12>
   2c002:	e000      	b.n	2c006 <waitfor+0x3a>
            break; // we timed out
   2c004:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2c006:	697b      	ldr	r3, [r7, #20]
}
   2c008:	0018      	movs	r0, r3
   2c00a:	46bd      	mov	sp, r7
   2c00c:	b006      	add	sp, #24
   2c00e:	bd80      	pop	{r7, pc}
   2c010:	0002c64d 	.word	0x0002c64d
   2c014:	0002bd6d 	.word	0x0002bd6d

0002c018 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2c018:	b590      	push	{r4, r7, lr}
   2c01a:	b09f      	sub	sp, #124	; 0x7c
   2c01c:	af00      	add	r7, sp, #0
   2c01e:	6078      	str	r0, [r7, #4]
   2c020:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2c022:	2301      	movs	r3, #1
   2c024:	425b      	negs	r3, r3
   2c026:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2c028:	230c      	movs	r3, #12
   2c02a:	18fa      	adds	r2, r7, r3
   2c02c:	4b41      	ldr	r3, [pc, #260]	; (2c134 <MQTTConnect+0x11c>)
   2c02e:	0010      	movs	r0, r2
   2c030:	0019      	movs	r1, r3
   2c032:	2358      	movs	r3, #88	; 0x58
   2c034:	001a      	movs	r2, r3
   2c036:	4b40      	ldr	r3, [pc, #256]	; (2c138 <MQTTConnect+0x120>)
   2c038:	4798      	blx	r3
    int len = 0;
   2c03a:	2300      	movs	r3, #0
   2c03c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2c03e:	687b      	ldr	r3, [r7, #4]
   2c040:	6a1b      	ldr	r3, [r3, #32]
   2c042:	2b00      	cmp	r3, #0
   2c044:	d166      	bne.n	2c114 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2c046:	2364      	movs	r3, #100	; 0x64
   2c048:	18fb      	adds	r3, r7, r3
   2c04a:	0018      	movs	r0, r3
   2c04c:	4b3b      	ldr	r3, [pc, #236]	; (2c13c <MQTTConnect+0x124>)
   2c04e:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2c050:	687b      	ldr	r3, [r7, #4]
   2c052:	685a      	ldr	r2, [r3, #4]
   2c054:	2364      	movs	r3, #100	; 0x64
   2c056:	18fb      	adds	r3, r7, r3
   2c058:	0011      	movs	r1, r2
   2c05a:	0018      	movs	r0, r3
   2c05c:	4b38      	ldr	r3, [pc, #224]	; (2c140 <MQTTConnect+0x128>)
   2c05e:	4798      	blx	r3

    if (options == 0)
   2c060:	683b      	ldr	r3, [r7, #0]
   2c062:	2b00      	cmp	r3, #0
   2c064:	d102      	bne.n	2c06c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2c066:	230c      	movs	r3, #12
   2c068:	18fb      	adds	r3, r7, r3
   2c06a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2c06c:	683b      	ldr	r3, [r7, #0]
   2c06e:	8b1b      	ldrh	r3, [r3, #24]
   2c070:	001a      	movs	r2, r3
   2c072:	687b      	ldr	r3, [r7, #4]
   2c074:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2c076:	687b      	ldr	r3, [r7, #4]
   2c078:	337c      	adds	r3, #124	; 0x7c
   2c07a:	001a      	movs	r2, r3
   2c07c:	687b      	ldr	r3, [r7, #4]
   2c07e:	699b      	ldr	r3, [r3, #24]
   2c080:	0019      	movs	r1, r3
   2c082:	0010      	movs	r0, r2
   2c084:	4b2f      	ldr	r3, [pc, #188]	; (2c144 <MQTTConnect+0x12c>)
   2c086:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2c088:	687b      	ldr	r3, [r7, #4]
   2c08a:	6918      	ldr	r0, [r3, #16]
   2c08c:	687b      	ldr	r3, [r7, #4]
   2c08e:	689b      	ldr	r3, [r3, #8]
   2c090:	0019      	movs	r1, r3
   2c092:	683b      	ldr	r3, [r7, #0]
   2c094:	001a      	movs	r2, r3
   2c096:	4b2c      	ldr	r3, [pc, #176]	; (2c148 <MQTTConnect+0x130>)
   2c098:	4798      	blx	r3
   2c09a:	0003      	movs	r3, r0
   2c09c:	673b      	str	r3, [r7, #112]	; 0x70
   2c09e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2c0a0:	2b00      	cmp	r3, #0
   2c0a2:	dd39      	ble.n	2c118 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2c0a4:	2364      	movs	r3, #100	; 0x64
   2c0a6:	18fa      	adds	r2, r7, r3
   2c0a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2c0aa:	687b      	ldr	r3, [r7, #4]
   2c0ac:	0018      	movs	r0, r3
   2c0ae:	4b27      	ldr	r3, [pc, #156]	; (2c14c <MQTTConnect+0x134>)
   2c0b0:	4798      	blx	r3
   2c0b2:	0003      	movs	r3, r0
   2c0b4:	677b      	str	r3, [r7, #116]	; 0x74
   2c0b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2c0b8:	2b00      	cmp	r3, #0
   2c0ba:	d12f      	bne.n	2c11c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2c0bc:	2364      	movs	r3, #100	; 0x64
   2c0be:	18fa      	adds	r2, r7, r3
   2c0c0:	687b      	ldr	r3, [r7, #4]
   2c0c2:	2102      	movs	r1, #2
   2c0c4:	0018      	movs	r0, r3
   2c0c6:	4b22      	ldr	r3, [pc, #136]	; (2c150 <MQTTConnect+0x138>)
   2c0c8:	4798      	blx	r3
   2c0ca:	0003      	movs	r3, r0
   2c0cc:	2b02      	cmp	r3, #2
   2c0ce:	d11d      	bne.n	2c10c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2c0d0:	230b      	movs	r3, #11
   2c0d2:	18fb      	adds	r3, r7, r3
   2c0d4:	22ff      	movs	r2, #255	; 0xff
   2c0d6:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2c0d8:	230a      	movs	r3, #10
   2c0da:	18fb      	adds	r3, r7, r3
   2c0dc:	2200      	movs	r2, #0
   2c0de:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2c0e0:	687b      	ldr	r3, [r7, #4]
   2c0e2:	695a      	ldr	r2, [r3, #20]
   2c0e4:	687b      	ldr	r3, [r7, #4]
   2c0e6:	68db      	ldr	r3, [r3, #12]
   2c0e8:	210b      	movs	r1, #11
   2c0ea:	1879      	adds	r1, r7, r1
   2c0ec:	200a      	movs	r0, #10
   2c0ee:	1838      	adds	r0, r7, r0
   2c0f0:	4c18      	ldr	r4, [pc, #96]	; (2c154 <MQTTConnect+0x13c>)
   2c0f2:	47a0      	blx	r4
   2c0f4:	0003      	movs	r3, r0
   2c0f6:	2b01      	cmp	r3, #1
   2c0f8:	d104      	bne.n	2c104 <MQTTConnect+0xec>
            rc = connack_rc;
   2c0fa:	230b      	movs	r3, #11
   2c0fc:	18fb      	adds	r3, r7, r3
   2c0fe:	781b      	ldrb	r3, [r3, #0]
   2c100:	677b      	str	r3, [r7, #116]	; 0x74
   2c102:	e00c      	b.n	2c11e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2c104:	2301      	movs	r3, #1
   2c106:	425b      	negs	r3, r3
   2c108:	677b      	str	r3, [r7, #116]	; 0x74
   2c10a:	e008      	b.n	2c11e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2c10c:	2301      	movs	r3, #1
   2c10e:	425b      	negs	r3, r3
   2c110:	677b      	str	r3, [r7, #116]	; 0x74
   2c112:	e004      	b.n	2c11e <MQTTConnect+0x106>
		goto exit;
   2c114:	46c0      	nop			; (mov r8, r8)
   2c116:	e002      	b.n	2c11e <MQTTConnect+0x106>
        goto exit;
   2c118:	46c0      	nop			; (mov r8, r8)
   2c11a:	e000      	b.n	2c11e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2c11c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2c11e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2c120:	2b00      	cmp	r3, #0
   2c122:	d102      	bne.n	2c12a <MQTTConnect+0x112>
        c->isconnected = 1;
   2c124:	687b      	ldr	r3, [r7, #4]
   2c126:	2201      	movs	r2, #1
   2c128:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2c12a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2c12c:	0018      	movs	r0, r3
   2c12e:	46bd      	mov	sp, r7
   2c130:	b01f      	add	sp, #124	; 0x7c
   2c132:	bd90      	pop	{r4, r7, pc}
   2c134:	00037e94 	.word	0x00037e94
   2c138:	00032871 	.word	0x00032871
   2c13c:	0002c6f1 	.word	0x0002c6f1
   2c140:	0002c679 	.word	0x0002c679
   2c144:	0002c6a1 	.word	0x0002c6a1
   2c148:	0002ced1 	.word	0x0002ced1
   2c14c:	0002b865 	.word	0x0002b865
   2c150:	0002bfcd 	.word	0x0002bfcd
   2c154:	0002d14d 	.word	0x0002d14d

0002c158 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2c158:	b5b0      	push	{r4, r5, r7, lr}
   2c15a:	b096      	sub	sp, #88	; 0x58
   2c15c:	af04      	add	r7, sp, #16
   2c15e:	60f8      	str	r0, [r7, #12]
   2c160:	60b9      	str	r1, [r7, #8]
   2c162:	603b      	str	r3, [r7, #0]
   2c164:	1dfb      	adds	r3, r7, #7
   2c166:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2c168:	2301      	movs	r3, #1
   2c16a:	425b      	negs	r3, r3
   2c16c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2c16e:	2300      	movs	r3, #0
   2c170:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2c172:	2324      	movs	r3, #36	; 0x24
   2c174:	18fb      	adds	r3, r7, r3
   2c176:	2200      	movs	r2, #0
   2c178:	601a      	str	r2, [r3, #0]
   2c17a:	2324      	movs	r3, #36	; 0x24
   2c17c:	18fb      	adds	r3, r7, r3
   2c17e:	2200      	movs	r2, #0
   2c180:	605a      	str	r2, [r3, #4]
   2c182:	2324      	movs	r3, #36	; 0x24
   2c184:	18fb      	adds	r3, r7, r3
   2c186:	2200      	movs	r2, #0
   2c188:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2c18a:	1dfb      	adds	r3, r7, #7
   2c18c:	781b      	ldrb	r3, [r3, #0]
   2c18e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2c190:	2324      	movs	r3, #36	; 0x24
   2c192:	18fb      	adds	r3, r7, r3
   2c194:	68ba      	ldr	r2, [r7, #8]
   2c196:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2c198:	68fb      	ldr	r3, [r7, #12]
   2c19a:	6a1b      	ldr	r3, [r3, #32]
   2c19c:	2b00      	cmp	r3, #0
   2c19e:	d100      	bne.n	2c1a2 <MQTTSubscribe+0x4a>
   2c1a0:	e088      	b.n	2c2b4 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2c1a2:	2330      	movs	r3, #48	; 0x30
   2c1a4:	18fb      	adds	r3, r7, r3
   2c1a6:	0018      	movs	r0, r3
   2c1a8:	4b47      	ldr	r3, [pc, #284]	; (2c2c8 <MQTTSubscribe+0x170>)
   2c1aa:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2c1ac:	68fb      	ldr	r3, [r7, #12]
   2c1ae:	685a      	ldr	r2, [r3, #4]
   2c1b0:	2330      	movs	r3, #48	; 0x30
   2c1b2:	18fb      	adds	r3, r7, r3
   2c1b4:	0011      	movs	r1, r2
   2c1b6:	0018      	movs	r0, r3
   2c1b8:	4b44      	ldr	r3, [pc, #272]	; (2c2cc <MQTTSubscribe+0x174>)
   2c1ba:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2c1bc:	68fb      	ldr	r3, [r7, #12]
   2c1be:	691c      	ldr	r4, [r3, #16]
   2c1c0:	68fb      	ldr	r3, [r7, #12]
   2c1c2:	689b      	ldr	r3, [r3, #8]
   2c1c4:	001d      	movs	r5, r3
   2c1c6:	68fb      	ldr	r3, [r7, #12]
   2c1c8:	0018      	movs	r0, r3
   2c1ca:	4b41      	ldr	r3, [pc, #260]	; (2c2d0 <MQTTSubscribe+0x178>)
   2c1cc:	4798      	blx	r3
   2c1ce:	0003      	movs	r3, r0
   2c1d0:	b29a      	uxth	r2, r3
   2c1d2:	2320      	movs	r3, #32
   2c1d4:	18fb      	adds	r3, r7, r3
   2c1d6:	9302      	str	r3, [sp, #8]
   2c1d8:	2324      	movs	r3, #36	; 0x24
   2c1da:	18fb      	adds	r3, r7, r3
   2c1dc:	9301      	str	r3, [sp, #4]
   2c1de:	2301      	movs	r3, #1
   2c1e0:	9300      	str	r3, [sp, #0]
   2c1e2:	0013      	movs	r3, r2
   2c1e4:	2200      	movs	r2, #0
   2c1e6:	0029      	movs	r1, r5
   2c1e8:	0020      	movs	r0, r4
   2c1ea:	4c3a      	ldr	r4, [pc, #232]	; (2c2d4 <MQTTSubscribe+0x17c>)
   2c1ec:	47a0      	blx	r4
   2c1ee:	0003      	movs	r3, r0
   2c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2c1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c1f4:	2b00      	cmp	r3, #0
   2c1f6:	dd5f      	ble.n	2c2b8 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2c1f8:	2330      	movs	r3, #48	; 0x30
   2c1fa:	18fa      	adds	r2, r7, r3
   2c1fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2c1fe:	68fb      	ldr	r3, [r7, #12]
   2c200:	0018      	movs	r0, r3
   2c202:	4b35      	ldr	r3, [pc, #212]	; (2c2d8 <MQTTSubscribe+0x180>)
   2c204:	4798      	blx	r3
   2c206:	0003      	movs	r3, r0
   2c208:	647b      	str	r3, [r7, #68]	; 0x44
   2c20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2c20c:	2b00      	cmp	r3, #0
   2c20e:	d155      	bne.n	2c2bc <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2c210:	2330      	movs	r3, #48	; 0x30
   2c212:	18fa      	adds	r2, r7, r3
   2c214:	68fb      	ldr	r3, [r7, #12]
   2c216:	2109      	movs	r1, #9
   2c218:	0018      	movs	r0, r3
   2c21a:	4b30      	ldr	r3, [pc, #192]	; (2c2dc <MQTTSubscribe+0x184>)
   2c21c:	4798      	blx	r3
   2c21e:	0003      	movs	r3, r0
   2c220:	2b09      	cmp	r3, #9
   2c222:	d143      	bne.n	2c2ac <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2c224:	2300      	movs	r3, #0
   2c226:	61fb      	str	r3, [r7, #28]
   2c228:	2301      	movs	r3, #1
   2c22a:	425b      	negs	r3, r3
   2c22c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2c22e:	68fb      	ldr	r3, [r7, #12]
   2c230:	695a      	ldr	r2, [r3, #20]
   2c232:	68fb      	ldr	r3, [r7, #12]
   2c234:	68db      	ldr	r3, [r3, #12]
   2c236:	001c      	movs	r4, r3
   2c238:	2318      	movs	r3, #24
   2c23a:	18fb      	adds	r3, r7, r3
   2c23c:	211c      	movs	r1, #28
   2c23e:	1879      	adds	r1, r7, r1
   2c240:	2016      	movs	r0, #22
   2c242:	1838      	adds	r0, r7, r0
   2c244:	9401      	str	r4, [sp, #4]
   2c246:	9200      	str	r2, [sp, #0]
   2c248:	000a      	movs	r2, r1
   2c24a:	2101      	movs	r1, #1
   2c24c:	4c24      	ldr	r4, [pc, #144]	; (2c2e0 <MQTTSubscribe+0x188>)
   2c24e:	47a0      	blx	r4
   2c250:	0003      	movs	r3, r0
   2c252:	2b01      	cmp	r3, #1
   2c254:	d101      	bne.n	2c25a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2c256:	69bb      	ldr	r3, [r7, #24]
   2c258:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2c25a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2c25c:	2b80      	cmp	r3, #128	; 0x80
   2c25e:	d02e      	beq.n	2c2be <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c260:	2300      	movs	r3, #0
   2c262:	643b      	str	r3, [r7, #64]	; 0x40
   2c264:	e01e      	b.n	2c2a4 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2c266:	68fa      	ldr	r2, [r7, #12]
   2c268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c26a:	3304      	adds	r3, #4
   2c26c:	00db      	lsls	r3, r3, #3
   2c26e:	18d3      	adds	r3, r2, r3
   2c270:	3304      	adds	r3, #4
   2c272:	681b      	ldr	r3, [r3, #0]
   2c274:	2b00      	cmp	r3, #0
   2c276:	d112      	bne.n	2c29e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2c278:	68fa      	ldr	r2, [r7, #12]
   2c27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c27c:	3304      	adds	r3, #4
   2c27e:	00db      	lsls	r3, r3, #3
   2c280:	18d3      	adds	r3, r2, r3
   2c282:	3304      	adds	r3, #4
   2c284:	68ba      	ldr	r2, [r7, #8]
   2c286:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2c288:	68fa      	ldr	r2, [r7, #12]
   2c28a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c28c:	3304      	adds	r3, #4
   2c28e:	00db      	lsls	r3, r3, #3
   2c290:	18d3      	adds	r3, r2, r3
   2c292:	3308      	adds	r3, #8
   2c294:	683a      	ldr	r2, [r7, #0]
   2c296:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2c298:	2300      	movs	r3, #0
   2c29a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2c29c:	e00f      	b.n	2c2be <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2c29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c2a0:	3301      	adds	r3, #1
   2c2a2:	643b      	str	r3, [r7, #64]	; 0x40
   2c2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c2a6:	2b09      	cmp	r3, #9
   2c2a8:	dddd      	ble.n	2c266 <MQTTSubscribe+0x10e>
   2c2aa:	e008      	b.n	2c2be <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2c2ac:	2301      	movs	r3, #1
   2c2ae:	425b      	negs	r3, r3
   2c2b0:	647b      	str	r3, [r7, #68]	; 0x44
   2c2b2:	e004      	b.n	2c2be <MQTTSubscribe+0x166>
		goto exit;
   2c2b4:	46c0      	nop			; (mov r8, r8)
   2c2b6:	e002      	b.n	2c2be <MQTTSubscribe+0x166>
        goto exit;
   2c2b8:	46c0      	nop			; (mov r8, r8)
   2c2ba:	e000      	b.n	2c2be <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2c2bc:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2c2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2c2c0:	0018      	movs	r0, r3
   2c2c2:	46bd      	mov	sp, r7
   2c2c4:	b012      	add	sp, #72	; 0x48
   2c2c6:	bdb0      	pop	{r4, r5, r7, pc}
   2c2c8:	0002c6f1 	.word	0x0002c6f1
   2c2cc:	0002c679 	.word	0x0002c679
   2c2d0:	0002b835 	.word	0x0002b835
   2c2d4:	0002dc2d 	.word	0x0002dc2d
   2c2d8:	0002b865 	.word	0x0002b865
   2c2dc:	0002bfcd 	.word	0x0002bfcd
   2c2e0:	0002dd7d 	.word	0x0002dd7d

0002c2e4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2e6:	46ce      	mov	lr, r9
   2c2e8:	4647      	mov	r7, r8
   2c2ea:	b580      	push	{r7, lr}
   2c2ec:	b097      	sub	sp, #92	; 0x5c
   2c2ee:	af08      	add	r7, sp, #32
   2c2f0:	60f8      	str	r0, [r7, #12]
   2c2f2:	60b9      	str	r1, [r7, #8]
   2c2f4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2c2f6:	2301      	movs	r3, #1
   2c2f8:	425b      	negs	r3, r3
   2c2fa:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2c2fc:	2318      	movs	r3, #24
   2c2fe:	18fb      	adds	r3, r7, r3
   2c300:	2200      	movs	r2, #0
   2c302:	601a      	str	r2, [r3, #0]
   2c304:	2318      	movs	r3, #24
   2c306:	18fb      	adds	r3, r7, r3
   2c308:	2200      	movs	r2, #0
   2c30a:	605a      	str	r2, [r3, #4]
   2c30c:	2318      	movs	r3, #24
   2c30e:	18fb      	adds	r3, r7, r3
   2c310:	2200      	movs	r2, #0
   2c312:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2c314:	2318      	movs	r3, #24
   2c316:	18fb      	adds	r3, r7, r3
   2c318:	68ba      	ldr	r2, [r7, #8]
   2c31a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2c31c:	2300      	movs	r3, #0
   2c31e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2c320:	68fb      	ldr	r3, [r7, #12]
   2c322:	6a1b      	ldr	r3, [r3, #32]
   2c324:	2b00      	cmp	r3, #0
   2c326:	d100      	bne.n	2c32a <MQTTPublish+0x46>
   2c328:	e0a0      	b.n	2c46c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2c32a:	2324      	movs	r3, #36	; 0x24
   2c32c:	18fb      	adds	r3, r7, r3
   2c32e:	0018      	movs	r0, r3
   2c330:	4b55      	ldr	r3, [pc, #340]	; (2c488 <MQTTPublish+0x1a4>)
   2c332:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2c334:	68fb      	ldr	r3, [r7, #12]
   2c336:	685a      	ldr	r2, [r3, #4]
   2c338:	2324      	movs	r3, #36	; 0x24
   2c33a:	18fb      	adds	r3, r7, r3
   2c33c:	0011      	movs	r1, r2
   2c33e:	0018      	movs	r0, r3
   2c340:	4b52      	ldr	r3, [pc, #328]	; (2c48c <MQTTPublish+0x1a8>)
   2c342:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2c344:	687b      	ldr	r3, [r7, #4]
   2c346:	781b      	ldrb	r3, [r3, #0]
   2c348:	2b01      	cmp	r3, #1
   2c34a:	d003      	beq.n	2c354 <MQTTPublish+0x70>
   2c34c:	687b      	ldr	r3, [r7, #4]
   2c34e:	781b      	ldrb	r3, [r3, #0]
   2c350:	2b02      	cmp	r3, #2
   2c352:	d107      	bne.n	2c364 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2c354:	68fb      	ldr	r3, [r7, #12]
   2c356:	0018      	movs	r0, r3
   2c358:	4b4d      	ldr	r3, [pc, #308]	; (2c490 <MQTTPublish+0x1ac>)
   2c35a:	4798      	blx	r3
   2c35c:	0003      	movs	r3, r0
   2c35e:	b29a      	uxth	r2, r3
   2c360:	687b      	ldr	r3, [r7, #4]
   2c362:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2c364:	68fb      	ldr	r3, [r7, #12]
   2c366:	691b      	ldr	r3, [r3, #16]
   2c368:	469c      	mov	ip, r3
   2c36a:	68fb      	ldr	r3, [r7, #12]
   2c36c:	689b      	ldr	r3, [r3, #8]
   2c36e:	001d      	movs	r5, r3
   2c370:	687b      	ldr	r3, [r7, #4]
   2c372:	781b      	ldrb	r3, [r3, #0]
   2c374:	001e      	movs	r6, r3
   2c376:	687b      	ldr	r3, [r7, #4]
   2c378:	785b      	ldrb	r3, [r3, #1]
   2c37a:	4698      	mov	r8, r3
   2c37c:	687b      	ldr	r3, [r7, #4]
   2c37e:	889b      	ldrh	r3, [r3, #4]
   2c380:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2c382:	687b      	ldr	r3, [r7, #4]
   2c384:	689a      	ldr	r2, [r3, #8]
   2c386:	687b      	ldr	r3, [r7, #4]
   2c388:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2c38a:	9306      	str	r3, [sp, #24]
   2c38c:	9205      	str	r2, [sp, #20]
   2c38e:	2318      	movs	r3, #24
   2c390:	18fa      	adds	r2, r7, r3
   2c392:	2308      	movs	r3, #8
   2c394:	446b      	add	r3, sp
   2c396:	ca13      	ldmia	r2!, {r0, r1, r4}
   2c398:	c313      	stmia	r3!, {r0, r1, r4}
   2c39a:	464b      	mov	r3, r9
   2c39c:	9301      	str	r3, [sp, #4]
   2c39e:	4643      	mov	r3, r8
   2c3a0:	9300      	str	r3, [sp, #0]
   2c3a2:	0033      	movs	r3, r6
   2c3a4:	2200      	movs	r2, #0
   2c3a6:	0029      	movs	r1, r5
   2c3a8:	4660      	mov	r0, ip
   2c3aa:	4c3a      	ldr	r4, [pc, #232]	; (2c494 <MQTTPublish+0x1b0>)
   2c3ac:	47a0      	blx	r4
   2c3ae:	0003      	movs	r3, r0
   2c3b0:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c3b4:	2b00      	cmp	r3, #0
   2c3b6:	dd5b      	ble.n	2c470 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2c3b8:	2324      	movs	r3, #36	; 0x24
   2c3ba:	18fa      	adds	r2, r7, r3
   2c3bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2c3be:	68fb      	ldr	r3, [r7, #12]
   2c3c0:	0018      	movs	r0, r3
   2c3c2:	4b35      	ldr	r3, [pc, #212]	; (2c498 <MQTTPublish+0x1b4>)
   2c3c4:	4798      	blx	r3
   2c3c6:	0003      	movs	r3, r0
   2c3c8:	637b      	str	r3, [r7, #52]	; 0x34
   2c3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c3cc:	2b00      	cmp	r3, #0
   2c3ce:	d151      	bne.n	2c474 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2c3d0:	687b      	ldr	r3, [r7, #4]
   2c3d2:	781b      	ldrb	r3, [r3, #0]
   2c3d4:	2b01      	cmp	r3, #1
   2c3d6:	d122      	bne.n	2c41e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2c3d8:	2324      	movs	r3, #36	; 0x24
   2c3da:	18fa      	adds	r2, r7, r3
   2c3dc:	68fb      	ldr	r3, [r7, #12]
   2c3de:	2104      	movs	r1, #4
   2c3e0:	0018      	movs	r0, r3
   2c3e2:	4b2e      	ldr	r3, [pc, #184]	; (2c49c <MQTTPublish+0x1b8>)
   2c3e4:	4798      	blx	r3
   2c3e6:	0003      	movs	r3, r0
   2c3e8:	2b04      	cmp	r3, #4
   2c3ea:	d114      	bne.n	2c416 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2c3ec:	68fb      	ldr	r3, [r7, #12]
   2c3ee:	695c      	ldr	r4, [r3, #20]
   2c3f0:	68fb      	ldr	r3, [r7, #12]
   2c3f2:	68db      	ldr	r3, [r3, #12]
   2c3f4:	2216      	movs	r2, #22
   2c3f6:	18ba      	adds	r2, r7, r2
   2c3f8:	2115      	movs	r1, #21
   2c3fa:	1879      	adds	r1, r7, r1
   2c3fc:	2014      	movs	r0, #20
   2c3fe:	1838      	adds	r0, r7, r0
   2c400:	9300      	str	r3, [sp, #0]
   2c402:	0023      	movs	r3, r4
   2c404:	4c26      	ldr	r4, [pc, #152]	; (2c4a0 <MQTTPublish+0x1bc>)
   2c406:	47a0      	blx	r4
   2c408:	0003      	movs	r3, r0
   2c40a:	2b01      	cmp	r3, #1
   2c40c:	d033      	beq.n	2c476 <MQTTPublish+0x192>
                rc = FAILURE;
   2c40e:	2301      	movs	r3, #1
   2c410:	425b      	negs	r3, r3
   2c412:	637b      	str	r3, [r7, #52]	; 0x34
   2c414:	e02f      	b.n	2c476 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2c416:	2301      	movs	r3, #1
   2c418:	425b      	negs	r3, r3
   2c41a:	637b      	str	r3, [r7, #52]	; 0x34
   2c41c:	e02b      	b.n	2c476 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2c41e:	687b      	ldr	r3, [r7, #4]
   2c420:	781b      	ldrb	r3, [r3, #0]
   2c422:	2b02      	cmp	r3, #2
   2c424:	d127      	bne.n	2c476 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2c426:	2324      	movs	r3, #36	; 0x24
   2c428:	18fa      	adds	r2, r7, r3
   2c42a:	68fb      	ldr	r3, [r7, #12]
   2c42c:	2107      	movs	r1, #7
   2c42e:	0018      	movs	r0, r3
   2c430:	4b1a      	ldr	r3, [pc, #104]	; (2c49c <MQTTPublish+0x1b8>)
   2c432:	4798      	blx	r3
   2c434:	0003      	movs	r3, r0
   2c436:	2b07      	cmp	r3, #7
   2c438:	d114      	bne.n	2c464 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2c43a:	68fb      	ldr	r3, [r7, #12]
   2c43c:	695c      	ldr	r4, [r3, #20]
   2c43e:	68fb      	ldr	r3, [r7, #12]
   2c440:	68db      	ldr	r3, [r3, #12]
   2c442:	2212      	movs	r2, #18
   2c444:	18ba      	adds	r2, r7, r2
   2c446:	2111      	movs	r1, #17
   2c448:	1879      	adds	r1, r7, r1
   2c44a:	2010      	movs	r0, #16
   2c44c:	1838      	adds	r0, r7, r0
   2c44e:	9300      	str	r3, [sp, #0]
   2c450:	0023      	movs	r3, r4
   2c452:	4c13      	ldr	r4, [pc, #76]	; (2c4a0 <MQTTPublish+0x1bc>)
   2c454:	47a0      	blx	r4
   2c456:	0003      	movs	r3, r0
   2c458:	2b01      	cmp	r3, #1
   2c45a:	d00c      	beq.n	2c476 <MQTTPublish+0x192>
                rc = FAILURE;
   2c45c:	2301      	movs	r3, #1
   2c45e:	425b      	negs	r3, r3
   2c460:	637b      	str	r3, [r7, #52]	; 0x34
   2c462:	e008      	b.n	2c476 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2c464:	2301      	movs	r3, #1
   2c466:	425b      	negs	r3, r3
   2c468:	637b      	str	r3, [r7, #52]	; 0x34
   2c46a:	e004      	b.n	2c476 <MQTTPublish+0x192>
		goto exit;
   2c46c:	46c0      	nop			; (mov r8, r8)
   2c46e:	e002      	b.n	2c476 <MQTTPublish+0x192>
        goto exit;
   2c470:	46c0      	nop			; (mov r8, r8)
   2c472:	e000      	b.n	2c476 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2c474:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2c476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2c478:	0018      	movs	r0, r3
   2c47a:	46bd      	mov	sp, r7
   2c47c:	b00f      	add	sp, #60	; 0x3c
   2c47e:	bc0c      	pop	{r2, r3}
   2c480:	4690      	mov	r8, r2
   2c482:	4699      	mov	r9, r3
   2c484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c486:	46c0      	nop			; (mov r8, r8)
   2c488:	0002c6f1 	.word	0x0002c6f1
   2c48c:	0002c679 	.word	0x0002c679
   2c490:	0002b835 	.word	0x0002b835
   2c494:	0002d979 	.word	0x0002d979
   2c498:	0002b865 	.word	0x0002b865
   2c49c:	0002bfcd 	.word	0x0002bfcd
   2c4a0:	0002d3f1 	.word	0x0002d3f1

0002c4a4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2c4a4:	b580      	push	{r7, lr}
   2c4a6:	b088      	sub	sp, #32
   2c4a8:	af00      	add	r7, sp, #0
   2c4aa:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2c4ac:	2301      	movs	r3, #1
   2c4ae:	425b      	negs	r3, r3
   2c4b0:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2c4b2:	2300      	movs	r3, #0
   2c4b4:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2c4b6:	230c      	movs	r3, #12
   2c4b8:	18fb      	adds	r3, r7, r3
   2c4ba:	0018      	movs	r0, r3
   2c4bc:	4b13      	ldr	r3, [pc, #76]	; (2c50c <MQTTDisconnect+0x68>)
   2c4be:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2c4c0:	687b      	ldr	r3, [r7, #4]
   2c4c2:	685a      	ldr	r2, [r3, #4]
   2c4c4:	230c      	movs	r3, #12
   2c4c6:	18fb      	adds	r3, r7, r3
   2c4c8:	0011      	movs	r1, r2
   2c4ca:	0018      	movs	r0, r3
   2c4cc:	4b10      	ldr	r3, [pc, #64]	; (2c510 <MQTTDisconnect+0x6c>)
   2c4ce:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2c4d0:	687b      	ldr	r3, [r7, #4]
   2c4d2:	691a      	ldr	r2, [r3, #16]
   2c4d4:	687b      	ldr	r3, [r7, #4]
   2c4d6:	689b      	ldr	r3, [r3, #8]
   2c4d8:	0019      	movs	r1, r3
   2c4da:	0010      	movs	r0, r2
   2c4dc:	4b0d      	ldr	r3, [pc, #52]	; (2c514 <MQTTDisconnect+0x70>)
   2c4de:	4798      	blx	r3
   2c4e0:	0003      	movs	r3, r0
   2c4e2:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2c4e4:	69bb      	ldr	r3, [r7, #24]
   2c4e6:	2b00      	cmp	r3, #0
   2c4e8:	dd08      	ble.n	2c4fc <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2c4ea:	230c      	movs	r3, #12
   2c4ec:	18fa      	adds	r2, r7, r3
   2c4ee:	69b9      	ldr	r1, [r7, #24]
   2c4f0:	687b      	ldr	r3, [r7, #4]
   2c4f2:	0018      	movs	r0, r3
   2c4f4:	4b08      	ldr	r3, [pc, #32]	; (2c518 <MQTTDisconnect+0x74>)
   2c4f6:	4798      	blx	r3
   2c4f8:	0003      	movs	r3, r0
   2c4fa:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2c4fc:	687b      	ldr	r3, [r7, #4]
   2c4fe:	2200      	movs	r2, #0
   2c500:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2c502:	69fb      	ldr	r3, [r7, #28]
}
   2c504:	0018      	movs	r0, r3
   2c506:	46bd      	mov	sp, r7
   2c508:	b008      	add	sp, #32
   2c50a:	bd80      	pop	{r7, pc}
   2c50c:	0002c6f1 	.word	0x0002c6f1
   2c510:	0002c679 	.word	0x0002c679
   2c514:	0002d2a5 	.word	0x0002d2a5
   2c518:	0002b865 	.word	0x0002b865

0002c51c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2c51c:	b580      	push	{r7, lr}
   2c51e:	b084      	sub	sp, #16
   2c520:	af00      	add	r7, sp, #0
   2c522:	0002      	movs	r2, r0
   2c524:	1dfb      	adds	r3, r7, #7
   2c526:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2c528:	2300      	movs	r3, #0
   2c52a:	60fb      	str	r3, [r7, #12]
   2c52c:	e01e      	b.n	2c56c <isMQTTSocket+0x50>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2c52e:	4a13      	ldr	r2, [pc, #76]	; (2c57c <isMQTTSocket+0x60>)
   2c530:	68fb      	ldr	r3, [r7, #12]
   2c532:	2188      	movs	r1, #136	; 0x88
   2c534:	208c      	movs	r0, #140	; 0x8c
   2c536:	4343      	muls	r3, r0
   2c538:	18d3      	adds	r3, r2, r3
   2c53a:	185b      	adds	r3, r3, r1
   2c53c:	681b      	ldr	r3, [r3, #0]
   2c53e:	2b00      	cmp	r3, #0
   2c540:	d011      	beq.n	2c566 <isMQTTSocket+0x4a>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2c542:	4a0e      	ldr	r2, [pc, #56]	; (2c57c <isMQTTSocket+0x60>)
   2c544:	68fb      	ldr	r3, [r7, #12]
   2c546:	2188      	movs	r1, #136	; 0x88
   2c548:	208c      	movs	r0, #140	; 0x8c
   2c54a:	4343      	muls	r3, r0
   2c54c:	18d3      	adds	r3, r2, r3
   2c54e:	185b      	adds	r3, r3, r1
   2c550:	681b      	ldr	r3, [r3, #0]
   2c552:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2c554:	68bb      	ldr	r3, [r7, #8]
   2c556:	6a1a      	ldr	r2, [r3, #32]
   2c558:	1dfb      	adds	r3, r7, #7
   2c55a:	781b      	ldrb	r3, [r3, #0]
   2c55c:	b25b      	sxtb	r3, r3
   2c55e:	429a      	cmp	r2, r3
   2c560:	d101      	bne.n	2c566 <isMQTTSocket+0x4a>
				return true;
   2c562:	2301      	movs	r3, #1
   2c564:	e006      	b.n	2c574 <isMQTTSocket+0x58>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2c566:	68fb      	ldr	r3, [r7, #12]
   2c568:	3301      	adds	r3, #1
   2c56a:	60fb      	str	r3, [r7, #12]
   2c56c:	68fb      	ldr	r3, [r7, #12]
   2c56e:	2b06      	cmp	r3, #6
   2c570:	d9dd      	bls.n	2c52e <isMQTTSocket+0x12>
		}
	}
	return false;
   2c572:	2300      	movs	r3, #0
}
   2c574:	0018      	movs	r0, r3
   2c576:	46bd      	mov	sp, r7
   2c578:	b004      	add	sp, #16
   2c57a:	bd80      	pop	{r7, pc}
   2c57c:	20003eb0 	.word	0x20003eb0

0002c580 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2c580:	b580      	push	{r7, lr}
   2c582:	b082      	sub	sp, #8
   2c584:	af00      	add	r7, sp, #0
   2c586:	6078      	str	r0, [r7, #4]
   2c588:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2c58a:	4b0d      	ldr	r3, [pc, #52]	; (2c5c0 <dnsResolveCallback+0x40>)
   2c58c:	781b      	ldrb	r3, [r3, #0]
   2c58e:	2201      	movs	r2, #1
   2c590:	4053      	eors	r3, r2
   2c592:	b2db      	uxtb	r3, r3
   2c594:	2b00      	cmp	r3, #0
   2c596:	d00e      	beq.n	2c5b6 <dnsResolveCallback+0x36>
   2c598:	4b0a      	ldr	r3, [pc, #40]	; (2c5c4 <dnsResolveCallback+0x44>)
   2c59a:	681b      	ldr	r3, [r3, #0]
   2c59c:	687a      	ldr	r2, [r7, #4]
   2c59e:	0011      	movs	r1, r2
   2c5a0:	0018      	movs	r0, r3
   2c5a2:	4b09      	ldr	r3, [pc, #36]	; (2c5c8 <dnsResolveCallback+0x48>)
   2c5a4:	4798      	blx	r3
   2c5a6:	1e03      	subs	r3, r0, #0
   2c5a8:	d105      	bne.n	2c5b6 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2c5aa:	683a      	ldr	r2, [r7, #0]
   2c5ac:	4b07      	ldr	r3, [pc, #28]	; (2c5cc <dnsResolveCallback+0x4c>)
   2c5ae:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2c5b0:	4b03      	ldr	r3, [pc, #12]	; (2c5c0 <dnsResolveCallback+0x40>)
   2c5b2:	2201      	movs	r2, #1
   2c5b4:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2c5b6:	46c0      	nop			; (mov r8, r8)
   2c5b8:	46bd      	mov	sp, r7
   2c5ba:	b002      	add	sp, #8
   2c5bc:	bd80      	pop	{r7, pc}
   2c5be:	46c0      	nop			; (mov r8, r8)
   2c5c0:	20003da0 	.word	0x20003da0
   2c5c4:	20003eac 	.word	0x20003eac
   2c5c8:	00032bff 	.word	0x00032bff
   2c5cc:	20003d98 	.word	0x20003d98

0002c5d0 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2c5d0:	b580      	push	{r7, lr}
   2c5d2:	b084      	sub	sp, #16
   2c5d4:	af00      	add	r7, sp, #0
   2c5d6:	603a      	str	r2, [r7, #0]
   2c5d8:	1dfb      	adds	r3, r7, #7
   2c5da:	1c02      	adds	r2, r0, #0
   2c5dc:	701a      	strb	r2, [r3, #0]
   2c5de:	1dbb      	adds	r3, r7, #6
   2c5e0:	1c0a      	adds	r2, r1, #0
   2c5e2:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2c5e4:	1dfb      	adds	r3, r7, #7
   2c5e6:	781b      	ldrb	r3, [r3, #0]
   2c5e8:	b25b      	sxtb	r3, r3
   2c5ea:	0018      	movs	r0, r3
   2c5ec:	4b12      	ldr	r3, [pc, #72]	; (2c638 <tcpClientSocketEventHandler+0x68>)
   2c5ee:	4798      	blx	r3
   2c5f0:	1e03      	subs	r3, r0, #0
   2c5f2:	d01c      	beq.n	2c62e <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2c5f4:	1dbb      	adds	r3, r7, #6
   2c5f6:	781b      	ldrb	r3, [r3, #0]
   2c5f8:	2b06      	cmp	r3, #6
   2c5fa:	d00c      	beq.n	2c616 <tcpClientSocketEventHandler+0x46>
   2c5fc:	2b07      	cmp	r3, #7
   2c5fe:	d006      	beq.n	2c60e <tcpClientSocketEventHandler+0x3e>
   2c600:	2b05      	cmp	r3, #5
   2c602:	d000      	beq.n	2c606 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2c604:	e013      	b.n	2c62e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2c606:	4b0d      	ldr	r3, [pc, #52]	; (2c63c <tcpClientSocketEventHandler+0x6c>)
   2c608:	2201      	movs	r2, #1
   2c60a:	701a      	strb	r2, [r3, #0]
			break;
   2c60c:	e00f      	b.n	2c62e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2c60e:	4b0c      	ldr	r3, [pc, #48]	; (2c640 <tcpClientSocketEventHandler+0x70>)
   2c610:	2201      	movs	r2, #1
   2c612:	701a      	strb	r2, [r3, #0]
			break;
   2c614:	e00b      	b.n	2c62e <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2c616:	683b      	ldr	r3, [r7, #0]
   2c618:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2c61a:	68fb      	ldr	r3, [r7, #12]
   2c61c:	2204      	movs	r2, #4
   2c61e:	5e9b      	ldrsh	r3, [r3, r2]
   2c620:	001a      	movs	r2, r3
   2c622:	4b08      	ldr	r3, [pc, #32]	; (2c644 <tcpClientSocketEventHandler+0x74>)
   2c624:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2c626:	4b08      	ldr	r3, [pc, #32]	; (2c648 <tcpClientSocketEventHandler+0x78>)
   2c628:	2201      	movs	r2, #1
   2c62a:	701a      	strb	r2, [r3, #0]
			break;
   2c62c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2c62e:	46c0      	nop			; (mov r8, r8)
   2c630:	46bd      	mov	sp, r7
   2c632:	b004      	add	sp, #16
   2c634:	bd80      	pop	{r7, pc}
   2c636:	46c0      	nop			; (mov r8, r8)
   2c638:	0002c51d 	.word	0x0002c51d
   2c63c:	20003da1 	.word	0x20003da1
   2c640:	20003da2 	.word	0x20003da2
   2c644:	20003d9c 	.word	0x20003d9c
   2c648:	20003da3 	.word	0x20003da3

0002c64c <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2c64c:	b580      	push	{r7, lr}
   2c64e:	b082      	sub	sp, #8
   2c650:	af00      	add	r7, sp, #0
   2c652:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2c654:	687b      	ldr	r3, [r7, #4]
   2c656:	3304      	adds	r3, #4
   2c658:	687a      	ldr	r2, [r7, #4]
   2c65a:	0011      	movs	r1, r2
   2c65c:	0018      	movs	r0, r3
   2c65e:	4b05      	ldr	r3, [pc, #20]	; (2c674 <TimerIsExpired+0x28>)
   2c660:	4798      	blx	r3
   2c662:	0003      	movs	r3, r0
   2c664:	3b01      	subs	r3, #1
   2c666:	425a      	negs	r2, r3
   2c668:	4153      	adcs	r3, r2
   2c66a:	b2db      	uxtb	r3, r3
}
   2c66c:	0018      	movs	r0, r3
   2c66e:	46bd      	mov	sp, r7
   2c670:	b002      	add	sp, #8
   2c672:	bd80      	pop	{r7, pc}
   2c674:	00019405 	.word	0x00019405

0002c678 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2c678:	b580      	push	{r7, lr}
   2c67a:	b082      	sub	sp, #8
   2c67c:	af00      	add	r7, sp, #0
   2c67e:	6078      	str	r0, [r7, #4]
   2c680:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2c682:	687b      	ldr	r3, [r7, #4]
   2c684:	683a      	ldr	r2, [r7, #0]
   2c686:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2c688:	687b      	ldr	r3, [r7, #4]
   2c68a:	3304      	adds	r3, #4
   2c68c:	0018      	movs	r0, r3
   2c68e:	4b03      	ldr	r3, [pc, #12]	; (2c69c <TimerCountdownMS+0x24>)
   2c690:	4798      	blx	r3
}
   2c692:	46c0      	nop			; (mov r8, r8)
   2c694:	46bd      	mov	sp, r7
   2c696:	b002      	add	sp, #8
   2c698:	bd80      	pop	{r7, pc}
   2c69a:	46c0      	nop			; (mov r8, r8)
   2c69c:	00019399 	.word	0x00019399

0002c6a0 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2c6a0:	b580      	push	{r7, lr}
   2c6a2:	b082      	sub	sp, #8
   2c6a4:	af00      	add	r7, sp, #0
   2c6a6:	6078      	str	r0, [r7, #4]
   2c6a8:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2c6aa:	683b      	ldr	r3, [r7, #0]
   2c6ac:	22fa      	movs	r2, #250	; 0xfa
   2c6ae:	0092      	lsls	r2, r2, #2
   2c6b0:	435a      	muls	r2, r3
   2c6b2:	687b      	ldr	r3, [r7, #4]
   2c6b4:	0011      	movs	r1, r2
   2c6b6:	0018      	movs	r0, r3
   2c6b8:	4b02      	ldr	r3, [pc, #8]	; (2c6c4 <TimerCountdown+0x24>)
   2c6ba:	4798      	blx	r3
}
   2c6bc:	46c0      	nop			; (mov r8, r8)
   2c6be:	46bd      	mov	sp, r7
   2c6c0:	b002      	add	sp, #8
   2c6c2:	bd80      	pop	{r7, pc}
   2c6c4:	0002c679 	.word	0x0002c679

0002c6c8 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2c6c8:	b580      	push	{r7, lr}
   2c6ca:	b082      	sub	sp, #8
   2c6cc:	af00      	add	r7, sp, #0
   2c6ce:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2c6d0:	687b      	ldr	r3, [r7, #4]
   2c6d2:	3304      	adds	r3, #4
   2c6d4:	687a      	ldr	r2, [r7, #4]
   2c6d6:	0011      	movs	r1, r2
   2c6d8:	0018      	movs	r0, r3
   2c6da:	4b04      	ldr	r3, [pc, #16]	; (2c6ec <TimerLeftMS+0x24>)
   2c6dc:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2c6de:	687b      	ldr	r3, [r7, #4]
   2c6e0:	681b      	ldr	r3, [r3, #0]
}
   2c6e2:	0018      	movs	r0, r3
   2c6e4:	46bd      	mov	sp, r7
   2c6e6:	b002      	add	sp, #8
   2c6e8:	bd80      	pop	{r7, pc}
   2c6ea:	46c0      	nop			; (mov r8, r8)
   2c6ec:	00019405 	.word	0x00019405

0002c6f0 <TimerInit>:


void TimerInit(Timer* timer) {
   2c6f0:	b580      	push	{r7, lr}
   2c6f2:	b082      	sub	sp, #8
   2c6f4:	af00      	add	r7, sp, #0
   2c6f6:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2c6f8:	687b      	ldr	r3, [r7, #4]
   2c6fa:	2200      	movs	r2, #0
   2c6fc:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2c6fe:	687b      	ldr	r3, [r7, #4]
   2c700:	3304      	adds	r3, #4
   2c702:	2208      	movs	r2, #8
   2c704:	2100      	movs	r1, #0
   2c706:	0018      	movs	r0, r3
   2c708:	4b02      	ldr	r3, [pc, #8]	; (2c714 <TimerInit+0x24>)
   2c70a:	4798      	blx	r3
}
   2c70c:	46c0      	nop			; (mov r8, r8)
   2c70e:	46bd      	mov	sp, r7
   2c710:	b002      	add	sp, #8
   2c712:	bd80      	pop	{r7, pc}
   2c714:	000328a7 	.word	0x000328a7

0002c718 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2c718:	b590      	push	{r4, r7, lr}
   2c71a:	b085      	sub	sp, #20
   2c71c:	af00      	add	r7, sp, #0
   2c71e:	60f8      	str	r0, [r7, #12]
   2c720:	60b9      	str	r1, [r7, #8]
   2c722:	607a      	str	r2, [r7, #4]
   2c724:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2c726:	683b      	ldr	r3, [r7, #0]
   2c728:	2b00      	cmp	r3, #0
   2c72a:	d101      	bne.n	2c730 <WINC1500_read+0x18>
   2c72c:	230a      	movs	r3, #10
   2c72e:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2c730:	4b2c      	ldr	r3, [pc, #176]	; (2c7e4 <WINC1500_read+0xcc>)
   2c732:	681b      	ldr	r3, [r3, #0]
   2c734:	2b00      	cmp	r3, #0
   2c736:	d131      	bne.n	2c79c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2c738:	4b2b      	ldr	r3, [pc, #172]	; (2c7e8 <WINC1500_read+0xd0>)
   2c73a:	2200      	movs	r2, #0
   2c73c:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2c73e:	68fb      	ldr	r3, [r7, #12]
   2c740:	681b      	ldr	r3, [r3, #0]
   2c742:	b258      	sxtb	r0, r3
   2c744:	683c      	ldr	r4, [r7, #0]
   2c746:	2380      	movs	r3, #128	; 0x80
   2c748:	005a      	lsls	r2, r3, #1
   2c74a:	4928      	ldr	r1, [pc, #160]	; (2c7ec <WINC1500_read+0xd4>)
   2c74c:	0023      	movs	r3, r4
   2c74e:	4c28      	ldr	r4, [pc, #160]	; (2c7f0 <WINC1500_read+0xd8>)
   2c750:	47a0      	blx	r4
   2c752:	1e03      	subs	r3, r0, #0
   2c754:	d005      	beq.n	2c762 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2c756:	2301      	movs	r3, #1
   2c758:	425b      	negs	r3, r3
   2c75a:	e03e      	b.n	2c7da <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2c75c:	2000      	movs	r0, #0
   2c75e:	4b25      	ldr	r3, [pc, #148]	; (2c7f4 <WINC1500_read+0xdc>)
   2c760:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2c762:	4b21      	ldr	r3, [pc, #132]	; (2c7e8 <WINC1500_read+0xd0>)
   2c764:	781b      	ldrb	r3, [r3, #0]
   2c766:	2201      	movs	r2, #1
   2c768:	4053      	eors	r3, r2
   2c76a:	b2db      	uxtb	r3, r3
   2c76c:	2b00      	cmp	r3, #0
   2c76e:	d1f5      	bne.n	2c75c <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2c770:	4b21      	ldr	r3, [pc, #132]	; (2c7f8 <WINC1500_read+0xe0>)
   2c772:	681b      	ldr	r3, [r3, #0]
   2c774:	2b00      	cmp	r3, #0
   2c776:	dd08      	ble.n	2c78a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2c778:	4b1f      	ldr	r3, [pc, #124]	; (2c7f8 <WINC1500_read+0xe0>)
   2c77a:	681b      	ldr	r3, [r3, #0]
   2c77c:	001a      	movs	r2, r3
   2c77e:	4b19      	ldr	r3, [pc, #100]	; (2c7e4 <WINC1500_read+0xcc>)
   2c780:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2c782:	4b1e      	ldr	r3, [pc, #120]	; (2c7fc <WINC1500_read+0xe4>)
   2c784:	2200      	movs	r2, #0
   2c786:	601a      	str	r2, [r3, #0]
   2c788:	e008      	b.n	2c79c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2c78a:	4b16      	ldr	r3, [pc, #88]	; (2c7e4 <WINC1500_read+0xcc>)
   2c78c:	2200      	movs	r2, #0
   2c78e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2c790:	4b1a      	ldr	r3, [pc, #104]	; (2c7fc <WINC1500_read+0xe4>)
   2c792:	2200      	movs	r2, #0
   2c794:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2c796:	4b18      	ldr	r3, [pc, #96]	; (2c7f8 <WINC1500_read+0xe0>)
   2c798:	681b      	ldr	r3, [r3, #0]
   2c79a:	e01e      	b.n	2c7da <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2c79c:	4b11      	ldr	r3, [pc, #68]	; (2c7e4 <WINC1500_read+0xcc>)
   2c79e:	681b      	ldr	r3, [r3, #0]
   2c7a0:	001a      	movs	r2, r3
   2c7a2:	687b      	ldr	r3, [r7, #4]
   2c7a4:	4293      	cmp	r3, r2
   2c7a6:	dd02      	ble.n	2c7ae <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2c7a8:	2301      	movs	r3, #1
   2c7aa:	425b      	negs	r3, r3
   2c7ac:	e015      	b.n	2c7da <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2c7ae:	4b13      	ldr	r3, [pc, #76]	; (2c7fc <WINC1500_read+0xe4>)
   2c7b0:	681a      	ldr	r2, [r3, #0]
   2c7b2:	4b0e      	ldr	r3, [pc, #56]	; (2c7ec <WINC1500_read+0xd4>)
   2c7b4:	18d1      	adds	r1, r2, r3
   2c7b6:	687a      	ldr	r2, [r7, #4]
   2c7b8:	68bb      	ldr	r3, [r7, #8]
   2c7ba:	0018      	movs	r0, r3
   2c7bc:	4b10      	ldr	r3, [pc, #64]	; (2c800 <WINC1500_read+0xe8>)
   2c7be:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2c7c0:	4b08      	ldr	r3, [pc, #32]	; (2c7e4 <WINC1500_read+0xcc>)
   2c7c2:	681a      	ldr	r2, [r3, #0]
   2c7c4:	687b      	ldr	r3, [r7, #4]
   2c7c6:	1ad2      	subs	r2, r2, r3
   2c7c8:	4b06      	ldr	r3, [pc, #24]	; (2c7e4 <WINC1500_read+0xcc>)
   2c7ca:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2c7cc:	4b0b      	ldr	r3, [pc, #44]	; (2c7fc <WINC1500_read+0xe4>)
   2c7ce:	681a      	ldr	r2, [r3, #0]
   2c7d0:	687b      	ldr	r3, [r7, #4]
   2c7d2:	18d2      	adds	r2, r2, r3
   2c7d4:	4b09      	ldr	r3, [pc, #36]	; (2c7fc <WINC1500_read+0xe4>)
   2c7d6:	601a      	str	r2, [r3, #0]
  
  return len;
   2c7d8:	687b      	ldr	r3, [r7, #4]
}
   2c7da:	0018      	movs	r0, r3
   2c7dc:	46bd      	mov	sp, r7
   2c7de:	b005      	add	sp, #20
   2c7e0:	bd90      	pop	{r4, r7, pc}
   2c7e2:	46c0      	nop			; (mov r8, r8)
   2c7e4:	20003ea8 	.word	0x20003ea8
   2c7e8:	20003da3 	.word	0x20003da3
   2c7ec:	20003da4 	.word	0x20003da4
   2c7f0:	0002234d 	.word	0x0002234d
   2c7f4:	0001e895 	.word	0x0001e895
   2c7f8:	20003d9c 	.word	0x20003d9c
   2c7fc:	20003ea4 	.word	0x20003ea4
   2c800:	00032871 	.word	0x00032871

0002c804 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2c804:	b590      	push	{r4, r7, lr}
   2c806:	b085      	sub	sp, #20
   2c808:	af00      	add	r7, sp, #0
   2c80a:	60f8      	str	r0, [r7, #12]
   2c80c:	60b9      	str	r1, [r7, #8]
   2c80e:	607a      	str	r2, [r7, #4]
   2c810:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2c812:	4b10      	ldr	r3, [pc, #64]	; (2c854 <WINC1500_write+0x50>)
   2c814:	2200      	movs	r2, #0
   2c816:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2c818:	68fb      	ldr	r3, [r7, #12]
   2c81a:	681b      	ldr	r3, [r3, #0]
   2c81c:	b258      	sxtb	r0, r3
   2c81e:	687b      	ldr	r3, [r7, #4]
   2c820:	b29a      	uxth	r2, r3
   2c822:	68b9      	ldr	r1, [r7, #8]
   2c824:	2300      	movs	r3, #0
   2c826:	4c0c      	ldr	r4, [pc, #48]	; (2c858 <WINC1500_write+0x54>)
   2c828:	47a0      	blx	r4
   2c82a:	1e03      	subs	r3, r0, #0
   2c82c:	d005      	beq.n	2c83a <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2c82e:	2301      	movs	r3, #1
   2c830:	425b      	negs	r3, r3
   2c832:	e00a      	b.n	2c84a <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2c834:	2000      	movs	r0, #0
   2c836:	4b09      	ldr	r3, [pc, #36]	; (2c85c <WINC1500_write+0x58>)
   2c838:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2c83a:	4b06      	ldr	r3, [pc, #24]	; (2c854 <WINC1500_write+0x50>)
   2c83c:	781b      	ldrb	r3, [r3, #0]
   2c83e:	2201      	movs	r2, #1
   2c840:	4053      	eors	r3, r2
   2c842:	b2db      	uxtb	r3, r3
   2c844:	2b00      	cmp	r3, #0
   2c846:	d1f5      	bne.n	2c834 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2c848:	687b      	ldr	r3, [r7, #4]
}
   2c84a:	0018      	movs	r0, r3
   2c84c:	46bd      	mov	sp, r7
   2c84e:	b005      	add	sp, #20
   2c850:	bd90      	pop	{r4, r7, pc}
   2c852:	46c0      	nop			; (mov r8, r8)
   2c854:	20003da2 	.word	0x20003da2
   2c858:	000221e9 	.word	0x000221e9
   2c85c:	0001e895 	.word	0x0001e895

0002c860 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2c860:	b580      	push	{r7, lr}
   2c862:	b082      	sub	sp, #8
   2c864:	af00      	add	r7, sp, #0
   2c866:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2c868:	687b      	ldr	r3, [r7, #4]
   2c86a:	681b      	ldr	r3, [r3, #0]
   2c86c:	b25b      	sxtb	r3, r3
   2c86e:	0018      	movs	r0, r3
   2c870:	4b06      	ldr	r3, [pc, #24]	; (2c88c <WINC1500_disconnect+0x2c>)
   2c872:	4798      	blx	r3
	n->socket=-1;
   2c874:	687b      	ldr	r3, [r7, #4]
   2c876:	2201      	movs	r2, #1
   2c878:	4252      	negs	r2, r2
   2c87a:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2c87c:	4b04      	ldr	r3, [pc, #16]	; (2c890 <WINC1500_disconnect+0x30>)
   2c87e:	2200      	movs	r2, #0
   2c880:	701a      	strb	r2, [r3, #0]
}
   2c882:	46c0      	nop			; (mov r8, r8)
   2c884:	46bd      	mov	sp, r7
   2c886:	b002      	add	sp, #8
   2c888:	bd80      	pop	{r7, pc}
   2c88a:	46c0      	nop			; (mov r8, r8)
   2c88c:	000224cd 	.word	0x000224cd
   2c890:	20003da1 	.word	0x20003da1

0002c894 <NetworkInit>:


void NetworkInit(Network* n) {
   2c894:	b580      	push	{r7, lr}
   2c896:	b082      	sub	sp, #8
   2c898:	af00      	add	r7, sp, #0
   2c89a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2c89c:	687b      	ldr	r3, [r7, #4]
   2c89e:	2201      	movs	r2, #1
   2c8a0:	4252      	negs	r2, r2
   2c8a2:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2c8a4:	687b      	ldr	r3, [r7, #4]
   2c8a6:	4a06      	ldr	r2, [pc, #24]	; (2c8c0 <NetworkInit+0x2c>)
   2c8a8:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2c8aa:	687b      	ldr	r3, [r7, #4]
   2c8ac:	4a05      	ldr	r2, [pc, #20]	; (2c8c4 <NetworkInit+0x30>)
   2c8ae:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2c8b0:	687b      	ldr	r3, [r7, #4]
   2c8b2:	4a05      	ldr	r2, [pc, #20]	; (2c8c8 <NetworkInit+0x34>)
   2c8b4:	611a      	str	r2, [r3, #16]
}
   2c8b6:	46c0      	nop			; (mov r8, r8)
   2c8b8:	46bd      	mov	sp, r7
   2c8ba:	b002      	add	sp, #8
   2c8bc:	bd80      	pop	{r7, pc}
   2c8be:	46c0      	nop			; (mov r8, r8)
   2c8c0:	0002c719 	.word	0x0002c719
   2c8c4:	0002c805 	.word	0x0002c805
   2c8c8:	0002c861 	.word	0x0002c861

0002c8cc <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2c8cc:	b580      	push	{r7, lr}
   2c8ce:	b088      	sub	sp, #32
   2c8d0:	af00      	add	r7, sp, #0
   2c8d2:	60f8      	str	r0, [r7, #12]
   2c8d4:	60b9      	str	r1, [r7, #8]
   2c8d6:	607a      	str	r2, [r7, #4]
   2c8d8:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2c8da:	4b37      	ldr	r3, [pc, #220]	; (2c9b8 <ConnectNetwork+0xec>)
   2c8dc:	2200      	movs	r2, #0
   2c8de:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2c8e0:	4b36      	ldr	r3, [pc, #216]	; (2c9bc <ConnectNetwork+0xf0>)
   2c8e2:	68ba      	ldr	r2, [r7, #8]
   2c8e4:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2c8e6:	68bb      	ldr	r3, [r7, #8]
   2c8e8:	0018      	movs	r0, r3
   2c8ea:	4b35      	ldr	r3, [pc, #212]	; (2c9c0 <ConnectNetwork+0xf4>)
   2c8ec:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2c8ee:	e002      	b.n	2c8f6 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2c8f0:	2000      	movs	r0, #0
   2c8f2:	4b34      	ldr	r3, [pc, #208]	; (2c9c4 <ConnectNetwork+0xf8>)
   2c8f4:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2c8f6:	4b30      	ldr	r3, [pc, #192]	; (2c9b8 <ConnectNetwork+0xec>)
   2c8f8:	781b      	ldrb	r3, [r3, #0]
   2c8fa:	2201      	movs	r2, #1
   2c8fc:	4053      	eors	r3, r2
   2c8fe:	b2db      	uxtb	r3, r3
   2c900:	2b00      	cmp	r3, #0
   2c902:	d1f5      	bne.n	2c8f0 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2c904:	4b30      	ldr	r3, [pc, #192]	; (2c9c8 <ConnectNetwork+0xfc>)
   2c906:	681a      	ldr	r2, [r3, #0]
   2c908:	68fb      	ldr	r3, [r7, #12]
   2c90a:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2c90c:	2310      	movs	r3, #16
   2c90e:	18fb      	adds	r3, r7, r3
   2c910:	2202      	movs	r2, #2
   2c912:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2c914:	687b      	ldr	r3, [r7, #4]
   2c916:	b29b      	uxth	r3, r3
   2c918:	021b      	lsls	r3, r3, #8
   2c91a:	b21a      	sxth	r2, r3
   2c91c:	687b      	ldr	r3, [r7, #4]
   2c91e:	b29b      	uxth	r3, r3
   2c920:	0a1b      	lsrs	r3, r3, #8
   2c922:	b29b      	uxth	r3, r3
   2c924:	b21b      	sxth	r3, r3
   2c926:	4313      	orrs	r3, r2
   2c928:	b21b      	sxth	r3, r3
   2c92a:	b29a      	uxth	r2, r3
   2c92c:	2310      	movs	r3, #16
   2c92e:	18fb      	adds	r3, r7, r3
   2c930:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2c932:	4b25      	ldr	r3, [pc, #148]	; (2c9c8 <ConnectNetwork+0xfc>)
   2c934:	681b      	ldr	r3, [r3, #0]
   2c936:	001a      	movs	r2, r3
   2c938:	2310      	movs	r3, #16
   2c93a:	18fb      	adds	r3, r7, r3
   2c93c:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2c93e:	68fb      	ldr	r3, [r7, #12]
   2c940:	681b      	ldr	r3, [r3, #0]
   2c942:	2b00      	cmp	r3, #0
   2c944:	da0a      	bge.n	2c95c <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2c946:	683b      	ldr	r3, [r7, #0]
   2c948:	b2db      	uxtb	r3, r3
   2c94a:	001a      	movs	r2, r3
   2c94c:	2101      	movs	r1, #1
   2c94e:	2002      	movs	r0, #2
   2c950:	4b1e      	ldr	r3, [pc, #120]	; (2c9cc <ConnectNetwork+0x100>)
   2c952:	4798      	blx	r3
   2c954:	0003      	movs	r3, r0
   2c956:	001a      	movs	r2, r3
   2c958:	68fb      	ldr	r3, [r7, #12]
   2c95a:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2c95c:	68fb      	ldr	r3, [r7, #12]
   2c95e:	681b      	ldr	r3, [r3, #0]
   2c960:	3301      	adds	r3, #1
   2c962:	d108      	bne.n	2c976 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2c964:	68fb      	ldr	r3, [r7, #12]
   2c966:	681b      	ldr	r3, [r3, #0]
   2c968:	b25b      	sxtb	r3, r3
   2c96a:	0018      	movs	r0, r3
   2c96c:	4b18      	ldr	r3, [pc, #96]	; (2c9d0 <ConnectNetwork+0x104>)
   2c96e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2c970:	2309      	movs	r3, #9
   2c972:	425b      	negs	r3, r3
   2c974:	e01c      	b.n	2c9b0 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2c976:	68fb      	ldr	r3, [r7, #12]
   2c978:	681b      	ldr	r3, [r3, #0]
   2c97a:	b25b      	sxtb	r3, r3
   2c97c:	2210      	movs	r2, #16
   2c97e:	18b9      	adds	r1, r7, r2
   2c980:	2210      	movs	r2, #16
   2c982:	0018      	movs	r0, r3
   2c984:	4b13      	ldr	r3, [pc, #76]	; (2c9d4 <ConnectNetwork+0x108>)
   2c986:	4798      	blx	r3
   2c988:	1e03      	subs	r3, r0, #0
   2c98a:	d002      	beq.n	2c992 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2c98c:	2309      	movs	r3, #9
   2c98e:	425b      	negs	r3, r3
   2c990:	e00e      	b.n	2c9b0 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2c992:	4b11      	ldr	r3, [pc, #68]	; (2c9d8 <ConnectNetwork+0x10c>)
   2c994:	2200      	movs	r2, #0
   2c996:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2c998:	e002      	b.n	2c9a0 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2c99a:	2000      	movs	r0, #0
   2c99c:	4b09      	ldr	r3, [pc, #36]	; (2c9c4 <ConnectNetwork+0xf8>)
   2c99e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2c9a0:	4b0d      	ldr	r3, [pc, #52]	; (2c9d8 <ConnectNetwork+0x10c>)
   2c9a2:	781b      	ldrb	r3, [r3, #0]
   2c9a4:	2201      	movs	r2, #1
   2c9a6:	4053      	eors	r3, r2
   2c9a8:	b2db      	uxtb	r3, r3
   2c9aa:	2b00      	cmp	r3, #0
   2c9ac:	d1f5      	bne.n	2c99a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2c9ae:	2300      	movs	r3, #0
   2c9b0:	0018      	movs	r0, r3
   2c9b2:	46bd      	mov	sp, r7
   2c9b4:	b008      	add	sp, #32
   2c9b6:	bd80      	pop	{r7, pc}
   2c9b8:	20003da0 	.word	0x20003da0
   2c9bc:	20003eac 	.word	0x20003eac
   2c9c0:	00022715 	.word	0x00022715
   2c9c4:	0001e895 	.word	0x0001e895
   2c9c8:	20003d98 	.word	0x20003d98
   2c9cc:	00021ec1 	.word	0x00021ec1
   2c9d0:	000224cd 	.word	0x000224cd
   2c9d4:	000220d5 	.word	0x000220d5
   2c9d8:	20003da1 	.word	0x20003da1

0002c9dc <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2c9dc:	b580      	push	{r7, lr}
   2c9de:	b084      	sub	sp, #16
   2c9e0:	af00      	add	r7, sp, #0
   2c9e2:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2c9e4:	687b      	ldr	r3, [r7, #4]
   2c9e6:	2b00      	cmp	r3, #0
   2c9e8:	d024      	beq.n	2ca34 <allocateClient+0x58>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2c9ea:	2300      	movs	r3, #0
   2c9ec:	60fb      	str	r3, [r7, #12]
   2c9ee:	e01d      	b.n	2ca2c <allocateClient+0x50>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2c9f0:	4a12      	ldr	r2, [pc, #72]	; (2ca3c <allocateClient+0x60>)
   2c9f2:	68fb      	ldr	r3, [r7, #12]
   2c9f4:	2188      	movs	r1, #136	; 0x88
   2c9f6:	208c      	movs	r0, #140	; 0x8c
   2c9f8:	4343      	muls	r3, r0
   2c9fa:	18d3      	adds	r3, r2, r3
   2c9fc:	185b      	adds	r3, r3, r1
   2c9fe:	681b      	ldr	r3, [r3, #0]
   2ca00:	2b00      	cmp	r3, #0
   2ca02:	d110      	bne.n	2ca26 <allocateClient+0x4a>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2ca04:	4a0d      	ldr	r2, [pc, #52]	; (2ca3c <allocateClient+0x60>)
   2ca06:	68fb      	ldr	r3, [r7, #12]
   2ca08:	2188      	movs	r1, #136	; 0x88
   2ca0a:	208c      	movs	r0, #140	; 0x8c
   2ca0c:	4343      	muls	r3, r0
   2ca0e:	18d3      	adds	r3, r2, r3
   2ca10:	185b      	adds	r3, r3, r1
   2ca12:	687a      	ldr	r2, [r7, #4]
   2ca14:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2ca16:	68fb      	ldr	r3, [r7, #12]
   2ca18:	228c      	movs	r2, #140	; 0x8c
   2ca1a:	435a      	muls	r2, r3
   2ca1c:	4b07      	ldr	r3, [pc, #28]	; (2ca3c <allocateClient+0x60>)
   2ca1e:	18d2      	adds	r2, r2, r3
   2ca20:	687b      	ldr	r3, [r7, #4]
   2ca22:	61da      	str	r2, [r3, #28]
			return;
   2ca24:	e007      	b.n	2ca36 <allocateClient+0x5a>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ca26:	68fb      	ldr	r3, [r7, #12]
   2ca28:	3301      	adds	r3, #1
   2ca2a:	60fb      	str	r3, [r7, #12]
   2ca2c:	68fb      	ldr	r3, [r7, #12]
   2ca2e:	2b06      	cmp	r3, #6
   2ca30:	d9de      	bls.n	2c9f0 <allocateClient+0x14>
   2ca32:	e000      	b.n	2ca36 <allocateClient+0x5a>
		return;
   2ca34:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2ca36:	46bd      	mov	sp, r7
   2ca38:	b004      	add	sp, #16
   2ca3a:	bd80      	pop	{r7, pc}
   2ca3c:	20003eb0 	.word	0x20003eb0

0002ca40 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2ca40:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ca42:	b089      	sub	sp, #36	; 0x24
   2ca44:	af04      	add	r7, sp, #16
   2ca46:	6078      	str	r0, [r7, #4]
   2ca48:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2ca4a:	687b      	ldr	r3, [r7, #4]
   2ca4c:	2b00      	cmp	r3, #0
   2ca4e:	d00a      	beq.n	2ca66 <mqtt_init+0x26>
   2ca50:	683b      	ldr	r3, [r7, #0]
   2ca52:	2b00      	cmp	r3, #0
   2ca54:	d007      	beq.n	2ca66 <mqtt_init+0x26>
   2ca56:	683b      	ldr	r3, [r7, #0]
   2ca58:	691b      	ldr	r3, [r3, #16]
   2ca5a:	2b00      	cmp	r3, #0
   2ca5c:	d003      	beq.n	2ca66 <mqtt_init+0x26>
   2ca5e:	683b      	ldr	r3, [r7, #0]
   2ca60:	689b      	ldr	r3, [r3, #8]
   2ca62:	2b00      	cmp	r3, #0
   2ca64:	d102      	bne.n	2ca6c <mqtt_init+0x2c>
		return FAILURE;
   2ca66:	2301      	movs	r3, #1
   2ca68:	425b      	negs	r3, r3
   2ca6a:	e034      	b.n	2cad6 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2ca6c:	683b      	ldr	r3, [r7, #0]
   2ca6e:	889b      	ldrh	r3, [r3, #4]
   2ca70:	001a      	movs	r2, r3
   2ca72:	23fa      	movs	r3, #250	; 0xfa
   2ca74:	009b      	lsls	r3, r3, #2
   2ca76:	4353      	muls	r3, r2
   2ca78:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2ca7a:	687b      	ldr	r3, [r7, #4]
   2ca7c:	3320      	adds	r3, #32
   2ca7e:	0018      	movs	r0, r3
   2ca80:	4b17      	ldr	r3, [pc, #92]	; (2cae0 <mqtt_init+0xa0>)
   2ca82:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2ca84:	687b      	ldr	r3, [r7, #4]
   2ca86:	3304      	adds	r3, #4
   2ca88:	6839      	ldr	r1, [r7, #0]
   2ca8a:	2218      	movs	r2, #24
   2ca8c:	0018      	movs	r0, r3
   2ca8e:	4b15      	ldr	r3, [pc, #84]	; (2cae4 <mqtt_init+0xa4>)
   2ca90:	4798      	blx	r3
	allocateClient(module);
   2ca92:	687b      	ldr	r3, [r7, #4]
   2ca94:	0018      	movs	r0, r3
   2ca96:	4b14      	ldr	r3, [pc, #80]	; (2cae8 <mqtt_init+0xa8>)
   2ca98:	4798      	blx	r3
	
	if(module->client)
   2ca9a:	687b      	ldr	r3, [r7, #4]
   2ca9c:	69db      	ldr	r3, [r3, #28]
   2ca9e:	2b00      	cmp	r3, #0
   2caa0:	d017      	beq.n	2cad2 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2caa2:	687b      	ldr	r3, [r7, #4]
   2caa4:	69d8      	ldr	r0, [r3, #28]
   2caa6:	687b      	ldr	r3, [r7, #4]
   2caa8:	3320      	adds	r3, #32
   2caaa:	001c      	movs	r4, r3
   2caac:	683b      	ldr	r3, [r7, #0]
   2caae:	691e      	ldr	r6, [r3, #16]
   2cab0:	683b      	ldr	r3, [r7, #0]
   2cab2:	695a      	ldr	r2, [r3, #20]
   2cab4:	683b      	ldr	r3, [r7, #0]
   2cab6:	6899      	ldr	r1, [r3, #8]
   2cab8:	683b      	ldr	r3, [r7, #0]
   2caba:	68db      	ldr	r3, [r3, #12]
   2cabc:	68fd      	ldr	r5, [r7, #12]
   2cabe:	9302      	str	r3, [sp, #8]
   2cac0:	9101      	str	r1, [sp, #4]
   2cac2:	9200      	str	r2, [sp, #0]
   2cac4:	0033      	movs	r3, r6
   2cac6:	002a      	movs	r2, r5
   2cac8:	0021      	movs	r1, r4
   2caca:	4c08      	ldr	r4, [pc, #32]	; (2caec <mqtt_init+0xac>)
   2cacc:	47a0      	blx	r4
		return SUCCESS;
   2cace:	2300      	movs	r3, #0
   2cad0:	e001      	b.n	2cad6 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2cad2:	2301      	movs	r3, #1
   2cad4:	425b      	negs	r3, r3
}
   2cad6:	0018      	movs	r0, r3
   2cad8:	46bd      	mov	sp, r7
   2cada:	b005      	add	sp, #20
   2cadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cade:	46c0      	nop			; (mov r8, r8)
   2cae0:	0002c895 	.word	0x0002c895
   2cae4:	00032871 	.word	0x00032871
   2cae8:	0002c9dd 	.word	0x0002c9dd
   2caec:	0002b909 	.word	0x0002b909

0002caf0 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2caf0:	b580      	push	{r7, lr}
   2caf2:	b082      	sub	sp, #8
   2caf4:	af00      	add	r7, sp, #0
   2caf6:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2caf8:	687b      	ldr	r3, [r7, #4]
   2cafa:	4a0c      	ldr	r2, [pc, #48]	; (2cb2c <mqtt_get_config_defaults+0x3c>)
   2cafc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2cafe:	687b      	ldr	r3, [r7, #4]
   2cb00:	2200      	movs	r2, #0
   2cb02:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2cb04:	687b      	ldr	r3, [r7, #4]
   2cb06:	223c      	movs	r2, #60	; 0x3c
   2cb08:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2cb0a:	687b      	ldr	r3, [r7, #4]
   2cb0c:	2200      	movs	r2, #0
   2cb0e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2cb10:	687b      	ldr	r3, [r7, #4]
   2cb12:	2200      	movs	r2, #0
   2cb14:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2cb16:	687b      	ldr	r3, [r7, #4]
   2cb18:	2200      	movs	r2, #0
   2cb1a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2cb1c:	687b      	ldr	r3, [r7, #4]
   2cb1e:	2200      	movs	r2, #0
   2cb20:	615a      	str	r2, [r3, #20]
}
   2cb22:	46c0      	nop			; (mov r8, r8)
   2cb24:	46bd      	mov	sp, r7
   2cb26:	b002      	add	sp, #8
   2cb28:	bd80      	pop	{r7, pc}
   2cb2a:	46c0      	nop			; (mov r8, r8)
   2cb2c:	0000075b 	.word	0x0000075b

0002cb30 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2cb30:	b580      	push	{r7, lr}
   2cb32:	b082      	sub	sp, #8
   2cb34:	af00      	add	r7, sp, #0
   2cb36:	6078      	str	r0, [r7, #4]
   2cb38:	6039      	str	r1, [r7, #0]
	if(module)
   2cb3a:	687b      	ldr	r3, [r7, #4]
   2cb3c:	2b00      	cmp	r3, #0
   2cb3e:	d004      	beq.n	2cb4a <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2cb40:	687b      	ldr	r3, [r7, #4]
   2cb42:	683a      	ldr	r2, [r7, #0]
   2cb44:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2cb46:	2300      	movs	r3, #0
   2cb48:	e001      	b.n	2cb4e <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2cb4a:	2301      	movs	r3, #1
   2cb4c:	425b      	negs	r3, r3
}
   2cb4e:	0018      	movs	r0, r3
   2cb50:	46bd      	mov	sp, r7
   2cb52:	b002      	add	sp, #8
   2cb54:	bd80      	pop	{r7, pc}
	...

0002cb58 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2cb58:	b580      	push	{r7, lr}
   2cb5a:	b082      	sub	sp, #8
   2cb5c:	af00      	add	r7, sp, #0
   2cb5e:	603a      	str	r2, [r7, #0]
   2cb60:	1dfb      	adds	r3, r7, #7
   2cb62:	1c02      	adds	r2, r0, #0
   2cb64:	701a      	strb	r2, [r3, #0]
   2cb66:	1dbb      	adds	r3, r7, #6
   2cb68:	1c0a      	adds	r2, r1, #0
   2cb6a:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2cb6c:	683a      	ldr	r2, [r7, #0]
   2cb6e:	1dbb      	adds	r3, r7, #6
   2cb70:	7819      	ldrb	r1, [r3, #0]
   2cb72:	1dfb      	adds	r3, r7, #7
   2cb74:	781b      	ldrb	r3, [r3, #0]
   2cb76:	b25b      	sxtb	r3, r3
   2cb78:	0018      	movs	r0, r3
   2cb7a:	4b03      	ldr	r3, [pc, #12]	; (2cb88 <mqtt_socket_event_handler+0x30>)
   2cb7c:	4798      	blx	r3
}
   2cb7e:	46c0      	nop			; (mov r8, r8)
   2cb80:	46bd      	mov	sp, r7
   2cb82:	b002      	add	sp, #8
   2cb84:	bd80      	pop	{r7, pc}
   2cb86:	46c0      	nop			; (mov r8, r8)
   2cb88:	0002c5d1 	.word	0x0002c5d1

0002cb8c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2cb8c:	b580      	push	{r7, lr}
   2cb8e:	b082      	sub	sp, #8
   2cb90:	af00      	add	r7, sp, #0
   2cb92:	6078      	str	r0, [r7, #4]
   2cb94:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2cb96:	683a      	ldr	r2, [r7, #0]
   2cb98:	687b      	ldr	r3, [r7, #4]
   2cb9a:	0011      	movs	r1, r2
   2cb9c:	0018      	movs	r0, r3
   2cb9e:	4b03      	ldr	r3, [pc, #12]	; (2cbac <mqtt_socket_resolve_handler+0x20>)
   2cba0:	4798      	blx	r3
}
   2cba2:	46c0      	nop			; (mov r8, r8)
   2cba4:	46bd      	mov	sp, r7
   2cba6:	b002      	add	sp, #8
   2cba8:	bd80      	pop	{r7, pc}
   2cbaa:	46c0      	nop			; (mov r8, r8)
   2cbac:	0002c581 	.word	0x0002c581

0002cbb0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2cbb0:	b590      	push	{r4, r7, lr}
   2cbb2:	b085      	sub	sp, #20
   2cbb4:	af00      	add	r7, sp, #0
   2cbb6:	6078      	str	r0, [r7, #4]
   2cbb8:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2cbba:	687b      	ldr	r3, [r7, #4]
   2cbbc:	3320      	adds	r3, #32
   2cbbe:	0018      	movs	r0, r3
   2cbc0:	687b      	ldr	r3, [r7, #4]
   2cbc2:	889b      	ldrh	r3, [r3, #4]
   2cbc4:	001a      	movs	r2, r3
   2cbc6:	687b      	ldr	r3, [r7, #4]
   2cbc8:	799b      	ldrb	r3, [r3, #6]
   2cbca:	6839      	ldr	r1, [r7, #0]
   2cbcc:	4c09      	ldr	r4, [pc, #36]	; (2cbf4 <mqtt_connect+0x44>)
   2cbce:	47a0      	blx	r4
   2cbd0:	0003      	movs	r3, r0
   2cbd2:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2cbd4:	687b      	ldr	r3, [r7, #4]
   2cbd6:	681b      	ldr	r3, [r3, #0]
   2cbd8:	2b00      	cmp	r3, #0
   2cbda:	d006      	beq.n	2cbea <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	681b      	ldr	r3, [r3, #0]
   2cbe0:	220c      	movs	r2, #12
   2cbe2:	18ba      	adds	r2, r7, r2
   2cbe4:	6878      	ldr	r0, [r7, #4]
   2cbe6:	2100      	movs	r1, #0
   2cbe8:	4798      	blx	r3
	return connResult.sock_connected.result;
   2cbea:	68fb      	ldr	r3, [r7, #12]
}
   2cbec:	0018      	movs	r0, r3
   2cbee:	46bd      	mov	sp, r7
   2cbf0:	b005      	add	sp, #20
   2cbf2:	bd90      	pop	{r4, r7, pc}
   2cbf4:	0002c8cd 	.word	0x0002c8cd

0002cbf8 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2cbf8:	b580      	push	{r7, lr}
   2cbfa:	b09c      	sub	sp, #112	; 0x70
   2cbfc:	af00      	add	r7, sp, #0
   2cbfe:	60f8      	str	r0, [r7, #12]
   2cc00:	607a      	str	r2, [r7, #4]
   2cc02:	603b      	str	r3, [r7, #0]
   2cc04:	230b      	movs	r3, #11
   2cc06:	18fb      	adds	r3, r7, r3
   2cc08:	1c0a      	adds	r2, r1, #0
   2cc0a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2cc0c:	2310      	movs	r3, #16
   2cc0e:	18fa      	adds	r2, r7, r3
   2cc10:	4b31      	ldr	r3, [pc, #196]	; (2ccd8 <mqtt_connect_broker+0xe0>)
   2cc12:	0010      	movs	r0, r2
   2cc14:	0019      	movs	r1, r3
   2cc16:	2358      	movs	r3, #88	; 0x58
   2cc18:	001a      	movs	r2, r3
   2cc1a:	4b30      	ldr	r3, [pc, #192]	; (2ccdc <mqtt_connect_broker+0xe4>)
   2cc1c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2cc1e:	2310      	movs	r3, #16
   2cc20:	18fb      	adds	r3, r7, r3
   2cc22:	2204      	movs	r2, #4
   2cc24:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2cc26:	2310      	movs	r3, #16
   2cc28:	18fb      	adds	r3, r7, r3
   2cc2a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2cc2c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2cc2e:	2310      	movs	r3, #16
   2cc30:	18fb      	adds	r3, r7, r3
   2cc32:	687a      	ldr	r2, [r7, #4]
   2cc34:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2cc36:	2310      	movs	r3, #16
   2cc38:	18fb      	adds	r3, r7, r3
   2cc3a:	683a      	ldr	r2, [r7, #0]
   2cc3c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2cc3e:	2310      	movs	r3, #16
   2cc40:	18fb      	adds	r3, r7, r3
   2cc42:	220b      	movs	r2, #11
   2cc44:	18ba      	adds	r2, r7, r2
   2cc46:	7812      	ldrb	r2, [r2, #0]
   2cc48:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2cc4a:	2310      	movs	r3, #16
   2cc4c:	18fb      	adds	r3, r7, r3
   2cc4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2cc50:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2cc52:	2310      	movs	r3, #16
   2cc54:	18fb      	adds	r3, r7, r3
   2cc56:	2280      	movs	r2, #128	; 0x80
   2cc58:	18ba      	adds	r2, r7, r2
   2cc5a:	6812      	ldr	r2, [r2, #0]
   2cc5c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2cc5e:	2310      	movs	r3, #16
   2cc60:	18fb      	adds	r3, r7, r3
   2cc62:	228c      	movs	r2, #140	; 0x8c
   2cc64:	18ba      	adds	r2, r7, r2
   2cc66:	213c      	movs	r1, #60	; 0x3c
   2cc68:	7812      	ldrb	r2, [r2, #0]
   2cc6a:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2cc6c:	2310      	movs	r3, #16
   2cc6e:	18fb      	adds	r3, r7, r3
   2cc70:	2288      	movs	r2, #136	; 0x88
   2cc72:	18ba      	adds	r2, r7, r2
   2cc74:	213d      	movs	r1, #61	; 0x3d
   2cc76:	7812      	ldrb	r2, [r2, #0]
   2cc78:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2cc7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2cc7c:	2b00      	cmp	r3, #0
   2cc7e:	d008      	beq.n	2cc92 <mqtt_connect_broker+0x9a>
   2cc80:	2380      	movs	r3, #128	; 0x80
   2cc82:	18fb      	adds	r3, r7, r3
   2cc84:	681b      	ldr	r3, [r3, #0]
   2cc86:	2b00      	cmp	r3, #0
   2cc88:	d003      	beq.n	2cc92 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2cc8a:	2310      	movs	r3, #16
   2cc8c:	18fb      	adds	r3, r7, r3
   2cc8e:	2201      	movs	r2, #1
   2cc90:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2cc92:	68fb      	ldr	r3, [r7, #12]
   2cc94:	69db      	ldr	r3, [r3, #28]
   2cc96:	2210      	movs	r2, #16
   2cc98:	18ba      	adds	r2, r7, r2
   2cc9a:	0011      	movs	r1, r2
   2cc9c:	0018      	movs	r0, r3
   2cc9e:	4b10      	ldr	r3, [pc, #64]	; (2cce0 <mqtt_connect_broker+0xe8>)
   2cca0:	4798      	blx	r3
   2cca2:	0003      	movs	r3, r0
   2cca4:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2cca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2cca8:	b2da      	uxtb	r2, r3
   2ccaa:	2368      	movs	r3, #104	; 0x68
   2ccac:	18fb      	adds	r3, r7, r3
   2ccae:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2ccb0:	68fb      	ldr	r3, [r7, #12]
   2ccb2:	681b      	ldr	r3, [r3, #0]
   2ccb4:	2b00      	cmp	r3, #0
   2ccb6:	d006      	beq.n	2ccc6 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2ccb8:	68fb      	ldr	r3, [r7, #12]
   2ccba:	681b      	ldr	r3, [r3, #0]
   2ccbc:	2268      	movs	r2, #104	; 0x68
   2ccbe:	18ba      	adds	r2, r7, r2
   2ccc0:	68f8      	ldr	r0, [r7, #12]
   2ccc2:	2101      	movs	r1, #1
   2ccc4:	4798      	blx	r3
	
	module->isConnected = true;
   2ccc6:	68fb      	ldr	r3, [r7, #12]
   2ccc8:	2234      	movs	r2, #52	; 0x34
   2ccca:	2101      	movs	r1, #1
   2cccc:	5499      	strb	r1, [r3, r2]
	return rc;
   2ccce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2ccd0:	0018      	movs	r0, r3
   2ccd2:	46bd      	mov	sp, r7
   2ccd4:	b01c      	add	sp, #112	; 0x70
   2ccd6:	bd80      	pop	{r7, pc}
   2ccd8:	00037eec 	.word	0x00037eec
   2ccdc:	00032871 	.word	0x00032871
   2cce0:	0002c019 	.word	0x0002c019

0002cce4 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2cce4:	b580      	push	{r7, lr}
   2cce6:	b084      	sub	sp, #16
   2cce8:	af00      	add	r7, sp, #0
   2ccea:	6078      	str	r0, [r7, #4]
   2ccec:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2ccee:	687b      	ldr	r3, [r7, #4]
   2ccf0:	69db      	ldr	r3, [r3, #28]
   2ccf2:	0018      	movs	r0, r3
   2ccf4:	4b0c      	ldr	r3, [pc, #48]	; (2cd28 <mqtt_disconnect+0x44>)
   2ccf6:	4798      	blx	r3
   2ccf8:	0003      	movs	r3, r0
   2ccfa:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2ccfc:	68fb      	ldr	r3, [r7, #12]
   2ccfe:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2cd00:	687b      	ldr	r3, [r7, #4]
   2cd02:	681b      	ldr	r3, [r3, #0]
   2cd04:	2b00      	cmp	r3, #0
   2cd06:	d006      	beq.n	2cd16 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2cd08:	687b      	ldr	r3, [r7, #4]
   2cd0a:	681b      	ldr	r3, [r3, #0]
   2cd0c:	2208      	movs	r2, #8
   2cd0e:	18ba      	adds	r2, r7, r2
   2cd10:	6878      	ldr	r0, [r7, #4]
   2cd12:	2105      	movs	r1, #5
   2cd14:	4798      	blx	r3
	
	module->isConnected = false;
   2cd16:	687b      	ldr	r3, [r7, #4]
   2cd18:	2234      	movs	r2, #52	; 0x34
   2cd1a:	2100      	movs	r1, #0
   2cd1c:	5499      	strb	r1, [r3, r2]
	return rc;
   2cd1e:	68fb      	ldr	r3, [r7, #12]
}
   2cd20:	0018      	movs	r0, r3
   2cd22:	46bd      	mov	sp, r7
   2cd24:	b004      	add	sp, #16
   2cd26:	bd80      	pop	{r7, pc}
   2cd28:	0002c4a5 	.word	0x0002c4a5

0002cd2c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2cd2c:	b580      	push	{r7, lr}
   2cd2e:	b08a      	sub	sp, #40	; 0x28
   2cd30:	af00      	add	r7, sp, #0
   2cd32:	60f8      	str	r0, [r7, #12]
   2cd34:	60b9      	str	r1, [r7, #8]
   2cd36:	607a      	str	r2, [r7, #4]
   2cd38:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2cd3a:	2314      	movs	r3, #20
   2cd3c:	18fb      	adds	r3, r7, r3
   2cd3e:	2230      	movs	r2, #48	; 0x30
   2cd40:	18ba      	adds	r2, r7, r2
   2cd42:	7812      	ldrb	r2, [r2, #0]
   2cd44:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2cd46:	2314      	movs	r3, #20
   2cd48:	18fb      	adds	r3, r7, r3
   2cd4a:	687a      	ldr	r2, [r7, #4]
   2cd4c:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2cd4e:	2314      	movs	r3, #20
   2cd50:	18fb      	adds	r3, r7, r3
   2cd52:	683a      	ldr	r2, [r7, #0]
   2cd54:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2cd56:	2314      	movs	r3, #20
   2cd58:	18fb      	adds	r3, r7, r3
   2cd5a:	2234      	movs	r2, #52	; 0x34
   2cd5c:	18ba      	adds	r2, r7, r2
   2cd5e:	7812      	ldrb	r2, [r2, #0]
   2cd60:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2cd62:	68fb      	ldr	r3, [r7, #12]
   2cd64:	69db      	ldr	r3, [r3, #28]
   2cd66:	2214      	movs	r2, #20
   2cd68:	18ba      	adds	r2, r7, r2
   2cd6a:	68b9      	ldr	r1, [r7, #8]
   2cd6c:	0018      	movs	r0, r3
   2cd6e:	4b09      	ldr	r3, [pc, #36]	; (2cd94 <mqtt_publish+0x68>)
   2cd70:	4798      	blx	r3
   2cd72:	0003      	movs	r3, r0
   2cd74:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2cd76:	68fb      	ldr	r3, [r7, #12]
   2cd78:	681b      	ldr	r3, [r3, #0]
   2cd7a:	2b00      	cmp	r3, #0
   2cd7c:	d005      	beq.n	2cd8a <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2cd7e:	68fb      	ldr	r3, [r7, #12]
   2cd80:	681b      	ldr	r3, [r3, #0]
   2cd82:	68f8      	ldr	r0, [r7, #12]
   2cd84:	2200      	movs	r2, #0
   2cd86:	2102      	movs	r1, #2
   2cd88:	4798      	blx	r3
	
	return rc;
   2cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2cd8c:	0018      	movs	r0, r3
   2cd8e:	46bd      	mov	sp, r7
   2cd90:	b00a      	add	sp, #40	; 0x28
   2cd92:	bd80      	pop	{r7, pc}
   2cd94:	0002c2e5 	.word	0x0002c2e5

0002cd98 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2cd98:	b590      	push	{r4, r7, lr}
   2cd9a:	b087      	sub	sp, #28
   2cd9c:	af00      	add	r7, sp, #0
   2cd9e:	60f8      	str	r0, [r7, #12]
   2cda0:	60b9      	str	r1, [r7, #8]
   2cda2:	603b      	str	r3, [r7, #0]
   2cda4:	1dfb      	adds	r3, r7, #7
   2cda6:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2cda8:	68fb      	ldr	r3, [r7, #12]
   2cdaa:	69d8      	ldr	r0, [r3, #28]
   2cdac:	683c      	ldr	r4, [r7, #0]
   2cdae:	1dfb      	adds	r3, r7, #7
   2cdb0:	781a      	ldrb	r2, [r3, #0]
   2cdb2:	68b9      	ldr	r1, [r7, #8]
   2cdb4:	0023      	movs	r3, r4
   2cdb6:	4c09      	ldr	r4, [pc, #36]	; (2cddc <mqtt_subscribe+0x44>)
   2cdb8:	47a0      	blx	r4
   2cdba:	0003      	movs	r3, r0
   2cdbc:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2cdbe:	68fb      	ldr	r3, [r7, #12]
   2cdc0:	681b      	ldr	r3, [r3, #0]
   2cdc2:	2b00      	cmp	r3, #0
   2cdc4:	d005      	beq.n	2cdd2 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2cdc6:	68fb      	ldr	r3, [r7, #12]
   2cdc8:	681b      	ldr	r3, [r3, #0]
   2cdca:	68f8      	ldr	r0, [r7, #12]
   2cdcc:	2200      	movs	r2, #0
   2cdce:	2103      	movs	r1, #3
   2cdd0:	4798      	blx	r3
	
	return rc;
   2cdd2:	697b      	ldr	r3, [r7, #20]
}
   2cdd4:	0018      	movs	r0, r3
   2cdd6:	46bd      	mov	sp, r7
   2cdd8:	b007      	add	sp, #28
   2cdda:	bd90      	pop	{r4, r7, pc}
   2cddc:	0002c159 	.word	0x0002c159

0002cde0 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2cde0:	b580      	push	{r7, lr}
   2cde2:	b082      	sub	sp, #8
   2cde4:	af00      	add	r7, sp, #0
   2cde6:	6078      	str	r0, [r7, #4]
   2cde8:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2cdea:	687b      	ldr	r3, [r7, #4]
   2cdec:	69db      	ldr	r3, [r3, #28]
   2cdee:	683a      	ldr	r2, [r7, #0]
   2cdf0:	0011      	movs	r1, r2
   2cdf2:	0018      	movs	r0, r3
   2cdf4:	4b03      	ldr	r3, [pc, #12]	; (2ce04 <mqtt_yield+0x24>)
   2cdf6:	4798      	blx	r3
   2cdf8:	0003      	movs	r3, r0
   2cdfa:	0018      	movs	r0, r3
   2cdfc:	46bd      	mov	sp, r7
   2cdfe:	b002      	add	sp, #8
   2ce00:	bd80      	pop	{r7, pc}
   2ce02:	46c0      	nop			; (mov r8, r8)
   2ce04:	0002bf61 	.word	0x0002bf61

0002ce08 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2ce08:	b590      	push	{r4, r7, lr}
   2ce0a:	b085      	sub	sp, #20
   2ce0c:	af00      	add	r7, sp, #0
   2ce0e:	6078      	str	r0, [r7, #4]
	int len = 0;
   2ce10:	2300      	movs	r3, #0
   2ce12:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2ce14:	687b      	ldr	r3, [r7, #4]
   2ce16:	7a1b      	ldrb	r3, [r3, #8]
   2ce18:	2b03      	cmp	r3, #3
   2ce1a:	d102      	bne.n	2ce22 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2ce1c:	230c      	movs	r3, #12
   2ce1e:	60fb      	str	r3, [r7, #12]
   2ce20:	e005      	b.n	2ce2e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2ce22:	687b      	ldr	r3, [r7, #4]
   2ce24:	7a1b      	ldrb	r3, [r3, #8]
   2ce26:	2b04      	cmp	r3, #4
   2ce28:	d101      	bne.n	2ce2e <MQTTSerialize_connectLength+0x26>
		len = 10;
   2ce2a:	230a      	movs	r3, #10
   2ce2c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2ce2e:	687b      	ldr	r3, [r7, #4]
   2ce30:	68d8      	ldr	r0, [r3, #12]
   2ce32:	6919      	ldr	r1, [r3, #16]
   2ce34:	695a      	ldr	r2, [r3, #20]
   2ce36:	4b25      	ldr	r3, [pc, #148]	; (2cecc <MQTTSerialize_connectLength+0xc4>)
   2ce38:	4798      	blx	r3
   2ce3a:	0003      	movs	r3, r0
   2ce3c:	3302      	adds	r3, #2
   2ce3e:	68fa      	ldr	r2, [r7, #12]
   2ce40:	18d3      	adds	r3, r2, r3
   2ce42:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2ce44:	687b      	ldr	r3, [r7, #4]
   2ce46:	7edb      	ldrb	r3, [r3, #27]
   2ce48:	2b00      	cmp	r3, #0
   2ce4a:	d013      	beq.n	2ce74 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2ce4c:	687b      	ldr	r3, [r7, #4]
   2ce4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2ce50:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ce54:	4b1d      	ldr	r3, [pc, #116]	; (2cecc <MQTTSerialize_connectLength+0xc4>)
   2ce56:	4798      	blx	r3
   2ce58:	0003      	movs	r3, r0
   2ce5a:	1c9c      	adds	r4, r3, #2
   2ce5c:	687b      	ldr	r3, [r7, #4]
   2ce5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2ce60:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2ce62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ce64:	4b19      	ldr	r3, [pc, #100]	; (2cecc <MQTTSerialize_connectLength+0xc4>)
   2ce66:	4798      	blx	r3
   2ce68:	0003      	movs	r3, r0
   2ce6a:	18e3      	adds	r3, r4, r3
   2ce6c:	3302      	adds	r3, #2
   2ce6e:	68fa      	ldr	r2, [r7, #12]
   2ce70:	18d3      	adds	r3, r2, r3
   2ce72:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2ce74:	687b      	ldr	r3, [r7, #4]
   2ce76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ce78:	2b00      	cmp	r3, #0
   2ce7a:	d103      	bne.n	2ce84 <MQTTSerialize_connectLength+0x7c>
   2ce7c:	687b      	ldr	r3, [r7, #4]
   2ce7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ce80:	2b00      	cmp	r3, #0
   2ce82:	d00a      	beq.n	2ce9a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2ce84:	687b      	ldr	r3, [r7, #4]
   2ce86:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2ce88:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2ce8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2ce8c:	4b0f      	ldr	r3, [pc, #60]	; (2cecc <MQTTSerialize_connectLength+0xc4>)
   2ce8e:	4798      	blx	r3
   2ce90:	0003      	movs	r3, r0
   2ce92:	3302      	adds	r3, #2
   2ce94:	68fa      	ldr	r2, [r7, #12]
   2ce96:	18d3      	adds	r3, r2, r3
   2ce98:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2ce9a:	687b      	ldr	r3, [r7, #4]
   2ce9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ce9e:	2b00      	cmp	r3, #0
   2cea0:	d103      	bne.n	2ceaa <MQTTSerialize_connectLength+0xa2>
   2cea2:	687b      	ldr	r3, [r7, #4]
   2cea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2cea6:	2b00      	cmp	r3, #0
   2cea8:	d00a      	beq.n	2cec0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2ceaa:	687b      	ldr	r3, [r7, #4]
   2ceac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2ceae:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2ceb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2ceb2:	4b06      	ldr	r3, [pc, #24]	; (2cecc <MQTTSerialize_connectLength+0xc4>)
   2ceb4:	4798      	blx	r3
   2ceb6:	0003      	movs	r3, r0
   2ceb8:	3302      	adds	r3, #2
   2ceba:	68fa      	ldr	r2, [r7, #12]
   2cebc:	18d3      	adds	r3, r2, r3
   2cebe:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2cec0:	68fb      	ldr	r3, [r7, #12]
}
   2cec2:	0018      	movs	r0, r3
   2cec4:	46bd      	mov	sp, r7
   2cec6:	b005      	add	sp, #20
   2cec8:	bd90      	pop	{r4, r7, pc}
   2ceca:	46c0      	nop			; (mov r8, r8)
   2cecc:	0002d879 	.word	0x0002d879

0002ced0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2ced0:	b590      	push	{r4, r7, lr}
   2ced2:	b08b      	sub	sp, #44	; 0x2c
   2ced4:	af00      	add	r7, sp, #0
   2ced6:	60f8      	str	r0, [r7, #12]
   2ced8:	60b9      	str	r1, [r7, #8]
   2ceda:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2cedc:	68fb      	ldr	r3, [r7, #12]
   2cede:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2cee0:	2300      	movs	r3, #0
   2cee2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2cee4:	2300      	movs	r3, #0
   2cee6:	617b      	str	r3, [r7, #20]
	int len = 0;
   2cee8:	2300      	movs	r3, #0
   2ceea:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2ceec:	2301      	movs	r3, #1
   2ceee:	425b      	negs	r3, r3
   2cef0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2cef2:	687b      	ldr	r3, [r7, #4]
   2cef4:	0018      	movs	r0, r3
   2cef6:	4b8c      	ldr	r3, [pc, #560]	; (2d128 <MQTTSerialize_connect+0x258>)
   2cef8:	4798      	blx	r3
   2cefa:	0003      	movs	r3, r0
   2cefc:	623b      	str	r3, [r7, #32]
   2cefe:	6a3b      	ldr	r3, [r7, #32]
   2cf00:	0018      	movs	r0, r3
   2cf02:	4b8a      	ldr	r3, [pc, #552]	; (2d12c <MQTTSerialize_connect+0x25c>)
   2cf04:	4798      	blx	r3
   2cf06:	0002      	movs	r2, r0
   2cf08:	68bb      	ldr	r3, [r7, #8]
   2cf0a:	429a      	cmp	r2, r3
   2cf0c:	dd03      	ble.n	2cf16 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2cf0e:	2302      	movs	r3, #2
   2cf10:	425b      	negs	r3, r3
   2cf12:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2cf14:	e103      	b.n	2d11e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2cf16:	2318      	movs	r3, #24
   2cf18:	18fb      	adds	r3, r7, r3
   2cf1a:	2200      	movs	r2, #0
   2cf1c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2cf1e:	2318      	movs	r3, #24
   2cf20:	18fb      	adds	r3, r7, r3
   2cf22:	781a      	ldrb	r2, [r3, #0]
   2cf24:	210f      	movs	r1, #15
   2cf26:	400a      	ands	r2, r1
   2cf28:	1c11      	adds	r1, r2, #0
   2cf2a:	2210      	movs	r2, #16
   2cf2c:	430a      	orrs	r2, r1
   2cf2e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2cf30:	2318      	movs	r3, #24
   2cf32:	18fb      	adds	r3, r7, r3
   2cf34:	781a      	ldrb	r2, [r3, #0]
   2cf36:	231c      	movs	r3, #28
   2cf38:	18fb      	adds	r3, r7, r3
   2cf3a:	0011      	movs	r1, r2
   2cf3c:	0018      	movs	r0, r3
   2cf3e:	4b7c      	ldr	r3, [pc, #496]	; (2d130 <MQTTSerialize_connect+0x260>)
   2cf40:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2cf42:	69fb      	ldr	r3, [r7, #28]
   2cf44:	6a3a      	ldr	r2, [r7, #32]
   2cf46:	0011      	movs	r1, r2
   2cf48:	0018      	movs	r0, r3
   2cf4a:	4b7a      	ldr	r3, [pc, #488]	; (2d134 <MQTTSerialize_connect+0x264>)
   2cf4c:	4798      	blx	r3
   2cf4e:	0002      	movs	r2, r0
   2cf50:	69fb      	ldr	r3, [r7, #28]
   2cf52:	189b      	adds	r3, r3, r2
   2cf54:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2cf56:	687b      	ldr	r3, [r7, #4]
   2cf58:	7a1b      	ldrb	r3, [r3, #8]
   2cf5a:	2b04      	cmp	r3, #4
   2cf5c:	d10d      	bne.n	2cf7a <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2cf5e:	4a76      	ldr	r2, [pc, #472]	; (2d138 <MQTTSerialize_connect+0x268>)
   2cf60:	231c      	movs	r3, #28
   2cf62:	18fb      	adds	r3, r7, r3
   2cf64:	0011      	movs	r1, r2
   2cf66:	0018      	movs	r0, r3
   2cf68:	4b74      	ldr	r3, [pc, #464]	; (2d13c <MQTTSerialize_connect+0x26c>)
   2cf6a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2cf6c:	231c      	movs	r3, #28
   2cf6e:	18fb      	adds	r3, r7, r3
   2cf70:	2104      	movs	r1, #4
   2cf72:	0018      	movs	r0, r3
   2cf74:	4b6e      	ldr	r3, [pc, #440]	; (2d130 <MQTTSerialize_connect+0x260>)
   2cf76:	4798      	blx	r3
   2cf78:	e00c      	b.n	2cf94 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2cf7a:	4a71      	ldr	r2, [pc, #452]	; (2d140 <MQTTSerialize_connect+0x270>)
   2cf7c:	231c      	movs	r3, #28
   2cf7e:	18fb      	adds	r3, r7, r3
   2cf80:	0011      	movs	r1, r2
   2cf82:	0018      	movs	r0, r3
   2cf84:	4b6d      	ldr	r3, [pc, #436]	; (2d13c <MQTTSerialize_connect+0x26c>)
   2cf86:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2cf88:	231c      	movs	r3, #28
   2cf8a:	18fb      	adds	r3, r7, r3
   2cf8c:	2103      	movs	r1, #3
   2cf8e:	0018      	movs	r0, r3
   2cf90:	4b67      	ldr	r3, [pc, #412]	; (2d130 <MQTTSerialize_connect+0x260>)
   2cf92:	4798      	blx	r3
	}

	flags.all = 0;
   2cf94:	2314      	movs	r3, #20
   2cf96:	18fb      	adds	r3, r7, r3
   2cf98:	2200      	movs	r2, #0
   2cf9a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2cf9c:	687b      	ldr	r3, [r7, #4]
   2cf9e:	7e9b      	ldrb	r3, [r3, #26]
   2cfa0:	1c1a      	adds	r2, r3, #0
   2cfa2:	2301      	movs	r3, #1
   2cfa4:	4013      	ands	r3, r2
   2cfa6:	b2da      	uxtb	r2, r3
   2cfa8:	2314      	movs	r3, #20
   2cfaa:	18fb      	adds	r3, r7, r3
   2cfac:	2101      	movs	r1, #1
   2cfae:	400a      	ands	r2, r1
   2cfb0:	1890      	adds	r0, r2, r2
   2cfb2:	781a      	ldrb	r2, [r3, #0]
   2cfb4:	2102      	movs	r1, #2
   2cfb6:	438a      	bics	r2, r1
   2cfb8:	1c11      	adds	r1, r2, #0
   2cfba:	1c02      	adds	r2, r0, #0
   2cfbc:	430a      	orrs	r2, r1
   2cfbe:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2cfc0:	687b      	ldr	r3, [r7, #4]
   2cfc2:	7edb      	ldrb	r3, [r3, #27]
   2cfc4:	1e5a      	subs	r2, r3, #1
   2cfc6:	4193      	sbcs	r3, r2
   2cfc8:	b2da      	uxtb	r2, r3
   2cfca:	2314      	movs	r3, #20
   2cfcc:	18fb      	adds	r3, r7, r3
   2cfce:	2101      	movs	r1, #1
   2cfd0:	400a      	ands	r2, r1
   2cfd2:	0090      	lsls	r0, r2, #2
   2cfd4:	781a      	ldrb	r2, [r3, #0]
   2cfd6:	2104      	movs	r1, #4
   2cfd8:	438a      	bics	r2, r1
   2cfda:	1c11      	adds	r1, r2, #0
   2cfdc:	1c02      	adds	r2, r0, #0
   2cfde:	430a      	orrs	r2, r1
   2cfe0:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2cfe2:	2314      	movs	r3, #20
   2cfe4:	18fb      	adds	r3, r7, r3
   2cfe6:	781b      	ldrb	r3, [r3, #0]
   2cfe8:	2204      	movs	r2, #4
   2cfea:	4013      	ands	r3, r2
   2cfec:	b2db      	uxtb	r3, r3
   2cfee:	2b00      	cmp	r3, #0
   2cff0:	d025      	beq.n	2d03e <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2cff2:	687b      	ldr	r3, [r7, #4]
   2cff4:	223d      	movs	r2, #61	; 0x3d
   2cff6:	5c9b      	ldrb	r3, [r3, r2]
   2cff8:	1c1a      	adds	r2, r3, #0
   2cffa:	2303      	movs	r3, #3
   2cffc:	4013      	ands	r3, r2
   2cffe:	b2da      	uxtb	r2, r3
   2d000:	2314      	movs	r3, #20
   2d002:	18fb      	adds	r3, r7, r3
   2d004:	2103      	movs	r1, #3
   2d006:	400a      	ands	r2, r1
   2d008:	00d0      	lsls	r0, r2, #3
   2d00a:	781a      	ldrb	r2, [r3, #0]
   2d00c:	2118      	movs	r1, #24
   2d00e:	438a      	bics	r2, r1
   2d010:	1c11      	adds	r1, r2, #0
   2d012:	1c02      	adds	r2, r0, #0
   2d014:	430a      	orrs	r2, r1
   2d016:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2d018:	687b      	ldr	r3, [r7, #4]
   2d01a:	223c      	movs	r2, #60	; 0x3c
   2d01c:	5c9b      	ldrb	r3, [r3, r2]
   2d01e:	1c1a      	adds	r2, r3, #0
   2d020:	2301      	movs	r3, #1
   2d022:	4013      	ands	r3, r2
   2d024:	b2da      	uxtb	r2, r3
   2d026:	2314      	movs	r3, #20
   2d028:	18fb      	adds	r3, r7, r3
   2d02a:	2101      	movs	r1, #1
   2d02c:	400a      	ands	r2, r1
   2d02e:	0150      	lsls	r0, r2, #5
   2d030:	781a      	ldrb	r2, [r3, #0]
   2d032:	2120      	movs	r1, #32
   2d034:	438a      	bics	r2, r1
   2d036:	1c11      	adds	r1, r2, #0
   2d038:	1c02      	adds	r2, r0, #0
   2d03a:	430a      	orrs	r2, r1
   2d03c:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2d03e:	687b      	ldr	r3, [r7, #4]
   2d040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2d042:	2b00      	cmp	r3, #0
   2d044:	d103      	bne.n	2d04e <MQTTSerialize_connect+0x17e>
   2d046:	687b      	ldr	r3, [r7, #4]
   2d048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d04a:	2b00      	cmp	r3, #0
   2d04c:	d006      	beq.n	2d05c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2d04e:	2314      	movs	r3, #20
   2d050:	18fb      	adds	r3, r7, r3
   2d052:	781a      	ldrb	r2, [r3, #0]
   2d054:	2180      	movs	r1, #128	; 0x80
   2d056:	4249      	negs	r1, r1
   2d058:	430a      	orrs	r2, r1
   2d05a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2d05c:	687b      	ldr	r3, [r7, #4]
   2d05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d060:	2b00      	cmp	r3, #0
   2d062:	d103      	bne.n	2d06c <MQTTSerialize_connect+0x19c>
   2d064:	687b      	ldr	r3, [r7, #4]
   2d066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d068:	2b00      	cmp	r3, #0
   2d06a:	d005      	beq.n	2d078 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2d06c:	2314      	movs	r3, #20
   2d06e:	18fb      	adds	r3, r7, r3
   2d070:	781a      	ldrb	r2, [r3, #0]
   2d072:	2140      	movs	r1, #64	; 0x40
   2d074:	430a      	orrs	r2, r1
   2d076:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2d078:	2314      	movs	r3, #20
   2d07a:	18fb      	adds	r3, r7, r3
   2d07c:	781a      	ldrb	r2, [r3, #0]
   2d07e:	231c      	movs	r3, #28
   2d080:	18fb      	adds	r3, r7, r3
   2d082:	0011      	movs	r1, r2
   2d084:	0018      	movs	r0, r3
   2d086:	4b2a      	ldr	r3, [pc, #168]	; (2d130 <MQTTSerialize_connect+0x260>)
   2d088:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2d08a:	687b      	ldr	r3, [r7, #4]
   2d08c:	8b1b      	ldrh	r3, [r3, #24]
   2d08e:	001a      	movs	r2, r3
   2d090:	231c      	movs	r3, #28
   2d092:	18fb      	adds	r3, r7, r3
   2d094:	0011      	movs	r1, r2
   2d096:	0018      	movs	r0, r3
   2d098:	4b2a      	ldr	r3, [pc, #168]	; (2d144 <MQTTSerialize_connect+0x274>)
   2d09a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2d09c:	687b      	ldr	r3, [r7, #4]
   2d09e:	221c      	movs	r2, #28
   2d0a0:	18b8      	adds	r0, r7, r2
   2d0a2:	68d9      	ldr	r1, [r3, #12]
   2d0a4:	691a      	ldr	r2, [r3, #16]
   2d0a6:	695b      	ldr	r3, [r3, #20]
   2d0a8:	4c27      	ldr	r4, [pc, #156]	; (2d148 <MQTTSerialize_connect+0x278>)
   2d0aa:	47a0      	blx	r4
	if (options->willFlag)
   2d0ac:	687b      	ldr	r3, [r7, #4]
   2d0ae:	7edb      	ldrb	r3, [r3, #27]
   2d0b0:	2b00      	cmp	r3, #0
   2d0b2:	d00f      	beq.n	2d0d4 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2d0b4:	687b      	ldr	r3, [r7, #4]
   2d0b6:	221c      	movs	r2, #28
   2d0b8:	18b8      	adds	r0, r7, r2
   2d0ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2d0bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2d0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d0c0:	4c21      	ldr	r4, [pc, #132]	; (2d148 <MQTTSerialize_connect+0x278>)
   2d0c2:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2d0c4:	687b      	ldr	r3, [r7, #4]
   2d0c6:	221c      	movs	r2, #28
   2d0c8:	18b8      	adds	r0, r7, r2
   2d0ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2d0cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2d0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2d0d0:	4c1d      	ldr	r4, [pc, #116]	; (2d148 <MQTTSerialize_connect+0x278>)
   2d0d2:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2d0d4:	2314      	movs	r3, #20
   2d0d6:	18fb      	adds	r3, r7, r3
   2d0d8:	781b      	ldrb	r3, [r3, #0]
   2d0da:	227f      	movs	r2, #127	; 0x7f
   2d0dc:	4393      	bics	r3, r2
   2d0de:	b2db      	uxtb	r3, r3
   2d0e0:	2b00      	cmp	r3, #0
   2d0e2:	d007      	beq.n	2d0f4 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2d0e4:	687b      	ldr	r3, [r7, #4]
   2d0e6:	221c      	movs	r2, #28
   2d0e8:	18b8      	adds	r0, r7, r2
   2d0ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2d0ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2d0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d0f0:	4c15      	ldr	r4, [pc, #84]	; (2d148 <MQTTSerialize_connect+0x278>)
   2d0f2:	47a0      	blx	r4
	if (flags.bits.password)
   2d0f4:	2314      	movs	r3, #20
   2d0f6:	18fb      	adds	r3, r7, r3
   2d0f8:	781b      	ldrb	r3, [r3, #0]
   2d0fa:	2240      	movs	r2, #64	; 0x40
   2d0fc:	4013      	ands	r3, r2
   2d0fe:	b2db      	uxtb	r3, r3
   2d100:	2b00      	cmp	r3, #0
   2d102:	d007      	beq.n	2d114 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2d104:	687b      	ldr	r3, [r7, #4]
   2d106:	221c      	movs	r2, #28
   2d108:	18b8      	adds	r0, r7, r2
   2d10a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2d10c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2d10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2d110:	4c0d      	ldr	r4, [pc, #52]	; (2d148 <MQTTSerialize_connect+0x278>)
   2d112:	47a0      	blx	r4

	rc = ptr - buf;
   2d114:	69fb      	ldr	r3, [r7, #28]
   2d116:	001a      	movs	r2, r3
   2d118:	68fb      	ldr	r3, [r7, #12]
   2d11a:	1ad3      	subs	r3, r2, r3
   2d11c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2d120:	0018      	movs	r0, r3
   2d122:	46bd      	mov	sp, r7
   2d124:	b00b      	add	sp, #44	; 0x2c
   2d126:	bd90      	pop	{r4, r7, pc}
   2d128:	0002ce09 	.word	0x0002ce09
   2d12c:	0002d59d 	.word	0x0002d59d
   2d130:	0002d6bf 	.word	0x0002d6bf
   2d134:	0002d4a5 	.word	0x0002d4a5
   2d138:	00037f44 	.word	0x00037f44
   2d13c:	0002d741 	.word	0x0002d741
   2d140:	00037f4c 	.word	0x00037f4c
   2d144:	0002d6e9 	.word	0x0002d6e9
   2d148:	0002d791 	.word	0x0002d791

0002d14c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2d14c:	b580      	push	{r7, lr}
   2d14e:	b08a      	sub	sp, #40	; 0x28
   2d150:	af00      	add	r7, sp, #0
   2d152:	60f8      	str	r0, [r7, #12]
   2d154:	60b9      	str	r1, [r7, #8]
   2d156:	607a      	str	r2, [r7, #4]
   2d158:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2d15a:	2300      	movs	r3, #0
   2d15c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2d15e:	687b      	ldr	r3, [r7, #4]
   2d160:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2d162:	2300      	movs	r3, #0
   2d164:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2d166:	2300      	movs	r3, #0
   2d168:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2d16a:	2300      	movs	r3, #0
   2d16c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2d16e:	2318      	movs	r3, #24
   2d170:	18fb      	adds	r3, r7, r3
   2d172:	0018      	movs	r0, r3
   2d174:	4b25      	ldr	r3, [pc, #148]	; (2d20c <MQTTDeserialize_connack+0xc0>)
   2d176:	4798      	blx	r3
   2d178:	0003      	movs	r3, r0
   2d17a:	001a      	movs	r2, r3
   2d17c:	231c      	movs	r3, #28
   2d17e:	18fb      	adds	r3, r7, r3
   2d180:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2d182:	231c      	movs	r3, #28
   2d184:	18fb      	adds	r3, r7, r3
   2d186:	781b      	ldrb	r3, [r3, #0]
   2d188:	220f      	movs	r2, #15
   2d18a:	4393      	bics	r3, r2
   2d18c:	b2db      	uxtb	r3, r3
   2d18e:	2b20      	cmp	r3, #32
   2d190:	d134      	bne.n	2d1fc <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2d192:	69bb      	ldr	r3, [r7, #24]
   2d194:	2214      	movs	r2, #20
   2d196:	18ba      	adds	r2, r7, r2
   2d198:	0011      	movs	r1, r2
   2d19a:	0018      	movs	r0, r3
   2d19c:	4b1c      	ldr	r3, [pc, #112]	; (2d210 <MQTTDeserialize_connack+0xc4>)
   2d19e:	4798      	blx	r3
   2d1a0:	0003      	movs	r3, r0
   2d1a2:	627b      	str	r3, [r7, #36]	; 0x24
   2d1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d1a6:	69bb      	ldr	r3, [r7, #24]
   2d1a8:	189b      	adds	r3, r3, r2
   2d1aa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2d1ac:	69bb      	ldr	r3, [r7, #24]
   2d1ae:	697a      	ldr	r2, [r7, #20]
   2d1b0:	189b      	adds	r3, r3, r2
   2d1b2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2d1b4:	6a3b      	ldr	r3, [r7, #32]
   2d1b6:	69ba      	ldr	r2, [r7, #24]
   2d1b8:	1a9b      	subs	r3, r3, r2
   2d1ba:	2b01      	cmp	r3, #1
   2d1bc:	dd20      	ble.n	2d200 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2d1be:	2318      	movs	r3, #24
   2d1c0:	18fb      	adds	r3, r7, r3
   2d1c2:	0018      	movs	r0, r3
   2d1c4:	4b11      	ldr	r3, [pc, #68]	; (2d20c <MQTTDeserialize_connack+0xc0>)
   2d1c6:	4798      	blx	r3
   2d1c8:	0003      	movs	r3, r0
   2d1ca:	001a      	movs	r2, r3
   2d1cc:	2310      	movs	r3, #16
   2d1ce:	18fb      	adds	r3, r7, r3
   2d1d0:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2d1d2:	2310      	movs	r3, #16
   2d1d4:	18fb      	adds	r3, r7, r3
   2d1d6:	781b      	ldrb	r3, [r3, #0]
   2d1d8:	061b      	lsls	r3, r3, #24
   2d1da:	0fdb      	lsrs	r3, r3, #31
   2d1dc:	b2db      	uxtb	r3, r3
   2d1de:	001a      	movs	r2, r3
   2d1e0:	68fb      	ldr	r3, [r7, #12]
   2d1e2:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2d1e4:	2318      	movs	r3, #24
   2d1e6:	18fb      	adds	r3, r7, r3
   2d1e8:	0018      	movs	r0, r3
   2d1ea:	4b08      	ldr	r3, [pc, #32]	; (2d20c <MQTTDeserialize_connack+0xc0>)
   2d1ec:	4798      	blx	r3
   2d1ee:	0003      	movs	r3, r0
   2d1f0:	001a      	movs	r2, r3
   2d1f2:	68bb      	ldr	r3, [r7, #8]
   2d1f4:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2d1f6:	2301      	movs	r3, #1
   2d1f8:	627b      	str	r3, [r7, #36]	; 0x24
   2d1fa:	e002      	b.n	2d202 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2d1fc:	46c0      	nop			; (mov r8, r8)
   2d1fe:	e000      	b.n	2d202 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2d200:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2d202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2d204:	0018      	movs	r0, r3
   2d206:	46bd      	mov	sp, r7
   2d208:	b00a      	add	sp, #40	; 0x28
   2d20a:	bd80      	pop	{r7, pc}
   2d20c:	0002d693 	.word	0x0002d693
   2d210:	0002d62d 	.word	0x0002d62d

0002d214 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2d214:	b580      	push	{r7, lr}
   2d216:	b088      	sub	sp, #32
   2d218:	af00      	add	r7, sp, #0
   2d21a:	60f8      	str	r0, [r7, #12]
   2d21c:	60b9      	str	r1, [r7, #8]
   2d21e:	1dfb      	adds	r3, r7, #7
   2d220:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2d222:	2300      	movs	r3, #0
   2d224:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2d226:	2301      	movs	r3, #1
   2d228:	425b      	negs	r3, r3
   2d22a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2d22c:	68fb      	ldr	r3, [r7, #12]
   2d22e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2d230:	68bb      	ldr	r3, [r7, #8]
   2d232:	2b01      	cmp	r3, #1
   2d234:	dc03      	bgt.n	2d23e <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2d236:	2302      	movs	r3, #2
   2d238:	425b      	negs	r3, r3
   2d23a:	61fb      	str	r3, [r7, #28]
		goto exit;
   2d23c:	e029      	b.n	2d292 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2d23e:	2318      	movs	r3, #24
   2d240:	18fb      	adds	r3, r7, r3
   2d242:	2200      	movs	r2, #0
   2d244:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2d246:	1dfb      	adds	r3, r7, #7
   2d248:	781b      	ldrb	r3, [r3, #0]
   2d24a:	220f      	movs	r2, #15
   2d24c:	4013      	ands	r3, r2
   2d24e:	b2da      	uxtb	r2, r3
   2d250:	2318      	movs	r3, #24
   2d252:	18fb      	adds	r3, r7, r3
   2d254:	0110      	lsls	r0, r2, #4
   2d256:	781a      	ldrb	r2, [r3, #0]
   2d258:	210f      	movs	r1, #15
   2d25a:	400a      	ands	r2, r1
   2d25c:	1c11      	adds	r1, r2, #0
   2d25e:	1c02      	adds	r2, r0, #0
   2d260:	430a      	orrs	r2, r1
   2d262:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2d264:	2318      	movs	r3, #24
   2d266:	18fb      	adds	r3, r7, r3
   2d268:	781a      	ldrb	r2, [r3, #0]
   2d26a:	2314      	movs	r3, #20
   2d26c:	18fb      	adds	r3, r7, r3
   2d26e:	0011      	movs	r1, r2
   2d270:	0018      	movs	r0, r3
   2d272:	4b0a      	ldr	r3, [pc, #40]	; (2d29c <MQTTSerialize_zero+0x88>)
   2d274:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2d276:	697b      	ldr	r3, [r7, #20]
   2d278:	2100      	movs	r1, #0
   2d27a:	0018      	movs	r0, r3
   2d27c:	4b08      	ldr	r3, [pc, #32]	; (2d2a0 <MQTTSerialize_zero+0x8c>)
   2d27e:	4798      	blx	r3
   2d280:	0002      	movs	r2, r0
   2d282:	697b      	ldr	r3, [r7, #20]
   2d284:	189b      	adds	r3, r3, r2
   2d286:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2d288:	697b      	ldr	r3, [r7, #20]
   2d28a:	001a      	movs	r2, r3
   2d28c:	68fb      	ldr	r3, [r7, #12]
   2d28e:	1ad3      	subs	r3, r2, r3
   2d290:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2d292:	69fb      	ldr	r3, [r7, #28]
}
   2d294:	0018      	movs	r0, r3
   2d296:	46bd      	mov	sp, r7
   2d298:	b008      	add	sp, #32
   2d29a:	bd80      	pop	{r7, pc}
   2d29c:	0002d6bf 	.word	0x0002d6bf
   2d2a0:	0002d4a5 	.word	0x0002d4a5

0002d2a4 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2d2a4:	b580      	push	{r7, lr}
   2d2a6:	b082      	sub	sp, #8
   2d2a8:	af00      	add	r7, sp, #0
   2d2aa:	6078      	str	r0, [r7, #4]
   2d2ac:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2d2ae:	6839      	ldr	r1, [r7, #0]
   2d2b0:	687b      	ldr	r3, [r7, #4]
   2d2b2:	220e      	movs	r2, #14
   2d2b4:	0018      	movs	r0, r3
   2d2b6:	4b03      	ldr	r3, [pc, #12]	; (2d2c4 <MQTTSerialize_disconnect+0x20>)
   2d2b8:	4798      	blx	r3
   2d2ba:	0003      	movs	r3, r0
}
   2d2bc:	0018      	movs	r0, r3
   2d2be:	46bd      	mov	sp, r7
   2d2c0:	b002      	add	sp, #8
   2d2c2:	bd80      	pop	{r7, pc}
   2d2c4:	0002d215 	.word	0x0002d215

0002d2c8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2d2c8:	b580      	push	{r7, lr}
   2d2ca:	b082      	sub	sp, #8
   2d2cc:	af00      	add	r7, sp, #0
   2d2ce:	6078      	str	r0, [r7, #4]
   2d2d0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2d2d2:	6839      	ldr	r1, [r7, #0]
   2d2d4:	687b      	ldr	r3, [r7, #4]
   2d2d6:	220c      	movs	r2, #12
   2d2d8:	0018      	movs	r0, r3
   2d2da:	4b03      	ldr	r3, [pc, #12]	; (2d2e8 <MQTTSerialize_pingreq+0x20>)
   2d2dc:	4798      	blx	r3
   2d2de:	0003      	movs	r3, r0
}
   2d2e0:	0018      	movs	r0, r3
   2d2e2:	46bd      	mov	sp, r7
   2d2e4:	b002      	add	sp, #8
   2d2e6:	bd80      	pop	{r7, pc}
   2d2e8:	0002d215 	.word	0x0002d215

0002d2ec <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2d2ec:	b580      	push	{r7, lr}
   2d2ee:	b08a      	sub	sp, #40	; 0x28
   2d2f0:	af00      	add	r7, sp, #0
   2d2f2:	60f8      	str	r0, [r7, #12]
   2d2f4:	60b9      	str	r1, [r7, #8]
   2d2f6:	607a      	str	r2, [r7, #4]
   2d2f8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2d2fa:	2300      	movs	r3, #0
   2d2fc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2d2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d300:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2d302:	2300      	movs	r3, #0
   2d304:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2d306:	2300      	movs	r3, #0
   2d308:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2d30a:	2300      	movs	r3, #0
   2d30c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2d30e:	2318      	movs	r3, #24
   2d310:	18fb      	adds	r3, r7, r3
   2d312:	0018      	movs	r0, r3
   2d314:	4b32      	ldr	r3, [pc, #200]	; (2d3e0 <MQTTDeserialize_publish+0xf4>)
   2d316:	4798      	blx	r3
   2d318:	0003      	movs	r3, r0
   2d31a:	001a      	movs	r2, r3
   2d31c:	231c      	movs	r3, #28
   2d31e:	18fb      	adds	r3, r7, r3
   2d320:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2d322:	231c      	movs	r3, #28
   2d324:	18fb      	adds	r3, r7, r3
   2d326:	781b      	ldrb	r3, [r3, #0]
   2d328:	220f      	movs	r2, #15
   2d32a:	4393      	bics	r3, r2
   2d32c:	b2db      	uxtb	r3, r3
   2d32e:	2b30      	cmp	r3, #48	; 0x30
   2d330:	d150      	bne.n	2d3d4 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2d332:	231c      	movs	r3, #28
   2d334:	18fb      	adds	r3, r7, r3
   2d336:	781b      	ldrb	r3, [r3, #0]
   2d338:	071b      	lsls	r3, r3, #28
   2d33a:	0fdb      	lsrs	r3, r3, #31
   2d33c:	b2db      	uxtb	r3, r3
   2d33e:	001a      	movs	r2, r3
   2d340:	68fb      	ldr	r3, [r7, #12]
   2d342:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2d344:	231c      	movs	r3, #28
   2d346:	18fb      	adds	r3, r7, r3
   2d348:	781b      	ldrb	r3, [r3, #0]
   2d34a:	075b      	lsls	r3, r3, #29
   2d34c:	0f9b      	lsrs	r3, r3, #30
   2d34e:	b2db      	uxtb	r3, r3
   2d350:	001a      	movs	r2, r3
   2d352:	68bb      	ldr	r3, [r7, #8]
   2d354:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2d356:	231c      	movs	r3, #28
   2d358:	18fb      	adds	r3, r7, r3
   2d35a:	781b      	ldrb	r3, [r3, #0]
   2d35c:	07db      	lsls	r3, r3, #31
   2d35e:	0fdb      	lsrs	r3, r3, #31
   2d360:	b2db      	uxtb	r3, r3
   2d362:	001a      	movs	r2, r3
   2d364:	687b      	ldr	r3, [r7, #4]
   2d366:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2d368:	69bb      	ldr	r3, [r7, #24]
   2d36a:	2214      	movs	r2, #20
   2d36c:	18ba      	adds	r2, r7, r2
   2d36e:	0011      	movs	r1, r2
   2d370:	0018      	movs	r0, r3
   2d372:	4b1c      	ldr	r3, [pc, #112]	; (2d3e4 <MQTTDeserialize_publish+0xf8>)
   2d374:	4798      	blx	r3
   2d376:	0003      	movs	r3, r0
   2d378:	627b      	str	r3, [r7, #36]	; 0x24
   2d37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d37c:	69bb      	ldr	r3, [r7, #24]
   2d37e:	189b      	adds	r3, r3, r2
   2d380:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2d382:	69bb      	ldr	r3, [r7, #24]
   2d384:	697a      	ldr	r2, [r7, #20]
   2d386:	189b      	adds	r3, r3, r2
   2d388:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2d38a:	6a3a      	ldr	r2, [r7, #32]
   2d38c:	2318      	movs	r3, #24
   2d38e:	18f9      	adds	r1, r7, r3
   2d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d392:	0018      	movs	r0, r3
   2d394:	4b14      	ldr	r3, [pc, #80]	; (2d3e8 <MQTTDeserialize_publish+0xfc>)
   2d396:	4798      	blx	r3
   2d398:	1e03      	subs	r3, r0, #0
   2d39a:	d01c      	beq.n	2d3d6 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2d39c:	6a3b      	ldr	r3, [r7, #32]
   2d39e:	69ba      	ldr	r2, [r7, #24]
   2d3a0:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2d3a2:	d418      	bmi.n	2d3d6 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2d3a4:	68bb      	ldr	r3, [r7, #8]
   2d3a6:	681b      	ldr	r3, [r3, #0]
   2d3a8:	2b00      	cmp	r3, #0
   2d3aa:	dd08      	ble.n	2d3be <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2d3ac:	2318      	movs	r3, #24
   2d3ae:	18fb      	adds	r3, r7, r3
   2d3b0:	0018      	movs	r0, r3
   2d3b2:	4b0e      	ldr	r3, [pc, #56]	; (2d3ec <MQTTDeserialize_publish+0x100>)
   2d3b4:	4798      	blx	r3
   2d3b6:	0003      	movs	r3, r0
   2d3b8:	b29a      	uxth	r2, r3
   2d3ba:	683b      	ldr	r3, [r7, #0]
   2d3bc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2d3be:	6a3b      	ldr	r3, [r7, #32]
   2d3c0:	69ba      	ldr	r2, [r7, #24]
   2d3c2:	1a9a      	subs	r2, r3, r2
   2d3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d3c6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2d3c8:	69ba      	ldr	r2, [r7, #24]
   2d3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d3cc:	601a      	str	r2, [r3, #0]
	rc = 1;
   2d3ce:	2301      	movs	r3, #1
   2d3d0:	627b      	str	r3, [r7, #36]	; 0x24
   2d3d2:	e000      	b.n	2d3d6 <MQTTDeserialize_publish+0xea>
		goto exit;
   2d3d4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2d3d8:	0018      	movs	r0, r3
   2d3da:	46bd      	mov	sp, r7
   2d3dc:	b00a      	add	sp, #40	; 0x28
   2d3de:	bd80      	pop	{r7, pc}
   2d3e0:	0002d693 	.word	0x0002d693
   2d3e4:	0002d62d 	.word	0x0002d62d
   2d3e8:	0002d811 	.word	0x0002d811
   2d3ec:	0002d661 	.word	0x0002d661

0002d3f0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2d3f0:	b580      	push	{r7, lr}
   2d3f2:	b08a      	sub	sp, #40	; 0x28
   2d3f4:	af00      	add	r7, sp, #0
   2d3f6:	60f8      	str	r0, [r7, #12]
   2d3f8:	60b9      	str	r1, [r7, #8]
   2d3fa:	607a      	str	r2, [r7, #4]
   2d3fc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2d3fe:	2300      	movs	r3, #0
   2d400:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2d402:	683b      	ldr	r3, [r7, #0]
   2d404:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2d406:	2300      	movs	r3, #0
   2d408:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2d40a:	2300      	movs	r3, #0
   2d40c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2d40e:	2318      	movs	r3, #24
   2d410:	18fb      	adds	r3, r7, r3
   2d412:	0018      	movs	r0, r3
   2d414:	4b20      	ldr	r3, [pc, #128]	; (2d498 <MQTTDeserialize_ack+0xa8>)
   2d416:	4798      	blx	r3
   2d418:	0003      	movs	r3, r0
   2d41a:	001a      	movs	r2, r3
   2d41c:	231c      	movs	r3, #28
   2d41e:	18fb      	adds	r3, r7, r3
   2d420:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2d422:	231c      	movs	r3, #28
   2d424:	18fb      	adds	r3, r7, r3
   2d426:	781b      	ldrb	r3, [r3, #0]
   2d428:	071b      	lsls	r3, r3, #28
   2d42a:	0fdb      	lsrs	r3, r3, #31
   2d42c:	b2db      	uxtb	r3, r3
   2d42e:	001a      	movs	r2, r3
   2d430:	68bb      	ldr	r3, [r7, #8]
   2d432:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2d434:	231c      	movs	r3, #28
   2d436:	18fb      	adds	r3, r7, r3
   2d438:	781b      	ldrb	r3, [r3, #0]
   2d43a:	061b      	lsls	r3, r3, #24
   2d43c:	0f1b      	lsrs	r3, r3, #28
   2d43e:	b2db      	uxtb	r3, r3
   2d440:	001a      	movs	r2, r3
   2d442:	68fb      	ldr	r3, [r7, #12]
   2d444:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2d446:	69bb      	ldr	r3, [r7, #24]
   2d448:	2214      	movs	r2, #20
   2d44a:	18ba      	adds	r2, r7, r2
   2d44c:	0011      	movs	r1, r2
   2d44e:	0018      	movs	r0, r3
   2d450:	4b12      	ldr	r3, [pc, #72]	; (2d49c <MQTTDeserialize_ack+0xac>)
   2d452:	4798      	blx	r3
   2d454:	0003      	movs	r3, r0
   2d456:	627b      	str	r3, [r7, #36]	; 0x24
   2d458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d45a:	69bb      	ldr	r3, [r7, #24]
   2d45c:	189b      	adds	r3, r3, r2
   2d45e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2d460:	69bb      	ldr	r3, [r7, #24]
   2d462:	697a      	ldr	r2, [r7, #20]
   2d464:	189b      	adds	r3, r3, r2
   2d466:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2d468:	6a3b      	ldr	r3, [r7, #32]
   2d46a:	69ba      	ldr	r2, [r7, #24]
   2d46c:	1a9b      	subs	r3, r3, r2
   2d46e:	2b01      	cmp	r3, #1
   2d470:	dd0b      	ble.n	2d48a <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2d472:	2318      	movs	r3, #24
   2d474:	18fb      	adds	r3, r7, r3
   2d476:	0018      	movs	r0, r3
   2d478:	4b09      	ldr	r3, [pc, #36]	; (2d4a0 <MQTTDeserialize_ack+0xb0>)
   2d47a:	4798      	blx	r3
   2d47c:	0003      	movs	r3, r0
   2d47e:	b29a      	uxth	r2, r3
   2d480:	687b      	ldr	r3, [r7, #4]
   2d482:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2d484:	2301      	movs	r3, #1
   2d486:	627b      	str	r3, [r7, #36]	; 0x24
   2d488:	e000      	b.n	2d48c <MQTTDeserialize_ack+0x9c>
		goto exit;
   2d48a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2d48e:	0018      	movs	r0, r3
   2d490:	46bd      	mov	sp, r7
   2d492:	b00a      	add	sp, #40	; 0x28
   2d494:	bd80      	pop	{r7, pc}
   2d496:	46c0      	nop			; (mov r8, r8)
   2d498:	0002d693 	.word	0x0002d693
   2d49c:	0002d62d 	.word	0x0002d62d
   2d4a0:	0002d661 	.word	0x0002d661

0002d4a4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2d4a4:	b580      	push	{r7, lr}
   2d4a6:	b084      	sub	sp, #16
   2d4a8:	af00      	add	r7, sp, #0
   2d4aa:	6078      	str	r0, [r7, #4]
   2d4ac:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2d4ae:	2300      	movs	r3, #0
   2d4b0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2d4b2:	683b      	ldr	r3, [r7, #0]
   2d4b4:	4a17      	ldr	r2, [pc, #92]	; (2d514 <MQTTPacket_encode+0x70>)
   2d4b6:	4013      	ands	r3, r2
   2d4b8:	d504      	bpl.n	2d4c4 <MQTTPacket_encode+0x20>
   2d4ba:	3b01      	subs	r3, #1
   2d4bc:	2280      	movs	r2, #128	; 0x80
   2d4be:	4252      	negs	r2, r2
   2d4c0:	4313      	orrs	r3, r2
   2d4c2:	3301      	adds	r3, #1
   2d4c4:	001a      	movs	r2, r3
   2d4c6:	230b      	movs	r3, #11
   2d4c8:	18fb      	adds	r3, r7, r3
   2d4ca:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2d4cc:	683b      	ldr	r3, [r7, #0]
   2d4ce:	2b00      	cmp	r3, #0
   2d4d0:	da00      	bge.n	2d4d4 <MQTTPacket_encode+0x30>
   2d4d2:	337f      	adds	r3, #127	; 0x7f
   2d4d4:	11db      	asrs	r3, r3, #7
   2d4d6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2d4d8:	683b      	ldr	r3, [r7, #0]
   2d4da:	2b00      	cmp	r3, #0
   2d4dc:	dd08      	ble.n	2d4f0 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2d4de:	230b      	movs	r3, #11
   2d4e0:	18fb      	adds	r3, r7, r3
   2d4e2:	220b      	movs	r2, #11
   2d4e4:	18ba      	adds	r2, r7, r2
   2d4e6:	7812      	ldrb	r2, [r2, #0]
   2d4e8:	2180      	movs	r1, #128	; 0x80
   2d4ea:	4249      	negs	r1, r1
   2d4ec:	430a      	orrs	r2, r1
   2d4ee:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2d4f0:	68fb      	ldr	r3, [r7, #12]
   2d4f2:	1c5a      	adds	r2, r3, #1
   2d4f4:	60fa      	str	r2, [r7, #12]
   2d4f6:	001a      	movs	r2, r3
   2d4f8:	687b      	ldr	r3, [r7, #4]
   2d4fa:	189b      	adds	r3, r3, r2
   2d4fc:	220b      	movs	r2, #11
   2d4fe:	18ba      	adds	r2, r7, r2
   2d500:	7812      	ldrb	r2, [r2, #0]
   2d502:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2d504:	683b      	ldr	r3, [r7, #0]
   2d506:	2b00      	cmp	r3, #0
   2d508:	dcd3      	bgt.n	2d4b2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2d50a:	68fb      	ldr	r3, [r7, #12]
}
   2d50c:	0018      	movs	r0, r3
   2d50e:	46bd      	mov	sp, r7
   2d510:	b004      	add	sp, #16
   2d512:	bd80      	pop	{r7, pc}
   2d514:	8000007f 	.word	0x8000007f

0002d518 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2d518:	b580      	push	{r7, lr}
   2d51a:	b086      	sub	sp, #24
   2d51c:	af00      	add	r7, sp, #0
   2d51e:	6078      	str	r0, [r7, #4]
   2d520:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2d522:	2301      	movs	r3, #1
   2d524:	617b      	str	r3, [r7, #20]
	int len = 0;
   2d526:	2300      	movs	r3, #0
   2d528:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2d52a:	683b      	ldr	r3, [r7, #0]
   2d52c:	2200      	movs	r2, #0
   2d52e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2d530:	2301      	movs	r3, #1
   2d532:	425b      	negs	r3, r3
   2d534:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2d536:	693b      	ldr	r3, [r7, #16]
   2d538:	3301      	adds	r3, #1
   2d53a:	613b      	str	r3, [r7, #16]
   2d53c:	693b      	ldr	r3, [r7, #16]
   2d53e:	2b04      	cmp	r3, #4
   2d540:	dd03      	ble.n	2d54a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2d542:	2301      	movs	r3, #1
   2d544:	425b      	negs	r3, r3
   2d546:	60fb      	str	r3, [r7, #12]
			goto exit;
   2d548:	e022      	b.n	2d590 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2d54a:	230b      	movs	r3, #11
   2d54c:	18fa      	adds	r2, r7, r3
   2d54e:	687b      	ldr	r3, [r7, #4]
   2d550:	2101      	movs	r1, #1
   2d552:	0010      	movs	r0, r2
   2d554:	4798      	blx	r3
   2d556:	0003      	movs	r3, r0
   2d558:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2d55a:	68fb      	ldr	r3, [r7, #12]
   2d55c:	2b01      	cmp	r3, #1
   2d55e:	d116      	bne.n	2d58e <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2d560:	683b      	ldr	r3, [r7, #0]
   2d562:	681a      	ldr	r2, [r3, #0]
   2d564:	230b      	movs	r3, #11
   2d566:	18fb      	adds	r3, r7, r3
   2d568:	781b      	ldrb	r3, [r3, #0]
   2d56a:	0019      	movs	r1, r3
   2d56c:	237f      	movs	r3, #127	; 0x7f
   2d56e:	400b      	ands	r3, r1
   2d570:	6979      	ldr	r1, [r7, #20]
   2d572:	434b      	muls	r3, r1
   2d574:	18d2      	adds	r2, r2, r3
   2d576:	683b      	ldr	r3, [r7, #0]
   2d578:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2d57a:	697b      	ldr	r3, [r7, #20]
   2d57c:	01db      	lsls	r3, r3, #7
   2d57e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2d580:	230b      	movs	r3, #11
   2d582:	18fb      	adds	r3, r7, r3
   2d584:	781b      	ldrb	r3, [r3, #0]
   2d586:	b25b      	sxtb	r3, r3
   2d588:	2b00      	cmp	r3, #0
   2d58a:	dbd1      	blt.n	2d530 <MQTTPacket_decode+0x18>
   2d58c:	e000      	b.n	2d590 <MQTTPacket_decode+0x78>
			goto exit;
   2d58e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2d590:	693b      	ldr	r3, [r7, #16]
}
   2d592:	0018      	movs	r0, r3
   2d594:	46bd      	mov	sp, r7
   2d596:	b006      	add	sp, #24
   2d598:	bd80      	pop	{r7, pc}
	...

0002d59c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2d59c:	b580      	push	{r7, lr}
   2d59e:	b082      	sub	sp, #8
   2d5a0:	af00      	add	r7, sp, #0
   2d5a2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2d5a4:	687b      	ldr	r3, [r7, #4]
   2d5a6:	3301      	adds	r3, #1
   2d5a8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2d5aa:	687b      	ldr	r3, [r7, #4]
   2d5ac:	2b7f      	cmp	r3, #127	; 0x7f
   2d5ae:	dc03      	bgt.n	2d5b8 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2d5b0:	687b      	ldr	r3, [r7, #4]
   2d5b2:	3301      	adds	r3, #1
   2d5b4:	607b      	str	r3, [r7, #4]
   2d5b6:	e012      	b.n	2d5de <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2d5b8:	687b      	ldr	r3, [r7, #4]
   2d5ba:	4a0b      	ldr	r2, [pc, #44]	; (2d5e8 <MQTTPacket_len+0x4c>)
   2d5bc:	4293      	cmp	r3, r2
   2d5be:	dc03      	bgt.n	2d5c8 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2d5c0:	687b      	ldr	r3, [r7, #4]
   2d5c2:	3302      	adds	r3, #2
   2d5c4:	607b      	str	r3, [r7, #4]
   2d5c6:	e00a      	b.n	2d5de <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2d5c8:	687b      	ldr	r3, [r7, #4]
   2d5ca:	4a08      	ldr	r2, [pc, #32]	; (2d5ec <MQTTPacket_len+0x50>)
   2d5cc:	4293      	cmp	r3, r2
   2d5ce:	dc03      	bgt.n	2d5d8 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2d5d0:	687b      	ldr	r3, [r7, #4]
   2d5d2:	3303      	adds	r3, #3
   2d5d4:	607b      	str	r3, [r7, #4]
   2d5d6:	e002      	b.n	2d5de <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2d5d8:	687b      	ldr	r3, [r7, #4]
   2d5da:	3304      	adds	r3, #4
   2d5dc:	607b      	str	r3, [r7, #4]
	return rem_len;
   2d5de:	687b      	ldr	r3, [r7, #4]
}
   2d5e0:	0018      	movs	r0, r3
   2d5e2:	46bd      	mov	sp, r7
   2d5e4:	b002      	add	sp, #8
   2d5e6:	bd80      	pop	{r7, pc}
   2d5e8:	00003fff 	.word	0x00003fff
   2d5ec:	001ffffe 	.word	0x001ffffe

0002d5f0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2d5f0:	b580      	push	{r7, lr}
   2d5f2:	b084      	sub	sp, #16
   2d5f4:	af00      	add	r7, sp, #0
   2d5f6:	6078      	str	r0, [r7, #4]
   2d5f8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2d5fa:	2300      	movs	r3, #0
   2d5fc:	60fb      	str	r3, [r7, #12]
   2d5fe:	e00a      	b.n	2d616 <bufchar+0x26>
		*c = *bufptr++;
   2d600:	4b09      	ldr	r3, [pc, #36]	; (2d628 <bufchar+0x38>)
   2d602:	681b      	ldr	r3, [r3, #0]
   2d604:	1c59      	adds	r1, r3, #1
   2d606:	4a08      	ldr	r2, [pc, #32]	; (2d628 <bufchar+0x38>)
   2d608:	6011      	str	r1, [r2, #0]
   2d60a:	781a      	ldrb	r2, [r3, #0]
   2d60c:	687b      	ldr	r3, [r7, #4]
   2d60e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2d610:	68fb      	ldr	r3, [r7, #12]
   2d612:	3301      	adds	r3, #1
   2d614:	60fb      	str	r3, [r7, #12]
   2d616:	68fa      	ldr	r2, [r7, #12]
   2d618:	683b      	ldr	r3, [r7, #0]
   2d61a:	429a      	cmp	r2, r3
   2d61c:	dbf0      	blt.n	2d600 <bufchar+0x10>
	return count;
   2d61e:	683b      	ldr	r3, [r7, #0]
}
   2d620:	0018      	movs	r0, r3
   2d622:	46bd      	mov	sp, r7
   2d624:	b004      	add	sp, #16
   2d626:	bd80      	pop	{r7, pc}
   2d628:	20004284 	.word	0x20004284

0002d62c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2d62c:	b580      	push	{r7, lr}
   2d62e:	b082      	sub	sp, #8
   2d630:	af00      	add	r7, sp, #0
   2d632:	6078      	str	r0, [r7, #4]
   2d634:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2d636:	4b07      	ldr	r3, [pc, #28]	; (2d654 <MQTTPacket_decodeBuf+0x28>)
   2d638:	687a      	ldr	r2, [r7, #4]
   2d63a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2d63c:	683a      	ldr	r2, [r7, #0]
   2d63e:	4b06      	ldr	r3, [pc, #24]	; (2d658 <MQTTPacket_decodeBuf+0x2c>)
   2d640:	0011      	movs	r1, r2
   2d642:	0018      	movs	r0, r3
   2d644:	4b05      	ldr	r3, [pc, #20]	; (2d65c <MQTTPacket_decodeBuf+0x30>)
   2d646:	4798      	blx	r3
   2d648:	0003      	movs	r3, r0
}
   2d64a:	0018      	movs	r0, r3
   2d64c:	46bd      	mov	sp, r7
   2d64e:	b002      	add	sp, #8
   2d650:	bd80      	pop	{r7, pc}
   2d652:	46c0      	nop			; (mov r8, r8)
   2d654:	20004284 	.word	0x20004284
   2d658:	0002d5f1 	.word	0x0002d5f1
   2d65c:	0002d519 	.word	0x0002d519

0002d660 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2d660:	b580      	push	{r7, lr}
   2d662:	b084      	sub	sp, #16
   2d664:	af00      	add	r7, sp, #0
   2d666:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2d668:	687b      	ldr	r3, [r7, #4]
   2d66a:	681b      	ldr	r3, [r3, #0]
   2d66c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2d66e:	68fb      	ldr	r3, [r7, #12]
   2d670:	781b      	ldrb	r3, [r3, #0]
   2d672:	021b      	lsls	r3, r3, #8
   2d674:	68fa      	ldr	r2, [r7, #12]
   2d676:	3201      	adds	r2, #1
   2d678:	7812      	ldrb	r2, [r2, #0]
   2d67a:	189b      	adds	r3, r3, r2
   2d67c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2d67e:	687b      	ldr	r3, [r7, #4]
   2d680:	681b      	ldr	r3, [r3, #0]
   2d682:	1c9a      	adds	r2, r3, #2
   2d684:	687b      	ldr	r3, [r7, #4]
   2d686:	601a      	str	r2, [r3, #0]
	return len;
   2d688:	68bb      	ldr	r3, [r7, #8]
}
   2d68a:	0018      	movs	r0, r3
   2d68c:	46bd      	mov	sp, r7
   2d68e:	b004      	add	sp, #16
   2d690:	bd80      	pop	{r7, pc}

0002d692 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2d692:	b580      	push	{r7, lr}
   2d694:	b084      	sub	sp, #16
   2d696:	af00      	add	r7, sp, #0
   2d698:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2d69a:	687b      	ldr	r3, [r7, #4]
   2d69c:	681a      	ldr	r2, [r3, #0]
   2d69e:	230f      	movs	r3, #15
   2d6a0:	18fb      	adds	r3, r7, r3
   2d6a2:	7812      	ldrb	r2, [r2, #0]
   2d6a4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2d6a6:	687b      	ldr	r3, [r7, #4]
   2d6a8:	681b      	ldr	r3, [r3, #0]
   2d6aa:	1c5a      	adds	r2, r3, #1
   2d6ac:	687b      	ldr	r3, [r7, #4]
   2d6ae:	601a      	str	r2, [r3, #0]
	return c;
   2d6b0:	230f      	movs	r3, #15
   2d6b2:	18fb      	adds	r3, r7, r3
   2d6b4:	781b      	ldrb	r3, [r3, #0]
}
   2d6b6:	0018      	movs	r0, r3
   2d6b8:	46bd      	mov	sp, r7
   2d6ba:	b004      	add	sp, #16
   2d6bc:	bd80      	pop	{r7, pc}

0002d6be <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2d6be:	b580      	push	{r7, lr}
   2d6c0:	b082      	sub	sp, #8
   2d6c2:	af00      	add	r7, sp, #0
   2d6c4:	6078      	str	r0, [r7, #4]
   2d6c6:	000a      	movs	r2, r1
   2d6c8:	1cfb      	adds	r3, r7, #3
   2d6ca:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2d6cc:	687b      	ldr	r3, [r7, #4]
   2d6ce:	681b      	ldr	r3, [r3, #0]
   2d6d0:	1cfa      	adds	r2, r7, #3
   2d6d2:	7812      	ldrb	r2, [r2, #0]
   2d6d4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2d6d6:	687b      	ldr	r3, [r7, #4]
   2d6d8:	681b      	ldr	r3, [r3, #0]
   2d6da:	1c5a      	adds	r2, r3, #1
   2d6dc:	687b      	ldr	r3, [r7, #4]
   2d6de:	601a      	str	r2, [r3, #0]
}
   2d6e0:	46c0      	nop			; (mov r8, r8)
   2d6e2:	46bd      	mov	sp, r7
   2d6e4:	b002      	add	sp, #8
   2d6e6:	bd80      	pop	{r7, pc}

0002d6e8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2d6e8:	b580      	push	{r7, lr}
   2d6ea:	b082      	sub	sp, #8
   2d6ec:	af00      	add	r7, sp, #0
   2d6ee:	6078      	str	r0, [r7, #4]
   2d6f0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2d6f2:	687b      	ldr	r3, [r7, #4]
   2d6f4:	681a      	ldr	r2, [r3, #0]
   2d6f6:	683b      	ldr	r3, [r7, #0]
   2d6f8:	2b00      	cmp	r3, #0
   2d6fa:	da00      	bge.n	2d6fe <writeInt+0x16>
   2d6fc:	33ff      	adds	r3, #255	; 0xff
   2d6fe:	121b      	asrs	r3, r3, #8
   2d700:	b2db      	uxtb	r3, r3
   2d702:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2d704:	687b      	ldr	r3, [r7, #4]
   2d706:	681b      	ldr	r3, [r3, #0]
   2d708:	1c5a      	adds	r2, r3, #1
   2d70a:	687b      	ldr	r3, [r7, #4]
   2d70c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2d70e:	687b      	ldr	r3, [r7, #4]
   2d710:	681a      	ldr	r2, [r3, #0]
   2d712:	683b      	ldr	r3, [r7, #0]
   2d714:	4908      	ldr	r1, [pc, #32]	; (2d738 <writeInt+0x50>)
   2d716:	400b      	ands	r3, r1
   2d718:	d503      	bpl.n	2d722 <writeInt+0x3a>
   2d71a:	3b01      	subs	r3, #1
   2d71c:	4907      	ldr	r1, [pc, #28]	; (2d73c <writeInt+0x54>)
   2d71e:	430b      	orrs	r3, r1
   2d720:	3301      	adds	r3, #1
   2d722:	b2db      	uxtb	r3, r3
   2d724:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2d726:	687b      	ldr	r3, [r7, #4]
   2d728:	681b      	ldr	r3, [r3, #0]
   2d72a:	1c5a      	adds	r2, r3, #1
   2d72c:	687b      	ldr	r3, [r7, #4]
   2d72e:	601a      	str	r2, [r3, #0]
}
   2d730:	46c0      	nop			; (mov r8, r8)
   2d732:	46bd      	mov	sp, r7
   2d734:	b002      	add	sp, #8
   2d736:	bd80      	pop	{r7, pc}
   2d738:	800000ff 	.word	0x800000ff
   2d73c:	ffffff00 	.word	0xffffff00

0002d740 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2d740:	b580      	push	{r7, lr}
   2d742:	b084      	sub	sp, #16
   2d744:	af00      	add	r7, sp, #0
   2d746:	6078      	str	r0, [r7, #4]
   2d748:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2d74a:	683b      	ldr	r3, [r7, #0]
   2d74c:	0018      	movs	r0, r3
   2d74e:	4b0d      	ldr	r3, [pc, #52]	; (2d784 <writeCString+0x44>)
   2d750:	4798      	blx	r3
   2d752:	0003      	movs	r3, r0
   2d754:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2d756:	68fa      	ldr	r2, [r7, #12]
   2d758:	687b      	ldr	r3, [r7, #4]
   2d75a:	0011      	movs	r1, r2
   2d75c:	0018      	movs	r0, r3
   2d75e:	4b0a      	ldr	r3, [pc, #40]	; (2d788 <writeCString+0x48>)
   2d760:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2d762:	687b      	ldr	r3, [r7, #4]
   2d764:	681b      	ldr	r3, [r3, #0]
   2d766:	68fa      	ldr	r2, [r7, #12]
   2d768:	6839      	ldr	r1, [r7, #0]
   2d76a:	0018      	movs	r0, r3
   2d76c:	4b07      	ldr	r3, [pc, #28]	; (2d78c <writeCString+0x4c>)
   2d76e:	4798      	blx	r3
	*pptr += len;
   2d770:	687b      	ldr	r3, [r7, #4]
   2d772:	681a      	ldr	r2, [r3, #0]
   2d774:	68fb      	ldr	r3, [r7, #12]
   2d776:	18d2      	adds	r2, r2, r3
   2d778:	687b      	ldr	r3, [r7, #4]
   2d77a:	601a      	str	r2, [r3, #0]
}
   2d77c:	46c0      	nop			; (mov r8, r8)
   2d77e:	46bd      	mov	sp, r7
   2d780:	b004      	add	sp, #16
   2d782:	bd80      	pop	{r7, pc}
   2d784:	00032c5f 	.word	0x00032c5f
   2d788:	0002d6e9 	.word	0x0002d6e9
   2d78c:	00032871 	.word	0x00032871

0002d790 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2d790:	b580      	push	{r7, lr}
   2d792:	b084      	sub	sp, #16
   2d794:	af00      	add	r7, sp, #0
   2d796:	60f8      	str	r0, [r7, #12]
   2d798:	0038      	movs	r0, r7
   2d79a:	6001      	str	r1, [r0, #0]
   2d79c:	6042      	str	r2, [r0, #4]
   2d79e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2d7a0:	003b      	movs	r3, r7
   2d7a2:	685b      	ldr	r3, [r3, #4]
   2d7a4:	2b00      	cmp	r3, #0
   2d7a6:	dd17      	ble.n	2d7d8 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2d7a8:	003b      	movs	r3, r7
   2d7aa:	685a      	ldr	r2, [r3, #4]
   2d7ac:	68fb      	ldr	r3, [r7, #12]
   2d7ae:	0011      	movs	r1, r2
   2d7b0:	0018      	movs	r0, r3
   2d7b2:	4b14      	ldr	r3, [pc, #80]	; (2d804 <writeMQTTString+0x74>)
   2d7b4:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2d7b6:	68fb      	ldr	r3, [r7, #12]
   2d7b8:	6818      	ldr	r0, [r3, #0]
   2d7ba:	003b      	movs	r3, r7
   2d7bc:	6899      	ldr	r1, [r3, #8]
   2d7be:	003b      	movs	r3, r7
   2d7c0:	685b      	ldr	r3, [r3, #4]
   2d7c2:	001a      	movs	r2, r3
   2d7c4:	4b10      	ldr	r3, [pc, #64]	; (2d808 <writeMQTTString+0x78>)
   2d7c6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2d7c8:	68fb      	ldr	r3, [r7, #12]
   2d7ca:	681a      	ldr	r2, [r3, #0]
   2d7cc:	003b      	movs	r3, r7
   2d7ce:	685b      	ldr	r3, [r3, #4]
   2d7d0:	18d2      	adds	r2, r2, r3
   2d7d2:	68fb      	ldr	r3, [r7, #12]
   2d7d4:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2d7d6:	e010      	b.n	2d7fa <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2d7d8:	003b      	movs	r3, r7
   2d7da:	681b      	ldr	r3, [r3, #0]
   2d7dc:	2b00      	cmp	r3, #0
   2d7de:	d007      	beq.n	2d7f0 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2d7e0:	003b      	movs	r3, r7
   2d7e2:	681a      	ldr	r2, [r3, #0]
   2d7e4:	68fb      	ldr	r3, [r7, #12]
   2d7e6:	0011      	movs	r1, r2
   2d7e8:	0018      	movs	r0, r3
   2d7ea:	4b08      	ldr	r3, [pc, #32]	; (2d80c <writeMQTTString+0x7c>)
   2d7ec:	4798      	blx	r3
}
   2d7ee:	e004      	b.n	2d7fa <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2d7f0:	68fb      	ldr	r3, [r7, #12]
   2d7f2:	2100      	movs	r1, #0
   2d7f4:	0018      	movs	r0, r3
   2d7f6:	4b03      	ldr	r3, [pc, #12]	; (2d804 <writeMQTTString+0x74>)
   2d7f8:	4798      	blx	r3
}
   2d7fa:	46c0      	nop			; (mov r8, r8)
   2d7fc:	46bd      	mov	sp, r7
   2d7fe:	b004      	add	sp, #16
   2d800:	bd80      	pop	{r7, pc}
   2d802:	46c0      	nop			; (mov r8, r8)
   2d804:	0002d6e9 	.word	0x0002d6e9
   2d808:	00032871 	.word	0x00032871
   2d80c:	0002d741 	.word	0x0002d741

0002d810 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2d810:	b580      	push	{r7, lr}
   2d812:	b086      	sub	sp, #24
   2d814:	af00      	add	r7, sp, #0
   2d816:	60f8      	str	r0, [r7, #12]
   2d818:	60b9      	str	r1, [r7, #8]
   2d81a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2d81c:	2300      	movs	r3, #0
   2d81e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2d820:	687a      	ldr	r2, [r7, #4]
   2d822:	68bb      	ldr	r3, [r7, #8]
   2d824:	681b      	ldr	r3, [r3, #0]
   2d826:	1ad3      	subs	r3, r2, r3
   2d828:	2b01      	cmp	r3, #1
   2d82a:	dd1b      	ble.n	2d864 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2d82c:	68bb      	ldr	r3, [r7, #8]
   2d82e:	0018      	movs	r0, r3
   2d830:	4b10      	ldr	r3, [pc, #64]	; (2d874 <readMQTTLenString+0x64>)
   2d832:	4798      	blx	r3
   2d834:	0002      	movs	r2, r0
   2d836:	68fb      	ldr	r3, [r7, #12]
   2d838:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2d83a:	68bb      	ldr	r3, [r7, #8]
   2d83c:	681a      	ldr	r2, [r3, #0]
   2d83e:	68fb      	ldr	r3, [r7, #12]
   2d840:	685b      	ldr	r3, [r3, #4]
   2d842:	18d2      	adds	r2, r2, r3
   2d844:	687b      	ldr	r3, [r7, #4]
   2d846:	429a      	cmp	r2, r3
   2d848:	d80c      	bhi.n	2d864 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2d84a:	68bb      	ldr	r3, [r7, #8]
   2d84c:	681a      	ldr	r2, [r3, #0]
   2d84e:	68fb      	ldr	r3, [r7, #12]
   2d850:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2d852:	68bb      	ldr	r3, [r7, #8]
   2d854:	681a      	ldr	r2, [r3, #0]
   2d856:	68fb      	ldr	r3, [r7, #12]
   2d858:	685b      	ldr	r3, [r3, #4]
   2d85a:	18d2      	adds	r2, r2, r3
   2d85c:	68bb      	ldr	r3, [r7, #8]
   2d85e:	601a      	str	r2, [r3, #0]
			rc = 1;
   2d860:	2301      	movs	r3, #1
   2d862:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2d864:	68fb      	ldr	r3, [r7, #12]
   2d866:	2200      	movs	r2, #0
   2d868:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2d86a:	697b      	ldr	r3, [r7, #20]
}
   2d86c:	0018      	movs	r0, r3
   2d86e:	46bd      	mov	sp, r7
   2d870:	b006      	add	sp, #24
   2d872:	bd80      	pop	{r7, pc}
   2d874:	0002d661 	.word	0x0002d661

0002d878 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2d878:	b580      	push	{r7, lr}
   2d87a:	b086      	sub	sp, #24
   2d87c:	af00      	add	r7, sp, #0
   2d87e:	1d3b      	adds	r3, r7, #4
   2d880:	6018      	str	r0, [r3, #0]
   2d882:	6059      	str	r1, [r3, #4]
   2d884:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2d886:	2300      	movs	r3, #0
   2d888:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2d88a:	1d3b      	adds	r3, r7, #4
   2d88c:	681b      	ldr	r3, [r3, #0]
   2d88e:	2b00      	cmp	r3, #0
   2d890:	d007      	beq.n	2d8a2 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2d892:	1d3b      	adds	r3, r7, #4
   2d894:	681b      	ldr	r3, [r3, #0]
   2d896:	0018      	movs	r0, r3
   2d898:	4b06      	ldr	r3, [pc, #24]	; (2d8b4 <MQTTstrlen+0x3c>)
   2d89a:	4798      	blx	r3
   2d89c:	0003      	movs	r3, r0
   2d89e:	617b      	str	r3, [r7, #20]
   2d8a0:	e002      	b.n	2d8a8 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2d8a2:	1d3b      	adds	r3, r7, #4
   2d8a4:	685b      	ldr	r3, [r3, #4]
   2d8a6:	617b      	str	r3, [r7, #20]
	return rc;
   2d8a8:	697b      	ldr	r3, [r7, #20]
}
   2d8aa:	0018      	movs	r0, r3
   2d8ac:	46bd      	mov	sp, r7
   2d8ae:	b006      	add	sp, #24
   2d8b0:	bd80      	pop	{r7, pc}
   2d8b2:	46c0      	nop			; (mov r8, r8)
   2d8b4:	00032c5f 	.word	0x00032c5f

0002d8b8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2d8b8:	b580      	push	{r7, lr}
   2d8ba:	b086      	sub	sp, #24
   2d8bc:	af00      	add	r7, sp, #0
   2d8be:	6078      	str	r0, [r7, #4]
   2d8c0:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2d8c2:	2300      	movs	r3, #0
   2d8c4:	617b      	str	r3, [r7, #20]
		blen = 0;
   2d8c6:	2300      	movs	r3, #0
   2d8c8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2d8ca:	687b      	ldr	r3, [r7, #4]
   2d8cc:	681b      	ldr	r3, [r3, #0]
   2d8ce:	2b00      	cmp	r3, #0
   2d8d0:	d00a      	beq.n	2d8e8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2d8d2:	687b      	ldr	r3, [r7, #4]
   2d8d4:	681b      	ldr	r3, [r3, #0]
   2d8d6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2d8d8:	687b      	ldr	r3, [r7, #4]
   2d8da:	681b      	ldr	r3, [r3, #0]
   2d8dc:	0018      	movs	r0, r3
   2d8de:	4b12      	ldr	r3, [pc, #72]	; (2d928 <MQTTPacket_equals+0x70>)
   2d8e0:	4798      	blx	r3
   2d8e2:	0003      	movs	r3, r0
   2d8e4:	617b      	str	r3, [r7, #20]
   2d8e6:	e005      	b.n	2d8f4 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2d8e8:	687b      	ldr	r3, [r7, #4]
   2d8ea:	689b      	ldr	r3, [r3, #8]
   2d8ec:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2d8ee:	687b      	ldr	r3, [r7, #4]
   2d8f0:	685b      	ldr	r3, [r3, #4]
   2d8f2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2d8f4:	683b      	ldr	r3, [r7, #0]
   2d8f6:	0018      	movs	r0, r3
   2d8f8:	4b0b      	ldr	r3, [pc, #44]	; (2d928 <MQTTPacket_equals+0x70>)
   2d8fa:	4798      	blx	r3
   2d8fc:	0003      	movs	r3, r0
   2d8fe:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2d900:	697a      	ldr	r2, [r7, #20]
   2d902:	68fb      	ldr	r3, [r7, #12]
   2d904:	429a      	cmp	r2, r3
   2d906:	d109      	bne.n	2d91c <MQTTPacket_equals+0x64>
   2d908:	697a      	ldr	r2, [r7, #20]
   2d90a:	6839      	ldr	r1, [r7, #0]
   2d90c:	693b      	ldr	r3, [r7, #16]
   2d90e:	0018      	movs	r0, r3
   2d910:	4b06      	ldr	r3, [pc, #24]	; (2d92c <MQTTPacket_equals+0x74>)
   2d912:	4798      	blx	r3
   2d914:	1e03      	subs	r3, r0, #0
   2d916:	d101      	bne.n	2d91c <MQTTPacket_equals+0x64>
   2d918:	2301      	movs	r3, #1
   2d91a:	e000      	b.n	2d91e <MQTTPacket_equals+0x66>
   2d91c:	2300      	movs	r3, #0
}
   2d91e:	0018      	movs	r0, r3
   2d920:	46bd      	mov	sp, r7
   2d922:	b006      	add	sp, #24
   2d924:	bd80      	pop	{r7, pc}
   2d926:	46c0      	nop			; (mov r8, r8)
   2d928:	00032c5f 	.word	0x00032c5f
   2d92c:	00032cb5 	.word	0x00032cb5

0002d930 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2d930:	b580      	push	{r7, lr}
   2d932:	b086      	sub	sp, #24
   2d934:	af00      	add	r7, sp, #0
   2d936:	60f8      	str	r0, [r7, #12]
   2d938:	0038      	movs	r0, r7
   2d93a:	6001      	str	r1, [r0, #0]
   2d93c:	6042      	str	r2, [r0, #4]
   2d93e:	6083      	str	r3, [r0, #8]
	int len = 0;
   2d940:	2300      	movs	r3, #0
   2d942:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2d944:	003b      	movs	r3, r7
   2d946:	6818      	ldr	r0, [r3, #0]
   2d948:	6859      	ldr	r1, [r3, #4]
   2d94a:	689a      	ldr	r2, [r3, #8]
   2d94c:	4b09      	ldr	r3, [pc, #36]	; (2d974 <MQTTSerialize_publishLength+0x44>)
   2d94e:	4798      	blx	r3
   2d950:	0003      	movs	r3, r0
   2d952:	1c9a      	adds	r2, r3, #2
   2d954:	6a3b      	ldr	r3, [r7, #32]
   2d956:	18d3      	adds	r3, r2, r3
   2d958:	697a      	ldr	r2, [r7, #20]
   2d95a:	18d3      	adds	r3, r2, r3
   2d95c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2d95e:	68fb      	ldr	r3, [r7, #12]
   2d960:	2b00      	cmp	r3, #0
   2d962:	dd02      	ble.n	2d96a <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2d964:	697b      	ldr	r3, [r7, #20]
   2d966:	3302      	adds	r3, #2
   2d968:	617b      	str	r3, [r7, #20]
	return len;
   2d96a:	697b      	ldr	r3, [r7, #20]
}
   2d96c:	0018      	movs	r0, r3
   2d96e:	46bd      	mov	sp, r7
   2d970:	b006      	add	sp, #24
   2d972:	bd80      	pop	{r7, pc}
   2d974:	0002d879 	.word	0x0002d879

0002d978 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2d978:	b590      	push	{r4, r7, lr}
   2d97a:	b08b      	sub	sp, #44	; 0x2c
   2d97c:	af02      	add	r7, sp, #8
   2d97e:	60f8      	str	r0, [r7, #12]
   2d980:	60b9      	str	r1, [r7, #8]
   2d982:	603b      	str	r3, [r7, #0]
   2d984:	1dfb      	adds	r3, r7, #7
   2d986:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2d988:	68fb      	ldr	r3, [r7, #12]
   2d98a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2d98c:	2300      	movs	r3, #0
   2d98e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2d990:	2300      	movs	r3, #0
   2d992:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2d994:	2300      	movs	r3, #0
   2d996:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2d998:	2308      	movs	r3, #8
   2d99a:	2230      	movs	r2, #48	; 0x30
   2d99c:	4694      	mov	ip, r2
   2d99e:	44bc      	add	ip, r7
   2d9a0:	4463      	add	r3, ip
   2d9a2:	6838      	ldr	r0, [r7, #0]
   2d9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2d9a6:	9200      	str	r2, [sp, #0]
   2d9a8:	6819      	ldr	r1, [r3, #0]
   2d9aa:	685a      	ldr	r2, [r3, #4]
   2d9ac:	689b      	ldr	r3, [r3, #8]
   2d9ae:	4c46      	ldr	r4, [pc, #280]	; (2dac8 <MQTTSerialize_publish+0x150>)
   2d9b0:	47a0      	blx	r4
   2d9b2:	0003      	movs	r3, r0
   2d9b4:	61bb      	str	r3, [r7, #24]
   2d9b6:	69bb      	ldr	r3, [r7, #24]
   2d9b8:	0018      	movs	r0, r3
   2d9ba:	4b44      	ldr	r3, [pc, #272]	; (2dacc <MQTTSerialize_publish+0x154>)
   2d9bc:	4798      	blx	r3
   2d9be:	0002      	movs	r2, r0
   2d9c0:	68bb      	ldr	r3, [r7, #8]
   2d9c2:	429a      	cmp	r2, r3
   2d9c4:	dd03      	ble.n	2d9ce <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2d9c6:	2302      	movs	r3, #2
   2d9c8:	425b      	negs	r3, r3
   2d9ca:	61fb      	str	r3, [r7, #28]
		goto exit;
   2d9cc:	e077      	b.n	2dabe <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2d9ce:	2310      	movs	r3, #16
   2d9d0:	18fb      	adds	r3, r7, r3
   2d9d2:	781a      	ldrb	r2, [r3, #0]
   2d9d4:	210f      	movs	r1, #15
   2d9d6:	400a      	ands	r2, r1
   2d9d8:	1c11      	adds	r1, r2, #0
   2d9da:	2230      	movs	r2, #48	; 0x30
   2d9dc:	430a      	orrs	r2, r1
   2d9de:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2d9e0:	1dfb      	adds	r3, r7, #7
   2d9e2:	781b      	ldrb	r3, [r3, #0]
   2d9e4:	2201      	movs	r2, #1
   2d9e6:	4013      	ands	r3, r2
   2d9e8:	b2da      	uxtb	r2, r3
   2d9ea:	2310      	movs	r3, #16
   2d9ec:	18fb      	adds	r3, r7, r3
   2d9ee:	2101      	movs	r1, #1
   2d9f0:	400a      	ands	r2, r1
   2d9f2:	00d0      	lsls	r0, r2, #3
   2d9f4:	781a      	ldrb	r2, [r3, #0]
   2d9f6:	2108      	movs	r1, #8
   2d9f8:	438a      	bics	r2, r1
   2d9fa:	1c11      	adds	r1, r2, #0
   2d9fc:	1c02      	adds	r2, r0, #0
   2d9fe:	430a      	orrs	r2, r1
   2da00:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2da02:	683b      	ldr	r3, [r7, #0]
   2da04:	b2db      	uxtb	r3, r3
   2da06:	1c1a      	adds	r2, r3, #0
   2da08:	2303      	movs	r3, #3
   2da0a:	4013      	ands	r3, r2
   2da0c:	b2da      	uxtb	r2, r3
   2da0e:	2310      	movs	r3, #16
   2da10:	18fb      	adds	r3, r7, r3
   2da12:	2103      	movs	r1, #3
   2da14:	400a      	ands	r2, r1
   2da16:	1890      	adds	r0, r2, r2
   2da18:	781a      	ldrb	r2, [r3, #0]
   2da1a:	2106      	movs	r1, #6
   2da1c:	438a      	bics	r2, r1
   2da1e:	1c11      	adds	r1, r2, #0
   2da20:	1c02      	adds	r2, r0, #0
   2da22:	430a      	orrs	r2, r1
   2da24:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2da26:	2330      	movs	r3, #48	; 0x30
   2da28:	18fb      	adds	r3, r7, r3
   2da2a:	781b      	ldrb	r3, [r3, #0]
   2da2c:	2201      	movs	r2, #1
   2da2e:	4013      	ands	r3, r2
   2da30:	b2da      	uxtb	r2, r3
   2da32:	2310      	movs	r3, #16
   2da34:	18fb      	adds	r3, r7, r3
   2da36:	2101      	movs	r1, #1
   2da38:	400a      	ands	r2, r1
   2da3a:	0010      	movs	r0, r2
   2da3c:	781a      	ldrb	r2, [r3, #0]
   2da3e:	2101      	movs	r1, #1
   2da40:	438a      	bics	r2, r1
   2da42:	1c11      	adds	r1, r2, #0
   2da44:	1c02      	adds	r2, r0, #0
   2da46:	430a      	orrs	r2, r1
   2da48:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2da4a:	2310      	movs	r3, #16
   2da4c:	18fb      	adds	r3, r7, r3
   2da4e:	781a      	ldrb	r2, [r3, #0]
   2da50:	2314      	movs	r3, #20
   2da52:	18fb      	adds	r3, r7, r3
   2da54:	0011      	movs	r1, r2
   2da56:	0018      	movs	r0, r3
   2da58:	4b1d      	ldr	r3, [pc, #116]	; (2dad0 <MQTTSerialize_publish+0x158>)
   2da5a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2da5c:	697b      	ldr	r3, [r7, #20]
   2da5e:	69ba      	ldr	r2, [r7, #24]
   2da60:	0011      	movs	r1, r2
   2da62:	0018      	movs	r0, r3
   2da64:	4b1b      	ldr	r3, [pc, #108]	; (2dad4 <MQTTSerialize_publish+0x15c>)
   2da66:	4798      	blx	r3
   2da68:	0002      	movs	r2, r0
   2da6a:	697b      	ldr	r3, [r7, #20]
   2da6c:	189b      	adds	r3, r3, r2
   2da6e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2da70:	2308      	movs	r3, #8
   2da72:	2230      	movs	r2, #48	; 0x30
   2da74:	4694      	mov	ip, r2
   2da76:	44bc      	add	ip, r7
   2da78:	4463      	add	r3, ip
   2da7a:	2214      	movs	r2, #20
   2da7c:	18b8      	adds	r0, r7, r2
   2da7e:	6819      	ldr	r1, [r3, #0]
   2da80:	685a      	ldr	r2, [r3, #4]
   2da82:	689b      	ldr	r3, [r3, #8]
   2da84:	4c14      	ldr	r4, [pc, #80]	; (2dad8 <MQTTSerialize_publish+0x160>)
   2da86:	47a0      	blx	r4

	if (qos > 0)
   2da88:	683b      	ldr	r3, [r7, #0]
   2da8a:	2b00      	cmp	r3, #0
   2da8c:	dd08      	ble.n	2daa0 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2da8e:	2334      	movs	r3, #52	; 0x34
   2da90:	18fb      	adds	r3, r7, r3
   2da92:	881a      	ldrh	r2, [r3, #0]
   2da94:	2314      	movs	r3, #20
   2da96:	18fb      	adds	r3, r7, r3
   2da98:	0011      	movs	r1, r2
   2da9a:	0018      	movs	r0, r3
   2da9c:	4b0f      	ldr	r3, [pc, #60]	; (2dadc <MQTTSerialize_publish+0x164>)
   2da9e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2daa0:	697b      	ldr	r3, [r7, #20]
   2daa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2daa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2daa6:	0018      	movs	r0, r3
   2daa8:	4b0d      	ldr	r3, [pc, #52]	; (2dae0 <MQTTSerialize_publish+0x168>)
   2daaa:	4798      	blx	r3
	ptr += payloadlen;
   2daac:	697a      	ldr	r2, [r7, #20]
   2daae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2dab0:	18d3      	adds	r3, r2, r3
   2dab2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2dab4:	697b      	ldr	r3, [r7, #20]
   2dab6:	001a      	movs	r2, r3
   2dab8:	68fb      	ldr	r3, [r7, #12]
   2daba:	1ad3      	subs	r3, r2, r3
   2dabc:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2dabe:	69fb      	ldr	r3, [r7, #28]
}
   2dac0:	0018      	movs	r0, r3
   2dac2:	46bd      	mov	sp, r7
   2dac4:	b009      	add	sp, #36	; 0x24
   2dac6:	bd90      	pop	{r4, r7, pc}
   2dac8:	0002d931 	.word	0x0002d931
   2dacc:	0002d59d 	.word	0x0002d59d
   2dad0:	0002d6bf 	.word	0x0002d6bf
   2dad4:	0002d4a5 	.word	0x0002d4a5
   2dad8:	0002d791 	.word	0x0002d791
   2dadc:	0002d6e9 	.word	0x0002d6e9
   2dae0:	00032871 	.word	0x00032871

0002dae4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2dae4:	b580      	push	{r7, lr}
   2dae6:	b088      	sub	sp, #32
   2dae8:	af00      	add	r7, sp, #0
   2daea:	60f8      	str	r0, [r7, #12]
   2daec:	60b9      	str	r1, [r7, #8]
   2daee:	0019      	movs	r1, r3
   2daf0:	1dfb      	adds	r3, r7, #7
   2daf2:	701a      	strb	r2, [r3, #0]
   2daf4:	1dbb      	adds	r3, r7, #6
   2daf6:	1c0a      	adds	r2, r1, #0
   2daf8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2dafa:	2300      	movs	r3, #0
   2dafc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2dafe:	2300      	movs	r3, #0
   2db00:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2db02:	68fb      	ldr	r3, [r7, #12]
   2db04:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2db06:	68bb      	ldr	r3, [r7, #8]
   2db08:	2b03      	cmp	r3, #3
   2db0a:	dc03      	bgt.n	2db14 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2db0c:	2302      	movs	r3, #2
   2db0e:	425b      	negs	r3, r3
   2db10:	61fb      	str	r3, [r7, #28]
		goto exit;
   2db12:	e055      	b.n	2dbc0 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2db14:	1dfb      	adds	r3, r7, #7
   2db16:	781b      	ldrb	r3, [r3, #0]
   2db18:	220f      	movs	r2, #15
   2db1a:	4013      	ands	r3, r2
   2db1c:	b2da      	uxtb	r2, r3
   2db1e:	2318      	movs	r3, #24
   2db20:	18fb      	adds	r3, r7, r3
   2db22:	0110      	lsls	r0, r2, #4
   2db24:	781a      	ldrb	r2, [r3, #0]
   2db26:	210f      	movs	r1, #15
   2db28:	400a      	ands	r2, r1
   2db2a:	1c11      	adds	r1, r2, #0
   2db2c:	1c02      	adds	r2, r0, #0
   2db2e:	430a      	orrs	r2, r1
   2db30:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2db32:	1dbb      	adds	r3, r7, #6
   2db34:	781b      	ldrb	r3, [r3, #0]
   2db36:	2201      	movs	r2, #1
   2db38:	4013      	ands	r3, r2
   2db3a:	b2da      	uxtb	r2, r3
   2db3c:	2318      	movs	r3, #24
   2db3e:	18fb      	adds	r3, r7, r3
   2db40:	2101      	movs	r1, #1
   2db42:	400a      	ands	r2, r1
   2db44:	00d0      	lsls	r0, r2, #3
   2db46:	781a      	ldrb	r2, [r3, #0]
   2db48:	2108      	movs	r1, #8
   2db4a:	438a      	bics	r2, r1
   2db4c:	1c11      	adds	r1, r2, #0
   2db4e:	1c02      	adds	r2, r0, #0
   2db50:	430a      	orrs	r2, r1
   2db52:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2db54:	1dfb      	adds	r3, r7, #7
   2db56:	781b      	ldrb	r3, [r3, #0]
   2db58:	3b06      	subs	r3, #6
   2db5a:	425a      	negs	r2, r3
   2db5c:	4153      	adcs	r3, r2
   2db5e:	b2db      	uxtb	r3, r3
   2db60:	1c1a      	adds	r2, r3, #0
   2db62:	2303      	movs	r3, #3
   2db64:	4013      	ands	r3, r2
   2db66:	b2da      	uxtb	r2, r3
   2db68:	2318      	movs	r3, #24
   2db6a:	18fb      	adds	r3, r7, r3
   2db6c:	2103      	movs	r1, #3
   2db6e:	400a      	ands	r2, r1
   2db70:	1890      	adds	r0, r2, r2
   2db72:	781a      	ldrb	r2, [r3, #0]
   2db74:	2106      	movs	r1, #6
   2db76:	438a      	bics	r2, r1
   2db78:	1c11      	adds	r1, r2, #0
   2db7a:	1c02      	adds	r2, r0, #0
   2db7c:	430a      	orrs	r2, r1
   2db7e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2db80:	2318      	movs	r3, #24
   2db82:	18fb      	adds	r3, r7, r3
   2db84:	781a      	ldrb	r2, [r3, #0]
   2db86:	2314      	movs	r3, #20
   2db88:	18fb      	adds	r3, r7, r3
   2db8a:	0011      	movs	r1, r2
   2db8c:	0018      	movs	r0, r3
   2db8e:	4b0f      	ldr	r3, [pc, #60]	; (2dbcc <MQTTSerialize_ack+0xe8>)
   2db90:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2db92:	697b      	ldr	r3, [r7, #20]
   2db94:	2102      	movs	r1, #2
   2db96:	0018      	movs	r0, r3
   2db98:	4b0d      	ldr	r3, [pc, #52]	; (2dbd0 <MQTTSerialize_ack+0xec>)
   2db9a:	4798      	blx	r3
   2db9c:	0002      	movs	r2, r0
   2db9e:	697b      	ldr	r3, [r7, #20]
   2dba0:	189b      	adds	r3, r3, r2
   2dba2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2dba4:	2328      	movs	r3, #40	; 0x28
   2dba6:	18fb      	adds	r3, r7, r3
   2dba8:	881a      	ldrh	r2, [r3, #0]
   2dbaa:	2314      	movs	r3, #20
   2dbac:	18fb      	adds	r3, r7, r3
   2dbae:	0011      	movs	r1, r2
   2dbb0:	0018      	movs	r0, r3
   2dbb2:	4b08      	ldr	r3, [pc, #32]	; (2dbd4 <MQTTSerialize_ack+0xf0>)
   2dbb4:	4798      	blx	r3
	rc = ptr - buf;
   2dbb6:	697b      	ldr	r3, [r7, #20]
   2dbb8:	001a      	movs	r2, r3
   2dbba:	68fb      	ldr	r3, [r7, #12]
   2dbbc:	1ad3      	subs	r3, r2, r3
   2dbbe:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2dbc0:	69fb      	ldr	r3, [r7, #28]
}
   2dbc2:	0018      	movs	r0, r3
   2dbc4:	46bd      	mov	sp, r7
   2dbc6:	b008      	add	sp, #32
   2dbc8:	bd80      	pop	{r7, pc}
   2dbca:	46c0      	nop			; (mov r8, r8)
   2dbcc:	0002d6bf 	.word	0x0002d6bf
   2dbd0:	0002d4a5 	.word	0x0002d4a5
   2dbd4:	0002d6e9 	.word	0x0002d6e9

0002dbd8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2dbd8:	b580      	push	{r7, lr}
   2dbda:	b084      	sub	sp, #16
   2dbdc:	af00      	add	r7, sp, #0
   2dbde:	6078      	str	r0, [r7, #4]
   2dbe0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2dbe2:	2302      	movs	r3, #2
   2dbe4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2dbe6:	2300      	movs	r3, #0
   2dbe8:	60fb      	str	r3, [r7, #12]
   2dbea:	e014      	b.n	2dc16 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2dbec:	68fa      	ldr	r2, [r7, #12]
   2dbee:	0013      	movs	r3, r2
   2dbf0:	005b      	lsls	r3, r3, #1
   2dbf2:	189b      	adds	r3, r3, r2
   2dbf4:	009b      	lsls	r3, r3, #2
   2dbf6:	001a      	movs	r2, r3
   2dbf8:	683b      	ldr	r3, [r7, #0]
   2dbfa:	189b      	adds	r3, r3, r2
   2dbfc:	6818      	ldr	r0, [r3, #0]
   2dbfe:	6859      	ldr	r1, [r3, #4]
   2dc00:	689a      	ldr	r2, [r3, #8]
   2dc02:	4b09      	ldr	r3, [pc, #36]	; (2dc28 <MQTTSerialize_subscribeLength+0x50>)
   2dc04:	4798      	blx	r3
   2dc06:	0003      	movs	r3, r0
   2dc08:	3303      	adds	r3, #3
   2dc0a:	68ba      	ldr	r2, [r7, #8]
   2dc0c:	18d3      	adds	r3, r2, r3
   2dc0e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2dc10:	68fb      	ldr	r3, [r7, #12]
   2dc12:	3301      	adds	r3, #1
   2dc14:	60fb      	str	r3, [r7, #12]
   2dc16:	68fa      	ldr	r2, [r7, #12]
   2dc18:	687b      	ldr	r3, [r7, #4]
   2dc1a:	429a      	cmp	r2, r3
   2dc1c:	dbe6      	blt.n	2dbec <MQTTSerialize_subscribeLength+0x14>
	return len;
   2dc1e:	68bb      	ldr	r3, [r7, #8]
}
   2dc20:	0018      	movs	r0, r3
   2dc22:	46bd      	mov	sp, r7
   2dc24:	b004      	add	sp, #16
   2dc26:	bd80      	pop	{r7, pc}
   2dc28:	0002d879 	.word	0x0002d879

0002dc2c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2dc2c:	b590      	push	{r4, r7, lr}
   2dc2e:	b08b      	sub	sp, #44	; 0x2c
   2dc30:	af00      	add	r7, sp, #0
   2dc32:	60f8      	str	r0, [r7, #12]
   2dc34:	60b9      	str	r1, [r7, #8]
   2dc36:	0019      	movs	r1, r3
   2dc38:	1dfb      	adds	r3, r7, #7
   2dc3a:	701a      	strb	r2, [r3, #0]
   2dc3c:	1d3b      	adds	r3, r7, #4
   2dc3e:	1c0a      	adds	r2, r1, #0
   2dc40:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2dc42:	68fb      	ldr	r3, [r7, #12]
   2dc44:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2dc46:	2300      	movs	r3, #0
   2dc48:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2dc4a:	2300      	movs	r3, #0
   2dc4c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2dc4e:	2300      	movs	r3, #0
   2dc50:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2dc52:	2300      	movs	r3, #0
   2dc54:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2dc56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dc5a:	0011      	movs	r1, r2
   2dc5c:	0018      	movs	r0, r3
   2dc5e:	4b41      	ldr	r3, [pc, #260]	; (2dd64 <MQTTSerialize_subscribe+0x138>)
   2dc60:	4798      	blx	r3
   2dc62:	0003      	movs	r3, r0
   2dc64:	61fb      	str	r3, [r7, #28]
   2dc66:	69fb      	ldr	r3, [r7, #28]
   2dc68:	0018      	movs	r0, r3
   2dc6a:	4b3f      	ldr	r3, [pc, #252]	; (2dd68 <MQTTSerialize_subscribe+0x13c>)
   2dc6c:	4798      	blx	r3
   2dc6e:	0002      	movs	r2, r0
   2dc70:	68bb      	ldr	r3, [r7, #8]
   2dc72:	429a      	cmp	r2, r3
   2dc74:	dd03      	ble.n	2dc7e <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2dc76:	2302      	movs	r3, #2
   2dc78:	425b      	negs	r3, r3
   2dc7a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2dc7c:	e06c      	b.n	2dd58 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2dc7e:	2314      	movs	r3, #20
   2dc80:	18fb      	adds	r3, r7, r3
   2dc82:	2200      	movs	r2, #0
   2dc84:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2dc86:	2314      	movs	r3, #20
   2dc88:	18fb      	adds	r3, r7, r3
   2dc8a:	781a      	ldrb	r2, [r3, #0]
   2dc8c:	210f      	movs	r1, #15
   2dc8e:	400a      	ands	r2, r1
   2dc90:	1c11      	adds	r1, r2, #0
   2dc92:	2280      	movs	r2, #128	; 0x80
   2dc94:	4252      	negs	r2, r2
   2dc96:	430a      	orrs	r2, r1
   2dc98:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2dc9a:	1dfb      	adds	r3, r7, #7
   2dc9c:	781b      	ldrb	r3, [r3, #0]
   2dc9e:	2201      	movs	r2, #1
   2dca0:	4013      	ands	r3, r2
   2dca2:	b2da      	uxtb	r2, r3
   2dca4:	2314      	movs	r3, #20
   2dca6:	18fb      	adds	r3, r7, r3
   2dca8:	2101      	movs	r1, #1
   2dcaa:	400a      	ands	r2, r1
   2dcac:	00d0      	lsls	r0, r2, #3
   2dcae:	781a      	ldrb	r2, [r3, #0]
   2dcb0:	2108      	movs	r1, #8
   2dcb2:	438a      	bics	r2, r1
   2dcb4:	1c11      	adds	r1, r2, #0
   2dcb6:	1c02      	adds	r2, r0, #0
   2dcb8:	430a      	orrs	r2, r1
   2dcba:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2dcbc:	2314      	movs	r3, #20
   2dcbe:	18fb      	adds	r3, r7, r3
   2dcc0:	781a      	ldrb	r2, [r3, #0]
   2dcc2:	2106      	movs	r1, #6
   2dcc4:	438a      	bics	r2, r1
   2dcc6:	1c11      	adds	r1, r2, #0
   2dcc8:	2202      	movs	r2, #2
   2dcca:	430a      	orrs	r2, r1
   2dccc:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2dcce:	2314      	movs	r3, #20
   2dcd0:	18fb      	adds	r3, r7, r3
   2dcd2:	781a      	ldrb	r2, [r3, #0]
   2dcd4:	2318      	movs	r3, #24
   2dcd6:	18fb      	adds	r3, r7, r3
   2dcd8:	0011      	movs	r1, r2
   2dcda:	0018      	movs	r0, r3
   2dcdc:	4b23      	ldr	r3, [pc, #140]	; (2dd6c <MQTTSerialize_subscribe+0x140>)
   2dcde:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2dce0:	69bb      	ldr	r3, [r7, #24]
   2dce2:	69fa      	ldr	r2, [r7, #28]
   2dce4:	0011      	movs	r1, r2
   2dce6:	0018      	movs	r0, r3
   2dce8:	4b21      	ldr	r3, [pc, #132]	; (2dd70 <MQTTSerialize_subscribe+0x144>)
   2dcea:	4798      	blx	r3
   2dcec:	0002      	movs	r2, r0
   2dcee:	69bb      	ldr	r3, [r7, #24]
   2dcf0:	189b      	adds	r3, r3, r2
   2dcf2:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2dcf4:	1d3b      	adds	r3, r7, #4
   2dcf6:	881a      	ldrh	r2, [r3, #0]
   2dcf8:	2318      	movs	r3, #24
   2dcfa:	18fb      	adds	r3, r7, r3
   2dcfc:	0011      	movs	r1, r2
   2dcfe:	0018      	movs	r0, r3
   2dd00:	4b1c      	ldr	r3, [pc, #112]	; (2dd74 <MQTTSerialize_subscribe+0x148>)
   2dd02:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2dd04:	2300      	movs	r3, #0
   2dd06:	623b      	str	r3, [r7, #32]
   2dd08:	e01d      	b.n	2dd46 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2dd0a:	6a3a      	ldr	r2, [r7, #32]
   2dd0c:	0013      	movs	r3, r2
   2dd0e:	005b      	lsls	r3, r3, #1
   2dd10:	189b      	adds	r3, r3, r2
   2dd12:	009b      	lsls	r3, r3, #2
   2dd14:	001a      	movs	r2, r3
   2dd16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dd18:	189b      	adds	r3, r3, r2
   2dd1a:	2218      	movs	r2, #24
   2dd1c:	18b8      	adds	r0, r7, r2
   2dd1e:	6819      	ldr	r1, [r3, #0]
   2dd20:	685a      	ldr	r2, [r3, #4]
   2dd22:	689b      	ldr	r3, [r3, #8]
   2dd24:	4c14      	ldr	r4, [pc, #80]	; (2dd78 <MQTTSerialize_subscribe+0x14c>)
   2dd26:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2dd28:	6a3b      	ldr	r3, [r7, #32]
   2dd2a:	009b      	lsls	r3, r3, #2
   2dd2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2dd2e:	18d3      	adds	r3, r2, r3
   2dd30:	681b      	ldr	r3, [r3, #0]
   2dd32:	b2da      	uxtb	r2, r3
   2dd34:	2318      	movs	r3, #24
   2dd36:	18fb      	adds	r3, r7, r3
   2dd38:	0011      	movs	r1, r2
   2dd3a:	0018      	movs	r0, r3
   2dd3c:	4b0b      	ldr	r3, [pc, #44]	; (2dd6c <MQTTSerialize_subscribe+0x140>)
   2dd3e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2dd40:	6a3b      	ldr	r3, [r7, #32]
   2dd42:	3301      	adds	r3, #1
   2dd44:	623b      	str	r3, [r7, #32]
   2dd46:	6a3a      	ldr	r2, [r7, #32]
   2dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dd4a:	429a      	cmp	r2, r3
   2dd4c:	dbdd      	blt.n	2dd0a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2dd4e:	69bb      	ldr	r3, [r7, #24]
   2dd50:	001a      	movs	r2, r3
   2dd52:	68fb      	ldr	r3, [r7, #12]
   2dd54:	1ad3      	subs	r3, r2, r3
   2dd56:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2dd5a:	0018      	movs	r0, r3
   2dd5c:	46bd      	mov	sp, r7
   2dd5e:	b00b      	add	sp, #44	; 0x2c
   2dd60:	bd90      	pop	{r4, r7, pc}
   2dd62:	46c0      	nop			; (mov r8, r8)
   2dd64:	0002dbd9 	.word	0x0002dbd9
   2dd68:	0002d59d 	.word	0x0002d59d
   2dd6c:	0002d6bf 	.word	0x0002d6bf
   2dd70:	0002d4a5 	.word	0x0002d4a5
   2dd74:	0002d6e9 	.word	0x0002d6e9
   2dd78:	0002d791 	.word	0x0002d791

0002dd7c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2dd7c:	b590      	push	{r4, r7, lr}
   2dd7e:	b08b      	sub	sp, #44	; 0x2c
   2dd80:	af00      	add	r7, sp, #0
   2dd82:	60f8      	str	r0, [r7, #12]
   2dd84:	60b9      	str	r1, [r7, #8]
   2dd86:	607a      	str	r2, [r7, #4]
   2dd88:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2dd8a:	2300      	movs	r3, #0
   2dd8c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2dd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2dd90:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2dd92:	2300      	movs	r3, #0
   2dd94:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2dd96:	2300      	movs	r3, #0
   2dd98:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2dd9a:	2318      	movs	r3, #24
   2dd9c:	18fb      	adds	r3, r7, r3
   2dd9e:	0018      	movs	r0, r3
   2dda0:	4b2c      	ldr	r3, [pc, #176]	; (2de54 <MQTTDeserialize_suback+0xd8>)
   2dda2:	4798      	blx	r3
   2dda4:	0003      	movs	r3, r0
   2dda6:	001a      	movs	r2, r3
   2dda8:	231c      	movs	r3, #28
   2ddaa:	18fb      	adds	r3, r7, r3
   2ddac:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2ddae:	231c      	movs	r3, #28
   2ddb0:	18fb      	adds	r3, r7, r3
   2ddb2:	781b      	ldrb	r3, [r3, #0]
   2ddb4:	220f      	movs	r2, #15
   2ddb6:	4393      	bics	r3, r2
   2ddb8:	b2db      	uxtb	r3, r3
   2ddba:	2b90      	cmp	r3, #144	; 0x90
   2ddbc:	d142      	bne.n	2de44 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2ddbe:	69bb      	ldr	r3, [r7, #24]
   2ddc0:	2214      	movs	r2, #20
   2ddc2:	18ba      	adds	r2, r7, r2
   2ddc4:	0011      	movs	r1, r2
   2ddc6:	0018      	movs	r0, r3
   2ddc8:	4b23      	ldr	r3, [pc, #140]	; (2de58 <MQTTDeserialize_suback+0xdc>)
   2ddca:	4798      	blx	r3
   2ddcc:	0003      	movs	r3, r0
   2ddce:	627b      	str	r3, [r7, #36]	; 0x24
   2ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ddd2:	69bb      	ldr	r3, [r7, #24]
   2ddd4:	189b      	adds	r3, r3, r2
   2ddd6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2ddd8:	69bb      	ldr	r3, [r7, #24]
   2ddda:	697a      	ldr	r2, [r7, #20]
   2dddc:	189b      	adds	r3, r3, r2
   2ddde:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2dde0:	6a3b      	ldr	r3, [r7, #32]
   2dde2:	69ba      	ldr	r2, [r7, #24]
   2dde4:	1a9b      	subs	r3, r3, r2
   2dde6:	2b01      	cmp	r3, #1
   2dde8:	dd2e      	ble.n	2de48 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2ddea:	2318      	movs	r3, #24
   2ddec:	18fb      	adds	r3, r7, r3
   2ddee:	0018      	movs	r0, r3
   2ddf0:	4b1a      	ldr	r3, [pc, #104]	; (2de5c <MQTTDeserialize_suback+0xe0>)
   2ddf2:	4798      	blx	r3
   2ddf4:	0003      	movs	r3, r0
   2ddf6:	b29a      	uxth	r2, r3
   2ddf8:	68fb      	ldr	r3, [r7, #12]
   2ddfa:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2ddfc:	687b      	ldr	r3, [r7, #4]
   2ddfe:	2200      	movs	r2, #0
   2de00:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2de02:	e018      	b.n	2de36 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2de04:	687b      	ldr	r3, [r7, #4]
   2de06:	681a      	ldr	r2, [r3, #0]
   2de08:	68bb      	ldr	r3, [r7, #8]
   2de0a:	429a      	cmp	r2, r3
   2de0c:	dd03      	ble.n	2de16 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2de0e:	2301      	movs	r3, #1
   2de10:	425b      	negs	r3, r3
   2de12:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2de14:	e019      	b.n	2de4a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2de16:	687b      	ldr	r3, [r7, #4]
   2de18:	681a      	ldr	r2, [r3, #0]
   2de1a:	1c51      	adds	r1, r2, #1
   2de1c:	687b      	ldr	r3, [r7, #4]
   2de1e:	6019      	str	r1, [r3, #0]
   2de20:	0013      	movs	r3, r2
   2de22:	009b      	lsls	r3, r3, #2
   2de24:	683a      	ldr	r2, [r7, #0]
   2de26:	18d4      	adds	r4, r2, r3
   2de28:	2318      	movs	r3, #24
   2de2a:	18fb      	adds	r3, r7, r3
   2de2c:	0018      	movs	r0, r3
   2de2e:	4b09      	ldr	r3, [pc, #36]	; (2de54 <MQTTDeserialize_suback+0xd8>)
   2de30:	4798      	blx	r3
   2de32:	0003      	movs	r3, r0
   2de34:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2de36:	69ba      	ldr	r2, [r7, #24]
   2de38:	6a3b      	ldr	r3, [r7, #32]
   2de3a:	429a      	cmp	r2, r3
   2de3c:	d3e2      	bcc.n	2de04 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2de3e:	2301      	movs	r3, #1
   2de40:	627b      	str	r3, [r7, #36]	; 0x24
   2de42:	e002      	b.n	2de4a <MQTTDeserialize_suback+0xce>
		goto exit;
   2de44:	46c0      	nop			; (mov r8, r8)
   2de46:	e000      	b.n	2de4a <MQTTDeserialize_suback+0xce>
		goto exit;
   2de48:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2de4c:	0018      	movs	r0, r3
   2de4e:	46bd      	mov	sp, r7
   2de50:	b00b      	add	sp, #44	; 0x2c
   2de52:	bd90      	pop	{r4, r7, pc}
   2de54:	0002d693 	.word	0x0002d693
   2de58:	0002d62d 	.word	0x0002d62d
   2de5c:	0002d661 	.word	0x0002d661

0002de60 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2de60:	b580      	push	{r7, lr}
   2de62:	b082      	sub	sp, #8
   2de64:	af00      	add	r7, sp, #0
   2de66:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2de68:	687b      	ldr	r3, [r7, #4]
   2de6a:	2250      	movs	r2, #80	; 0x50
   2de6c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2de6e:	687b      	ldr	r3, [r7, #4]
   2de70:	2200      	movs	r2, #0
   2de72:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2de74:	687b      	ldr	r3, [r7, #4]
   2de76:	4a0b      	ldr	r2, [pc, #44]	; (2dea4 <http_client_get_config_defaults+0x44>)
   2de78:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2de7a:	687b      	ldr	r3, [r7, #4]
   2de7c:	2200      	movs	r2, #0
   2de7e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2de80:	687b      	ldr	r3, [r7, #4]
   2de82:	2200      	movs	r2, #0
   2de84:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2de86:	687b      	ldr	r3, [r7, #4]
   2de88:	2280      	movs	r2, #128	; 0x80
   2de8a:	0052      	lsls	r2, r2, #1
   2de8c:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2de8e:	687b      	ldr	r3, [r7, #4]
   2de90:	2252      	movs	r2, #82	; 0x52
   2de92:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2de94:	687b      	ldr	r3, [r7, #4]
   2de96:	4a04      	ldr	r2, [pc, #16]	; (2dea8 <http_client_get_config_defaults+0x48>)
   2de98:	619a      	str	r2, [r3, #24]
}
   2de9a:	46c0      	nop			; (mov r8, r8)
   2de9c:	46bd      	mov	sp, r7
   2de9e:	b002      	add	sp, #8
   2dea0:	bd80      	pop	{r7, pc}
   2dea2:	46c0      	nop			; (mov r8, r8)
   2dea4:	00004e20 	.word	0x00004e20
   2dea8:	00037f54 	.word	0x00037f54

0002deac <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2deac:	b590      	push	{r4, r7, lr}
   2deae:	b083      	sub	sp, #12
   2deb0:	af00      	add	r7, sp, #0
   2deb2:	6078      	str	r0, [r7, #4]
   2deb4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2deb6:	687b      	ldr	r3, [r7, #4]
   2deb8:	2b00      	cmp	r3, #0
   2deba:	d002      	beq.n	2dec2 <http_client_init+0x16>
   2debc:	683b      	ldr	r3, [r7, #0]
   2debe:	2b00      	cmp	r3, #0
   2dec0:	d102      	bne.n	2dec8 <http_client_init+0x1c>
		return -EINVAL;
   2dec2:	2316      	movs	r3, #22
   2dec4:	425b      	negs	r3, r3
   2dec6:	e058      	b.n	2df7a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2dec8:	683b      	ldr	r3, [r7, #0]
   2deca:	691b      	ldr	r3, [r3, #16]
   2decc:	2b00      	cmp	r3, #0
   2dece:	d102      	bne.n	2ded6 <http_client_init+0x2a>
		return -EINVAL;
   2ded0:	2316      	movs	r3, #22
   2ded2:	425b      	negs	r3, r3
   2ded4:	e051      	b.n	2df7a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2ded6:	683b      	ldr	r3, [r7, #0]
   2ded8:	685b      	ldr	r3, [r3, #4]
   2deda:	2b00      	cmp	r3, #0
   2dedc:	d102      	bne.n	2dee4 <http_client_init+0x38>
		return -EINVAL;
   2dede:	2316      	movs	r3, #22
   2dee0:	425b      	negs	r3, r3
   2dee2:	e04a      	b.n	2df7a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2dee4:	683b      	ldr	r3, [r7, #0]
   2dee6:	695b      	ldr	r3, [r3, #20]
   2dee8:	2b51      	cmp	r3, #81	; 0x51
   2deea:	d802      	bhi.n	2def2 <http_client_init+0x46>
		return -EINVAL;
   2deec:	2316      	movs	r3, #22
   2deee:	425b      	negs	r3, r3
   2def0:	e043      	b.n	2df7a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2def2:	687b      	ldr	r3, [r7, #4]
   2def4:	22e8      	movs	r2, #232	; 0xe8
   2def6:	2100      	movs	r1, #0
   2def8:	0018      	movs	r0, r3
   2defa:	4b22      	ldr	r3, [pc, #136]	; (2df84 <http_client_init+0xd8>)
   2defc:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2defe:	687b      	ldr	r3, [r7, #4]
   2df00:	3350      	adds	r3, #80	; 0x50
   2df02:	6839      	ldr	r1, [r7, #0]
   2df04:	221c      	movs	r2, #28
   2df06:	0018      	movs	r0, r3
   2df08:	4b1f      	ldr	r3, [pc, #124]	; (2df88 <http_client_init+0xdc>)
   2df0a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2df0c:	687b      	ldr	r3, [r7, #4]
   2df0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2df10:	2b00      	cmp	r3, #0
   2df12:	d115      	bne.n	2df40 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2df14:	683b      	ldr	r3, [r7, #0]
   2df16:	691b      	ldr	r3, [r3, #16]
   2df18:	0018      	movs	r0, r3
   2df1a:	4b1c      	ldr	r3, [pc, #112]	; (2df8c <http_client_init+0xe0>)
   2df1c:	4798      	blx	r3
   2df1e:	0003      	movs	r3, r0
   2df20:	001a      	movs	r2, r3
   2df22:	687b      	ldr	r3, [r7, #4]
   2df24:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2df26:	687b      	ldr	r3, [r7, #4]
   2df28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2df2a:	2b00      	cmp	r3, #0
   2df2c:	d102      	bne.n	2df34 <http_client_init+0x88>
			return -ENOMEM;
   2df2e:	230c      	movs	r3, #12
   2df30:	425b      	negs	r3, r3
   2df32:	e022      	b.n	2df7a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2df34:	687b      	ldr	r3, [r7, #4]
   2df36:	2241      	movs	r2, #65	; 0x41
   2df38:	5c99      	ldrb	r1, [r3, r2]
   2df3a:	2004      	movs	r0, #4
   2df3c:	4301      	orrs	r1, r0
   2df3e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2df40:	683b      	ldr	r3, [r7, #0]
   2df42:	891b      	ldrh	r3, [r3, #8]
   2df44:	2b00      	cmp	r3, #0
   2df46:	d010      	beq.n	2df6a <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2df48:	683b      	ldr	r3, [r7, #0]
   2df4a:	6858      	ldr	r0, [r3, #4]
   2df4c:	687a      	ldr	r2, [r7, #4]
   2df4e:	4910      	ldr	r1, [pc, #64]	; (2df90 <http_client_init+0xe4>)
   2df50:	2300      	movs	r3, #0
   2df52:	4c10      	ldr	r4, [pc, #64]	; (2df94 <http_client_init+0xe8>)
   2df54:	47a0      	blx	r4
   2df56:	0002      	movs	r2, r0
   2df58:	687b      	ldr	r3, [r7, #4]
   2df5a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2df5c:	687b      	ldr	r3, [r7, #4]
   2df5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2df60:	2b00      	cmp	r3, #0
   2df62:	da02      	bge.n	2df6a <http_client_init+0xbe>
			return -ENOSPC;
   2df64:	231c      	movs	r3, #28
   2df66:	425b      	negs	r3, r3
   2df68:	e007      	b.n	2df7a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2df6a:	687b      	ldr	r3, [r7, #4]
   2df6c:	2200      	movs	r2, #0
   2df6e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2df70:	687b      	ldr	r3, [r7, #4]
   2df72:	22d8      	movs	r2, #216	; 0xd8
   2df74:	2100      	movs	r1, #0
   2df76:	5099      	str	r1, [r3, r2]

	return 0;
   2df78:	2300      	movs	r3, #0
}
   2df7a:	0018      	movs	r0, r3
   2df7c:	46bd      	mov	sp, r7
   2df7e:	b003      	add	sp, #12
   2df80:	bd90      	pop	{r4, r7, pc}
   2df82:	46c0      	nop			; (mov r8, r8)
   2df84:	000328a7 	.word	0x000328a7
   2df88:	00032871 	.word	0x00032871
   2df8c:	00032849 	.word	0x00032849
   2df90:	0002e25d 	.word	0x0002e25d
   2df94:	0002f901 	.word	0x0002f901

0002df98 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2df98:	b580      	push	{r7, lr}
   2df9a:	b082      	sub	sp, #8
   2df9c:	af00      	add	r7, sp, #0
   2df9e:	6078      	str	r0, [r7, #4]
   2dfa0:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2dfa2:	687b      	ldr	r3, [r7, #4]
   2dfa4:	2b00      	cmp	r3, #0
   2dfa6:	d102      	bne.n	2dfae <http_client_register_callback+0x16>
		return -EINVAL;
   2dfa8:	2316      	movs	r3, #22
   2dfaa:	425b      	negs	r3, r3
   2dfac:	e003      	b.n	2dfb6 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2dfae:	687b      	ldr	r3, [r7, #4]
   2dfb0:	683a      	ldr	r2, [r7, #0]
   2dfb2:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2dfb4:	2300      	movs	r3, #0
}
   2dfb6:	0018      	movs	r0, r3
   2dfb8:	46bd      	mov	sp, r7
   2dfba:	b002      	add	sp, #8
   2dfbc:	bd80      	pop	{r7, pc}
	...

0002dfc0 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2dfc0:	b580      	push	{r7, lr}
   2dfc2:	b082      	sub	sp, #8
   2dfc4:	af00      	add	r7, sp, #0
   2dfc6:	6078      	str	r0, [r7, #4]
	switch (err) {
   2dfc8:	687b      	ldr	r3, [r7, #4]
   2dfca:	330e      	adds	r3, #14
   2dfcc:	2b0e      	cmp	r3, #14
   2dfce:	d825      	bhi.n	2e01c <_hwerr_to_stderr+0x5c>
   2dfd0:	009a      	lsls	r2, r3, #2
   2dfd2:	4b18      	ldr	r3, [pc, #96]	; (2e034 <_hwerr_to_stderr+0x74>)
   2dfd4:	18d3      	adds	r3, r2, r3
   2dfd6:	681b      	ldr	r3, [r3, #0]
   2dfd8:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2dfda:	2305      	movs	r3, #5
   2dfdc:	425b      	negs	r3, r3
   2dfde:	e024      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2dfe0:	2302      	movs	r3, #2
   2dfe2:	425b      	negs	r3, r3
   2dfe4:	e021      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2dfe6:	2370      	movs	r3, #112	; 0x70
   2dfe8:	425b      	negs	r3, r3
   2dfea:	e01e      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2dfec:	230c      	movs	r3, #12
   2dfee:	425b      	negs	r3, r3
   2dff0:	e01b      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2dff2:	2316      	movs	r3, #22
   2dff4:	425b      	negs	r3, r3
   2dff6:	e018      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2dff8:	230c      	movs	r3, #12
   2dffa:	425b      	negs	r3, r3
   2dffc:	e015      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2dffe:	2305      	movs	r3, #5
   2e000:	425b      	negs	r3, r3
   2e002:	e012      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2e004:	2379      	movs	r3, #121	; 0x79
   2e006:	425b      	negs	r3, r3
   2e008:	e00f      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2e00a:	2368      	movs	r3, #104	; 0x68
   2e00c:	425b      	negs	r3, r3
   2e00e:	e00c      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2e010:	230b      	movs	r3, #11
   2e012:	425b      	negs	r3, r3
   2e014:	e009      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2e016:	2310      	movs	r3, #16
   2e018:	425b      	negs	r3, r3
   2e01a:	e006      	b.n	2e02a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2e01c:	687b      	ldr	r3, [r7, #4]
   2e01e:	2b00      	cmp	r3, #0
   2e020:	da02      	bge.n	2e028 <_hwerr_to_stderr+0x68>
				return -EIO;
   2e022:	2305      	movs	r3, #5
   2e024:	425b      	negs	r3, r3
   2e026:	e000      	b.n	2e02a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2e028:	2300      	movs	r3, #0
	}
}
   2e02a:	0018      	movs	r0, r3
   2e02c:	46bd      	mov	sp, r7
   2e02e:	b002      	add	sp, #8
   2e030:	bd80      	pop	{r7, pc}
   2e032:	46c0      	nop			; (mov r8, r8)
   2e034:	00038090 	.word	0x00038090

0002e038 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2e038:	b580      	push	{r7, lr}
   2e03a:	b08a      	sub	sp, #40	; 0x28
   2e03c:	af00      	add	r7, sp, #0
   2e03e:	603a      	str	r2, [r7, #0]
   2e040:	1dfb      	adds	r3, r7, #7
   2e042:	1c02      	adds	r2, r0, #0
   2e044:	701a      	strb	r2, [r3, #0]
   2e046:	1dbb      	adds	r3, r7, #6
   2e048:	1c0a      	adds	r2, r1, #0
   2e04a:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2e04c:	1dfb      	adds	r3, r7, #7
   2e04e:	2200      	movs	r2, #0
   2e050:	569a      	ldrsb	r2, [r3, r2]
   2e052:	4b4b      	ldr	r3, [pc, #300]	; (2e180 <http_client_socket_event_handler+0x148>)
   2e054:	0092      	lsls	r2, r2, #2
   2e056:	58d3      	ldr	r3, [r2, r3]
   2e058:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e05c:	2b00      	cmp	r3, #0
   2e05e:	d100      	bne.n	2e062 <http_client_socket_event_handler+0x2a>
   2e060:	e08a      	b.n	2e178 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2e062:	1dbb      	adds	r3, r7, #6
   2e064:	781b      	ldrb	r3, [r3, #0]
   2e066:	2b06      	cmp	r3, #6
   2e068:	d040      	beq.n	2e0ec <http_client_socket_event_handler+0xb4>
   2e06a:	2b07      	cmp	r3, #7
   2e06c:	d060      	beq.n	2e130 <http_client_socket_event_handler+0xf8>
   2e06e:	2b05      	cmp	r3, #5
   2e070:	d000      	beq.n	2e074 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2e072:	e082      	b.n	2e17a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2e074:	683b      	ldr	r3, [r7, #0]
   2e076:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2e078:	6a3b      	ldr	r3, [r7, #32]
   2e07a:	785b      	ldrb	r3, [r3, #1]
   2e07c:	b25b      	sxtb	r3, r3
   2e07e:	001a      	movs	r2, r3
   2e080:	230c      	movs	r3, #12
   2e082:	18fb      	adds	r3, r7, r3
   2e084:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2e086:	6a3b      	ldr	r3, [r7, #32]
   2e088:	785b      	ldrb	r3, [r3, #1]
   2e08a:	b25b      	sxtb	r3, r3
   2e08c:	2b00      	cmp	r3, #0
   2e08e:	da0c      	bge.n	2e0aa <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2e090:	6a3b      	ldr	r3, [r7, #32]
   2e092:	785b      	ldrb	r3, [r3, #1]
   2e094:	b25b      	sxtb	r3, r3
   2e096:	0018      	movs	r0, r3
   2e098:	4b3a      	ldr	r3, [pc, #232]	; (2e184 <http_client_socket_event_handler+0x14c>)
   2e09a:	4798      	blx	r3
   2e09c:	0002      	movs	r2, r0
   2e09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0a0:	0011      	movs	r1, r2
   2e0a2:	0018      	movs	r0, r3
   2e0a4:	4b38      	ldr	r3, [pc, #224]	; (2e188 <http_client_socket_event_handler+0x150>)
   2e0a6:	4798      	blx	r3
    	break;
   2e0a8:	e067      	b.n	2e17a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e0ae:	2b00      	cmp	r3, #0
   2e0b0:	d006      	beq.n	2e0c0 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e0b6:	220c      	movs	r2, #12
   2e0b8:	18ba      	adds	r2, r7, r2
   2e0ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2e0bc:	2100      	movs	r1, #0
   2e0be:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0c2:	2203      	movs	r2, #3
   2e0c4:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0cc:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0d0:	2258      	movs	r2, #88	; 0x58
   2e0d2:	5a9b      	ldrh	r3, [r3, r2]
   2e0d4:	001a      	movs	r2, r3
   2e0d6:	4b2d      	ldr	r3, [pc, #180]	; (2e18c <http_client_socket_event_handler+0x154>)
   2e0d8:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0dc:	0018      	movs	r0, r3
   2e0de:	4b2c      	ldr	r3, [pc, #176]	; (2e190 <http_client_socket_event_handler+0x158>)
   2e0e0:	4798      	blx	r3
			_http_client_request(module);
   2e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e0e4:	0018      	movs	r0, r3
   2e0e6:	4b2b      	ldr	r3, [pc, #172]	; (2e194 <http_client_socket_event_handler+0x15c>)
   2e0e8:	4798      	blx	r3
    	break;
   2e0ea:	e046      	b.n	2e17a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2e0ec:	683b      	ldr	r3, [r7, #0]
   2e0ee:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2e0f0:	69fb      	ldr	r3, [r7, #28]
   2e0f2:	2204      	movs	r2, #4
   2e0f4:	5e9b      	ldrsh	r3, [r3, r2]
   2e0f6:	2b00      	cmp	r3, #0
   2e0f8:	dd09      	ble.n	2e10e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2e0fa:	69fb      	ldr	r3, [r7, #28]
   2e0fc:	2204      	movs	r2, #4
   2e0fe:	5e9b      	ldrsh	r3, [r3, r2]
   2e100:	001a      	movs	r2, r3
   2e102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e104:	0011      	movs	r1, r2
   2e106:	0018      	movs	r0, r3
   2e108:	4b23      	ldr	r3, [pc, #140]	; (2e198 <http_client_socket_event_handler+0x160>)
   2e10a:	4798      	blx	r3
   2e10c:	e00b      	b.n	2e126 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2e10e:	69fb      	ldr	r3, [r7, #28]
   2e110:	2204      	movs	r2, #4
   2e112:	5e9b      	ldrsh	r3, [r3, r2]
   2e114:	0018      	movs	r0, r3
   2e116:	4b1b      	ldr	r3, [pc, #108]	; (2e184 <http_client_socket_event_handler+0x14c>)
   2e118:	4798      	blx	r3
   2e11a:	0002      	movs	r2, r0
   2e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e11e:	0011      	movs	r1, r2
   2e120:	0018      	movs	r0, r3
   2e122:	4b19      	ldr	r3, [pc, #100]	; (2e188 <http_client_socket_event_handler+0x150>)
   2e124:	4798      	blx	r3
		_http_client_recv_packet(module);
   2e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e128:	0018      	movs	r0, r3
   2e12a:	4b19      	ldr	r3, [pc, #100]	; (2e190 <http_client_socket_event_handler+0x158>)
   2e12c:	4798      	blx	r3
		break;
   2e12e:	e024      	b.n	2e17a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2e130:	231a      	movs	r3, #26
   2e132:	18fb      	adds	r3, r7, r3
   2e134:	683a      	ldr	r2, [r7, #0]
   2e136:	8812      	ldrh	r2, [r2, #0]
   2e138:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2e13a:	231a      	movs	r3, #26
   2e13c:	18fb      	adds	r3, r7, r3
   2e13e:	2200      	movs	r2, #0
   2e140:	5e9b      	ldrsh	r3, [r3, r2]
   2e142:	2b00      	cmp	r3, #0
   2e144:	da0d      	bge.n	2e162 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2e146:	231a      	movs	r3, #26
   2e148:	18fb      	adds	r3, r7, r3
   2e14a:	2200      	movs	r2, #0
   2e14c:	5e9b      	ldrsh	r3, [r3, r2]
   2e14e:	0018      	movs	r0, r3
   2e150:	4b0c      	ldr	r3, [pc, #48]	; (2e184 <http_client_socket_event_handler+0x14c>)
   2e152:	4798      	blx	r3
   2e154:	0002      	movs	r2, r0
   2e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e158:	0011      	movs	r1, r2
   2e15a:	0018      	movs	r0, r3
   2e15c:	4b0a      	ldr	r3, [pc, #40]	; (2e188 <http_client_socket_event_handler+0x150>)
   2e15e:	4798      	blx	r3
   2e160:	e003      	b.n	2e16a <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2e162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e164:	0018      	movs	r0, r3
   2e166:	4b0b      	ldr	r3, [pc, #44]	; (2e194 <http_client_socket_event_handler+0x15c>)
   2e168:	4798      	blx	r3
		module->sending = 0;
   2e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e16c:	2241      	movs	r2, #65	; 0x41
   2e16e:	5c99      	ldrb	r1, [r3, r2]
   2e170:	2001      	movs	r0, #1
   2e172:	4381      	bics	r1, r0
   2e174:	5499      	strb	r1, [r3, r2]
    	break;
   2e176:	e000      	b.n	2e17a <http_client_socket_event_handler+0x142>
		return;
   2e178:	46c0      	nop			; (mov r8, r8)
	}

}
   2e17a:	46bd      	mov	sp, r7
   2e17c:	b00a      	add	sp, #40	; 0x28
   2e17e:	bd80      	pop	{r7, pc}
   2e180:	20004288 	.word	0x20004288
   2e184:	0002dfc1 	.word	0x0002dfc1
   2e188:	0002e635 	.word	0x0002e635
   2e18c:	0002f991 	.word	0x0002f991
   2e190:	0002eec1 	.word	0x0002eec1
   2e194:	0002e789 	.word	0x0002e789
   2e198:	0002ef25 	.word	0x0002ef25

0002e19c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   2e19c:	b580      	push	{r7, lr}
   2e19e:	b088      	sub	sp, #32
   2e1a0:	af00      	add	r7, sp, #0
   2e1a2:	6078      	str	r0, [r7, #4]
   2e1a4:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2e1a6:	2300      	movs	r3, #0
   2e1a8:	61fb      	str	r3, [r7, #28]
   2e1aa:	e048      	b.n	2e23e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   2e1ac:	4b27      	ldr	r3, [pc, #156]	; (2e24c <http_client_socket_resolve_handler+0xb0>)
   2e1ae:	69fa      	ldr	r2, [r7, #28]
   2e1b0:	0092      	lsls	r2, r2, #2
   2e1b2:	58d3      	ldr	r3, [r2, r3]
   2e1b4:	2b00      	cmp	r3, #0
   2e1b6:	d03f      	beq.n	2e238 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   2e1b8:	4b24      	ldr	r3, [pc, #144]	; (2e24c <http_client_socket_resolve_handler+0xb0>)
   2e1ba:	69fa      	ldr	r2, [r7, #28]
   2e1bc:	0092      	lsls	r2, r2, #2
   2e1be:	58d3      	ldr	r3, [r2, r3]
   2e1c0:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   2e1c2:	69bb      	ldr	r3, [r7, #24]
   2e1c4:	1c5a      	adds	r2, r3, #1
   2e1c6:	687b      	ldr	r3, [r7, #4]
   2e1c8:	0011      	movs	r1, r2
   2e1ca:	0018      	movs	r0, r3
   2e1cc:	4b20      	ldr	r3, [pc, #128]	; (2e250 <http_client_socket_resolve_handler+0xb4>)
   2e1ce:	4798      	blx	r3
   2e1d0:	1e03      	subs	r3, r0, #0
   2e1d2:	d131      	bne.n	2e238 <http_client_socket_resolve_handler+0x9c>
   2e1d4:	69bb      	ldr	r3, [r7, #24]
   2e1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2e1d8:	2b01      	cmp	r3, #1
   2e1da:	d12d      	bne.n	2e238 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   2e1dc:	683b      	ldr	r3, [r7, #0]
   2e1de:	2b00      	cmp	r3, #0
   2e1e0:	d107      	bne.n	2e1f2 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   2e1e2:	2376      	movs	r3, #118	; 0x76
   2e1e4:	425a      	negs	r2, r3
   2e1e6:	69bb      	ldr	r3, [r7, #24]
   2e1e8:	0011      	movs	r1, r2
   2e1ea:	0018      	movs	r0, r3
   2e1ec:	4b19      	ldr	r3, [pc, #100]	; (2e254 <http_client_socket_resolve_handler+0xb8>)
   2e1ee:	4798      	blx	r3
					return;
   2e1f0:	e028      	b.n	2e244 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   2e1f2:	2308      	movs	r3, #8
   2e1f4:	18fb      	adds	r3, r7, r3
   2e1f6:	2202      	movs	r2, #2
   2e1f8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2e1fa:	69bb      	ldr	r3, [r7, #24]
   2e1fc:	2250      	movs	r2, #80	; 0x50
   2e1fe:	5a9b      	ldrh	r3, [r3, r2]
   2e200:	021b      	lsls	r3, r3, #8
   2e202:	b21a      	sxth	r2, r3
   2e204:	69bb      	ldr	r3, [r7, #24]
   2e206:	2150      	movs	r1, #80	; 0x50
   2e208:	5a5b      	ldrh	r3, [r3, r1]
   2e20a:	0a1b      	lsrs	r3, r3, #8
   2e20c:	b29b      	uxth	r3, r3
   2e20e:	b21b      	sxth	r3, r3
   2e210:	4313      	orrs	r3, r2
   2e212:	b21b      	sxth	r3, r3
   2e214:	b29a      	uxth	r2, r3
   2e216:	2308      	movs	r3, #8
   2e218:	18fb      	adds	r3, r7, r3
   2e21a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   2e21c:	2308      	movs	r3, #8
   2e21e:	18fb      	adds	r3, r7, r3
   2e220:	683a      	ldr	r2, [r7, #0]
   2e222:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2e224:	69bb      	ldr	r3, [r7, #24]
   2e226:	781b      	ldrb	r3, [r3, #0]
   2e228:	b25b      	sxtb	r3, r3
   2e22a:	2208      	movs	r2, #8
   2e22c:	18b9      	adds	r1, r7, r2
   2e22e:	2210      	movs	r2, #16
   2e230:	0018      	movs	r0, r3
   2e232:	4b09      	ldr	r3, [pc, #36]	; (2e258 <http_client_socket_resolve_handler+0xbc>)
   2e234:	4798      	blx	r3
				return;
   2e236:	e005      	b.n	2e244 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2e238:	69fb      	ldr	r3, [r7, #28]
   2e23a:	3301      	adds	r3, #1
   2e23c:	61fb      	str	r3, [r7, #28]
   2e23e:	69fb      	ldr	r3, [r7, #28]
   2e240:	2b06      	cmp	r3, #6
   2e242:	ddb3      	ble.n	2e1ac <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   2e244:	46bd      	mov	sp, r7
   2e246:	b008      	add	sp, #32
   2e248:	bd80      	pop	{r7, pc}
   2e24a:	46c0      	nop			; (mov r8, r8)
   2e24c:	20004288 	.word	0x20004288
   2e250:	00032bff 	.word	0x00032bff
   2e254:	0002e635 	.word	0x0002e635
   2e258:	000220d5 	.word	0x000220d5

0002e25c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   2e25c:	b580      	push	{r7, lr}
   2e25e:	b086      	sub	sp, #24
   2e260:	af00      	add	r7, sp, #0
   2e262:	60f8      	str	r0, [r7, #12]
   2e264:	60b9      	str	r1, [r7, #8]
   2e266:	607a      	str	r2, [r7, #4]
   2e268:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   2e26a:	687b      	ldr	r3, [r7, #4]
   2e26c:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   2e26e:	697b      	ldr	r3, [r7, #20]
   2e270:	2b00      	cmp	r3, #0
   2e272:	d007      	beq.n	2e284 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   2e274:	233e      	movs	r3, #62	; 0x3e
   2e276:	425a      	negs	r2, r3
   2e278:	697b      	ldr	r3, [r7, #20]
   2e27a:	0011      	movs	r1, r2
   2e27c:	0018      	movs	r0, r3
   2e27e:	4b03      	ldr	r3, [pc, #12]	; (2e28c <http_client_timer_callback+0x30>)
   2e280:	4798      	blx	r3
   2e282:	e000      	b.n	2e286 <http_client_timer_callback+0x2a>
		return;
   2e284:	46c0      	nop			; (mov r8, r8)
}
   2e286:	46bd      	mov	sp, r7
   2e288:	b006      	add	sp, #24
   2e28a:	bd80      	pop	{r7, pc}
   2e28c:	0002e635 	.word	0x0002e635

0002e290 <_is_ip>:

static int _is_ip(const char *host)
{
   2e290:	b580      	push	{r7, lr}
   2e292:	b084      	sub	sp, #16
   2e294:	af00      	add	r7, sp, #0
   2e296:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   2e298:	2300      	movs	r3, #0
   2e29a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   2e29c:	e03a      	b.n	2e314 <_is_ip+0x84>
		ch = *host++;
   2e29e:	687b      	ldr	r3, [r7, #4]
   2e2a0:	1c5a      	adds	r2, r3, #1
   2e2a2:	607a      	str	r2, [r7, #4]
   2e2a4:	220b      	movs	r2, #11
   2e2a6:	18ba      	adds	r2, r7, r2
   2e2a8:	781b      	ldrb	r3, [r3, #0]
   2e2aa:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   2e2ac:	230b      	movs	r3, #11
   2e2ae:	18fb      	adds	r3, r7, r3
   2e2b0:	781b      	ldrb	r3, [r3, #0]
   2e2b2:	2b60      	cmp	r3, #96	; 0x60
   2e2b4:	d904      	bls.n	2e2c0 <_is_ip+0x30>
   2e2b6:	230b      	movs	r3, #11
   2e2b8:	18fb      	adds	r3, r7, r3
   2e2ba:	781b      	ldrb	r3, [r3, #0]
   2e2bc:	2b66      	cmp	r3, #102	; 0x66
   2e2be:	d913      	bls.n	2e2e8 <_is_ip+0x58>
   2e2c0:	230b      	movs	r3, #11
   2e2c2:	18fb      	adds	r3, r7, r3
   2e2c4:	781b      	ldrb	r3, [r3, #0]
   2e2c6:	2b40      	cmp	r3, #64	; 0x40
   2e2c8:	d904      	bls.n	2e2d4 <_is_ip+0x44>
   2e2ca:	230b      	movs	r3, #11
   2e2cc:	18fb      	adds	r3, r7, r3
   2e2ce:	781b      	ldrb	r3, [r3, #0]
   2e2d0:	2b46      	cmp	r3, #70	; 0x46
   2e2d2:	d909      	bls.n	2e2e8 <_is_ip+0x58>
   2e2d4:	230b      	movs	r3, #11
   2e2d6:	18fb      	adds	r3, r7, r3
   2e2d8:	781b      	ldrb	r3, [r3, #0]
   2e2da:	2b3a      	cmp	r3, #58	; 0x3a
   2e2dc:	d004      	beq.n	2e2e8 <_is_ip+0x58>
   2e2de:	230b      	movs	r3, #11
   2e2e0:	18fb      	adds	r3, r7, r3
   2e2e2:	781b      	ldrb	r3, [r3, #0]
   2e2e4:	2b2f      	cmp	r3, #47	; 0x2f
   2e2e6:	d102      	bne.n	2e2ee <_is_ip+0x5e>
			isv6 = 1;
   2e2e8:	2301      	movs	r3, #1
   2e2ea:	60fb      	str	r3, [r7, #12]
   2e2ec:	e012      	b.n	2e314 <_is_ip+0x84>
		} else if (ch == '.') {
   2e2ee:	230b      	movs	r3, #11
   2e2f0:	18fb      	adds	r3, r7, r3
   2e2f2:	781b      	ldrb	r3, [r3, #0]
   2e2f4:	2b2e      	cmp	r3, #46	; 0x2e
   2e2f6:	d104      	bne.n	2e302 <_is_ip+0x72>
			if (isv6) {
   2e2f8:	68fb      	ldr	r3, [r7, #12]
   2e2fa:	2b00      	cmp	r3, #0
   2e2fc:	d00a      	beq.n	2e314 <_is_ip+0x84>
				return 0;
   2e2fe:	2300      	movs	r3, #0
   2e300:	e00d      	b.n	2e31e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   2e302:	230b      	movs	r3, #11
   2e304:	18fb      	adds	r3, r7, r3
   2e306:	781b      	ldrb	r3, [r3, #0]
   2e308:	2230      	movs	r2, #48	; 0x30
   2e30a:	4013      	ands	r3, r2
   2e30c:	2b30      	cmp	r3, #48	; 0x30
   2e30e:	d001      	beq.n	2e314 <_is_ip+0x84>
			return 0;
   2e310:	2300      	movs	r3, #0
   2e312:	e004      	b.n	2e31e <_is_ip+0x8e>
	while (*host != '\0') {
   2e314:	687b      	ldr	r3, [r7, #4]
   2e316:	781b      	ldrb	r3, [r3, #0]
   2e318:	2b00      	cmp	r3, #0
   2e31a:	d1c0      	bne.n	2e29e <_is_ip+0xe>
		}
	}
	return 1;
   2e31c:	2301      	movs	r3, #1
}
   2e31e:	0018      	movs	r0, r3
   2e320:	46bd      	mov	sp, r7
   2e322:	b004      	add	sp, #16
   2e324:	bd80      	pop	{r7, pc}
	...

0002e328 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   2e328:	b5b0      	push	{r4, r5, r7, lr}
   2e32a:	b08e      	sub	sp, #56	; 0x38
   2e32c:	af00      	add	r7, sp, #0
   2e32e:	60f8      	str	r0, [r7, #12]
   2e330:	60b9      	str	r1, [r7, #8]
   2e332:	603b      	str	r3, [r7, #0]
   2e334:	1dfb      	adds	r3, r7, #7
   2e336:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   2e338:	2337      	movs	r3, #55	; 0x37
   2e33a:	18fb      	adds	r3, r7, r3
   2e33c:	2200      	movs	r2, #0
   2e33e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   2e340:	2300      	movs	r3, #0
   2e342:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   2e344:	2300      	movs	r3, #0
   2e346:	633b      	str	r3, [r7, #48]	; 0x30
   2e348:	2300      	movs	r3, #0
   2e34a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2e34c:	2300      	movs	r3, #0
   2e34e:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   2e350:	68fb      	ldr	r3, [r7, #12]
   2e352:	2b00      	cmp	r3, #0
   2e354:	d102      	bne.n	2e35c <http_client_send_request+0x34>
		return -EINVAL;
   2e356:	2316      	movs	r3, #22
   2e358:	425b      	negs	r3, r3
   2e35a:	e145      	b.n	2e5e8 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   2e35c:	68fb      	ldr	r3, [r7, #12]
   2e35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2e360:	2b02      	cmp	r3, #2
   2e362:	d902      	bls.n	2e36a <http_client_send_request+0x42>
		return -EBUSY;
   2e364:	2310      	movs	r3, #16
   2e366:	425b      	negs	r3, r3
   2e368:	e13e      	b.n	2e5e8 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   2e36a:	49a1      	ldr	r1, [pc, #644]	; (2e5f0 <http_client_send_request+0x2c8>)
   2e36c:	68bb      	ldr	r3, [r7, #8]
   2e36e:	2207      	movs	r2, #7
   2e370:	0018      	movs	r0, r3
   2e372:	4ba0      	ldr	r3, [pc, #640]	; (2e5f4 <http_client_send_request+0x2cc>)
   2e374:	4798      	blx	r3
   2e376:	1e03      	subs	r3, r0, #0
   2e378:	d102      	bne.n	2e380 <http_client_send_request+0x58>
		i = 7;
   2e37a:	2307      	movs	r3, #7
   2e37c:	633b      	str	r3, [r7, #48]	; 0x30
   2e37e:	e009      	b.n	2e394 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   2e380:	499d      	ldr	r1, [pc, #628]	; (2e5f8 <http_client_send_request+0x2d0>)
   2e382:	68bb      	ldr	r3, [r7, #8]
   2e384:	2208      	movs	r2, #8
   2e386:	0018      	movs	r0, r3
   2e388:	4b9a      	ldr	r3, [pc, #616]	; (2e5f4 <http_client_send_request+0x2cc>)
   2e38a:	4798      	blx	r3
   2e38c:	1e03      	subs	r3, r0, #0
   2e38e:	d101      	bne.n	2e394 <http_client_send_request+0x6c>
		i = 8;
   2e390:	2308      	movs	r3, #8
   2e392:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   2e394:	68fb      	ldr	r3, [r7, #12]
   2e396:	1c5c      	adds	r4, r3, #1
   2e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e39a:	68ba      	ldr	r2, [r7, #8]
   2e39c:	18d5      	adds	r5, r2, r3
   2e39e:	68fb      	ldr	r3, [r7, #12]
   2e3a0:	3301      	adds	r3, #1
   2e3a2:	0018      	movs	r0, r3
   2e3a4:	4b95      	ldr	r3, [pc, #596]	; (2e5fc <http_client_send_request+0x2d4>)
   2e3a6:	4798      	blx	r3
   2e3a8:	0003      	movs	r3, r0
   2e3aa:	001a      	movs	r2, r3
   2e3ac:	0029      	movs	r1, r5
   2e3ae:	0020      	movs	r0, r4
   2e3b0:	4b90      	ldr	r3, [pc, #576]	; (2e5f4 <http_client_send_request+0x2cc>)
   2e3b2:	4798      	blx	r3
   2e3b4:	0003      	movs	r3, r0
   2e3b6:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2e3b8:	e00d      	b.n	2e3d6 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   2e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e3bc:	1c5a      	adds	r2, r3, #1
   2e3be:	62fa      	str	r2, [r7, #44]	; 0x2c
   2e3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2e3c2:	68b9      	ldr	r1, [r7, #8]
   2e3c4:	188a      	adds	r2, r1, r2
   2e3c6:	7811      	ldrb	r1, [r2, #0]
   2e3c8:	68fa      	ldr	r2, [r7, #12]
   2e3ca:	18d3      	adds	r3, r2, r3
   2e3cc:	1c0a      	adds	r2, r1, #0
   2e3ce:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2e3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3d2:	3301      	adds	r3, #1
   2e3d4:	633b      	str	r3, [r7, #48]	; 0x30
   2e3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3d8:	68ba      	ldr	r2, [r7, #8]
   2e3da:	18d3      	adds	r3, r2, r3
   2e3dc:	781b      	ldrb	r3, [r3, #0]
   2e3de:	2b00      	cmp	r3, #0
   2e3e0:	d005      	beq.n	2e3ee <http_client_send_request+0xc6>
   2e3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3e4:	68ba      	ldr	r2, [r7, #8]
   2e3e6:	18d3      	adds	r3, r2, r3
   2e3e8:	781b      	ldrb	r3, [r3, #0]
   2e3ea:	2b2f      	cmp	r3, #47	; 0x2f
   2e3ec:	d1e5      	bne.n	2e3ba <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   2e3ee:	68fa      	ldr	r2, [r7, #12]
   2e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e3f2:	18d3      	adds	r3, r2, r3
   2e3f4:	3301      	adds	r3, #1
   2e3f6:	2200      	movs	r2, #0
   2e3f8:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   2e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3fc:	68ba      	ldr	r2, [r7, #8]
   2e3fe:	18d3      	adds	r3, r2, r3
   2e400:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   2e402:	68fb      	ldr	r3, [r7, #12]
   2e404:	3301      	adds	r3, #1
   2e406:	781b      	ldrb	r3, [r3, #0]
   2e408:	2b00      	cmp	r3, #0
   2e40a:	d102      	bne.n	2e412 <http_client_send_request+0xea>
		return -EINVAL;
   2e40c:	2316      	movs	r3, #22
   2e40e:	425b      	negs	r3, r3
   2e410:	e0ea      	b.n	2e5e8 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   2e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e414:	0018      	movs	r0, r3
   2e416:	4b79      	ldr	r3, [pc, #484]	; (2e5fc <http_client_send_request+0x2d4>)
   2e418:	4798      	blx	r3
   2e41a:	0003      	movs	r3, r0
   2e41c:	2b3f      	cmp	r3, #63	; 0x3f
   2e41e:	d902      	bls.n	2e426 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   2e420:	235b      	movs	r3, #91	; 0x5b
   2e422:	425b      	negs	r3, r3
   2e424:	e0e0      	b.n	2e5e8 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   2e426:	68fb      	ldr	r3, [r7, #12]
   2e428:	22d4      	movs	r2, #212	; 0xd4
   2e42a:	589b      	ldr	r3, [r3, r2]
   2e42c:	2b00      	cmp	r3, #0
   2e42e:	d005      	beq.n	2e43c <http_client_send_request+0x114>
		free(module->req.ext_header);
   2e430:	68fb      	ldr	r3, [r7, #12]
   2e432:	22d4      	movs	r2, #212	; 0xd4
   2e434:	589b      	ldr	r3, [r3, r2]
   2e436:	0018      	movs	r0, r3
   2e438:	4b71      	ldr	r3, [pc, #452]	; (2e600 <http_client_send_request+0x2d8>)
   2e43a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   2e43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2e43e:	2b00      	cmp	r3, #0
   2e440:	d010      	beq.n	2e464 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   2e442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2e444:	0018      	movs	r0, r3
   2e446:	4b6f      	ldr	r3, [pc, #444]	; (2e604 <http_client_send_request+0x2dc>)
   2e448:	4798      	blx	r3
   2e44a:	0003      	movs	r3, r0
   2e44c:	0019      	movs	r1, r3
   2e44e:	68fb      	ldr	r3, [r7, #12]
   2e450:	22d4      	movs	r2, #212	; 0xd4
   2e452:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   2e454:	68fb      	ldr	r3, [r7, #12]
   2e456:	22d4      	movs	r2, #212	; 0xd4
   2e458:	589b      	ldr	r3, [r3, r2]
   2e45a:	2b00      	cmp	r3, #0
   2e45c:	d106      	bne.n	2e46c <http_client_send_request+0x144>
			return -ENOMEM;
   2e45e:	230c      	movs	r3, #12
   2e460:	425b      	negs	r3, r3
   2e462:	e0c1      	b.n	2e5e8 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   2e464:	68fb      	ldr	r3, [r7, #12]
   2e466:	22d4      	movs	r2, #212	; 0xd4
   2e468:	2100      	movs	r1, #0
   2e46a:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   2e46c:	68fb      	ldr	r3, [r7, #12]
   2e46e:	2241      	movs	r2, #65	; 0x41
   2e470:	5c99      	ldrb	r1, [r3, r2]
   2e472:	2001      	movs	r0, #1
   2e474:	4381      	bics	r1, r0
   2e476:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   2e478:	68fb      	ldr	r3, [r7, #12]
   2e47a:	2200      	movs	r2, #0
   2e47c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   2e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e480:	781b      	ldrb	r3, [r3, #0]
   2e482:	2b2f      	cmp	r3, #47	; 0x2f
   2e484:	d107      	bne.n	2e496 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   2e486:	68fb      	ldr	r3, [r7, #12]
   2e488:	3370      	adds	r3, #112	; 0x70
   2e48a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e48c:	0011      	movs	r1, r2
   2e48e:	0018      	movs	r0, r3
   2e490:	4b5d      	ldr	r3, [pc, #372]	; (2e608 <http_client_send_request+0x2e0>)
   2e492:	4798      	blx	r3
   2e494:	e00f      	b.n	2e4b6 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   2e496:	68fb      	ldr	r3, [r7, #12]
   2e498:	2270      	movs	r2, #112	; 0x70
   2e49a:	212f      	movs	r1, #47	; 0x2f
   2e49c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   2e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4a0:	781b      	ldrb	r3, [r3, #0]
   2e4a2:	2b00      	cmp	r3, #0
   2e4a4:	d007      	beq.n	2e4b6 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   2e4a6:	68fb      	ldr	r3, [r7, #12]
   2e4a8:	3370      	adds	r3, #112	; 0x70
   2e4aa:	3301      	adds	r3, #1
   2e4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4ae:	0011      	movs	r1, r2
   2e4b0:	0018      	movs	r0, r3
   2e4b2:	4b55      	ldr	r3, [pc, #340]	; (2e608 <http_client_send_request+0x2e0>)
   2e4b4:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   2e4b6:	683b      	ldr	r3, [r7, #0]
   2e4b8:	2b00      	cmp	r3, #0
   2e4ba:	d007      	beq.n	2e4cc <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2e4bc:	68fb      	ldr	r3, [r7, #12]
   2e4be:	33b0      	adds	r3, #176	; 0xb0
   2e4c0:	6839      	ldr	r1, [r7, #0]
   2e4c2:	2218      	movs	r2, #24
   2e4c4:	0018      	movs	r0, r3
   2e4c6:	4b51      	ldr	r3, [pc, #324]	; (2e60c <http_client_send_request+0x2e4>)
   2e4c8:	4798      	blx	r3
   2e4ca:	e006      	b.n	2e4da <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   2e4cc:	68fb      	ldr	r3, [r7, #12]
   2e4ce:	33b0      	adds	r3, #176	; 0xb0
   2e4d0:	2218      	movs	r2, #24
   2e4d2:	2100      	movs	r1, #0
   2e4d4:	0018      	movs	r0, r3
   2e4d6:	4b4e      	ldr	r3, [pc, #312]	; (2e610 <http_client_send_request+0x2e8>)
   2e4d8:	4798      	blx	r3
	}

	module->req.method = method;
   2e4da:	68fb      	ldr	r3, [r7, #12]
   2e4dc:	1dfa      	adds	r2, r7, #7
   2e4de:	21c8      	movs	r1, #200	; 0xc8
   2e4e0:	7812      	ldrb	r2, [r2, #0]
   2e4e2:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   2e4e4:	68fb      	ldr	r3, [r7, #12]
   2e4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2e4e8:	2b01      	cmp	r3, #1
   2e4ea:	d003      	beq.n	2e4f4 <http_client_send_request+0x1cc>
   2e4ec:	d316      	bcc.n	2e51c <http_client_send_request+0x1f4>
   2e4ee:	2b02      	cmp	r3, #2
   2e4f0:	d004      	beq.n	2e4fc <http_client_send_request+0x1d4>
   2e4f2:	e074      	b.n	2e5de <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   2e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4f6:	2b00      	cmp	r3, #0
   2e4f8:	d100      	bne.n	2e4fc <http_client_send_request+0x1d4>
   2e4fa:	e073      	b.n	2e5e4 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   2e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e4fe:	2b00      	cmp	r3, #0
   2e500:	d107      	bne.n	2e512 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   2e502:	68fb      	ldr	r3, [r7, #12]
   2e504:	2203      	movs	r2, #3
   2e506:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   2e508:	68fb      	ldr	r3, [r7, #12]
   2e50a:	0018      	movs	r0, r3
   2e50c:	4b41      	ldr	r3, [pc, #260]	; (2e614 <http_client_send_request+0x2ec>)
   2e50e:	4798      	blx	r3
			break;
   2e510:	e069      	b.n	2e5e6 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   2e512:	68fb      	ldr	r3, [r7, #12]
   2e514:	2100      	movs	r1, #0
   2e516:	0018      	movs	r0, r3
   2e518:	4b3f      	ldr	r3, [pc, #252]	; (2e618 <http_client_send_request+0x2f0>)
   2e51a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   2e51c:	68fb      	ldr	r3, [r7, #12]
   2e51e:	2252      	movs	r2, #82	; 0x52
   2e520:	5c9b      	ldrb	r3, [r3, r2]
   2e522:	2b00      	cmp	r3, #0
   2e524:	d007      	beq.n	2e536 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   2e526:	2337      	movs	r3, #55	; 0x37
   2e528:	18fb      	adds	r3, r7, r3
   2e52a:	2237      	movs	r2, #55	; 0x37
   2e52c:	18ba      	adds	r2, r7, r2
   2e52e:	7812      	ldrb	r2, [r2, #0]
   2e530:	2101      	movs	r1, #1
   2e532:	430a      	orrs	r2, r1
   2e534:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   2e536:	2337      	movs	r3, #55	; 0x37
   2e538:	18fb      	adds	r3, r7, r3
   2e53a:	781b      	ldrb	r3, [r3, #0]
   2e53c:	001a      	movs	r2, r3
   2e53e:	2101      	movs	r1, #1
   2e540:	2002      	movs	r0, #2
   2e542:	4b36      	ldr	r3, [pc, #216]	; (2e61c <http_client_send_request+0x2f4>)
   2e544:	4798      	blx	r3
   2e546:	0003      	movs	r3, r0
   2e548:	001a      	movs	r2, r3
   2e54a:	68fb      	ldr	r3, [r7, #12]
   2e54c:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   2e54e:	68fb      	ldr	r3, [r7, #12]
   2e550:	781b      	ldrb	r3, [r3, #0]
   2e552:	b25b      	sxtb	r3, r3
   2e554:	2b00      	cmp	r3, #0
   2e556:	db3f      	blt.n	2e5d8 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   2e558:	68fb      	ldr	r3, [r7, #12]
   2e55a:	781b      	ldrb	r3, [r3, #0]
   2e55c:	b25b      	sxtb	r3, r3
   2e55e:	001a      	movs	r2, r3
   2e560:	4b2f      	ldr	r3, [pc, #188]	; (2e620 <http_client_send_request+0x2f8>)
   2e562:	0092      	lsls	r2, r2, #2
   2e564:	68f9      	ldr	r1, [r7, #12]
   2e566:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   2e568:	68fb      	ldr	r3, [r7, #12]
   2e56a:	3301      	adds	r3, #1
   2e56c:	0018      	movs	r0, r3
   2e56e:	4b2d      	ldr	r3, [pc, #180]	; (2e624 <http_client_send_request+0x2fc>)
   2e570:	4798      	blx	r3
   2e572:	1e03      	subs	r3, r0, #0
   2e574:	d027      	beq.n	2e5c6 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   2e576:	2314      	movs	r3, #20
   2e578:	18fb      	adds	r3, r7, r3
   2e57a:	2202      	movs	r2, #2
   2e57c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2e57e:	68fb      	ldr	r3, [r7, #12]
   2e580:	2250      	movs	r2, #80	; 0x50
   2e582:	5a9b      	ldrh	r3, [r3, r2]
   2e584:	021b      	lsls	r3, r3, #8
   2e586:	b21a      	sxth	r2, r3
   2e588:	68fb      	ldr	r3, [r7, #12]
   2e58a:	2150      	movs	r1, #80	; 0x50
   2e58c:	5a5b      	ldrh	r3, [r3, r1]
   2e58e:	0a1b      	lsrs	r3, r3, #8
   2e590:	b29b      	uxth	r3, r3
   2e592:	b21b      	sxth	r3, r3
   2e594:	4313      	orrs	r3, r2
   2e596:	b21b      	sxth	r3, r3
   2e598:	b29a      	uxth	r2, r3
   2e59a:	2314      	movs	r3, #20
   2e59c:	18fb      	adds	r3, r7, r3
   2e59e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   2e5a0:	68fb      	ldr	r3, [r7, #12]
   2e5a2:	3301      	adds	r3, #1
   2e5a4:	0018      	movs	r0, r3
   2e5a6:	4b20      	ldr	r3, [pc, #128]	; (2e628 <http_client_send_request+0x300>)
   2e5a8:	4798      	blx	r3
   2e5aa:	0002      	movs	r2, r0
   2e5ac:	2314      	movs	r3, #20
   2e5ae:	18fb      	adds	r3, r7, r3
   2e5b0:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2e5b2:	68fb      	ldr	r3, [r7, #12]
   2e5b4:	781b      	ldrb	r3, [r3, #0]
   2e5b6:	b25b      	sxtb	r3, r3
   2e5b8:	2214      	movs	r2, #20
   2e5ba:	18b9      	adds	r1, r7, r2
   2e5bc:	2210      	movs	r2, #16
   2e5be:	0018      	movs	r0, r3
   2e5c0:	4b1a      	ldr	r3, [pc, #104]	; (2e62c <http_client_send_request+0x304>)
   2e5c2:	4798      	blx	r3
   2e5c4:	e004      	b.n	2e5d0 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   2e5c6:	68fb      	ldr	r3, [r7, #12]
   2e5c8:	3301      	adds	r3, #1
   2e5ca:	0018      	movs	r0, r3
   2e5cc:	4b18      	ldr	r3, [pc, #96]	; (2e630 <http_client_send_request+0x308>)
   2e5ce:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2e5d0:	68fb      	ldr	r3, [r7, #12]
   2e5d2:	2201      	movs	r2, #1
   2e5d4:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   2e5d6:	e006      	b.n	2e5e6 <http_client_send_request+0x2be>
			return -ENOSPC;
   2e5d8:	231c      	movs	r3, #28
   2e5da:	425b      	negs	r3, r3
   2e5dc:	e004      	b.n	2e5e8 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   2e5de:	230b      	movs	r3, #11
   2e5e0:	425b      	negs	r3, r3
   2e5e2:	e001      	b.n	2e5e8 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   2e5e4:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   2e5e6:	2300      	movs	r3, #0
}
   2e5e8:	0018      	movs	r0, r3
   2e5ea:	46bd      	mov	sp, r7
   2e5ec:	b00e      	add	sp, #56	; 0x38
   2e5ee:	bdb0      	pop	{r4, r5, r7, pc}
   2e5f0:	00037f60 	.word	0x00037f60
   2e5f4:	00032cb5 	.word	0x00032cb5
   2e5f8:	00037f68 	.word	0x00037f68
   2e5fc:	00032c5f 	.word	0x00032c5f
   2e600:	0003285d 	.word	0x0003285d
   2e604:	00032c25 	.word	0x00032c25
   2e608:	00032c13 	.word	0x00032c13
   2e60c:	00032871 	.word	0x00032871
   2e610:	000328a7 	.word	0x000328a7
   2e614:	0002e789 	.word	0x0002e789
   2e618:	0002e635 	.word	0x0002e635
   2e61c:	00021ec1 	.word	0x00021ec1
   2e620:	20004288 	.word	0x20004288
   2e624:	0002e291 	.word	0x0002e291
   2e628:	0002260d 	.word	0x0002260d
   2e62c:	000220d5 	.word	0x000220d5
   2e630:	00022715 	.word	0x00022715

0002e634 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   2e634:	b580      	push	{r7, lr}
   2e636:	b086      	sub	sp, #24
   2e638:	af00      	add	r7, sp, #0
   2e63a:	6078      	str	r0, [r7, #4]
   2e63c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   2e63e:	687b      	ldr	r3, [r7, #4]
   2e640:	22c0      	movs	r2, #192	; 0xc0
   2e642:	589b      	ldr	r3, [r3, r2]
   2e644:	2b00      	cmp	r3, #0
   2e646:	d007      	beq.n	2e658 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   2e648:	687b      	ldr	r3, [r7, #4]
   2e64a:	22c0      	movs	r2, #192	; 0xc0
   2e64c:	589b      	ldr	r3, [r3, r2]
   2e64e:	687a      	ldr	r2, [r7, #4]
   2e650:	21c4      	movs	r1, #196	; 0xc4
   2e652:	5852      	ldr	r2, [r2, r1]
   2e654:	0010      	movs	r0, r2
   2e656:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   2e658:	687b      	ldr	r3, [r7, #4]
   2e65a:	33b0      	adds	r3, #176	; 0xb0
   2e65c:	2218      	movs	r2, #24
   2e65e:	2100      	movs	r1, #0
   2e660:	0018      	movs	r0, r3
   2e662:	4b24      	ldr	r3, [pc, #144]	; (2e6f4 <_http_client_clear_conn+0xc0>)
   2e664:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   2e666:	687b      	ldr	r3, [r7, #4]
   2e668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2e66a:	2b00      	cmp	r3, #0
   2e66c:	d005      	beq.n	2e67a <_http_client_clear_conn+0x46>
		close(module->sock);
   2e66e:	687b      	ldr	r3, [r7, #4]
   2e670:	781b      	ldrb	r3, [r3, #0]
   2e672:	b25b      	sxtb	r3, r3
   2e674:	0018      	movs	r0, r3
   2e676:	4b20      	ldr	r3, [pc, #128]	; (2e6f8 <_http_client_clear_conn+0xc4>)
   2e678:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   2e67a:	687b      	ldr	r3, [r7, #4]
   2e67c:	781b      	ldrb	r3, [r3, #0]
   2e67e:	b25b      	sxtb	r3, r3
   2e680:	001a      	movs	r2, r3
   2e682:	4b1e      	ldr	r3, [pc, #120]	; (2e6fc <_http_client_clear_conn+0xc8>)
   2e684:	0092      	lsls	r2, r2, #2
   2e686:	2100      	movs	r1, #0
   2e688:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   2e68a:	687b      	ldr	r3, [r7, #4]
   2e68c:	336c      	adds	r3, #108	; 0x6c
   2e68e:	226c      	movs	r2, #108	; 0x6c
   2e690:	2100      	movs	r1, #0
   2e692:	0018      	movs	r0, r3
   2e694:	4b17      	ldr	r3, [pc, #92]	; (2e6f4 <_http_client_clear_conn+0xc0>)
   2e696:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   2e698:	687b      	ldr	r3, [r7, #4]
   2e69a:	33d8      	adds	r3, #216	; 0xd8
   2e69c:	2210      	movs	r2, #16
   2e69e:	2100      	movs	r1, #0
   2e6a0:	0018      	movs	r0, r3
   2e6a2:	4b14      	ldr	r3, [pc, #80]	; (2e6f4 <_http_client_clear_conn+0xc0>)
   2e6a4:	4798      	blx	r3
	module->req.state = STATE_INIT;
   2e6a6:	687b      	ldr	r3, [r7, #4]
   2e6a8:	2200      	movs	r2, #0
   2e6aa:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2e6ac:	687b      	ldr	r3, [r7, #4]
   2e6ae:	22d8      	movs	r2, #216	; 0xd8
   2e6b0:	2100      	movs	r1, #0
   2e6b2:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   2e6b4:	687b      	ldr	r3, [r7, #4]
   2e6b6:	2241      	movs	r2, #65	; 0x41
   2e6b8:	5c99      	ldrb	r1, [r3, r2]
   2e6ba:	2001      	movs	r0, #1
   2e6bc:	4381      	bics	r1, r0
   2e6be:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   2e6c0:	687b      	ldr	r3, [r7, #4]
   2e6c2:	2241      	movs	r2, #65	; 0x41
   2e6c4:	5c99      	ldrb	r1, [r3, r2]
   2e6c6:	2002      	movs	r0, #2
   2e6c8:	4381      	bics	r1, r0
   2e6ca:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   2e6cc:	230c      	movs	r3, #12
   2e6ce:	18fb      	adds	r3, r7, r3
   2e6d0:	683a      	ldr	r2, [r7, #0]
   2e6d2:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   2e6d4:	687b      	ldr	r3, [r7, #4]
   2e6d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e6d8:	2b00      	cmp	r3, #0
   2e6da:	d006      	beq.n	2e6ea <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   2e6dc:	687b      	ldr	r3, [r7, #4]
   2e6de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e6e0:	220c      	movs	r2, #12
   2e6e2:	18ba      	adds	r2, r7, r2
   2e6e4:	6878      	ldr	r0, [r7, #4]
   2e6e6:	2104      	movs	r1, #4
   2e6e8:	4798      	blx	r3
	}
}
   2e6ea:	46c0      	nop			; (mov r8, r8)
   2e6ec:	46bd      	mov	sp, r7
   2e6ee:	b006      	add	sp, #24
   2e6f0:	bd80      	pop	{r7, pc}
   2e6f2:	46c0      	nop			; (mov r8, r8)
   2e6f4:	000328a7 	.word	0x000328a7
   2e6f8:	000224cd 	.word	0x000224cd
   2e6fc:	20004288 	.word	0x20004288

0002e700 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   2e700:	b590      	push	{r4, r7, lr}
   2e702:	b087      	sub	sp, #28
   2e704:	af00      	add	r7, sp, #0
   2e706:	60f8      	str	r0, [r7, #12]
   2e708:	60b9      	str	r1, [r7, #8]
   2e70a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   2e70c:	68fb      	ldr	r3, [r7, #12]
   2e70e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   2e710:	697b      	ldr	r3, [r7, #20]
   2e712:	2241      	movs	r2, #65	; 0x41
   2e714:	5c99      	ldrb	r1, [r3, r2]
   2e716:	2001      	movs	r0, #1
   2e718:	4301      	orrs	r1, r0
   2e71a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   2e71c:	697b      	ldr	r3, [r7, #20]
   2e71e:	2000      	movs	r0, #0
   2e720:	5618      	ldrsb	r0, [r3, r0]
   2e722:	687b      	ldr	r3, [r7, #4]
   2e724:	b29a      	uxth	r2, r3
   2e726:	68b9      	ldr	r1, [r7, #8]
   2e728:	2300      	movs	r3, #0
   2e72a:	4c14      	ldr	r4, [pc, #80]	; (2e77c <_http_client_send_wait+0x7c>)
   2e72c:	47a0      	blx	r4
   2e72e:	0003      	movs	r3, r0
   2e730:	613b      	str	r3, [r7, #16]
   2e732:	693b      	ldr	r3, [r7, #16]
   2e734:	2b00      	cmp	r3, #0
   2e736:	da0f      	bge.n	2e758 <_http_client_send_wait+0x58>
		module->sending = 0;
   2e738:	697b      	ldr	r3, [r7, #20]
   2e73a:	2241      	movs	r2, #65	; 0x41
   2e73c:	5c99      	ldrb	r1, [r3, r2]
   2e73e:	2001      	movs	r0, #1
   2e740:	4381      	bics	r1, r0
   2e742:	5499      	strb	r1, [r3, r2]
		return result;
   2e744:	693b      	ldr	r3, [r7, #16]
   2e746:	e014      	b.n	2e772 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   2e748:	2000      	movs	r0, #0
   2e74a:	4b0d      	ldr	r3, [pc, #52]	; (2e780 <_http_client_send_wait+0x80>)
   2e74c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   2e74e:	697b      	ldr	r3, [r7, #20]
   2e750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2e752:	0018      	movs	r0, r3
   2e754:	4b0b      	ldr	r3, [pc, #44]	; (2e784 <_http_client_send_wait+0x84>)
   2e756:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   2e758:	697b      	ldr	r3, [r7, #20]
   2e75a:	2241      	movs	r2, #65	; 0x41
   2e75c:	5c9b      	ldrb	r3, [r3, r2]
   2e75e:	2201      	movs	r2, #1
   2e760:	4013      	ands	r3, r2
   2e762:	b2db      	uxtb	r3, r3
   2e764:	2b00      	cmp	r3, #0
   2e766:	d003      	beq.n	2e770 <_http_client_send_wait+0x70>
   2e768:	697b      	ldr	r3, [r7, #20]
   2e76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2e76c:	2b02      	cmp	r3, #2
   2e76e:	d8eb      	bhi.n	2e748 <_http_client_send_wait+0x48>
	}

	return 0;
   2e770:	2300      	movs	r3, #0
}
   2e772:	0018      	movs	r0, r3
   2e774:	46bd      	mov	sp, r7
   2e776:	b007      	add	sp, #28
   2e778:	bd90      	pop	{r4, r7, pc}
   2e77a:	46c0      	nop			; (mov r8, r8)
   2e77c:	000221e9 	.word	0x000221e9
   2e780:	0001e895 	.word	0x0001e895
   2e784:	0002fa0d 	.word	0x0002fa0d

0002e788 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   2e788:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e78a:	46c6      	mov	lr, r8
   2e78c:	b500      	push	{lr}
   2e78e:	b0a0      	sub	sp, #128	; 0x80
   2e790:	af02      	add	r7, sp, #8
   2e792:	61f8      	str	r0, [r7, #28]
   2e794:	4668      	mov	r0, sp
   2e796:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   2e798:	2318      	movs	r3, #24
   2e79a:	2218      	movs	r2, #24
   2e79c:	18ba      	adds	r2, r7, r2
   2e79e:	18d0      	adds	r0, r2, r3
   2e7a0:	4bbd      	ldr	r3, [pc, #756]	; (2ea98 <_http_client_request+0x310>)
   2e7a2:	469c      	mov	ip, r3
   2e7a4:	4663      	mov	r3, ip
   2e7a6:	cb16      	ldmia	r3!, {r1, r2, r4}
   2e7a8:	c016      	stmia	r0!, {r1, r2, r4}
   2e7aa:	469c      	mov	ip, r3
   2e7ac:	4663      	mov	r3, ip
   2e7ae:	681b      	ldr	r3, [r3, #0]
   2e7b0:	469c      	mov	ip, r3
   2e7b2:	4663      	mov	r3, ip
   2e7b4:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   2e7b6:	69f8      	ldr	r0, [r7, #28]
   2e7b8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2e7ba:	4684      	mov	ip, r0
   2e7bc:	2301      	movs	r3, #1
   2e7be:	425b      	negs	r3, r3
   2e7c0:	4698      	mov	r8, r3
   2e7c2:	44c4      	add	ip, r8
   2e7c4:	4663      	mov	r3, ip
   2e7c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   2e7c8:	6038      	str	r0, [r7, #0]
   2e7ca:	2300      	movs	r3, #0
   2e7cc:	607b      	str	r3, [r7, #4]
   2e7ce:	6839      	ldr	r1, [r7, #0]
   2e7d0:	687a      	ldr	r2, [r7, #4]
   2e7d2:	000b      	movs	r3, r1
   2e7d4:	0f5b      	lsrs	r3, r3, #29
   2e7d6:	469c      	mov	ip, r3
   2e7d8:	0013      	movs	r3, r2
   2e7da:	00db      	lsls	r3, r3, #3
   2e7dc:	617b      	str	r3, [r7, #20]
   2e7de:	4663      	mov	r3, ip
   2e7e0:	697c      	ldr	r4, [r7, #20]
   2e7e2:	431c      	orrs	r4, r3
   2e7e4:	617c      	str	r4, [r7, #20]
   2e7e6:	000b      	movs	r3, r1
   2e7e8:	00db      	lsls	r3, r3, #3
   2e7ea:	613b      	str	r3, [r7, #16]
   2e7ec:	0005      	movs	r5, r0
   2e7ee:	2200      	movs	r2, #0
   2e7f0:	0016      	movs	r6, r2
   2e7f2:	0f6a      	lsrs	r2, r5, #29
   2e7f4:	00f3      	lsls	r3, r6, #3
   2e7f6:	60fb      	str	r3, [r7, #12]
   2e7f8:	68fb      	ldr	r3, [r7, #12]
   2e7fa:	4313      	orrs	r3, r2
   2e7fc:	60fb      	str	r3, [r7, #12]
   2e7fe:	00eb      	lsls	r3, r5, #3
   2e800:	60bb      	str	r3, [r7, #8]
   2e802:	1dc3      	adds	r3, r0, #7
   2e804:	08db      	lsrs	r3, r3, #3
   2e806:	00db      	lsls	r3, r3, #3
   2e808:	466a      	mov	r2, sp
   2e80a:	1ad3      	subs	r3, r2, r3
   2e80c:	469d      	mov	sp, r3
   2e80e:	ab02      	add	r3, sp, #8
   2e810:	3300      	adds	r3, #0
   2e812:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   2e814:	69fb      	ldr	r3, [r7, #28]
   2e816:	2b00      	cmp	r3, #0
   2e818:	d100      	bne.n	2e81c <_http_client_request+0x94>
   2e81a:	e346      	b.n	2eeaa <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   2e81c:	69fb      	ldr	r3, [r7, #28]
   2e81e:	2241      	movs	r2, #65	; 0x41
   2e820:	5c9b      	ldrb	r3, [r3, r2]
   2e822:	2201      	movs	r2, #1
   2e824:	4013      	ands	r3, r2
   2e826:	b2db      	uxtb	r3, r3
   2e828:	2b00      	cmp	r3, #0
   2e82a:	d000      	beq.n	2e82e <_http_client_request+0xa6>
   2e82c:	e33f      	b.n	2eeae <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   2e82e:	69fb      	ldr	r3, [r7, #28]
   2e830:	33b0      	adds	r3, #176	; 0xb0
   2e832:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   2e834:	69fb      	ldr	r3, [r7, #28]
   2e836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2e838:	2b03      	cmp	r3, #3
   2e83a:	d003      	beq.n	2e844 <_http_client_request+0xbc>
   2e83c:	2b04      	cmp	r3, #4
   2e83e:	d100      	bne.n	2e842 <_http_client_request+0xba>
   2e840:	e1b3      	b.n	2ebaa <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   2e842:	e32f      	b.n	2eea4 <_http_client_request+0x71c>
		module->req.content_length = 0;
   2e844:	69fb      	ldr	r3, [r7, #28]
   2e846:	22cc      	movs	r2, #204	; 0xcc
   2e848:	2100      	movs	r1, #0
   2e84a:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   2e84c:	69fb      	ldr	r3, [r7, #28]
   2e84e:	22d0      	movs	r2, #208	; 0xd0
   2e850:	2100      	movs	r1, #0
   2e852:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   2e854:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2e856:	69fb      	ldr	r3, [r7, #28]
   2e858:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2e85a:	4c90      	ldr	r4, [pc, #576]	; (2ea9c <_http_client_request+0x314>)
   2e85c:	2334      	movs	r3, #52	; 0x34
   2e85e:	2018      	movs	r0, #24
   2e860:	1838      	adds	r0, r7, r0
   2e862:	18c0      	adds	r0, r0, r3
   2e864:	69fb      	ldr	r3, [r7, #28]
   2e866:	9300      	str	r3, [sp, #0]
   2e868:	0023      	movs	r3, r4
   2e86a:	4c8d      	ldr	r4, [pc, #564]	; (2eaa0 <_http_client_request+0x318>)
   2e86c:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   2e86e:	69fb      	ldr	r3, [r7, #28]
   2e870:	22c8      	movs	r2, #200	; 0xc8
   2e872:	5c9b      	ldrb	r3, [r3, r2]
   2e874:	2b01      	cmp	r3, #1
   2e876:	d10a      	bne.n	2e88e <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   2e878:	498a      	ldr	r1, [pc, #552]	; (2eaa4 <_http_client_request+0x31c>)
   2e87a:	2334      	movs	r3, #52	; 0x34
   2e87c:	2218      	movs	r2, #24
   2e87e:	4694      	mov	ip, r2
   2e880:	44bc      	add	ip, r7
   2e882:	4463      	add	r3, ip
   2e884:	2204      	movs	r2, #4
   2e886:	0018      	movs	r0, r3
   2e888:	4b87      	ldr	r3, [pc, #540]	; (2eaa8 <_http_client_request+0x320>)
   2e88a:	4798      	blx	r3
   2e88c:	e04e      	b.n	2e92c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   2e88e:	69fb      	ldr	r3, [r7, #28]
   2e890:	22c8      	movs	r2, #200	; 0xc8
   2e892:	5c9b      	ldrb	r3, [r3, r2]
   2e894:	2b02      	cmp	r3, #2
   2e896:	d10a      	bne.n	2e8ae <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   2e898:	4984      	ldr	r1, [pc, #528]	; (2eaac <_http_client_request+0x324>)
   2e89a:	2334      	movs	r3, #52	; 0x34
   2e89c:	2218      	movs	r2, #24
   2e89e:	4694      	mov	ip, r2
   2e8a0:	44bc      	add	ip, r7
   2e8a2:	4463      	add	r3, ip
   2e8a4:	2205      	movs	r2, #5
   2e8a6:	0018      	movs	r0, r3
   2e8a8:	4b7f      	ldr	r3, [pc, #508]	; (2eaa8 <_http_client_request+0x320>)
   2e8aa:	4798      	blx	r3
   2e8ac:	e03e      	b.n	2e92c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   2e8ae:	69fb      	ldr	r3, [r7, #28]
   2e8b0:	22c8      	movs	r2, #200	; 0xc8
   2e8b2:	5c9b      	ldrb	r3, [r3, r2]
   2e8b4:	2b03      	cmp	r3, #3
   2e8b6:	d10a      	bne.n	2e8ce <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   2e8b8:	497d      	ldr	r1, [pc, #500]	; (2eab0 <_http_client_request+0x328>)
   2e8ba:	2334      	movs	r3, #52	; 0x34
   2e8bc:	2218      	movs	r2, #24
   2e8be:	4694      	mov	ip, r2
   2e8c0:	44bc      	add	ip, r7
   2e8c2:	4463      	add	r3, ip
   2e8c4:	2207      	movs	r2, #7
   2e8c6:	0018      	movs	r0, r3
   2e8c8:	4b77      	ldr	r3, [pc, #476]	; (2eaa8 <_http_client_request+0x320>)
   2e8ca:	4798      	blx	r3
   2e8cc:	e02e      	b.n	2e92c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   2e8ce:	69fb      	ldr	r3, [r7, #28]
   2e8d0:	22c8      	movs	r2, #200	; 0xc8
   2e8d2:	5c9b      	ldrb	r3, [r3, r2]
   2e8d4:	2b04      	cmp	r3, #4
   2e8d6:	d10a      	bne.n	2e8ee <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   2e8d8:	4976      	ldr	r1, [pc, #472]	; (2eab4 <_http_client_request+0x32c>)
   2e8da:	2334      	movs	r3, #52	; 0x34
   2e8dc:	2218      	movs	r2, #24
   2e8de:	4694      	mov	ip, r2
   2e8e0:	44bc      	add	ip, r7
   2e8e2:	4463      	add	r3, ip
   2e8e4:	2204      	movs	r2, #4
   2e8e6:	0018      	movs	r0, r3
   2e8e8:	4b6f      	ldr	r3, [pc, #444]	; (2eaa8 <_http_client_request+0x320>)
   2e8ea:	4798      	blx	r3
   2e8ec:	e01e      	b.n	2e92c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   2e8ee:	69fb      	ldr	r3, [r7, #28]
   2e8f0:	22c8      	movs	r2, #200	; 0xc8
   2e8f2:	5c9b      	ldrb	r3, [r3, r2]
   2e8f4:	2b05      	cmp	r3, #5
   2e8f6:	d10a      	bne.n	2e90e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   2e8f8:	496f      	ldr	r1, [pc, #444]	; (2eab8 <_http_client_request+0x330>)
   2e8fa:	2334      	movs	r3, #52	; 0x34
   2e8fc:	2218      	movs	r2, #24
   2e8fe:	4694      	mov	ip, r2
   2e900:	44bc      	add	ip, r7
   2e902:	4463      	add	r3, ip
   2e904:	2208      	movs	r2, #8
   2e906:	0018      	movs	r0, r3
   2e908:	4b67      	ldr	r3, [pc, #412]	; (2eaa8 <_http_client_request+0x320>)
   2e90a:	4798      	blx	r3
   2e90c:	e00e      	b.n	2e92c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   2e90e:	69fb      	ldr	r3, [r7, #28]
   2e910:	22c8      	movs	r2, #200	; 0xc8
   2e912:	5c9b      	ldrb	r3, [r3, r2]
   2e914:	2b06      	cmp	r3, #6
   2e916:	d109      	bne.n	2e92c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   2e918:	4968      	ldr	r1, [pc, #416]	; (2eabc <_http_client_request+0x334>)
   2e91a:	2334      	movs	r3, #52	; 0x34
   2e91c:	2218      	movs	r2, #24
   2e91e:	4694      	mov	ip, r2
   2e920:	44bc      	add	ip, r7
   2e922:	4463      	add	r3, ip
   2e924:	2205      	movs	r2, #5
   2e926:	0018      	movs	r0, r3
   2e928:	4b5f      	ldr	r3, [pc, #380]	; (2eaa8 <_http_client_request+0x320>)
   2e92a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   2e92c:	69fb      	ldr	r3, [r7, #28]
   2e92e:	3370      	adds	r3, #112	; 0x70
   2e930:	001c      	movs	r4, r3
   2e932:	69fb      	ldr	r3, [r7, #28]
   2e934:	3370      	adds	r3, #112	; 0x70
   2e936:	0018      	movs	r0, r3
   2e938:	4b61      	ldr	r3, [pc, #388]	; (2eac0 <_http_client_request+0x338>)
   2e93a:	4798      	blx	r3
   2e93c:	0002      	movs	r2, r0
   2e93e:	2334      	movs	r3, #52	; 0x34
   2e940:	2118      	movs	r1, #24
   2e942:	468c      	mov	ip, r1
   2e944:	44bc      	add	ip, r7
   2e946:	4463      	add	r3, ip
   2e948:	0021      	movs	r1, r4
   2e94a:	0018      	movs	r0, r3
   2e94c:	4b56      	ldr	r3, [pc, #344]	; (2eaa8 <_http_client_request+0x320>)
   2e94e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   2e950:	495c      	ldr	r1, [pc, #368]	; (2eac4 <_http_client_request+0x33c>)
   2e952:	2334      	movs	r3, #52	; 0x34
   2e954:	2218      	movs	r2, #24
   2e956:	4694      	mov	ip, r2
   2e958:	44bc      	add	ip, r7
   2e95a:	4463      	add	r3, ip
   2e95c:	220b      	movs	r2, #11
   2e95e:	0018      	movs	r0, r3
   2e960:	4b51      	ldr	r3, [pc, #324]	; (2eaa8 <_http_client_request+0x320>)
   2e962:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   2e964:	4958      	ldr	r1, [pc, #352]	; (2eac8 <_http_client_request+0x340>)
   2e966:	2334      	movs	r3, #52	; 0x34
   2e968:	2218      	movs	r2, #24
   2e96a:	4694      	mov	ip, r2
   2e96c:	44bc      	add	ip, r7
   2e96e:	4463      	add	r3, ip
   2e970:	220c      	movs	r2, #12
   2e972:	0018      	movs	r0, r3
   2e974:	4b4c      	ldr	r3, [pc, #304]	; (2eaa8 <_http_client_request+0x320>)
   2e976:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   2e978:	69fb      	ldr	r3, [r7, #28]
   2e97a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   2e97c:	69fb      	ldr	r3, [r7, #28]
   2e97e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2e980:	0018      	movs	r0, r3
   2e982:	4b4f      	ldr	r3, [pc, #316]	; (2eac0 <_http_client_request+0x338>)
   2e984:	4798      	blx	r3
   2e986:	0002      	movs	r2, r0
   2e988:	2334      	movs	r3, #52	; 0x34
   2e98a:	2118      	movs	r1, #24
   2e98c:	468c      	mov	ip, r1
   2e98e:	44bc      	add	ip, r7
   2e990:	4463      	add	r3, ip
   2e992:	0021      	movs	r1, r4
   2e994:	0018      	movs	r0, r3
   2e996:	4b44      	ldr	r3, [pc, #272]	; (2eaa8 <_http_client_request+0x320>)
   2e998:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2e99a:	494c      	ldr	r1, [pc, #304]	; (2eacc <_http_client_request+0x344>)
   2e99c:	2334      	movs	r3, #52	; 0x34
   2e99e:	2218      	movs	r2, #24
   2e9a0:	4694      	mov	ip, r2
   2e9a2:	44bc      	add	ip, r7
   2e9a4:	4463      	add	r3, ip
   2e9a6:	2202      	movs	r2, #2
   2e9a8:	0018      	movs	r0, r3
   2e9aa:	4b3f      	ldr	r3, [pc, #252]	; (2eaa8 <_http_client_request+0x320>)
   2e9ac:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   2e9ae:	4948      	ldr	r1, [pc, #288]	; (2ead0 <_http_client_request+0x348>)
   2e9b0:	2334      	movs	r3, #52	; 0x34
   2e9b2:	2218      	movs	r2, #24
   2e9b4:	4694      	mov	ip, r2
   2e9b6:	44bc      	add	ip, r7
   2e9b8:	4463      	add	r3, ip
   2e9ba:	2206      	movs	r2, #6
   2e9bc:	0018      	movs	r0, r3
   2e9be:	4b3a      	ldr	r3, [pc, #232]	; (2eaa8 <_http_client_request+0x320>)
   2e9c0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   2e9c2:	69fb      	ldr	r3, [r7, #28]
   2e9c4:	1c5c      	adds	r4, r3, #1
   2e9c6:	69fb      	ldr	r3, [r7, #28]
   2e9c8:	3301      	adds	r3, #1
   2e9ca:	0018      	movs	r0, r3
   2e9cc:	4b3c      	ldr	r3, [pc, #240]	; (2eac0 <_http_client_request+0x338>)
   2e9ce:	4798      	blx	r3
   2e9d0:	0002      	movs	r2, r0
   2e9d2:	2334      	movs	r3, #52	; 0x34
   2e9d4:	2118      	movs	r1, #24
   2e9d6:	468c      	mov	ip, r1
   2e9d8:	44bc      	add	ip, r7
   2e9da:	4463      	add	r3, ip
   2e9dc:	0021      	movs	r1, r4
   2e9de:	0018      	movs	r0, r3
   2e9e0:	4b31      	ldr	r3, [pc, #196]	; (2eaa8 <_http_client_request+0x320>)
   2e9e2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2e9e4:	4939      	ldr	r1, [pc, #228]	; (2eacc <_http_client_request+0x344>)
   2e9e6:	2334      	movs	r3, #52	; 0x34
   2e9e8:	2218      	movs	r2, #24
   2e9ea:	4694      	mov	ip, r2
   2e9ec:	44bc      	add	ip, r7
   2e9ee:	4463      	add	r3, ip
   2e9f0:	2202      	movs	r2, #2
   2e9f2:	0018      	movs	r0, r3
   2e9f4:	4b2c      	ldr	r3, [pc, #176]	; (2eaa8 <_http_client_request+0x320>)
   2e9f6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   2e9f8:	4936      	ldr	r1, [pc, #216]	; (2ead4 <_http_client_request+0x34c>)
   2e9fa:	2334      	movs	r3, #52	; 0x34
   2e9fc:	2218      	movs	r2, #24
   2e9fe:	4694      	mov	ip, r2
   2ea00:	44bc      	add	ip, r7
   2ea02:	4463      	add	r3, ip
   2ea04:	2218      	movs	r2, #24
   2ea06:	0018      	movs	r0, r3
   2ea08:	4b27      	ldr	r3, [pc, #156]	; (2eaa8 <_http_client_request+0x320>)
   2ea0a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   2ea0c:	4932      	ldr	r1, [pc, #200]	; (2ead8 <_http_client_request+0x350>)
   2ea0e:	2334      	movs	r3, #52	; 0x34
   2ea10:	2218      	movs	r2, #24
   2ea12:	4694      	mov	ip, r2
   2ea14:	44bc      	add	ip, r7
   2ea16:	4463      	add	r3, ip
   2ea18:	2213      	movs	r2, #19
   2ea1a:	0018      	movs	r0, r3
   2ea1c:	4b22      	ldr	r3, [pc, #136]	; (2eaa8 <_http_client_request+0x320>)
   2ea1e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   2ea20:	492e      	ldr	r1, [pc, #184]	; (2eadc <_http_client_request+0x354>)
   2ea22:	2334      	movs	r3, #52	; 0x34
   2ea24:	2218      	movs	r2, #24
   2ea26:	4694      	mov	ip, r2
   2ea28:	44bc      	add	ip, r7
   2ea2a:	4463      	add	r3, ip
   2ea2c:	2217      	movs	r2, #23
   2ea2e:	0018      	movs	r0, r3
   2ea30:	4b1d      	ldr	r3, [pc, #116]	; (2eaa8 <_http_client_request+0x320>)
   2ea32:	4798      	blx	r3
		if (entity->read != NULL) {
   2ea34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ea36:	68db      	ldr	r3, [r3, #12]
   2ea38:	2b00      	cmp	r3, #0
   2ea3a:	d100      	bne.n	2ea3e <_http_client_request+0x2b6>
   2ea3c:	e088      	b.n	2eb50 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   2ea3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ea40:	781b      	ldrb	r3, [r3, #0]
   2ea42:	2b00      	cmp	r3, #0
   2ea44:	d00f      	beq.n	2ea66 <_http_client_request+0x2de>
				module->req.content_length = -1;
   2ea46:	69fb      	ldr	r3, [r7, #28]
   2ea48:	21cc      	movs	r1, #204	; 0xcc
   2ea4a:	2201      	movs	r2, #1
   2ea4c:	4252      	negs	r2, r2
   2ea4e:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   2ea50:	4923      	ldr	r1, [pc, #140]	; (2eae0 <_http_client_request+0x358>)
   2ea52:	2334      	movs	r3, #52	; 0x34
   2ea54:	2218      	movs	r2, #24
   2ea56:	4694      	mov	ip, r2
   2ea58:	44bc      	add	ip, r7
   2ea5a:	4463      	add	r3, ip
   2ea5c:	221c      	movs	r2, #28
   2ea5e:	0018      	movs	r0, r3
   2ea60:	4b11      	ldr	r3, [pc, #68]	; (2eaa8 <_http_client_request+0x320>)
   2ea62:	4798      	blx	r3
   2ea64:	e074      	b.n	2eb50 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   2ea66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ea68:	689b      	ldr	r3, [r3, #8]
   2ea6a:	2b00      	cmp	r3, #0
   2ea6c:	d070      	beq.n	2eb50 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   2ea6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ea70:	689a      	ldr	r2, [r3, #8]
   2ea72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ea74:	695b      	ldr	r3, [r3, #20]
   2ea76:	0018      	movs	r0, r3
   2ea78:	4790      	blx	r2
   2ea7a:	0001      	movs	r1, r0
   2ea7c:	69fb      	ldr	r3, [r7, #28]
   2ea7e:	22cc      	movs	r2, #204	; 0xcc
   2ea80:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   2ea82:	69fb      	ldr	r3, [r7, #28]
   2ea84:	22cc      	movs	r2, #204	; 0xcc
   2ea86:	589b      	ldr	r3, [r3, r2]
   2ea88:	2b00      	cmp	r3, #0
   2ea8a:	da2b      	bge.n	2eae4 <_http_client_request+0x35c>
					module->req.content_length = 0;
   2ea8c:	69fb      	ldr	r3, [r7, #28]
   2ea8e:	22cc      	movs	r2, #204	; 0xcc
   2ea90:	2100      	movs	r1, #0
   2ea92:	5099      	str	r1, [r3, r2]
   2ea94:	e05c      	b.n	2eb50 <_http_client_request+0x3c8>
   2ea96:	46c0      	nop			; (mov r8, r8)
   2ea98:	00038050 	.word	0x00038050
   2ea9c:	0002e701 	.word	0x0002e701
   2eaa0:	0002f669 	.word	0x0002f669
   2eaa4:	00037f74 	.word	0x00037f74
   2eaa8:	0002f6e9 	.word	0x0002f6e9
   2eaac:	00037f7c 	.word	0x00037f7c
   2eab0:	00037f84 	.word	0x00037f84
   2eab4:	00037f8c 	.word	0x00037f8c
   2eab8:	00037f94 	.word	0x00037f94
   2eabc:	00037fa0 	.word	0x00037fa0
   2eac0:	00032c5f 	.word	0x00032c5f
   2eac4:	00037fa8 	.word	0x00037fa8
   2eac8:	00037fb4 	.word	0x00037fb4
   2eacc:	00037fc4 	.word	0x00037fc4
   2ead0:	00037fc8 	.word	0x00037fc8
   2ead4:	00037fd0 	.word	0x00037fd0
   2ead8:	00037fec 	.word	0x00037fec
   2eadc:	00038000 	.word	0x00038000
   2eae0:	00038018 	.word	0x00038018
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   2eae4:	69fb      	ldr	r3, [r7, #28]
   2eae6:	22cc      	movs	r2, #204	; 0xcc
   2eae8:	589b      	ldr	r3, [r3, r2]
   2eaea:	001a      	movs	r2, r3
   2eaec:	49e0      	ldr	r1, [pc, #896]	; (2ee70 <_http_client_request+0x6e8>)
   2eaee:	2328      	movs	r3, #40	; 0x28
   2eaf0:	2018      	movs	r0, #24
   2eaf2:	4684      	mov	ip, r0
   2eaf4:	44bc      	add	ip, r7
   2eaf6:	4463      	add	r3, ip
   2eaf8:	0018      	movs	r0, r3
   2eafa:	4bde      	ldr	r3, [pc, #888]	; (2ee74 <_http_client_request+0x6ec>)
   2eafc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   2eafe:	49de      	ldr	r1, [pc, #888]	; (2ee78 <_http_client_request+0x6f0>)
   2eb00:	2334      	movs	r3, #52	; 0x34
   2eb02:	2218      	movs	r2, #24
   2eb04:	4694      	mov	ip, r2
   2eb06:	44bc      	add	ip, r7
   2eb08:	4463      	add	r3, ip
   2eb0a:	2210      	movs	r2, #16
   2eb0c:	0018      	movs	r0, r3
   2eb0e:	4bdb      	ldr	r3, [pc, #876]	; (2ee7c <_http_client_request+0x6f4>)
   2eb10:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   2eb12:	2328      	movs	r3, #40	; 0x28
   2eb14:	2218      	movs	r2, #24
   2eb16:	4694      	mov	ip, r2
   2eb18:	44bc      	add	ip, r7
   2eb1a:	4463      	add	r3, ip
   2eb1c:	0018      	movs	r0, r3
   2eb1e:	4bd8      	ldr	r3, [pc, #864]	; (2ee80 <_http_client_request+0x6f8>)
   2eb20:	4798      	blx	r3
   2eb22:	0002      	movs	r2, r0
   2eb24:	2328      	movs	r3, #40	; 0x28
   2eb26:	2118      	movs	r1, #24
   2eb28:	1879      	adds	r1, r7, r1
   2eb2a:	18c9      	adds	r1, r1, r3
   2eb2c:	2334      	movs	r3, #52	; 0x34
   2eb2e:	2018      	movs	r0, #24
   2eb30:	4684      	mov	ip, r0
   2eb32:	44bc      	add	ip, r7
   2eb34:	4463      	add	r3, ip
   2eb36:	0018      	movs	r0, r3
   2eb38:	4bd0      	ldr	r3, [pc, #832]	; (2ee7c <_http_client_request+0x6f4>)
   2eb3a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2eb3c:	49d1      	ldr	r1, [pc, #836]	; (2ee84 <_http_client_request+0x6fc>)
   2eb3e:	2334      	movs	r3, #52	; 0x34
   2eb40:	2218      	movs	r2, #24
   2eb42:	4694      	mov	ip, r2
   2eb44:	44bc      	add	ip, r7
   2eb46:	4463      	add	r3, ip
   2eb48:	2202      	movs	r2, #2
   2eb4a:	0018      	movs	r0, r3
   2eb4c:	4bcb      	ldr	r3, [pc, #812]	; (2ee7c <_http_client_request+0x6f4>)
   2eb4e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   2eb50:	69fb      	ldr	r3, [r7, #28]
   2eb52:	22d4      	movs	r2, #212	; 0xd4
   2eb54:	589b      	ldr	r3, [r3, r2]
   2eb56:	2b00      	cmp	r3, #0
   2eb58:	d012      	beq.n	2eb80 <_http_client_request+0x3f8>
				module->req.ext_header,
   2eb5a:	69fb      	ldr	r3, [r7, #28]
   2eb5c:	22d4      	movs	r2, #212	; 0xd4
   2eb5e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   2eb60:	69fb      	ldr	r3, [r7, #28]
   2eb62:	22d4      	movs	r2, #212	; 0xd4
   2eb64:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   2eb66:	0018      	movs	r0, r3
   2eb68:	4bc5      	ldr	r3, [pc, #788]	; (2ee80 <_http_client_request+0x6f8>)
   2eb6a:	4798      	blx	r3
   2eb6c:	0002      	movs	r2, r0
   2eb6e:	2334      	movs	r3, #52	; 0x34
   2eb70:	2118      	movs	r1, #24
   2eb72:	468c      	mov	ip, r1
   2eb74:	44bc      	add	ip, r7
   2eb76:	4463      	add	r3, ip
   2eb78:	0021      	movs	r1, r4
   2eb7a:	0018      	movs	r0, r3
   2eb7c:	4bbf      	ldr	r3, [pc, #764]	; (2ee7c <_http_client_request+0x6f4>)
   2eb7e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2eb80:	49c0      	ldr	r1, [pc, #768]	; (2ee84 <_http_client_request+0x6fc>)
   2eb82:	2334      	movs	r3, #52	; 0x34
   2eb84:	2218      	movs	r2, #24
   2eb86:	4694      	mov	ip, r2
   2eb88:	44bc      	add	ip, r7
   2eb8a:	4463      	add	r3, ip
   2eb8c:	2202      	movs	r2, #2
   2eb8e:	0018      	movs	r0, r3
   2eb90:	4bba      	ldr	r3, [pc, #744]	; (2ee7c <_http_client_request+0x6f4>)
   2eb92:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   2eb94:	2334      	movs	r3, #52	; 0x34
   2eb96:	2218      	movs	r2, #24
   2eb98:	4694      	mov	ip, r2
   2eb9a:	44bc      	add	ip, r7
   2eb9c:	4463      	add	r3, ip
   2eb9e:	0018      	movs	r0, r3
   2eba0:	4bb9      	ldr	r3, [pc, #740]	; (2ee88 <_http_client_request+0x700>)
   2eba2:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   2eba4:	69fb      	ldr	r3, [r7, #28]
   2eba6:	2204      	movs	r2, #4
   2eba8:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   2ebaa:	69fb      	ldr	r3, [r7, #28]
   2ebac:	22cc      	movs	r2, #204	; 0xcc
   2ebae:	589b      	ldr	r3, [r3, r2]
   2ebb0:	2b00      	cmp	r3, #0
   2ebb2:	db00      	blt.n	2ebb6 <_http_client_request+0x42e>
   2ebb4:	e0c6      	b.n	2ed44 <_http_client_request+0x5bc>
   2ebb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ebb8:	68db      	ldr	r3, [r3, #12]
   2ebba:	2b00      	cmp	r3, #0
   2ebbc:	d100      	bne.n	2ebc0 <_http_client_request+0x438>
   2ebbe:	e0c1      	b.n	2ed44 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2ebc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ebc2:	68dc      	ldr	r4, [r3, #12]
   2ebc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ebc6:	6958      	ldr	r0, [r3, #20]
   2ebc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2ebca:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2ebcc:	69fb      	ldr	r3, [r7, #28]
   2ebce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2ebd0:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2ebd2:	69fb      	ldr	r3, [r7, #28]
   2ebd4:	22d0      	movs	r2, #208	; 0xd0
   2ebd6:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2ebd8:	002a      	movs	r2, r5
   2ebda:	47a0      	blx	r4
   2ebdc:	0003      	movs	r3, r0
   2ebde:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   2ebe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ebe2:	2b00      	cmp	r3, #0
   2ebe4:	da01      	bge.n	2ebea <_http_client_request+0x462>
				size = 0;
   2ebe6:	2300      	movs	r3, #0
   2ebe8:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   2ebea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2ebec:	220a      	movs	r2, #10
   2ebee:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   2ebf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2ebf2:	220d      	movs	r2, #13
   2ebf4:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   2ebf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ebf8:	3305      	adds	r3, #5
   2ebfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2ebfc:	210d      	movs	r1, #13
   2ebfe:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   2ec00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec02:	3306      	adds	r3, #6
   2ec04:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2ec06:	210a      	movs	r1, #10
   2ec08:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   2ec0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec0c:	2b00      	cmp	r3, #0
   2ec0e:	db14      	blt.n	2ec3a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   2ec10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2ec12:	3302      	adds	r3, #2
   2ec14:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   2ec16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec18:	4a9c      	ldr	r2, [pc, #624]	; (2ee8c <_http_client_request+0x704>)
   2ec1a:	4013      	ands	r3, r2
   2ec1c:	d504      	bpl.n	2ec28 <_http_client_request+0x4a0>
   2ec1e:	3b01      	subs	r3, #1
   2ec20:	2210      	movs	r2, #16
   2ec22:	4252      	negs	r2, r2
   2ec24:	4313      	orrs	r3, r2
   2ec26:	3301      	adds	r3, #1
   2ec28:	001a      	movs	r2, r3
   2ec2a:	2318      	movs	r3, #24
   2ec2c:	2118      	movs	r1, #24
   2ec2e:	468c      	mov	ip, r1
   2ec30:	44bc      	add	ip, r7
   2ec32:	4463      	add	r3, ip
   2ec34:	5c9a      	ldrb	r2, [r3, r2]
   2ec36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ec38:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   2ec3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec3c:	2b0f      	cmp	r3, #15
   2ec3e:	dd19      	ble.n	2ec74 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   2ec40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2ec42:	3301      	adds	r3, #1
   2ec44:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   2ec46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec48:	2b00      	cmp	r3, #0
   2ec4a:	da00      	bge.n	2ec4e <_http_client_request+0x4c6>
   2ec4c:	330f      	adds	r3, #15
   2ec4e:	111b      	asrs	r3, r3, #4
   2ec50:	001a      	movs	r2, r3
   2ec52:	4b8e      	ldr	r3, [pc, #568]	; (2ee8c <_http_client_request+0x704>)
   2ec54:	4013      	ands	r3, r2
   2ec56:	d504      	bpl.n	2ec62 <_http_client_request+0x4da>
   2ec58:	3b01      	subs	r3, #1
   2ec5a:	2210      	movs	r2, #16
   2ec5c:	4252      	negs	r2, r2
   2ec5e:	4313      	orrs	r3, r2
   2ec60:	3301      	adds	r3, #1
   2ec62:	001a      	movs	r2, r3
   2ec64:	2318      	movs	r3, #24
   2ec66:	2118      	movs	r1, #24
   2ec68:	468c      	mov	ip, r1
   2ec6a:	44bc      	add	ip, r7
   2ec6c:	4463      	add	r3, ip
   2ec6e:	5c9a      	ldrb	r2, [r3, r2]
   2ec70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ec72:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   2ec74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec76:	2bff      	cmp	r3, #255	; 0xff
   2ec78:	dd18      	ble.n	2ecac <_http_client_request+0x524>
				ptr = buffer;
   2ec7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2ec7c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   2ec7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ec80:	2b00      	cmp	r3, #0
   2ec82:	da00      	bge.n	2ec86 <_http_client_request+0x4fe>
   2ec84:	33ff      	adds	r3, #255	; 0xff
   2ec86:	121b      	asrs	r3, r3, #8
   2ec88:	001a      	movs	r2, r3
   2ec8a:	4b80      	ldr	r3, [pc, #512]	; (2ee8c <_http_client_request+0x704>)
   2ec8c:	4013      	ands	r3, r2
   2ec8e:	d504      	bpl.n	2ec9a <_http_client_request+0x512>
   2ec90:	3b01      	subs	r3, #1
   2ec92:	2210      	movs	r2, #16
   2ec94:	4252      	negs	r2, r2
   2ec96:	4313      	orrs	r3, r2
   2ec98:	3301      	adds	r3, #1
   2ec9a:	001a      	movs	r2, r3
   2ec9c:	2318      	movs	r3, #24
   2ec9e:	2118      	movs	r1, #24
   2eca0:	468c      	mov	ip, r1
   2eca2:	44bc      	add	ip, r7
   2eca4:	4463      	add	r3, ip
   2eca6:	5c9a      	ldrb	r2, [r3, r2]
   2eca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ecaa:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   2ecac:	69fb      	ldr	r3, [r7, #28]
   2ecae:	2000      	movs	r0, #0
   2ecb0:	5618      	ldrsb	r0, [r3, r0]
   2ecb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ecb4:	3303      	adds	r3, #3
   2ecb6:	001a      	movs	r2, r3
   2ecb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2ecba:	1ad3      	subs	r3, r2, r3
   2ecbc:	b29a      	uxth	r2, r3
   2ecbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ecc0:	b29b      	uxth	r3, r3
   2ecc2:	18d3      	adds	r3, r2, r3
   2ecc4:	b29b      	uxth	r3, r3
   2ecc6:	3304      	adds	r3, #4
   2ecc8:	b29a      	uxth	r2, r3
   2ecca:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2eccc:	2300      	movs	r3, #0
   2ecce:	4c70      	ldr	r4, [pc, #448]	; (2ee90 <_http_client_request+0x708>)
   2ecd0:	47a0      	blx	r4
   2ecd2:	0003      	movs	r3, r0
   2ecd4:	663b      	str	r3, [r7, #96]	; 0x60
   2ecd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2ecd8:	2b00      	cmp	r3, #0
   2ecda:	da07      	bge.n	2ecec <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   2ecdc:	2305      	movs	r3, #5
   2ecde:	425a      	negs	r2, r3
   2ece0:	69fb      	ldr	r3, [r7, #28]
   2ece2:	0011      	movs	r1, r2
   2ece4:	0018      	movs	r0, r3
   2ece6:	4b6b      	ldr	r3, [pc, #428]	; (2ee94 <_http_client_request+0x70c>)
   2ece8:	4798      	blx	r3
				return;
   2ecea:	e0e1      	b.n	2eeb0 <_http_client_request+0x728>
			module->req.sent_length += size;
   2ecec:	69fb      	ldr	r3, [r7, #28]
   2ecee:	22d0      	movs	r2, #208	; 0xd0
   2ecf0:	589a      	ldr	r2, [r3, r2]
   2ecf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ecf4:	18d2      	adds	r2, r2, r3
   2ecf6:	69fb      	ldr	r3, [r7, #28]
   2ecf8:	21d0      	movs	r1, #208	; 0xd0
   2ecfa:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   2ecfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ecfe:	2b00      	cmp	r3, #0
   2ed00:	d000      	beq.n	2ed04 <_http_client_request+0x57c>
   2ed02:	e0c9      	b.n	2ee98 <_http_client_request+0x710>
				if (module->req.entity.close) {
   2ed04:	69fb      	ldr	r3, [r7, #28]
   2ed06:	22c0      	movs	r2, #192	; 0xc0
   2ed08:	589b      	ldr	r3, [r3, r2]
   2ed0a:	2b00      	cmp	r3, #0
   2ed0c:	d007      	beq.n	2ed1e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   2ed0e:	69fb      	ldr	r3, [r7, #28]
   2ed10:	22c0      	movs	r2, #192	; 0xc0
   2ed12:	589b      	ldr	r3, [r3, r2]
   2ed14:	69fa      	ldr	r2, [r7, #28]
   2ed16:	21c4      	movs	r1, #196	; 0xc4
   2ed18:	5852      	ldr	r2, [r2, r1]
   2ed1a:	0010      	movs	r0, r2
   2ed1c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   2ed1e:	69fb      	ldr	r3, [r7, #28]
   2ed20:	2202      	movs	r2, #2
   2ed22:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   2ed24:	69fb      	ldr	r3, [r7, #28]
   2ed26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ed28:	2b00      	cmp	r3, #0
   2ed2a:	d100      	bne.n	2ed2e <_http_client_request+0x5a6>
   2ed2c:	e0b5      	b.n	2ee9a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2ed2e:	69fb      	ldr	r3, [r7, #28]
   2ed30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ed32:	220c      	movs	r2, #12
   2ed34:	2118      	movs	r1, #24
   2ed36:	468c      	mov	ip, r1
   2ed38:	44bc      	add	ip, r7
   2ed3a:	4462      	add	r2, ip
   2ed3c:	69f8      	ldr	r0, [r7, #28]
   2ed3e:	2101      	movs	r1, #1
   2ed40:	4798      	blx	r3
				break;
   2ed42:	e0aa      	b.n	2ee9a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   2ed44:	69fb      	ldr	r3, [r7, #28]
   2ed46:	22cc      	movs	r2, #204	; 0xcc
   2ed48:	589b      	ldr	r3, [r3, r2]
   2ed4a:	2b00      	cmp	r3, #0
   2ed4c:	dc00      	bgt.n	2ed50 <_http_client_request+0x5c8>
   2ed4e:	e07c      	b.n	2ee4a <_http_client_request+0x6c2>
   2ed50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2ed52:	68db      	ldr	r3, [r3, #12]
   2ed54:	2b00      	cmp	r3, #0
   2ed56:	d100      	bne.n	2ed5a <_http_client_request+0x5d2>
   2ed58:	e077      	b.n	2ee4a <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   2ed5a:	69fb      	ldr	r3, [r7, #28]
   2ed5c:	22d0      	movs	r2, #208	; 0xd0
   2ed5e:	589a      	ldr	r2, [r3, r2]
   2ed60:	69fb      	ldr	r3, [r7, #28]
   2ed62:	21cc      	movs	r1, #204	; 0xcc
   2ed64:	585b      	ldr	r3, [r3, r1]
   2ed66:	429a      	cmp	r2, r3
   2ed68:	db1f      	blt.n	2edaa <_http_client_request+0x622>
				if (module->req.entity.close) {
   2ed6a:	69fb      	ldr	r3, [r7, #28]
   2ed6c:	22c0      	movs	r2, #192	; 0xc0
   2ed6e:	589b      	ldr	r3, [r3, r2]
   2ed70:	2b00      	cmp	r3, #0
   2ed72:	d007      	beq.n	2ed84 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   2ed74:	69fb      	ldr	r3, [r7, #28]
   2ed76:	22c0      	movs	r2, #192	; 0xc0
   2ed78:	589b      	ldr	r3, [r3, r2]
   2ed7a:	69fa      	ldr	r2, [r7, #28]
   2ed7c:	21c4      	movs	r1, #196	; 0xc4
   2ed7e:	5852      	ldr	r2, [r2, r1]
   2ed80:	0010      	movs	r0, r2
   2ed82:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   2ed84:	69fb      	ldr	r3, [r7, #28]
   2ed86:	2202      	movs	r2, #2
   2ed88:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   2ed8a:	69fb      	ldr	r3, [r7, #28]
   2ed8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ed8e:	2b00      	cmp	r3, #0
   2ed90:	d100      	bne.n	2ed94 <_http_client_request+0x60c>
   2ed92:	e084      	b.n	2ee9e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2ed94:	69fb      	ldr	r3, [r7, #28]
   2ed96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ed98:	220c      	movs	r2, #12
   2ed9a:	2118      	movs	r1, #24
   2ed9c:	468c      	mov	ip, r1
   2ed9e:	44bc      	add	ip, r7
   2eda0:	4462      	add	r2, ip
   2eda2:	69f8      	ldr	r0, [r7, #28]
   2eda4:	2101      	movs	r1, #1
   2eda6:	4798      	blx	r3
				break;
   2eda8:	e079      	b.n	2ee9e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   2edaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2edac:	68dc      	ldr	r4, [r3, #12]
   2edae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2edb0:	6958      	ldr	r0, [r3, #20]
   2edb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2edb4:	69fb      	ldr	r3, [r7, #28]
   2edb6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   2edb8:	69fb      	ldr	r3, [r7, #28]
   2edba:	22d0      	movs	r2, #208	; 0xd0
   2edbc:	589b      	ldr	r3, [r3, r2]
   2edbe:	002a      	movs	r2, r5
   2edc0:	47a0      	blx	r4
   2edc2:	0003      	movs	r3, r0
   2edc4:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   2edc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2edc8:	2b00      	cmp	r3, #0
   2edca:	da0d      	bge.n	2ede8 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   2edcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2edce:	2b00      	cmp	r3, #0
   2edd0:	d102      	bne.n	2edd8 <_http_client_request+0x650>
   2edd2:	234d      	movs	r3, #77	; 0x4d
   2edd4:	425b      	negs	r3, r3
   2edd6:	e001      	b.n	2eddc <_http_client_request+0x654>
   2edd8:	2305      	movs	r3, #5
   2edda:	425b      	negs	r3, r3
   2eddc:	69fa      	ldr	r2, [r7, #28]
   2edde:	0019      	movs	r1, r3
   2ede0:	0010      	movs	r0, r2
   2ede2:	4b2c      	ldr	r3, [pc, #176]	; (2ee94 <_http_client_request+0x70c>)
   2ede4:	4798      	blx	r3
			if (size < 0) {
   2ede6:	e057      	b.n	2ee98 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   2ede8:	69fb      	ldr	r3, [r7, #28]
   2edea:	22cc      	movs	r2, #204	; 0xcc
   2edec:	589a      	ldr	r2, [r3, r2]
   2edee:	69fb      	ldr	r3, [r7, #28]
   2edf0:	21d0      	movs	r1, #208	; 0xd0
   2edf2:	585b      	ldr	r3, [r3, r1]
   2edf4:	1ad2      	subs	r2, r2, r3
   2edf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2edf8:	429a      	cmp	r2, r3
   2edfa:	da07      	bge.n	2ee0c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   2edfc:	69fb      	ldr	r3, [r7, #28]
   2edfe:	22cc      	movs	r2, #204	; 0xcc
   2ee00:	589a      	ldr	r2, [r3, r2]
   2ee02:	69fb      	ldr	r3, [r7, #28]
   2ee04:	21d0      	movs	r1, #208	; 0xd0
   2ee06:	585b      	ldr	r3, [r3, r1]
   2ee08:	1ad3      	subs	r3, r2, r3
   2ee0a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   2ee0c:	69fb      	ldr	r3, [r7, #28]
   2ee0e:	2000      	movs	r0, #0
   2ee10:	5618      	ldrsb	r0, [r3, r0]
   2ee12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2ee14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ee16:	b29a      	uxth	r2, r3
   2ee18:	2300      	movs	r3, #0
   2ee1a:	4c1d      	ldr	r4, [pc, #116]	; (2ee90 <_http_client_request+0x708>)
   2ee1c:	47a0      	blx	r4
   2ee1e:	0003      	movs	r3, r0
   2ee20:	663b      	str	r3, [r7, #96]	; 0x60
   2ee22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2ee24:	2b00      	cmp	r3, #0
   2ee26:	da07      	bge.n	2ee38 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   2ee28:	2305      	movs	r3, #5
   2ee2a:	425a      	negs	r2, r3
   2ee2c:	69fb      	ldr	r3, [r7, #28]
   2ee2e:	0011      	movs	r1, r2
   2ee30:	0018      	movs	r0, r3
   2ee32:	4b18      	ldr	r3, [pc, #96]	; (2ee94 <_http_client_request+0x70c>)
   2ee34:	4798      	blx	r3
					return;
   2ee36:	e03b      	b.n	2eeb0 <_http_client_request+0x728>
				module->req.sent_length += size;
   2ee38:	69fb      	ldr	r3, [r7, #28]
   2ee3a:	22d0      	movs	r2, #208	; 0xd0
   2ee3c:	589a      	ldr	r2, [r3, r2]
   2ee3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ee40:	18d2      	adds	r2, r2, r3
   2ee42:	69fb      	ldr	r3, [r7, #28]
   2ee44:	21d0      	movs	r1, #208	; 0xd0
   2ee46:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   2ee48:	e026      	b.n	2ee98 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   2ee4a:	69fb      	ldr	r3, [r7, #28]
   2ee4c:	2202      	movs	r2, #2
   2ee4e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   2ee50:	69fb      	ldr	r3, [r7, #28]
   2ee52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ee54:	2b00      	cmp	r3, #0
   2ee56:	d024      	beq.n	2eea2 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2ee58:	69fb      	ldr	r3, [r7, #28]
   2ee5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ee5c:	220c      	movs	r2, #12
   2ee5e:	2118      	movs	r1, #24
   2ee60:	468c      	mov	ip, r1
   2ee62:	44bc      	add	ip, r7
   2ee64:	4462      	add	r2, ip
   2ee66:	69f8      	ldr	r0, [r7, #28]
   2ee68:	2101      	movs	r1, #1
   2ee6a:	4798      	blx	r3
			break;
   2ee6c:	e019      	b.n	2eea2 <_http_client_request+0x71a>
   2ee6e:	46c0      	nop			; (mov r8, r8)
   2ee70:	00038038 	.word	0x00038038
   2ee74:	00032b65 	.word	0x00032b65
   2ee78:	0003803c 	.word	0x0003803c
   2ee7c:	0002f6e9 	.word	0x0002f6e9
   2ee80:	00032c5f 	.word	0x00032c5f
   2ee84:	00037fc4 	.word	0x00037fc4
   2ee88:	0002f725 	.word	0x0002f725
   2ee8c:	8000000f 	.word	0x8000000f
   2ee90:	000221e9 	.word	0x000221e9
   2ee94:	0002e635 	.word	0x0002e635
		break;
   2ee98:	e004      	b.n	2eea4 <_http_client_request+0x71c>
				break;
   2ee9a:	46c0      	nop			; (mov r8, r8)
   2ee9c:	e002      	b.n	2eea4 <_http_client_request+0x71c>
				break;
   2ee9e:	46c0      	nop			; (mov r8, r8)
   2eea0:	e000      	b.n	2eea4 <_http_client_request+0x71c>
			break;
   2eea2:	46c0      	nop			; (mov r8, r8)
   2eea4:	69bb      	ldr	r3, [r7, #24]
   2eea6:	469d      	mov	sp, r3
   2eea8:	e004      	b.n	2eeb4 <_http_client_request+0x72c>
		return;
   2eeaa:	46c0      	nop			; (mov r8, r8)
   2eeac:	e000      	b.n	2eeb0 <_http_client_request+0x728>
		return;
   2eeae:	46c0      	nop			; (mov r8, r8)
   2eeb0:	69bb      	ldr	r3, [r7, #24]
   2eeb2:	469d      	mov	sp, r3
	}
}
   2eeb4:	46bd      	mov	sp, r7
   2eeb6:	b01e      	add	sp, #120	; 0x78
   2eeb8:	bc04      	pop	{r2}
   2eeba:	4690      	mov	r8, r2
   2eebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eebe:	46c0      	nop			; (mov r8, r8)

0002eec0 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   2eec0:	b590      	push	{r4, r7, lr}
   2eec2:	b083      	sub	sp, #12
   2eec4:	af00      	add	r7, sp, #0
   2eec6:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   2eec8:	687b      	ldr	r3, [r7, #4]
   2eeca:	2b00      	cmp	r3, #0
   2eecc:	d021      	beq.n	2ef12 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   2eece:	687b      	ldr	r3, [r7, #4]
   2eed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2eed2:	687b      	ldr	r3, [r7, #4]
   2eed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2eed6:	429a      	cmp	r2, r3
   2eed8:	d307      	bcc.n	2eeea <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   2eeda:	238b      	movs	r3, #139	; 0x8b
   2eedc:	425a      	negs	r2, r3
   2eede:	687b      	ldr	r3, [r7, #4]
   2eee0:	0011      	movs	r1, r2
   2eee2:	0018      	movs	r0, r3
   2eee4:	4b0d      	ldr	r3, [pc, #52]	; (2ef1c <_http_client_recv_packet+0x5c>)
   2eee6:	4798      	blx	r3
		return;
   2eee8:	e014      	b.n	2ef14 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   2eeea:	687b      	ldr	r3, [r7, #4]
   2eeec:	2000      	movs	r0, #0
   2eeee:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   2eef0:	687b      	ldr	r3, [r7, #4]
   2eef2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2eef4:	687b      	ldr	r3, [r7, #4]
   2eef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2eef8:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   2eefa:	687b      	ldr	r3, [r7, #4]
   2eefc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   2eefe:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   2ef00:	687b      	ldr	r3, [r7, #4]
   2ef02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   2ef04:	b29b      	uxth	r3, r3
   2ef06:	1ad3      	subs	r3, r2, r3
   2ef08:	b29a      	uxth	r2, r3
   2ef0a:	2300      	movs	r3, #0
   2ef0c:	4c04      	ldr	r4, [pc, #16]	; (2ef20 <_http_client_recv_packet+0x60>)
   2ef0e:	47a0      	blx	r4
   2ef10:	e000      	b.n	2ef14 <_http_client_recv_packet+0x54>
		return;
   2ef12:	46c0      	nop			; (mov r8, r8)
}
   2ef14:	46bd      	mov	sp, r7
   2ef16:	b003      	add	sp, #12
   2ef18:	bd90      	pop	{r4, r7, pc}
   2ef1a:	46c0      	nop			; (mov r8, r8)
   2ef1c:	0002e635 	.word	0x0002e635
   2ef20:	0002234d 	.word	0x0002234d

0002ef24 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   2ef24:	b580      	push	{r7, lr}
   2ef26:	b082      	sub	sp, #8
   2ef28:	af00      	add	r7, sp, #0
   2ef2a:	6078      	str	r0, [r7, #4]
   2ef2c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   2ef2e:	687b      	ldr	r3, [r7, #4]
   2ef30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2ef32:	683b      	ldr	r3, [r7, #0]
   2ef34:	18d2      	adds	r2, r2, r3
   2ef36:	687b      	ldr	r3, [r7, #4]
   2ef38:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   2ef3a:	687b      	ldr	r3, [r7, #4]
   2ef3c:	2258      	movs	r2, #88	; 0x58
   2ef3e:	5a9b      	ldrh	r3, [r3, r2]
   2ef40:	2b00      	cmp	r3, #0
   2ef42:	d007      	beq.n	2ef54 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   2ef44:	687b      	ldr	r3, [r7, #4]
   2ef46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2ef48:	687b      	ldr	r3, [r7, #4]
   2ef4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ef4c:	0019      	movs	r1, r3
   2ef4e:	0010      	movs	r0, r2
   2ef50:	4b06      	ldr	r3, [pc, #24]	; (2ef6c <_http_client_recved_packet+0x48>)
   2ef52:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   2ef54:	46c0      	nop			; (mov r8, r8)
   2ef56:	687b      	ldr	r3, [r7, #4]
   2ef58:	0018      	movs	r0, r3
   2ef5a:	4b05      	ldr	r3, [pc, #20]	; (2ef70 <_http_client_recved_packet+0x4c>)
   2ef5c:	4798      	blx	r3
   2ef5e:	1e03      	subs	r3, r0, #0
   2ef60:	d1f9      	bne.n	2ef56 <_http_client_recved_packet+0x32>
}
   2ef62:	46c0      	nop			; (mov r8, r8)
   2ef64:	46bd      	mov	sp, r7
   2ef66:	b002      	add	sp, #8
   2ef68:	bd80      	pop	{r7, pc}
   2ef6a:	46c0      	nop			; (mov r8, r8)
   2ef6c:	0002f9e1 	.word	0x0002f9e1
   2ef70:	0002ef75 	.word	0x0002ef75

0002ef74 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   2ef74:	b580      	push	{r7, lr}
   2ef76:	b082      	sub	sp, #8
   2ef78:	af00      	add	r7, sp, #0
   2ef7a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   2ef7c:	687b      	ldr	r3, [r7, #4]
   2ef7e:	22d8      	movs	r2, #216	; 0xd8
   2ef80:	589b      	ldr	r3, [r3, r2]
   2ef82:	2b00      	cmp	r3, #0
   2ef84:	d002      	beq.n	2ef8c <_http_client_handle_response+0x18>
   2ef86:	2b01      	cmp	r3, #1
   2ef88:	d006      	beq.n	2ef98 <_http_client_handle_response+0x24>
   2ef8a:	e00b      	b.n	2efa4 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   2ef8c:	687b      	ldr	r3, [r7, #4]
   2ef8e:	0018      	movs	r0, r3
   2ef90:	4b07      	ldr	r3, [pc, #28]	; (2efb0 <_http_client_handle_response+0x3c>)
   2ef92:	4798      	blx	r3
   2ef94:	0003      	movs	r3, r0
   2ef96:	e006      	b.n	2efa6 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   2ef98:	687b      	ldr	r3, [r7, #4]
   2ef9a:	0018      	movs	r0, r3
   2ef9c:	4b05      	ldr	r3, [pc, #20]	; (2efb4 <_http_client_handle_response+0x40>)
   2ef9e:	4798      	blx	r3
   2efa0:	0003      	movs	r3, r0
   2efa2:	e000      	b.n	2efa6 <_http_client_handle_response+0x32>
	}
	return 0;
   2efa4:	2300      	movs	r3, #0
}
   2efa6:	0018      	movs	r0, r3
   2efa8:	46bd      	mov	sp, r7
   2efaa:	b002      	add	sp, #8
   2efac:	bd80      	pop	{r7, pc}
   2efae:	46c0      	nop			; (mov r8, r8)
   2efb0:	0002efb9 	.word	0x0002efb9
   2efb4:	0002f471 	.word	0x0002f471

0002efb8 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   2efb8:	b590      	push	{r4, r7, lr}
   2efba:	b08b      	sub	sp, #44	; 0x2c
   2efbc:	af00      	add	r7, sp, #0
   2efbe:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   2efc0:	687b      	ldr	r3, [r7, #4]
   2efc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2efc4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   2efc6:	4b9a      	ldr	r3, [pc, #616]	; (2f230 <_http_client_handle_header+0x278>)
   2efc8:	681a      	ldr	r2, [r3, #0]
   2efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2efcc:	0011      	movs	r1, r2
   2efce:	0018      	movs	r0, r3
   2efd0:	4b98      	ldr	r3, [pc, #608]	; (2f234 <_http_client_handle_header+0x27c>)
   2efd2:	4798      	blx	r3
   2efd4:	0003      	movs	r3, r0
   2efd6:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   2efd8:	69bb      	ldr	r3, [r7, #24]
   2efda:	2b00      	cmp	r3, #0
   2efdc:	d007      	beq.n	2efee <_http_client_handle_header+0x36>
   2efde:	687b      	ldr	r3, [r7, #4]
   2efe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2efe2:	687b      	ldr	r3, [r7, #4]
   2efe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2efe6:	18d2      	adds	r2, r2, r3
   2efe8:	69bb      	ldr	r3, [r7, #24]
   2efea:	429a      	cmp	r2, r3
   2efec:	d807      	bhi.n	2effe <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   2efee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2eff0:	687b      	ldr	r3, [r7, #4]
   2eff2:	0011      	movs	r1, r2
   2eff4:	0018      	movs	r0, r3
   2eff6:	4b90      	ldr	r3, [pc, #576]	; (2f238 <_http_client_handle_header+0x280>)
   2eff8:	4798      	blx	r3
			return 0;
   2effa:	2300      	movs	r3, #0
   2effc:	e114      	b.n	2f228 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   2effe:	4b8c      	ldr	r3, [pc, #560]	; (2f230 <_http_client_handle_header+0x278>)
   2f000:	681c      	ldr	r4, [r3, #0]
   2f002:	4b8b      	ldr	r3, [pc, #556]	; (2f230 <_http_client_handle_header+0x278>)
   2f004:	681b      	ldr	r3, [r3, #0]
   2f006:	0018      	movs	r0, r3
   2f008:	4b8c      	ldr	r3, [pc, #560]	; (2f23c <_http_client_handle_header+0x284>)
   2f00a:	4798      	blx	r3
   2f00c:	0002      	movs	r2, r0
   2f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f010:	0021      	movs	r1, r4
   2f012:	0018      	movs	r0, r3
   2f014:	4b8a      	ldr	r3, [pc, #552]	; (2f240 <_http_client_handle_header+0x288>)
   2f016:	4798      	blx	r3
   2f018:	1e03      	subs	r3, r0, #0
   2f01a:	d15d      	bne.n	2f0d8 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   2f01c:	4b84      	ldr	r3, [pc, #528]	; (2f230 <_http_client_handle_header+0x278>)
   2f01e:	681b      	ldr	r3, [r3, #0]
   2f020:	0018      	movs	r0, r3
   2f022:	4b86      	ldr	r3, [pc, #536]	; (2f23c <_http_client_handle_header+0x284>)
   2f024:	4798      	blx	r3
   2f026:	0002      	movs	r2, r0
   2f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f02a:	189a      	adds	r2, r3, r2
   2f02c:	687b      	ldr	r3, [r7, #4]
   2f02e:	0011      	movs	r1, r2
   2f030:	0018      	movs	r0, r3
   2f032:	4b81      	ldr	r3, [pc, #516]	; (2f238 <_http_client_handle_header+0x280>)
   2f034:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   2f036:	687b      	ldr	r3, [r7, #4]
   2f038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f03a:	2b00      	cmp	r3, #0
   2f03c:	d046      	beq.n	2f0cc <_http_client_handle_header+0x114>
   2f03e:	687b      	ldr	r3, [r7, #4]
   2f040:	22e4      	movs	r2, #228	; 0xe4
   2f042:	5a9b      	ldrh	r3, [r3, r2]
   2f044:	2b00      	cmp	r3, #0
   2f046:	d041      	beq.n	2f0cc <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   2f048:	687b      	ldr	r3, [r7, #4]
   2f04a:	22dc      	movs	r2, #220	; 0xdc
   2f04c:	589b      	ldr	r3, [r3, r2]
   2f04e:	2b00      	cmp	r3, #0
   2f050:	da19      	bge.n	2f086 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   2f052:	687b      	ldr	r3, [r7, #4]
   2f054:	22e4      	movs	r2, #228	; 0xe4
   2f056:	5a9a      	ldrh	r2, [r3, r2]
   2f058:	230c      	movs	r3, #12
   2f05a:	18fb      	adds	r3, r7, r3
   2f05c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   2f05e:	230c      	movs	r3, #12
   2f060:	18fb      	adds	r3, r7, r3
   2f062:	2201      	movs	r2, #1
   2f064:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   2f066:	687b      	ldr	r3, [r7, #4]
   2f068:	22e0      	movs	r2, #224	; 0xe0
   2f06a:	2100      	movs	r1, #0
   2f06c:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   2f06e:	230c      	movs	r3, #12
   2f070:	18fb      	adds	r3, r7, r3
   2f072:	2200      	movs	r2, #0
   2f074:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2f076:	687b      	ldr	r3, [r7, #4]
   2f078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f07a:	220c      	movs	r2, #12
   2f07c:	18ba      	adds	r2, r7, r2
   2f07e:	6878      	ldr	r0, [r7, #4]
   2f080:	2102      	movs	r1, #2
   2f082:	4798      	blx	r3
   2f084:	e022      	b.n	2f0cc <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   2f086:	687b      	ldr	r3, [r7, #4]
   2f088:	22dc      	movs	r2, #220	; 0xdc
   2f08a:	589a      	ldr	r2, [r3, r2]
   2f08c:	687b      	ldr	r3, [r7, #4]
   2f08e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2f090:	429a      	cmp	r2, r3
   2f092:	dd1b      	ble.n	2f0cc <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   2f094:	687b      	ldr	r3, [r7, #4]
   2f096:	22e4      	movs	r2, #228	; 0xe4
   2f098:	5a9a      	ldrh	r2, [r3, r2]
   2f09a:	230c      	movs	r3, #12
   2f09c:	18fb      	adds	r3, r7, r3
   2f09e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   2f0a0:	687b      	ldr	r3, [r7, #4]
   2f0a2:	22dc      	movs	r2, #220	; 0xdc
   2f0a4:	589b      	ldr	r3, [r3, r2]
   2f0a6:	001a      	movs	r2, r3
   2f0a8:	230c      	movs	r3, #12
   2f0aa:	18fb      	adds	r3, r7, r3
   2f0ac:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   2f0ae:	230c      	movs	r3, #12
   2f0b0:	18fb      	adds	r3, r7, r3
   2f0b2:	2200      	movs	r2, #0
   2f0b4:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   2f0b6:	687b      	ldr	r3, [r7, #4]
   2f0b8:	22e0      	movs	r2, #224	; 0xe0
   2f0ba:	2100      	movs	r1, #0
   2f0bc:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2f0be:	687b      	ldr	r3, [r7, #4]
   2f0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f0c2:	220c      	movs	r2, #12
   2f0c4:	18ba      	adds	r2, r7, r2
   2f0c6:	6878      	ldr	r0, [r7, #4]
   2f0c8:	2102      	movs	r1, #2
   2f0ca:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   2f0cc:	687b      	ldr	r3, [r7, #4]
   2f0ce:	22d8      	movs	r2, #216	; 0xd8
   2f0d0:	2101      	movs	r1, #1
   2f0d2:	5099      	str	r1, [r3, r2]
			return 1;
   2f0d4:	2301      	movs	r3, #1
   2f0d6:	e0a7      	b.n	2f228 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   2f0d8:	495a      	ldr	r1, [pc, #360]	; (2f244 <_http_client_handle_header+0x28c>)
   2f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f0dc:	2210      	movs	r2, #16
   2f0de:	0018      	movs	r0, r3
   2f0e0:	4b57      	ldr	r3, [pc, #348]	; (2f240 <_http_client_handle_header+0x288>)
   2f0e2:	4798      	blx	r3
   2f0e4:	1e03      	subs	r3, r0, #0
   2f0e6:	d109      	bne.n	2f0fc <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   2f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f0ea:	3310      	adds	r3, #16
   2f0ec:	0018      	movs	r0, r3
   2f0ee:	4b56      	ldr	r3, [pc, #344]	; (2f248 <_http_client_handle_header+0x290>)
   2f0f0:	4798      	blx	r3
   2f0f2:	0001      	movs	r1, r0
   2f0f4:	687b      	ldr	r3, [r7, #4]
   2f0f6:	22dc      	movs	r2, #220	; 0xdc
   2f0f8:	5099      	str	r1, [r3, r2]
   2f0fa:	e08b      	b.n	2f214 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   2f0fc:	4953      	ldr	r1, [pc, #332]	; (2f24c <_http_client_handle_header+0x294>)
   2f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f100:	2213      	movs	r2, #19
   2f102:	0018      	movs	r0, r3
   2f104:	4b4e      	ldr	r3, [pc, #312]	; (2f240 <_http_client_handle_header+0x288>)
   2f106:	4798      	blx	r3
   2f108:	1e03      	subs	r3, r0, #0
   2f10a:	d127      	bne.n	2f15c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   2f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f10e:	3313      	adds	r3, #19
   2f110:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f112:	e01e      	b.n	2f152 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   2f114:	6a3b      	ldr	r3, [r7, #32]
   2f116:	781b      	ldrb	r3, [r3, #0]
   2f118:	2b20      	cmp	r3, #32
   2f11a:	d103      	bne.n	2f124 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f11c:	6a3b      	ldr	r3, [r7, #32]
   2f11e:	3301      	adds	r3, #1
   2f120:	623b      	str	r3, [r7, #32]
   2f122:	e016      	b.n	2f152 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   2f124:	6a3b      	ldr	r3, [r7, #32]
   2f126:	781b      	ldrb	r3, [r3, #0]
   2f128:	2b43      	cmp	r3, #67	; 0x43
   2f12a:	d003      	beq.n	2f134 <_http_client_handle_header+0x17c>
   2f12c:	6a3b      	ldr	r3, [r7, #32]
   2f12e:	781b      	ldrb	r3, [r3, #0]
   2f130:	2b63      	cmp	r3, #99	; 0x63
   2f132:	d105      	bne.n	2f140 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   2f134:	687b      	ldr	r3, [r7, #4]
   2f136:	21cc      	movs	r1, #204	; 0xcc
   2f138:	2201      	movs	r2, #1
   2f13a:	4252      	negs	r2, r2
   2f13c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   2f13e:	e069      	b.n	2f214 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   2f140:	2386      	movs	r3, #134	; 0x86
   2f142:	425a      	negs	r2, r3
   2f144:	687b      	ldr	r3, [r7, #4]
   2f146:	0011      	movs	r1, r2
   2f148:	0018      	movs	r0, r3
   2f14a:	4b41      	ldr	r3, [pc, #260]	; (2f250 <_http_client_handle_header+0x298>)
   2f14c:	4798      	blx	r3
					return 0;
   2f14e:	2300      	movs	r3, #0
   2f150:	e06a      	b.n	2f228 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f152:	69ba      	ldr	r2, [r7, #24]
   2f154:	6a3b      	ldr	r3, [r7, #32]
   2f156:	429a      	cmp	r2, r3
   2f158:	d8dc      	bhi.n	2f114 <_http_client_handle_header+0x15c>
   2f15a:	e05b      	b.n	2f214 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   2f15c:	493d      	ldr	r1, [pc, #244]	; (2f254 <_http_client_handle_header+0x29c>)
   2f15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f160:	220c      	movs	r2, #12
   2f162:	0018      	movs	r0, r3
   2f164:	4b36      	ldr	r3, [pc, #216]	; (2f240 <_http_client_handle_header+0x288>)
   2f166:	4798      	blx	r3
   2f168:	1e03      	subs	r3, r0, #0
   2f16a:	d126      	bne.n	2f1ba <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   2f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f16e:	330c      	adds	r3, #12
   2f170:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f172:	e01d      	b.n	2f1b0 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   2f174:	69fb      	ldr	r3, [r7, #28]
   2f176:	781b      	ldrb	r3, [r3, #0]
   2f178:	2b20      	cmp	r3, #32
   2f17a:	d103      	bne.n	2f184 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f17c:	69fb      	ldr	r3, [r7, #28]
   2f17e:	3301      	adds	r3, #1
   2f180:	61fb      	str	r3, [r7, #28]
   2f182:	e015      	b.n	2f1b0 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   2f184:	69fb      	ldr	r3, [r7, #28]
   2f186:	781b      	ldrb	r3, [r3, #0]
   2f188:	2b4b      	cmp	r3, #75	; 0x4b
   2f18a:	d003      	beq.n	2f194 <_http_client_handle_header+0x1dc>
   2f18c:	69fb      	ldr	r3, [r7, #28]
   2f18e:	781b      	ldrb	r3, [r3, #0]
   2f190:	2b6b      	cmp	r3, #107	; 0x6b
   2f192:	d106      	bne.n	2f1a2 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   2f194:	687b      	ldr	r3, [r7, #4]
   2f196:	2241      	movs	r2, #65	; 0x41
   2f198:	5c99      	ldrb	r1, [r3, r2]
   2f19a:	2002      	movs	r0, #2
   2f19c:	4301      	orrs	r1, r0
   2f19e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   2f1a0:	e038      	b.n	2f214 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   2f1a2:	687b      	ldr	r3, [r7, #4]
   2f1a4:	2241      	movs	r2, #65	; 0x41
   2f1a6:	5c99      	ldrb	r1, [r3, r2]
   2f1a8:	2002      	movs	r0, #2
   2f1aa:	4381      	bics	r1, r0
   2f1ac:	5499      	strb	r1, [r3, r2]
				break;
   2f1ae:	e031      	b.n	2f214 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   2f1b0:	69ba      	ldr	r2, [r7, #24]
   2f1b2:	69fb      	ldr	r3, [r7, #28]
   2f1b4:	429a      	cmp	r2, r3
   2f1b6:	d8dd      	bhi.n	2f174 <_http_client_handle_header+0x1bc>
   2f1b8:	e02c      	b.n	2f214 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   2f1ba:	4927      	ldr	r1, [pc, #156]	; (2f258 <_http_client_handle_header+0x2a0>)
   2f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f1be:	2205      	movs	r2, #5
   2f1c0:	0018      	movs	r0, r3
   2f1c2:	4b1f      	ldr	r3, [pc, #124]	; (2f240 <_http_client_handle_header+0x288>)
   2f1c4:	4798      	blx	r3
   2f1c6:	1e03      	subs	r3, r0, #0
   2f1c8:	d124      	bne.n	2f214 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   2f1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f1cc:	3309      	adds	r3, #9
   2f1ce:	0018      	movs	r0, r3
   2f1d0:	4b1d      	ldr	r3, [pc, #116]	; (2f248 <_http_client_handle_header+0x290>)
   2f1d2:	4798      	blx	r3
   2f1d4:	0003      	movs	r3, r0
   2f1d6:	b299      	uxth	r1, r3
   2f1d8:	687b      	ldr	r3, [r7, #4]
   2f1da:	22e4      	movs	r2, #228	; 0xe4
   2f1dc:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   2f1de:	687b      	ldr	r3, [r7, #4]
   2f1e0:	22dc      	movs	r2, #220	; 0xdc
   2f1e2:	2100      	movs	r1, #0
   2f1e4:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   2f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f1e8:	3305      	adds	r3, #5
   2f1ea:	781b      	ldrb	r3, [r3, #0]
   2f1ec:	2b31      	cmp	r3, #49	; 0x31
   2f1ee:	d804      	bhi.n	2f1fa <_http_client_handle_header+0x242>
   2f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f1f2:	3307      	adds	r3, #7
   2f1f4:	781b      	ldrb	r3, [r3, #0]
   2f1f6:	2b30      	cmp	r3, #48	; 0x30
   2f1f8:	d906      	bls.n	2f208 <_http_client_handle_header+0x250>
				module->permanent = 1;
   2f1fa:	687b      	ldr	r3, [r7, #4]
   2f1fc:	2241      	movs	r2, #65	; 0x41
   2f1fe:	5c99      	ldrb	r1, [r3, r2]
   2f200:	2002      	movs	r0, #2
   2f202:	4301      	orrs	r1, r0
   2f204:	5499      	strb	r1, [r3, r2]
   2f206:	e005      	b.n	2f214 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   2f208:	687b      	ldr	r3, [r7, #4]
   2f20a:	2241      	movs	r2, #65	; 0x41
   2f20c:	5c99      	ldrb	r1, [r3, r2]
   2f20e:	2002      	movs	r0, #2
   2f210:	4381      	bics	r1, r0
   2f212:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   2f214:	4b06      	ldr	r3, [pc, #24]	; (2f230 <_http_client_handle_header+0x278>)
   2f216:	681b      	ldr	r3, [r3, #0]
   2f218:	0018      	movs	r0, r3
   2f21a:	4b08      	ldr	r3, [pc, #32]	; (2f23c <_http_client_handle_header+0x284>)
   2f21c:	4798      	blx	r3
   2f21e:	0002      	movs	r2, r0
   2f220:	69bb      	ldr	r3, [r7, #24]
   2f222:	189b      	adds	r3, r3, r2
   2f224:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   2f226:	e6ce      	b.n	2efc6 <_http_client_handle_header+0xe>
	}
}
   2f228:	0018      	movs	r0, r3
   2f22a:	46bd      	mov	sp, r7
   2f22c:	b00b      	add	sp, #44	; 0x2c
   2f22e:	bd90      	pop	{r4, r7, pc}
   2f230:	200000d0 	.word	0x200000d0
   2f234:	00032d25 	.word	0x00032d25
   2f238:	0002f61d 	.word	0x0002f61d
   2f23c:	00032c5f 	.word	0x00032c5f
   2f240:	00032cb5 	.word	0x00032cb5
   2f244:	0003803c 	.word	0x0003803c
   2f248:	000327f5 	.word	0x000327f5
   2f24c:	00038060 	.word	0x00038060
   2f250:	0002e635 	.word	0x0002e635
   2f254:	00038074 	.word	0x00038074
   2f258:	00038084 	.word	0x00038084

0002f25c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   2f25c:	b580      	push	{r7, lr}
   2f25e:	b088      	sub	sp, #32
   2f260:	af00      	add	r7, sp, #0
   2f262:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   2f264:	687b      	ldr	r3, [r7, #4]
   2f266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f268:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   2f26a:	2300      	movs	r3, #0
   2f26c:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   2f26e:	687b      	ldr	r3, [r7, #4]
   2f270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f272:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   2f274:	687b      	ldr	r3, [r7, #4]
   2f276:	22e0      	movs	r2, #224	; 0xe0
   2f278:	589b      	ldr	r3, [r3, r2]
   2f27a:	2b00      	cmp	r3, #0
   2f27c:	db71      	blt.n	2f362 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   2f27e:	687b      	ldr	r3, [r7, #4]
   2f280:	22e0      	movs	r2, #224	; 0xe0
   2f282:	589b      	ldr	r3, [r3, r2]
   2f284:	2b00      	cmp	r3, #0
   2f286:	d134      	bne.n	2f2f2 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   2f288:	687b      	ldr	r3, [r7, #4]
   2f28a:	22d8      	movs	r2, #216	; 0xd8
   2f28c:	2100      	movs	r1, #0
   2f28e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   2f290:	687b      	ldr	r3, [r7, #4]
   2f292:	22e4      	movs	r2, #228	; 0xe4
   2f294:	2100      	movs	r1, #0
   2f296:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   2f298:	2308      	movs	r3, #8
   2f29a:	18fb      	adds	r3, r7, r3
   2f29c:	2201      	movs	r2, #1
   2f29e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   2f2a0:	2308      	movs	r3, #8
   2f2a2:	18fb      	adds	r3, r7, r3
   2f2a4:	2200      	movs	r2, #0
   2f2a6:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   2f2a8:	2308      	movs	r3, #8
   2f2aa:	18fb      	adds	r3, r7, r3
   2f2ac:	2200      	movs	r2, #0
   2f2ae:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   2f2b0:	687b      	ldr	r3, [r7, #4]
   2f2b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f2b4:	2b00      	cmp	r3, #0
   2f2b6:	d006      	beq.n	2f2c6 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2f2b8:	687b      	ldr	r3, [r7, #4]
   2f2ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f2bc:	2208      	movs	r2, #8
   2f2be:	18ba      	adds	r2, r7, r2
   2f2c0:	6878      	ldr	r0, [r7, #4]
   2f2c2:	2103      	movs	r1, #3
   2f2c4:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   2f2c6:	687b      	ldr	r3, [r7, #4]
   2f2c8:	2241      	movs	r2, #65	; 0x41
   2f2ca:	5c9b      	ldrb	r3, [r3, r2]
   2f2cc:	2202      	movs	r2, #2
   2f2ce:	4013      	ands	r3, r2
   2f2d0:	b2db      	uxtb	r3, r3
   2f2d2:	2b00      	cmp	r3, #0
   2f2d4:	d105      	bne.n	2f2e2 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   2f2d6:	687b      	ldr	r3, [r7, #4]
   2f2d8:	2100      	movs	r1, #0
   2f2da:	0018      	movs	r0, r3
   2f2dc:	4b62      	ldr	r3, [pc, #392]	; (2f468 <_http_client_read_chuked_entity+0x20c>)
   2f2de:	4798      	blx	r3
					return;
   2f2e0:	e0bf      	b.n	2f462 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   2f2e2:	697b      	ldr	r3, [r7, #20]
   2f2e4:	1c9a      	adds	r2, r3, #2
   2f2e6:	687b      	ldr	r3, [r7, #4]
   2f2e8:	0011      	movs	r1, r2
   2f2ea:	0018      	movs	r0, r3
   2f2ec:	4b5f      	ldr	r3, [pc, #380]	; (2f46c <_http_client_read_chuked_entity+0x210>)
   2f2ee:	4798      	blx	r3
   2f2f0:	e0b2      	b.n	2f458 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   2f2f2:	687b      	ldr	r3, [r7, #4]
   2f2f4:	22e0      	movs	r2, #224	; 0xe0
   2f2f6:	589a      	ldr	r2, [r3, r2]
   2f2f8:	69fb      	ldr	r3, [r7, #28]
   2f2fa:	429a      	cmp	r2, r3
   2f2fc:	dd00      	ble.n	2f300 <_http_client_read_chuked_entity+0xa4>
   2f2fe:	e0ab      	b.n	2f458 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   2f300:	687b      	ldr	r3, [r7, #4]
   2f302:	22e0      	movs	r2, #224	; 0xe0
   2f304:	589b      	ldr	r3, [r3, r2]
   2f306:	001a      	movs	r2, r3
   2f308:	2308      	movs	r3, #8
   2f30a:	18fb      	adds	r3, r7, r3
   2f30c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   2f30e:	2308      	movs	r3, #8
   2f310:	18fb      	adds	r3, r7, r3
   2f312:	697a      	ldr	r2, [r7, #20]
   2f314:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   2f316:	2308      	movs	r3, #8
   2f318:	18fb      	adds	r3, r7, r3
   2f31a:	2200      	movs	r2, #0
   2f31c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   2f31e:	687b      	ldr	r3, [r7, #4]
   2f320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f322:	2b00      	cmp	r3, #0
   2f324:	d006      	beq.n	2f334 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2f326:	687b      	ldr	r3, [r7, #4]
   2f328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f32a:	2208      	movs	r2, #8
   2f32c:	18ba      	adds	r2, r7, r2
   2f32e:	6878      	ldr	r0, [r7, #4]
   2f330:	2103      	movs	r1, #3
   2f332:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   2f334:	687b      	ldr	r3, [r7, #4]
   2f336:	22e0      	movs	r2, #224	; 0xe0
   2f338:	589b      	ldr	r3, [r3, r2]
   2f33a:	3302      	adds	r3, #2
   2f33c:	697a      	ldr	r2, [r7, #20]
   2f33e:	18d2      	adds	r2, r2, r3
   2f340:	687b      	ldr	r3, [r7, #4]
   2f342:	0011      	movs	r1, r2
   2f344:	0018      	movs	r0, r3
   2f346:	4b49      	ldr	r3, [pc, #292]	; (2f46c <_http_client_read_chuked_entity+0x210>)
   2f348:	4798      	blx	r3
				length = (int)module->recved_size;
   2f34a:	687b      	ldr	r3, [r7, #4]
   2f34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f34e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   2f350:	687b      	ldr	r3, [r7, #4]
   2f352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f354:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   2f356:	687b      	ldr	r3, [r7, #4]
   2f358:	21e0      	movs	r1, #224	; 0xe0
   2f35a:	2201      	movs	r2, #1
   2f35c:	4252      	negs	r2, r2
   2f35e:	505a      	str	r2, [r3, r1]
   2f360:	e07a      	b.n	2f458 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   2f362:	687b      	ldr	r3, [r7, #4]
   2f364:	22e0      	movs	r2, #224	; 0xe0
   2f366:	2100      	movs	r1, #0
   2f368:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   2f36a:	e05a      	b.n	2f422 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   2f36c:	697b      	ldr	r3, [r7, #20]
   2f36e:	781b      	ldrb	r3, [r3, #0]
   2f370:	2b0a      	cmp	r3, #10
   2f372:	d106      	bne.n	2f382 <_http_client_read_chuked_entity+0x126>
					buffer++;
   2f374:	697b      	ldr	r3, [r7, #20]
   2f376:	3301      	adds	r3, #1
   2f378:	617b      	str	r3, [r7, #20]
					length--;
   2f37a:	69fb      	ldr	r3, [r7, #28]
   2f37c:	3b01      	subs	r3, #1
   2f37e:	61fb      	str	r3, [r7, #28]
					break;
   2f380:	e052      	b.n	2f428 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   2f382:	69bb      	ldr	r3, [r7, #24]
   2f384:	2b00      	cmp	r3, #0
   2f386:	d145      	bne.n	2f414 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   2f388:	697b      	ldr	r3, [r7, #20]
   2f38a:	781b      	ldrb	r3, [r3, #0]
   2f38c:	2b2f      	cmp	r3, #47	; 0x2f
   2f38e:	d910      	bls.n	2f3b2 <_http_client_read_chuked_entity+0x156>
   2f390:	697b      	ldr	r3, [r7, #20]
   2f392:	781b      	ldrb	r3, [r3, #0]
   2f394:	2b39      	cmp	r3, #57	; 0x39
   2f396:	d80c      	bhi.n	2f3b2 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   2f398:	687b      	ldr	r3, [r7, #4]
   2f39a:	22e0      	movs	r2, #224	; 0xe0
   2f39c:	589b      	ldr	r3, [r3, r2]
   2f39e:	011b      	lsls	r3, r3, #4
   2f3a0:	697a      	ldr	r2, [r7, #20]
   2f3a2:	7812      	ldrb	r2, [r2, #0]
   2f3a4:	189b      	adds	r3, r3, r2
   2f3a6:	3b30      	subs	r3, #48	; 0x30
   2f3a8:	001a      	movs	r2, r3
   2f3aa:	687b      	ldr	r3, [r7, #4]
   2f3ac:	21e0      	movs	r1, #224	; 0xe0
   2f3ae:	505a      	str	r2, [r3, r1]
   2f3b0:	e031      	b.n	2f416 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   2f3b2:	697b      	ldr	r3, [r7, #20]
   2f3b4:	781b      	ldrb	r3, [r3, #0]
   2f3b6:	2b60      	cmp	r3, #96	; 0x60
   2f3b8:	d910      	bls.n	2f3dc <_http_client_read_chuked_entity+0x180>
   2f3ba:	697b      	ldr	r3, [r7, #20]
   2f3bc:	781b      	ldrb	r3, [r3, #0]
   2f3be:	2b66      	cmp	r3, #102	; 0x66
   2f3c0:	d80c      	bhi.n	2f3dc <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   2f3c2:	687b      	ldr	r3, [r7, #4]
   2f3c4:	22e0      	movs	r2, #224	; 0xe0
   2f3c6:	589b      	ldr	r3, [r3, r2]
   2f3c8:	011b      	lsls	r3, r3, #4
   2f3ca:	697a      	ldr	r2, [r7, #20]
   2f3cc:	7812      	ldrb	r2, [r2, #0]
   2f3ce:	189b      	adds	r3, r3, r2
   2f3d0:	3b61      	subs	r3, #97	; 0x61
   2f3d2:	001a      	movs	r2, r3
   2f3d4:	687b      	ldr	r3, [r7, #4]
   2f3d6:	21e0      	movs	r1, #224	; 0xe0
   2f3d8:	505a      	str	r2, [r3, r1]
   2f3da:	e01c      	b.n	2f416 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   2f3dc:	697b      	ldr	r3, [r7, #20]
   2f3de:	781b      	ldrb	r3, [r3, #0]
   2f3e0:	2b40      	cmp	r3, #64	; 0x40
   2f3e2:	d910      	bls.n	2f406 <_http_client_read_chuked_entity+0x1aa>
   2f3e4:	697b      	ldr	r3, [r7, #20]
   2f3e6:	781b      	ldrb	r3, [r3, #0]
   2f3e8:	2b46      	cmp	r3, #70	; 0x46
   2f3ea:	d80c      	bhi.n	2f406 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   2f3ec:	687b      	ldr	r3, [r7, #4]
   2f3ee:	22e0      	movs	r2, #224	; 0xe0
   2f3f0:	589b      	ldr	r3, [r3, r2]
   2f3f2:	011b      	lsls	r3, r3, #4
   2f3f4:	697a      	ldr	r2, [r7, #20]
   2f3f6:	7812      	ldrb	r2, [r2, #0]
   2f3f8:	189b      	adds	r3, r3, r2
   2f3fa:	3b41      	subs	r3, #65	; 0x41
   2f3fc:	001a      	movs	r2, r3
   2f3fe:	687b      	ldr	r3, [r7, #4]
   2f400:	21e0      	movs	r1, #224	; 0xe0
   2f402:	505a      	str	r2, [r3, r1]
   2f404:	e007      	b.n	2f416 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   2f406:	697b      	ldr	r3, [r7, #20]
   2f408:	781b      	ldrb	r3, [r3, #0]
   2f40a:	2b3b      	cmp	r3, #59	; 0x3b
   2f40c:	d103      	bne.n	2f416 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   2f40e:	2301      	movs	r3, #1
   2f410:	61bb      	str	r3, [r7, #24]
   2f412:	e000      	b.n	2f416 <_http_client_read_chuked_entity+0x1ba>
					continue;
   2f414:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   2f416:	697b      	ldr	r3, [r7, #20]
   2f418:	3301      	adds	r3, #1
   2f41a:	617b      	str	r3, [r7, #20]
   2f41c:	69fb      	ldr	r3, [r7, #28]
   2f41e:	3b01      	subs	r3, #1
   2f420:	61fb      	str	r3, [r7, #28]
   2f422:	69fb      	ldr	r3, [r7, #28]
   2f424:	2b00      	cmp	r3, #0
   2f426:	dca1      	bgt.n	2f36c <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   2f428:	687b      	ldr	r3, [r7, #4]
   2f42a:	22e0      	movs	r2, #224	; 0xe0
   2f42c:	589a      	ldr	r2, [r3, r2]
   2f42e:	687b      	ldr	r3, [r7, #4]
   2f430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2f432:	429a      	cmp	r2, r3
   2f434:	dd07      	ble.n	2f446 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   2f436:	238b      	movs	r3, #139	; 0x8b
   2f438:	425a      	negs	r2, r3
   2f43a:	687b      	ldr	r3, [r7, #4]
   2f43c:	0011      	movs	r1, r2
   2f43e:	0018      	movs	r0, r3
   2f440:	4b09      	ldr	r3, [pc, #36]	; (2f468 <_http_client_read_chuked_entity+0x20c>)
   2f442:	4798      	blx	r3
				return;
   2f444:	e00d      	b.n	2f462 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   2f446:	69fb      	ldr	r3, [r7, #28]
   2f448:	2b00      	cmp	r3, #0
   2f44a:	d105      	bne.n	2f458 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   2f44c:	687b      	ldr	r3, [r7, #4]
   2f44e:	21e0      	movs	r1, #224	; 0xe0
   2f450:	2201      	movs	r2, #1
   2f452:	4252      	negs	r2, r2
   2f454:	505a      	str	r2, [r3, r1]
				return;
   2f456:	e004      	b.n	2f462 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   2f458:	687b      	ldr	r3, [r7, #4]
   2f45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f45c:	2b00      	cmp	r3, #0
   2f45e:	d000      	beq.n	2f462 <_http_client_read_chuked_entity+0x206>
   2f460:	e708      	b.n	2f274 <_http_client_read_chuked_entity+0x18>
}
   2f462:	46bd      	mov	sp, r7
   2f464:	b008      	add	sp, #32
   2f466:	bd80      	pop	{r7, pc}
   2f468:	0002e635 	.word	0x0002e635
   2f46c:	0002f61d 	.word	0x0002f61d

0002f470 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   2f470:	b580      	push	{r7, lr}
   2f472:	b086      	sub	sp, #24
   2f474:	af00      	add	r7, sp, #0
   2f476:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   2f478:	687b      	ldr	r3, [r7, #4]
   2f47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f47c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   2f47e:	687b      	ldr	r3, [r7, #4]
   2f480:	22dc      	movs	r2, #220	; 0xdc
   2f482:	589b      	ldr	r3, [r3, r2]
   2f484:	2b00      	cmp	r3, #0
   2f486:	db58      	blt.n	2f53a <_http_client_handle_entity+0xca>
   2f488:	687b      	ldr	r3, [r7, #4]
   2f48a:	22dc      	movs	r2, #220	; 0xdc
   2f48c:	589a      	ldr	r2, [r3, r2]
   2f48e:	687b      	ldr	r3, [r7, #4]
   2f490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2f492:	429a      	cmp	r2, r3
   2f494:	dc51      	bgt.n	2f53a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   2f496:	687b      	ldr	r3, [r7, #4]
   2f498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f49a:	0019      	movs	r1, r3
   2f49c:	687b      	ldr	r3, [r7, #4]
   2f49e:	22dc      	movs	r2, #220	; 0xdc
   2f4a0:	589b      	ldr	r3, [r3, r2]
   2f4a2:	4299      	cmp	r1, r3
   2f4a4:	da00      	bge.n	2f4a8 <_http_client_handle_entity+0x38>
   2f4a6:	e0a9      	b.n	2f5fc <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   2f4a8:	687b      	ldr	r3, [r7, #4]
   2f4aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f4ac:	2b00      	cmp	r3, #0
   2f4ae:	d020      	beq.n	2f4f2 <_http_client_handle_entity+0x82>
   2f4b0:	687b      	ldr	r3, [r7, #4]
   2f4b2:	22e4      	movs	r2, #228	; 0xe4
   2f4b4:	5a9b      	ldrh	r3, [r3, r2]
   2f4b6:	2b00      	cmp	r3, #0
   2f4b8:	d01b      	beq.n	2f4f2 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   2f4ba:	687b      	ldr	r3, [r7, #4]
   2f4bc:	22e4      	movs	r2, #228	; 0xe4
   2f4be:	5a9a      	ldrh	r2, [r3, r2]
   2f4c0:	2308      	movs	r3, #8
   2f4c2:	18fb      	adds	r3, r7, r3
   2f4c4:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   2f4c6:	2308      	movs	r3, #8
   2f4c8:	18fb      	adds	r3, r7, r3
   2f4ca:	2200      	movs	r2, #0
   2f4cc:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   2f4ce:	687b      	ldr	r3, [r7, #4]
   2f4d0:	22dc      	movs	r2, #220	; 0xdc
   2f4d2:	589b      	ldr	r3, [r3, r2]
   2f4d4:	001a      	movs	r2, r3
   2f4d6:	2308      	movs	r3, #8
   2f4d8:	18fb      	adds	r3, r7, r3
   2f4da:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   2f4dc:	2308      	movs	r3, #8
   2f4de:	18fb      	adds	r3, r7, r3
   2f4e0:	697a      	ldr	r2, [r7, #20]
   2f4e2:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   2f4e4:	687b      	ldr	r3, [r7, #4]
   2f4e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f4e8:	2208      	movs	r2, #8
   2f4ea:	18ba      	adds	r2, r7, r2
   2f4ec:	6878      	ldr	r0, [r7, #4]
   2f4ee:	2102      	movs	r1, #2
   2f4f0:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   2f4f2:	687b      	ldr	r3, [r7, #4]
   2f4f4:	22d8      	movs	r2, #216	; 0xd8
   2f4f6:	2100      	movs	r1, #0
   2f4f8:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   2f4fa:	687b      	ldr	r3, [r7, #4]
   2f4fc:	22e4      	movs	r2, #228	; 0xe4
   2f4fe:	2100      	movs	r1, #0
   2f500:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   2f502:	687b      	ldr	r3, [r7, #4]
   2f504:	2241      	movs	r2, #65	; 0x41
   2f506:	5c9b      	ldrb	r3, [r3, r2]
   2f508:	2202      	movs	r2, #2
   2f50a:	4013      	ands	r3, r2
   2f50c:	b2db      	uxtb	r3, r3
   2f50e:	2b00      	cmp	r3, #0
   2f510:	d105      	bne.n	2f51e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   2f512:	687b      	ldr	r3, [r7, #4]
   2f514:	2100      	movs	r1, #0
   2f516:	0018      	movs	r0, r3
   2f518:	4b3b      	ldr	r3, [pc, #236]	; (2f608 <_http_client_handle_entity+0x198>)
   2f51a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   2f51c:	e06e      	b.n	2f5fc <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   2f51e:	687b      	ldr	r3, [r7, #4]
   2f520:	22dc      	movs	r2, #220	; 0xdc
   2f522:	589b      	ldr	r3, [r3, r2]
   2f524:	001a      	movs	r2, r3
   2f526:	697b      	ldr	r3, [r7, #20]
   2f528:	189a      	adds	r2, r3, r2
   2f52a:	687b      	ldr	r3, [r7, #4]
   2f52c:	0011      	movs	r1, r2
   2f52e:	0018      	movs	r0, r3
   2f530:	4b36      	ldr	r3, [pc, #216]	; (2f60c <_http_client_handle_entity+0x19c>)
   2f532:	4798      	blx	r3
				return module->recved_size;
   2f534:	687b      	ldr	r3, [r7, #4]
   2f536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f538:	e061      	b.n	2f5fe <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   2f53a:	687b      	ldr	r3, [r7, #4]
   2f53c:	22dc      	movs	r2, #220	; 0xdc
   2f53e:	589b      	ldr	r3, [r3, r2]
   2f540:	2b00      	cmp	r3, #0
   2f542:	db57      	blt.n	2f5f4 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   2f544:	687b      	ldr	r3, [r7, #4]
   2f546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f548:	2308      	movs	r3, #8
   2f54a:	18fb      	adds	r3, r7, r3
   2f54c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   2f54e:	2308      	movs	r3, #8
   2f550:	18fb      	adds	r3, r7, r3
   2f552:	697a      	ldr	r2, [r7, #20]
   2f554:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   2f556:	687b      	ldr	r3, [r7, #4]
   2f558:	22e0      	movs	r2, #224	; 0xe0
   2f55a:	589a      	ldr	r2, [r3, r2]
   2f55c:	687b      	ldr	r3, [r7, #4]
   2f55e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f560:	18d2      	adds	r2, r2, r3
   2f562:	687b      	ldr	r3, [r7, #4]
   2f564:	21e0      	movs	r1, #224	; 0xe0
   2f566:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   2f568:	687b      	ldr	r3, [r7, #4]
   2f56a:	22dc      	movs	r2, #220	; 0xdc
   2f56c:	589a      	ldr	r2, [r3, r2]
   2f56e:	687b      	ldr	r3, [r7, #4]
   2f570:	21e0      	movs	r1, #224	; 0xe0
   2f572:	585b      	ldr	r3, [r3, r1]
   2f574:	429a      	cmp	r2, r3
   2f576:	dc0c      	bgt.n	2f592 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   2f578:	687b      	ldr	r3, [r7, #4]
   2f57a:	22d8      	movs	r2, #216	; 0xd8
   2f57c:	2100      	movs	r1, #0
   2f57e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   2f580:	687b      	ldr	r3, [r7, #4]
   2f582:	22e4      	movs	r2, #228	; 0xe4
   2f584:	2100      	movs	r1, #0
   2f586:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   2f588:	2308      	movs	r3, #8
   2f58a:	18fb      	adds	r3, r7, r3
   2f58c:	2201      	movs	r2, #1
   2f58e:	721a      	strb	r2, [r3, #8]
   2f590:	e003      	b.n	2f59a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   2f592:	2308      	movs	r3, #8
   2f594:	18fb      	adds	r3, r7, r3
   2f596:	2200      	movs	r2, #0
   2f598:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   2f59a:	687b      	ldr	r3, [r7, #4]
   2f59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f59e:	2b00      	cmp	r3, #0
   2f5a0:	d006      	beq.n	2f5b0 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2f5a2:	687b      	ldr	r3, [r7, #4]
   2f5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f5a6:	2208      	movs	r2, #8
   2f5a8:	18ba      	adds	r2, r7, r2
   2f5aa:	6878      	ldr	r0, [r7, #4]
   2f5ac:	2103      	movs	r1, #3
   2f5ae:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   2f5b0:	2308      	movs	r3, #8
   2f5b2:	18fb      	adds	r3, r7, r3
   2f5b4:	7a1b      	ldrb	r3, [r3, #8]
   2f5b6:	2b01      	cmp	r3, #1
   2f5b8:	d112      	bne.n	2f5e0 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   2f5ba:	687b      	ldr	r3, [r7, #4]
   2f5bc:	2241      	movs	r2, #65	; 0x41
   2f5be:	5c9b      	ldrb	r3, [r3, r2]
   2f5c0:	2202      	movs	r2, #2
   2f5c2:	4013      	ands	r3, r2
   2f5c4:	b2db      	uxtb	r3, r3
   2f5c6:	2b00      	cmp	r3, #0
   2f5c8:	d10a      	bne.n	2f5e0 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   2f5ca:	4b11      	ldr	r3, [pc, #68]	; (2f610 <_http_client_handle_entity+0x1a0>)
   2f5cc:	0018      	movs	r0, r3
   2f5ce:	4b11      	ldr	r3, [pc, #68]	; (2f614 <_http_client_handle_entity+0x1a4>)
   2f5d0:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   2f5d2:	687b      	ldr	r3, [r7, #4]
   2f5d4:	2100      	movs	r1, #0
   2f5d6:	0018      	movs	r0, r3
   2f5d8:	4b0b      	ldr	r3, [pc, #44]	; (2f608 <_http_client_handle_entity+0x198>)
   2f5da:	4798      	blx	r3
					return 0;
   2f5dc:	2300      	movs	r3, #0
   2f5de:	e00e      	b.n	2f5fe <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   2f5e0:	687b      	ldr	r3, [r7, #4]
   2f5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f5e4:	697a      	ldr	r2, [r7, #20]
   2f5e6:	18d2      	adds	r2, r2, r3
   2f5e8:	687b      	ldr	r3, [r7, #4]
   2f5ea:	0011      	movs	r1, r2
   2f5ec:	0018      	movs	r0, r3
   2f5ee:	4b07      	ldr	r3, [pc, #28]	; (2f60c <_http_client_handle_entity+0x19c>)
   2f5f0:	4798      	blx	r3
   2f5f2:	e003      	b.n	2f5fc <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   2f5f4:	687b      	ldr	r3, [r7, #4]
   2f5f6:	0018      	movs	r0, r3
   2f5f8:	4b07      	ldr	r3, [pc, #28]	; (2f618 <_http_client_handle_entity+0x1a8>)
   2f5fa:	4798      	blx	r3
		}
	}

	return 0;
   2f5fc:	2300      	movs	r3, #0
}
   2f5fe:	0018      	movs	r0, r3
   2f600:	46bd      	mov	sp, r7
   2f602:	b006      	add	sp, #24
   2f604:	bd80      	pop	{r7, pc}
   2f606:	46c0      	nop			; (mov r8, r8)
   2f608:	0002e635 	.word	0x0002e635
   2f60c:	0002f61d 	.word	0x0002f61d
   2f610:	0003808c 	.word	0x0003808c
   2f614:	00032ac9 	.word	0x00032ac9
   2f618:	0002f25d 	.word	0x0002f25d

0002f61c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   2f61c:	b580      	push	{r7, lr}
   2f61e:	b084      	sub	sp, #16
   2f620:	af00      	add	r7, sp, #0
   2f622:	6078      	str	r0, [r7, #4]
   2f624:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   2f626:	687b      	ldr	r3, [r7, #4]
   2f628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f62a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   2f62c:	687b      	ldr	r3, [r7, #4]
   2f62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2f630:	001a      	movs	r2, r3
   2f632:	683b      	ldr	r3, [r7, #0]
   2f634:	1ad2      	subs	r2, r2, r3
   2f636:	68fb      	ldr	r3, [r7, #12]
   2f638:	18d3      	adds	r3, r2, r3
   2f63a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   2f63c:	68bb      	ldr	r3, [r7, #8]
   2f63e:	2b00      	cmp	r3, #0
   2f640:	dd09      	ble.n	2f656 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   2f642:	68ba      	ldr	r2, [r7, #8]
   2f644:	6839      	ldr	r1, [r7, #0]
   2f646:	68fb      	ldr	r3, [r7, #12]
   2f648:	0018      	movs	r0, r3
   2f64a:	4b06      	ldr	r3, [pc, #24]	; (2f664 <_http_client_move_buffer+0x48>)
   2f64c:	4798      	blx	r3
		module->recved_size = remain;
   2f64e:	68ba      	ldr	r2, [r7, #8]
   2f650:	687b      	ldr	r3, [r7, #4]
   2f652:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   2f654:	e002      	b.n	2f65c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   2f656:	687b      	ldr	r3, [r7, #4]
   2f658:	2200      	movs	r2, #0
   2f65a:	645a      	str	r2, [r3, #68]	; 0x44
}
   2f65c:	46c0      	nop			; (mov r8, r8)
   2f65e:	46bd      	mov	sp, r7
   2f660:	b004      	add	sp, #16
   2f662:	bd80      	pop	{r7, pc}
   2f664:	00032883 	.word	0x00032883

0002f668 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   2f668:	b580      	push	{r7, lr}
   2f66a:	b084      	sub	sp, #16
   2f66c:	af00      	add	r7, sp, #0
   2f66e:	60f8      	str	r0, [r7, #12]
   2f670:	60b9      	str	r1, [r7, #8]
   2f672:	607a      	str	r2, [r7, #4]
   2f674:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   2f676:	68fb      	ldr	r3, [r7, #12]
   2f678:	687a      	ldr	r2, [r7, #4]
   2f67a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   2f67c:	68fb      	ldr	r3, [r7, #12]
   2f67e:	68ba      	ldr	r2, [r7, #8]
   2f680:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   2f682:	68fb      	ldr	r3, [r7, #12]
   2f684:	2200      	movs	r2, #0
   2f686:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   2f688:	68fb      	ldr	r3, [r7, #12]
   2f68a:	683a      	ldr	r2, [r7, #0]
   2f68c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   2f68e:	68fb      	ldr	r3, [r7, #12]
   2f690:	69ba      	ldr	r2, [r7, #24]
   2f692:	60da      	str	r2, [r3, #12]
}
   2f694:	46c0      	nop			; (mov r8, r8)
   2f696:	46bd      	mov	sp, r7
   2f698:	b004      	add	sp, #16
   2f69a:	bd80      	pop	{r7, pc}

0002f69c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   2f69c:	b580      	push	{r7, lr}
   2f69e:	b084      	sub	sp, #16
   2f6a0:	af00      	add	r7, sp, #0
   2f6a2:	6078      	str	r0, [r7, #4]
   2f6a4:	000a      	movs	r2, r1
   2f6a6:	1cfb      	adds	r3, r7, #3
   2f6a8:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   2f6aa:	687b      	ldr	r3, [r7, #4]
   2f6ac:	681a      	ldr	r2, [r3, #0]
   2f6ae:	687b      	ldr	r3, [r7, #4]
   2f6b0:	685b      	ldr	r3, [r3, #4]
   2f6b2:	1ad3      	subs	r3, r2, r3
   2f6b4:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   2f6b6:	68fb      	ldr	r3, [r7, #12]
   2f6b8:	2b00      	cmp	r3, #0
   2f6ba:	dc03      	bgt.n	2f6c4 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   2f6bc:	687b      	ldr	r3, [r7, #4]
   2f6be:	0018      	movs	r0, r3
   2f6c0:	4b08      	ldr	r3, [pc, #32]	; (2f6e4 <stream_writer_send_8+0x48>)
   2f6c2:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   2f6c4:	687b      	ldr	r3, [r7, #4]
   2f6c6:	6919      	ldr	r1, [r3, #16]
   2f6c8:	687b      	ldr	r3, [r7, #4]
   2f6ca:	685b      	ldr	r3, [r3, #4]
   2f6cc:	1c58      	adds	r0, r3, #1
   2f6ce:	687a      	ldr	r2, [r7, #4]
   2f6d0:	6050      	str	r0, [r2, #4]
   2f6d2:	18cb      	adds	r3, r1, r3
   2f6d4:	1cfa      	adds	r2, r7, #3
   2f6d6:	7812      	ldrb	r2, [r2, #0]
   2f6d8:	701a      	strb	r2, [r3, #0]
}
   2f6da:	46c0      	nop			; (mov r8, r8)
   2f6dc:	46bd      	mov	sp, r7
   2f6de:	b004      	add	sp, #16
   2f6e0:	bd80      	pop	{r7, pc}
   2f6e2:	46c0      	nop			; (mov r8, r8)
   2f6e4:	0002f725 	.word	0x0002f725

0002f6e8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   2f6e8:	b580      	push	{r7, lr}
   2f6ea:	b084      	sub	sp, #16
   2f6ec:	af00      	add	r7, sp, #0
   2f6ee:	60f8      	str	r0, [r7, #12]
   2f6f0:	60b9      	str	r1, [r7, #8]
   2f6f2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   2f6f4:	e00d      	b.n	2f712 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   2f6f6:	68bb      	ldr	r3, [r7, #8]
   2f6f8:	781b      	ldrb	r3, [r3, #0]
   2f6fa:	b25a      	sxtb	r2, r3
   2f6fc:	68fb      	ldr	r3, [r7, #12]
   2f6fe:	0011      	movs	r1, r2
   2f700:	0018      	movs	r0, r3
   2f702:	4b07      	ldr	r3, [pc, #28]	; (2f720 <stream_writer_send_buffer+0x38>)
   2f704:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   2f706:	687b      	ldr	r3, [r7, #4]
   2f708:	3b01      	subs	r3, #1
   2f70a:	607b      	str	r3, [r7, #4]
   2f70c:	68bb      	ldr	r3, [r7, #8]
   2f70e:	3301      	adds	r3, #1
   2f710:	60bb      	str	r3, [r7, #8]
   2f712:	687b      	ldr	r3, [r7, #4]
   2f714:	2b00      	cmp	r3, #0
   2f716:	d1ee      	bne.n	2f6f6 <stream_writer_send_buffer+0xe>
	}
}
   2f718:	46c0      	nop			; (mov r8, r8)
   2f71a:	46bd      	mov	sp, r7
   2f71c:	b004      	add	sp, #16
   2f71e:	bd80      	pop	{r7, pc}
   2f720:	0002f69d 	.word	0x0002f69d

0002f724 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   2f724:	b590      	push	{r4, r7, lr}
   2f726:	b083      	sub	sp, #12
   2f728:	af00      	add	r7, sp, #0
   2f72a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   2f72c:	687b      	ldr	r3, [r7, #4]
   2f72e:	685b      	ldr	r3, [r3, #4]
   2f730:	2b00      	cmp	r3, #0
   2f732:	d00c      	beq.n	2f74e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   2f734:	687b      	ldr	r3, [r7, #4]
   2f736:	689c      	ldr	r4, [r3, #8]
   2f738:	687b      	ldr	r3, [r7, #4]
   2f73a:	68d8      	ldr	r0, [r3, #12]
   2f73c:	687b      	ldr	r3, [r7, #4]
   2f73e:	6919      	ldr	r1, [r3, #16]
   2f740:	687b      	ldr	r3, [r7, #4]
   2f742:	685b      	ldr	r3, [r3, #4]
   2f744:	001a      	movs	r2, r3
   2f746:	47a0      	blx	r4
		writer->written = 0;
   2f748:	687b      	ldr	r3, [r7, #4]
   2f74a:	2200      	movs	r2, #0
   2f74c:	605a      	str	r2, [r3, #4]
	}
}
   2f74e:	46c0      	nop			; (mov r8, r8)
   2f750:	46bd      	mov	sp, r7
   2f752:	b003      	add	sp, #12
   2f754:	bd90      	pop	{r4, r7, pc}
	...

0002f758 <system_cpu_clock_get_hz>:
{
   2f758:	b580      	push	{r7, lr}
   2f75a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   2f75c:	2000      	movs	r0, #0
   2f75e:	4b05      	ldr	r3, [pc, #20]	; (2f774 <system_cpu_clock_get_hz+0x1c>)
   2f760:	4798      	blx	r3
   2f762:	0002      	movs	r2, r0
   2f764:	4b04      	ldr	r3, [pc, #16]	; (2f778 <system_cpu_clock_get_hz+0x20>)
   2f766:	7a1b      	ldrb	r3, [r3, #8]
   2f768:	b2db      	uxtb	r3, r3
   2f76a:	40da      	lsrs	r2, r3
   2f76c:	0013      	movs	r3, r2
}
   2f76e:	0018      	movs	r0, r3
   2f770:	46bd      	mov	sp, r7
   2f772:	bd80      	pop	{r7, pc}
   2f774:	000268b5 	.word	0x000268b5
   2f778:	40000400 	.word	0x40000400

0002f77c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   2f77c:	b580      	push	{r7, lr}
   2f77e:	b084      	sub	sp, #16
   2f780:	af00      	add	r7, sp, #0
   2f782:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   2f784:	687b      	ldr	r3, [r7, #4]
   2f786:	681b      	ldr	r3, [r3, #0]
   2f788:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   2f78a:	46c0      	nop			; (mov r8, r8)
   2f78c:	68fb      	ldr	r3, [r7, #12]
   2f78e:	689b      	ldr	r3, [r3, #8]
   2f790:	2202      	movs	r2, #2
   2f792:	4013      	ands	r3, r2
   2f794:	d1fa      	bne.n	2f78c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   2f796:	68fb      	ldr	r3, [r7, #12]
   2f798:	681b      	ldr	r3, [r3, #0]
   2f79a:	2202      	movs	r2, #2
   2f79c:	431a      	orrs	r2, r3
   2f79e:	68fb      	ldr	r3, [r7, #12]
   2f7a0:	601a      	str	r2, [r3, #0]
}
   2f7a2:	46c0      	nop			; (mov r8, r8)
   2f7a4:	46bd      	mov	sp, r7
   2f7a6:	b004      	add	sp, #16
   2f7a8:	bd80      	pop	{r7, pc}
	...

0002f7ac <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   2f7ac:	b580      	push	{r7, lr}
   2f7ae:	b082      	sub	sp, #8
   2f7b0:	af00      	add	r7, sp, #0
   2f7b2:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   2f7b4:	4b04      	ldr	r3, [pc, #16]	; (2f7c8 <sw_timer_tcc_callback+0x1c>)
   2f7b6:	681b      	ldr	r3, [r3, #0]
   2f7b8:	1c5a      	adds	r2, r3, #1
   2f7ba:	4b03      	ldr	r3, [pc, #12]	; (2f7c8 <sw_timer_tcc_callback+0x1c>)
   2f7bc:	601a      	str	r2, [r3, #0]
}
   2f7be:	46c0      	nop			; (mov r8, r8)
   2f7c0:	46bd      	mov	sp, r7
   2f7c2:	b002      	add	sp, #8
   2f7c4:	bd80      	pop	{r7, pc}
   2f7c6:	46c0      	nop			; (mov r8, r8)
   2f7c8:	200042a4 	.word	0x200042a4

0002f7cc <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   2f7cc:	b580      	push	{r7, lr}
   2f7ce:	b082      	sub	sp, #8
   2f7d0:	af00      	add	r7, sp, #0
   2f7d2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   2f7d4:	687b      	ldr	r3, [r7, #4]
   2f7d6:	2264      	movs	r2, #100	; 0x64
   2f7d8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   2f7da:	687b      	ldr	r3, [r7, #4]
   2f7dc:	2200      	movs	r2, #0
   2f7de:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   2f7e0:	687b      	ldr	r3, [r7, #4]
   2f7e2:	2200      	movs	r2, #0
   2f7e4:	705a      	strb	r2, [r3, #1]
}
   2f7e6:	46c0      	nop			; (mov r8, r8)
   2f7e8:	46bd      	mov	sp, r7
   2f7ea:	b002      	add	sp, #8
   2f7ec:	bd80      	pop	{r7, pc}
	...

0002f7f0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   2f7f0:	b590      	push	{r4, r7, lr}
   2f7f2:	b0b1      	sub	sp, #196	; 0xc4
   2f7f4:	af00      	add	r7, sp, #0
   2f7f6:	6078      	str	r0, [r7, #4]
   2f7f8:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   2f7fa:	230c      	movs	r3, #12
   2f7fc:	18fb      	adds	r3, r7, r3
   2f7fe:	4a2e      	ldr	r2, [pc, #184]	; (2f8b8 <sw_timer_init+0xc8>)
   2f800:	ca13      	ldmia	r2!, {r0, r1, r4}
   2f802:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   2f804:	683b      	ldr	r3, [r7, #0]
   2f806:	885b      	ldrh	r3, [r3, #2]
   2f808:	001a      	movs	r2, r3
   2f80a:	687b      	ldr	r3, [r7, #4]
   2f80c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   2f80e:	687b      	ldr	r3, [r7, #4]
   2f810:	3314      	adds	r3, #20
   2f812:	22bc      	movs	r2, #188	; 0xbc
   2f814:	18ba      	adds	r2, r7, r2
   2f816:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   2f818:	683b      	ldr	r3, [r7, #0]
   2f81a:	781b      	ldrb	r3, [r3, #0]
   2f81c:	001a      	movs	r2, r3
   2f81e:	230c      	movs	r3, #12
   2f820:	18fb      	adds	r3, r7, r3
   2f822:	0092      	lsls	r2, r2, #2
   2f824:	58d2      	ldr	r2, [r2, r3]
   2f826:	2318      	movs	r3, #24
   2f828:	18fb      	adds	r3, r7, r3
   2f82a:	0011      	movs	r1, r2
   2f82c:	0018      	movs	r0, r3
   2f82e:	4b23      	ldr	r3, [pc, #140]	; (2f8bc <sw_timer_init+0xcc>)
   2f830:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   2f832:	4b23      	ldr	r3, [pc, #140]	; (2f8c0 <sw_timer_init+0xd0>)
   2f834:	4798      	blx	r3
   2f836:	0004      	movs	r4, r0
   2f838:	683b      	ldr	r3, [r7, #0]
   2f83a:	885b      	ldrh	r3, [r3, #2]
   2f83c:	001a      	movs	r2, r3
   2f83e:	4b21      	ldr	r3, [pc, #132]	; (2f8c4 <sw_timer_init+0xd4>)
   2f840:	0011      	movs	r1, r2
   2f842:	22fa      	movs	r2, #250	; 0xfa
   2f844:	0210      	lsls	r0, r2, #8
   2f846:	4798      	blx	r3
   2f848:	0003      	movs	r3, r0
   2f84a:	001a      	movs	r2, r3
   2f84c:	4b1e      	ldr	r3, [pc, #120]	; (2f8c8 <sw_timer_init+0xd8>)
   2f84e:	0011      	movs	r1, r2
   2f850:	0020      	movs	r0, r4
   2f852:	4798      	blx	r3
   2f854:	0003      	movs	r3, r0
   2f856:	001a      	movs	r2, r3
   2f858:	2318      	movs	r3, #24
   2f85a:	18fb      	adds	r3, r7, r3
   2f85c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   2f85e:	2318      	movs	r3, #24
   2f860:	18fb      	adds	r3, r7, r3
   2f862:	2205      	movs	r2, #5
   2f864:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   2f866:	683b      	ldr	r3, [r7, #0]
   2f868:	781b      	ldrb	r3, [r3, #0]
   2f86a:	001a      	movs	r2, r3
   2f86c:	230c      	movs	r3, #12
   2f86e:	18fb      	adds	r3, r7, r3
   2f870:	0092      	lsls	r2, r2, #2
   2f872:	58d1      	ldr	r1, [r2, r3]
   2f874:	2318      	movs	r3, #24
   2f876:	18fa      	adds	r2, r7, r3
   2f878:	23bc      	movs	r3, #188	; 0xbc
   2f87a:	18fb      	adds	r3, r7, r3
   2f87c:	681b      	ldr	r3, [r3, #0]
   2f87e:	0018      	movs	r0, r3
   2f880:	4b12      	ldr	r3, [pc, #72]	; (2f8cc <sw_timer_init+0xdc>)
   2f882:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   2f884:	683b      	ldr	r3, [r7, #0]
   2f886:	785b      	ldrb	r3, [r3, #1]
   2f888:	3308      	adds	r3, #8
   2f88a:	b2da      	uxtb	r2, r3
   2f88c:	4910      	ldr	r1, [pc, #64]	; (2f8d0 <sw_timer_init+0xe0>)
   2f88e:	23bc      	movs	r3, #188	; 0xbc
   2f890:	18fb      	adds	r3, r7, r3
   2f892:	681b      	ldr	r3, [r3, #0]
   2f894:	0018      	movs	r0, r3
   2f896:	4b0f      	ldr	r3, [pc, #60]	; (2f8d4 <sw_timer_init+0xe4>)
   2f898:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   2f89a:	683b      	ldr	r3, [r7, #0]
   2f89c:	785b      	ldrb	r3, [r3, #1]
   2f89e:	3308      	adds	r3, #8
   2f8a0:	b2da      	uxtb	r2, r3
   2f8a2:	23bc      	movs	r3, #188	; 0xbc
   2f8a4:	18fb      	adds	r3, r7, r3
   2f8a6:	681b      	ldr	r3, [r3, #0]
   2f8a8:	0011      	movs	r1, r2
   2f8aa:	0018      	movs	r0, r3
   2f8ac:	4b0a      	ldr	r3, [pc, #40]	; (2f8d8 <sw_timer_init+0xe8>)
   2f8ae:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   2f8b0:	46c0      	nop			; (mov r8, r8)
   2f8b2:	46bd      	mov	sp, r7
   2f8b4:	b031      	add	sp, #196	; 0xc4
   2f8b6:	bd90      	pop	{r4, r7, pc}
   2f8b8:	000380cc 	.word	0x000380cc
   2f8bc:	00026e4d 	.word	0x00026e4d
   2f8c0:	0002f759 	.word	0x0002f759
   2f8c4:	0002ff01 	.word	0x0002ff01
   2f8c8:	0002fded 	.word	0x0002fded
   2f8cc:	000274a9 	.word	0x000274a9
   2f8d0:	0002f7ad 	.word	0x0002f7ad
   2f8d4:	000278c1 	.word	0x000278c1
   2f8d8:	00027901 	.word	0x00027901

0002f8dc <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   2f8dc:	b580      	push	{r7, lr}
   2f8de:	b084      	sub	sp, #16
   2f8e0:	af00      	add	r7, sp, #0
   2f8e2:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   2f8e4:	687b      	ldr	r3, [r7, #4]
   2f8e6:	3314      	adds	r3, #20
   2f8e8:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   2f8ea:	68fb      	ldr	r3, [r7, #12]
   2f8ec:	0018      	movs	r0, r3
   2f8ee:	4b03      	ldr	r3, [pc, #12]	; (2f8fc <sw_timer_enable+0x20>)
   2f8f0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   2f8f2:	46c0      	nop			; (mov r8, r8)
   2f8f4:	46bd      	mov	sp, r7
   2f8f6:	b004      	add	sp, #16
   2f8f8:	bd80      	pop	{r7, pc}
   2f8fa:	46c0      	nop			; (mov r8, r8)
   2f8fc:	0002f77d 	.word	0x0002f77d

0002f900 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   2f900:	b580      	push	{r7, lr}
   2f902:	b086      	sub	sp, #24
   2f904:	af00      	add	r7, sp, #0
   2f906:	60f8      	str	r0, [r7, #12]
   2f908:	60b9      	str	r1, [r7, #8]
   2f90a:	607a      	str	r2, [r7, #4]
   2f90c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   2f90e:	2300      	movs	r3, #0
   2f910:	617b      	str	r3, [r7, #20]
   2f912:	e032      	b.n	2f97a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   2f914:	68f9      	ldr	r1, [r7, #12]
   2f916:	697a      	ldr	r2, [r7, #20]
   2f918:	0013      	movs	r3, r2
   2f91a:	009b      	lsls	r3, r3, #2
   2f91c:	189b      	adds	r3, r3, r2
   2f91e:	009b      	lsls	r3, r3, #2
   2f920:	5c5b      	ldrb	r3, [r3, r1]
   2f922:	07db      	lsls	r3, r3, #31
   2f924:	0fdb      	lsrs	r3, r3, #31
   2f926:	b2db      	uxtb	r3, r3
   2f928:	2b00      	cmp	r3, #0
   2f92a:	d123      	bne.n	2f974 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   2f92c:	697a      	ldr	r2, [r7, #20]
   2f92e:	0013      	movs	r3, r2
   2f930:	009b      	lsls	r3, r3, #2
   2f932:	189b      	adds	r3, r3, r2
   2f934:	009b      	lsls	r3, r3, #2
   2f936:	68fa      	ldr	r2, [r7, #12]
   2f938:	18d3      	adds	r3, r2, r3
   2f93a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   2f93c:	693b      	ldr	r3, [r7, #16]
   2f93e:	68ba      	ldr	r2, [r7, #8]
   2f940:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   2f942:	693b      	ldr	r3, [r7, #16]
   2f944:	781a      	ldrb	r2, [r3, #0]
   2f946:	2102      	movs	r1, #2
   2f948:	438a      	bics	r2, r1
   2f94a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   2f94c:	693b      	ldr	r3, [r7, #16]
   2f94e:	687a      	ldr	r2, [r7, #4]
   2f950:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   2f952:	68fb      	ldr	r3, [r7, #12]
   2f954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f956:	4b0d      	ldr	r3, [pc, #52]	; (2f98c <sw_timer_register_callback+0x8c>)
   2f958:	0011      	movs	r1, r2
   2f95a:	6838      	ldr	r0, [r7, #0]
   2f95c:	4798      	blx	r3
   2f95e:	0003      	movs	r3, r0
   2f960:	001a      	movs	r2, r3
   2f962:	693b      	ldr	r3, [r7, #16]
   2f964:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   2f966:	693b      	ldr	r3, [r7, #16]
   2f968:	781a      	ldrb	r2, [r3, #0]
   2f96a:	2101      	movs	r1, #1
   2f96c:	430a      	orrs	r2, r1
   2f96e:	701a      	strb	r2, [r3, #0]
			return index;
   2f970:	697b      	ldr	r3, [r7, #20]
   2f972:	e007      	b.n	2f984 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   2f974:	697b      	ldr	r3, [r7, #20]
   2f976:	3301      	adds	r3, #1
   2f978:	617b      	str	r3, [r7, #20]
   2f97a:	697b      	ldr	r3, [r7, #20]
   2f97c:	2b00      	cmp	r3, #0
   2f97e:	ddc9      	ble.n	2f914 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   2f980:	2301      	movs	r3, #1
   2f982:	425b      	negs	r3, r3
}
   2f984:	0018      	movs	r0, r3
   2f986:	46bd      	mov	sp, r7
   2f988:	b006      	add	sp, #24
   2f98a:	bd80      	pop	{r7, pc}
   2f98c:	0002fded 	.word	0x0002fded

0002f990 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   2f990:	b580      	push	{r7, lr}
   2f992:	b086      	sub	sp, #24
   2f994:	af00      	add	r7, sp, #0
   2f996:	60f8      	str	r0, [r7, #12]
   2f998:	60b9      	str	r1, [r7, #8]
   2f99a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   2f99c:	68ba      	ldr	r2, [r7, #8]
   2f99e:	0013      	movs	r3, r2
   2f9a0:	009b      	lsls	r3, r3, #2
   2f9a2:	189b      	adds	r3, r3, r2
   2f9a4:	009b      	lsls	r3, r3, #2
   2f9a6:	68fa      	ldr	r2, [r7, #12]
   2f9a8:	18d3      	adds	r3, r2, r3
   2f9aa:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   2f9ac:	697b      	ldr	r3, [r7, #20]
   2f9ae:	781a      	ldrb	r2, [r3, #0]
   2f9b0:	2102      	movs	r1, #2
   2f9b2:	430a      	orrs	r2, r1
   2f9b4:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   2f9b6:	68fb      	ldr	r3, [r7, #12]
   2f9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f9ba:	4b07      	ldr	r3, [pc, #28]	; (2f9d8 <sw_timer_enable_callback+0x48>)
   2f9bc:	0011      	movs	r1, r2
   2f9be:	6878      	ldr	r0, [r7, #4]
   2f9c0:	4798      	blx	r3
   2f9c2:	0003      	movs	r3, r0
   2f9c4:	001a      	movs	r2, r3
   2f9c6:	4b05      	ldr	r3, [pc, #20]	; (2f9dc <sw_timer_enable_callback+0x4c>)
   2f9c8:	681b      	ldr	r3, [r3, #0]
   2f9ca:	18d2      	adds	r2, r2, r3
   2f9cc:	697b      	ldr	r3, [r7, #20]
   2f9ce:	611a      	str	r2, [r3, #16]
}
   2f9d0:	46c0      	nop			; (mov r8, r8)
   2f9d2:	46bd      	mov	sp, r7
   2f9d4:	b006      	add	sp, #24
   2f9d6:	bd80      	pop	{r7, pc}
   2f9d8:	0002fded 	.word	0x0002fded
   2f9dc:	200042a4 	.word	0x200042a4

0002f9e0 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   2f9e0:	b580      	push	{r7, lr}
   2f9e2:	b084      	sub	sp, #16
   2f9e4:	af00      	add	r7, sp, #0
   2f9e6:	6078      	str	r0, [r7, #4]
   2f9e8:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   2f9ea:	683a      	ldr	r2, [r7, #0]
   2f9ec:	0013      	movs	r3, r2
   2f9ee:	009b      	lsls	r3, r3, #2
   2f9f0:	189b      	adds	r3, r3, r2
   2f9f2:	009b      	lsls	r3, r3, #2
   2f9f4:	687a      	ldr	r2, [r7, #4]
   2f9f6:	18d3      	adds	r3, r2, r3
   2f9f8:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   2f9fa:	68fb      	ldr	r3, [r7, #12]
   2f9fc:	781a      	ldrb	r2, [r3, #0]
   2f9fe:	2102      	movs	r1, #2
   2fa00:	438a      	bics	r2, r1
   2fa02:	701a      	strb	r2, [r3, #0]
}
   2fa04:	46c0      	nop			; (mov r8, r8)
   2fa06:	46bd      	mov	sp, r7
   2fa08:	b004      	add	sp, #16
   2fa0a:	bd80      	pop	{r7, pc}

0002fa0c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   2fa0c:	b590      	push	{r4, r7, lr}
   2fa0e:	b085      	sub	sp, #20
   2fa10:	af00      	add	r7, sp, #0
   2fa12:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   2fa14:	2300      	movs	r3, #0
   2fa16:	60fb      	str	r3, [r7, #12]
   2fa18:	e053      	b.n	2fac2 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   2fa1a:	6879      	ldr	r1, [r7, #4]
   2fa1c:	68fa      	ldr	r2, [r7, #12]
   2fa1e:	0013      	movs	r3, r2
   2fa20:	009b      	lsls	r3, r3, #2
   2fa22:	189b      	adds	r3, r3, r2
   2fa24:	009b      	lsls	r3, r3, #2
   2fa26:	5c5b      	ldrb	r3, [r3, r1]
   2fa28:	07db      	lsls	r3, r3, #31
   2fa2a:	0fdb      	lsrs	r3, r3, #31
   2fa2c:	b2db      	uxtb	r3, r3
   2fa2e:	2b00      	cmp	r3, #0
   2fa30:	d044      	beq.n	2fabc <sw_timer_task+0xb0>
   2fa32:	6879      	ldr	r1, [r7, #4]
   2fa34:	68fa      	ldr	r2, [r7, #12]
   2fa36:	0013      	movs	r3, r2
   2fa38:	009b      	lsls	r3, r3, #2
   2fa3a:	189b      	adds	r3, r3, r2
   2fa3c:	009b      	lsls	r3, r3, #2
   2fa3e:	5c5b      	ldrb	r3, [r3, r1]
   2fa40:	079b      	lsls	r3, r3, #30
   2fa42:	0fdb      	lsrs	r3, r3, #31
   2fa44:	b2db      	uxtb	r3, r3
   2fa46:	2b00      	cmp	r3, #0
   2fa48:	d038      	beq.n	2fabc <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   2fa4a:	68fa      	ldr	r2, [r7, #12]
   2fa4c:	0013      	movs	r3, r2
   2fa4e:	009b      	lsls	r3, r3, #2
   2fa50:	189b      	adds	r3, r3, r2
   2fa52:	009b      	lsls	r3, r3, #2
   2fa54:	687a      	ldr	r2, [r7, #4]
   2fa56:	18d3      	adds	r3, r2, r3
   2fa58:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   2fa5a:	68bb      	ldr	r3, [r7, #8]
   2fa5c:	691a      	ldr	r2, [r3, #16]
   2fa5e:	4b1c      	ldr	r3, [pc, #112]	; (2fad0 <sw_timer_task+0xc4>)
   2fa60:	681b      	ldr	r3, [r3, #0]
   2fa62:	1ad3      	subs	r3, r2, r3
   2fa64:	d52a      	bpl.n	2fabc <sw_timer_task+0xb0>
   2fa66:	68bb      	ldr	r3, [r7, #8]
   2fa68:	781b      	ldrb	r3, [r3, #0]
   2fa6a:	2204      	movs	r2, #4
   2fa6c:	4013      	ands	r3, r2
   2fa6e:	b2db      	uxtb	r3, r3
   2fa70:	2b00      	cmp	r3, #0
   2fa72:	d123      	bne.n	2fabc <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   2fa74:	68bb      	ldr	r3, [r7, #8]
   2fa76:	781a      	ldrb	r2, [r3, #0]
   2fa78:	2104      	movs	r1, #4
   2fa7a:	430a      	orrs	r2, r1
   2fa7c:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   2fa7e:	68bb      	ldr	r3, [r7, #8]
   2fa80:	68db      	ldr	r3, [r3, #12]
   2fa82:	2b00      	cmp	r3, #0
   2fa84:	d007      	beq.n	2fa96 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   2fa86:	68bb      	ldr	r3, [r7, #8]
   2fa88:	68da      	ldr	r2, [r3, #12]
   2fa8a:	4b11      	ldr	r3, [pc, #68]	; (2fad0 <sw_timer_task+0xc4>)
   2fa8c:	681b      	ldr	r3, [r3, #0]
   2fa8e:	18d2      	adds	r2, r2, r3
   2fa90:	68bb      	ldr	r3, [r7, #8]
   2fa92:	611a      	str	r2, [r3, #16]
   2fa94:	e004      	b.n	2faa0 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   2fa96:	68bb      	ldr	r3, [r7, #8]
   2fa98:	781a      	ldrb	r2, [r3, #0]
   2fa9a:	2102      	movs	r1, #2
   2fa9c:	438a      	bics	r2, r1
   2fa9e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   2faa0:	68bb      	ldr	r3, [r7, #8]
   2faa2:	685c      	ldr	r4, [r3, #4]
   2faa4:	68bb      	ldr	r3, [r7, #8]
   2faa6:	689a      	ldr	r2, [r3, #8]
   2faa8:	68bb      	ldr	r3, [r7, #8]
   2faaa:	68db      	ldr	r3, [r3, #12]
   2faac:	68f9      	ldr	r1, [r7, #12]
   2faae:	6878      	ldr	r0, [r7, #4]
   2fab0:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   2fab2:	68bb      	ldr	r3, [r7, #8]
   2fab4:	781a      	ldrb	r2, [r3, #0]
   2fab6:	2104      	movs	r1, #4
   2fab8:	438a      	bics	r2, r1
   2faba:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   2fabc:	68fb      	ldr	r3, [r7, #12]
   2fabe:	3301      	adds	r3, #1
   2fac0:	60fb      	str	r3, [r7, #12]
   2fac2:	68fb      	ldr	r3, [r7, #12]
   2fac4:	2b00      	cmp	r3, #0
   2fac6:	dda8      	ble.n	2fa1a <sw_timer_task+0xe>
			}
		}
	}
}
   2fac8:	46c0      	nop			; (mov r8, r8)
   2faca:	46bd      	mov	sp, r7
   2facc:	b005      	add	sp, #20
   2face:	bd90      	pop	{r4, r7, pc}
   2fad0:	200042a4 	.word	0x200042a4

0002fad4 <system_pinmux_get_group_from_gpio_pin>:
{
   2fad4:	b580      	push	{r7, lr}
   2fad6:	b084      	sub	sp, #16
   2fad8:	af00      	add	r7, sp, #0
   2fada:	0002      	movs	r2, r0
   2fadc:	1dfb      	adds	r3, r7, #7
   2fade:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2fae0:	230f      	movs	r3, #15
   2fae2:	18fb      	adds	r3, r7, r3
   2fae4:	1dfa      	adds	r2, r7, #7
   2fae6:	7812      	ldrb	r2, [r2, #0]
   2fae8:	09d2      	lsrs	r2, r2, #7
   2faea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2faec:	230e      	movs	r3, #14
   2faee:	18fb      	adds	r3, r7, r3
   2faf0:	1dfa      	adds	r2, r7, #7
   2faf2:	7812      	ldrb	r2, [r2, #0]
   2faf4:	0952      	lsrs	r2, r2, #5
   2faf6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2faf8:	4b0d      	ldr	r3, [pc, #52]	; (2fb30 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2fafa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2fafc:	230f      	movs	r3, #15
   2fafe:	18fb      	adds	r3, r7, r3
   2fb00:	781b      	ldrb	r3, [r3, #0]
   2fb02:	2b00      	cmp	r3, #0
   2fb04:	d10f      	bne.n	2fb26 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2fb06:	230f      	movs	r3, #15
   2fb08:	18fb      	adds	r3, r7, r3
   2fb0a:	781b      	ldrb	r3, [r3, #0]
   2fb0c:	009b      	lsls	r3, r3, #2
   2fb0e:	2210      	movs	r2, #16
   2fb10:	4694      	mov	ip, r2
   2fb12:	44bc      	add	ip, r7
   2fb14:	4463      	add	r3, ip
   2fb16:	3b08      	subs	r3, #8
   2fb18:	681a      	ldr	r2, [r3, #0]
   2fb1a:	230e      	movs	r3, #14
   2fb1c:	18fb      	adds	r3, r7, r3
   2fb1e:	781b      	ldrb	r3, [r3, #0]
   2fb20:	01db      	lsls	r3, r3, #7
   2fb22:	18d3      	adds	r3, r2, r3
   2fb24:	e000      	b.n	2fb28 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2fb26:	2300      	movs	r3, #0
}
   2fb28:	0018      	movs	r0, r3
   2fb2a:	46bd      	mov	sp, r7
   2fb2c:	b004      	add	sp, #16
   2fb2e:	bd80      	pop	{r7, pc}
   2fb30:	41004400 	.word	0x41004400

0002fb34 <port_get_group_from_gpio_pin>:
{
   2fb34:	b580      	push	{r7, lr}
   2fb36:	b082      	sub	sp, #8
   2fb38:	af00      	add	r7, sp, #0
   2fb3a:	0002      	movs	r2, r0
   2fb3c:	1dfb      	adds	r3, r7, #7
   2fb3e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2fb40:	1dfb      	adds	r3, r7, #7
   2fb42:	781b      	ldrb	r3, [r3, #0]
   2fb44:	0018      	movs	r0, r3
   2fb46:	4b03      	ldr	r3, [pc, #12]	; (2fb54 <port_get_group_from_gpio_pin+0x20>)
   2fb48:	4798      	blx	r3
   2fb4a:	0003      	movs	r3, r0
}
   2fb4c:	0018      	movs	r0, r3
   2fb4e:	46bd      	mov	sp, r7
   2fb50:	b002      	add	sp, #8
   2fb52:	bd80      	pop	{r7, pc}
   2fb54:	0002fad5 	.word	0x0002fad5

0002fb58 <port_pin_set_output_level>:
{
   2fb58:	b580      	push	{r7, lr}
   2fb5a:	b084      	sub	sp, #16
   2fb5c:	af00      	add	r7, sp, #0
   2fb5e:	0002      	movs	r2, r0
   2fb60:	1dfb      	adds	r3, r7, #7
   2fb62:	701a      	strb	r2, [r3, #0]
   2fb64:	1dbb      	adds	r3, r7, #6
   2fb66:	1c0a      	adds	r2, r1, #0
   2fb68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2fb6a:	1dfb      	adds	r3, r7, #7
   2fb6c:	781b      	ldrb	r3, [r3, #0]
   2fb6e:	0018      	movs	r0, r3
   2fb70:	4b0d      	ldr	r3, [pc, #52]	; (2fba8 <port_pin_set_output_level+0x50>)
   2fb72:	4798      	blx	r3
   2fb74:	0003      	movs	r3, r0
   2fb76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2fb78:	1dfb      	adds	r3, r7, #7
   2fb7a:	781b      	ldrb	r3, [r3, #0]
   2fb7c:	221f      	movs	r2, #31
   2fb7e:	4013      	ands	r3, r2
   2fb80:	2201      	movs	r2, #1
   2fb82:	409a      	lsls	r2, r3
   2fb84:	0013      	movs	r3, r2
   2fb86:	60bb      	str	r3, [r7, #8]
	if (level) {
   2fb88:	1dbb      	adds	r3, r7, #6
   2fb8a:	781b      	ldrb	r3, [r3, #0]
   2fb8c:	2b00      	cmp	r3, #0
   2fb8e:	d003      	beq.n	2fb98 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2fb90:	68fb      	ldr	r3, [r7, #12]
   2fb92:	68ba      	ldr	r2, [r7, #8]
   2fb94:	619a      	str	r2, [r3, #24]
}
   2fb96:	e002      	b.n	2fb9e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2fb98:	68fb      	ldr	r3, [r7, #12]
   2fb9a:	68ba      	ldr	r2, [r7, #8]
   2fb9c:	615a      	str	r2, [r3, #20]
}
   2fb9e:	46c0      	nop			; (mov r8, r8)
   2fba0:	46bd      	mov	sp, r7
   2fba2:	b004      	add	sp, #16
   2fba4:	bd80      	pop	{r7, pc}
   2fba6:	46c0      	nop			; (mov r8, r8)
   2fba8:	0002fb35 	.word	0x0002fb35

0002fbac <main>:
/**
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void) {
   2fbac:	b580      	push	{r7, lr}
   2fbae:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   2fbb0:	4b07      	ldr	r3, [pc, #28]	; (2fbd0 <main+0x24>)
   2fbb2:	4798      	blx	r3
	LED_On(LED0);
   2fbb4:	2100      	movs	r1, #0
   2fbb6:	2017      	movs	r0, #23
   2fbb8:	4b06      	ldr	r3, [pc, #24]	; (2fbd4 <main+0x28>)
   2fbba:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   2fbbc:	2001      	movs	r0, #1
   2fbbe:	4b06      	ldr	r3, [pc, #24]	; (2fbd8 <main+0x2c>)
   2fbc0:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   2fbc2:	4b06      	ldr	r3, [pc, #24]	; (2fbdc <main+0x30>)
   2fbc4:	4798      	blx	r3

    return 0;   // Will not get here
   2fbc6:	2300      	movs	r3, #0
}
   2fbc8:	0018      	movs	r0, r3
   2fbca:	46bd      	mov	sp, r7
   2fbcc:	bd80      	pop	{r7, pc}
   2fbce:	46c0      	nop			; (mov r8, r8)
   2fbd0:	00026d41 	.word	0x00026d41
   2fbd4:	0002fb59 	.word	0x0002fb59
   2fbd8:	00014cb1 	.word	0x00014cb1
   2fbdc:	00018c41 	.word	0x00018c41

0002fbe0 <vApplicationDaemonTaskStartupHook>:
 * @details			This function is called from the FreeRToS timer task. Any code
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void) {
   2fbe0:	b580      	push	{r7, lr}
   2fbe2:	af00      	add	r7, sp, #0
	
	/* Initialize the UART console. */
	InitializeSerialConsole();
   2fbe4:	4b10      	ldr	r3, [pc, #64]	; (2fc28 <vApplicationDaemonTaskStartupHook+0x48>)
   2fbe6:	4798      	blx	r3
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   2fbe8:	4b10      	ldr	r3, [pc, #64]	; (2fc2c <vApplicationDaemonTaskStartupHook+0x4c>)
   2fbea:	0018      	movs	r0, r3
   2fbec:	4b10      	ldr	r3, [pc, #64]	; (2fc30 <vApplicationDaemonTaskStartupHook+0x50>)
   2fbee:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   2fbf0:	4b10      	ldr	r3, [pc, #64]	; (2fc34 <vApplicationDaemonTaskStartupHook+0x54>)
   2fbf2:	0018      	movs	r0, r3
   2fbf4:	4b0e      	ldr	r3, [pc, #56]	; (2fc30 <vApplicationDaemonTaskStartupHook+0x50>)
   2fbf6:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   2fbf8:	4b0f      	ldr	r3, [pc, #60]	; (2fc38 <vApplicationDaemonTaskStartupHook+0x58>)
   2fbfa:	4798      	blx	r3
   2fbfc:	1e03      	subs	r3, r0, #0
   2fbfe:	d004      	beq.n	2fc0a <vApplicationDaemonTaskStartupHook+0x2a>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   2fc00:	4b0e      	ldr	r3, [pc, #56]	; (2fc3c <vApplicationDaemonTaskStartupHook+0x5c>)
   2fc02:	0018      	movs	r0, r3
   2fc04:	4b0a      	ldr	r3, [pc, #40]	; (2fc30 <vApplicationDaemonTaskStartupHook+0x50>)
   2fc06:	4798      	blx	r3
   2fc08:	e003      	b.n	2fc12 <vApplicationDaemonTaskStartupHook+0x32>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   2fc0a:	4b0d      	ldr	r3, [pc, #52]	; (2fc40 <vApplicationDaemonTaskStartupHook+0x60>)
   2fc0c:	0018      	movs	r0, r3
   2fc0e:	4b08      	ldr	r3, [pc, #32]	; (2fc30 <vApplicationDaemonTaskStartupHook+0x50>)
   2fc10:	4798      	blx	r3
    }

    StartTasks();
   2fc12:	4b0c      	ldr	r3, [pc, #48]	; (2fc44 <vApplicationDaemonTaskStartupHook+0x64>)
   2fc14:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   2fc16:	4b0c      	ldr	r3, [pc, #48]	; (2fc48 <vApplicationDaemonTaskStartupHook+0x68>)
   2fc18:	681b      	ldr	r3, [r3, #0]
   2fc1a:	0018      	movs	r0, r3
   2fc1c:	4b0b      	ldr	r3, [pc, #44]	; (2fc4c <vApplicationDaemonTaskStartupHook+0x6c>)
   2fc1e:	4798      	blx	r3
}
   2fc20:	46c0      	nop			; (mov r8, r8)
   2fc22:	46bd      	mov	sp, r7
   2fc24:	bd80      	pop	{r7, pc}
   2fc26:	46c0      	nop			; (mov r8, r8)
   2fc28:	0001a609 	.word	0x0001a609
   2fc2c:	000380d8 	.word	0x000380d8
   2fc30:	0001a691 	.word	0x0001a691
   2fc34:	000380fc 	.word	0x000380fc
   2fc38:	00010a25 	.word	0x00010a25
   2fc3c:	00038114 	.word	0x00038114
   2fc40:	00038138 	.word	0x00038138
   2fc44:	0002fc51 	.word	0x0002fc51
   2fc48:	200042ac 	.word	0x200042ac
   2fc4c:	00018ae5 	.word	0x00018ae5

0002fc50 <StartTasks>:
 * @brief            Initialize application tasks
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void) {
   2fc50:	b590      	push	{r4, r7, lr}
   2fc52:	b083      	sub	sp, #12
   2fc54:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   2fc56:	4b40      	ldr	r3, [pc, #256]	; (2fd58 <StartTasks+0x108>)
   2fc58:	4798      	blx	r3
   2fc5a:	0003      	movs	r3, r0
   2fc5c:	4a3f      	ldr	r2, [pc, #252]	; (2fd5c <StartTasks+0x10c>)
   2fc5e:	4840      	ldr	r0, [pc, #256]	; (2fd60 <StartTasks+0x110>)
   2fc60:	2140      	movs	r1, #64	; 0x40
   2fc62:	4c40      	ldr	r4, [pc, #256]	; (2fd64 <StartTasks+0x114>)
   2fc64:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   2fc66:	4b3e      	ldr	r3, [pc, #248]	; (2fd60 <StartTasks+0x110>)
   2fc68:	0018      	movs	r0, r3
   2fc6a:	4b3f      	ldr	r3, [pc, #252]	; (2fd68 <StartTasks+0x118>)
   2fc6c:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   2fc6e:	23c8      	movs	r3, #200	; 0xc8
   2fc70:	005a      	lsls	r2, r3, #1
   2fc72:	493e      	ldr	r1, [pc, #248]	; (2fd6c <StartTasks+0x11c>)
   2fc74:	483e      	ldr	r0, [pc, #248]	; (2fd70 <StartTasks+0x120>)
   2fc76:	4b3f      	ldr	r3, [pc, #252]	; (2fd74 <StartTasks+0x124>)
   2fc78:	9301      	str	r3, [sp, #4]
   2fc7a:	2304      	movs	r3, #4
   2fc7c:	9300      	str	r3, [sp, #0]
   2fc7e:	2300      	movs	r3, #0
   2fc80:	4c3d      	ldr	r4, [pc, #244]	; (2fd78 <StartTasks+0x128>)
   2fc82:	47a0      	blx	r4
   2fc84:	0003      	movs	r3, r0
   2fc86:	2b01      	cmp	r3, #1
   2fc88:	d003      	beq.n	2fc92 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   2fc8a:	4b3c      	ldr	r3, [pc, #240]	; (2fd7c <StartTasks+0x12c>)
   2fc8c:	0018      	movs	r0, r3
   2fc8e:	4b36      	ldr	r3, [pc, #216]	; (2fd68 <StartTasks+0x118>)
   2fc90:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   2fc92:	4b31      	ldr	r3, [pc, #196]	; (2fd58 <StartTasks+0x108>)
   2fc94:	4798      	blx	r3
   2fc96:	0003      	movs	r3, r0
   2fc98:	4a39      	ldr	r2, [pc, #228]	; (2fd80 <StartTasks+0x130>)
   2fc9a:	4831      	ldr	r0, [pc, #196]	; (2fd60 <StartTasks+0x110>)
   2fc9c:	2140      	movs	r1, #64	; 0x40
   2fc9e:	4c31      	ldr	r4, [pc, #196]	; (2fd64 <StartTasks+0x114>)
   2fca0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   2fca2:	4b2f      	ldr	r3, [pc, #188]	; (2fd60 <StartTasks+0x110>)
   2fca4:	0018      	movs	r0, r3
   2fca6:	4b30      	ldr	r3, [pc, #192]	; (2fd68 <StartTasks+0x118>)
   2fca8:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   2fcaa:	23fa      	movs	r3, #250	; 0xfa
   2fcac:	009a      	lsls	r2, r3, #2
   2fcae:	4935      	ldr	r1, [pc, #212]	; (2fd84 <StartTasks+0x134>)
   2fcb0:	4835      	ldr	r0, [pc, #212]	; (2fd88 <StartTasks+0x138>)
   2fcb2:	4b36      	ldr	r3, [pc, #216]	; (2fd8c <StartTasks+0x13c>)
   2fcb4:	9301      	str	r3, [sp, #4]
   2fcb6:	2303      	movs	r3, #3
   2fcb8:	9300      	str	r3, [sp, #0]
   2fcba:	2300      	movs	r3, #0
   2fcbc:	4c2e      	ldr	r4, [pc, #184]	; (2fd78 <StartTasks+0x128>)
   2fcbe:	47a0      	blx	r4
   2fcc0:	0003      	movs	r3, r0
   2fcc2:	2b01      	cmp	r3, #1
   2fcc4:	d003      	beq.n	2fcce <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   2fcc6:	4b32      	ldr	r3, [pc, #200]	; (2fd90 <StartTasks+0x140>)
   2fcc8:	0018      	movs	r0, r3
   2fcca:	4b27      	ldr	r3, [pc, #156]	; (2fd68 <StartTasks+0x118>)
   2fccc:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   2fcce:	4b22      	ldr	r3, [pc, #136]	; (2fd58 <StartTasks+0x108>)
   2fcd0:	4798      	blx	r3
   2fcd2:	0003      	movs	r3, r0
   2fcd4:	4a2f      	ldr	r2, [pc, #188]	; (2fd94 <StartTasks+0x144>)
   2fcd6:	4822      	ldr	r0, [pc, #136]	; (2fd60 <StartTasks+0x110>)
   2fcd8:	2140      	movs	r1, #64	; 0x40
   2fcda:	4c22      	ldr	r4, [pc, #136]	; (2fd64 <StartTasks+0x114>)
   2fcdc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   2fcde:	4b20      	ldr	r3, [pc, #128]	; (2fd60 <StartTasks+0x110>)
   2fce0:	0018      	movs	r0, r3
   2fce2:	4b21      	ldr	r3, [pc, #132]	; (2fd68 <StartTasks+0x118>)
   2fce4:	4798      	blx	r3

    /**
     * @brief Create VEML7700 light sensing task
     */
    if (xTaskCreate(vVemlTask,"VEML_TASK",VEML_TASK_STACK_SIZE,NULL,VEML_TASK_PRIORITY, NULL) != pdPASS) {
   2fce6:	2380      	movs	r3, #128	; 0x80
   2fce8:	005a      	lsls	r2, r3, #1
   2fcea:	492b      	ldr	r1, [pc, #172]	; (2fd98 <StartTasks+0x148>)
   2fcec:	482b      	ldr	r0, [pc, #172]	; (2fd9c <StartTasks+0x14c>)
   2fcee:	2300      	movs	r3, #0
   2fcf0:	9301      	str	r3, [sp, #4]
   2fcf2:	2303      	movs	r3, #3
   2fcf4:	9300      	str	r3, [sp, #0]
   2fcf6:	2300      	movs	r3, #0
   2fcf8:	4c1f      	ldr	r4, [pc, #124]	; (2fd78 <StartTasks+0x128>)
   2fcfa:	47a0      	blx	r4
   2fcfc:	0003      	movs	r3, r0
   2fcfe:	2b01      	cmp	r3, #1
   2fd00:	d003      	beq.n	2fd0a <StartTasks+0xba>
        SerialConsoleWriteString("ERR: VEML task could not be initialized!\r\n");
   2fd02:	4b27      	ldr	r3, [pc, #156]	; (2fda0 <StartTasks+0x150>)
   2fd04:	0018      	movs	r0, r3
   2fd06:	4b18      	ldr	r3, [pc, #96]	; (2fd68 <StartTasks+0x118>)
   2fd08:	4798      	blx	r3
    }
    if (xTaskCreate(vMax31855Task,"MAX31855_TASK",MAX31855_TASK_STACK_SIZE, NULL, MAX31855_TASK_PRIORITY,  NULL)!= pdPASS){
   2fd0a:	2380      	movs	r3, #128	; 0x80
   2fd0c:	005a      	lsls	r2, r3, #1
   2fd0e:	4925      	ldr	r1, [pc, #148]	; (2fda4 <StartTasks+0x154>)
   2fd10:	4825      	ldr	r0, [pc, #148]	; (2fda8 <StartTasks+0x158>)
   2fd12:	2300      	movs	r3, #0
   2fd14:	9301      	str	r3, [sp, #4]
   2fd16:	2303      	movs	r3, #3
   2fd18:	9300      	str	r3, [sp, #0]
   2fd1a:	2300      	movs	r3, #0
   2fd1c:	4c16      	ldr	r4, [pc, #88]	; (2fd78 <StartTasks+0x128>)
   2fd1e:	47a0      	blx	r4
   2fd20:	0003      	movs	r3, r0
   2fd22:	2b01      	cmp	r3, #1
   2fd24:	d003      	beq.n	2fd2e <StartTasks+0xde>
        SerialConsoleWriteString("ERR: MAX31855 task could not be initialized!\r\n");
   2fd26:	4b21      	ldr	r3, [pc, #132]	; (2fdac <StartTasks+0x15c>)
   2fd28:	0018      	movs	r0, r3
   2fd2a:	4b0f      	ldr	r3, [pc, #60]	; (2fd68 <StartTasks+0x118>)
   2fd2c:	4798      	blx	r3
    }
	if (xTaskCreate(vEspI2cTask,"ESP_I2C_TASK", ESP_I2C_TASK_STACK_SIZE,NULL, ESP_I2C_TASK_PRIORITY, NULL) != pdPASS){
   2fd2e:	4920      	ldr	r1, [pc, #128]	; (2fdb0 <StartTasks+0x160>)
   2fd30:	4820      	ldr	r0, [pc, #128]	; (2fdb4 <StartTasks+0x164>)
   2fd32:	2300      	movs	r3, #0
   2fd34:	9301      	str	r3, [sp, #4]
   2fd36:	2303      	movs	r3, #3
   2fd38:	9300      	str	r3, [sp, #0]
   2fd3a:	2300      	movs	r3, #0
   2fd3c:	2280      	movs	r2, #128	; 0x80
   2fd3e:	4c0e      	ldr	r4, [pc, #56]	; (2fd78 <StartTasks+0x128>)
   2fd40:	47a0      	blx	r4
   2fd42:	0003      	movs	r3, r0
   2fd44:	2b01      	cmp	r3, #1
   2fd46:	d003      	beq.n	2fd50 <StartTasks+0x100>
		SerialConsoleWriteString("ERR: ESP_I2C_TASK could not be initialized!\r\n");
   2fd48:	4b1b      	ldr	r3, [pc, #108]	; (2fdb8 <StartTasks+0x168>)
   2fd4a:	0018      	movs	r0, r3
   2fd4c:	4b06      	ldr	r3, [pc, #24]	; (2fd68 <StartTasks+0x118>)
   2fd4e:	4798      	blx	r3
	}
    }
   2fd50:	46c0      	nop			; (mov r8, r8)
   2fd52:	46bd      	mov	sp, r7
   2fd54:	b001      	add	sp, #4
   2fd56:	bd90      	pop	{r4, r7, pc}
   2fd58:	00016c21 	.word	0x00016c21
   2fd5c:	00038154 	.word	0x00038154
   2fd60:	20005680 	.word	0x20005680
   2fd64:	00032b01 	.word	0x00032b01
   2fd68:	0001a691 	.word	0x0001a691
   2fd6c:	00038178 	.word	0x00038178
   2fd70:	0000fcd9 	.word	0x0000fcd9
   2fd74:	200042a8 	.word	0x200042a8
   2fd78:	00018669 	.word	0x00018669
   2fd7c:	00038184 	.word	0x00038184
   2fd80:	000381b0 	.word	0x000381b0
   2fd84:	000381d0 	.word	0x000381d0
   2fd88:	00013359 	.word	0x00013359
   2fd8c:	200042b0 	.word	0x200042b0
   2fd90:	000381dc 	.word	0x000381dc
   2fd94:	00038208 	.word	0x00038208
   2fd98:	00038228 	.word	0x00038228
   2fd9c:	000119a1 	.word	0x000119a1
   2fda0:	00038234 	.word	0x00038234
   2fda4:	00038260 	.word	0x00038260
   2fda8:	000115c1 	.word	0x000115c1
   2fdac:	00038270 	.word	0x00038270
   2fdb0:	000382a0 	.word	0x000382a0
   2fdb4:	00010efd 	.word	0x00010efd
   2fdb8:	000382b0 	.word	0x000382b0

0002fdbc <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void) {
   2fdbc:	b580      	push	{r7, lr}
   2fdbe:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   2fdc0:	4b02      	ldr	r3, [pc, #8]	; (2fdcc <vApplicationMallocFailedHook+0x10>)
   2fdc2:	0018      	movs	r0, r3
   2fdc4:	4b02      	ldr	r3, [pc, #8]	; (2fdd0 <vApplicationMallocFailedHook+0x14>)
   2fdc6:	4798      	blx	r3
    while (1);
   2fdc8:	e7fe      	b.n	2fdc8 <vApplicationMallocFailedHook+0xc>
   2fdca:	46c0      	nop			; (mov r8, r8)
   2fdcc:	000382e0 	.word	0x000382e0
   2fdd0:	0001a691 	.word	0x0001a691

0002fdd4 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void) {
   2fdd4:	b580      	push	{r7, lr}
   2fdd6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   2fdd8:	4b02      	ldr	r3, [pc, #8]	; (2fde4 <vApplicationStackOverflowHook+0x10>)
   2fdda:	0018      	movs	r0, r3
   2fddc:	4b02      	ldr	r3, [pc, #8]	; (2fde8 <vApplicationStackOverflowHook+0x14>)
   2fdde:	4798      	blx	r3
    while (1);
   2fde0:	e7fe      	b.n	2fde0 <vApplicationStackOverflowHook+0xc>
   2fde2:	46c0      	nop			; (mov r8, r8)
   2fde4:	0003830c 	.word	0x0003830c
   2fde8:	0001a691 	.word	0x0001a691

0002fdec <__udivsi3>:
   2fdec:	2200      	movs	r2, #0
   2fdee:	0843      	lsrs	r3, r0, #1
   2fdf0:	428b      	cmp	r3, r1
   2fdf2:	d374      	bcc.n	2fede <__udivsi3+0xf2>
   2fdf4:	0903      	lsrs	r3, r0, #4
   2fdf6:	428b      	cmp	r3, r1
   2fdf8:	d35f      	bcc.n	2feba <__udivsi3+0xce>
   2fdfa:	0a03      	lsrs	r3, r0, #8
   2fdfc:	428b      	cmp	r3, r1
   2fdfe:	d344      	bcc.n	2fe8a <__udivsi3+0x9e>
   2fe00:	0b03      	lsrs	r3, r0, #12
   2fe02:	428b      	cmp	r3, r1
   2fe04:	d328      	bcc.n	2fe58 <__udivsi3+0x6c>
   2fe06:	0c03      	lsrs	r3, r0, #16
   2fe08:	428b      	cmp	r3, r1
   2fe0a:	d30d      	bcc.n	2fe28 <__udivsi3+0x3c>
   2fe0c:	22ff      	movs	r2, #255	; 0xff
   2fe0e:	0209      	lsls	r1, r1, #8
   2fe10:	ba12      	rev	r2, r2
   2fe12:	0c03      	lsrs	r3, r0, #16
   2fe14:	428b      	cmp	r3, r1
   2fe16:	d302      	bcc.n	2fe1e <__udivsi3+0x32>
   2fe18:	1212      	asrs	r2, r2, #8
   2fe1a:	0209      	lsls	r1, r1, #8
   2fe1c:	d065      	beq.n	2feea <__udivsi3+0xfe>
   2fe1e:	0b03      	lsrs	r3, r0, #12
   2fe20:	428b      	cmp	r3, r1
   2fe22:	d319      	bcc.n	2fe58 <__udivsi3+0x6c>
   2fe24:	e000      	b.n	2fe28 <__udivsi3+0x3c>
   2fe26:	0a09      	lsrs	r1, r1, #8
   2fe28:	0bc3      	lsrs	r3, r0, #15
   2fe2a:	428b      	cmp	r3, r1
   2fe2c:	d301      	bcc.n	2fe32 <__udivsi3+0x46>
   2fe2e:	03cb      	lsls	r3, r1, #15
   2fe30:	1ac0      	subs	r0, r0, r3
   2fe32:	4152      	adcs	r2, r2
   2fe34:	0b83      	lsrs	r3, r0, #14
   2fe36:	428b      	cmp	r3, r1
   2fe38:	d301      	bcc.n	2fe3e <__udivsi3+0x52>
   2fe3a:	038b      	lsls	r3, r1, #14
   2fe3c:	1ac0      	subs	r0, r0, r3
   2fe3e:	4152      	adcs	r2, r2
   2fe40:	0b43      	lsrs	r3, r0, #13
   2fe42:	428b      	cmp	r3, r1
   2fe44:	d301      	bcc.n	2fe4a <__udivsi3+0x5e>
   2fe46:	034b      	lsls	r3, r1, #13
   2fe48:	1ac0      	subs	r0, r0, r3
   2fe4a:	4152      	adcs	r2, r2
   2fe4c:	0b03      	lsrs	r3, r0, #12
   2fe4e:	428b      	cmp	r3, r1
   2fe50:	d301      	bcc.n	2fe56 <__udivsi3+0x6a>
   2fe52:	030b      	lsls	r3, r1, #12
   2fe54:	1ac0      	subs	r0, r0, r3
   2fe56:	4152      	adcs	r2, r2
   2fe58:	0ac3      	lsrs	r3, r0, #11
   2fe5a:	428b      	cmp	r3, r1
   2fe5c:	d301      	bcc.n	2fe62 <__udivsi3+0x76>
   2fe5e:	02cb      	lsls	r3, r1, #11
   2fe60:	1ac0      	subs	r0, r0, r3
   2fe62:	4152      	adcs	r2, r2
   2fe64:	0a83      	lsrs	r3, r0, #10
   2fe66:	428b      	cmp	r3, r1
   2fe68:	d301      	bcc.n	2fe6e <__udivsi3+0x82>
   2fe6a:	028b      	lsls	r3, r1, #10
   2fe6c:	1ac0      	subs	r0, r0, r3
   2fe6e:	4152      	adcs	r2, r2
   2fe70:	0a43      	lsrs	r3, r0, #9
   2fe72:	428b      	cmp	r3, r1
   2fe74:	d301      	bcc.n	2fe7a <__udivsi3+0x8e>
   2fe76:	024b      	lsls	r3, r1, #9
   2fe78:	1ac0      	subs	r0, r0, r3
   2fe7a:	4152      	adcs	r2, r2
   2fe7c:	0a03      	lsrs	r3, r0, #8
   2fe7e:	428b      	cmp	r3, r1
   2fe80:	d301      	bcc.n	2fe86 <__udivsi3+0x9a>
   2fe82:	020b      	lsls	r3, r1, #8
   2fe84:	1ac0      	subs	r0, r0, r3
   2fe86:	4152      	adcs	r2, r2
   2fe88:	d2cd      	bcs.n	2fe26 <__udivsi3+0x3a>
   2fe8a:	09c3      	lsrs	r3, r0, #7
   2fe8c:	428b      	cmp	r3, r1
   2fe8e:	d301      	bcc.n	2fe94 <__udivsi3+0xa8>
   2fe90:	01cb      	lsls	r3, r1, #7
   2fe92:	1ac0      	subs	r0, r0, r3
   2fe94:	4152      	adcs	r2, r2
   2fe96:	0983      	lsrs	r3, r0, #6
   2fe98:	428b      	cmp	r3, r1
   2fe9a:	d301      	bcc.n	2fea0 <__udivsi3+0xb4>
   2fe9c:	018b      	lsls	r3, r1, #6
   2fe9e:	1ac0      	subs	r0, r0, r3
   2fea0:	4152      	adcs	r2, r2
   2fea2:	0943      	lsrs	r3, r0, #5
   2fea4:	428b      	cmp	r3, r1
   2fea6:	d301      	bcc.n	2feac <__udivsi3+0xc0>
   2fea8:	014b      	lsls	r3, r1, #5
   2feaa:	1ac0      	subs	r0, r0, r3
   2feac:	4152      	adcs	r2, r2
   2feae:	0903      	lsrs	r3, r0, #4
   2feb0:	428b      	cmp	r3, r1
   2feb2:	d301      	bcc.n	2feb8 <__udivsi3+0xcc>
   2feb4:	010b      	lsls	r3, r1, #4
   2feb6:	1ac0      	subs	r0, r0, r3
   2feb8:	4152      	adcs	r2, r2
   2feba:	08c3      	lsrs	r3, r0, #3
   2febc:	428b      	cmp	r3, r1
   2febe:	d301      	bcc.n	2fec4 <__udivsi3+0xd8>
   2fec0:	00cb      	lsls	r3, r1, #3
   2fec2:	1ac0      	subs	r0, r0, r3
   2fec4:	4152      	adcs	r2, r2
   2fec6:	0883      	lsrs	r3, r0, #2
   2fec8:	428b      	cmp	r3, r1
   2feca:	d301      	bcc.n	2fed0 <__udivsi3+0xe4>
   2fecc:	008b      	lsls	r3, r1, #2
   2fece:	1ac0      	subs	r0, r0, r3
   2fed0:	4152      	adcs	r2, r2
   2fed2:	0843      	lsrs	r3, r0, #1
   2fed4:	428b      	cmp	r3, r1
   2fed6:	d301      	bcc.n	2fedc <__udivsi3+0xf0>
   2fed8:	004b      	lsls	r3, r1, #1
   2feda:	1ac0      	subs	r0, r0, r3
   2fedc:	4152      	adcs	r2, r2
   2fede:	1a41      	subs	r1, r0, r1
   2fee0:	d200      	bcs.n	2fee4 <__udivsi3+0xf8>
   2fee2:	4601      	mov	r1, r0
   2fee4:	4152      	adcs	r2, r2
   2fee6:	4610      	mov	r0, r2
   2fee8:	4770      	bx	lr
   2feea:	e7ff      	b.n	2feec <__udivsi3+0x100>
   2feec:	b501      	push	{r0, lr}
   2feee:	2000      	movs	r0, #0
   2fef0:	f000 f8f0 	bl	300d4 <__aeabi_idiv0>
   2fef4:	bd02      	pop	{r1, pc}
   2fef6:	46c0      	nop			; (mov r8, r8)

0002fef8 <__aeabi_uidivmod>:
   2fef8:	2900      	cmp	r1, #0
   2fefa:	d0f7      	beq.n	2feec <__udivsi3+0x100>
   2fefc:	e776      	b.n	2fdec <__udivsi3>
   2fefe:	4770      	bx	lr

0002ff00 <__divsi3>:
   2ff00:	4603      	mov	r3, r0
   2ff02:	430b      	orrs	r3, r1
   2ff04:	d47f      	bmi.n	30006 <__divsi3+0x106>
   2ff06:	2200      	movs	r2, #0
   2ff08:	0843      	lsrs	r3, r0, #1
   2ff0a:	428b      	cmp	r3, r1
   2ff0c:	d374      	bcc.n	2fff8 <__divsi3+0xf8>
   2ff0e:	0903      	lsrs	r3, r0, #4
   2ff10:	428b      	cmp	r3, r1
   2ff12:	d35f      	bcc.n	2ffd4 <__divsi3+0xd4>
   2ff14:	0a03      	lsrs	r3, r0, #8
   2ff16:	428b      	cmp	r3, r1
   2ff18:	d344      	bcc.n	2ffa4 <__divsi3+0xa4>
   2ff1a:	0b03      	lsrs	r3, r0, #12
   2ff1c:	428b      	cmp	r3, r1
   2ff1e:	d328      	bcc.n	2ff72 <__divsi3+0x72>
   2ff20:	0c03      	lsrs	r3, r0, #16
   2ff22:	428b      	cmp	r3, r1
   2ff24:	d30d      	bcc.n	2ff42 <__divsi3+0x42>
   2ff26:	22ff      	movs	r2, #255	; 0xff
   2ff28:	0209      	lsls	r1, r1, #8
   2ff2a:	ba12      	rev	r2, r2
   2ff2c:	0c03      	lsrs	r3, r0, #16
   2ff2e:	428b      	cmp	r3, r1
   2ff30:	d302      	bcc.n	2ff38 <__divsi3+0x38>
   2ff32:	1212      	asrs	r2, r2, #8
   2ff34:	0209      	lsls	r1, r1, #8
   2ff36:	d065      	beq.n	30004 <__divsi3+0x104>
   2ff38:	0b03      	lsrs	r3, r0, #12
   2ff3a:	428b      	cmp	r3, r1
   2ff3c:	d319      	bcc.n	2ff72 <__divsi3+0x72>
   2ff3e:	e000      	b.n	2ff42 <__divsi3+0x42>
   2ff40:	0a09      	lsrs	r1, r1, #8
   2ff42:	0bc3      	lsrs	r3, r0, #15
   2ff44:	428b      	cmp	r3, r1
   2ff46:	d301      	bcc.n	2ff4c <__divsi3+0x4c>
   2ff48:	03cb      	lsls	r3, r1, #15
   2ff4a:	1ac0      	subs	r0, r0, r3
   2ff4c:	4152      	adcs	r2, r2
   2ff4e:	0b83      	lsrs	r3, r0, #14
   2ff50:	428b      	cmp	r3, r1
   2ff52:	d301      	bcc.n	2ff58 <__divsi3+0x58>
   2ff54:	038b      	lsls	r3, r1, #14
   2ff56:	1ac0      	subs	r0, r0, r3
   2ff58:	4152      	adcs	r2, r2
   2ff5a:	0b43      	lsrs	r3, r0, #13
   2ff5c:	428b      	cmp	r3, r1
   2ff5e:	d301      	bcc.n	2ff64 <__divsi3+0x64>
   2ff60:	034b      	lsls	r3, r1, #13
   2ff62:	1ac0      	subs	r0, r0, r3
   2ff64:	4152      	adcs	r2, r2
   2ff66:	0b03      	lsrs	r3, r0, #12
   2ff68:	428b      	cmp	r3, r1
   2ff6a:	d301      	bcc.n	2ff70 <__divsi3+0x70>
   2ff6c:	030b      	lsls	r3, r1, #12
   2ff6e:	1ac0      	subs	r0, r0, r3
   2ff70:	4152      	adcs	r2, r2
   2ff72:	0ac3      	lsrs	r3, r0, #11
   2ff74:	428b      	cmp	r3, r1
   2ff76:	d301      	bcc.n	2ff7c <__divsi3+0x7c>
   2ff78:	02cb      	lsls	r3, r1, #11
   2ff7a:	1ac0      	subs	r0, r0, r3
   2ff7c:	4152      	adcs	r2, r2
   2ff7e:	0a83      	lsrs	r3, r0, #10
   2ff80:	428b      	cmp	r3, r1
   2ff82:	d301      	bcc.n	2ff88 <__divsi3+0x88>
   2ff84:	028b      	lsls	r3, r1, #10
   2ff86:	1ac0      	subs	r0, r0, r3
   2ff88:	4152      	adcs	r2, r2
   2ff8a:	0a43      	lsrs	r3, r0, #9
   2ff8c:	428b      	cmp	r3, r1
   2ff8e:	d301      	bcc.n	2ff94 <__divsi3+0x94>
   2ff90:	024b      	lsls	r3, r1, #9
   2ff92:	1ac0      	subs	r0, r0, r3
   2ff94:	4152      	adcs	r2, r2
   2ff96:	0a03      	lsrs	r3, r0, #8
   2ff98:	428b      	cmp	r3, r1
   2ff9a:	d301      	bcc.n	2ffa0 <__divsi3+0xa0>
   2ff9c:	020b      	lsls	r3, r1, #8
   2ff9e:	1ac0      	subs	r0, r0, r3
   2ffa0:	4152      	adcs	r2, r2
   2ffa2:	d2cd      	bcs.n	2ff40 <__divsi3+0x40>
   2ffa4:	09c3      	lsrs	r3, r0, #7
   2ffa6:	428b      	cmp	r3, r1
   2ffa8:	d301      	bcc.n	2ffae <__divsi3+0xae>
   2ffaa:	01cb      	lsls	r3, r1, #7
   2ffac:	1ac0      	subs	r0, r0, r3
   2ffae:	4152      	adcs	r2, r2
   2ffb0:	0983      	lsrs	r3, r0, #6
   2ffb2:	428b      	cmp	r3, r1
   2ffb4:	d301      	bcc.n	2ffba <__divsi3+0xba>
   2ffb6:	018b      	lsls	r3, r1, #6
   2ffb8:	1ac0      	subs	r0, r0, r3
   2ffba:	4152      	adcs	r2, r2
   2ffbc:	0943      	lsrs	r3, r0, #5
   2ffbe:	428b      	cmp	r3, r1
   2ffc0:	d301      	bcc.n	2ffc6 <__divsi3+0xc6>
   2ffc2:	014b      	lsls	r3, r1, #5
   2ffc4:	1ac0      	subs	r0, r0, r3
   2ffc6:	4152      	adcs	r2, r2
   2ffc8:	0903      	lsrs	r3, r0, #4
   2ffca:	428b      	cmp	r3, r1
   2ffcc:	d301      	bcc.n	2ffd2 <__divsi3+0xd2>
   2ffce:	010b      	lsls	r3, r1, #4
   2ffd0:	1ac0      	subs	r0, r0, r3
   2ffd2:	4152      	adcs	r2, r2
   2ffd4:	08c3      	lsrs	r3, r0, #3
   2ffd6:	428b      	cmp	r3, r1
   2ffd8:	d301      	bcc.n	2ffde <__divsi3+0xde>
   2ffda:	00cb      	lsls	r3, r1, #3
   2ffdc:	1ac0      	subs	r0, r0, r3
   2ffde:	4152      	adcs	r2, r2
   2ffe0:	0883      	lsrs	r3, r0, #2
   2ffe2:	428b      	cmp	r3, r1
   2ffe4:	d301      	bcc.n	2ffea <__divsi3+0xea>
   2ffe6:	008b      	lsls	r3, r1, #2
   2ffe8:	1ac0      	subs	r0, r0, r3
   2ffea:	4152      	adcs	r2, r2
   2ffec:	0843      	lsrs	r3, r0, #1
   2ffee:	428b      	cmp	r3, r1
   2fff0:	d301      	bcc.n	2fff6 <__divsi3+0xf6>
   2fff2:	004b      	lsls	r3, r1, #1
   2fff4:	1ac0      	subs	r0, r0, r3
   2fff6:	4152      	adcs	r2, r2
   2fff8:	1a41      	subs	r1, r0, r1
   2fffa:	d200      	bcs.n	2fffe <__divsi3+0xfe>
   2fffc:	4601      	mov	r1, r0
   2fffe:	4152      	adcs	r2, r2
   30000:	4610      	mov	r0, r2
   30002:	4770      	bx	lr
   30004:	e05d      	b.n	300c2 <__divsi3+0x1c2>
   30006:	0fca      	lsrs	r2, r1, #31
   30008:	d000      	beq.n	3000c <__divsi3+0x10c>
   3000a:	4249      	negs	r1, r1
   3000c:	1003      	asrs	r3, r0, #32
   3000e:	d300      	bcc.n	30012 <__divsi3+0x112>
   30010:	4240      	negs	r0, r0
   30012:	4053      	eors	r3, r2
   30014:	2200      	movs	r2, #0
   30016:	469c      	mov	ip, r3
   30018:	0903      	lsrs	r3, r0, #4
   3001a:	428b      	cmp	r3, r1
   3001c:	d32d      	bcc.n	3007a <__divsi3+0x17a>
   3001e:	0a03      	lsrs	r3, r0, #8
   30020:	428b      	cmp	r3, r1
   30022:	d312      	bcc.n	3004a <__divsi3+0x14a>
   30024:	22fc      	movs	r2, #252	; 0xfc
   30026:	0189      	lsls	r1, r1, #6
   30028:	ba12      	rev	r2, r2
   3002a:	0a03      	lsrs	r3, r0, #8
   3002c:	428b      	cmp	r3, r1
   3002e:	d30c      	bcc.n	3004a <__divsi3+0x14a>
   30030:	0189      	lsls	r1, r1, #6
   30032:	1192      	asrs	r2, r2, #6
   30034:	428b      	cmp	r3, r1
   30036:	d308      	bcc.n	3004a <__divsi3+0x14a>
   30038:	0189      	lsls	r1, r1, #6
   3003a:	1192      	asrs	r2, r2, #6
   3003c:	428b      	cmp	r3, r1
   3003e:	d304      	bcc.n	3004a <__divsi3+0x14a>
   30040:	0189      	lsls	r1, r1, #6
   30042:	d03a      	beq.n	300ba <__divsi3+0x1ba>
   30044:	1192      	asrs	r2, r2, #6
   30046:	e000      	b.n	3004a <__divsi3+0x14a>
   30048:	0989      	lsrs	r1, r1, #6
   3004a:	09c3      	lsrs	r3, r0, #7
   3004c:	428b      	cmp	r3, r1
   3004e:	d301      	bcc.n	30054 <__divsi3+0x154>
   30050:	01cb      	lsls	r3, r1, #7
   30052:	1ac0      	subs	r0, r0, r3
   30054:	4152      	adcs	r2, r2
   30056:	0983      	lsrs	r3, r0, #6
   30058:	428b      	cmp	r3, r1
   3005a:	d301      	bcc.n	30060 <__divsi3+0x160>
   3005c:	018b      	lsls	r3, r1, #6
   3005e:	1ac0      	subs	r0, r0, r3
   30060:	4152      	adcs	r2, r2
   30062:	0943      	lsrs	r3, r0, #5
   30064:	428b      	cmp	r3, r1
   30066:	d301      	bcc.n	3006c <__divsi3+0x16c>
   30068:	014b      	lsls	r3, r1, #5
   3006a:	1ac0      	subs	r0, r0, r3
   3006c:	4152      	adcs	r2, r2
   3006e:	0903      	lsrs	r3, r0, #4
   30070:	428b      	cmp	r3, r1
   30072:	d301      	bcc.n	30078 <__divsi3+0x178>
   30074:	010b      	lsls	r3, r1, #4
   30076:	1ac0      	subs	r0, r0, r3
   30078:	4152      	adcs	r2, r2
   3007a:	08c3      	lsrs	r3, r0, #3
   3007c:	428b      	cmp	r3, r1
   3007e:	d301      	bcc.n	30084 <__divsi3+0x184>
   30080:	00cb      	lsls	r3, r1, #3
   30082:	1ac0      	subs	r0, r0, r3
   30084:	4152      	adcs	r2, r2
   30086:	0883      	lsrs	r3, r0, #2
   30088:	428b      	cmp	r3, r1
   3008a:	d301      	bcc.n	30090 <__divsi3+0x190>
   3008c:	008b      	lsls	r3, r1, #2
   3008e:	1ac0      	subs	r0, r0, r3
   30090:	4152      	adcs	r2, r2
   30092:	d2d9      	bcs.n	30048 <__divsi3+0x148>
   30094:	0843      	lsrs	r3, r0, #1
   30096:	428b      	cmp	r3, r1
   30098:	d301      	bcc.n	3009e <__divsi3+0x19e>
   3009a:	004b      	lsls	r3, r1, #1
   3009c:	1ac0      	subs	r0, r0, r3
   3009e:	4152      	adcs	r2, r2
   300a0:	1a41      	subs	r1, r0, r1
   300a2:	d200      	bcs.n	300a6 <__divsi3+0x1a6>
   300a4:	4601      	mov	r1, r0
   300a6:	4663      	mov	r3, ip
   300a8:	4152      	adcs	r2, r2
   300aa:	105b      	asrs	r3, r3, #1
   300ac:	4610      	mov	r0, r2
   300ae:	d301      	bcc.n	300b4 <__divsi3+0x1b4>
   300b0:	4240      	negs	r0, r0
   300b2:	2b00      	cmp	r3, #0
   300b4:	d500      	bpl.n	300b8 <__divsi3+0x1b8>
   300b6:	4249      	negs	r1, r1
   300b8:	4770      	bx	lr
   300ba:	4663      	mov	r3, ip
   300bc:	105b      	asrs	r3, r3, #1
   300be:	d300      	bcc.n	300c2 <__divsi3+0x1c2>
   300c0:	4240      	negs	r0, r0
   300c2:	b501      	push	{r0, lr}
   300c4:	2000      	movs	r0, #0
   300c6:	f000 f805 	bl	300d4 <__aeabi_idiv0>
   300ca:	bd02      	pop	{r1, pc}

000300cc <__aeabi_idivmod>:
   300cc:	2900      	cmp	r1, #0
   300ce:	d0f8      	beq.n	300c2 <__divsi3+0x1c2>
   300d0:	e716      	b.n	2ff00 <__divsi3>
   300d2:	4770      	bx	lr

000300d4 <__aeabi_idiv0>:
   300d4:	4770      	bx	lr
   300d6:	46c0      	nop			; (mov r8, r8)

000300d8 <__aeabi_cfrcmple>:
   300d8:	4684      	mov	ip, r0
   300da:	1c08      	adds	r0, r1, #0
   300dc:	4661      	mov	r1, ip
   300de:	e7ff      	b.n	300e0 <__aeabi_cfcmpeq>

000300e0 <__aeabi_cfcmpeq>:
   300e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   300e2:	f000 fbb5 	bl	30850 <__lesf2>
   300e6:	2800      	cmp	r0, #0
   300e8:	d401      	bmi.n	300ee <__aeabi_cfcmpeq+0xe>
   300ea:	2100      	movs	r1, #0
   300ec:	42c8      	cmn	r0, r1
   300ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000300f0 <__aeabi_fcmpeq>:
   300f0:	b510      	push	{r4, lr}
   300f2:	f000 fb47 	bl	30784 <__eqsf2>
   300f6:	4240      	negs	r0, r0
   300f8:	3001      	adds	r0, #1
   300fa:	bd10      	pop	{r4, pc}

000300fc <__aeabi_fcmplt>:
   300fc:	b510      	push	{r4, lr}
   300fe:	f000 fba7 	bl	30850 <__lesf2>
   30102:	2800      	cmp	r0, #0
   30104:	db01      	blt.n	3010a <__aeabi_fcmplt+0xe>
   30106:	2000      	movs	r0, #0
   30108:	bd10      	pop	{r4, pc}
   3010a:	2001      	movs	r0, #1
   3010c:	bd10      	pop	{r4, pc}
   3010e:	46c0      	nop			; (mov r8, r8)

00030110 <__aeabi_fcmple>:
   30110:	b510      	push	{r4, lr}
   30112:	f000 fb9d 	bl	30850 <__lesf2>
   30116:	2800      	cmp	r0, #0
   30118:	dd01      	ble.n	3011e <__aeabi_fcmple+0xe>
   3011a:	2000      	movs	r0, #0
   3011c:	bd10      	pop	{r4, pc}
   3011e:	2001      	movs	r0, #1
   30120:	bd10      	pop	{r4, pc}
   30122:	46c0      	nop			; (mov r8, r8)

00030124 <__aeabi_fcmpgt>:
   30124:	b510      	push	{r4, lr}
   30126:	f000 fb53 	bl	307d0 <__gesf2>
   3012a:	2800      	cmp	r0, #0
   3012c:	dc01      	bgt.n	30132 <__aeabi_fcmpgt+0xe>
   3012e:	2000      	movs	r0, #0
   30130:	bd10      	pop	{r4, pc}
   30132:	2001      	movs	r0, #1
   30134:	bd10      	pop	{r4, pc}
   30136:	46c0      	nop			; (mov r8, r8)

00030138 <__aeabi_fcmpge>:
   30138:	b510      	push	{r4, lr}
   3013a:	f000 fb49 	bl	307d0 <__gesf2>
   3013e:	2800      	cmp	r0, #0
   30140:	da01      	bge.n	30146 <__aeabi_fcmpge+0xe>
   30142:	2000      	movs	r0, #0
   30144:	bd10      	pop	{r4, pc}
   30146:	2001      	movs	r0, #1
   30148:	bd10      	pop	{r4, pc}
   3014a:	46c0      	nop			; (mov r8, r8)

0003014c <__aeabi_lmul>:
   3014c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3014e:	46ce      	mov	lr, r9
   30150:	4647      	mov	r7, r8
   30152:	0415      	lsls	r5, r2, #16
   30154:	0c2d      	lsrs	r5, r5, #16
   30156:	002e      	movs	r6, r5
   30158:	b580      	push	{r7, lr}
   3015a:	0407      	lsls	r7, r0, #16
   3015c:	0c14      	lsrs	r4, r2, #16
   3015e:	0c3f      	lsrs	r7, r7, #16
   30160:	4699      	mov	r9, r3
   30162:	0c03      	lsrs	r3, r0, #16
   30164:	437e      	muls	r6, r7
   30166:	435d      	muls	r5, r3
   30168:	4367      	muls	r7, r4
   3016a:	4363      	muls	r3, r4
   3016c:	197f      	adds	r7, r7, r5
   3016e:	0c34      	lsrs	r4, r6, #16
   30170:	19e4      	adds	r4, r4, r7
   30172:	469c      	mov	ip, r3
   30174:	42a5      	cmp	r5, r4
   30176:	d903      	bls.n	30180 <__aeabi_lmul+0x34>
   30178:	2380      	movs	r3, #128	; 0x80
   3017a:	025b      	lsls	r3, r3, #9
   3017c:	4698      	mov	r8, r3
   3017e:	44c4      	add	ip, r8
   30180:	464b      	mov	r3, r9
   30182:	4351      	muls	r1, r2
   30184:	4343      	muls	r3, r0
   30186:	0436      	lsls	r6, r6, #16
   30188:	0c36      	lsrs	r6, r6, #16
   3018a:	0c25      	lsrs	r5, r4, #16
   3018c:	0424      	lsls	r4, r4, #16
   3018e:	4465      	add	r5, ip
   30190:	19a4      	adds	r4, r4, r6
   30192:	1859      	adds	r1, r3, r1
   30194:	1949      	adds	r1, r1, r5
   30196:	0020      	movs	r0, r4
   30198:	bc0c      	pop	{r2, r3}
   3019a:	4690      	mov	r8, r2
   3019c:	4699      	mov	r9, r3
   3019e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000301a0 <__aeabi_f2uiz>:
   301a0:	219e      	movs	r1, #158	; 0x9e
   301a2:	b510      	push	{r4, lr}
   301a4:	05c9      	lsls	r1, r1, #23
   301a6:	1c04      	adds	r4, r0, #0
   301a8:	f7ff ffc6 	bl	30138 <__aeabi_fcmpge>
   301ac:	2800      	cmp	r0, #0
   301ae:	d103      	bne.n	301b8 <__aeabi_f2uiz+0x18>
   301b0:	1c20      	adds	r0, r4, #0
   301b2:	f000 fe4b 	bl	30e4c <__aeabi_f2iz>
   301b6:	bd10      	pop	{r4, pc}
   301b8:	219e      	movs	r1, #158	; 0x9e
   301ba:	1c20      	adds	r0, r4, #0
   301bc:	05c9      	lsls	r1, r1, #23
   301be:	f000 fca9 	bl	30b14 <__aeabi_fsub>
   301c2:	f000 fe43 	bl	30e4c <__aeabi_f2iz>
   301c6:	2380      	movs	r3, #128	; 0x80
   301c8:	061b      	lsls	r3, r3, #24
   301ca:	469c      	mov	ip, r3
   301cc:	4460      	add	r0, ip
   301ce:	e7f2      	b.n	301b6 <__aeabi_f2uiz+0x16>

000301d0 <__aeabi_fadd>:
   301d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   301d2:	46c6      	mov	lr, r8
   301d4:	024e      	lsls	r6, r1, #9
   301d6:	0247      	lsls	r7, r0, #9
   301d8:	0a76      	lsrs	r6, r6, #9
   301da:	0a7b      	lsrs	r3, r7, #9
   301dc:	0044      	lsls	r4, r0, #1
   301de:	0fc5      	lsrs	r5, r0, #31
   301e0:	00f7      	lsls	r7, r6, #3
   301e2:	0048      	lsls	r0, r1, #1
   301e4:	4698      	mov	r8, r3
   301e6:	b500      	push	{lr}
   301e8:	0e24      	lsrs	r4, r4, #24
   301ea:	002a      	movs	r2, r5
   301ec:	00db      	lsls	r3, r3, #3
   301ee:	0e00      	lsrs	r0, r0, #24
   301f0:	0fc9      	lsrs	r1, r1, #31
   301f2:	46bc      	mov	ip, r7
   301f4:	428d      	cmp	r5, r1
   301f6:	d067      	beq.n	302c8 <__aeabi_fadd+0xf8>
   301f8:	1a22      	subs	r2, r4, r0
   301fa:	2a00      	cmp	r2, #0
   301fc:	dc00      	bgt.n	30200 <__aeabi_fadd+0x30>
   301fe:	e0a5      	b.n	3034c <__aeabi_fadd+0x17c>
   30200:	2800      	cmp	r0, #0
   30202:	d13a      	bne.n	3027a <__aeabi_fadd+0xaa>
   30204:	2f00      	cmp	r7, #0
   30206:	d100      	bne.n	3020a <__aeabi_fadd+0x3a>
   30208:	e093      	b.n	30332 <__aeabi_fadd+0x162>
   3020a:	1e51      	subs	r1, r2, #1
   3020c:	2900      	cmp	r1, #0
   3020e:	d000      	beq.n	30212 <__aeabi_fadd+0x42>
   30210:	e0bc      	b.n	3038c <__aeabi_fadd+0x1bc>
   30212:	2401      	movs	r4, #1
   30214:	1bdb      	subs	r3, r3, r7
   30216:	015a      	lsls	r2, r3, #5
   30218:	d546      	bpl.n	302a8 <__aeabi_fadd+0xd8>
   3021a:	019b      	lsls	r3, r3, #6
   3021c:	099e      	lsrs	r6, r3, #6
   3021e:	0030      	movs	r0, r6
   30220:	f002 faca 	bl	327b8 <__clzsi2>
   30224:	3805      	subs	r0, #5
   30226:	4086      	lsls	r6, r0
   30228:	4284      	cmp	r4, r0
   3022a:	dd00      	ble.n	3022e <__aeabi_fadd+0x5e>
   3022c:	e09d      	b.n	3036a <__aeabi_fadd+0x19a>
   3022e:	1b04      	subs	r4, r0, r4
   30230:	0032      	movs	r2, r6
   30232:	2020      	movs	r0, #32
   30234:	3401      	adds	r4, #1
   30236:	40e2      	lsrs	r2, r4
   30238:	1b04      	subs	r4, r0, r4
   3023a:	40a6      	lsls	r6, r4
   3023c:	0033      	movs	r3, r6
   3023e:	1e5e      	subs	r6, r3, #1
   30240:	41b3      	sbcs	r3, r6
   30242:	2400      	movs	r4, #0
   30244:	4313      	orrs	r3, r2
   30246:	075a      	lsls	r2, r3, #29
   30248:	d004      	beq.n	30254 <__aeabi_fadd+0x84>
   3024a:	220f      	movs	r2, #15
   3024c:	401a      	ands	r2, r3
   3024e:	2a04      	cmp	r2, #4
   30250:	d000      	beq.n	30254 <__aeabi_fadd+0x84>
   30252:	3304      	adds	r3, #4
   30254:	015a      	lsls	r2, r3, #5
   30256:	d529      	bpl.n	302ac <__aeabi_fadd+0xdc>
   30258:	3401      	adds	r4, #1
   3025a:	2cff      	cmp	r4, #255	; 0xff
   3025c:	d100      	bne.n	30260 <__aeabi_fadd+0x90>
   3025e:	e081      	b.n	30364 <__aeabi_fadd+0x194>
   30260:	002a      	movs	r2, r5
   30262:	019b      	lsls	r3, r3, #6
   30264:	0a5b      	lsrs	r3, r3, #9
   30266:	b2e4      	uxtb	r4, r4
   30268:	025b      	lsls	r3, r3, #9
   3026a:	05e4      	lsls	r4, r4, #23
   3026c:	0a58      	lsrs	r0, r3, #9
   3026e:	07d2      	lsls	r2, r2, #31
   30270:	4320      	orrs	r0, r4
   30272:	4310      	orrs	r0, r2
   30274:	bc04      	pop	{r2}
   30276:	4690      	mov	r8, r2
   30278:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3027a:	2cff      	cmp	r4, #255	; 0xff
   3027c:	d0e3      	beq.n	30246 <__aeabi_fadd+0x76>
   3027e:	2180      	movs	r1, #128	; 0x80
   30280:	0038      	movs	r0, r7
   30282:	04c9      	lsls	r1, r1, #19
   30284:	4308      	orrs	r0, r1
   30286:	4684      	mov	ip, r0
   30288:	2a1b      	cmp	r2, #27
   3028a:	dd00      	ble.n	3028e <__aeabi_fadd+0xbe>
   3028c:	e082      	b.n	30394 <__aeabi_fadd+0x1c4>
   3028e:	2020      	movs	r0, #32
   30290:	4661      	mov	r1, ip
   30292:	40d1      	lsrs	r1, r2
   30294:	1a82      	subs	r2, r0, r2
   30296:	4660      	mov	r0, ip
   30298:	4090      	lsls	r0, r2
   3029a:	0002      	movs	r2, r0
   3029c:	1e50      	subs	r0, r2, #1
   3029e:	4182      	sbcs	r2, r0
   302a0:	430a      	orrs	r2, r1
   302a2:	1a9b      	subs	r3, r3, r2
   302a4:	015a      	lsls	r2, r3, #5
   302a6:	d4b8      	bmi.n	3021a <__aeabi_fadd+0x4a>
   302a8:	075a      	lsls	r2, r3, #29
   302aa:	d1ce      	bne.n	3024a <__aeabi_fadd+0x7a>
   302ac:	08de      	lsrs	r6, r3, #3
   302ae:	002a      	movs	r2, r5
   302b0:	2cff      	cmp	r4, #255	; 0xff
   302b2:	d13a      	bne.n	3032a <__aeabi_fadd+0x15a>
   302b4:	2e00      	cmp	r6, #0
   302b6:	d100      	bne.n	302ba <__aeabi_fadd+0xea>
   302b8:	e0ae      	b.n	30418 <__aeabi_fadd+0x248>
   302ba:	2380      	movs	r3, #128	; 0x80
   302bc:	03db      	lsls	r3, r3, #15
   302be:	4333      	orrs	r3, r6
   302c0:	025b      	lsls	r3, r3, #9
   302c2:	0a5b      	lsrs	r3, r3, #9
   302c4:	24ff      	movs	r4, #255	; 0xff
   302c6:	e7cf      	b.n	30268 <__aeabi_fadd+0x98>
   302c8:	1a21      	subs	r1, r4, r0
   302ca:	2900      	cmp	r1, #0
   302cc:	dd52      	ble.n	30374 <__aeabi_fadd+0x1a4>
   302ce:	2800      	cmp	r0, #0
   302d0:	d031      	beq.n	30336 <__aeabi_fadd+0x166>
   302d2:	2cff      	cmp	r4, #255	; 0xff
   302d4:	d0b7      	beq.n	30246 <__aeabi_fadd+0x76>
   302d6:	2080      	movs	r0, #128	; 0x80
   302d8:	003e      	movs	r6, r7
   302da:	04c0      	lsls	r0, r0, #19
   302dc:	4306      	orrs	r6, r0
   302de:	46b4      	mov	ip, r6
   302e0:	291b      	cmp	r1, #27
   302e2:	dd00      	ble.n	302e6 <__aeabi_fadd+0x116>
   302e4:	e0aa      	b.n	3043c <__aeabi_fadd+0x26c>
   302e6:	2620      	movs	r6, #32
   302e8:	4660      	mov	r0, ip
   302ea:	40c8      	lsrs	r0, r1
   302ec:	1a71      	subs	r1, r6, r1
   302ee:	4666      	mov	r6, ip
   302f0:	408e      	lsls	r6, r1
   302f2:	0031      	movs	r1, r6
   302f4:	1e4e      	subs	r6, r1, #1
   302f6:	41b1      	sbcs	r1, r6
   302f8:	4301      	orrs	r1, r0
   302fa:	185b      	adds	r3, r3, r1
   302fc:	0159      	lsls	r1, r3, #5
   302fe:	d5d3      	bpl.n	302a8 <__aeabi_fadd+0xd8>
   30300:	3401      	adds	r4, #1
   30302:	2cff      	cmp	r4, #255	; 0xff
   30304:	d100      	bne.n	30308 <__aeabi_fadd+0x138>
   30306:	e087      	b.n	30418 <__aeabi_fadd+0x248>
   30308:	2201      	movs	r2, #1
   3030a:	4978      	ldr	r1, [pc, #480]	; (304ec <__aeabi_fadd+0x31c>)
   3030c:	401a      	ands	r2, r3
   3030e:	085b      	lsrs	r3, r3, #1
   30310:	400b      	ands	r3, r1
   30312:	4313      	orrs	r3, r2
   30314:	e797      	b.n	30246 <__aeabi_fadd+0x76>
   30316:	2c00      	cmp	r4, #0
   30318:	d000      	beq.n	3031c <__aeabi_fadd+0x14c>
   3031a:	e0a7      	b.n	3046c <__aeabi_fadd+0x29c>
   3031c:	2b00      	cmp	r3, #0
   3031e:	d000      	beq.n	30322 <__aeabi_fadd+0x152>
   30320:	e0b6      	b.n	30490 <__aeabi_fadd+0x2c0>
   30322:	1e3b      	subs	r3, r7, #0
   30324:	d162      	bne.n	303ec <__aeabi_fadd+0x21c>
   30326:	2600      	movs	r6, #0
   30328:	2200      	movs	r2, #0
   3032a:	0273      	lsls	r3, r6, #9
   3032c:	0a5b      	lsrs	r3, r3, #9
   3032e:	b2e4      	uxtb	r4, r4
   30330:	e79a      	b.n	30268 <__aeabi_fadd+0x98>
   30332:	0014      	movs	r4, r2
   30334:	e787      	b.n	30246 <__aeabi_fadd+0x76>
   30336:	2f00      	cmp	r7, #0
   30338:	d04d      	beq.n	303d6 <__aeabi_fadd+0x206>
   3033a:	1e48      	subs	r0, r1, #1
   3033c:	2800      	cmp	r0, #0
   3033e:	d157      	bne.n	303f0 <__aeabi_fadd+0x220>
   30340:	4463      	add	r3, ip
   30342:	2401      	movs	r4, #1
   30344:	015a      	lsls	r2, r3, #5
   30346:	d5af      	bpl.n	302a8 <__aeabi_fadd+0xd8>
   30348:	2402      	movs	r4, #2
   3034a:	e7dd      	b.n	30308 <__aeabi_fadd+0x138>
   3034c:	2a00      	cmp	r2, #0
   3034e:	d124      	bne.n	3039a <__aeabi_fadd+0x1ca>
   30350:	1c62      	adds	r2, r4, #1
   30352:	b2d2      	uxtb	r2, r2
   30354:	2a01      	cmp	r2, #1
   30356:	ddde      	ble.n	30316 <__aeabi_fadd+0x146>
   30358:	1bde      	subs	r6, r3, r7
   3035a:	0172      	lsls	r2, r6, #5
   3035c:	d535      	bpl.n	303ca <__aeabi_fadd+0x1fa>
   3035e:	1afe      	subs	r6, r7, r3
   30360:	000d      	movs	r5, r1
   30362:	e75c      	b.n	3021e <__aeabi_fadd+0x4e>
   30364:	002a      	movs	r2, r5
   30366:	2300      	movs	r3, #0
   30368:	e77e      	b.n	30268 <__aeabi_fadd+0x98>
   3036a:	0033      	movs	r3, r6
   3036c:	4a60      	ldr	r2, [pc, #384]	; (304f0 <__aeabi_fadd+0x320>)
   3036e:	1a24      	subs	r4, r4, r0
   30370:	4013      	ands	r3, r2
   30372:	e768      	b.n	30246 <__aeabi_fadd+0x76>
   30374:	2900      	cmp	r1, #0
   30376:	d163      	bne.n	30440 <__aeabi_fadd+0x270>
   30378:	1c61      	adds	r1, r4, #1
   3037a:	b2c8      	uxtb	r0, r1
   3037c:	2801      	cmp	r0, #1
   3037e:	dd4e      	ble.n	3041e <__aeabi_fadd+0x24e>
   30380:	29ff      	cmp	r1, #255	; 0xff
   30382:	d049      	beq.n	30418 <__aeabi_fadd+0x248>
   30384:	4463      	add	r3, ip
   30386:	085b      	lsrs	r3, r3, #1
   30388:	000c      	movs	r4, r1
   3038a:	e75c      	b.n	30246 <__aeabi_fadd+0x76>
   3038c:	2aff      	cmp	r2, #255	; 0xff
   3038e:	d041      	beq.n	30414 <__aeabi_fadd+0x244>
   30390:	000a      	movs	r2, r1
   30392:	e779      	b.n	30288 <__aeabi_fadd+0xb8>
   30394:	2201      	movs	r2, #1
   30396:	1a9b      	subs	r3, r3, r2
   30398:	e784      	b.n	302a4 <__aeabi_fadd+0xd4>
   3039a:	2c00      	cmp	r4, #0
   3039c:	d01d      	beq.n	303da <__aeabi_fadd+0x20a>
   3039e:	28ff      	cmp	r0, #255	; 0xff
   303a0:	d022      	beq.n	303e8 <__aeabi_fadd+0x218>
   303a2:	2480      	movs	r4, #128	; 0x80
   303a4:	04e4      	lsls	r4, r4, #19
   303a6:	4252      	negs	r2, r2
   303a8:	4323      	orrs	r3, r4
   303aa:	2a1b      	cmp	r2, #27
   303ac:	dd00      	ble.n	303b0 <__aeabi_fadd+0x1e0>
   303ae:	e08a      	b.n	304c6 <__aeabi_fadd+0x2f6>
   303b0:	001c      	movs	r4, r3
   303b2:	2520      	movs	r5, #32
   303b4:	40d4      	lsrs	r4, r2
   303b6:	1aaa      	subs	r2, r5, r2
   303b8:	4093      	lsls	r3, r2
   303ba:	1e5a      	subs	r2, r3, #1
   303bc:	4193      	sbcs	r3, r2
   303be:	4323      	orrs	r3, r4
   303c0:	4662      	mov	r2, ip
   303c2:	0004      	movs	r4, r0
   303c4:	1ad3      	subs	r3, r2, r3
   303c6:	000d      	movs	r5, r1
   303c8:	e725      	b.n	30216 <__aeabi_fadd+0x46>
   303ca:	2e00      	cmp	r6, #0
   303cc:	d000      	beq.n	303d0 <__aeabi_fadd+0x200>
   303ce:	e726      	b.n	3021e <__aeabi_fadd+0x4e>
   303d0:	2200      	movs	r2, #0
   303d2:	2400      	movs	r4, #0
   303d4:	e7a9      	b.n	3032a <__aeabi_fadd+0x15a>
   303d6:	000c      	movs	r4, r1
   303d8:	e735      	b.n	30246 <__aeabi_fadd+0x76>
   303da:	2b00      	cmp	r3, #0
   303dc:	d04d      	beq.n	3047a <__aeabi_fadd+0x2aa>
   303de:	43d2      	mvns	r2, r2
   303e0:	2a00      	cmp	r2, #0
   303e2:	d0ed      	beq.n	303c0 <__aeabi_fadd+0x1f0>
   303e4:	28ff      	cmp	r0, #255	; 0xff
   303e6:	d1e0      	bne.n	303aa <__aeabi_fadd+0x1da>
   303e8:	4663      	mov	r3, ip
   303ea:	24ff      	movs	r4, #255	; 0xff
   303ec:	000d      	movs	r5, r1
   303ee:	e72a      	b.n	30246 <__aeabi_fadd+0x76>
   303f0:	29ff      	cmp	r1, #255	; 0xff
   303f2:	d00f      	beq.n	30414 <__aeabi_fadd+0x244>
   303f4:	0001      	movs	r1, r0
   303f6:	e773      	b.n	302e0 <__aeabi_fadd+0x110>
   303f8:	2b00      	cmp	r3, #0
   303fa:	d061      	beq.n	304c0 <__aeabi_fadd+0x2f0>
   303fc:	24ff      	movs	r4, #255	; 0xff
   303fe:	2f00      	cmp	r7, #0
   30400:	d100      	bne.n	30404 <__aeabi_fadd+0x234>
   30402:	e720      	b.n	30246 <__aeabi_fadd+0x76>
   30404:	2280      	movs	r2, #128	; 0x80
   30406:	4641      	mov	r1, r8
   30408:	03d2      	lsls	r2, r2, #15
   3040a:	4211      	tst	r1, r2
   3040c:	d002      	beq.n	30414 <__aeabi_fadd+0x244>
   3040e:	4216      	tst	r6, r2
   30410:	d100      	bne.n	30414 <__aeabi_fadd+0x244>
   30412:	003b      	movs	r3, r7
   30414:	24ff      	movs	r4, #255	; 0xff
   30416:	e716      	b.n	30246 <__aeabi_fadd+0x76>
   30418:	24ff      	movs	r4, #255	; 0xff
   3041a:	2300      	movs	r3, #0
   3041c:	e724      	b.n	30268 <__aeabi_fadd+0x98>
   3041e:	2c00      	cmp	r4, #0
   30420:	d1ea      	bne.n	303f8 <__aeabi_fadd+0x228>
   30422:	2b00      	cmp	r3, #0
   30424:	d058      	beq.n	304d8 <__aeabi_fadd+0x308>
   30426:	2f00      	cmp	r7, #0
   30428:	d100      	bne.n	3042c <__aeabi_fadd+0x25c>
   3042a:	e70c      	b.n	30246 <__aeabi_fadd+0x76>
   3042c:	4463      	add	r3, ip
   3042e:	015a      	lsls	r2, r3, #5
   30430:	d400      	bmi.n	30434 <__aeabi_fadd+0x264>
   30432:	e739      	b.n	302a8 <__aeabi_fadd+0xd8>
   30434:	4a2e      	ldr	r2, [pc, #184]	; (304f0 <__aeabi_fadd+0x320>)
   30436:	000c      	movs	r4, r1
   30438:	4013      	ands	r3, r2
   3043a:	e704      	b.n	30246 <__aeabi_fadd+0x76>
   3043c:	2101      	movs	r1, #1
   3043e:	e75c      	b.n	302fa <__aeabi_fadd+0x12a>
   30440:	2c00      	cmp	r4, #0
   30442:	d11e      	bne.n	30482 <__aeabi_fadd+0x2b2>
   30444:	2b00      	cmp	r3, #0
   30446:	d040      	beq.n	304ca <__aeabi_fadd+0x2fa>
   30448:	43c9      	mvns	r1, r1
   3044a:	2900      	cmp	r1, #0
   3044c:	d00b      	beq.n	30466 <__aeabi_fadd+0x296>
   3044e:	28ff      	cmp	r0, #255	; 0xff
   30450:	d036      	beq.n	304c0 <__aeabi_fadd+0x2f0>
   30452:	291b      	cmp	r1, #27
   30454:	dc47      	bgt.n	304e6 <__aeabi_fadd+0x316>
   30456:	001c      	movs	r4, r3
   30458:	2620      	movs	r6, #32
   3045a:	40cc      	lsrs	r4, r1
   3045c:	1a71      	subs	r1, r6, r1
   3045e:	408b      	lsls	r3, r1
   30460:	1e59      	subs	r1, r3, #1
   30462:	418b      	sbcs	r3, r1
   30464:	4323      	orrs	r3, r4
   30466:	4463      	add	r3, ip
   30468:	0004      	movs	r4, r0
   3046a:	e747      	b.n	302fc <__aeabi_fadd+0x12c>
   3046c:	2b00      	cmp	r3, #0
   3046e:	d118      	bne.n	304a2 <__aeabi_fadd+0x2d2>
   30470:	1e3b      	subs	r3, r7, #0
   30472:	d02d      	beq.n	304d0 <__aeabi_fadd+0x300>
   30474:	000d      	movs	r5, r1
   30476:	24ff      	movs	r4, #255	; 0xff
   30478:	e6e5      	b.n	30246 <__aeabi_fadd+0x76>
   3047a:	003b      	movs	r3, r7
   3047c:	0004      	movs	r4, r0
   3047e:	000d      	movs	r5, r1
   30480:	e6e1      	b.n	30246 <__aeabi_fadd+0x76>
   30482:	28ff      	cmp	r0, #255	; 0xff
   30484:	d01c      	beq.n	304c0 <__aeabi_fadd+0x2f0>
   30486:	2480      	movs	r4, #128	; 0x80
   30488:	04e4      	lsls	r4, r4, #19
   3048a:	4249      	negs	r1, r1
   3048c:	4323      	orrs	r3, r4
   3048e:	e7e0      	b.n	30452 <__aeabi_fadd+0x282>
   30490:	2f00      	cmp	r7, #0
   30492:	d100      	bne.n	30496 <__aeabi_fadd+0x2c6>
   30494:	e6d7      	b.n	30246 <__aeabi_fadd+0x76>
   30496:	1bde      	subs	r6, r3, r7
   30498:	0172      	lsls	r2, r6, #5
   3049a:	d51f      	bpl.n	304dc <__aeabi_fadd+0x30c>
   3049c:	1afb      	subs	r3, r7, r3
   3049e:	000d      	movs	r5, r1
   304a0:	e6d1      	b.n	30246 <__aeabi_fadd+0x76>
   304a2:	24ff      	movs	r4, #255	; 0xff
   304a4:	2f00      	cmp	r7, #0
   304a6:	d100      	bne.n	304aa <__aeabi_fadd+0x2da>
   304a8:	e6cd      	b.n	30246 <__aeabi_fadd+0x76>
   304aa:	2280      	movs	r2, #128	; 0x80
   304ac:	4640      	mov	r0, r8
   304ae:	03d2      	lsls	r2, r2, #15
   304b0:	4210      	tst	r0, r2
   304b2:	d0af      	beq.n	30414 <__aeabi_fadd+0x244>
   304b4:	4216      	tst	r6, r2
   304b6:	d1ad      	bne.n	30414 <__aeabi_fadd+0x244>
   304b8:	003b      	movs	r3, r7
   304ba:	000d      	movs	r5, r1
   304bc:	24ff      	movs	r4, #255	; 0xff
   304be:	e6c2      	b.n	30246 <__aeabi_fadd+0x76>
   304c0:	4663      	mov	r3, ip
   304c2:	24ff      	movs	r4, #255	; 0xff
   304c4:	e6bf      	b.n	30246 <__aeabi_fadd+0x76>
   304c6:	2301      	movs	r3, #1
   304c8:	e77a      	b.n	303c0 <__aeabi_fadd+0x1f0>
   304ca:	003b      	movs	r3, r7
   304cc:	0004      	movs	r4, r0
   304ce:	e6ba      	b.n	30246 <__aeabi_fadd+0x76>
   304d0:	2680      	movs	r6, #128	; 0x80
   304d2:	2200      	movs	r2, #0
   304d4:	03f6      	lsls	r6, r6, #15
   304d6:	e6f0      	b.n	302ba <__aeabi_fadd+0xea>
   304d8:	003b      	movs	r3, r7
   304da:	e6b4      	b.n	30246 <__aeabi_fadd+0x76>
   304dc:	1e33      	subs	r3, r6, #0
   304de:	d000      	beq.n	304e2 <__aeabi_fadd+0x312>
   304e0:	e6e2      	b.n	302a8 <__aeabi_fadd+0xd8>
   304e2:	2200      	movs	r2, #0
   304e4:	e721      	b.n	3032a <__aeabi_fadd+0x15a>
   304e6:	2301      	movs	r3, #1
   304e8:	e7bd      	b.n	30466 <__aeabi_fadd+0x296>
   304ea:	46c0      	nop			; (mov r8, r8)
   304ec:	7dffffff 	.word	0x7dffffff
   304f0:	fbffffff 	.word	0xfbffffff

000304f4 <__aeabi_fdiv>:
   304f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   304f6:	4657      	mov	r7, sl
   304f8:	464e      	mov	r6, r9
   304fa:	46de      	mov	lr, fp
   304fc:	4645      	mov	r5, r8
   304fe:	b5e0      	push	{r5, r6, r7, lr}
   30500:	0244      	lsls	r4, r0, #9
   30502:	0043      	lsls	r3, r0, #1
   30504:	0fc6      	lsrs	r6, r0, #31
   30506:	b083      	sub	sp, #12
   30508:	1c0f      	adds	r7, r1, #0
   3050a:	0a64      	lsrs	r4, r4, #9
   3050c:	0e1b      	lsrs	r3, r3, #24
   3050e:	46b2      	mov	sl, r6
   30510:	d053      	beq.n	305ba <__aeabi_fdiv+0xc6>
   30512:	2bff      	cmp	r3, #255	; 0xff
   30514:	d027      	beq.n	30566 <__aeabi_fdiv+0x72>
   30516:	2280      	movs	r2, #128	; 0x80
   30518:	00e4      	lsls	r4, r4, #3
   3051a:	04d2      	lsls	r2, r2, #19
   3051c:	4314      	orrs	r4, r2
   3051e:	227f      	movs	r2, #127	; 0x7f
   30520:	4252      	negs	r2, r2
   30522:	4690      	mov	r8, r2
   30524:	4498      	add	r8, r3
   30526:	2300      	movs	r3, #0
   30528:	4699      	mov	r9, r3
   3052a:	469b      	mov	fp, r3
   3052c:	027d      	lsls	r5, r7, #9
   3052e:	0078      	lsls	r0, r7, #1
   30530:	0ffb      	lsrs	r3, r7, #31
   30532:	0a6d      	lsrs	r5, r5, #9
   30534:	0e00      	lsrs	r0, r0, #24
   30536:	9300      	str	r3, [sp, #0]
   30538:	d024      	beq.n	30584 <__aeabi_fdiv+0x90>
   3053a:	28ff      	cmp	r0, #255	; 0xff
   3053c:	d046      	beq.n	305cc <__aeabi_fdiv+0xd8>
   3053e:	2380      	movs	r3, #128	; 0x80
   30540:	2100      	movs	r1, #0
   30542:	00ed      	lsls	r5, r5, #3
   30544:	04db      	lsls	r3, r3, #19
   30546:	431d      	orrs	r5, r3
   30548:	387f      	subs	r0, #127	; 0x7f
   3054a:	4647      	mov	r7, r8
   3054c:	1a38      	subs	r0, r7, r0
   3054e:	464f      	mov	r7, r9
   30550:	430f      	orrs	r7, r1
   30552:	00bf      	lsls	r7, r7, #2
   30554:	46b9      	mov	r9, r7
   30556:	0033      	movs	r3, r6
   30558:	9a00      	ldr	r2, [sp, #0]
   3055a:	4f87      	ldr	r7, [pc, #540]	; (30778 <__aeabi_fdiv+0x284>)
   3055c:	4053      	eors	r3, r2
   3055e:	464a      	mov	r2, r9
   30560:	58ba      	ldr	r2, [r7, r2]
   30562:	9301      	str	r3, [sp, #4]
   30564:	4697      	mov	pc, r2
   30566:	2c00      	cmp	r4, #0
   30568:	d14e      	bne.n	30608 <__aeabi_fdiv+0x114>
   3056a:	2308      	movs	r3, #8
   3056c:	4699      	mov	r9, r3
   3056e:	33f7      	adds	r3, #247	; 0xf7
   30570:	4698      	mov	r8, r3
   30572:	3bfd      	subs	r3, #253	; 0xfd
   30574:	469b      	mov	fp, r3
   30576:	027d      	lsls	r5, r7, #9
   30578:	0078      	lsls	r0, r7, #1
   3057a:	0ffb      	lsrs	r3, r7, #31
   3057c:	0a6d      	lsrs	r5, r5, #9
   3057e:	0e00      	lsrs	r0, r0, #24
   30580:	9300      	str	r3, [sp, #0]
   30582:	d1da      	bne.n	3053a <__aeabi_fdiv+0x46>
   30584:	2d00      	cmp	r5, #0
   30586:	d126      	bne.n	305d6 <__aeabi_fdiv+0xe2>
   30588:	2000      	movs	r0, #0
   3058a:	2101      	movs	r1, #1
   3058c:	0033      	movs	r3, r6
   3058e:	9a00      	ldr	r2, [sp, #0]
   30590:	4f7a      	ldr	r7, [pc, #488]	; (3077c <__aeabi_fdiv+0x288>)
   30592:	4053      	eors	r3, r2
   30594:	4642      	mov	r2, r8
   30596:	1a10      	subs	r0, r2, r0
   30598:	464a      	mov	r2, r9
   3059a:	430a      	orrs	r2, r1
   3059c:	0092      	lsls	r2, r2, #2
   3059e:	58ba      	ldr	r2, [r7, r2]
   305a0:	001d      	movs	r5, r3
   305a2:	4697      	mov	pc, r2
   305a4:	9b00      	ldr	r3, [sp, #0]
   305a6:	002c      	movs	r4, r5
   305a8:	469a      	mov	sl, r3
   305aa:	468b      	mov	fp, r1
   305ac:	465b      	mov	r3, fp
   305ae:	2b02      	cmp	r3, #2
   305b0:	d131      	bne.n	30616 <__aeabi_fdiv+0x122>
   305b2:	4653      	mov	r3, sl
   305b4:	21ff      	movs	r1, #255	; 0xff
   305b6:	2400      	movs	r4, #0
   305b8:	e038      	b.n	3062c <__aeabi_fdiv+0x138>
   305ba:	2c00      	cmp	r4, #0
   305bc:	d117      	bne.n	305ee <__aeabi_fdiv+0xfa>
   305be:	2304      	movs	r3, #4
   305c0:	4699      	mov	r9, r3
   305c2:	2300      	movs	r3, #0
   305c4:	4698      	mov	r8, r3
   305c6:	3301      	adds	r3, #1
   305c8:	469b      	mov	fp, r3
   305ca:	e7af      	b.n	3052c <__aeabi_fdiv+0x38>
   305cc:	20ff      	movs	r0, #255	; 0xff
   305ce:	2d00      	cmp	r5, #0
   305d0:	d10b      	bne.n	305ea <__aeabi_fdiv+0xf6>
   305d2:	2102      	movs	r1, #2
   305d4:	e7da      	b.n	3058c <__aeabi_fdiv+0x98>
   305d6:	0028      	movs	r0, r5
   305d8:	f002 f8ee 	bl	327b8 <__clzsi2>
   305dc:	1f43      	subs	r3, r0, #5
   305de:	409d      	lsls	r5, r3
   305e0:	2376      	movs	r3, #118	; 0x76
   305e2:	425b      	negs	r3, r3
   305e4:	1a18      	subs	r0, r3, r0
   305e6:	2100      	movs	r1, #0
   305e8:	e7af      	b.n	3054a <__aeabi_fdiv+0x56>
   305ea:	2103      	movs	r1, #3
   305ec:	e7ad      	b.n	3054a <__aeabi_fdiv+0x56>
   305ee:	0020      	movs	r0, r4
   305f0:	f002 f8e2 	bl	327b8 <__clzsi2>
   305f4:	1f43      	subs	r3, r0, #5
   305f6:	409c      	lsls	r4, r3
   305f8:	2376      	movs	r3, #118	; 0x76
   305fa:	425b      	negs	r3, r3
   305fc:	1a1b      	subs	r3, r3, r0
   305fe:	4698      	mov	r8, r3
   30600:	2300      	movs	r3, #0
   30602:	4699      	mov	r9, r3
   30604:	469b      	mov	fp, r3
   30606:	e791      	b.n	3052c <__aeabi_fdiv+0x38>
   30608:	230c      	movs	r3, #12
   3060a:	4699      	mov	r9, r3
   3060c:	33f3      	adds	r3, #243	; 0xf3
   3060e:	4698      	mov	r8, r3
   30610:	3bfc      	subs	r3, #252	; 0xfc
   30612:	469b      	mov	fp, r3
   30614:	e78a      	b.n	3052c <__aeabi_fdiv+0x38>
   30616:	2b03      	cmp	r3, #3
   30618:	d100      	bne.n	3061c <__aeabi_fdiv+0x128>
   3061a:	e0a5      	b.n	30768 <__aeabi_fdiv+0x274>
   3061c:	4655      	mov	r5, sl
   3061e:	2b01      	cmp	r3, #1
   30620:	d000      	beq.n	30624 <__aeabi_fdiv+0x130>
   30622:	e081      	b.n	30728 <__aeabi_fdiv+0x234>
   30624:	2301      	movs	r3, #1
   30626:	2100      	movs	r1, #0
   30628:	2400      	movs	r4, #0
   3062a:	402b      	ands	r3, r5
   3062c:	0264      	lsls	r4, r4, #9
   3062e:	05c9      	lsls	r1, r1, #23
   30630:	0a60      	lsrs	r0, r4, #9
   30632:	07db      	lsls	r3, r3, #31
   30634:	4308      	orrs	r0, r1
   30636:	4318      	orrs	r0, r3
   30638:	b003      	add	sp, #12
   3063a:	bc3c      	pop	{r2, r3, r4, r5}
   3063c:	4690      	mov	r8, r2
   3063e:	4699      	mov	r9, r3
   30640:	46a2      	mov	sl, r4
   30642:	46ab      	mov	fp, r5
   30644:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30646:	2480      	movs	r4, #128	; 0x80
   30648:	2300      	movs	r3, #0
   3064a:	03e4      	lsls	r4, r4, #15
   3064c:	21ff      	movs	r1, #255	; 0xff
   3064e:	e7ed      	b.n	3062c <__aeabi_fdiv+0x138>
   30650:	21ff      	movs	r1, #255	; 0xff
   30652:	2400      	movs	r4, #0
   30654:	e7ea      	b.n	3062c <__aeabi_fdiv+0x138>
   30656:	2301      	movs	r3, #1
   30658:	1a59      	subs	r1, r3, r1
   3065a:	291b      	cmp	r1, #27
   3065c:	dd66      	ble.n	3072c <__aeabi_fdiv+0x238>
   3065e:	9a01      	ldr	r2, [sp, #4]
   30660:	4013      	ands	r3, r2
   30662:	2100      	movs	r1, #0
   30664:	2400      	movs	r4, #0
   30666:	e7e1      	b.n	3062c <__aeabi_fdiv+0x138>
   30668:	2380      	movs	r3, #128	; 0x80
   3066a:	03db      	lsls	r3, r3, #15
   3066c:	421c      	tst	r4, r3
   3066e:	d038      	beq.n	306e2 <__aeabi_fdiv+0x1ee>
   30670:	421d      	tst	r5, r3
   30672:	d051      	beq.n	30718 <__aeabi_fdiv+0x224>
   30674:	431c      	orrs	r4, r3
   30676:	0264      	lsls	r4, r4, #9
   30678:	0a64      	lsrs	r4, r4, #9
   3067a:	0033      	movs	r3, r6
   3067c:	21ff      	movs	r1, #255	; 0xff
   3067e:	e7d5      	b.n	3062c <__aeabi_fdiv+0x138>
   30680:	0163      	lsls	r3, r4, #5
   30682:	016c      	lsls	r4, r5, #5
   30684:	42a3      	cmp	r3, r4
   30686:	d23b      	bcs.n	30700 <__aeabi_fdiv+0x20c>
   30688:	261b      	movs	r6, #27
   3068a:	2100      	movs	r1, #0
   3068c:	3801      	subs	r0, #1
   3068e:	2501      	movs	r5, #1
   30690:	001f      	movs	r7, r3
   30692:	0049      	lsls	r1, r1, #1
   30694:	005b      	lsls	r3, r3, #1
   30696:	2f00      	cmp	r7, #0
   30698:	db01      	blt.n	3069e <__aeabi_fdiv+0x1aa>
   3069a:	429c      	cmp	r4, r3
   3069c:	d801      	bhi.n	306a2 <__aeabi_fdiv+0x1ae>
   3069e:	1b1b      	subs	r3, r3, r4
   306a0:	4329      	orrs	r1, r5
   306a2:	3e01      	subs	r6, #1
   306a4:	2e00      	cmp	r6, #0
   306a6:	d1f3      	bne.n	30690 <__aeabi_fdiv+0x19c>
   306a8:	001c      	movs	r4, r3
   306aa:	1e63      	subs	r3, r4, #1
   306ac:	419c      	sbcs	r4, r3
   306ae:	430c      	orrs	r4, r1
   306b0:	0001      	movs	r1, r0
   306b2:	317f      	adds	r1, #127	; 0x7f
   306b4:	2900      	cmp	r1, #0
   306b6:	ddce      	ble.n	30656 <__aeabi_fdiv+0x162>
   306b8:	0763      	lsls	r3, r4, #29
   306ba:	d004      	beq.n	306c6 <__aeabi_fdiv+0x1d2>
   306bc:	230f      	movs	r3, #15
   306be:	4023      	ands	r3, r4
   306c0:	2b04      	cmp	r3, #4
   306c2:	d000      	beq.n	306c6 <__aeabi_fdiv+0x1d2>
   306c4:	3404      	adds	r4, #4
   306c6:	0123      	lsls	r3, r4, #4
   306c8:	d503      	bpl.n	306d2 <__aeabi_fdiv+0x1de>
   306ca:	0001      	movs	r1, r0
   306cc:	4b2c      	ldr	r3, [pc, #176]	; (30780 <__aeabi_fdiv+0x28c>)
   306ce:	3180      	adds	r1, #128	; 0x80
   306d0:	401c      	ands	r4, r3
   306d2:	29fe      	cmp	r1, #254	; 0xfe
   306d4:	dd0d      	ble.n	306f2 <__aeabi_fdiv+0x1fe>
   306d6:	2301      	movs	r3, #1
   306d8:	9a01      	ldr	r2, [sp, #4]
   306da:	21ff      	movs	r1, #255	; 0xff
   306dc:	4013      	ands	r3, r2
   306de:	2400      	movs	r4, #0
   306e0:	e7a4      	b.n	3062c <__aeabi_fdiv+0x138>
   306e2:	2380      	movs	r3, #128	; 0x80
   306e4:	03db      	lsls	r3, r3, #15
   306e6:	431c      	orrs	r4, r3
   306e8:	0264      	lsls	r4, r4, #9
   306ea:	0a64      	lsrs	r4, r4, #9
   306ec:	0033      	movs	r3, r6
   306ee:	21ff      	movs	r1, #255	; 0xff
   306f0:	e79c      	b.n	3062c <__aeabi_fdiv+0x138>
   306f2:	2301      	movs	r3, #1
   306f4:	9a01      	ldr	r2, [sp, #4]
   306f6:	01a4      	lsls	r4, r4, #6
   306f8:	0a64      	lsrs	r4, r4, #9
   306fa:	b2c9      	uxtb	r1, r1
   306fc:	4013      	ands	r3, r2
   306fe:	e795      	b.n	3062c <__aeabi_fdiv+0x138>
   30700:	1b1b      	subs	r3, r3, r4
   30702:	261a      	movs	r6, #26
   30704:	2101      	movs	r1, #1
   30706:	e7c2      	b.n	3068e <__aeabi_fdiv+0x19a>
   30708:	9b00      	ldr	r3, [sp, #0]
   3070a:	468b      	mov	fp, r1
   3070c:	469a      	mov	sl, r3
   3070e:	2400      	movs	r4, #0
   30710:	e74c      	b.n	305ac <__aeabi_fdiv+0xb8>
   30712:	0263      	lsls	r3, r4, #9
   30714:	d5e5      	bpl.n	306e2 <__aeabi_fdiv+0x1ee>
   30716:	2500      	movs	r5, #0
   30718:	2480      	movs	r4, #128	; 0x80
   3071a:	03e4      	lsls	r4, r4, #15
   3071c:	432c      	orrs	r4, r5
   3071e:	0264      	lsls	r4, r4, #9
   30720:	0a64      	lsrs	r4, r4, #9
   30722:	9b00      	ldr	r3, [sp, #0]
   30724:	21ff      	movs	r1, #255	; 0xff
   30726:	e781      	b.n	3062c <__aeabi_fdiv+0x138>
   30728:	9501      	str	r5, [sp, #4]
   3072a:	e7c1      	b.n	306b0 <__aeabi_fdiv+0x1bc>
   3072c:	0023      	movs	r3, r4
   3072e:	2020      	movs	r0, #32
   30730:	40cb      	lsrs	r3, r1
   30732:	1a41      	subs	r1, r0, r1
   30734:	408c      	lsls	r4, r1
   30736:	1e61      	subs	r1, r4, #1
   30738:	418c      	sbcs	r4, r1
   3073a:	431c      	orrs	r4, r3
   3073c:	0763      	lsls	r3, r4, #29
   3073e:	d004      	beq.n	3074a <__aeabi_fdiv+0x256>
   30740:	230f      	movs	r3, #15
   30742:	4023      	ands	r3, r4
   30744:	2b04      	cmp	r3, #4
   30746:	d000      	beq.n	3074a <__aeabi_fdiv+0x256>
   30748:	3404      	adds	r4, #4
   3074a:	0163      	lsls	r3, r4, #5
   3074c:	d505      	bpl.n	3075a <__aeabi_fdiv+0x266>
   3074e:	2301      	movs	r3, #1
   30750:	9a01      	ldr	r2, [sp, #4]
   30752:	2101      	movs	r1, #1
   30754:	4013      	ands	r3, r2
   30756:	2400      	movs	r4, #0
   30758:	e768      	b.n	3062c <__aeabi_fdiv+0x138>
   3075a:	2301      	movs	r3, #1
   3075c:	9a01      	ldr	r2, [sp, #4]
   3075e:	01a4      	lsls	r4, r4, #6
   30760:	0a64      	lsrs	r4, r4, #9
   30762:	4013      	ands	r3, r2
   30764:	2100      	movs	r1, #0
   30766:	e761      	b.n	3062c <__aeabi_fdiv+0x138>
   30768:	2380      	movs	r3, #128	; 0x80
   3076a:	03db      	lsls	r3, r3, #15
   3076c:	431c      	orrs	r4, r3
   3076e:	0264      	lsls	r4, r4, #9
   30770:	0a64      	lsrs	r4, r4, #9
   30772:	4653      	mov	r3, sl
   30774:	21ff      	movs	r1, #255	; 0xff
   30776:	e759      	b.n	3062c <__aeabi_fdiv+0x138>
   30778:	00038334 	.word	0x00038334
   3077c:	00038374 	.word	0x00038374
   30780:	f7ffffff 	.word	0xf7ffffff

00030784 <__eqsf2>:
   30784:	b570      	push	{r4, r5, r6, lr}
   30786:	0042      	lsls	r2, r0, #1
   30788:	0245      	lsls	r5, r0, #9
   3078a:	024e      	lsls	r6, r1, #9
   3078c:	004c      	lsls	r4, r1, #1
   3078e:	0fc3      	lsrs	r3, r0, #31
   30790:	0a6d      	lsrs	r5, r5, #9
   30792:	0e12      	lsrs	r2, r2, #24
   30794:	0a76      	lsrs	r6, r6, #9
   30796:	0e24      	lsrs	r4, r4, #24
   30798:	0fc9      	lsrs	r1, r1, #31
   3079a:	2001      	movs	r0, #1
   3079c:	2aff      	cmp	r2, #255	; 0xff
   3079e:	d006      	beq.n	307ae <__eqsf2+0x2a>
   307a0:	2cff      	cmp	r4, #255	; 0xff
   307a2:	d003      	beq.n	307ac <__eqsf2+0x28>
   307a4:	42a2      	cmp	r2, r4
   307a6:	d101      	bne.n	307ac <__eqsf2+0x28>
   307a8:	42b5      	cmp	r5, r6
   307aa:	d006      	beq.n	307ba <__eqsf2+0x36>
   307ac:	bd70      	pop	{r4, r5, r6, pc}
   307ae:	2d00      	cmp	r5, #0
   307b0:	d1fc      	bne.n	307ac <__eqsf2+0x28>
   307b2:	2cff      	cmp	r4, #255	; 0xff
   307b4:	d1fa      	bne.n	307ac <__eqsf2+0x28>
   307b6:	2e00      	cmp	r6, #0
   307b8:	d1f8      	bne.n	307ac <__eqsf2+0x28>
   307ba:	428b      	cmp	r3, r1
   307bc:	d006      	beq.n	307cc <__eqsf2+0x48>
   307be:	2001      	movs	r0, #1
   307c0:	2a00      	cmp	r2, #0
   307c2:	d1f3      	bne.n	307ac <__eqsf2+0x28>
   307c4:	0028      	movs	r0, r5
   307c6:	1e45      	subs	r5, r0, #1
   307c8:	41a8      	sbcs	r0, r5
   307ca:	e7ef      	b.n	307ac <__eqsf2+0x28>
   307cc:	2000      	movs	r0, #0
   307ce:	e7ed      	b.n	307ac <__eqsf2+0x28>

000307d0 <__gesf2>:
   307d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   307d2:	0042      	lsls	r2, r0, #1
   307d4:	0245      	lsls	r5, r0, #9
   307d6:	024c      	lsls	r4, r1, #9
   307d8:	0fc3      	lsrs	r3, r0, #31
   307da:	0048      	lsls	r0, r1, #1
   307dc:	0a6d      	lsrs	r5, r5, #9
   307de:	0e12      	lsrs	r2, r2, #24
   307e0:	0a64      	lsrs	r4, r4, #9
   307e2:	0e00      	lsrs	r0, r0, #24
   307e4:	0fc9      	lsrs	r1, r1, #31
   307e6:	2aff      	cmp	r2, #255	; 0xff
   307e8:	d01e      	beq.n	30828 <__gesf2+0x58>
   307ea:	28ff      	cmp	r0, #255	; 0xff
   307ec:	d021      	beq.n	30832 <__gesf2+0x62>
   307ee:	2a00      	cmp	r2, #0
   307f0:	d10a      	bne.n	30808 <__gesf2+0x38>
   307f2:	426e      	negs	r6, r5
   307f4:	416e      	adcs	r6, r5
   307f6:	b2f6      	uxtb	r6, r6
   307f8:	2800      	cmp	r0, #0
   307fa:	d10f      	bne.n	3081c <__gesf2+0x4c>
   307fc:	2c00      	cmp	r4, #0
   307fe:	d10d      	bne.n	3081c <__gesf2+0x4c>
   30800:	2000      	movs	r0, #0
   30802:	2d00      	cmp	r5, #0
   30804:	d009      	beq.n	3081a <__gesf2+0x4a>
   30806:	e005      	b.n	30814 <__gesf2+0x44>
   30808:	2800      	cmp	r0, #0
   3080a:	d101      	bne.n	30810 <__gesf2+0x40>
   3080c:	2c00      	cmp	r4, #0
   3080e:	d001      	beq.n	30814 <__gesf2+0x44>
   30810:	428b      	cmp	r3, r1
   30812:	d011      	beq.n	30838 <__gesf2+0x68>
   30814:	2101      	movs	r1, #1
   30816:	4258      	negs	r0, r3
   30818:	4308      	orrs	r0, r1
   3081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3081c:	2e00      	cmp	r6, #0
   3081e:	d0f7      	beq.n	30810 <__gesf2+0x40>
   30820:	2001      	movs	r0, #1
   30822:	3901      	subs	r1, #1
   30824:	4308      	orrs	r0, r1
   30826:	e7f8      	b.n	3081a <__gesf2+0x4a>
   30828:	2d00      	cmp	r5, #0
   3082a:	d0de      	beq.n	307ea <__gesf2+0x1a>
   3082c:	2002      	movs	r0, #2
   3082e:	4240      	negs	r0, r0
   30830:	e7f3      	b.n	3081a <__gesf2+0x4a>
   30832:	2c00      	cmp	r4, #0
   30834:	d0db      	beq.n	307ee <__gesf2+0x1e>
   30836:	e7f9      	b.n	3082c <__gesf2+0x5c>
   30838:	4282      	cmp	r2, r0
   3083a:	dceb      	bgt.n	30814 <__gesf2+0x44>
   3083c:	db04      	blt.n	30848 <__gesf2+0x78>
   3083e:	42a5      	cmp	r5, r4
   30840:	d8e8      	bhi.n	30814 <__gesf2+0x44>
   30842:	2000      	movs	r0, #0
   30844:	42a5      	cmp	r5, r4
   30846:	d2e8      	bcs.n	3081a <__gesf2+0x4a>
   30848:	2101      	movs	r1, #1
   3084a:	1e58      	subs	r0, r3, #1
   3084c:	4308      	orrs	r0, r1
   3084e:	e7e4      	b.n	3081a <__gesf2+0x4a>

00030850 <__lesf2>:
   30850:	b5f0      	push	{r4, r5, r6, r7, lr}
   30852:	0042      	lsls	r2, r0, #1
   30854:	024d      	lsls	r5, r1, #9
   30856:	004c      	lsls	r4, r1, #1
   30858:	0246      	lsls	r6, r0, #9
   3085a:	0a76      	lsrs	r6, r6, #9
   3085c:	0e12      	lsrs	r2, r2, #24
   3085e:	0fc3      	lsrs	r3, r0, #31
   30860:	0a6d      	lsrs	r5, r5, #9
   30862:	0e24      	lsrs	r4, r4, #24
   30864:	0fc9      	lsrs	r1, r1, #31
   30866:	2aff      	cmp	r2, #255	; 0xff
   30868:	d016      	beq.n	30898 <__lesf2+0x48>
   3086a:	2cff      	cmp	r4, #255	; 0xff
   3086c:	d018      	beq.n	308a0 <__lesf2+0x50>
   3086e:	2a00      	cmp	r2, #0
   30870:	d10a      	bne.n	30888 <__lesf2+0x38>
   30872:	4270      	negs	r0, r6
   30874:	4170      	adcs	r0, r6
   30876:	b2c0      	uxtb	r0, r0
   30878:	2c00      	cmp	r4, #0
   3087a:	d015      	beq.n	308a8 <__lesf2+0x58>
   3087c:	2800      	cmp	r0, #0
   3087e:	d005      	beq.n	3088c <__lesf2+0x3c>
   30880:	2001      	movs	r0, #1
   30882:	3901      	subs	r1, #1
   30884:	4308      	orrs	r0, r1
   30886:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30888:	2c00      	cmp	r4, #0
   3088a:	d013      	beq.n	308b4 <__lesf2+0x64>
   3088c:	4299      	cmp	r1, r3
   3088e:	d014      	beq.n	308ba <__lesf2+0x6a>
   30890:	2001      	movs	r0, #1
   30892:	425b      	negs	r3, r3
   30894:	4318      	orrs	r0, r3
   30896:	e7f6      	b.n	30886 <__lesf2+0x36>
   30898:	2002      	movs	r0, #2
   3089a:	2e00      	cmp	r6, #0
   3089c:	d1f3      	bne.n	30886 <__lesf2+0x36>
   3089e:	e7e4      	b.n	3086a <__lesf2+0x1a>
   308a0:	2002      	movs	r0, #2
   308a2:	2d00      	cmp	r5, #0
   308a4:	d1ef      	bne.n	30886 <__lesf2+0x36>
   308a6:	e7e2      	b.n	3086e <__lesf2+0x1e>
   308a8:	2d00      	cmp	r5, #0
   308aa:	d1e7      	bne.n	3087c <__lesf2+0x2c>
   308ac:	2000      	movs	r0, #0
   308ae:	2e00      	cmp	r6, #0
   308b0:	d0e9      	beq.n	30886 <__lesf2+0x36>
   308b2:	e7ed      	b.n	30890 <__lesf2+0x40>
   308b4:	2d00      	cmp	r5, #0
   308b6:	d1e9      	bne.n	3088c <__lesf2+0x3c>
   308b8:	e7ea      	b.n	30890 <__lesf2+0x40>
   308ba:	42a2      	cmp	r2, r4
   308bc:	dc06      	bgt.n	308cc <__lesf2+0x7c>
   308be:	dbdf      	blt.n	30880 <__lesf2+0x30>
   308c0:	42ae      	cmp	r6, r5
   308c2:	d803      	bhi.n	308cc <__lesf2+0x7c>
   308c4:	2000      	movs	r0, #0
   308c6:	42ae      	cmp	r6, r5
   308c8:	d3da      	bcc.n	30880 <__lesf2+0x30>
   308ca:	e7dc      	b.n	30886 <__lesf2+0x36>
   308cc:	2001      	movs	r0, #1
   308ce:	4249      	negs	r1, r1
   308d0:	4308      	orrs	r0, r1
   308d2:	e7d8      	b.n	30886 <__lesf2+0x36>

000308d4 <__aeabi_fmul>:
   308d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   308d6:	4657      	mov	r7, sl
   308d8:	464e      	mov	r6, r9
   308da:	4645      	mov	r5, r8
   308dc:	46de      	mov	lr, fp
   308de:	b5e0      	push	{r5, r6, r7, lr}
   308e0:	0247      	lsls	r7, r0, #9
   308e2:	0046      	lsls	r6, r0, #1
   308e4:	4688      	mov	r8, r1
   308e6:	0a7f      	lsrs	r7, r7, #9
   308e8:	0e36      	lsrs	r6, r6, #24
   308ea:	0fc4      	lsrs	r4, r0, #31
   308ec:	2e00      	cmp	r6, #0
   308ee:	d047      	beq.n	30980 <__aeabi_fmul+0xac>
   308f0:	2eff      	cmp	r6, #255	; 0xff
   308f2:	d024      	beq.n	3093e <__aeabi_fmul+0x6a>
   308f4:	00fb      	lsls	r3, r7, #3
   308f6:	2780      	movs	r7, #128	; 0x80
   308f8:	04ff      	lsls	r7, r7, #19
   308fa:	431f      	orrs	r7, r3
   308fc:	2300      	movs	r3, #0
   308fe:	4699      	mov	r9, r3
   30900:	469a      	mov	sl, r3
   30902:	3e7f      	subs	r6, #127	; 0x7f
   30904:	4643      	mov	r3, r8
   30906:	025d      	lsls	r5, r3, #9
   30908:	0058      	lsls	r0, r3, #1
   3090a:	0fdb      	lsrs	r3, r3, #31
   3090c:	0a6d      	lsrs	r5, r5, #9
   3090e:	0e00      	lsrs	r0, r0, #24
   30910:	4698      	mov	r8, r3
   30912:	d043      	beq.n	3099c <__aeabi_fmul+0xc8>
   30914:	28ff      	cmp	r0, #255	; 0xff
   30916:	d03b      	beq.n	30990 <__aeabi_fmul+0xbc>
   30918:	00eb      	lsls	r3, r5, #3
   3091a:	2580      	movs	r5, #128	; 0x80
   3091c:	2200      	movs	r2, #0
   3091e:	04ed      	lsls	r5, r5, #19
   30920:	431d      	orrs	r5, r3
   30922:	387f      	subs	r0, #127	; 0x7f
   30924:	1836      	adds	r6, r6, r0
   30926:	1c73      	adds	r3, r6, #1
   30928:	4641      	mov	r1, r8
   3092a:	469b      	mov	fp, r3
   3092c:	464b      	mov	r3, r9
   3092e:	4061      	eors	r1, r4
   30930:	4313      	orrs	r3, r2
   30932:	2b0f      	cmp	r3, #15
   30934:	d864      	bhi.n	30a00 <__aeabi_fmul+0x12c>
   30936:	4875      	ldr	r0, [pc, #468]	; (30b0c <__aeabi_fmul+0x238>)
   30938:	009b      	lsls	r3, r3, #2
   3093a:	58c3      	ldr	r3, [r0, r3]
   3093c:	469f      	mov	pc, r3
   3093e:	2f00      	cmp	r7, #0
   30940:	d142      	bne.n	309c8 <__aeabi_fmul+0xf4>
   30942:	2308      	movs	r3, #8
   30944:	4699      	mov	r9, r3
   30946:	3b06      	subs	r3, #6
   30948:	26ff      	movs	r6, #255	; 0xff
   3094a:	469a      	mov	sl, r3
   3094c:	e7da      	b.n	30904 <__aeabi_fmul+0x30>
   3094e:	4641      	mov	r1, r8
   30950:	2a02      	cmp	r2, #2
   30952:	d028      	beq.n	309a6 <__aeabi_fmul+0xd2>
   30954:	2a03      	cmp	r2, #3
   30956:	d100      	bne.n	3095a <__aeabi_fmul+0x86>
   30958:	e0ce      	b.n	30af8 <__aeabi_fmul+0x224>
   3095a:	2a01      	cmp	r2, #1
   3095c:	d000      	beq.n	30960 <__aeabi_fmul+0x8c>
   3095e:	e0ac      	b.n	30aba <__aeabi_fmul+0x1e6>
   30960:	4011      	ands	r1, r2
   30962:	2000      	movs	r0, #0
   30964:	2200      	movs	r2, #0
   30966:	b2cc      	uxtb	r4, r1
   30968:	0240      	lsls	r0, r0, #9
   3096a:	05d2      	lsls	r2, r2, #23
   3096c:	0a40      	lsrs	r0, r0, #9
   3096e:	07e4      	lsls	r4, r4, #31
   30970:	4310      	orrs	r0, r2
   30972:	4320      	orrs	r0, r4
   30974:	bc3c      	pop	{r2, r3, r4, r5}
   30976:	4690      	mov	r8, r2
   30978:	4699      	mov	r9, r3
   3097a:	46a2      	mov	sl, r4
   3097c:	46ab      	mov	fp, r5
   3097e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30980:	2f00      	cmp	r7, #0
   30982:	d115      	bne.n	309b0 <__aeabi_fmul+0xdc>
   30984:	2304      	movs	r3, #4
   30986:	4699      	mov	r9, r3
   30988:	3b03      	subs	r3, #3
   3098a:	2600      	movs	r6, #0
   3098c:	469a      	mov	sl, r3
   3098e:	e7b9      	b.n	30904 <__aeabi_fmul+0x30>
   30990:	20ff      	movs	r0, #255	; 0xff
   30992:	2202      	movs	r2, #2
   30994:	2d00      	cmp	r5, #0
   30996:	d0c5      	beq.n	30924 <__aeabi_fmul+0x50>
   30998:	2203      	movs	r2, #3
   3099a:	e7c3      	b.n	30924 <__aeabi_fmul+0x50>
   3099c:	2d00      	cmp	r5, #0
   3099e:	d119      	bne.n	309d4 <__aeabi_fmul+0x100>
   309a0:	2000      	movs	r0, #0
   309a2:	2201      	movs	r2, #1
   309a4:	e7be      	b.n	30924 <__aeabi_fmul+0x50>
   309a6:	2401      	movs	r4, #1
   309a8:	22ff      	movs	r2, #255	; 0xff
   309aa:	400c      	ands	r4, r1
   309ac:	2000      	movs	r0, #0
   309ae:	e7db      	b.n	30968 <__aeabi_fmul+0x94>
   309b0:	0038      	movs	r0, r7
   309b2:	f001 ff01 	bl	327b8 <__clzsi2>
   309b6:	2676      	movs	r6, #118	; 0x76
   309b8:	1f43      	subs	r3, r0, #5
   309ba:	409f      	lsls	r7, r3
   309bc:	2300      	movs	r3, #0
   309be:	4276      	negs	r6, r6
   309c0:	1a36      	subs	r6, r6, r0
   309c2:	4699      	mov	r9, r3
   309c4:	469a      	mov	sl, r3
   309c6:	e79d      	b.n	30904 <__aeabi_fmul+0x30>
   309c8:	230c      	movs	r3, #12
   309ca:	4699      	mov	r9, r3
   309cc:	3b09      	subs	r3, #9
   309ce:	26ff      	movs	r6, #255	; 0xff
   309d0:	469a      	mov	sl, r3
   309d2:	e797      	b.n	30904 <__aeabi_fmul+0x30>
   309d4:	0028      	movs	r0, r5
   309d6:	f001 feef 	bl	327b8 <__clzsi2>
   309da:	1f43      	subs	r3, r0, #5
   309dc:	409d      	lsls	r5, r3
   309de:	2376      	movs	r3, #118	; 0x76
   309e0:	425b      	negs	r3, r3
   309e2:	1a18      	subs	r0, r3, r0
   309e4:	2200      	movs	r2, #0
   309e6:	e79d      	b.n	30924 <__aeabi_fmul+0x50>
   309e8:	2080      	movs	r0, #128	; 0x80
   309ea:	2400      	movs	r4, #0
   309ec:	03c0      	lsls	r0, r0, #15
   309ee:	22ff      	movs	r2, #255	; 0xff
   309f0:	e7ba      	b.n	30968 <__aeabi_fmul+0x94>
   309f2:	003d      	movs	r5, r7
   309f4:	4652      	mov	r2, sl
   309f6:	e7ab      	b.n	30950 <__aeabi_fmul+0x7c>
   309f8:	003d      	movs	r5, r7
   309fa:	0021      	movs	r1, r4
   309fc:	4652      	mov	r2, sl
   309fe:	e7a7      	b.n	30950 <__aeabi_fmul+0x7c>
   30a00:	0c3b      	lsrs	r3, r7, #16
   30a02:	469c      	mov	ip, r3
   30a04:	042a      	lsls	r2, r5, #16
   30a06:	0c12      	lsrs	r2, r2, #16
   30a08:	0c2b      	lsrs	r3, r5, #16
   30a0a:	0014      	movs	r4, r2
   30a0c:	4660      	mov	r0, ip
   30a0e:	4665      	mov	r5, ip
   30a10:	043f      	lsls	r7, r7, #16
   30a12:	0c3f      	lsrs	r7, r7, #16
   30a14:	437c      	muls	r4, r7
   30a16:	4342      	muls	r2, r0
   30a18:	435d      	muls	r5, r3
   30a1a:	437b      	muls	r3, r7
   30a1c:	0c27      	lsrs	r7, r4, #16
   30a1e:	189b      	adds	r3, r3, r2
   30a20:	18ff      	adds	r7, r7, r3
   30a22:	42ba      	cmp	r2, r7
   30a24:	d903      	bls.n	30a2e <__aeabi_fmul+0x15a>
   30a26:	2380      	movs	r3, #128	; 0x80
   30a28:	025b      	lsls	r3, r3, #9
   30a2a:	469c      	mov	ip, r3
   30a2c:	4465      	add	r5, ip
   30a2e:	0424      	lsls	r4, r4, #16
   30a30:	043a      	lsls	r2, r7, #16
   30a32:	0c24      	lsrs	r4, r4, #16
   30a34:	1912      	adds	r2, r2, r4
   30a36:	0193      	lsls	r3, r2, #6
   30a38:	1e5c      	subs	r4, r3, #1
   30a3a:	41a3      	sbcs	r3, r4
   30a3c:	0c3f      	lsrs	r7, r7, #16
   30a3e:	0e92      	lsrs	r2, r2, #26
   30a40:	197d      	adds	r5, r7, r5
   30a42:	431a      	orrs	r2, r3
   30a44:	01ad      	lsls	r5, r5, #6
   30a46:	4315      	orrs	r5, r2
   30a48:	012b      	lsls	r3, r5, #4
   30a4a:	d504      	bpl.n	30a56 <__aeabi_fmul+0x182>
   30a4c:	2301      	movs	r3, #1
   30a4e:	465e      	mov	r6, fp
   30a50:	086a      	lsrs	r2, r5, #1
   30a52:	401d      	ands	r5, r3
   30a54:	4315      	orrs	r5, r2
   30a56:	0032      	movs	r2, r6
   30a58:	327f      	adds	r2, #127	; 0x7f
   30a5a:	2a00      	cmp	r2, #0
   30a5c:	dd25      	ble.n	30aaa <__aeabi_fmul+0x1d6>
   30a5e:	076b      	lsls	r3, r5, #29
   30a60:	d004      	beq.n	30a6c <__aeabi_fmul+0x198>
   30a62:	230f      	movs	r3, #15
   30a64:	402b      	ands	r3, r5
   30a66:	2b04      	cmp	r3, #4
   30a68:	d000      	beq.n	30a6c <__aeabi_fmul+0x198>
   30a6a:	3504      	adds	r5, #4
   30a6c:	012b      	lsls	r3, r5, #4
   30a6e:	d503      	bpl.n	30a78 <__aeabi_fmul+0x1a4>
   30a70:	0032      	movs	r2, r6
   30a72:	4b27      	ldr	r3, [pc, #156]	; (30b10 <__aeabi_fmul+0x23c>)
   30a74:	3280      	adds	r2, #128	; 0x80
   30a76:	401d      	ands	r5, r3
   30a78:	2afe      	cmp	r2, #254	; 0xfe
   30a7a:	dc94      	bgt.n	309a6 <__aeabi_fmul+0xd2>
   30a7c:	2401      	movs	r4, #1
   30a7e:	01a8      	lsls	r0, r5, #6
   30a80:	0a40      	lsrs	r0, r0, #9
   30a82:	b2d2      	uxtb	r2, r2
   30a84:	400c      	ands	r4, r1
   30a86:	e76f      	b.n	30968 <__aeabi_fmul+0x94>
   30a88:	2080      	movs	r0, #128	; 0x80
   30a8a:	03c0      	lsls	r0, r0, #15
   30a8c:	4207      	tst	r7, r0
   30a8e:	d007      	beq.n	30aa0 <__aeabi_fmul+0x1cc>
   30a90:	4205      	tst	r5, r0
   30a92:	d105      	bne.n	30aa0 <__aeabi_fmul+0x1cc>
   30a94:	4328      	orrs	r0, r5
   30a96:	0240      	lsls	r0, r0, #9
   30a98:	0a40      	lsrs	r0, r0, #9
   30a9a:	4644      	mov	r4, r8
   30a9c:	22ff      	movs	r2, #255	; 0xff
   30a9e:	e763      	b.n	30968 <__aeabi_fmul+0x94>
   30aa0:	4338      	orrs	r0, r7
   30aa2:	0240      	lsls	r0, r0, #9
   30aa4:	0a40      	lsrs	r0, r0, #9
   30aa6:	22ff      	movs	r2, #255	; 0xff
   30aa8:	e75e      	b.n	30968 <__aeabi_fmul+0x94>
   30aaa:	2401      	movs	r4, #1
   30aac:	1aa3      	subs	r3, r4, r2
   30aae:	2b1b      	cmp	r3, #27
   30ab0:	dd05      	ble.n	30abe <__aeabi_fmul+0x1ea>
   30ab2:	400c      	ands	r4, r1
   30ab4:	2200      	movs	r2, #0
   30ab6:	2000      	movs	r0, #0
   30ab8:	e756      	b.n	30968 <__aeabi_fmul+0x94>
   30aba:	465e      	mov	r6, fp
   30abc:	e7cb      	b.n	30a56 <__aeabi_fmul+0x182>
   30abe:	002a      	movs	r2, r5
   30ac0:	2020      	movs	r0, #32
   30ac2:	40da      	lsrs	r2, r3
   30ac4:	1ac3      	subs	r3, r0, r3
   30ac6:	409d      	lsls	r5, r3
   30ac8:	002b      	movs	r3, r5
   30aca:	1e5d      	subs	r5, r3, #1
   30acc:	41ab      	sbcs	r3, r5
   30ace:	4313      	orrs	r3, r2
   30ad0:	075a      	lsls	r2, r3, #29
   30ad2:	d004      	beq.n	30ade <__aeabi_fmul+0x20a>
   30ad4:	220f      	movs	r2, #15
   30ad6:	401a      	ands	r2, r3
   30ad8:	2a04      	cmp	r2, #4
   30ada:	d000      	beq.n	30ade <__aeabi_fmul+0x20a>
   30adc:	3304      	adds	r3, #4
   30ade:	015a      	lsls	r2, r3, #5
   30ae0:	d504      	bpl.n	30aec <__aeabi_fmul+0x218>
   30ae2:	2401      	movs	r4, #1
   30ae4:	2201      	movs	r2, #1
   30ae6:	400c      	ands	r4, r1
   30ae8:	2000      	movs	r0, #0
   30aea:	e73d      	b.n	30968 <__aeabi_fmul+0x94>
   30aec:	2401      	movs	r4, #1
   30aee:	019b      	lsls	r3, r3, #6
   30af0:	0a58      	lsrs	r0, r3, #9
   30af2:	400c      	ands	r4, r1
   30af4:	2200      	movs	r2, #0
   30af6:	e737      	b.n	30968 <__aeabi_fmul+0x94>
   30af8:	2080      	movs	r0, #128	; 0x80
   30afa:	2401      	movs	r4, #1
   30afc:	03c0      	lsls	r0, r0, #15
   30afe:	4328      	orrs	r0, r5
   30b00:	0240      	lsls	r0, r0, #9
   30b02:	0a40      	lsrs	r0, r0, #9
   30b04:	400c      	ands	r4, r1
   30b06:	22ff      	movs	r2, #255	; 0xff
   30b08:	e72e      	b.n	30968 <__aeabi_fmul+0x94>
   30b0a:	46c0      	nop			; (mov r8, r8)
   30b0c:	000383b4 	.word	0x000383b4
   30b10:	f7ffffff 	.word	0xf7ffffff

00030b14 <__aeabi_fsub>:
   30b14:	b5f0      	push	{r4, r5, r6, r7, lr}
   30b16:	464f      	mov	r7, r9
   30b18:	46d6      	mov	lr, sl
   30b1a:	4646      	mov	r6, r8
   30b1c:	0044      	lsls	r4, r0, #1
   30b1e:	b5c0      	push	{r6, r7, lr}
   30b20:	0fc2      	lsrs	r2, r0, #31
   30b22:	0247      	lsls	r7, r0, #9
   30b24:	0248      	lsls	r0, r1, #9
   30b26:	0a40      	lsrs	r0, r0, #9
   30b28:	4684      	mov	ip, r0
   30b2a:	4666      	mov	r6, ip
   30b2c:	0a7b      	lsrs	r3, r7, #9
   30b2e:	0048      	lsls	r0, r1, #1
   30b30:	0fc9      	lsrs	r1, r1, #31
   30b32:	469a      	mov	sl, r3
   30b34:	0e24      	lsrs	r4, r4, #24
   30b36:	0015      	movs	r5, r2
   30b38:	00db      	lsls	r3, r3, #3
   30b3a:	0e00      	lsrs	r0, r0, #24
   30b3c:	4689      	mov	r9, r1
   30b3e:	00f6      	lsls	r6, r6, #3
   30b40:	28ff      	cmp	r0, #255	; 0xff
   30b42:	d100      	bne.n	30b46 <__aeabi_fsub+0x32>
   30b44:	e08f      	b.n	30c66 <__aeabi_fsub+0x152>
   30b46:	2101      	movs	r1, #1
   30b48:	464f      	mov	r7, r9
   30b4a:	404f      	eors	r7, r1
   30b4c:	0039      	movs	r1, r7
   30b4e:	4291      	cmp	r1, r2
   30b50:	d066      	beq.n	30c20 <__aeabi_fsub+0x10c>
   30b52:	1a22      	subs	r2, r4, r0
   30b54:	2a00      	cmp	r2, #0
   30b56:	dc00      	bgt.n	30b5a <__aeabi_fsub+0x46>
   30b58:	e09d      	b.n	30c96 <__aeabi_fsub+0x182>
   30b5a:	2800      	cmp	r0, #0
   30b5c:	d13d      	bne.n	30bda <__aeabi_fsub+0xc6>
   30b5e:	2e00      	cmp	r6, #0
   30b60:	d100      	bne.n	30b64 <__aeabi_fsub+0x50>
   30b62:	e08b      	b.n	30c7c <__aeabi_fsub+0x168>
   30b64:	1e51      	subs	r1, r2, #1
   30b66:	2900      	cmp	r1, #0
   30b68:	d000      	beq.n	30b6c <__aeabi_fsub+0x58>
   30b6a:	e0b5      	b.n	30cd8 <__aeabi_fsub+0x1c4>
   30b6c:	2401      	movs	r4, #1
   30b6e:	1b9b      	subs	r3, r3, r6
   30b70:	015a      	lsls	r2, r3, #5
   30b72:	d544      	bpl.n	30bfe <__aeabi_fsub+0xea>
   30b74:	019b      	lsls	r3, r3, #6
   30b76:	099f      	lsrs	r7, r3, #6
   30b78:	0038      	movs	r0, r7
   30b7a:	f001 fe1d 	bl	327b8 <__clzsi2>
   30b7e:	3805      	subs	r0, #5
   30b80:	4087      	lsls	r7, r0
   30b82:	4284      	cmp	r4, r0
   30b84:	dd00      	ble.n	30b88 <__aeabi_fsub+0x74>
   30b86:	e096      	b.n	30cb6 <__aeabi_fsub+0x1a2>
   30b88:	1b04      	subs	r4, r0, r4
   30b8a:	003a      	movs	r2, r7
   30b8c:	2020      	movs	r0, #32
   30b8e:	3401      	adds	r4, #1
   30b90:	40e2      	lsrs	r2, r4
   30b92:	1b04      	subs	r4, r0, r4
   30b94:	40a7      	lsls	r7, r4
   30b96:	003b      	movs	r3, r7
   30b98:	1e5f      	subs	r7, r3, #1
   30b9a:	41bb      	sbcs	r3, r7
   30b9c:	2400      	movs	r4, #0
   30b9e:	4313      	orrs	r3, r2
   30ba0:	075a      	lsls	r2, r3, #29
   30ba2:	d004      	beq.n	30bae <__aeabi_fsub+0x9a>
   30ba4:	220f      	movs	r2, #15
   30ba6:	401a      	ands	r2, r3
   30ba8:	2a04      	cmp	r2, #4
   30baa:	d000      	beq.n	30bae <__aeabi_fsub+0x9a>
   30bac:	3304      	adds	r3, #4
   30bae:	015a      	lsls	r2, r3, #5
   30bb0:	d527      	bpl.n	30c02 <__aeabi_fsub+0xee>
   30bb2:	3401      	adds	r4, #1
   30bb4:	2cff      	cmp	r4, #255	; 0xff
   30bb6:	d100      	bne.n	30bba <__aeabi_fsub+0xa6>
   30bb8:	e079      	b.n	30cae <__aeabi_fsub+0x19a>
   30bba:	2201      	movs	r2, #1
   30bbc:	019b      	lsls	r3, r3, #6
   30bbe:	0a5b      	lsrs	r3, r3, #9
   30bc0:	b2e4      	uxtb	r4, r4
   30bc2:	402a      	ands	r2, r5
   30bc4:	025b      	lsls	r3, r3, #9
   30bc6:	05e4      	lsls	r4, r4, #23
   30bc8:	0a58      	lsrs	r0, r3, #9
   30bca:	07d2      	lsls	r2, r2, #31
   30bcc:	4320      	orrs	r0, r4
   30bce:	4310      	orrs	r0, r2
   30bd0:	bc1c      	pop	{r2, r3, r4}
   30bd2:	4690      	mov	r8, r2
   30bd4:	4699      	mov	r9, r3
   30bd6:	46a2      	mov	sl, r4
   30bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30bda:	2cff      	cmp	r4, #255	; 0xff
   30bdc:	d0e0      	beq.n	30ba0 <__aeabi_fsub+0x8c>
   30bde:	2180      	movs	r1, #128	; 0x80
   30be0:	04c9      	lsls	r1, r1, #19
   30be2:	430e      	orrs	r6, r1
   30be4:	2a1b      	cmp	r2, #27
   30be6:	dc7b      	bgt.n	30ce0 <__aeabi_fsub+0x1cc>
   30be8:	0031      	movs	r1, r6
   30bea:	2020      	movs	r0, #32
   30bec:	40d1      	lsrs	r1, r2
   30bee:	1a82      	subs	r2, r0, r2
   30bf0:	4096      	lsls	r6, r2
   30bf2:	1e72      	subs	r2, r6, #1
   30bf4:	4196      	sbcs	r6, r2
   30bf6:	430e      	orrs	r6, r1
   30bf8:	1b9b      	subs	r3, r3, r6
   30bfa:	015a      	lsls	r2, r3, #5
   30bfc:	d4ba      	bmi.n	30b74 <__aeabi_fsub+0x60>
   30bfe:	075a      	lsls	r2, r3, #29
   30c00:	d1d0      	bne.n	30ba4 <__aeabi_fsub+0x90>
   30c02:	2201      	movs	r2, #1
   30c04:	08df      	lsrs	r7, r3, #3
   30c06:	402a      	ands	r2, r5
   30c08:	2cff      	cmp	r4, #255	; 0xff
   30c0a:	d133      	bne.n	30c74 <__aeabi_fsub+0x160>
   30c0c:	2f00      	cmp	r7, #0
   30c0e:	d100      	bne.n	30c12 <__aeabi_fsub+0xfe>
   30c10:	e0a8      	b.n	30d64 <__aeabi_fsub+0x250>
   30c12:	2380      	movs	r3, #128	; 0x80
   30c14:	03db      	lsls	r3, r3, #15
   30c16:	433b      	orrs	r3, r7
   30c18:	025b      	lsls	r3, r3, #9
   30c1a:	0a5b      	lsrs	r3, r3, #9
   30c1c:	24ff      	movs	r4, #255	; 0xff
   30c1e:	e7d1      	b.n	30bc4 <__aeabi_fsub+0xb0>
   30c20:	1a21      	subs	r1, r4, r0
   30c22:	2900      	cmp	r1, #0
   30c24:	dd4c      	ble.n	30cc0 <__aeabi_fsub+0x1ac>
   30c26:	2800      	cmp	r0, #0
   30c28:	d02a      	beq.n	30c80 <__aeabi_fsub+0x16c>
   30c2a:	2cff      	cmp	r4, #255	; 0xff
   30c2c:	d0b8      	beq.n	30ba0 <__aeabi_fsub+0x8c>
   30c2e:	2080      	movs	r0, #128	; 0x80
   30c30:	04c0      	lsls	r0, r0, #19
   30c32:	4306      	orrs	r6, r0
   30c34:	291b      	cmp	r1, #27
   30c36:	dd00      	ble.n	30c3a <__aeabi_fsub+0x126>
   30c38:	e0af      	b.n	30d9a <__aeabi_fsub+0x286>
   30c3a:	0030      	movs	r0, r6
   30c3c:	2720      	movs	r7, #32
   30c3e:	40c8      	lsrs	r0, r1
   30c40:	1a79      	subs	r1, r7, r1
   30c42:	408e      	lsls	r6, r1
   30c44:	1e71      	subs	r1, r6, #1
   30c46:	418e      	sbcs	r6, r1
   30c48:	4306      	orrs	r6, r0
   30c4a:	199b      	adds	r3, r3, r6
   30c4c:	0159      	lsls	r1, r3, #5
   30c4e:	d5d6      	bpl.n	30bfe <__aeabi_fsub+0xea>
   30c50:	3401      	adds	r4, #1
   30c52:	2cff      	cmp	r4, #255	; 0xff
   30c54:	d100      	bne.n	30c58 <__aeabi_fsub+0x144>
   30c56:	e085      	b.n	30d64 <__aeabi_fsub+0x250>
   30c58:	2201      	movs	r2, #1
   30c5a:	497a      	ldr	r1, [pc, #488]	; (30e44 <__aeabi_fsub+0x330>)
   30c5c:	401a      	ands	r2, r3
   30c5e:	085b      	lsrs	r3, r3, #1
   30c60:	400b      	ands	r3, r1
   30c62:	4313      	orrs	r3, r2
   30c64:	e79c      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30c66:	2e00      	cmp	r6, #0
   30c68:	d000      	beq.n	30c6c <__aeabi_fsub+0x158>
   30c6a:	e770      	b.n	30b4e <__aeabi_fsub+0x3a>
   30c6c:	e76b      	b.n	30b46 <__aeabi_fsub+0x32>
   30c6e:	1e3b      	subs	r3, r7, #0
   30c70:	d1c5      	bne.n	30bfe <__aeabi_fsub+0xea>
   30c72:	2200      	movs	r2, #0
   30c74:	027b      	lsls	r3, r7, #9
   30c76:	0a5b      	lsrs	r3, r3, #9
   30c78:	b2e4      	uxtb	r4, r4
   30c7a:	e7a3      	b.n	30bc4 <__aeabi_fsub+0xb0>
   30c7c:	0014      	movs	r4, r2
   30c7e:	e78f      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30c80:	2e00      	cmp	r6, #0
   30c82:	d04d      	beq.n	30d20 <__aeabi_fsub+0x20c>
   30c84:	1e48      	subs	r0, r1, #1
   30c86:	2800      	cmp	r0, #0
   30c88:	d157      	bne.n	30d3a <__aeabi_fsub+0x226>
   30c8a:	199b      	adds	r3, r3, r6
   30c8c:	2401      	movs	r4, #1
   30c8e:	015a      	lsls	r2, r3, #5
   30c90:	d5b5      	bpl.n	30bfe <__aeabi_fsub+0xea>
   30c92:	2402      	movs	r4, #2
   30c94:	e7e0      	b.n	30c58 <__aeabi_fsub+0x144>
   30c96:	2a00      	cmp	r2, #0
   30c98:	d125      	bne.n	30ce6 <__aeabi_fsub+0x1d2>
   30c9a:	1c62      	adds	r2, r4, #1
   30c9c:	b2d2      	uxtb	r2, r2
   30c9e:	2a01      	cmp	r2, #1
   30ca0:	dd72      	ble.n	30d88 <__aeabi_fsub+0x274>
   30ca2:	1b9f      	subs	r7, r3, r6
   30ca4:	017a      	lsls	r2, r7, #5
   30ca6:	d535      	bpl.n	30d14 <__aeabi_fsub+0x200>
   30ca8:	1af7      	subs	r7, r6, r3
   30caa:	000d      	movs	r5, r1
   30cac:	e764      	b.n	30b78 <__aeabi_fsub+0x64>
   30cae:	2201      	movs	r2, #1
   30cb0:	2300      	movs	r3, #0
   30cb2:	402a      	ands	r2, r5
   30cb4:	e786      	b.n	30bc4 <__aeabi_fsub+0xb0>
   30cb6:	003b      	movs	r3, r7
   30cb8:	4a63      	ldr	r2, [pc, #396]	; (30e48 <__aeabi_fsub+0x334>)
   30cba:	1a24      	subs	r4, r4, r0
   30cbc:	4013      	ands	r3, r2
   30cbe:	e76f      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30cc0:	2900      	cmp	r1, #0
   30cc2:	d16c      	bne.n	30d9e <__aeabi_fsub+0x28a>
   30cc4:	1c61      	adds	r1, r4, #1
   30cc6:	b2c8      	uxtb	r0, r1
   30cc8:	2801      	cmp	r0, #1
   30cca:	dd4e      	ble.n	30d6a <__aeabi_fsub+0x256>
   30ccc:	29ff      	cmp	r1, #255	; 0xff
   30cce:	d049      	beq.n	30d64 <__aeabi_fsub+0x250>
   30cd0:	199b      	adds	r3, r3, r6
   30cd2:	085b      	lsrs	r3, r3, #1
   30cd4:	000c      	movs	r4, r1
   30cd6:	e763      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30cd8:	2aff      	cmp	r2, #255	; 0xff
   30cda:	d041      	beq.n	30d60 <__aeabi_fsub+0x24c>
   30cdc:	000a      	movs	r2, r1
   30cde:	e781      	b.n	30be4 <__aeabi_fsub+0xd0>
   30ce0:	2601      	movs	r6, #1
   30ce2:	1b9b      	subs	r3, r3, r6
   30ce4:	e789      	b.n	30bfa <__aeabi_fsub+0xe6>
   30ce6:	2c00      	cmp	r4, #0
   30ce8:	d01c      	beq.n	30d24 <__aeabi_fsub+0x210>
   30cea:	28ff      	cmp	r0, #255	; 0xff
   30cec:	d021      	beq.n	30d32 <__aeabi_fsub+0x21e>
   30cee:	2480      	movs	r4, #128	; 0x80
   30cf0:	04e4      	lsls	r4, r4, #19
   30cf2:	4252      	negs	r2, r2
   30cf4:	4323      	orrs	r3, r4
   30cf6:	2a1b      	cmp	r2, #27
   30cf8:	dd00      	ble.n	30cfc <__aeabi_fsub+0x1e8>
   30cfa:	e096      	b.n	30e2a <__aeabi_fsub+0x316>
   30cfc:	001c      	movs	r4, r3
   30cfe:	2520      	movs	r5, #32
   30d00:	40d4      	lsrs	r4, r2
   30d02:	1aaa      	subs	r2, r5, r2
   30d04:	4093      	lsls	r3, r2
   30d06:	1e5a      	subs	r2, r3, #1
   30d08:	4193      	sbcs	r3, r2
   30d0a:	4323      	orrs	r3, r4
   30d0c:	1af3      	subs	r3, r6, r3
   30d0e:	0004      	movs	r4, r0
   30d10:	000d      	movs	r5, r1
   30d12:	e72d      	b.n	30b70 <__aeabi_fsub+0x5c>
   30d14:	2f00      	cmp	r7, #0
   30d16:	d000      	beq.n	30d1a <__aeabi_fsub+0x206>
   30d18:	e72e      	b.n	30b78 <__aeabi_fsub+0x64>
   30d1a:	2200      	movs	r2, #0
   30d1c:	2400      	movs	r4, #0
   30d1e:	e7a9      	b.n	30c74 <__aeabi_fsub+0x160>
   30d20:	000c      	movs	r4, r1
   30d22:	e73d      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30d24:	2b00      	cmp	r3, #0
   30d26:	d058      	beq.n	30dda <__aeabi_fsub+0x2c6>
   30d28:	43d2      	mvns	r2, r2
   30d2a:	2a00      	cmp	r2, #0
   30d2c:	d0ee      	beq.n	30d0c <__aeabi_fsub+0x1f8>
   30d2e:	28ff      	cmp	r0, #255	; 0xff
   30d30:	d1e1      	bne.n	30cf6 <__aeabi_fsub+0x1e2>
   30d32:	0033      	movs	r3, r6
   30d34:	24ff      	movs	r4, #255	; 0xff
   30d36:	000d      	movs	r5, r1
   30d38:	e732      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30d3a:	29ff      	cmp	r1, #255	; 0xff
   30d3c:	d010      	beq.n	30d60 <__aeabi_fsub+0x24c>
   30d3e:	0001      	movs	r1, r0
   30d40:	e778      	b.n	30c34 <__aeabi_fsub+0x120>
   30d42:	2b00      	cmp	r3, #0
   30d44:	d06e      	beq.n	30e24 <__aeabi_fsub+0x310>
   30d46:	24ff      	movs	r4, #255	; 0xff
   30d48:	2e00      	cmp	r6, #0
   30d4a:	d100      	bne.n	30d4e <__aeabi_fsub+0x23a>
   30d4c:	e728      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30d4e:	2280      	movs	r2, #128	; 0x80
   30d50:	4651      	mov	r1, sl
   30d52:	03d2      	lsls	r2, r2, #15
   30d54:	4211      	tst	r1, r2
   30d56:	d003      	beq.n	30d60 <__aeabi_fsub+0x24c>
   30d58:	4661      	mov	r1, ip
   30d5a:	4211      	tst	r1, r2
   30d5c:	d100      	bne.n	30d60 <__aeabi_fsub+0x24c>
   30d5e:	0033      	movs	r3, r6
   30d60:	24ff      	movs	r4, #255	; 0xff
   30d62:	e71d      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30d64:	24ff      	movs	r4, #255	; 0xff
   30d66:	2300      	movs	r3, #0
   30d68:	e72c      	b.n	30bc4 <__aeabi_fsub+0xb0>
   30d6a:	2c00      	cmp	r4, #0
   30d6c:	d1e9      	bne.n	30d42 <__aeabi_fsub+0x22e>
   30d6e:	2b00      	cmp	r3, #0
   30d70:	d063      	beq.n	30e3a <__aeabi_fsub+0x326>
   30d72:	2e00      	cmp	r6, #0
   30d74:	d100      	bne.n	30d78 <__aeabi_fsub+0x264>
   30d76:	e713      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30d78:	199b      	adds	r3, r3, r6
   30d7a:	015a      	lsls	r2, r3, #5
   30d7c:	d400      	bmi.n	30d80 <__aeabi_fsub+0x26c>
   30d7e:	e73e      	b.n	30bfe <__aeabi_fsub+0xea>
   30d80:	4a31      	ldr	r2, [pc, #196]	; (30e48 <__aeabi_fsub+0x334>)
   30d82:	000c      	movs	r4, r1
   30d84:	4013      	ands	r3, r2
   30d86:	e70b      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30d88:	2c00      	cmp	r4, #0
   30d8a:	d11e      	bne.n	30dca <__aeabi_fsub+0x2b6>
   30d8c:	2b00      	cmp	r3, #0
   30d8e:	d12f      	bne.n	30df0 <__aeabi_fsub+0x2dc>
   30d90:	2e00      	cmp	r6, #0
   30d92:	d04f      	beq.n	30e34 <__aeabi_fsub+0x320>
   30d94:	0033      	movs	r3, r6
   30d96:	000d      	movs	r5, r1
   30d98:	e702      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30d9a:	2601      	movs	r6, #1
   30d9c:	e755      	b.n	30c4a <__aeabi_fsub+0x136>
   30d9e:	2c00      	cmp	r4, #0
   30da0:	d11f      	bne.n	30de2 <__aeabi_fsub+0x2ce>
   30da2:	2b00      	cmp	r3, #0
   30da4:	d043      	beq.n	30e2e <__aeabi_fsub+0x31a>
   30da6:	43c9      	mvns	r1, r1
   30da8:	2900      	cmp	r1, #0
   30daa:	d00b      	beq.n	30dc4 <__aeabi_fsub+0x2b0>
   30dac:	28ff      	cmp	r0, #255	; 0xff
   30dae:	d039      	beq.n	30e24 <__aeabi_fsub+0x310>
   30db0:	291b      	cmp	r1, #27
   30db2:	dc44      	bgt.n	30e3e <__aeabi_fsub+0x32a>
   30db4:	001c      	movs	r4, r3
   30db6:	2720      	movs	r7, #32
   30db8:	40cc      	lsrs	r4, r1
   30dba:	1a79      	subs	r1, r7, r1
   30dbc:	408b      	lsls	r3, r1
   30dbe:	1e59      	subs	r1, r3, #1
   30dc0:	418b      	sbcs	r3, r1
   30dc2:	4323      	orrs	r3, r4
   30dc4:	199b      	adds	r3, r3, r6
   30dc6:	0004      	movs	r4, r0
   30dc8:	e740      	b.n	30c4c <__aeabi_fsub+0x138>
   30dca:	2b00      	cmp	r3, #0
   30dcc:	d11a      	bne.n	30e04 <__aeabi_fsub+0x2f0>
   30dce:	2e00      	cmp	r6, #0
   30dd0:	d124      	bne.n	30e1c <__aeabi_fsub+0x308>
   30dd2:	2780      	movs	r7, #128	; 0x80
   30dd4:	2200      	movs	r2, #0
   30dd6:	03ff      	lsls	r7, r7, #15
   30dd8:	e71b      	b.n	30c12 <__aeabi_fsub+0xfe>
   30dda:	0033      	movs	r3, r6
   30ddc:	0004      	movs	r4, r0
   30dde:	000d      	movs	r5, r1
   30de0:	e6de      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30de2:	28ff      	cmp	r0, #255	; 0xff
   30de4:	d01e      	beq.n	30e24 <__aeabi_fsub+0x310>
   30de6:	2480      	movs	r4, #128	; 0x80
   30de8:	04e4      	lsls	r4, r4, #19
   30dea:	4249      	negs	r1, r1
   30dec:	4323      	orrs	r3, r4
   30dee:	e7df      	b.n	30db0 <__aeabi_fsub+0x29c>
   30df0:	2e00      	cmp	r6, #0
   30df2:	d100      	bne.n	30df6 <__aeabi_fsub+0x2e2>
   30df4:	e6d4      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30df6:	1b9f      	subs	r7, r3, r6
   30df8:	017a      	lsls	r2, r7, #5
   30dfa:	d400      	bmi.n	30dfe <__aeabi_fsub+0x2ea>
   30dfc:	e737      	b.n	30c6e <__aeabi_fsub+0x15a>
   30dfe:	1af3      	subs	r3, r6, r3
   30e00:	000d      	movs	r5, r1
   30e02:	e6cd      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30e04:	24ff      	movs	r4, #255	; 0xff
   30e06:	2e00      	cmp	r6, #0
   30e08:	d100      	bne.n	30e0c <__aeabi_fsub+0x2f8>
   30e0a:	e6c9      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30e0c:	2280      	movs	r2, #128	; 0x80
   30e0e:	4650      	mov	r0, sl
   30e10:	03d2      	lsls	r2, r2, #15
   30e12:	4210      	tst	r0, r2
   30e14:	d0a4      	beq.n	30d60 <__aeabi_fsub+0x24c>
   30e16:	4660      	mov	r0, ip
   30e18:	4210      	tst	r0, r2
   30e1a:	d1a1      	bne.n	30d60 <__aeabi_fsub+0x24c>
   30e1c:	0033      	movs	r3, r6
   30e1e:	000d      	movs	r5, r1
   30e20:	24ff      	movs	r4, #255	; 0xff
   30e22:	e6bd      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30e24:	0033      	movs	r3, r6
   30e26:	24ff      	movs	r4, #255	; 0xff
   30e28:	e6ba      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30e2a:	2301      	movs	r3, #1
   30e2c:	e76e      	b.n	30d0c <__aeabi_fsub+0x1f8>
   30e2e:	0033      	movs	r3, r6
   30e30:	0004      	movs	r4, r0
   30e32:	e6b5      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30e34:	2700      	movs	r7, #0
   30e36:	2200      	movs	r2, #0
   30e38:	e71c      	b.n	30c74 <__aeabi_fsub+0x160>
   30e3a:	0033      	movs	r3, r6
   30e3c:	e6b0      	b.n	30ba0 <__aeabi_fsub+0x8c>
   30e3e:	2301      	movs	r3, #1
   30e40:	e7c0      	b.n	30dc4 <__aeabi_fsub+0x2b0>
   30e42:	46c0      	nop			; (mov r8, r8)
   30e44:	7dffffff 	.word	0x7dffffff
   30e48:	fbffffff 	.word	0xfbffffff

00030e4c <__aeabi_f2iz>:
   30e4c:	0241      	lsls	r1, r0, #9
   30e4e:	0043      	lsls	r3, r0, #1
   30e50:	0fc2      	lsrs	r2, r0, #31
   30e52:	0a49      	lsrs	r1, r1, #9
   30e54:	0e1b      	lsrs	r3, r3, #24
   30e56:	2000      	movs	r0, #0
   30e58:	2b7e      	cmp	r3, #126	; 0x7e
   30e5a:	dd0d      	ble.n	30e78 <__aeabi_f2iz+0x2c>
   30e5c:	2b9d      	cmp	r3, #157	; 0x9d
   30e5e:	dc0c      	bgt.n	30e7a <__aeabi_f2iz+0x2e>
   30e60:	2080      	movs	r0, #128	; 0x80
   30e62:	0400      	lsls	r0, r0, #16
   30e64:	4301      	orrs	r1, r0
   30e66:	2b95      	cmp	r3, #149	; 0x95
   30e68:	dc0a      	bgt.n	30e80 <__aeabi_f2iz+0x34>
   30e6a:	2096      	movs	r0, #150	; 0x96
   30e6c:	1ac3      	subs	r3, r0, r3
   30e6e:	40d9      	lsrs	r1, r3
   30e70:	4248      	negs	r0, r1
   30e72:	2a00      	cmp	r2, #0
   30e74:	d100      	bne.n	30e78 <__aeabi_f2iz+0x2c>
   30e76:	0008      	movs	r0, r1
   30e78:	4770      	bx	lr
   30e7a:	4b03      	ldr	r3, [pc, #12]	; (30e88 <__aeabi_f2iz+0x3c>)
   30e7c:	18d0      	adds	r0, r2, r3
   30e7e:	e7fb      	b.n	30e78 <__aeabi_f2iz+0x2c>
   30e80:	3b96      	subs	r3, #150	; 0x96
   30e82:	4099      	lsls	r1, r3
   30e84:	e7f4      	b.n	30e70 <__aeabi_f2iz+0x24>
   30e86:	46c0      	nop			; (mov r8, r8)
   30e88:	7fffffff 	.word	0x7fffffff

00030e8c <__aeabi_i2f>:
   30e8c:	b570      	push	{r4, r5, r6, lr}
   30e8e:	2800      	cmp	r0, #0
   30e90:	d030      	beq.n	30ef4 <__aeabi_i2f+0x68>
   30e92:	17c3      	asrs	r3, r0, #31
   30e94:	18c4      	adds	r4, r0, r3
   30e96:	405c      	eors	r4, r3
   30e98:	0fc5      	lsrs	r5, r0, #31
   30e9a:	0020      	movs	r0, r4
   30e9c:	f001 fc8c 	bl	327b8 <__clzsi2>
   30ea0:	239e      	movs	r3, #158	; 0x9e
   30ea2:	1a1b      	subs	r3, r3, r0
   30ea4:	2b96      	cmp	r3, #150	; 0x96
   30ea6:	dc0d      	bgt.n	30ec4 <__aeabi_i2f+0x38>
   30ea8:	2296      	movs	r2, #150	; 0x96
   30eaa:	1ad2      	subs	r2, r2, r3
   30eac:	4094      	lsls	r4, r2
   30eae:	002a      	movs	r2, r5
   30eb0:	0264      	lsls	r4, r4, #9
   30eb2:	0a64      	lsrs	r4, r4, #9
   30eb4:	b2db      	uxtb	r3, r3
   30eb6:	0264      	lsls	r4, r4, #9
   30eb8:	05db      	lsls	r3, r3, #23
   30eba:	0a60      	lsrs	r0, r4, #9
   30ebc:	07d2      	lsls	r2, r2, #31
   30ebe:	4318      	orrs	r0, r3
   30ec0:	4310      	orrs	r0, r2
   30ec2:	bd70      	pop	{r4, r5, r6, pc}
   30ec4:	2b99      	cmp	r3, #153	; 0x99
   30ec6:	dc19      	bgt.n	30efc <__aeabi_i2f+0x70>
   30ec8:	2299      	movs	r2, #153	; 0x99
   30eca:	1ad2      	subs	r2, r2, r3
   30ecc:	2a00      	cmp	r2, #0
   30ece:	dd29      	ble.n	30f24 <__aeabi_i2f+0x98>
   30ed0:	4094      	lsls	r4, r2
   30ed2:	0022      	movs	r2, r4
   30ed4:	4c14      	ldr	r4, [pc, #80]	; (30f28 <__aeabi_i2f+0x9c>)
   30ed6:	4014      	ands	r4, r2
   30ed8:	0751      	lsls	r1, r2, #29
   30eda:	d004      	beq.n	30ee6 <__aeabi_i2f+0x5a>
   30edc:	210f      	movs	r1, #15
   30ede:	400a      	ands	r2, r1
   30ee0:	2a04      	cmp	r2, #4
   30ee2:	d000      	beq.n	30ee6 <__aeabi_i2f+0x5a>
   30ee4:	3404      	adds	r4, #4
   30ee6:	0162      	lsls	r2, r4, #5
   30ee8:	d413      	bmi.n	30f12 <__aeabi_i2f+0x86>
   30eea:	01a4      	lsls	r4, r4, #6
   30eec:	0a64      	lsrs	r4, r4, #9
   30eee:	b2db      	uxtb	r3, r3
   30ef0:	002a      	movs	r2, r5
   30ef2:	e7e0      	b.n	30eb6 <__aeabi_i2f+0x2a>
   30ef4:	2200      	movs	r2, #0
   30ef6:	2300      	movs	r3, #0
   30ef8:	2400      	movs	r4, #0
   30efa:	e7dc      	b.n	30eb6 <__aeabi_i2f+0x2a>
   30efc:	2205      	movs	r2, #5
   30efe:	0021      	movs	r1, r4
   30f00:	1a12      	subs	r2, r2, r0
   30f02:	40d1      	lsrs	r1, r2
   30f04:	22b9      	movs	r2, #185	; 0xb9
   30f06:	1ad2      	subs	r2, r2, r3
   30f08:	4094      	lsls	r4, r2
   30f0a:	1e62      	subs	r2, r4, #1
   30f0c:	4194      	sbcs	r4, r2
   30f0e:	430c      	orrs	r4, r1
   30f10:	e7da      	b.n	30ec8 <__aeabi_i2f+0x3c>
   30f12:	4b05      	ldr	r3, [pc, #20]	; (30f28 <__aeabi_i2f+0x9c>)
   30f14:	002a      	movs	r2, r5
   30f16:	401c      	ands	r4, r3
   30f18:	239f      	movs	r3, #159	; 0x9f
   30f1a:	01a4      	lsls	r4, r4, #6
   30f1c:	1a1b      	subs	r3, r3, r0
   30f1e:	0a64      	lsrs	r4, r4, #9
   30f20:	b2db      	uxtb	r3, r3
   30f22:	e7c8      	b.n	30eb6 <__aeabi_i2f+0x2a>
   30f24:	0022      	movs	r2, r4
   30f26:	e7d5      	b.n	30ed4 <__aeabi_i2f+0x48>
   30f28:	fbffffff 	.word	0xfbffffff

00030f2c <__aeabi_dadd>:
   30f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30f2e:	4645      	mov	r5, r8
   30f30:	46de      	mov	lr, fp
   30f32:	4657      	mov	r7, sl
   30f34:	464e      	mov	r6, r9
   30f36:	030c      	lsls	r4, r1, #12
   30f38:	b5e0      	push	{r5, r6, r7, lr}
   30f3a:	004e      	lsls	r6, r1, #1
   30f3c:	0fc9      	lsrs	r1, r1, #31
   30f3e:	4688      	mov	r8, r1
   30f40:	000d      	movs	r5, r1
   30f42:	0a61      	lsrs	r1, r4, #9
   30f44:	0f44      	lsrs	r4, r0, #29
   30f46:	430c      	orrs	r4, r1
   30f48:	00c7      	lsls	r7, r0, #3
   30f4a:	0319      	lsls	r1, r3, #12
   30f4c:	0058      	lsls	r0, r3, #1
   30f4e:	0fdb      	lsrs	r3, r3, #31
   30f50:	469b      	mov	fp, r3
   30f52:	0a4b      	lsrs	r3, r1, #9
   30f54:	0f51      	lsrs	r1, r2, #29
   30f56:	430b      	orrs	r3, r1
   30f58:	0d76      	lsrs	r6, r6, #21
   30f5a:	0d40      	lsrs	r0, r0, #21
   30f5c:	0019      	movs	r1, r3
   30f5e:	00d2      	lsls	r2, r2, #3
   30f60:	45d8      	cmp	r8, fp
   30f62:	d100      	bne.n	30f66 <__aeabi_dadd+0x3a>
   30f64:	e0ae      	b.n	310c4 <__aeabi_dadd+0x198>
   30f66:	1a35      	subs	r5, r6, r0
   30f68:	2d00      	cmp	r5, #0
   30f6a:	dc00      	bgt.n	30f6e <__aeabi_dadd+0x42>
   30f6c:	e0f6      	b.n	3115c <__aeabi_dadd+0x230>
   30f6e:	2800      	cmp	r0, #0
   30f70:	d10f      	bne.n	30f92 <__aeabi_dadd+0x66>
   30f72:	4313      	orrs	r3, r2
   30f74:	d100      	bne.n	30f78 <__aeabi_dadd+0x4c>
   30f76:	e0db      	b.n	31130 <__aeabi_dadd+0x204>
   30f78:	1e6b      	subs	r3, r5, #1
   30f7a:	2b00      	cmp	r3, #0
   30f7c:	d000      	beq.n	30f80 <__aeabi_dadd+0x54>
   30f7e:	e137      	b.n	311f0 <__aeabi_dadd+0x2c4>
   30f80:	1aba      	subs	r2, r7, r2
   30f82:	4297      	cmp	r7, r2
   30f84:	41bf      	sbcs	r7, r7
   30f86:	1a64      	subs	r4, r4, r1
   30f88:	427f      	negs	r7, r7
   30f8a:	1be4      	subs	r4, r4, r7
   30f8c:	2601      	movs	r6, #1
   30f8e:	0017      	movs	r7, r2
   30f90:	e024      	b.n	30fdc <__aeabi_dadd+0xb0>
   30f92:	4bc6      	ldr	r3, [pc, #792]	; (312ac <__aeabi_dadd+0x380>)
   30f94:	429e      	cmp	r6, r3
   30f96:	d04d      	beq.n	31034 <__aeabi_dadd+0x108>
   30f98:	2380      	movs	r3, #128	; 0x80
   30f9a:	041b      	lsls	r3, r3, #16
   30f9c:	4319      	orrs	r1, r3
   30f9e:	2d38      	cmp	r5, #56	; 0x38
   30fa0:	dd00      	ble.n	30fa4 <__aeabi_dadd+0x78>
   30fa2:	e107      	b.n	311b4 <__aeabi_dadd+0x288>
   30fa4:	2d1f      	cmp	r5, #31
   30fa6:	dd00      	ble.n	30faa <__aeabi_dadd+0x7e>
   30fa8:	e138      	b.n	3121c <__aeabi_dadd+0x2f0>
   30faa:	2020      	movs	r0, #32
   30fac:	1b43      	subs	r3, r0, r5
   30fae:	469a      	mov	sl, r3
   30fb0:	000b      	movs	r3, r1
   30fb2:	4650      	mov	r0, sl
   30fb4:	4083      	lsls	r3, r0
   30fb6:	4699      	mov	r9, r3
   30fb8:	0013      	movs	r3, r2
   30fba:	4648      	mov	r0, r9
   30fbc:	40eb      	lsrs	r3, r5
   30fbe:	4318      	orrs	r0, r3
   30fc0:	0003      	movs	r3, r0
   30fc2:	4650      	mov	r0, sl
   30fc4:	4082      	lsls	r2, r0
   30fc6:	1e50      	subs	r0, r2, #1
   30fc8:	4182      	sbcs	r2, r0
   30fca:	40e9      	lsrs	r1, r5
   30fcc:	431a      	orrs	r2, r3
   30fce:	1aba      	subs	r2, r7, r2
   30fd0:	1a61      	subs	r1, r4, r1
   30fd2:	4297      	cmp	r7, r2
   30fd4:	41a4      	sbcs	r4, r4
   30fd6:	0017      	movs	r7, r2
   30fd8:	4264      	negs	r4, r4
   30fda:	1b0c      	subs	r4, r1, r4
   30fdc:	0223      	lsls	r3, r4, #8
   30fde:	d562      	bpl.n	310a6 <__aeabi_dadd+0x17a>
   30fe0:	0264      	lsls	r4, r4, #9
   30fe2:	0a65      	lsrs	r5, r4, #9
   30fe4:	2d00      	cmp	r5, #0
   30fe6:	d100      	bne.n	30fea <__aeabi_dadd+0xbe>
   30fe8:	e0df      	b.n	311aa <__aeabi_dadd+0x27e>
   30fea:	0028      	movs	r0, r5
   30fec:	f001 fbe4 	bl	327b8 <__clzsi2>
   30ff0:	0003      	movs	r3, r0
   30ff2:	3b08      	subs	r3, #8
   30ff4:	2b1f      	cmp	r3, #31
   30ff6:	dd00      	ble.n	30ffa <__aeabi_dadd+0xce>
   30ff8:	e0d2      	b.n	311a0 <__aeabi_dadd+0x274>
   30ffa:	2220      	movs	r2, #32
   30ffc:	003c      	movs	r4, r7
   30ffe:	1ad2      	subs	r2, r2, r3
   31000:	409d      	lsls	r5, r3
   31002:	40d4      	lsrs	r4, r2
   31004:	409f      	lsls	r7, r3
   31006:	4325      	orrs	r5, r4
   31008:	429e      	cmp	r6, r3
   3100a:	dd00      	ble.n	3100e <__aeabi_dadd+0xe2>
   3100c:	e0c4      	b.n	31198 <__aeabi_dadd+0x26c>
   3100e:	1b9e      	subs	r6, r3, r6
   31010:	1c73      	adds	r3, r6, #1
   31012:	2b1f      	cmp	r3, #31
   31014:	dd00      	ble.n	31018 <__aeabi_dadd+0xec>
   31016:	e0f1      	b.n	311fc <__aeabi_dadd+0x2d0>
   31018:	2220      	movs	r2, #32
   3101a:	0038      	movs	r0, r7
   3101c:	0029      	movs	r1, r5
   3101e:	1ad2      	subs	r2, r2, r3
   31020:	40d8      	lsrs	r0, r3
   31022:	4091      	lsls	r1, r2
   31024:	4097      	lsls	r7, r2
   31026:	002c      	movs	r4, r5
   31028:	4301      	orrs	r1, r0
   3102a:	1e78      	subs	r0, r7, #1
   3102c:	4187      	sbcs	r7, r0
   3102e:	40dc      	lsrs	r4, r3
   31030:	2600      	movs	r6, #0
   31032:	430f      	orrs	r7, r1
   31034:	077b      	lsls	r3, r7, #29
   31036:	d009      	beq.n	3104c <__aeabi_dadd+0x120>
   31038:	230f      	movs	r3, #15
   3103a:	403b      	ands	r3, r7
   3103c:	2b04      	cmp	r3, #4
   3103e:	d005      	beq.n	3104c <__aeabi_dadd+0x120>
   31040:	1d3b      	adds	r3, r7, #4
   31042:	42bb      	cmp	r3, r7
   31044:	41bf      	sbcs	r7, r7
   31046:	427f      	negs	r7, r7
   31048:	19e4      	adds	r4, r4, r7
   3104a:	001f      	movs	r7, r3
   3104c:	0223      	lsls	r3, r4, #8
   3104e:	d52c      	bpl.n	310aa <__aeabi_dadd+0x17e>
   31050:	4b96      	ldr	r3, [pc, #600]	; (312ac <__aeabi_dadd+0x380>)
   31052:	3601      	adds	r6, #1
   31054:	429e      	cmp	r6, r3
   31056:	d100      	bne.n	3105a <__aeabi_dadd+0x12e>
   31058:	e09a      	b.n	31190 <__aeabi_dadd+0x264>
   3105a:	4645      	mov	r5, r8
   3105c:	4b94      	ldr	r3, [pc, #592]	; (312b0 <__aeabi_dadd+0x384>)
   3105e:	08ff      	lsrs	r7, r7, #3
   31060:	401c      	ands	r4, r3
   31062:	0760      	lsls	r0, r4, #29
   31064:	0576      	lsls	r6, r6, #21
   31066:	0264      	lsls	r4, r4, #9
   31068:	4307      	orrs	r7, r0
   3106a:	0b24      	lsrs	r4, r4, #12
   3106c:	0d76      	lsrs	r6, r6, #21
   3106e:	2100      	movs	r1, #0
   31070:	0324      	lsls	r4, r4, #12
   31072:	0b23      	lsrs	r3, r4, #12
   31074:	0d0c      	lsrs	r4, r1, #20
   31076:	4a8f      	ldr	r2, [pc, #572]	; (312b4 <__aeabi_dadd+0x388>)
   31078:	0524      	lsls	r4, r4, #20
   3107a:	431c      	orrs	r4, r3
   3107c:	4014      	ands	r4, r2
   3107e:	0533      	lsls	r3, r6, #20
   31080:	4323      	orrs	r3, r4
   31082:	005b      	lsls	r3, r3, #1
   31084:	07ed      	lsls	r5, r5, #31
   31086:	085b      	lsrs	r3, r3, #1
   31088:	432b      	orrs	r3, r5
   3108a:	0038      	movs	r0, r7
   3108c:	0019      	movs	r1, r3
   3108e:	bc3c      	pop	{r2, r3, r4, r5}
   31090:	4690      	mov	r8, r2
   31092:	4699      	mov	r9, r3
   31094:	46a2      	mov	sl, r4
   31096:	46ab      	mov	fp, r5
   31098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3109a:	4664      	mov	r4, ip
   3109c:	4304      	orrs	r4, r0
   3109e:	d100      	bne.n	310a2 <__aeabi_dadd+0x176>
   310a0:	e211      	b.n	314c6 <__aeabi_dadd+0x59a>
   310a2:	0004      	movs	r4, r0
   310a4:	4667      	mov	r7, ip
   310a6:	077b      	lsls	r3, r7, #29
   310a8:	d1c6      	bne.n	31038 <__aeabi_dadd+0x10c>
   310aa:	4645      	mov	r5, r8
   310ac:	0760      	lsls	r0, r4, #29
   310ae:	08ff      	lsrs	r7, r7, #3
   310b0:	4307      	orrs	r7, r0
   310b2:	08e4      	lsrs	r4, r4, #3
   310b4:	4b7d      	ldr	r3, [pc, #500]	; (312ac <__aeabi_dadd+0x380>)
   310b6:	429e      	cmp	r6, r3
   310b8:	d030      	beq.n	3111c <__aeabi_dadd+0x1f0>
   310ba:	0324      	lsls	r4, r4, #12
   310bc:	0576      	lsls	r6, r6, #21
   310be:	0b24      	lsrs	r4, r4, #12
   310c0:	0d76      	lsrs	r6, r6, #21
   310c2:	e7d4      	b.n	3106e <__aeabi_dadd+0x142>
   310c4:	1a33      	subs	r3, r6, r0
   310c6:	469a      	mov	sl, r3
   310c8:	2b00      	cmp	r3, #0
   310ca:	dd78      	ble.n	311be <__aeabi_dadd+0x292>
   310cc:	2800      	cmp	r0, #0
   310ce:	d031      	beq.n	31134 <__aeabi_dadd+0x208>
   310d0:	4876      	ldr	r0, [pc, #472]	; (312ac <__aeabi_dadd+0x380>)
   310d2:	4286      	cmp	r6, r0
   310d4:	d0ae      	beq.n	31034 <__aeabi_dadd+0x108>
   310d6:	2080      	movs	r0, #128	; 0x80
   310d8:	0400      	lsls	r0, r0, #16
   310da:	4301      	orrs	r1, r0
   310dc:	4653      	mov	r3, sl
   310de:	2b38      	cmp	r3, #56	; 0x38
   310e0:	dc00      	bgt.n	310e4 <__aeabi_dadd+0x1b8>
   310e2:	e0e9      	b.n	312b8 <__aeabi_dadd+0x38c>
   310e4:	430a      	orrs	r2, r1
   310e6:	1e51      	subs	r1, r2, #1
   310e8:	418a      	sbcs	r2, r1
   310ea:	2100      	movs	r1, #0
   310ec:	19d2      	adds	r2, r2, r7
   310ee:	42ba      	cmp	r2, r7
   310f0:	41bf      	sbcs	r7, r7
   310f2:	1909      	adds	r1, r1, r4
   310f4:	427c      	negs	r4, r7
   310f6:	0017      	movs	r7, r2
   310f8:	190c      	adds	r4, r1, r4
   310fa:	0223      	lsls	r3, r4, #8
   310fc:	d5d3      	bpl.n	310a6 <__aeabi_dadd+0x17a>
   310fe:	4b6b      	ldr	r3, [pc, #428]	; (312ac <__aeabi_dadd+0x380>)
   31100:	3601      	adds	r6, #1
   31102:	429e      	cmp	r6, r3
   31104:	d100      	bne.n	31108 <__aeabi_dadd+0x1dc>
   31106:	e13a      	b.n	3137e <__aeabi_dadd+0x452>
   31108:	2001      	movs	r0, #1
   3110a:	4b69      	ldr	r3, [pc, #420]	; (312b0 <__aeabi_dadd+0x384>)
   3110c:	401c      	ands	r4, r3
   3110e:	087b      	lsrs	r3, r7, #1
   31110:	4007      	ands	r7, r0
   31112:	431f      	orrs	r7, r3
   31114:	07e0      	lsls	r0, r4, #31
   31116:	4307      	orrs	r7, r0
   31118:	0864      	lsrs	r4, r4, #1
   3111a:	e78b      	b.n	31034 <__aeabi_dadd+0x108>
   3111c:	0023      	movs	r3, r4
   3111e:	433b      	orrs	r3, r7
   31120:	d100      	bne.n	31124 <__aeabi_dadd+0x1f8>
   31122:	e1cb      	b.n	314bc <__aeabi_dadd+0x590>
   31124:	2280      	movs	r2, #128	; 0x80
   31126:	0312      	lsls	r2, r2, #12
   31128:	4314      	orrs	r4, r2
   3112a:	0324      	lsls	r4, r4, #12
   3112c:	0b24      	lsrs	r4, r4, #12
   3112e:	e79e      	b.n	3106e <__aeabi_dadd+0x142>
   31130:	002e      	movs	r6, r5
   31132:	e77f      	b.n	31034 <__aeabi_dadd+0x108>
   31134:	0008      	movs	r0, r1
   31136:	4310      	orrs	r0, r2
   31138:	d100      	bne.n	3113c <__aeabi_dadd+0x210>
   3113a:	e0b4      	b.n	312a6 <__aeabi_dadd+0x37a>
   3113c:	1e58      	subs	r0, r3, #1
   3113e:	2800      	cmp	r0, #0
   31140:	d000      	beq.n	31144 <__aeabi_dadd+0x218>
   31142:	e0de      	b.n	31302 <__aeabi_dadd+0x3d6>
   31144:	18ba      	adds	r2, r7, r2
   31146:	42ba      	cmp	r2, r7
   31148:	419b      	sbcs	r3, r3
   3114a:	1864      	adds	r4, r4, r1
   3114c:	425b      	negs	r3, r3
   3114e:	18e4      	adds	r4, r4, r3
   31150:	0017      	movs	r7, r2
   31152:	2601      	movs	r6, #1
   31154:	0223      	lsls	r3, r4, #8
   31156:	d5a6      	bpl.n	310a6 <__aeabi_dadd+0x17a>
   31158:	2602      	movs	r6, #2
   3115a:	e7d5      	b.n	31108 <__aeabi_dadd+0x1dc>
   3115c:	2d00      	cmp	r5, #0
   3115e:	d16e      	bne.n	3123e <__aeabi_dadd+0x312>
   31160:	1c70      	adds	r0, r6, #1
   31162:	0540      	lsls	r0, r0, #21
   31164:	0d40      	lsrs	r0, r0, #21
   31166:	2801      	cmp	r0, #1
   31168:	dc00      	bgt.n	3116c <__aeabi_dadd+0x240>
   3116a:	e0f9      	b.n	31360 <__aeabi_dadd+0x434>
   3116c:	1ab8      	subs	r0, r7, r2
   3116e:	4684      	mov	ip, r0
   31170:	4287      	cmp	r7, r0
   31172:	4180      	sbcs	r0, r0
   31174:	1ae5      	subs	r5, r4, r3
   31176:	4240      	negs	r0, r0
   31178:	1a2d      	subs	r5, r5, r0
   3117a:	0228      	lsls	r0, r5, #8
   3117c:	d400      	bmi.n	31180 <__aeabi_dadd+0x254>
   3117e:	e089      	b.n	31294 <__aeabi_dadd+0x368>
   31180:	1bd7      	subs	r7, r2, r7
   31182:	42ba      	cmp	r2, r7
   31184:	4192      	sbcs	r2, r2
   31186:	1b1c      	subs	r4, r3, r4
   31188:	4252      	negs	r2, r2
   3118a:	1aa5      	subs	r5, r4, r2
   3118c:	46d8      	mov	r8, fp
   3118e:	e729      	b.n	30fe4 <__aeabi_dadd+0xb8>
   31190:	4645      	mov	r5, r8
   31192:	2400      	movs	r4, #0
   31194:	2700      	movs	r7, #0
   31196:	e76a      	b.n	3106e <__aeabi_dadd+0x142>
   31198:	4c45      	ldr	r4, [pc, #276]	; (312b0 <__aeabi_dadd+0x384>)
   3119a:	1af6      	subs	r6, r6, r3
   3119c:	402c      	ands	r4, r5
   3119e:	e749      	b.n	31034 <__aeabi_dadd+0x108>
   311a0:	003d      	movs	r5, r7
   311a2:	3828      	subs	r0, #40	; 0x28
   311a4:	4085      	lsls	r5, r0
   311a6:	2700      	movs	r7, #0
   311a8:	e72e      	b.n	31008 <__aeabi_dadd+0xdc>
   311aa:	0038      	movs	r0, r7
   311ac:	f001 fb04 	bl	327b8 <__clzsi2>
   311b0:	3020      	adds	r0, #32
   311b2:	e71d      	b.n	30ff0 <__aeabi_dadd+0xc4>
   311b4:	430a      	orrs	r2, r1
   311b6:	1e51      	subs	r1, r2, #1
   311b8:	418a      	sbcs	r2, r1
   311ba:	2100      	movs	r1, #0
   311bc:	e707      	b.n	30fce <__aeabi_dadd+0xa2>
   311be:	2b00      	cmp	r3, #0
   311c0:	d000      	beq.n	311c4 <__aeabi_dadd+0x298>
   311c2:	e0f3      	b.n	313ac <__aeabi_dadd+0x480>
   311c4:	1c70      	adds	r0, r6, #1
   311c6:	0543      	lsls	r3, r0, #21
   311c8:	0d5b      	lsrs	r3, r3, #21
   311ca:	2b01      	cmp	r3, #1
   311cc:	dc00      	bgt.n	311d0 <__aeabi_dadd+0x2a4>
   311ce:	e0ad      	b.n	3132c <__aeabi_dadd+0x400>
   311d0:	4b36      	ldr	r3, [pc, #216]	; (312ac <__aeabi_dadd+0x380>)
   311d2:	4298      	cmp	r0, r3
   311d4:	d100      	bne.n	311d8 <__aeabi_dadd+0x2ac>
   311d6:	e0d1      	b.n	3137c <__aeabi_dadd+0x450>
   311d8:	18ba      	adds	r2, r7, r2
   311da:	42ba      	cmp	r2, r7
   311dc:	41bf      	sbcs	r7, r7
   311de:	1864      	adds	r4, r4, r1
   311e0:	427f      	negs	r7, r7
   311e2:	19e4      	adds	r4, r4, r7
   311e4:	07e7      	lsls	r7, r4, #31
   311e6:	0852      	lsrs	r2, r2, #1
   311e8:	4317      	orrs	r7, r2
   311ea:	0864      	lsrs	r4, r4, #1
   311ec:	0006      	movs	r6, r0
   311ee:	e721      	b.n	31034 <__aeabi_dadd+0x108>
   311f0:	482e      	ldr	r0, [pc, #184]	; (312ac <__aeabi_dadd+0x380>)
   311f2:	4285      	cmp	r5, r0
   311f4:	d100      	bne.n	311f8 <__aeabi_dadd+0x2cc>
   311f6:	e093      	b.n	31320 <__aeabi_dadd+0x3f4>
   311f8:	001d      	movs	r5, r3
   311fa:	e6d0      	b.n	30f9e <__aeabi_dadd+0x72>
   311fc:	0029      	movs	r1, r5
   311fe:	3e1f      	subs	r6, #31
   31200:	40f1      	lsrs	r1, r6
   31202:	2b20      	cmp	r3, #32
   31204:	d100      	bne.n	31208 <__aeabi_dadd+0x2dc>
   31206:	e08d      	b.n	31324 <__aeabi_dadd+0x3f8>
   31208:	2240      	movs	r2, #64	; 0x40
   3120a:	1ad3      	subs	r3, r2, r3
   3120c:	409d      	lsls	r5, r3
   3120e:	432f      	orrs	r7, r5
   31210:	1e7d      	subs	r5, r7, #1
   31212:	41af      	sbcs	r7, r5
   31214:	2400      	movs	r4, #0
   31216:	430f      	orrs	r7, r1
   31218:	2600      	movs	r6, #0
   3121a:	e744      	b.n	310a6 <__aeabi_dadd+0x17a>
   3121c:	002b      	movs	r3, r5
   3121e:	0008      	movs	r0, r1
   31220:	3b20      	subs	r3, #32
   31222:	40d8      	lsrs	r0, r3
   31224:	0003      	movs	r3, r0
   31226:	2d20      	cmp	r5, #32
   31228:	d100      	bne.n	3122c <__aeabi_dadd+0x300>
   3122a:	e07d      	b.n	31328 <__aeabi_dadd+0x3fc>
   3122c:	2040      	movs	r0, #64	; 0x40
   3122e:	1b45      	subs	r5, r0, r5
   31230:	40a9      	lsls	r1, r5
   31232:	430a      	orrs	r2, r1
   31234:	1e51      	subs	r1, r2, #1
   31236:	418a      	sbcs	r2, r1
   31238:	2100      	movs	r1, #0
   3123a:	431a      	orrs	r2, r3
   3123c:	e6c7      	b.n	30fce <__aeabi_dadd+0xa2>
   3123e:	2e00      	cmp	r6, #0
   31240:	d050      	beq.n	312e4 <__aeabi_dadd+0x3b8>
   31242:	4e1a      	ldr	r6, [pc, #104]	; (312ac <__aeabi_dadd+0x380>)
   31244:	42b0      	cmp	r0, r6
   31246:	d057      	beq.n	312f8 <__aeabi_dadd+0x3cc>
   31248:	2680      	movs	r6, #128	; 0x80
   3124a:	426b      	negs	r3, r5
   3124c:	4699      	mov	r9, r3
   3124e:	0436      	lsls	r6, r6, #16
   31250:	4334      	orrs	r4, r6
   31252:	464b      	mov	r3, r9
   31254:	2b38      	cmp	r3, #56	; 0x38
   31256:	dd00      	ble.n	3125a <__aeabi_dadd+0x32e>
   31258:	e0d6      	b.n	31408 <__aeabi_dadd+0x4dc>
   3125a:	2b1f      	cmp	r3, #31
   3125c:	dd00      	ble.n	31260 <__aeabi_dadd+0x334>
   3125e:	e135      	b.n	314cc <__aeabi_dadd+0x5a0>
   31260:	2620      	movs	r6, #32
   31262:	1af5      	subs	r5, r6, r3
   31264:	0026      	movs	r6, r4
   31266:	40ae      	lsls	r6, r5
   31268:	46b2      	mov	sl, r6
   3126a:	003e      	movs	r6, r7
   3126c:	40de      	lsrs	r6, r3
   3126e:	46ac      	mov	ip, r5
   31270:	0035      	movs	r5, r6
   31272:	4656      	mov	r6, sl
   31274:	432e      	orrs	r6, r5
   31276:	4665      	mov	r5, ip
   31278:	40af      	lsls	r7, r5
   3127a:	1e7d      	subs	r5, r7, #1
   3127c:	41af      	sbcs	r7, r5
   3127e:	40dc      	lsrs	r4, r3
   31280:	4337      	orrs	r7, r6
   31282:	1bd7      	subs	r7, r2, r7
   31284:	42ba      	cmp	r2, r7
   31286:	4192      	sbcs	r2, r2
   31288:	1b0c      	subs	r4, r1, r4
   3128a:	4252      	negs	r2, r2
   3128c:	1aa4      	subs	r4, r4, r2
   3128e:	0006      	movs	r6, r0
   31290:	46d8      	mov	r8, fp
   31292:	e6a3      	b.n	30fdc <__aeabi_dadd+0xb0>
   31294:	4664      	mov	r4, ip
   31296:	4667      	mov	r7, ip
   31298:	432c      	orrs	r4, r5
   3129a:	d000      	beq.n	3129e <__aeabi_dadd+0x372>
   3129c:	e6a2      	b.n	30fe4 <__aeabi_dadd+0xb8>
   3129e:	2500      	movs	r5, #0
   312a0:	2600      	movs	r6, #0
   312a2:	2700      	movs	r7, #0
   312a4:	e706      	b.n	310b4 <__aeabi_dadd+0x188>
   312a6:	001e      	movs	r6, r3
   312a8:	e6c4      	b.n	31034 <__aeabi_dadd+0x108>
   312aa:	46c0      	nop			; (mov r8, r8)
   312ac:	000007ff 	.word	0x000007ff
   312b0:	ff7fffff 	.word	0xff7fffff
   312b4:	800fffff 	.word	0x800fffff
   312b8:	2b1f      	cmp	r3, #31
   312ba:	dc63      	bgt.n	31384 <__aeabi_dadd+0x458>
   312bc:	2020      	movs	r0, #32
   312be:	1ac3      	subs	r3, r0, r3
   312c0:	0008      	movs	r0, r1
   312c2:	4098      	lsls	r0, r3
   312c4:	469c      	mov	ip, r3
   312c6:	4683      	mov	fp, r0
   312c8:	4653      	mov	r3, sl
   312ca:	0010      	movs	r0, r2
   312cc:	40d8      	lsrs	r0, r3
   312ce:	0003      	movs	r3, r0
   312d0:	4658      	mov	r0, fp
   312d2:	4318      	orrs	r0, r3
   312d4:	4663      	mov	r3, ip
   312d6:	409a      	lsls	r2, r3
   312d8:	1e53      	subs	r3, r2, #1
   312da:	419a      	sbcs	r2, r3
   312dc:	4653      	mov	r3, sl
   312de:	4302      	orrs	r2, r0
   312e0:	40d9      	lsrs	r1, r3
   312e2:	e703      	b.n	310ec <__aeabi_dadd+0x1c0>
   312e4:	0026      	movs	r6, r4
   312e6:	433e      	orrs	r6, r7
   312e8:	d006      	beq.n	312f8 <__aeabi_dadd+0x3cc>
   312ea:	43eb      	mvns	r3, r5
   312ec:	4699      	mov	r9, r3
   312ee:	2b00      	cmp	r3, #0
   312f0:	d0c7      	beq.n	31282 <__aeabi_dadd+0x356>
   312f2:	4e94      	ldr	r6, [pc, #592]	; (31544 <__aeabi_dadd+0x618>)
   312f4:	42b0      	cmp	r0, r6
   312f6:	d1ac      	bne.n	31252 <__aeabi_dadd+0x326>
   312f8:	000c      	movs	r4, r1
   312fa:	0017      	movs	r7, r2
   312fc:	0006      	movs	r6, r0
   312fe:	46d8      	mov	r8, fp
   31300:	e698      	b.n	31034 <__aeabi_dadd+0x108>
   31302:	4b90      	ldr	r3, [pc, #576]	; (31544 <__aeabi_dadd+0x618>)
   31304:	459a      	cmp	sl, r3
   31306:	d00b      	beq.n	31320 <__aeabi_dadd+0x3f4>
   31308:	4682      	mov	sl, r0
   3130a:	e6e7      	b.n	310dc <__aeabi_dadd+0x1b0>
   3130c:	2800      	cmp	r0, #0
   3130e:	d000      	beq.n	31312 <__aeabi_dadd+0x3e6>
   31310:	e09e      	b.n	31450 <__aeabi_dadd+0x524>
   31312:	0018      	movs	r0, r3
   31314:	4310      	orrs	r0, r2
   31316:	d100      	bne.n	3131a <__aeabi_dadd+0x3ee>
   31318:	e0e9      	b.n	314ee <__aeabi_dadd+0x5c2>
   3131a:	001c      	movs	r4, r3
   3131c:	0017      	movs	r7, r2
   3131e:	46d8      	mov	r8, fp
   31320:	4e88      	ldr	r6, [pc, #544]	; (31544 <__aeabi_dadd+0x618>)
   31322:	e687      	b.n	31034 <__aeabi_dadd+0x108>
   31324:	2500      	movs	r5, #0
   31326:	e772      	b.n	3120e <__aeabi_dadd+0x2e2>
   31328:	2100      	movs	r1, #0
   3132a:	e782      	b.n	31232 <__aeabi_dadd+0x306>
   3132c:	0023      	movs	r3, r4
   3132e:	433b      	orrs	r3, r7
   31330:	2e00      	cmp	r6, #0
   31332:	d000      	beq.n	31336 <__aeabi_dadd+0x40a>
   31334:	e0ab      	b.n	3148e <__aeabi_dadd+0x562>
   31336:	2b00      	cmp	r3, #0
   31338:	d100      	bne.n	3133c <__aeabi_dadd+0x410>
   3133a:	e0e7      	b.n	3150c <__aeabi_dadd+0x5e0>
   3133c:	000b      	movs	r3, r1
   3133e:	4313      	orrs	r3, r2
   31340:	d100      	bne.n	31344 <__aeabi_dadd+0x418>
   31342:	e677      	b.n	31034 <__aeabi_dadd+0x108>
   31344:	18ba      	adds	r2, r7, r2
   31346:	42ba      	cmp	r2, r7
   31348:	41bf      	sbcs	r7, r7
   3134a:	1864      	adds	r4, r4, r1
   3134c:	427f      	negs	r7, r7
   3134e:	19e4      	adds	r4, r4, r7
   31350:	0223      	lsls	r3, r4, #8
   31352:	d400      	bmi.n	31356 <__aeabi_dadd+0x42a>
   31354:	e0f2      	b.n	3153c <__aeabi_dadd+0x610>
   31356:	4b7c      	ldr	r3, [pc, #496]	; (31548 <__aeabi_dadd+0x61c>)
   31358:	0017      	movs	r7, r2
   3135a:	401c      	ands	r4, r3
   3135c:	0006      	movs	r6, r0
   3135e:	e669      	b.n	31034 <__aeabi_dadd+0x108>
   31360:	0020      	movs	r0, r4
   31362:	4338      	orrs	r0, r7
   31364:	2e00      	cmp	r6, #0
   31366:	d1d1      	bne.n	3130c <__aeabi_dadd+0x3e0>
   31368:	2800      	cmp	r0, #0
   3136a:	d15b      	bne.n	31424 <__aeabi_dadd+0x4f8>
   3136c:	001c      	movs	r4, r3
   3136e:	4314      	orrs	r4, r2
   31370:	d100      	bne.n	31374 <__aeabi_dadd+0x448>
   31372:	e0a8      	b.n	314c6 <__aeabi_dadd+0x59a>
   31374:	001c      	movs	r4, r3
   31376:	0017      	movs	r7, r2
   31378:	46d8      	mov	r8, fp
   3137a:	e65b      	b.n	31034 <__aeabi_dadd+0x108>
   3137c:	0006      	movs	r6, r0
   3137e:	2400      	movs	r4, #0
   31380:	2700      	movs	r7, #0
   31382:	e697      	b.n	310b4 <__aeabi_dadd+0x188>
   31384:	4650      	mov	r0, sl
   31386:	000b      	movs	r3, r1
   31388:	3820      	subs	r0, #32
   3138a:	40c3      	lsrs	r3, r0
   3138c:	4699      	mov	r9, r3
   3138e:	4653      	mov	r3, sl
   31390:	2b20      	cmp	r3, #32
   31392:	d100      	bne.n	31396 <__aeabi_dadd+0x46a>
   31394:	e095      	b.n	314c2 <__aeabi_dadd+0x596>
   31396:	2340      	movs	r3, #64	; 0x40
   31398:	4650      	mov	r0, sl
   3139a:	1a1b      	subs	r3, r3, r0
   3139c:	4099      	lsls	r1, r3
   3139e:	430a      	orrs	r2, r1
   313a0:	1e51      	subs	r1, r2, #1
   313a2:	418a      	sbcs	r2, r1
   313a4:	464b      	mov	r3, r9
   313a6:	2100      	movs	r1, #0
   313a8:	431a      	orrs	r2, r3
   313aa:	e69f      	b.n	310ec <__aeabi_dadd+0x1c0>
   313ac:	2e00      	cmp	r6, #0
   313ae:	d130      	bne.n	31412 <__aeabi_dadd+0x4e6>
   313b0:	0026      	movs	r6, r4
   313b2:	433e      	orrs	r6, r7
   313b4:	d067      	beq.n	31486 <__aeabi_dadd+0x55a>
   313b6:	43db      	mvns	r3, r3
   313b8:	469a      	mov	sl, r3
   313ba:	2b00      	cmp	r3, #0
   313bc:	d01c      	beq.n	313f8 <__aeabi_dadd+0x4cc>
   313be:	4e61      	ldr	r6, [pc, #388]	; (31544 <__aeabi_dadd+0x618>)
   313c0:	42b0      	cmp	r0, r6
   313c2:	d060      	beq.n	31486 <__aeabi_dadd+0x55a>
   313c4:	4653      	mov	r3, sl
   313c6:	2b38      	cmp	r3, #56	; 0x38
   313c8:	dd00      	ble.n	313cc <__aeabi_dadd+0x4a0>
   313ca:	e096      	b.n	314fa <__aeabi_dadd+0x5ce>
   313cc:	2b1f      	cmp	r3, #31
   313ce:	dd00      	ble.n	313d2 <__aeabi_dadd+0x4a6>
   313d0:	e09f      	b.n	31512 <__aeabi_dadd+0x5e6>
   313d2:	2620      	movs	r6, #32
   313d4:	1af3      	subs	r3, r6, r3
   313d6:	0026      	movs	r6, r4
   313d8:	409e      	lsls	r6, r3
   313da:	469c      	mov	ip, r3
   313dc:	46b3      	mov	fp, r6
   313de:	4653      	mov	r3, sl
   313e0:	003e      	movs	r6, r7
   313e2:	40de      	lsrs	r6, r3
   313e4:	0033      	movs	r3, r6
   313e6:	465e      	mov	r6, fp
   313e8:	431e      	orrs	r6, r3
   313ea:	4663      	mov	r3, ip
   313ec:	409f      	lsls	r7, r3
   313ee:	1e7b      	subs	r3, r7, #1
   313f0:	419f      	sbcs	r7, r3
   313f2:	4653      	mov	r3, sl
   313f4:	40dc      	lsrs	r4, r3
   313f6:	4337      	orrs	r7, r6
   313f8:	18bf      	adds	r7, r7, r2
   313fa:	4297      	cmp	r7, r2
   313fc:	4192      	sbcs	r2, r2
   313fe:	1864      	adds	r4, r4, r1
   31400:	4252      	negs	r2, r2
   31402:	18a4      	adds	r4, r4, r2
   31404:	0006      	movs	r6, r0
   31406:	e678      	b.n	310fa <__aeabi_dadd+0x1ce>
   31408:	4327      	orrs	r7, r4
   3140a:	1e7c      	subs	r4, r7, #1
   3140c:	41a7      	sbcs	r7, r4
   3140e:	2400      	movs	r4, #0
   31410:	e737      	b.n	31282 <__aeabi_dadd+0x356>
   31412:	4e4c      	ldr	r6, [pc, #304]	; (31544 <__aeabi_dadd+0x618>)
   31414:	42b0      	cmp	r0, r6
   31416:	d036      	beq.n	31486 <__aeabi_dadd+0x55a>
   31418:	2680      	movs	r6, #128	; 0x80
   3141a:	425b      	negs	r3, r3
   3141c:	0436      	lsls	r6, r6, #16
   3141e:	469a      	mov	sl, r3
   31420:	4334      	orrs	r4, r6
   31422:	e7cf      	b.n	313c4 <__aeabi_dadd+0x498>
   31424:	0018      	movs	r0, r3
   31426:	4310      	orrs	r0, r2
   31428:	d100      	bne.n	3142c <__aeabi_dadd+0x500>
   3142a:	e603      	b.n	31034 <__aeabi_dadd+0x108>
   3142c:	1ab8      	subs	r0, r7, r2
   3142e:	4684      	mov	ip, r0
   31430:	4567      	cmp	r7, ip
   31432:	41ad      	sbcs	r5, r5
   31434:	1ae0      	subs	r0, r4, r3
   31436:	426d      	negs	r5, r5
   31438:	1b40      	subs	r0, r0, r5
   3143a:	0205      	lsls	r5, r0, #8
   3143c:	d400      	bmi.n	31440 <__aeabi_dadd+0x514>
   3143e:	e62c      	b.n	3109a <__aeabi_dadd+0x16e>
   31440:	1bd7      	subs	r7, r2, r7
   31442:	42ba      	cmp	r2, r7
   31444:	4192      	sbcs	r2, r2
   31446:	1b1c      	subs	r4, r3, r4
   31448:	4252      	negs	r2, r2
   3144a:	1aa4      	subs	r4, r4, r2
   3144c:	46d8      	mov	r8, fp
   3144e:	e5f1      	b.n	31034 <__aeabi_dadd+0x108>
   31450:	0018      	movs	r0, r3
   31452:	4310      	orrs	r0, r2
   31454:	d100      	bne.n	31458 <__aeabi_dadd+0x52c>
   31456:	e763      	b.n	31320 <__aeabi_dadd+0x3f4>
   31458:	08f8      	lsrs	r0, r7, #3
   3145a:	0767      	lsls	r7, r4, #29
   3145c:	4307      	orrs	r7, r0
   3145e:	2080      	movs	r0, #128	; 0x80
   31460:	08e4      	lsrs	r4, r4, #3
   31462:	0300      	lsls	r0, r0, #12
   31464:	4204      	tst	r4, r0
   31466:	d008      	beq.n	3147a <__aeabi_dadd+0x54e>
   31468:	08dd      	lsrs	r5, r3, #3
   3146a:	4205      	tst	r5, r0
   3146c:	d105      	bne.n	3147a <__aeabi_dadd+0x54e>
   3146e:	08d2      	lsrs	r2, r2, #3
   31470:	0759      	lsls	r1, r3, #29
   31472:	4311      	orrs	r1, r2
   31474:	000f      	movs	r7, r1
   31476:	002c      	movs	r4, r5
   31478:	46d8      	mov	r8, fp
   3147a:	0f7b      	lsrs	r3, r7, #29
   3147c:	00e4      	lsls	r4, r4, #3
   3147e:	431c      	orrs	r4, r3
   31480:	00ff      	lsls	r7, r7, #3
   31482:	4e30      	ldr	r6, [pc, #192]	; (31544 <__aeabi_dadd+0x618>)
   31484:	e5d6      	b.n	31034 <__aeabi_dadd+0x108>
   31486:	000c      	movs	r4, r1
   31488:	0017      	movs	r7, r2
   3148a:	0006      	movs	r6, r0
   3148c:	e5d2      	b.n	31034 <__aeabi_dadd+0x108>
   3148e:	2b00      	cmp	r3, #0
   31490:	d038      	beq.n	31504 <__aeabi_dadd+0x5d8>
   31492:	000b      	movs	r3, r1
   31494:	4313      	orrs	r3, r2
   31496:	d100      	bne.n	3149a <__aeabi_dadd+0x56e>
   31498:	e742      	b.n	31320 <__aeabi_dadd+0x3f4>
   3149a:	08f8      	lsrs	r0, r7, #3
   3149c:	0767      	lsls	r7, r4, #29
   3149e:	4307      	orrs	r7, r0
   314a0:	2080      	movs	r0, #128	; 0x80
   314a2:	08e4      	lsrs	r4, r4, #3
   314a4:	0300      	lsls	r0, r0, #12
   314a6:	4204      	tst	r4, r0
   314a8:	d0e7      	beq.n	3147a <__aeabi_dadd+0x54e>
   314aa:	08cb      	lsrs	r3, r1, #3
   314ac:	4203      	tst	r3, r0
   314ae:	d1e4      	bne.n	3147a <__aeabi_dadd+0x54e>
   314b0:	08d2      	lsrs	r2, r2, #3
   314b2:	0749      	lsls	r1, r1, #29
   314b4:	4311      	orrs	r1, r2
   314b6:	000f      	movs	r7, r1
   314b8:	001c      	movs	r4, r3
   314ba:	e7de      	b.n	3147a <__aeabi_dadd+0x54e>
   314bc:	2700      	movs	r7, #0
   314be:	2400      	movs	r4, #0
   314c0:	e5d5      	b.n	3106e <__aeabi_dadd+0x142>
   314c2:	2100      	movs	r1, #0
   314c4:	e76b      	b.n	3139e <__aeabi_dadd+0x472>
   314c6:	2500      	movs	r5, #0
   314c8:	2700      	movs	r7, #0
   314ca:	e5f3      	b.n	310b4 <__aeabi_dadd+0x188>
   314cc:	464e      	mov	r6, r9
   314ce:	0025      	movs	r5, r4
   314d0:	3e20      	subs	r6, #32
   314d2:	40f5      	lsrs	r5, r6
   314d4:	464b      	mov	r3, r9
   314d6:	002e      	movs	r6, r5
   314d8:	2b20      	cmp	r3, #32
   314da:	d02d      	beq.n	31538 <__aeabi_dadd+0x60c>
   314dc:	2540      	movs	r5, #64	; 0x40
   314de:	1aed      	subs	r5, r5, r3
   314e0:	40ac      	lsls	r4, r5
   314e2:	4327      	orrs	r7, r4
   314e4:	1e7c      	subs	r4, r7, #1
   314e6:	41a7      	sbcs	r7, r4
   314e8:	2400      	movs	r4, #0
   314ea:	4337      	orrs	r7, r6
   314ec:	e6c9      	b.n	31282 <__aeabi_dadd+0x356>
   314ee:	2480      	movs	r4, #128	; 0x80
   314f0:	2500      	movs	r5, #0
   314f2:	0324      	lsls	r4, r4, #12
   314f4:	4e13      	ldr	r6, [pc, #76]	; (31544 <__aeabi_dadd+0x618>)
   314f6:	2700      	movs	r7, #0
   314f8:	e5dc      	b.n	310b4 <__aeabi_dadd+0x188>
   314fa:	4327      	orrs	r7, r4
   314fc:	1e7c      	subs	r4, r7, #1
   314fe:	41a7      	sbcs	r7, r4
   31500:	2400      	movs	r4, #0
   31502:	e779      	b.n	313f8 <__aeabi_dadd+0x4cc>
   31504:	000c      	movs	r4, r1
   31506:	0017      	movs	r7, r2
   31508:	4e0e      	ldr	r6, [pc, #56]	; (31544 <__aeabi_dadd+0x618>)
   3150a:	e593      	b.n	31034 <__aeabi_dadd+0x108>
   3150c:	000c      	movs	r4, r1
   3150e:	0017      	movs	r7, r2
   31510:	e590      	b.n	31034 <__aeabi_dadd+0x108>
   31512:	4656      	mov	r6, sl
   31514:	0023      	movs	r3, r4
   31516:	3e20      	subs	r6, #32
   31518:	40f3      	lsrs	r3, r6
   3151a:	4699      	mov	r9, r3
   3151c:	4653      	mov	r3, sl
   3151e:	2b20      	cmp	r3, #32
   31520:	d00e      	beq.n	31540 <__aeabi_dadd+0x614>
   31522:	2340      	movs	r3, #64	; 0x40
   31524:	4656      	mov	r6, sl
   31526:	1b9b      	subs	r3, r3, r6
   31528:	409c      	lsls	r4, r3
   3152a:	4327      	orrs	r7, r4
   3152c:	1e7c      	subs	r4, r7, #1
   3152e:	41a7      	sbcs	r7, r4
   31530:	464b      	mov	r3, r9
   31532:	2400      	movs	r4, #0
   31534:	431f      	orrs	r7, r3
   31536:	e75f      	b.n	313f8 <__aeabi_dadd+0x4cc>
   31538:	2400      	movs	r4, #0
   3153a:	e7d2      	b.n	314e2 <__aeabi_dadd+0x5b6>
   3153c:	0017      	movs	r7, r2
   3153e:	e5b2      	b.n	310a6 <__aeabi_dadd+0x17a>
   31540:	2400      	movs	r4, #0
   31542:	e7f2      	b.n	3152a <__aeabi_dadd+0x5fe>
   31544:	000007ff 	.word	0x000007ff
   31548:	ff7fffff 	.word	0xff7fffff

0003154c <__aeabi_ddiv>:
   3154c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3154e:	4657      	mov	r7, sl
   31550:	4645      	mov	r5, r8
   31552:	46de      	mov	lr, fp
   31554:	464e      	mov	r6, r9
   31556:	b5e0      	push	{r5, r6, r7, lr}
   31558:	004c      	lsls	r4, r1, #1
   3155a:	030e      	lsls	r6, r1, #12
   3155c:	b087      	sub	sp, #28
   3155e:	4683      	mov	fp, r0
   31560:	4692      	mov	sl, r2
   31562:	001d      	movs	r5, r3
   31564:	4680      	mov	r8, r0
   31566:	0b36      	lsrs	r6, r6, #12
   31568:	0d64      	lsrs	r4, r4, #21
   3156a:	0fcf      	lsrs	r7, r1, #31
   3156c:	2c00      	cmp	r4, #0
   3156e:	d04f      	beq.n	31610 <__aeabi_ddiv+0xc4>
   31570:	4b6f      	ldr	r3, [pc, #444]	; (31730 <__aeabi_ddiv+0x1e4>)
   31572:	429c      	cmp	r4, r3
   31574:	d035      	beq.n	315e2 <__aeabi_ddiv+0x96>
   31576:	2380      	movs	r3, #128	; 0x80
   31578:	0f42      	lsrs	r2, r0, #29
   3157a:	041b      	lsls	r3, r3, #16
   3157c:	00f6      	lsls	r6, r6, #3
   3157e:	4313      	orrs	r3, r2
   31580:	4333      	orrs	r3, r6
   31582:	4699      	mov	r9, r3
   31584:	00c3      	lsls	r3, r0, #3
   31586:	4698      	mov	r8, r3
   31588:	4b6a      	ldr	r3, [pc, #424]	; (31734 <__aeabi_ddiv+0x1e8>)
   3158a:	2600      	movs	r6, #0
   3158c:	469c      	mov	ip, r3
   3158e:	2300      	movs	r3, #0
   31590:	4464      	add	r4, ip
   31592:	9303      	str	r3, [sp, #12]
   31594:	032b      	lsls	r3, r5, #12
   31596:	0b1b      	lsrs	r3, r3, #12
   31598:	469b      	mov	fp, r3
   3159a:	006b      	lsls	r3, r5, #1
   3159c:	0fed      	lsrs	r5, r5, #31
   3159e:	4650      	mov	r0, sl
   315a0:	0d5b      	lsrs	r3, r3, #21
   315a2:	9501      	str	r5, [sp, #4]
   315a4:	d05e      	beq.n	31664 <__aeabi_ddiv+0x118>
   315a6:	4a62      	ldr	r2, [pc, #392]	; (31730 <__aeabi_ddiv+0x1e4>)
   315a8:	4293      	cmp	r3, r2
   315aa:	d053      	beq.n	31654 <__aeabi_ddiv+0x108>
   315ac:	465a      	mov	r2, fp
   315ae:	00d1      	lsls	r1, r2, #3
   315b0:	2280      	movs	r2, #128	; 0x80
   315b2:	0f40      	lsrs	r0, r0, #29
   315b4:	0412      	lsls	r2, r2, #16
   315b6:	4302      	orrs	r2, r0
   315b8:	430a      	orrs	r2, r1
   315ba:	4693      	mov	fp, r2
   315bc:	4652      	mov	r2, sl
   315be:	00d1      	lsls	r1, r2, #3
   315c0:	4a5c      	ldr	r2, [pc, #368]	; (31734 <__aeabi_ddiv+0x1e8>)
   315c2:	4694      	mov	ip, r2
   315c4:	2200      	movs	r2, #0
   315c6:	4463      	add	r3, ip
   315c8:	0038      	movs	r0, r7
   315ca:	4068      	eors	r0, r5
   315cc:	4684      	mov	ip, r0
   315ce:	9002      	str	r0, [sp, #8]
   315d0:	1ae4      	subs	r4, r4, r3
   315d2:	4316      	orrs	r6, r2
   315d4:	2e0f      	cmp	r6, #15
   315d6:	d900      	bls.n	315da <__aeabi_ddiv+0x8e>
   315d8:	e0b4      	b.n	31744 <__aeabi_ddiv+0x1f8>
   315da:	4b57      	ldr	r3, [pc, #348]	; (31738 <__aeabi_ddiv+0x1ec>)
   315dc:	00b6      	lsls	r6, r6, #2
   315de:	599b      	ldr	r3, [r3, r6]
   315e0:	469f      	mov	pc, r3
   315e2:	0003      	movs	r3, r0
   315e4:	4333      	orrs	r3, r6
   315e6:	4699      	mov	r9, r3
   315e8:	d16c      	bne.n	316c4 <__aeabi_ddiv+0x178>
   315ea:	2300      	movs	r3, #0
   315ec:	4698      	mov	r8, r3
   315ee:	3302      	adds	r3, #2
   315f0:	2608      	movs	r6, #8
   315f2:	9303      	str	r3, [sp, #12]
   315f4:	e7ce      	b.n	31594 <__aeabi_ddiv+0x48>
   315f6:	46cb      	mov	fp, r9
   315f8:	4641      	mov	r1, r8
   315fa:	9a03      	ldr	r2, [sp, #12]
   315fc:	9701      	str	r7, [sp, #4]
   315fe:	2a02      	cmp	r2, #2
   31600:	d165      	bne.n	316ce <__aeabi_ddiv+0x182>
   31602:	9b01      	ldr	r3, [sp, #4]
   31604:	4c4a      	ldr	r4, [pc, #296]	; (31730 <__aeabi_ddiv+0x1e4>)
   31606:	469c      	mov	ip, r3
   31608:	2300      	movs	r3, #0
   3160a:	2200      	movs	r2, #0
   3160c:	4698      	mov	r8, r3
   3160e:	e06b      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31610:	0003      	movs	r3, r0
   31612:	4333      	orrs	r3, r6
   31614:	4699      	mov	r9, r3
   31616:	d04e      	beq.n	316b6 <__aeabi_ddiv+0x16a>
   31618:	2e00      	cmp	r6, #0
   3161a:	d100      	bne.n	3161e <__aeabi_ddiv+0xd2>
   3161c:	e1bc      	b.n	31998 <__aeabi_ddiv+0x44c>
   3161e:	0030      	movs	r0, r6
   31620:	f001 f8ca 	bl	327b8 <__clzsi2>
   31624:	0003      	movs	r3, r0
   31626:	3b0b      	subs	r3, #11
   31628:	2b1c      	cmp	r3, #28
   3162a:	dd00      	ble.n	3162e <__aeabi_ddiv+0xe2>
   3162c:	e1ac      	b.n	31988 <__aeabi_ddiv+0x43c>
   3162e:	221d      	movs	r2, #29
   31630:	1ad3      	subs	r3, r2, r3
   31632:	465a      	mov	r2, fp
   31634:	0001      	movs	r1, r0
   31636:	40da      	lsrs	r2, r3
   31638:	3908      	subs	r1, #8
   3163a:	408e      	lsls	r6, r1
   3163c:	0013      	movs	r3, r2
   3163e:	4333      	orrs	r3, r6
   31640:	4699      	mov	r9, r3
   31642:	465b      	mov	r3, fp
   31644:	408b      	lsls	r3, r1
   31646:	4698      	mov	r8, r3
   31648:	2300      	movs	r3, #0
   3164a:	4c3c      	ldr	r4, [pc, #240]	; (3173c <__aeabi_ddiv+0x1f0>)
   3164c:	2600      	movs	r6, #0
   3164e:	1a24      	subs	r4, r4, r0
   31650:	9303      	str	r3, [sp, #12]
   31652:	e79f      	b.n	31594 <__aeabi_ddiv+0x48>
   31654:	4651      	mov	r1, sl
   31656:	465a      	mov	r2, fp
   31658:	4311      	orrs	r1, r2
   3165a:	d129      	bne.n	316b0 <__aeabi_ddiv+0x164>
   3165c:	2200      	movs	r2, #0
   3165e:	4693      	mov	fp, r2
   31660:	3202      	adds	r2, #2
   31662:	e7b1      	b.n	315c8 <__aeabi_ddiv+0x7c>
   31664:	4659      	mov	r1, fp
   31666:	4301      	orrs	r1, r0
   31668:	d01e      	beq.n	316a8 <__aeabi_ddiv+0x15c>
   3166a:	465b      	mov	r3, fp
   3166c:	2b00      	cmp	r3, #0
   3166e:	d100      	bne.n	31672 <__aeabi_ddiv+0x126>
   31670:	e19e      	b.n	319b0 <__aeabi_ddiv+0x464>
   31672:	4658      	mov	r0, fp
   31674:	f001 f8a0 	bl	327b8 <__clzsi2>
   31678:	0003      	movs	r3, r0
   3167a:	3b0b      	subs	r3, #11
   3167c:	2b1c      	cmp	r3, #28
   3167e:	dd00      	ble.n	31682 <__aeabi_ddiv+0x136>
   31680:	e18f      	b.n	319a2 <__aeabi_ddiv+0x456>
   31682:	0002      	movs	r2, r0
   31684:	4659      	mov	r1, fp
   31686:	3a08      	subs	r2, #8
   31688:	4091      	lsls	r1, r2
   3168a:	468b      	mov	fp, r1
   3168c:	211d      	movs	r1, #29
   3168e:	1acb      	subs	r3, r1, r3
   31690:	4651      	mov	r1, sl
   31692:	40d9      	lsrs	r1, r3
   31694:	000b      	movs	r3, r1
   31696:	4659      	mov	r1, fp
   31698:	430b      	orrs	r3, r1
   3169a:	4651      	mov	r1, sl
   3169c:	469b      	mov	fp, r3
   3169e:	4091      	lsls	r1, r2
   316a0:	4b26      	ldr	r3, [pc, #152]	; (3173c <__aeabi_ddiv+0x1f0>)
   316a2:	2200      	movs	r2, #0
   316a4:	1a1b      	subs	r3, r3, r0
   316a6:	e78f      	b.n	315c8 <__aeabi_ddiv+0x7c>
   316a8:	2300      	movs	r3, #0
   316aa:	2201      	movs	r2, #1
   316ac:	469b      	mov	fp, r3
   316ae:	e78b      	b.n	315c8 <__aeabi_ddiv+0x7c>
   316b0:	4651      	mov	r1, sl
   316b2:	2203      	movs	r2, #3
   316b4:	e788      	b.n	315c8 <__aeabi_ddiv+0x7c>
   316b6:	2300      	movs	r3, #0
   316b8:	4698      	mov	r8, r3
   316ba:	3301      	adds	r3, #1
   316bc:	2604      	movs	r6, #4
   316be:	2400      	movs	r4, #0
   316c0:	9303      	str	r3, [sp, #12]
   316c2:	e767      	b.n	31594 <__aeabi_ddiv+0x48>
   316c4:	2303      	movs	r3, #3
   316c6:	46b1      	mov	r9, r6
   316c8:	9303      	str	r3, [sp, #12]
   316ca:	260c      	movs	r6, #12
   316cc:	e762      	b.n	31594 <__aeabi_ddiv+0x48>
   316ce:	2a03      	cmp	r2, #3
   316d0:	d100      	bne.n	316d4 <__aeabi_ddiv+0x188>
   316d2:	e25c      	b.n	31b8e <__aeabi_ddiv+0x642>
   316d4:	9b01      	ldr	r3, [sp, #4]
   316d6:	2a01      	cmp	r2, #1
   316d8:	d000      	beq.n	316dc <__aeabi_ddiv+0x190>
   316da:	e1e4      	b.n	31aa6 <__aeabi_ddiv+0x55a>
   316dc:	4013      	ands	r3, r2
   316de:	469c      	mov	ip, r3
   316e0:	2300      	movs	r3, #0
   316e2:	2400      	movs	r4, #0
   316e4:	2200      	movs	r2, #0
   316e6:	4698      	mov	r8, r3
   316e8:	2100      	movs	r1, #0
   316ea:	0312      	lsls	r2, r2, #12
   316ec:	0b13      	lsrs	r3, r2, #12
   316ee:	0d0a      	lsrs	r2, r1, #20
   316f0:	0512      	lsls	r2, r2, #20
   316f2:	431a      	orrs	r2, r3
   316f4:	0523      	lsls	r3, r4, #20
   316f6:	4c12      	ldr	r4, [pc, #72]	; (31740 <__aeabi_ddiv+0x1f4>)
   316f8:	4640      	mov	r0, r8
   316fa:	4022      	ands	r2, r4
   316fc:	4313      	orrs	r3, r2
   316fe:	4662      	mov	r2, ip
   31700:	005b      	lsls	r3, r3, #1
   31702:	07d2      	lsls	r2, r2, #31
   31704:	085b      	lsrs	r3, r3, #1
   31706:	4313      	orrs	r3, r2
   31708:	0019      	movs	r1, r3
   3170a:	b007      	add	sp, #28
   3170c:	bc3c      	pop	{r2, r3, r4, r5}
   3170e:	4690      	mov	r8, r2
   31710:	4699      	mov	r9, r3
   31712:	46a2      	mov	sl, r4
   31714:	46ab      	mov	fp, r5
   31716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31718:	2300      	movs	r3, #0
   3171a:	2280      	movs	r2, #128	; 0x80
   3171c:	469c      	mov	ip, r3
   3171e:	0312      	lsls	r2, r2, #12
   31720:	4698      	mov	r8, r3
   31722:	4c03      	ldr	r4, [pc, #12]	; (31730 <__aeabi_ddiv+0x1e4>)
   31724:	e7e0      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31726:	2300      	movs	r3, #0
   31728:	4c01      	ldr	r4, [pc, #4]	; (31730 <__aeabi_ddiv+0x1e4>)
   3172a:	2200      	movs	r2, #0
   3172c:	4698      	mov	r8, r3
   3172e:	e7db      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31730:	000007ff 	.word	0x000007ff
   31734:	fffffc01 	.word	0xfffffc01
   31738:	000383f4 	.word	0x000383f4
   3173c:	fffffc0d 	.word	0xfffffc0d
   31740:	800fffff 	.word	0x800fffff
   31744:	45d9      	cmp	r9, fp
   31746:	d900      	bls.n	3174a <__aeabi_ddiv+0x1fe>
   31748:	e139      	b.n	319be <__aeabi_ddiv+0x472>
   3174a:	d100      	bne.n	3174e <__aeabi_ddiv+0x202>
   3174c:	e134      	b.n	319b8 <__aeabi_ddiv+0x46c>
   3174e:	2300      	movs	r3, #0
   31750:	4646      	mov	r6, r8
   31752:	464d      	mov	r5, r9
   31754:	469a      	mov	sl, r3
   31756:	3c01      	subs	r4, #1
   31758:	465b      	mov	r3, fp
   3175a:	0e0a      	lsrs	r2, r1, #24
   3175c:	021b      	lsls	r3, r3, #8
   3175e:	431a      	orrs	r2, r3
   31760:	020b      	lsls	r3, r1, #8
   31762:	0c17      	lsrs	r7, r2, #16
   31764:	9303      	str	r3, [sp, #12]
   31766:	0413      	lsls	r3, r2, #16
   31768:	0c1b      	lsrs	r3, r3, #16
   3176a:	0039      	movs	r1, r7
   3176c:	0028      	movs	r0, r5
   3176e:	4690      	mov	r8, r2
   31770:	9301      	str	r3, [sp, #4]
   31772:	f7fe fb3b 	bl	2fdec <__udivsi3>
   31776:	0002      	movs	r2, r0
   31778:	9b01      	ldr	r3, [sp, #4]
   3177a:	4683      	mov	fp, r0
   3177c:	435a      	muls	r2, r3
   3177e:	0028      	movs	r0, r5
   31780:	0039      	movs	r1, r7
   31782:	4691      	mov	r9, r2
   31784:	f7fe fbb8 	bl	2fef8 <__aeabi_uidivmod>
   31788:	0c35      	lsrs	r5, r6, #16
   3178a:	0409      	lsls	r1, r1, #16
   3178c:	430d      	orrs	r5, r1
   3178e:	45a9      	cmp	r9, r5
   31790:	d90d      	bls.n	317ae <__aeabi_ddiv+0x262>
   31792:	465b      	mov	r3, fp
   31794:	4445      	add	r5, r8
   31796:	3b01      	subs	r3, #1
   31798:	45a8      	cmp	r8, r5
   3179a:	d900      	bls.n	3179e <__aeabi_ddiv+0x252>
   3179c:	e13a      	b.n	31a14 <__aeabi_ddiv+0x4c8>
   3179e:	45a9      	cmp	r9, r5
   317a0:	d800      	bhi.n	317a4 <__aeabi_ddiv+0x258>
   317a2:	e137      	b.n	31a14 <__aeabi_ddiv+0x4c8>
   317a4:	2302      	movs	r3, #2
   317a6:	425b      	negs	r3, r3
   317a8:	469c      	mov	ip, r3
   317aa:	4445      	add	r5, r8
   317ac:	44e3      	add	fp, ip
   317ae:	464b      	mov	r3, r9
   317b0:	1aeb      	subs	r3, r5, r3
   317b2:	0039      	movs	r1, r7
   317b4:	0018      	movs	r0, r3
   317b6:	9304      	str	r3, [sp, #16]
   317b8:	f7fe fb18 	bl	2fdec <__udivsi3>
   317bc:	9b01      	ldr	r3, [sp, #4]
   317be:	0005      	movs	r5, r0
   317c0:	4343      	muls	r3, r0
   317c2:	0039      	movs	r1, r7
   317c4:	9804      	ldr	r0, [sp, #16]
   317c6:	4699      	mov	r9, r3
   317c8:	f7fe fb96 	bl	2fef8 <__aeabi_uidivmod>
   317cc:	0433      	lsls	r3, r6, #16
   317ce:	0409      	lsls	r1, r1, #16
   317d0:	0c1b      	lsrs	r3, r3, #16
   317d2:	430b      	orrs	r3, r1
   317d4:	4599      	cmp	r9, r3
   317d6:	d909      	bls.n	317ec <__aeabi_ddiv+0x2a0>
   317d8:	4443      	add	r3, r8
   317da:	1e6a      	subs	r2, r5, #1
   317dc:	4598      	cmp	r8, r3
   317de:	d900      	bls.n	317e2 <__aeabi_ddiv+0x296>
   317e0:	e11a      	b.n	31a18 <__aeabi_ddiv+0x4cc>
   317e2:	4599      	cmp	r9, r3
   317e4:	d800      	bhi.n	317e8 <__aeabi_ddiv+0x29c>
   317e6:	e117      	b.n	31a18 <__aeabi_ddiv+0x4cc>
   317e8:	3d02      	subs	r5, #2
   317ea:	4443      	add	r3, r8
   317ec:	464a      	mov	r2, r9
   317ee:	1a9b      	subs	r3, r3, r2
   317f0:	465a      	mov	r2, fp
   317f2:	0412      	lsls	r2, r2, #16
   317f4:	432a      	orrs	r2, r5
   317f6:	9903      	ldr	r1, [sp, #12]
   317f8:	4693      	mov	fp, r2
   317fa:	0c10      	lsrs	r0, r2, #16
   317fc:	0c0a      	lsrs	r2, r1, #16
   317fe:	4691      	mov	r9, r2
   31800:	0409      	lsls	r1, r1, #16
   31802:	465a      	mov	r2, fp
   31804:	0c09      	lsrs	r1, r1, #16
   31806:	464e      	mov	r6, r9
   31808:	000d      	movs	r5, r1
   3180a:	0412      	lsls	r2, r2, #16
   3180c:	0c12      	lsrs	r2, r2, #16
   3180e:	4345      	muls	r5, r0
   31810:	9105      	str	r1, [sp, #20]
   31812:	4351      	muls	r1, r2
   31814:	4372      	muls	r2, r6
   31816:	4370      	muls	r0, r6
   31818:	1952      	adds	r2, r2, r5
   3181a:	0c0e      	lsrs	r6, r1, #16
   3181c:	18b2      	adds	r2, r6, r2
   3181e:	4295      	cmp	r5, r2
   31820:	d903      	bls.n	3182a <__aeabi_ddiv+0x2de>
   31822:	2580      	movs	r5, #128	; 0x80
   31824:	026d      	lsls	r5, r5, #9
   31826:	46ac      	mov	ip, r5
   31828:	4460      	add	r0, ip
   3182a:	0c15      	lsrs	r5, r2, #16
   3182c:	0409      	lsls	r1, r1, #16
   3182e:	0412      	lsls	r2, r2, #16
   31830:	0c09      	lsrs	r1, r1, #16
   31832:	1828      	adds	r0, r5, r0
   31834:	1852      	adds	r2, r2, r1
   31836:	4283      	cmp	r3, r0
   31838:	d200      	bcs.n	3183c <__aeabi_ddiv+0x2f0>
   3183a:	e0ce      	b.n	319da <__aeabi_ddiv+0x48e>
   3183c:	d100      	bne.n	31840 <__aeabi_ddiv+0x2f4>
   3183e:	e0c8      	b.n	319d2 <__aeabi_ddiv+0x486>
   31840:	1a1d      	subs	r5, r3, r0
   31842:	4653      	mov	r3, sl
   31844:	1a9e      	subs	r6, r3, r2
   31846:	45b2      	cmp	sl, r6
   31848:	4192      	sbcs	r2, r2
   3184a:	4252      	negs	r2, r2
   3184c:	1aab      	subs	r3, r5, r2
   3184e:	469a      	mov	sl, r3
   31850:	4598      	cmp	r8, r3
   31852:	d100      	bne.n	31856 <__aeabi_ddiv+0x30a>
   31854:	e117      	b.n	31a86 <__aeabi_ddiv+0x53a>
   31856:	0039      	movs	r1, r7
   31858:	0018      	movs	r0, r3
   3185a:	f7fe fac7 	bl	2fdec <__udivsi3>
   3185e:	9b01      	ldr	r3, [sp, #4]
   31860:	0005      	movs	r5, r0
   31862:	4343      	muls	r3, r0
   31864:	0039      	movs	r1, r7
   31866:	4650      	mov	r0, sl
   31868:	9304      	str	r3, [sp, #16]
   3186a:	f7fe fb45 	bl	2fef8 <__aeabi_uidivmod>
   3186e:	9804      	ldr	r0, [sp, #16]
   31870:	040b      	lsls	r3, r1, #16
   31872:	0c31      	lsrs	r1, r6, #16
   31874:	4319      	orrs	r1, r3
   31876:	4288      	cmp	r0, r1
   31878:	d909      	bls.n	3188e <__aeabi_ddiv+0x342>
   3187a:	4441      	add	r1, r8
   3187c:	1e6b      	subs	r3, r5, #1
   3187e:	4588      	cmp	r8, r1
   31880:	d900      	bls.n	31884 <__aeabi_ddiv+0x338>
   31882:	e107      	b.n	31a94 <__aeabi_ddiv+0x548>
   31884:	4288      	cmp	r0, r1
   31886:	d800      	bhi.n	3188a <__aeabi_ddiv+0x33e>
   31888:	e104      	b.n	31a94 <__aeabi_ddiv+0x548>
   3188a:	3d02      	subs	r5, #2
   3188c:	4441      	add	r1, r8
   3188e:	9b04      	ldr	r3, [sp, #16]
   31890:	1acb      	subs	r3, r1, r3
   31892:	0018      	movs	r0, r3
   31894:	0039      	movs	r1, r7
   31896:	9304      	str	r3, [sp, #16]
   31898:	f7fe faa8 	bl	2fdec <__udivsi3>
   3189c:	9b01      	ldr	r3, [sp, #4]
   3189e:	4682      	mov	sl, r0
   318a0:	4343      	muls	r3, r0
   318a2:	0039      	movs	r1, r7
   318a4:	9804      	ldr	r0, [sp, #16]
   318a6:	9301      	str	r3, [sp, #4]
   318a8:	f7fe fb26 	bl	2fef8 <__aeabi_uidivmod>
   318ac:	9801      	ldr	r0, [sp, #4]
   318ae:	040b      	lsls	r3, r1, #16
   318b0:	0431      	lsls	r1, r6, #16
   318b2:	0c09      	lsrs	r1, r1, #16
   318b4:	4319      	orrs	r1, r3
   318b6:	4288      	cmp	r0, r1
   318b8:	d90d      	bls.n	318d6 <__aeabi_ddiv+0x38a>
   318ba:	4653      	mov	r3, sl
   318bc:	4441      	add	r1, r8
   318be:	3b01      	subs	r3, #1
   318c0:	4588      	cmp	r8, r1
   318c2:	d900      	bls.n	318c6 <__aeabi_ddiv+0x37a>
   318c4:	e0e8      	b.n	31a98 <__aeabi_ddiv+0x54c>
   318c6:	4288      	cmp	r0, r1
   318c8:	d800      	bhi.n	318cc <__aeabi_ddiv+0x380>
   318ca:	e0e5      	b.n	31a98 <__aeabi_ddiv+0x54c>
   318cc:	2302      	movs	r3, #2
   318ce:	425b      	negs	r3, r3
   318d0:	469c      	mov	ip, r3
   318d2:	4441      	add	r1, r8
   318d4:	44e2      	add	sl, ip
   318d6:	9b01      	ldr	r3, [sp, #4]
   318d8:	042d      	lsls	r5, r5, #16
   318da:	1ace      	subs	r6, r1, r3
   318dc:	4651      	mov	r1, sl
   318de:	4329      	orrs	r1, r5
   318e0:	9d05      	ldr	r5, [sp, #20]
   318e2:	464f      	mov	r7, r9
   318e4:	002a      	movs	r2, r5
   318e6:	040b      	lsls	r3, r1, #16
   318e8:	0c08      	lsrs	r0, r1, #16
   318ea:	0c1b      	lsrs	r3, r3, #16
   318ec:	435a      	muls	r2, r3
   318ee:	4345      	muls	r5, r0
   318f0:	437b      	muls	r3, r7
   318f2:	4378      	muls	r0, r7
   318f4:	195b      	adds	r3, r3, r5
   318f6:	0c17      	lsrs	r7, r2, #16
   318f8:	18fb      	adds	r3, r7, r3
   318fa:	429d      	cmp	r5, r3
   318fc:	d903      	bls.n	31906 <__aeabi_ddiv+0x3ba>
   318fe:	2580      	movs	r5, #128	; 0x80
   31900:	026d      	lsls	r5, r5, #9
   31902:	46ac      	mov	ip, r5
   31904:	4460      	add	r0, ip
   31906:	0c1d      	lsrs	r5, r3, #16
   31908:	0412      	lsls	r2, r2, #16
   3190a:	041b      	lsls	r3, r3, #16
   3190c:	0c12      	lsrs	r2, r2, #16
   3190e:	1828      	adds	r0, r5, r0
   31910:	189b      	adds	r3, r3, r2
   31912:	4286      	cmp	r6, r0
   31914:	d200      	bcs.n	31918 <__aeabi_ddiv+0x3cc>
   31916:	e093      	b.n	31a40 <__aeabi_ddiv+0x4f4>
   31918:	d100      	bne.n	3191c <__aeabi_ddiv+0x3d0>
   3191a:	e08e      	b.n	31a3a <__aeabi_ddiv+0x4ee>
   3191c:	2301      	movs	r3, #1
   3191e:	4319      	orrs	r1, r3
   31920:	4ba0      	ldr	r3, [pc, #640]	; (31ba4 <__aeabi_ddiv+0x658>)
   31922:	18e3      	adds	r3, r4, r3
   31924:	2b00      	cmp	r3, #0
   31926:	dc00      	bgt.n	3192a <__aeabi_ddiv+0x3de>
   31928:	e099      	b.n	31a5e <__aeabi_ddiv+0x512>
   3192a:	074a      	lsls	r2, r1, #29
   3192c:	d000      	beq.n	31930 <__aeabi_ddiv+0x3e4>
   3192e:	e09e      	b.n	31a6e <__aeabi_ddiv+0x522>
   31930:	465a      	mov	r2, fp
   31932:	01d2      	lsls	r2, r2, #7
   31934:	d506      	bpl.n	31944 <__aeabi_ddiv+0x3f8>
   31936:	465a      	mov	r2, fp
   31938:	4b9b      	ldr	r3, [pc, #620]	; (31ba8 <__aeabi_ddiv+0x65c>)
   3193a:	401a      	ands	r2, r3
   3193c:	2380      	movs	r3, #128	; 0x80
   3193e:	4693      	mov	fp, r2
   31940:	00db      	lsls	r3, r3, #3
   31942:	18e3      	adds	r3, r4, r3
   31944:	4a99      	ldr	r2, [pc, #612]	; (31bac <__aeabi_ddiv+0x660>)
   31946:	4293      	cmp	r3, r2
   31948:	dd68      	ble.n	31a1c <__aeabi_ddiv+0x4d0>
   3194a:	2301      	movs	r3, #1
   3194c:	9a02      	ldr	r2, [sp, #8]
   3194e:	4c98      	ldr	r4, [pc, #608]	; (31bb0 <__aeabi_ddiv+0x664>)
   31950:	401a      	ands	r2, r3
   31952:	2300      	movs	r3, #0
   31954:	4694      	mov	ip, r2
   31956:	4698      	mov	r8, r3
   31958:	2200      	movs	r2, #0
   3195a:	e6c5      	b.n	316e8 <__aeabi_ddiv+0x19c>
   3195c:	2280      	movs	r2, #128	; 0x80
   3195e:	464b      	mov	r3, r9
   31960:	0312      	lsls	r2, r2, #12
   31962:	4213      	tst	r3, r2
   31964:	d00a      	beq.n	3197c <__aeabi_ddiv+0x430>
   31966:	465b      	mov	r3, fp
   31968:	4213      	tst	r3, r2
   3196a:	d106      	bne.n	3197a <__aeabi_ddiv+0x42e>
   3196c:	431a      	orrs	r2, r3
   3196e:	0312      	lsls	r2, r2, #12
   31970:	0b12      	lsrs	r2, r2, #12
   31972:	46ac      	mov	ip, r5
   31974:	4688      	mov	r8, r1
   31976:	4c8e      	ldr	r4, [pc, #568]	; (31bb0 <__aeabi_ddiv+0x664>)
   31978:	e6b6      	b.n	316e8 <__aeabi_ddiv+0x19c>
   3197a:	464b      	mov	r3, r9
   3197c:	431a      	orrs	r2, r3
   3197e:	0312      	lsls	r2, r2, #12
   31980:	0b12      	lsrs	r2, r2, #12
   31982:	46bc      	mov	ip, r7
   31984:	4c8a      	ldr	r4, [pc, #552]	; (31bb0 <__aeabi_ddiv+0x664>)
   31986:	e6af      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31988:	0003      	movs	r3, r0
   3198a:	465a      	mov	r2, fp
   3198c:	3b28      	subs	r3, #40	; 0x28
   3198e:	409a      	lsls	r2, r3
   31990:	2300      	movs	r3, #0
   31992:	4691      	mov	r9, r2
   31994:	4698      	mov	r8, r3
   31996:	e657      	b.n	31648 <__aeabi_ddiv+0xfc>
   31998:	4658      	mov	r0, fp
   3199a:	f000 ff0d 	bl	327b8 <__clzsi2>
   3199e:	3020      	adds	r0, #32
   319a0:	e640      	b.n	31624 <__aeabi_ddiv+0xd8>
   319a2:	0003      	movs	r3, r0
   319a4:	4652      	mov	r2, sl
   319a6:	3b28      	subs	r3, #40	; 0x28
   319a8:	409a      	lsls	r2, r3
   319aa:	2100      	movs	r1, #0
   319ac:	4693      	mov	fp, r2
   319ae:	e677      	b.n	316a0 <__aeabi_ddiv+0x154>
   319b0:	f000 ff02 	bl	327b8 <__clzsi2>
   319b4:	3020      	adds	r0, #32
   319b6:	e65f      	b.n	31678 <__aeabi_ddiv+0x12c>
   319b8:	4588      	cmp	r8, r1
   319ba:	d200      	bcs.n	319be <__aeabi_ddiv+0x472>
   319bc:	e6c7      	b.n	3174e <__aeabi_ddiv+0x202>
   319be:	464b      	mov	r3, r9
   319c0:	07de      	lsls	r6, r3, #31
   319c2:	085d      	lsrs	r5, r3, #1
   319c4:	4643      	mov	r3, r8
   319c6:	085b      	lsrs	r3, r3, #1
   319c8:	431e      	orrs	r6, r3
   319ca:	4643      	mov	r3, r8
   319cc:	07db      	lsls	r3, r3, #31
   319ce:	469a      	mov	sl, r3
   319d0:	e6c2      	b.n	31758 <__aeabi_ddiv+0x20c>
   319d2:	2500      	movs	r5, #0
   319d4:	4592      	cmp	sl, r2
   319d6:	d300      	bcc.n	319da <__aeabi_ddiv+0x48e>
   319d8:	e733      	b.n	31842 <__aeabi_ddiv+0x2f6>
   319da:	9e03      	ldr	r6, [sp, #12]
   319dc:	4659      	mov	r1, fp
   319de:	46b4      	mov	ip, r6
   319e0:	44e2      	add	sl, ip
   319e2:	45b2      	cmp	sl, r6
   319e4:	41ad      	sbcs	r5, r5
   319e6:	426d      	negs	r5, r5
   319e8:	4445      	add	r5, r8
   319ea:	18eb      	adds	r3, r5, r3
   319ec:	3901      	subs	r1, #1
   319ee:	4598      	cmp	r8, r3
   319f0:	d207      	bcs.n	31a02 <__aeabi_ddiv+0x4b6>
   319f2:	4298      	cmp	r0, r3
   319f4:	d900      	bls.n	319f8 <__aeabi_ddiv+0x4ac>
   319f6:	e07f      	b.n	31af8 <__aeabi_ddiv+0x5ac>
   319f8:	d100      	bne.n	319fc <__aeabi_ddiv+0x4b0>
   319fa:	e0bc      	b.n	31b76 <__aeabi_ddiv+0x62a>
   319fc:	1a1d      	subs	r5, r3, r0
   319fe:	468b      	mov	fp, r1
   31a00:	e71f      	b.n	31842 <__aeabi_ddiv+0x2f6>
   31a02:	4598      	cmp	r8, r3
   31a04:	d1fa      	bne.n	319fc <__aeabi_ddiv+0x4b0>
   31a06:	9d03      	ldr	r5, [sp, #12]
   31a08:	4555      	cmp	r5, sl
   31a0a:	d9f2      	bls.n	319f2 <__aeabi_ddiv+0x4a6>
   31a0c:	4643      	mov	r3, r8
   31a0e:	468b      	mov	fp, r1
   31a10:	1a1d      	subs	r5, r3, r0
   31a12:	e716      	b.n	31842 <__aeabi_ddiv+0x2f6>
   31a14:	469b      	mov	fp, r3
   31a16:	e6ca      	b.n	317ae <__aeabi_ddiv+0x262>
   31a18:	0015      	movs	r5, r2
   31a1a:	e6e7      	b.n	317ec <__aeabi_ddiv+0x2a0>
   31a1c:	465a      	mov	r2, fp
   31a1e:	08c9      	lsrs	r1, r1, #3
   31a20:	0752      	lsls	r2, r2, #29
   31a22:	430a      	orrs	r2, r1
   31a24:	055b      	lsls	r3, r3, #21
   31a26:	4690      	mov	r8, r2
   31a28:	0d5c      	lsrs	r4, r3, #21
   31a2a:	465a      	mov	r2, fp
   31a2c:	2301      	movs	r3, #1
   31a2e:	9902      	ldr	r1, [sp, #8]
   31a30:	0252      	lsls	r2, r2, #9
   31a32:	4019      	ands	r1, r3
   31a34:	0b12      	lsrs	r2, r2, #12
   31a36:	468c      	mov	ip, r1
   31a38:	e656      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31a3a:	2b00      	cmp	r3, #0
   31a3c:	d100      	bne.n	31a40 <__aeabi_ddiv+0x4f4>
   31a3e:	e76f      	b.n	31920 <__aeabi_ddiv+0x3d4>
   31a40:	4446      	add	r6, r8
   31a42:	1e4a      	subs	r2, r1, #1
   31a44:	45b0      	cmp	r8, r6
   31a46:	d929      	bls.n	31a9c <__aeabi_ddiv+0x550>
   31a48:	0011      	movs	r1, r2
   31a4a:	4286      	cmp	r6, r0
   31a4c:	d000      	beq.n	31a50 <__aeabi_ddiv+0x504>
   31a4e:	e765      	b.n	3191c <__aeabi_ddiv+0x3d0>
   31a50:	9a03      	ldr	r2, [sp, #12]
   31a52:	4293      	cmp	r3, r2
   31a54:	d000      	beq.n	31a58 <__aeabi_ddiv+0x50c>
   31a56:	e761      	b.n	3191c <__aeabi_ddiv+0x3d0>
   31a58:	e762      	b.n	31920 <__aeabi_ddiv+0x3d4>
   31a5a:	2101      	movs	r1, #1
   31a5c:	4249      	negs	r1, r1
   31a5e:	2001      	movs	r0, #1
   31a60:	1ac2      	subs	r2, r0, r3
   31a62:	2a38      	cmp	r2, #56	; 0x38
   31a64:	dd21      	ble.n	31aaa <__aeabi_ddiv+0x55e>
   31a66:	9b02      	ldr	r3, [sp, #8]
   31a68:	4003      	ands	r3, r0
   31a6a:	469c      	mov	ip, r3
   31a6c:	e638      	b.n	316e0 <__aeabi_ddiv+0x194>
   31a6e:	220f      	movs	r2, #15
   31a70:	400a      	ands	r2, r1
   31a72:	2a04      	cmp	r2, #4
   31a74:	d100      	bne.n	31a78 <__aeabi_ddiv+0x52c>
   31a76:	e75b      	b.n	31930 <__aeabi_ddiv+0x3e4>
   31a78:	000a      	movs	r2, r1
   31a7a:	1d11      	adds	r1, r2, #4
   31a7c:	4291      	cmp	r1, r2
   31a7e:	4192      	sbcs	r2, r2
   31a80:	4252      	negs	r2, r2
   31a82:	4493      	add	fp, r2
   31a84:	e754      	b.n	31930 <__aeabi_ddiv+0x3e4>
   31a86:	4b47      	ldr	r3, [pc, #284]	; (31ba4 <__aeabi_ddiv+0x658>)
   31a88:	18e3      	adds	r3, r4, r3
   31a8a:	2b00      	cmp	r3, #0
   31a8c:	dde5      	ble.n	31a5a <__aeabi_ddiv+0x50e>
   31a8e:	2201      	movs	r2, #1
   31a90:	4252      	negs	r2, r2
   31a92:	e7f2      	b.n	31a7a <__aeabi_ddiv+0x52e>
   31a94:	001d      	movs	r5, r3
   31a96:	e6fa      	b.n	3188e <__aeabi_ddiv+0x342>
   31a98:	469a      	mov	sl, r3
   31a9a:	e71c      	b.n	318d6 <__aeabi_ddiv+0x38a>
   31a9c:	42b0      	cmp	r0, r6
   31a9e:	d839      	bhi.n	31b14 <__aeabi_ddiv+0x5c8>
   31aa0:	d06e      	beq.n	31b80 <__aeabi_ddiv+0x634>
   31aa2:	0011      	movs	r1, r2
   31aa4:	e73a      	b.n	3191c <__aeabi_ddiv+0x3d0>
   31aa6:	9302      	str	r3, [sp, #8]
   31aa8:	e73a      	b.n	31920 <__aeabi_ddiv+0x3d4>
   31aaa:	2a1f      	cmp	r2, #31
   31aac:	dc3c      	bgt.n	31b28 <__aeabi_ddiv+0x5dc>
   31aae:	2320      	movs	r3, #32
   31ab0:	1a9b      	subs	r3, r3, r2
   31ab2:	000c      	movs	r4, r1
   31ab4:	4658      	mov	r0, fp
   31ab6:	4099      	lsls	r1, r3
   31ab8:	4098      	lsls	r0, r3
   31aba:	1e4b      	subs	r3, r1, #1
   31abc:	4199      	sbcs	r1, r3
   31abe:	465b      	mov	r3, fp
   31ac0:	40d4      	lsrs	r4, r2
   31ac2:	40d3      	lsrs	r3, r2
   31ac4:	4320      	orrs	r0, r4
   31ac6:	4308      	orrs	r0, r1
   31ac8:	001a      	movs	r2, r3
   31aca:	0743      	lsls	r3, r0, #29
   31acc:	d009      	beq.n	31ae2 <__aeabi_ddiv+0x596>
   31ace:	230f      	movs	r3, #15
   31ad0:	4003      	ands	r3, r0
   31ad2:	2b04      	cmp	r3, #4
   31ad4:	d005      	beq.n	31ae2 <__aeabi_ddiv+0x596>
   31ad6:	0001      	movs	r1, r0
   31ad8:	1d08      	adds	r0, r1, #4
   31ada:	4288      	cmp	r0, r1
   31adc:	419b      	sbcs	r3, r3
   31ade:	425b      	negs	r3, r3
   31ae0:	18d2      	adds	r2, r2, r3
   31ae2:	0213      	lsls	r3, r2, #8
   31ae4:	d53a      	bpl.n	31b5c <__aeabi_ddiv+0x610>
   31ae6:	2301      	movs	r3, #1
   31ae8:	9a02      	ldr	r2, [sp, #8]
   31aea:	2401      	movs	r4, #1
   31aec:	401a      	ands	r2, r3
   31aee:	2300      	movs	r3, #0
   31af0:	4694      	mov	ip, r2
   31af2:	4698      	mov	r8, r3
   31af4:	2200      	movs	r2, #0
   31af6:	e5f7      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31af8:	2102      	movs	r1, #2
   31afa:	4249      	negs	r1, r1
   31afc:	468c      	mov	ip, r1
   31afe:	9d03      	ldr	r5, [sp, #12]
   31b00:	44e3      	add	fp, ip
   31b02:	46ac      	mov	ip, r5
   31b04:	44e2      	add	sl, ip
   31b06:	45aa      	cmp	sl, r5
   31b08:	41ad      	sbcs	r5, r5
   31b0a:	426d      	negs	r5, r5
   31b0c:	4445      	add	r5, r8
   31b0e:	18ed      	adds	r5, r5, r3
   31b10:	1a2d      	subs	r5, r5, r0
   31b12:	e696      	b.n	31842 <__aeabi_ddiv+0x2f6>
   31b14:	1e8a      	subs	r2, r1, #2
   31b16:	9903      	ldr	r1, [sp, #12]
   31b18:	004d      	lsls	r5, r1, #1
   31b1a:	428d      	cmp	r5, r1
   31b1c:	4189      	sbcs	r1, r1
   31b1e:	4249      	negs	r1, r1
   31b20:	4441      	add	r1, r8
   31b22:	1876      	adds	r6, r6, r1
   31b24:	9503      	str	r5, [sp, #12]
   31b26:	e78f      	b.n	31a48 <__aeabi_ddiv+0x4fc>
   31b28:	201f      	movs	r0, #31
   31b2a:	4240      	negs	r0, r0
   31b2c:	1ac3      	subs	r3, r0, r3
   31b2e:	4658      	mov	r0, fp
   31b30:	40d8      	lsrs	r0, r3
   31b32:	0003      	movs	r3, r0
   31b34:	2a20      	cmp	r2, #32
   31b36:	d028      	beq.n	31b8a <__aeabi_ddiv+0x63e>
   31b38:	2040      	movs	r0, #64	; 0x40
   31b3a:	465d      	mov	r5, fp
   31b3c:	1a82      	subs	r2, r0, r2
   31b3e:	4095      	lsls	r5, r2
   31b40:	4329      	orrs	r1, r5
   31b42:	1e4a      	subs	r2, r1, #1
   31b44:	4191      	sbcs	r1, r2
   31b46:	4319      	orrs	r1, r3
   31b48:	2307      	movs	r3, #7
   31b4a:	2200      	movs	r2, #0
   31b4c:	400b      	ands	r3, r1
   31b4e:	d009      	beq.n	31b64 <__aeabi_ddiv+0x618>
   31b50:	230f      	movs	r3, #15
   31b52:	2200      	movs	r2, #0
   31b54:	400b      	ands	r3, r1
   31b56:	0008      	movs	r0, r1
   31b58:	2b04      	cmp	r3, #4
   31b5a:	d1bd      	bne.n	31ad8 <__aeabi_ddiv+0x58c>
   31b5c:	0001      	movs	r1, r0
   31b5e:	0753      	lsls	r3, r2, #29
   31b60:	0252      	lsls	r2, r2, #9
   31b62:	0b12      	lsrs	r2, r2, #12
   31b64:	08c9      	lsrs	r1, r1, #3
   31b66:	4319      	orrs	r1, r3
   31b68:	2301      	movs	r3, #1
   31b6a:	4688      	mov	r8, r1
   31b6c:	9902      	ldr	r1, [sp, #8]
   31b6e:	2400      	movs	r4, #0
   31b70:	4019      	ands	r1, r3
   31b72:	468c      	mov	ip, r1
   31b74:	e5b8      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31b76:	4552      	cmp	r2, sl
   31b78:	d8be      	bhi.n	31af8 <__aeabi_ddiv+0x5ac>
   31b7a:	468b      	mov	fp, r1
   31b7c:	2500      	movs	r5, #0
   31b7e:	e660      	b.n	31842 <__aeabi_ddiv+0x2f6>
   31b80:	9d03      	ldr	r5, [sp, #12]
   31b82:	429d      	cmp	r5, r3
   31b84:	d3c6      	bcc.n	31b14 <__aeabi_ddiv+0x5c8>
   31b86:	0011      	movs	r1, r2
   31b88:	e762      	b.n	31a50 <__aeabi_ddiv+0x504>
   31b8a:	2500      	movs	r5, #0
   31b8c:	e7d8      	b.n	31b40 <__aeabi_ddiv+0x5f4>
   31b8e:	2280      	movs	r2, #128	; 0x80
   31b90:	465b      	mov	r3, fp
   31b92:	0312      	lsls	r2, r2, #12
   31b94:	431a      	orrs	r2, r3
   31b96:	9b01      	ldr	r3, [sp, #4]
   31b98:	0312      	lsls	r2, r2, #12
   31b9a:	0b12      	lsrs	r2, r2, #12
   31b9c:	469c      	mov	ip, r3
   31b9e:	4688      	mov	r8, r1
   31ba0:	4c03      	ldr	r4, [pc, #12]	; (31bb0 <__aeabi_ddiv+0x664>)
   31ba2:	e5a1      	b.n	316e8 <__aeabi_ddiv+0x19c>
   31ba4:	000003ff 	.word	0x000003ff
   31ba8:	feffffff 	.word	0xfeffffff
   31bac:	000007fe 	.word	0x000007fe
   31bb0:	000007ff 	.word	0x000007ff

00031bb4 <__aeabi_dmul>:
   31bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   31bb6:	4657      	mov	r7, sl
   31bb8:	4645      	mov	r5, r8
   31bba:	46de      	mov	lr, fp
   31bbc:	464e      	mov	r6, r9
   31bbe:	b5e0      	push	{r5, r6, r7, lr}
   31bc0:	030c      	lsls	r4, r1, #12
   31bc2:	4698      	mov	r8, r3
   31bc4:	004e      	lsls	r6, r1, #1
   31bc6:	0b23      	lsrs	r3, r4, #12
   31bc8:	b087      	sub	sp, #28
   31bca:	0007      	movs	r7, r0
   31bcc:	4692      	mov	sl, r2
   31bce:	469b      	mov	fp, r3
   31bd0:	0d76      	lsrs	r6, r6, #21
   31bd2:	0fcd      	lsrs	r5, r1, #31
   31bd4:	2e00      	cmp	r6, #0
   31bd6:	d06b      	beq.n	31cb0 <__aeabi_dmul+0xfc>
   31bd8:	4b6d      	ldr	r3, [pc, #436]	; (31d90 <__aeabi_dmul+0x1dc>)
   31bda:	429e      	cmp	r6, r3
   31bdc:	d035      	beq.n	31c4a <__aeabi_dmul+0x96>
   31bde:	2480      	movs	r4, #128	; 0x80
   31be0:	465b      	mov	r3, fp
   31be2:	0f42      	lsrs	r2, r0, #29
   31be4:	0424      	lsls	r4, r4, #16
   31be6:	00db      	lsls	r3, r3, #3
   31be8:	4314      	orrs	r4, r2
   31bea:	431c      	orrs	r4, r3
   31bec:	00c3      	lsls	r3, r0, #3
   31bee:	4699      	mov	r9, r3
   31bf0:	4b68      	ldr	r3, [pc, #416]	; (31d94 <__aeabi_dmul+0x1e0>)
   31bf2:	46a3      	mov	fp, r4
   31bf4:	469c      	mov	ip, r3
   31bf6:	2300      	movs	r3, #0
   31bf8:	2700      	movs	r7, #0
   31bfa:	4466      	add	r6, ip
   31bfc:	9302      	str	r3, [sp, #8]
   31bfe:	4643      	mov	r3, r8
   31c00:	031c      	lsls	r4, r3, #12
   31c02:	005a      	lsls	r2, r3, #1
   31c04:	0fdb      	lsrs	r3, r3, #31
   31c06:	4650      	mov	r0, sl
   31c08:	0b24      	lsrs	r4, r4, #12
   31c0a:	0d52      	lsrs	r2, r2, #21
   31c0c:	4698      	mov	r8, r3
   31c0e:	d100      	bne.n	31c12 <__aeabi_dmul+0x5e>
   31c10:	e076      	b.n	31d00 <__aeabi_dmul+0x14c>
   31c12:	4b5f      	ldr	r3, [pc, #380]	; (31d90 <__aeabi_dmul+0x1dc>)
   31c14:	429a      	cmp	r2, r3
   31c16:	d06d      	beq.n	31cf4 <__aeabi_dmul+0x140>
   31c18:	2380      	movs	r3, #128	; 0x80
   31c1a:	0f41      	lsrs	r1, r0, #29
   31c1c:	041b      	lsls	r3, r3, #16
   31c1e:	430b      	orrs	r3, r1
   31c20:	495c      	ldr	r1, [pc, #368]	; (31d94 <__aeabi_dmul+0x1e0>)
   31c22:	00e4      	lsls	r4, r4, #3
   31c24:	468c      	mov	ip, r1
   31c26:	431c      	orrs	r4, r3
   31c28:	00c3      	lsls	r3, r0, #3
   31c2a:	2000      	movs	r0, #0
   31c2c:	4462      	add	r2, ip
   31c2e:	4641      	mov	r1, r8
   31c30:	18b6      	adds	r6, r6, r2
   31c32:	4069      	eors	r1, r5
   31c34:	1c72      	adds	r2, r6, #1
   31c36:	9101      	str	r1, [sp, #4]
   31c38:	4694      	mov	ip, r2
   31c3a:	4307      	orrs	r7, r0
   31c3c:	2f0f      	cmp	r7, #15
   31c3e:	d900      	bls.n	31c42 <__aeabi_dmul+0x8e>
   31c40:	e0b0      	b.n	31da4 <__aeabi_dmul+0x1f0>
   31c42:	4a55      	ldr	r2, [pc, #340]	; (31d98 <__aeabi_dmul+0x1e4>)
   31c44:	00bf      	lsls	r7, r7, #2
   31c46:	59d2      	ldr	r2, [r2, r7]
   31c48:	4697      	mov	pc, r2
   31c4a:	465b      	mov	r3, fp
   31c4c:	4303      	orrs	r3, r0
   31c4e:	4699      	mov	r9, r3
   31c50:	d000      	beq.n	31c54 <__aeabi_dmul+0xa0>
   31c52:	e087      	b.n	31d64 <__aeabi_dmul+0x1b0>
   31c54:	2300      	movs	r3, #0
   31c56:	469b      	mov	fp, r3
   31c58:	3302      	adds	r3, #2
   31c5a:	2708      	movs	r7, #8
   31c5c:	9302      	str	r3, [sp, #8]
   31c5e:	e7ce      	b.n	31bfe <__aeabi_dmul+0x4a>
   31c60:	4642      	mov	r2, r8
   31c62:	9201      	str	r2, [sp, #4]
   31c64:	2802      	cmp	r0, #2
   31c66:	d067      	beq.n	31d38 <__aeabi_dmul+0x184>
   31c68:	2803      	cmp	r0, #3
   31c6a:	d100      	bne.n	31c6e <__aeabi_dmul+0xba>
   31c6c:	e20e      	b.n	3208c <__aeabi_dmul+0x4d8>
   31c6e:	2801      	cmp	r0, #1
   31c70:	d000      	beq.n	31c74 <__aeabi_dmul+0xc0>
   31c72:	e162      	b.n	31f3a <__aeabi_dmul+0x386>
   31c74:	2300      	movs	r3, #0
   31c76:	2400      	movs	r4, #0
   31c78:	2200      	movs	r2, #0
   31c7a:	4699      	mov	r9, r3
   31c7c:	9901      	ldr	r1, [sp, #4]
   31c7e:	4001      	ands	r1, r0
   31c80:	b2cd      	uxtb	r5, r1
   31c82:	2100      	movs	r1, #0
   31c84:	0312      	lsls	r2, r2, #12
   31c86:	0d0b      	lsrs	r3, r1, #20
   31c88:	0b12      	lsrs	r2, r2, #12
   31c8a:	051b      	lsls	r3, r3, #20
   31c8c:	4313      	orrs	r3, r2
   31c8e:	4a43      	ldr	r2, [pc, #268]	; (31d9c <__aeabi_dmul+0x1e8>)
   31c90:	0524      	lsls	r4, r4, #20
   31c92:	4013      	ands	r3, r2
   31c94:	431c      	orrs	r4, r3
   31c96:	0064      	lsls	r4, r4, #1
   31c98:	07ed      	lsls	r5, r5, #31
   31c9a:	0864      	lsrs	r4, r4, #1
   31c9c:	432c      	orrs	r4, r5
   31c9e:	4648      	mov	r0, r9
   31ca0:	0021      	movs	r1, r4
   31ca2:	b007      	add	sp, #28
   31ca4:	bc3c      	pop	{r2, r3, r4, r5}
   31ca6:	4690      	mov	r8, r2
   31ca8:	4699      	mov	r9, r3
   31caa:	46a2      	mov	sl, r4
   31cac:	46ab      	mov	fp, r5
   31cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31cb0:	4303      	orrs	r3, r0
   31cb2:	4699      	mov	r9, r3
   31cb4:	d04f      	beq.n	31d56 <__aeabi_dmul+0x1a2>
   31cb6:	465b      	mov	r3, fp
   31cb8:	2b00      	cmp	r3, #0
   31cba:	d100      	bne.n	31cbe <__aeabi_dmul+0x10a>
   31cbc:	e189      	b.n	31fd2 <__aeabi_dmul+0x41e>
   31cbe:	4658      	mov	r0, fp
   31cc0:	f000 fd7a 	bl	327b8 <__clzsi2>
   31cc4:	0003      	movs	r3, r0
   31cc6:	3b0b      	subs	r3, #11
   31cc8:	2b1c      	cmp	r3, #28
   31cca:	dd00      	ble.n	31cce <__aeabi_dmul+0x11a>
   31ccc:	e17a      	b.n	31fc4 <__aeabi_dmul+0x410>
   31cce:	221d      	movs	r2, #29
   31cd0:	1ad3      	subs	r3, r2, r3
   31cd2:	003a      	movs	r2, r7
   31cd4:	0001      	movs	r1, r0
   31cd6:	465c      	mov	r4, fp
   31cd8:	40da      	lsrs	r2, r3
   31cda:	3908      	subs	r1, #8
   31cdc:	408c      	lsls	r4, r1
   31cde:	0013      	movs	r3, r2
   31ce0:	408f      	lsls	r7, r1
   31ce2:	4323      	orrs	r3, r4
   31ce4:	469b      	mov	fp, r3
   31ce6:	46b9      	mov	r9, r7
   31ce8:	2300      	movs	r3, #0
   31cea:	4e2d      	ldr	r6, [pc, #180]	; (31da0 <__aeabi_dmul+0x1ec>)
   31cec:	2700      	movs	r7, #0
   31cee:	1a36      	subs	r6, r6, r0
   31cf0:	9302      	str	r3, [sp, #8]
   31cf2:	e784      	b.n	31bfe <__aeabi_dmul+0x4a>
   31cf4:	4653      	mov	r3, sl
   31cf6:	4323      	orrs	r3, r4
   31cf8:	d12a      	bne.n	31d50 <__aeabi_dmul+0x19c>
   31cfa:	2400      	movs	r4, #0
   31cfc:	2002      	movs	r0, #2
   31cfe:	e796      	b.n	31c2e <__aeabi_dmul+0x7a>
   31d00:	4653      	mov	r3, sl
   31d02:	4323      	orrs	r3, r4
   31d04:	d020      	beq.n	31d48 <__aeabi_dmul+0x194>
   31d06:	2c00      	cmp	r4, #0
   31d08:	d100      	bne.n	31d0c <__aeabi_dmul+0x158>
   31d0a:	e157      	b.n	31fbc <__aeabi_dmul+0x408>
   31d0c:	0020      	movs	r0, r4
   31d0e:	f000 fd53 	bl	327b8 <__clzsi2>
   31d12:	0003      	movs	r3, r0
   31d14:	3b0b      	subs	r3, #11
   31d16:	2b1c      	cmp	r3, #28
   31d18:	dd00      	ble.n	31d1c <__aeabi_dmul+0x168>
   31d1a:	e149      	b.n	31fb0 <__aeabi_dmul+0x3fc>
   31d1c:	211d      	movs	r1, #29
   31d1e:	1acb      	subs	r3, r1, r3
   31d20:	4651      	mov	r1, sl
   31d22:	0002      	movs	r2, r0
   31d24:	40d9      	lsrs	r1, r3
   31d26:	4653      	mov	r3, sl
   31d28:	3a08      	subs	r2, #8
   31d2a:	4094      	lsls	r4, r2
   31d2c:	4093      	lsls	r3, r2
   31d2e:	430c      	orrs	r4, r1
   31d30:	4a1b      	ldr	r2, [pc, #108]	; (31da0 <__aeabi_dmul+0x1ec>)
   31d32:	1a12      	subs	r2, r2, r0
   31d34:	2000      	movs	r0, #0
   31d36:	e77a      	b.n	31c2e <__aeabi_dmul+0x7a>
   31d38:	2501      	movs	r5, #1
   31d3a:	9b01      	ldr	r3, [sp, #4]
   31d3c:	4c14      	ldr	r4, [pc, #80]	; (31d90 <__aeabi_dmul+0x1dc>)
   31d3e:	401d      	ands	r5, r3
   31d40:	2300      	movs	r3, #0
   31d42:	2200      	movs	r2, #0
   31d44:	4699      	mov	r9, r3
   31d46:	e79c      	b.n	31c82 <__aeabi_dmul+0xce>
   31d48:	2400      	movs	r4, #0
   31d4a:	2200      	movs	r2, #0
   31d4c:	2001      	movs	r0, #1
   31d4e:	e76e      	b.n	31c2e <__aeabi_dmul+0x7a>
   31d50:	4653      	mov	r3, sl
   31d52:	2003      	movs	r0, #3
   31d54:	e76b      	b.n	31c2e <__aeabi_dmul+0x7a>
   31d56:	2300      	movs	r3, #0
   31d58:	469b      	mov	fp, r3
   31d5a:	3301      	adds	r3, #1
   31d5c:	2704      	movs	r7, #4
   31d5e:	2600      	movs	r6, #0
   31d60:	9302      	str	r3, [sp, #8]
   31d62:	e74c      	b.n	31bfe <__aeabi_dmul+0x4a>
   31d64:	2303      	movs	r3, #3
   31d66:	4681      	mov	r9, r0
   31d68:	270c      	movs	r7, #12
   31d6a:	9302      	str	r3, [sp, #8]
   31d6c:	e747      	b.n	31bfe <__aeabi_dmul+0x4a>
   31d6e:	2280      	movs	r2, #128	; 0x80
   31d70:	2300      	movs	r3, #0
   31d72:	2500      	movs	r5, #0
   31d74:	0312      	lsls	r2, r2, #12
   31d76:	4699      	mov	r9, r3
   31d78:	4c05      	ldr	r4, [pc, #20]	; (31d90 <__aeabi_dmul+0x1dc>)
   31d7a:	e782      	b.n	31c82 <__aeabi_dmul+0xce>
   31d7c:	465c      	mov	r4, fp
   31d7e:	464b      	mov	r3, r9
   31d80:	9802      	ldr	r0, [sp, #8]
   31d82:	e76f      	b.n	31c64 <__aeabi_dmul+0xb0>
   31d84:	465c      	mov	r4, fp
   31d86:	464b      	mov	r3, r9
   31d88:	9501      	str	r5, [sp, #4]
   31d8a:	9802      	ldr	r0, [sp, #8]
   31d8c:	e76a      	b.n	31c64 <__aeabi_dmul+0xb0>
   31d8e:	46c0      	nop			; (mov r8, r8)
   31d90:	000007ff 	.word	0x000007ff
   31d94:	fffffc01 	.word	0xfffffc01
   31d98:	00038434 	.word	0x00038434
   31d9c:	800fffff 	.word	0x800fffff
   31da0:	fffffc0d 	.word	0xfffffc0d
   31da4:	464a      	mov	r2, r9
   31da6:	4649      	mov	r1, r9
   31da8:	0c17      	lsrs	r7, r2, #16
   31daa:	0c1a      	lsrs	r2, r3, #16
   31dac:	041b      	lsls	r3, r3, #16
   31dae:	0c1b      	lsrs	r3, r3, #16
   31db0:	0408      	lsls	r0, r1, #16
   31db2:	0019      	movs	r1, r3
   31db4:	0c00      	lsrs	r0, r0, #16
   31db6:	4341      	muls	r1, r0
   31db8:	0015      	movs	r5, r2
   31dba:	4688      	mov	r8, r1
   31dbc:	0019      	movs	r1, r3
   31dbe:	437d      	muls	r5, r7
   31dc0:	4379      	muls	r1, r7
   31dc2:	9503      	str	r5, [sp, #12]
   31dc4:	4689      	mov	r9, r1
   31dc6:	0029      	movs	r1, r5
   31dc8:	0015      	movs	r5, r2
   31dca:	4345      	muls	r5, r0
   31dcc:	444d      	add	r5, r9
   31dce:	9502      	str	r5, [sp, #8]
   31dd0:	4645      	mov	r5, r8
   31dd2:	0c2d      	lsrs	r5, r5, #16
   31dd4:	46aa      	mov	sl, r5
   31dd6:	9d02      	ldr	r5, [sp, #8]
   31dd8:	4455      	add	r5, sl
   31dda:	45a9      	cmp	r9, r5
   31ddc:	d906      	bls.n	31dec <__aeabi_dmul+0x238>
   31dde:	468a      	mov	sl, r1
   31de0:	2180      	movs	r1, #128	; 0x80
   31de2:	0249      	lsls	r1, r1, #9
   31de4:	4689      	mov	r9, r1
   31de6:	44ca      	add	sl, r9
   31de8:	4651      	mov	r1, sl
   31dea:	9103      	str	r1, [sp, #12]
   31dec:	0c29      	lsrs	r1, r5, #16
   31dee:	9104      	str	r1, [sp, #16]
   31df0:	4641      	mov	r1, r8
   31df2:	0409      	lsls	r1, r1, #16
   31df4:	042d      	lsls	r5, r5, #16
   31df6:	0c09      	lsrs	r1, r1, #16
   31df8:	4688      	mov	r8, r1
   31dfa:	0029      	movs	r1, r5
   31dfc:	0c25      	lsrs	r5, r4, #16
   31dfe:	0424      	lsls	r4, r4, #16
   31e00:	4441      	add	r1, r8
   31e02:	0c24      	lsrs	r4, r4, #16
   31e04:	9105      	str	r1, [sp, #20]
   31e06:	0021      	movs	r1, r4
   31e08:	4341      	muls	r1, r0
   31e0a:	4688      	mov	r8, r1
   31e0c:	0021      	movs	r1, r4
   31e0e:	4379      	muls	r1, r7
   31e10:	468a      	mov	sl, r1
   31e12:	4368      	muls	r0, r5
   31e14:	4641      	mov	r1, r8
   31e16:	4450      	add	r0, sl
   31e18:	4681      	mov	r9, r0
   31e1a:	0c08      	lsrs	r0, r1, #16
   31e1c:	4448      	add	r0, r9
   31e1e:	436f      	muls	r7, r5
   31e20:	4582      	cmp	sl, r0
   31e22:	d903      	bls.n	31e2c <__aeabi_dmul+0x278>
   31e24:	2180      	movs	r1, #128	; 0x80
   31e26:	0249      	lsls	r1, r1, #9
   31e28:	4689      	mov	r9, r1
   31e2a:	444f      	add	r7, r9
   31e2c:	0c01      	lsrs	r1, r0, #16
   31e2e:	4689      	mov	r9, r1
   31e30:	0039      	movs	r1, r7
   31e32:	4449      	add	r1, r9
   31e34:	9102      	str	r1, [sp, #8]
   31e36:	4641      	mov	r1, r8
   31e38:	040f      	lsls	r7, r1, #16
   31e3a:	9904      	ldr	r1, [sp, #16]
   31e3c:	0c3f      	lsrs	r7, r7, #16
   31e3e:	4688      	mov	r8, r1
   31e40:	0400      	lsls	r0, r0, #16
   31e42:	19c0      	adds	r0, r0, r7
   31e44:	4480      	add	r8, r0
   31e46:	4641      	mov	r1, r8
   31e48:	9104      	str	r1, [sp, #16]
   31e4a:	4659      	mov	r1, fp
   31e4c:	0c0f      	lsrs	r7, r1, #16
   31e4e:	0409      	lsls	r1, r1, #16
   31e50:	0c09      	lsrs	r1, r1, #16
   31e52:	4688      	mov	r8, r1
   31e54:	4359      	muls	r1, r3
   31e56:	468a      	mov	sl, r1
   31e58:	0039      	movs	r1, r7
   31e5a:	4351      	muls	r1, r2
   31e5c:	4689      	mov	r9, r1
   31e5e:	4641      	mov	r1, r8
   31e60:	434a      	muls	r2, r1
   31e62:	4651      	mov	r1, sl
   31e64:	0c09      	lsrs	r1, r1, #16
   31e66:	468b      	mov	fp, r1
   31e68:	437b      	muls	r3, r7
   31e6a:	18d2      	adds	r2, r2, r3
   31e6c:	445a      	add	r2, fp
   31e6e:	4293      	cmp	r3, r2
   31e70:	d903      	bls.n	31e7a <__aeabi_dmul+0x2c6>
   31e72:	2380      	movs	r3, #128	; 0x80
   31e74:	025b      	lsls	r3, r3, #9
   31e76:	469b      	mov	fp, r3
   31e78:	44d9      	add	r9, fp
   31e7a:	4651      	mov	r1, sl
   31e7c:	0409      	lsls	r1, r1, #16
   31e7e:	0c09      	lsrs	r1, r1, #16
   31e80:	468a      	mov	sl, r1
   31e82:	4641      	mov	r1, r8
   31e84:	4361      	muls	r1, r4
   31e86:	437c      	muls	r4, r7
   31e88:	0c13      	lsrs	r3, r2, #16
   31e8a:	0412      	lsls	r2, r2, #16
   31e8c:	444b      	add	r3, r9
   31e8e:	4452      	add	r2, sl
   31e90:	46a1      	mov	r9, r4
   31e92:	468a      	mov	sl, r1
   31e94:	003c      	movs	r4, r7
   31e96:	4641      	mov	r1, r8
   31e98:	436c      	muls	r4, r5
   31e9a:	434d      	muls	r5, r1
   31e9c:	4651      	mov	r1, sl
   31e9e:	444d      	add	r5, r9
   31ea0:	0c0f      	lsrs	r7, r1, #16
   31ea2:	197d      	adds	r5, r7, r5
   31ea4:	45a9      	cmp	r9, r5
   31ea6:	d903      	bls.n	31eb0 <__aeabi_dmul+0x2fc>
   31ea8:	2180      	movs	r1, #128	; 0x80
   31eaa:	0249      	lsls	r1, r1, #9
   31eac:	4688      	mov	r8, r1
   31eae:	4444      	add	r4, r8
   31eb0:	9f04      	ldr	r7, [sp, #16]
   31eb2:	9903      	ldr	r1, [sp, #12]
   31eb4:	46b8      	mov	r8, r7
   31eb6:	4441      	add	r1, r8
   31eb8:	468b      	mov	fp, r1
   31eba:	4583      	cmp	fp, r0
   31ebc:	4180      	sbcs	r0, r0
   31ebe:	4241      	negs	r1, r0
   31ec0:	4688      	mov	r8, r1
   31ec2:	4651      	mov	r1, sl
   31ec4:	0408      	lsls	r0, r1, #16
   31ec6:	042f      	lsls	r7, r5, #16
   31ec8:	0c00      	lsrs	r0, r0, #16
   31eca:	183f      	adds	r7, r7, r0
   31ecc:	4658      	mov	r0, fp
   31ece:	9902      	ldr	r1, [sp, #8]
   31ed0:	1810      	adds	r0, r2, r0
   31ed2:	4689      	mov	r9, r1
   31ed4:	4290      	cmp	r0, r2
   31ed6:	4192      	sbcs	r2, r2
   31ed8:	444f      	add	r7, r9
   31eda:	46ba      	mov	sl, r7
   31edc:	4252      	negs	r2, r2
   31ede:	4699      	mov	r9, r3
   31ee0:	4693      	mov	fp, r2
   31ee2:	44c2      	add	sl, r8
   31ee4:	44d1      	add	r9, sl
   31ee6:	44cb      	add	fp, r9
   31ee8:	428f      	cmp	r7, r1
   31eea:	41bf      	sbcs	r7, r7
   31eec:	45c2      	cmp	sl, r8
   31eee:	4189      	sbcs	r1, r1
   31ef0:	4599      	cmp	r9, r3
   31ef2:	419b      	sbcs	r3, r3
   31ef4:	4593      	cmp	fp, r2
   31ef6:	4192      	sbcs	r2, r2
   31ef8:	427f      	negs	r7, r7
   31efa:	4249      	negs	r1, r1
   31efc:	0c2d      	lsrs	r5, r5, #16
   31efe:	4252      	negs	r2, r2
   31f00:	430f      	orrs	r7, r1
   31f02:	425b      	negs	r3, r3
   31f04:	4313      	orrs	r3, r2
   31f06:	197f      	adds	r7, r7, r5
   31f08:	18ff      	adds	r7, r7, r3
   31f0a:	465b      	mov	r3, fp
   31f0c:	193c      	adds	r4, r7, r4
   31f0e:	0ddb      	lsrs	r3, r3, #23
   31f10:	9a05      	ldr	r2, [sp, #20]
   31f12:	0264      	lsls	r4, r4, #9
   31f14:	431c      	orrs	r4, r3
   31f16:	0243      	lsls	r3, r0, #9
   31f18:	4313      	orrs	r3, r2
   31f1a:	1e5d      	subs	r5, r3, #1
   31f1c:	41ab      	sbcs	r3, r5
   31f1e:	465a      	mov	r2, fp
   31f20:	0dc0      	lsrs	r0, r0, #23
   31f22:	4303      	orrs	r3, r0
   31f24:	0252      	lsls	r2, r2, #9
   31f26:	4313      	orrs	r3, r2
   31f28:	01e2      	lsls	r2, r4, #7
   31f2a:	d556      	bpl.n	31fda <__aeabi_dmul+0x426>
   31f2c:	2001      	movs	r0, #1
   31f2e:	085a      	lsrs	r2, r3, #1
   31f30:	4003      	ands	r3, r0
   31f32:	4313      	orrs	r3, r2
   31f34:	07e2      	lsls	r2, r4, #31
   31f36:	4313      	orrs	r3, r2
   31f38:	0864      	lsrs	r4, r4, #1
   31f3a:	485a      	ldr	r0, [pc, #360]	; (320a4 <__aeabi_dmul+0x4f0>)
   31f3c:	4460      	add	r0, ip
   31f3e:	2800      	cmp	r0, #0
   31f40:	dd4d      	ble.n	31fde <__aeabi_dmul+0x42a>
   31f42:	075a      	lsls	r2, r3, #29
   31f44:	d009      	beq.n	31f5a <__aeabi_dmul+0x3a6>
   31f46:	220f      	movs	r2, #15
   31f48:	401a      	ands	r2, r3
   31f4a:	2a04      	cmp	r2, #4
   31f4c:	d005      	beq.n	31f5a <__aeabi_dmul+0x3a6>
   31f4e:	1d1a      	adds	r2, r3, #4
   31f50:	429a      	cmp	r2, r3
   31f52:	419b      	sbcs	r3, r3
   31f54:	425b      	negs	r3, r3
   31f56:	18e4      	adds	r4, r4, r3
   31f58:	0013      	movs	r3, r2
   31f5a:	01e2      	lsls	r2, r4, #7
   31f5c:	d504      	bpl.n	31f68 <__aeabi_dmul+0x3b4>
   31f5e:	2080      	movs	r0, #128	; 0x80
   31f60:	4a51      	ldr	r2, [pc, #324]	; (320a8 <__aeabi_dmul+0x4f4>)
   31f62:	00c0      	lsls	r0, r0, #3
   31f64:	4014      	ands	r4, r2
   31f66:	4460      	add	r0, ip
   31f68:	4a50      	ldr	r2, [pc, #320]	; (320ac <__aeabi_dmul+0x4f8>)
   31f6a:	4290      	cmp	r0, r2
   31f6c:	dd00      	ble.n	31f70 <__aeabi_dmul+0x3bc>
   31f6e:	e6e3      	b.n	31d38 <__aeabi_dmul+0x184>
   31f70:	2501      	movs	r5, #1
   31f72:	08db      	lsrs	r3, r3, #3
   31f74:	0762      	lsls	r2, r4, #29
   31f76:	431a      	orrs	r2, r3
   31f78:	0264      	lsls	r4, r4, #9
   31f7a:	9b01      	ldr	r3, [sp, #4]
   31f7c:	4691      	mov	r9, r2
   31f7e:	0b22      	lsrs	r2, r4, #12
   31f80:	0544      	lsls	r4, r0, #21
   31f82:	0d64      	lsrs	r4, r4, #21
   31f84:	401d      	ands	r5, r3
   31f86:	e67c      	b.n	31c82 <__aeabi_dmul+0xce>
   31f88:	2280      	movs	r2, #128	; 0x80
   31f8a:	4659      	mov	r1, fp
   31f8c:	0312      	lsls	r2, r2, #12
   31f8e:	4211      	tst	r1, r2
   31f90:	d008      	beq.n	31fa4 <__aeabi_dmul+0x3f0>
   31f92:	4214      	tst	r4, r2
   31f94:	d106      	bne.n	31fa4 <__aeabi_dmul+0x3f0>
   31f96:	4322      	orrs	r2, r4
   31f98:	0312      	lsls	r2, r2, #12
   31f9a:	0b12      	lsrs	r2, r2, #12
   31f9c:	4645      	mov	r5, r8
   31f9e:	4699      	mov	r9, r3
   31fa0:	4c43      	ldr	r4, [pc, #268]	; (320b0 <__aeabi_dmul+0x4fc>)
   31fa2:	e66e      	b.n	31c82 <__aeabi_dmul+0xce>
   31fa4:	465b      	mov	r3, fp
   31fa6:	431a      	orrs	r2, r3
   31fa8:	0312      	lsls	r2, r2, #12
   31faa:	0b12      	lsrs	r2, r2, #12
   31fac:	4c40      	ldr	r4, [pc, #256]	; (320b0 <__aeabi_dmul+0x4fc>)
   31fae:	e668      	b.n	31c82 <__aeabi_dmul+0xce>
   31fb0:	0003      	movs	r3, r0
   31fb2:	4654      	mov	r4, sl
   31fb4:	3b28      	subs	r3, #40	; 0x28
   31fb6:	409c      	lsls	r4, r3
   31fb8:	2300      	movs	r3, #0
   31fba:	e6b9      	b.n	31d30 <__aeabi_dmul+0x17c>
   31fbc:	f000 fbfc 	bl	327b8 <__clzsi2>
   31fc0:	3020      	adds	r0, #32
   31fc2:	e6a6      	b.n	31d12 <__aeabi_dmul+0x15e>
   31fc4:	0003      	movs	r3, r0
   31fc6:	3b28      	subs	r3, #40	; 0x28
   31fc8:	409f      	lsls	r7, r3
   31fca:	2300      	movs	r3, #0
   31fcc:	46bb      	mov	fp, r7
   31fce:	4699      	mov	r9, r3
   31fd0:	e68a      	b.n	31ce8 <__aeabi_dmul+0x134>
   31fd2:	f000 fbf1 	bl	327b8 <__clzsi2>
   31fd6:	3020      	adds	r0, #32
   31fd8:	e674      	b.n	31cc4 <__aeabi_dmul+0x110>
   31fda:	46b4      	mov	ip, r6
   31fdc:	e7ad      	b.n	31f3a <__aeabi_dmul+0x386>
   31fde:	2501      	movs	r5, #1
   31fe0:	1a2a      	subs	r2, r5, r0
   31fe2:	2a38      	cmp	r2, #56	; 0x38
   31fe4:	dd06      	ble.n	31ff4 <__aeabi_dmul+0x440>
   31fe6:	9b01      	ldr	r3, [sp, #4]
   31fe8:	2400      	movs	r4, #0
   31fea:	401d      	ands	r5, r3
   31fec:	2300      	movs	r3, #0
   31fee:	2200      	movs	r2, #0
   31ff0:	4699      	mov	r9, r3
   31ff2:	e646      	b.n	31c82 <__aeabi_dmul+0xce>
   31ff4:	2a1f      	cmp	r2, #31
   31ff6:	dc21      	bgt.n	3203c <__aeabi_dmul+0x488>
   31ff8:	2520      	movs	r5, #32
   31ffa:	0020      	movs	r0, r4
   31ffc:	1aad      	subs	r5, r5, r2
   31ffe:	001e      	movs	r6, r3
   32000:	40ab      	lsls	r3, r5
   32002:	40a8      	lsls	r0, r5
   32004:	40d6      	lsrs	r6, r2
   32006:	1e5d      	subs	r5, r3, #1
   32008:	41ab      	sbcs	r3, r5
   3200a:	4330      	orrs	r0, r6
   3200c:	4318      	orrs	r0, r3
   3200e:	40d4      	lsrs	r4, r2
   32010:	0743      	lsls	r3, r0, #29
   32012:	d009      	beq.n	32028 <__aeabi_dmul+0x474>
   32014:	230f      	movs	r3, #15
   32016:	4003      	ands	r3, r0
   32018:	2b04      	cmp	r3, #4
   3201a:	d005      	beq.n	32028 <__aeabi_dmul+0x474>
   3201c:	0003      	movs	r3, r0
   3201e:	1d18      	adds	r0, r3, #4
   32020:	4298      	cmp	r0, r3
   32022:	419b      	sbcs	r3, r3
   32024:	425b      	negs	r3, r3
   32026:	18e4      	adds	r4, r4, r3
   32028:	0223      	lsls	r3, r4, #8
   3202a:	d521      	bpl.n	32070 <__aeabi_dmul+0x4bc>
   3202c:	2501      	movs	r5, #1
   3202e:	9b01      	ldr	r3, [sp, #4]
   32030:	2401      	movs	r4, #1
   32032:	401d      	ands	r5, r3
   32034:	2300      	movs	r3, #0
   32036:	2200      	movs	r2, #0
   32038:	4699      	mov	r9, r3
   3203a:	e622      	b.n	31c82 <__aeabi_dmul+0xce>
   3203c:	251f      	movs	r5, #31
   3203e:	0021      	movs	r1, r4
   32040:	426d      	negs	r5, r5
   32042:	1a28      	subs	r0, r5, r0
   32044:	40c1      	lsrs	r1, r0
   32046:	0008      	movs	r0, r1
   32048:	2a20      	cmp	r2, #32
   3204a:	d01d      	beq.n	32088 <__aeabi_dmul+0x4d4>
   3204c:	355f      	adds	r5, #95	; 0x5f
   3204e:	1aaa      	subs	r2, r5, r2
   32050:	4094      	lsls	r4, r2
   32052:	4323      	orrs	r3, r4
   32054:	1e5c      	subs	r4, r3, #1
   32056:	41a3      	sbcs	r3, r4
   32058:	2507      	movs	r5, #7
   3205a:	4303      	orrs	r3, r0
   3205c:	401d      	ands	r5, r3
   3205e:	2200      	movs	r2, #0
   32060:	2d00      	cmp	r5, #0
   32062:	d009      	beq.n	32078 <__aeabi_dmul+0x4c4>
   32064:	220f      	movs	r2, #15
   32066:	2400      	movs	r4, #0
   32068:	401a      	ands	r2, r3
   3206a:	0018      	movs	r0, r3
   3206c:	2a04      	cmp	r2, #4
   3206e:	d1d6      	bne.n	3201e <__aeabi_dmul+0x46a>
   32070:	0003      	movs	r3, r0
   32072:	0765      	lsls	r5, r4, #29
   32074:	0264      	lsls	r4, r4, #9
   32076:	0b22      	lsrs	r2, r4, #12
   32078:	08db      	lsrs	r3, r3, #3
   3207a:	432b      	orrs	r3, r5
   3207c:	2501      	movs	r5, #1
   3207e:	4699      	mov	r9, r3
   32080:	9b01      	ldr	r3, [sp, #4]
   32082:	2400      	movs	r4, #0
   32084:	401d      	ands	r5, r3
   32086:	e5fc      	b.n	31c82 <__aeabi_dmul+0xce>
   32088:	2400      	movs	r4, #0
   3208a:	e7e2      	b.n	32052 <__aeabi_dmul+0x49e>
   3208c:	2280      	movs	r2, #128	; 0x80
   3208e:	2501      	movs	r5, #1
   32090:	0312      	lsls	r2, r2, #12
   32092:	4322      	orrs	r2, r4
   32094:	9901      	ldr	r1, [sp, #4]
   32096:	0312      	lsls	r2, r2, #12
   32098:	0b12      	lsrs	r2, r2, #12
   3209a:	400d      	ands	r5, r1
   3209c:	4699      	mov	r9, r3
   3209e:	4c04      	ldr	r4, [pc, #16]	; (320b0 <__aeabi_dmul+0x4fc>)
   320a0:	e5ef      	b.n	31c82 <__aeabi_dmul+0xce>
   320a2:	46c0      	nop			; (mov r8, r8)
   320a4:	000003ff 	.word	0x000003ff
   320a8:	feffffff 	.word	0xfeffffff
   320ac:	000007fe 	.word	0x000007fe
   320b0:	000007ff 	.word	0x000007ff

000320b4 <__aeabi_dsub>:
   320b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   320b6:	4646      	mov	r6, r8
   320b8:	46d6      	mov	lr, sl
   320ba:	464f      	mov	r7, r9
   320bc:	030c      	lsls	r4, r1, #12
   320be:	b5c0      	push	{r6, r7, lr}
   320c0:	0fcd      	lsrs	r5, r1, #31
   320c2:	004e      	lsls	r6, r1, #1
   320c4:	0a61      	lsrs	r1, r4, #9
   320c6:	0f44      	lsrs	r4, r0, #29
   320c8:	430c      	orrs	r4, r1
   320ca:	00c1      	lsls	r1, r0, #3
   320cc:	0058      	lsls	r0, r3, #1
   320ce:	0d40      	lsrs	r0, r0, #21
   320d0:	4684      	mov	ip, r0
   320d2:	468a      	mov	sl, r1
   320d4:	000f      	movs	r7, r1
   320d6:	0319      	lsls	r1, r3, #12
   320d8:	0f50      	lsrs	r0, r2, #29
   320da:	0a49      	lsrs	r1, r1, #9
   320dc:	4301      	orrs	r1, r0
   320de:	48c6      	ldr	r0, [pc, #792]	; (323f8 <__aeabi_dsub+0x344>)
   320e0:	0d76      	lsrs	r6, r6, #21
   320e2:	46a8      	mov	r8, r5
   320e4:	0fdb      	lsrs	r3, r3, #31
   320e6:	00d2      	lsls	r2, r2, #3
   320e8:	4584      	cmp	ip, r0
   320ea:	d100      	bne.n	320ee <__aeabi_dsub+0x3a>
   320ec:	e0d8      	b.n	322a0 <__aeabi_dsub+0x1ec>
   320ee:	2001      	movs	r0, #1
   320f0:	4043      	eors	r3, r0
   320f2:	42ab      	cmp	r3, r5
   320f4:	d100      	bne.n	320f8 <__aeabi_dsub+0x44>
   320f6:	e0a6      	b.n	32246 <__aeabi_dsub+0x192>
   320f8:	4660      	mov	r0, ip
   320fa:	1a35      	subs	r5, r6, r0
   320fc:	2d00      	cmp	r5, #0
   320fe:	dc00      	bgt.n	32102 <__aeabi_dsub+0x4e>
   32100:	e105      	b.n	3230e <__aeabi_dsub+0x25a>
   32102:	2800      	cmp	r0, #0
   32104:	d110      	bne.n	32128 <__aeabi_dsub+0x74>
   32106:	000b      	movs	r3, r1
   32108:	4313      	orrs	r3, r2
   3210a:	d100      	bne.n	3210e <__aeabi_dsub+0x5a>
   3210c:	e0d7      	b.n	322be <__aeabi_dsub+0x20a>
   3210e:	1e6b      	subs	r3, r5, #1
   32110:	2b00      	cmp	r3, #0
   32112:	d000      	beq.n	32116 <__aeabi_dsub+0x62>
   32114:	e14b      	b.n	323ae <__aeabi_dsub+0x2fa>
   32116:	4653      	mov	r3, sl
   32118:	1a9f      	subs	r7, r3, r2
   3211a:	45ba      	cmp	sl, r7
   3211c:	4180      	sbcs	r0, r0
   3211e:	1a64      	subs	r4, r4, r1
   32120:	4240      	negs	r0, r0
   32122:	1a24      	subs	r4, r4, r0
   32124:	2601      	movs	r6, #1
   32126:	e01e      	b.n	32166 <__aeabi_dsub+0xb2>
   32128:	4bb3      	ldr	r3, [pc, #716]	; (323f8 <__aeabi_dsub+0x344>)
   3212a:	429e      	cmp	r6, r3
   3212c:	d048      	beq.n	321c0 <__aeabi_dsub+0x10c>
   3212e:	2380      	movs	r3, #128	; 0x80
   32130:	041b      	lsls	r3, r3, #16
   32132:	4319      	orrs	r1, r3
   32134:	2d38      	cmp	r5, #56	; 0x38
   32136:	dd00      	ble.n	3213a <__aeabi_dsub+0x86>
   32138:	e119      	b.n	3236e <__aeabi_dsub+0x2ba>
   3213a:	2d1f      	cmp	r5, #31
   3213c:	dd00      	ble.n	32140 <__aeabi_dsub+0x8c>
   3213e:	e14c      	b.n	323da <__aeabi_dsub+0x326>
   32140:	2320      	movs	r3, #32
   32142:	000f      	movs	r7, r1
   32144:	1b5b      	subs	r3, r3, r5
   32146:	0010      	movs	r0, r2
   32148:	409a      	lsls	r2, r3
   3214a:	409f      	lsls	r7, r3
   3214c:	40e8      	lsrs	r0, r5
   3214e:	1e53      	subs	r3, r2, #1
   32150:	419a      	sbcs	r2, r3
   32152:	40e9      	lsrs	r1, r5
   32154:	4307      	orrs	r7, r0
   32156:	4317      	orrs	r7, r2
   32158:	4653      	mov	r3, sl
   3215a:	1bdf      	subs	r7, r3, r7
   3215c:	1a61      	subs	r1, r4, r1
   3215e:	45ba      	cmp	sl, r7
   32160:	41a4      	sbcs	r4, r4
   32162:	4264      	negs	r4, r4
   32164:	1b0c      	subs	r4, r1, r4
   32166:	0223      	lsls	r3, r4, #8
   32168:	d400      	bmi.n	3216c <__aeabi_dsub+0xb8>
   3216a:	e0c5      	b.n	322f8 <__aeabi_dsub+0x244>
   3216c:	0264      	lsls	r4, r4, #9
   3216e:	0a65      	lsrs	r5, r4, #9
   32170:	2d00      	cmp	r5, #0
   32172:	d100      	bne.n	32176 <__aeabi_dsub+0xc2>
   32174:	e0f6      	b.n	32364 <__aeabi_dsub+0x2b0>
   32176:	0028      	movs	r0, r5
   32178:	f000 fb1e 	bl	327b8 <__clzsi2>
   3217c:	0003      	movs	r3, r0
   3217e:	3b08      	subs	r3, #8
   32180:	2b1f      	cmp	r3, #31
   32182:	dd00      	ble.n	32186 <__aeabi_dsub+0xd2>
   32184:	e0e9      	b.n	3235a <__aeabi_dsub+0x2a6>
   32186:	2220      	movs	r2, #32
   32188:	003c      	movs	r4, r7
   3218a:	1ad2      	subs	r2, r2, r3
   3218c:	409d      	lsls	r5, r3
   3218e:	40d4      	lsrs	r4, r2
   32190:	409f      	lsls	r7, r3
   32192:	4325      	orrs	r5, r4
   32194:	429e      	cmp	r6, r3
   32196:	dd00      	ble.n	3219a <__aeabi_dsub+0xe6>
   32198:	e0db      	b.n	32352 <__aeabi_dsub+0x29e>
   3219a:	1b9e      	subs	r6, r3, r6
   3219c:	1c73      	adds	r3, r6, #1
   3219e:	2b1f      	cmp	r3, #31
   321a0:	dd00      	ble.n	321a4 <__aeabi_dsub+0xf0>
   321a2:	e10a      	b.n	323ba <__aeabi_dsub+0x306>
   321a4:	2220      	movs	r2, #32
   321a6:	0038      	movs	r0, r7
   321a8:	1ad2      	subs	r2, r2, r3
   321aa:	0029      	movs	r1, r5
   321ac:	4097      	lsls	r7, r2
   321ae:	002c      	movs	r4, r5
   321b0:	4091      	lsls	r1, r2
   321b2:	40d8      	lsrs	r0, r3
   321b4:	1e7a      	subs	r2, r7, #1
   321b6:	4197      	sbcs	r7, r2
   321b8:	40dc      	lsrs	r4, r3
   321ba:	2600      	movs	r6, #0
   321bc:	4301      	orrs	r1, r0
   321be:	430f      	orrs	r7, r1
   321c0:	077b      	lsls	r3, r7, #29
   321c2:	d009      	beq.n	321d8 <__aeabi_dsub+0x124>
   321c4:	230f      	movs	r3, #15
   321c6:	403b      	ands	r3, r7
   321c8:	2b04      	cmp	r3, #4
   321ca:	d005      	beq.n	321d8 <__aeabi_dsub+0x124>
   321cc:	1d3b      	adds	r3, r7, #4
   321ce:	42bb      	cmp	r3, r7
   321d0:	41bf      	sbcs	r7, r7
   321d2:	427f      	negs	r7, r7
   321d4:	19e4      	adds	r4, r4, r7
   321d6:	001f      	movs	r7, r3
   321d8:	0223      	lsls	r3, r4, #8
   321da:	d525      	bpl.n	32228 <__aeabi_dsub+0x174>
   321dc:	4b86      	ldr	r3, [pc, #536]	; (323f8 <__aeabi_dsub+0x344>)
   321de:	3601      	adds	r6, #1
   321e0:	429e      	cmp	r6, r3
   321e2:	d100      	bne.n	321e6 <__aeabi_dsub+0x132>
   321e4:	e0af      	b.n	32346 <__aeabi_dsub+0x292>
   321e6:	4b85      	ldr	r3, [pc, #532]	; (323fc <__aeabi_dsub+0x348>)
   321e8:	2501      	movs	r5, #1
   321ea:	401c      	ands	r4, r3
   321ec:	4643      	mov	r3, r8
   321ee:	0762      	lsls	r2, r4, #29
   321f0:	08ff      	lsrs	r7, r7, #3
   321f2:	0264      	lsls	r4, r4, #9
   321f4:	0576      	lsls	r6, r6, #21
   321f6:	4317      	orrs	r7, r2
   321f8:	0b24      	lsrs	r4, r4, #12
   321fa:	0d76      	lsrs	r6, r6, #21
   321fc:	401d      	ands	r5, r3
   321fe:	2100      	movs	r1, #0
   32200:	0324      	lsls	r4, r4, #12
   32202:	0b23      	lsrs	r3, r4, #12
   32204:	0d0c      	lsrs	r4, r1, #20
   32206:	4a7e      	ldr	r2, [pc, #504]	; (32400 <__aeabi_dsub+0x34c>)
   32208:	0524      	lsls	r4, r4, #20
   3220a:	431c      	orrs	r4, r3
   3220c:	4014      	ands	r4, r2
   3220e:	0533      	lsls	r3, r6, #20
   32210:	4323      	orrs	r3, r4
   32212:	005b      	lsls	r3, r3, #1
   32214:	07ed      	lsls	r5, r5, #31
   32216:	085b      	lsrs	r3, r3, #1
   32218:	432b      	orrs	r3, r5
   3221a:	0038      	movs	r0, r7
   3221c:	0019      	movs	r1, r3
   3221e:	bc1c      	pop	{r2, r3, r4}
   32220:	4690      	mov	r8, r2
   32222:	4699      	mov	r9, r3
   32224:	46a2      	mov	sl, r4
   32226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32228:	2501      	movs	r5, #1
   3222a:	4643      	mov	r3, r8
   3222c:	0762      	lsls	r2, r4, #29
   3222e:	08ff      	lsrs	r7, r7, #3
   32230:	4317      	orrs	r7, r2
   32232:	08e4      	lsrs	r4, r4, #3
   32234:	401d      	ands	r5, r3
   32236:	4b70      	ldr	r3, [pc, #448]	; (323f8 <__aeabi_dsub+0x344>)
   32238:	429e      	cmp	r6, r3
   3223a:	d036      	beq.n	322aa <__aeabi_dsub+0x1f6>
   3223c:	0324      	lsls	r4, r4, #12
   3223e:	0576      	lsls	r6, r6, #21
   32240:	0b24      	lsrs	r4, r4, #12
   32242:	0d76      	lsrs	r6, r6, #21
   32244:	e7db      	b.n	321fe <__aeabi_dsub+0x14a>
   32246:	4663      	mov	r3, ip
   32248:	1af3      	subs	r3, r6, r3
   3224a:	2b00      	cmp	r3, #0
   3224c:	dc00      	bgt.n	32250 <__aeabi_dsub+0x19c>
   3224e:	e094      	b.n	3237a <__aeabi_dsub+0x2c6>
   32250:	4660      	mov	r0, ip
   32252:	2800      	cmp	r0, #0
   32254:	d035      	beq.n	322c2 <__aeabi_dsub+0x20e>
   32256:	4868      	ldr	r0, [pc, #416]	; (323f8 <__aeabi_dsub+0x344>)
   32258:	4286      	cmp	r6, r0
   3225a:	d0b1      	beq.n	321c0 <__aeabi_dsub+0x10c>
   3225c:	2780      	movs	r7, #128	; 0x80
   3225e:	043f      	lsls	r7, r7, #16
   32260:	4339      	orrs	r1, r7
   32262:	2b38      	cmp	r3, #56	; 0x38
   32264:	dc00      	bgt.n	32268 <__aeabi_dsub+0x1b4>
   32266:	e0fd      	b.n	32464 <__aeabi_dsub+0x3b0>
   32268:	430a      	orrs	r2, r1
   3226a:	0017      	movs	r7, r2
   3226c:	2100      	movs	r1, #0
   3226e:	1e7a      	subs	r2, r7, #1
   32270:	4197      	sbcs	r7, r2
   32272:	4457      	add	r7, sl
   32274:	4557      	cmp	r7, sl
   32276:	4180      	sbcs	r0, r0
   32278:	1909      	adds	r1, r1, r4
   3227a:	4244      	negs	r4, r0
   3227c:	190c      	adds	r4, r1, r4
   3227e:	0223      	lsls	r3, r4, #8
   32280:	d53a      	bpl.n	322f8 <__aeabi_dsub+0x244>
   32282:	4b5d      	ldr	r3, [pc, #372]	; (323f8 <__aeabi_dsub+0x344>)
   32284:	3601      	adds	r6, #1
   32286:	429e      	cmp	r6, r3
   32288:	d100      	bne.n	3228c <__aeabi_dsub+0x1d8>
   3228a:	e14b      	b.n	32524 <__aeabi_dsub+0x470>
   3228c:	2201      	movs	r2, #1
   3228e:	4b5b      	ldr	r3, [pc, #364]	; (323fc <__aeabi_dsub+0x348>)
   32290:	401c      	ands	r4, r3
   32292:	087b      	lsrs	r3, r7, #1
   32294:	4017      	ands	r7, r2
   32296:	431f      	orrs	r7, r3
   32298:	07e2      	lsls	r2, r4, #31
   3229a:	4317      	orrs	r7, r2
   3229c:	0864      	lsrs	r4, r4, #1
   3229e:	e78f      	b.n	321c0 <__aeabi_dsub+0x10c>
   322a0:	0008      	movs	r0, r1
   322a2:	4310      	orrs	r0, r2
   322a4:	d000      	beq.n	322a8 <__aeabi_dsub+0x1f4>
   322a6:	e724      	b.n	320f2 <__aeabi_dsub+0x3e>
   322a8:	e721      	b.n	320ee <__aeabi_dsub+0x3a>
   322aa:	0023      	movs	r3, r4
   322ac:	433b      	orrs	r3, r7
   322ae:	d100      	bne.n	322b2 <__aeabi_dsub+0x1fe>
   322b0:	e1b9      	b.n	32626 <__aeabi_dsub+0x572>
   322b2:	2280      	movs	r2, #128	; 0x80
   322b4:	0312      	lsls	r2, r2, #12
   322b6:	4314      	orrs	r4, r2
   322b8:	0324      	lsls	r4, r4, #12
   322ba:	0b24      	lsrs	r4, r4, #12
   322bc:	e79f      	b.n	321fe <__aeabi_dsub+0x14a>
   322be:	002e      	movs	r6, r5
   322c0:	e77e      	b.n	321c0 <__aeabi_dsub+0x10c>
   322c2:	0008      	movs	r0, r1
   322c4:	4310      	orrs	r0, r2
   322c6:	d100      	bne.n	322ca <__aeabi_dsub+0x216>
   322c8:	e0ca      	b.n	32460 <__aeabi_dsub+0x3ac>
   322ca:	1e58      	subs	r0, r3, #1
   322cc:	4684      	mov	ip, r0
   322ce:	2800      	cmp	r0, #0
   322d0:	d000      	beq.n	322d4 <__aeabi_dsub+0x220>
   322d2:	e0e7      	b.n	324a4 <__aeabi_dsub+0x3f0>
   322d4:	4452      	add	r2, sl
   322d6:	4552      	cmp	r2, sl
   322d8:	4180      	sbcs	r0, r0
   322da:	1864      	adds	r4, r4, r1
   322dc:	4240      	negs	r0, r0
   322de:	1824      	adds	r4, r4, r0
   322e0:	0017      	movs	r7, r2
   322e2:	2601      	movs	r6, #1
   322e4:	0223      	lsls	r3, r4, #8
   322e6:	d507      	bpl.n	322f8 <__aeabi_dsub+0x244>
   322e8:	2602      	movs	r6, #2
   322ea:	e7cf      	b.n	3228c <__aeabi_dsub+0x1d8>
   322ec:	4664      	mov	r4, ip
   322ee:	432c      	orrs	r4, r5
   322f0:	d100      	bne.n	322f4 <__aeabi_dsub+0x240>
   322f2:	e1b3      	b.n	3265c <__aeabi_dsub+0x5a8>
   322f4:	002c      	movs	r4, r5
   322f6:	4667      	mov	r7, ip
   322f8:	077b      	lsls	r3, r7, #29
   322fa:	d000      	beq.n	322fe <__aeabi_dsub+0x24a>
   322fc:	e762      	b.n	321c4 <__aeabi_dsub+0x110>
   322fe:	0763      	lsls	r3, r4, #29
   32300:	08ff      	lsrs	r7, r7, #3
   32302:	431f      	orrs	r7, r3
   32304:	2501      	movs	r5, #1
   32306:	4643      	mov	r3, r8
   32308:	08e4      	lsrs	r4, r4, #3
   3230a:	401d      	ands	r5, r3
   3230c:	e793      	b.n	32236 <__aeabi_dsub+0x182>
   3230e:	2d00      	cmp	r5, #0
   32310:	d178      	bne.n	32404 <__aeabi_dsub+0x350>
   32312:	1c75      	adds	r5, r6, #1
   32314:	056d      	lsls	r5, r5, #21
   32316:	0d6d      	lsrs	r5, r5, #21
   32318:	2d01      	cmp	r5, #1
   3231a:	dc00      	bgt.n	3231e <__aeabi_dsub+0x26a>
   3231c:	e0f2      	b.n	32504 <__aeabi_dsub+0x450>
   3231e:	4650      	mov	r0, sl
   32320:	1a80      	subs	r0, r0, r2
   32322:	4582      	cmp	sl, r0
   32324:	41bf      	sbcs	r7, r7
   32326:	1a65      	subs	r5, r4, r1
   32328:	427f      	negs	r7, r7
   3232a:	1bed      	subs	r5, r5, r7
   3232c:	4684      	mov	ip, r0
   3232e:	0228      	lsls	r0, r5, #8
   32330:	d400      	bmi.n	32334 <__aeabi_dsub+0x280>
   32332:	e08c      	b.n	3244e <__aeabi_dsub+0x39a>
   32334:	4650      	mov	r0, sl
   32336:	1a17      	subs	r7, r2, r0
   32338:	42ba      	cmp	r2, r7
   3233a:	4192      	sbcs	r2, r2
   3233c:	1b0c      	subs	r4, r1, r4
   3233e:	4255      	negs	r5, r2
   32340:	1b65      	subs	r5, r4, r5
   32342:	4698      	mov	r8, r3
   32344:	e714      	b.n	32170 <__aeabi_dsub+0xbc>
   32346:	2501      	movs	r5, #1
   32348:	4643      	mov	r3, r8
   3234a:	2400      	movs	r4, #0
   3234c:	401d      	ands	r5, r3
   3234e:	2700      	movs	r7, #0
   32350:	e755      	b.n	321fe <__aeabi_dsub+0x14a>
   32352:	4c2a      	ldr	r4, [pc, #168]	; (323fc <__aeabi_dsub+0x348>)
   32354:	1af6      	subs	r6, r6, r3
   32356:	402c      	ands	r4, r5
   32358:	e732      	b.n	321c0 <__aeabi_dsub+0x10c>
   3235a:	003d      	movs	r5, r7
   3235c:	3828      	subs	r0, #40	; 0x28
   3235e:	4085      	lsls	r5, r0
   32360:	2700      	movs	r7, #0
   32362:	e717      	b.n	32194 <__aeabi_dsub+0xe0>
   32364:	0038      	movs	r0, r7
   32366:	f000 fa27 	bl	327b8 <__clzsi2>
   3236a:	3020      	adds	r0, #32
   3236c:	e706      	b.n	3217c <__aeabi_dsub+0xc8>
   3236e:	430a      	orrs	r2, r1
   32370:	0017      	movs	r7, r2
   32372:	2100      	movs	r1, #0
   32374:	1e7a      	subs	r2, r7, #1
   32376:	4197      	sbcs	r7, r2
   32378:	e6ee      	b.n	32158 <__aeabi_dsub+0xa4>
   3237a:	2b00      	cmp	r3, #0
   3237c:	d000      	beq.n	32380 <__aeabi_dsub+0x2cc>
   3237e:	e0e5      	b.n	3254c <__aeabi_dsub+0x498>
   32380:	1c73      	adds	r3, r6, #1
   32382:	469c      	mov	ip, r3
   32384:	055b      	lsls	r3, r3, #21
   32386:	0d5b      	lsrs	r3, r3, #21
   32388:	2b01      	cmp	r3, #1
   3238a:	dc00      	bgt.n	3238e <__aeabi_dsub+0x2da>
   3238c:	e09f      	b.n	324ce <__aeabi_dsub+0x41a>
   3238e:	4b1a      	ldr	r3, [pc, #104]	; (323f8 <__aeabi_dsub+0x344>)
   32390:	459c      	cmp	ip, r3
   32392:	d100      	bne.n	32396 <__aeabi_dsub+0x2e2>
   32394:	e0c5      	b.n	32522 <__aeabi_dsub+0x46e>
   32396:	4452      	add	r2, sl
   32398:	4552      	cmp	r2, sl
   3239a:	4180      	sbcs	r0, r0
   3239c:	1864      	adds	r4, r4, r1
   3239e:	4240      	negs	r0, r0
   323a0:	1824      	adds	r4, r4, r0
   323a2:	07e7      	lsls	r7, r4, #31
   323a4:	0852      	lsrs	r2, r2, #1
   323a6:	4317      	orrs	r7, r2
   323a8:	0864      	lsrs	r4, r4, #1
   323aa:	4666      	mov	r6, ip
   323ac:	e708      	b.n	321c0 <__aeabi_dsub+0x10c>
   323ae:	4812      	ldr	r0, [pc, #72]	; (323f8 <__aeabi_dsub+0x344>)
   323b0:	4285      	cmp	r5, r0
   323b2:	d100      	bne.n	323b6 <__aeabi_dsub+0x302>
   323b4:	e085      	b.n	324c2 <__aeabi_dsub+0x40e>
   323b6:	001d      	movs	r5, r3
   323b8:	e6bc      	b.n	32134 <__aeabi_dsub+0x80>
   323ba:	0029      	movs	r1, r5
   323bc:	3e1f      	subs	r6, #31
   323be:	40f1      	lsrs	r1, r6
   323c0:	2b20      	cmp	r3, #32
   323c2:	d100      	bne.n	323c6 <__aeabi_dsub+0x312>
   323c4:	e07f      	b.n	324c6 <__aeabi_dsub+0x412>
   323c6:	2240      	movs	r2, #64	; 0x40
   323c8:	1ad3      	subs	r3, r2, r3
   323ca:	409d      	lsls	r5, r3
   323cc:	432f      	orrs	r7, r5
   323ce:	1e7d      	subs	r5, r7, #1
   323d0:	41af      	sbcs	r7, r5
   323d2:	2400      	movs	r4, #0
   323d4:	430f      	orrs	r7, r1
   323d6:	2600      	movs	r6, #0
   323d8:	e78e      	b.n	322f8 <__aeabi_dsub+0x244>
   323da:	002b      	movs	r3, r5
   323dc:	000f      	movs	r7, r1
   323de:	3b20      	subs	r3, #32
   323e0:	40df      	lsrs	r7, r3
   323e2:	2d20      	cmp	r5, #32
   323e4:	d071      	beq.n	324ca <__aeabi_dsub+0x416>
   323e6:	2340      	movs	r3, #64	; 0x40
   323e8:	1b5d      	subs	r5, r3, r5
   323ea:	40a9      	lsls	r1, r5
   323ec:	430a      	orrs	r2, r1
   323ee:	1e51      	subs	r1, r2, #1
   323f0:	418a      	sbcs	r2, r1
   323f2:	2100      	movs	r1, #0
   323f4:	4317      	orrs	r7, r2
   323f6:	e6af      	b.n	32158 <__aeabi_dsub+0xa4>
   323f8:	000007ff 	.word	0x000007ff
   323fc:	ff7fffff 	.word	0xff7fffff
   32400:	800fffff 	.word	0x800fffff
   32404:	2e00      	cmp	r6, #0
   32406:	d03e      	beq.n	32486 <__aeabi_dsub+0x3d2>
   32408:	4eb3      	ldr	r6, [pc, #716]	; (326d8 <__aeabi_dsub+0x624>)
   3240a:	45b4      	cmp	ip, r6
   3240c:	d045      	beq.n	3249a <__aeabi_dsub+0x3e6>
   3240e:	2680      	movs	r6, #128	; 0x80
   32410:	0436      	lsls	r6, r6, #16
   32412:	426d      	negs	r5, r5
   32414:	4334      	orrs	r4, r6
   32416:	2d38      	cmp	r5, #56	; 0x38
   32418:	dd00      	ble.n	3241c <__aeabi_dsub+0x368>
   3241a:	e0a8      	b.n	3256e <__aeabi_dsub+0x4ba>
   3241c:	2d1f      	cmp	r5, #31
   3241e:	dd00      	ble.n	32422 <__aeabi_dsub+0x36e>
   32420:	e11f      	b.n	32662 <__aeabi_dsub+0x5ae>
   32422:	2620      	movs	r6, #32
   32424:	0027      	movs	r7, r4
   32426:	4650      	mov	r0, sl
   32428:	1b76      	subs	r6, r6, r5
   3242a:	40b7      	lsls	r7, r6
   3242c:	40e8      	lsrs	r0, r5
   3242e:	4307      	orrs	r7, r0
   32430:	4650      	mov	r0, sl
   32432:	40b0      	lsls	r0, r6
   32434:	1e46      	subs	r6, r0, #1
   32436:	41b0      	sbcs	r0, r6
   32438:	40ec      	lsrs	r4, r5
   3243a:	4338      	orrs	r0, r7
   3243c:	1a17      	subs	r7, r2, r0
   3243e:	42ba      	cmp	r2, r7
   32440:	4192      	sbcs	r2, r2
   32442:	1b0c      	subs	r4, r1, r4
   32444:	4252      	negs	r2, r2
   32446:	1aa4      	subs	r4, r4, r2
   32448:	4666      	mov	r6, ip
   3244a:	4698      	mov	r8, r3
   3244c:	e68b      	b.n	32166 <__aeabi_dsub+0xb2>
   3244e:	4664      	mov	r4, ip
   32450:	4667      	mov	r7, ip
   32452:	432c      	orrs	r4, r5
   32454:	d000      	beq.n	32458 <__aeabi_dsub+0x3a4>
   32456:	e68b      	b.n	32170 <__aeabi_dsub+0xbc>
   32458:	2500      	movs	r5, #0
   3245a:	2600      	movs	r6, #0
   3245c:	2700      	movs	r7, #0
   3245e:	e6ea      	b.n	32236 <__aeabi_dsub+0x182>
   32460:	001e      	movs	r6, r3
   32462:	e6ad      	b.n	321c0 <__aeabi_dsub+0x10c>
   32464:	2b1f      	cmp	r3, #31
   32466:	dc60      	bgt.n	3252a <__aeabi_dsub+0x476>
   32468:	2720      	movs	r7, #32
   3246a:	1af8      	subs	r0, r7, r3
   3246c:	000f      	movs	r7, r1
   3246e:	4684      	mov	ip, r0
   32470:	4087      	lsls	r7, r0
   32472:	0010      	movs	r0, r2
   32474:	40d8      	lsrs	r0, r3
   32476:	4307      	orrs	r7, r0
   32478:	4660      	mov	r0, ip
   3247a:	4082      	lsls	r2, r0
   3247c:	1e50      	subs	r0, r2, #1
   3247e:	4182      	sbcs	r2, r0
   32480:	40d9      	lsrs	r1, r3
   32482:	4317      	orrs	r7, r2
   32484:	e6f5      	b.n	32272 <__aeabi_dsub+0x1be>
   32486:	0026      	movs	r6, r4
   32488:	4650      	mov	r0, sl
   3248a:	4306      	orrs	r6, r0
   3248c:	d005      	beq.n	3249a <__aeabi_dsub+0x3e6>
   3248e:	43ed      	mvns	r5, r5
   32490:	2d00      	cmp	r5, #0
   32492:	d0d3      	beq.n	3243c <__aeabi_dsub+0x388>
   32494:	4e90      	ldr	r6, [pc, #576]	; (326d8 <__aeabi_dsub+0x624>)
   32496:	45b4      	cmp	ip, r6
   32498:	d1bd      	bne.n	32416 <__aeabi_dsub+0x362>
   3249a:	000c      	movs	r4, r1
   3249c:	0017      	movs	r7, r2
   3249e:	4666      	mov	r6, ip
   324a0:	4698      	mov	r8, r3
   324a2:	e68d      	b.n	321c0 <__aeabi_dsub+0x10c>
   324a4:	488c      	ldr	r0, [pc, #560]	; (326d8 <__aeabi_dsub+0x624>)
   324a6:	4283      	cmp	r3, r0
   324a8:	d00b      	beq.n	324c2 <__aeabi_dsub+0x40e>
   324aa:	4663      	mov	r3, ip
   324ac:	e6d9      	b.n	32262 <__aeabi_dsub+0x1ae>
   324ae:	2d00      	cmp	r5, #0
   324b0:	d000      	beq.n	324b4 <__aeabi_dsub+0x400>
   324b2:	e096      	b.n	325e2 <__aeabi_dsub+0x52e>
   324b4:	0008      	movs	r0, r1
   324b6:	4310      	orrs	r0, r2
   324b8:	d100      	bne.n	324bc <__aeabi_dsub+0x408>
   324ba:	e0e2      	b.n	32682 <__aeabi_dsub+0x5ce>
   324bc:	000c      	movs	r4, r1
   324be:	0017      	movs	r7, r2
   324c0:	4698      	mov	r8, r3
   324c2:	4e85      	ldr	r6, [pc, #532]	; (326d8 <__aeabi_dsub+0x624>)
   324c4:	e67c      	b.n	321c0 <__aeabi_dsub+0x10c>
   324c6:	2500      	movs	r5, #0
   324c8:	e780      	b.n	323cc <__aeabi_dsub+0x318>
   324ca:	2100      	movs	r1, #0
   324cc:	e78e      	b.n	323ec <__aeabi_dsub+0x338>
   324ce:	0023      	movs	r3, r4
   324d0:	4650      	mov	r0, sl
   324d2:	4303      	orrs	r3, r0
   324d4:	2e00      	cmp	r6, #0
   324d6:	d000      	beq.n	324da <__aeabi_dsub+0x426>
   324d8:	e0a8      	b.n	3262c <__aeabi_dsub+0x578>
   324da:	2b00      	cmp	r3, #0
   324dc:	d100      	bne.n	324e0 <__aeabi_dsub+0x42c>
   324de:	e0de      	b.n	3269e <__aeabi_dsub+0x5ea>
   324e0:	000b      	movs	r3, r1
   324e2:	4313      	orrs	r3, r2
   324e4:	d100      	bne.n	324e8 <__aeabi_dsub+0x434>
   324e6:	e66b      	b.n	321c0 <__aeabi_dsub+0x10c>
   324e8:	4452      	add	r2, sl
   324ea:	4552      	cmp	r2, sl
   324ec:	4180      	sbcs	r0, r0
   324ee:	1864      	adds	r4, r4, r1
   324f0:	4240      	negs	r0, r0
   324f2:	1824      	adds	r4, r4, r0
   324f4:	0017      	movs	r7, r2
   324f6:	0223      	lsls	r3, r4, #8
   324f8:	d400      	bmi.n	324fc <__aeabi_dsub+0x448>
   324fa:	e6fd      	b.n	322f8 <__aeabi_dsub+0x244>
   324fc:	4b77      	ldr	r3, [pc, #476]	; (326dc <__aeabi_dsub+0x628>)
   324fe:	4666      	mov	r6, ip
   32500:	401c      	ands	r4, r3
   32502:	e65d      	b.n	321c0 <__aeabi_dsub+0x10c>
   32504:	0025      	movs	r5, r4
   32506:	4650      	mov	r0, sl
   32508:	4305      	orrs	r5, r0
   3250a:	2e00      	cmp	r6, #0
   3250c:	d1cf      	bne.n	324ae <__aeabi_dsub+0x3fa>
   3250e:	2d00      	cmp	r5, #0
   32510:	d14f      	bne.n	325b2 <__aeabi_dsub+0x4fe>
   32512:	000c      	movs	r4, r1
   32514:	4314      	orrs	r4, r2
   32516:	d100      	bne.n	3251a <__aeabi_dsub+0x466>
   32518:	e0a0      	b.n	3265c <__aeabi_dsub+0x5a8>
   3251a:	000c      	movs	r4, r1
   3251c:	0017      	movs	r7, r2
   3251e:	4698      	mov	r8, r3
   32520:	e64e      	b.n	321c0 <__aeabi_dsub+0x10c>
   32522:	4666      	mov	r6, ip
   32524:	2400      	movs	r4, #0
   32526:	2700      	movs	r7, #0
   32528:	e685      	b.n	32236 <__aeabi_dsub+0x182>
   3252a:	001f      	movs	r7, r3
   3252c:	0008      	movs	r0, r1
   3252e:	3f20      	subs	r7, #32
   32530:	40f8      	lsrs	r0, r7
   32532:	0007      	movs	r7, r0
   32534:	2b20      	cmp	r3, #32
   32536:	d100      	bne.n	3253a <__aeabi_dsub+0x486>
   32538:	e08e      	b.n	32658 <__aeabi_dsub+0x5a4>
   3253a:	2040      	movs	r0, #64	; 0x40
   3253c:	1ac3      	subs	r3, r0, r3
   3253e:	4099      	lsls	r1, r3
   32540:	430a      	orrs	r2, r1
   32542:	1e51      	subs	r1, r2, #1
   32544:	418a      	sbcs	r2, r1
   32546:	2100      	movs	r1, #0
   32548:	4317      	orrs	r7, r2
   3254a:	e692      	b.n	32272 <__aeabi_dsub+0x1be>
   3254c:	2e00      	cmp	r6, #0
   3254e:	d114      	bne.n	3257a <__aeabi_dsub+0x4c6>
   32550:	0026      	movs	r6, r4
   32552:	4650      	mov	r0, sl
   32554:	4306      	orrs	r6, r0
   32556:	d062      	beq.n	3261e <__aeabi_dsub+0x56a>
   32558:	43db      	mvns	r3, r3
   3255a:	2b00      	cmp	r3, #0
   3255c:	d15c      	bne.n	32618 <__aeabi_dsub+0x564>
   3255e:	1887      	adds	r7, r0, r2
   32560:	4297      	cmp	r7, r2
   32562:	4192      	sbcs	r2, r2
   32564:	1864      	adds	r4, r4, r1
   32566:	4252      	negs	r2, r2
   32568:	18a4      	adds	r4, r4, r2
   3256a:	4666      	mov	r6, ip
   3256c:	e687      	b.n	3227e <__aeabi_dsub+0x1ca>
   3256e:	4650      	mov	r0, sl
   32570:	4320      	orrs	r0, r4
   32572:	1e44      	subs	r4, r0, #1
   32574:	41a0      	sbcs	r0, r4
   32576:	2400      	movs	r4, #0
   32578:	e760      	b.n	3243c <__aeabi_dsub+0x388>
   3257a:	4e57      	ldr	r6, [pc, #348]	; (326d8 <__aeabi_dsub+0x624>)
   3257c:	45b4      	cmp	ip, r6
   3257e:	d04e      	beq.n	3261e <__aeabi_dsub+0x56a>
   32580:	2680      	movs	r6, #128	; 0x80
   32582:	0436      	lsls	r6, r6, #16
   32584:	425b      	negs	r3, r3
   32586:	4334      	orrs	r4, r6
   32588:	2b38      	cmp	r3, #56	; 0x38
   3258a:	dd00      	ble.n	3258e <__aeabi_dsub+0x4da>
   3258c:	e07f      	b.n	3268e <__aeabi_dsub+0x5da>
   3258e:	2b1f      	cmp	r3, #31
   32590:	dd00      	ble.n	32594 <__aeabi_dsub+0x4e0>
   32592:	e08b      	b.n	326ac <__aeabi_dsub+0x5f8>
   32594:	2620      	movs	r6, #32
   32596:	0027      	movs	r7, r4
   32598:	4650      	mov	r0, sl
   3259a:	1af6      	subs	r6, r6, r3
   3259c:	40b7      	lsls	r7, r6
   3259e:	40d8      	lsrs	r0, r3
   325a0:	4307      	orrs	r7, r0
   325a2:	4650      	mov	r0, sl
   325a4:	40b0      	lsls	r0, r6
   325a6:	1e46      	subs	r6, r0, #1
   325a8:	41b0      	sbcs	r0, r6
   325aa:	4307      	orrs	r7, r0
   325ac:	40dc      	lsrs	r4, r3
   325ae:	18bf      	adds	r7, r7, r2
   325b0:	e7d6      	b.n	32560 <__aeabi_dsub+0x4ac>
   325b2:	000d      	movs	r5, r1
   325b4:	4315      	orrs	r5, r2
   325b6:	d100      	bne.n	325ba <__aeabi_dsub+0x506>
   325b8:	e602      	b.n	321c0 <__aeabi_dsub+0x10c>
   325ba:	4650      	mov	r0, sl
   325bc:	1a80      	subs	r0, r0, r2
   325be:	4582      	cmp	sl, r0
   325c0:	41bf      	sbcs	r7, r7
   325c2:	1a65      	subs	r5, r4, r1
   325c4:	427f      	negs	r7, r7
   325c6:	1bed      	subs	r5, r5, r7
   325c8:	4684      	mov	ip, r0
   325ca:	0228      	lsls	r0, r5, #8
   325cc:	d400      	bmi.n	325d0 <__aeabi_dsub+0x51c>
   325ce:	e68d      	b.n	322ec <__aeabi_dsub+0x238>
   325d0:	4650      	mov	r0, sl
   325d2:	1a17      	subs	r7, r2, r0
   325d4:	42ba      	cmp	r2, r7
   325d6:	4192      	sbcs	r2, r2
   325d8:	1b0c      	subs	r4, r1, r4
   325da:	4252      	negs	r2, r2
   325dc:	1aa4      	subs	r4, r4, r2
   325de:	4698      	mov	r8, r3
   325e0:	e5ee      	b.n	321c0 <__aeabi_dsub+0x10c>
   325e2:	000d      	movs	r5, r1
   325e4:	4315      	orrs	r5, r2
   325e6:	d100      	bne.n	325ea <__aeabi_dsub+0x536>
   325e8:	e76b      	b.n	324c2 <__aeabi_dsub+0x40e>
   325ea:	4650      	mov	r0, sl
   325ec:	0767      	lsls	r7, r4, #29
   325ee:	08c0      	lsrs	r0, r0, #3
   325f0:	4307      	orrs	r7, r0
   325f2:	2080      	movs	r0, #128	; 0x80
   325f4:	08e4      	lsrs	r4, r4, #3
   325f6:	0300      	lsls	r0, r0, #12
   325f8:	4204      	tst	r4, r0
   325fa:	d007      	beq.n	3260c <__aeabi_dsub+0x558>
   325fc:	08cd      	lsrs	r5, r1, #3
   325fe:	4205      	tst	r5, r0
   32600:	d104      	bne.n	3260c <__aeabi_dsub+0x558>
   32602:	002c      	movs	r4, r5
   32604:	4698      	mov	r8, r3
   32606:	08d7      	lsrs	r7, r2, #3
   32608:	0749      	lsls	r1, r1, #29
   3260a:	430f      	orrs	r7, r1
   3260c:	0f7b      	lsrs	r3, r7, #29
   3260e:	00e4      	lsls	r4, r4, #3
   32610:	431c      	orrs	r4, r3
   32612:	00ff      	lsls	r7, r7, #3
   32614:	4e30      	ldr	r6, [pc, #192]	; (326d8 <__aeabi_dsub+0x624>)
   32616:	e5d3      	b.n	321c0 <__aeabi_dsub+0x10c>
   32618:	4e2f      	ldr	r6, [pc, #188]	; (326d8 <__aeabi_dsub+0x624>)
   3261a:	45b4      	cmp	ip, r6
   3261c:	d1b4      	bne.n	32588 <__aeabi_dsub+0x4d4>
   3261e:	000c      	movs	r4, r1
   32620:	0017      	movs	r7, r2
   32622:	4666      	mov	r6, ip
   32624:	e5cc      	b.n	321c0 <__aeabi_dsub+0x10c>
   32626:	2700      	movs	r7, #0
   32628:	2400      	movs	r4, #0
   3262a:	e5e8      	b.n	321fe <__aeabi_dsub+0x14a>
   3262c:	2b00      	cmp	r3, #0
   3262e:	d039      	beq.n	326a4 <__aeabi_dsub+0x5f0>
   32630:	000b      	movs	r3, r1
   32632:	4313      	orrs	r3, r2
   32634:	d100      	bne.n	32638 <__aeabi_dsub+0x584>
   32636:	e744      	b.n	324c2 <__aeabi_dsub+0x40e>
   32638:	08c0      	lsrs	r0, r0, #3
   3263a:	0767      	lsls	r7, r4, #29
   3263c:	4307      	orrs	r7, r0
   3263e:	2080      	movs	r0, #128	; 0x80
   32640:	08e4      	lsrs	r4, r4, #3
   32642:	0300      	lsls	r0, r0, #12
   32644:	4204      	tst	r4, r0
   32646:	d0e1      	beq.n	3260c <__aeabi_dsub+0x558>
   32648:	08cb      	lsrs	r3, r1, #3
   3264a:	4203      	tst	r3, r0
   3264c:	d1de      	bne.n	3260c <__aeabi_dsub+0x558>
   3264e:	08d7      	lsrs	r7, r2, #3
   32650:	0749      	lsls	r1, r1, #29
   32652:	430f      	orrs	r7, r1
   32654:	001c      	movs	r4, r3
   32656:	e7d9      	b.n	3260c <__aeabi_dsub+0x558>
   32658:	2100      	movs	r1, #0
   3265a:	e771      	b.n	32540 <__aeabi_dsub+0x48c>
   3265c:	2500      	movs	r5, #0
   3265e:	2700      	movs	r7, #0
   32660:	e5e9      	b.n	32236 <__aeabi_dsub+0x182>
   32662:	002e      	movs	r6, r5
   32664:	0027      	movs	r7, r4
   32666:	3e20      	subs	r6, #32
   32668:	40f7      	lsrs	r7, r6
   3266a:	2d20      	cmp	r5, #32
   3266c:	d02f      	beq.n	326ce <__aeabi_dsub+0x61a>
   3266e:	2640      	movs	r6, #64	; 0x40
   32670:	1b75      	subs	r5, r6, r5
   32672:	40ac      	lsls	r4, r5
   32674:	4650      	mov	r0, sl
   32676:	4320      	orrs	r0, r4
   32678:	1e44      	subs	r4, r0, #1
   3267a:	41a0      	sbcs	r0, r4
   3267c:	2400      	movs	r4, #0
   3267e:	4338      	orrs	r0, r7
   32680:	e6dc      	b.n	3243c <__aeabi_dsub+0x388>
   32682:	2480      	movs	r4, #128	; 0x80
   32684:	2500      	movs	r5, #0
   32686:	0324      	lsls	r4, r4, #12
   32688:	4e13      	ldr	r6, [pc, #76]	; (326d8 <__aeabi_dsub+0x624>)
   3268a:	2700      	movs	r7, #0
   3268c:	e5d3      	b.n	32236 <__aeabi_dsub+0x182>
   3268e:	4650      	mov	r0, sl
   32690:	4320      	orrs	r0, r4
   32692:	0007      	movs	r7, r0
   32694:	1e78      	subs	r0, r7, #1
   32696:	4187      	sbcs	r7, r0
   32698:	2400      	movs	r4, #0
   3269a:	18bf      	adds	r7, r7, r2
   3269c:	e760      	b.n	32560 <__aeabi_dsub+0x4ac>
   3269e:	000c      	movs	r4, r1
   326a0:	0017      	movs	r7, r2
   326a2:	e58d      	b.n	321c0 <__aeabi_dsub+0x10c>
   326a4:	000c      	movs	r4, r1
   326a6:	0017      	movs	r7, r2
   326a8:	4e0b      	ldr	r6, [pc, #44]	; (326d8 <__aeabi_dsub+0x624>)
   326aa:	e589      	b.n	321c0 <__aeabi_dsub+0x10c>
   326ac:	001e      	movs	r6, r3
   326ae:	0027      	movs	r7, r4
   326b0:	3e20      	subs	r6, #32
   326b2:	40f7      	lsrs	r7, r6
   326b4:	2b20      	cmp	r3, #32
   326b6:	d00c      	beq.n	326d2 <__aeabi_dsub+0x61e>
   326b8:	2640      	movs	r6, #64	; 0x40
   326ba:	1af3      	subs	r3, r6, r3
   326bc:	409c      	lsls	r4, r3
   326be:	4650      	mov	r0, sl
   326c0:	4320      	orrs	r0, r4
   326c2:	1e44      	subs	r4, r0, #1
   326c4:	41a0      	sbcs	r0, r4
   326c6:	4307      	orrs	r7, r0
   326c8:	2400      	movs	r4, #0
   326ca:	18bf      	adds	r7, r7, r2
   326cc:	e748      	b.n	32560 <__aeabi_dsub+0x4ac>
   326ce:	2400      	movs	r4, #0
   326d0:	e7d0      	b.n	32674 <__aeabi_dsub+0x5c0>
   326d2:	2400      	movs	r4, #0
   326d4:	e7f3      	b.n	326be <__aeabi_dsub+0x60a>
   326d6:	46c0      	nop			; (mov r8, r8)
   326d8:	000007ff 	.word	0x000007ff
   326dc:	ff7fffff 	.word	0xff7fffff

000326e0 <__aeabi_d2iz>:
   326e0:	b530      	push	{r4, r5, lr}
   326e2:	4d13      	ldr	r5, [pc, #76]	; (32730 <__aeabi_d2iz+0x50>)
   326e4:	030a      	lsls	r2, r1, #12
   326e6:	004b      	lsls	r3, r1, #1
   326e8:	0b12      	lsrs	r2, r2, #12
   326ea:	0d5b      	lsrs	r3, r3, #21
   326ec:	0fc9      	lsrs	r1, r1, #31
   326ee:	2400      	movs	r4, #0
   326f0:	42ab      	cmp	r3, r5
   326f2:	dd10      	ble.n	32716 <__aeabi_d2iz+0x36>
   326f4:	4c0f      	ldr	r4, [pc, #60]	; (32734 <__aeabi_d2iz+0x54>)
   326f6:	42a3      	cmp	r3, r4
   326f8:	dc0f      	bgt.n	3271a <__aeabi_d2iz+0x3a>
   326fa:	2480      	movs	r4, #128	; 0x80
   326fc:	4d0e      	ldr	r5, [pc, #56]	; (32738 <__aeabi_d2iz+0x58>)
   326fe:	0364      	lsls	r4, r4, #13
   32700:	4322      	orrs	r2, r4
   32702:	1aed      	subs	r5, r5, r3
   32704:	2d1f      	cmp	r5, #31
   32706:	dd0b      	ble.n	32720 <__aeabi_d2iz+0x40>
   32708:	480c      	ldr	r0, [pc, #48]	; (3273c <__aeabi_d2iz+0x5c>)
   3270a:	1ac3      	subs	r3, r0, r3
   3270c:	40da      	lsrs	r2, r3
   3270e:	4254      	negs	r4, r2
   32710:	2900      	cmp	r1, #0
   32712:	d100      	bne.n	32716 <__aeabi_d2iz+0x36>
   32714:	0014      	movs	r4, r2
   32716:	0020      	movs	r0, r4
   32718:	bd30      	pop	{r4, r5, pc}
   3271a:	4b09      	ldr	r3, [pc, #36]	; (32740 <__aeabi_d2iz+0x60>)
   3271c:	18cc      	adds	r4, r1, r3
   3271e:	e7fa      	b.n	32716 <__aeabi_d2iz+0x36>
   32720:	4c08      	ldr	r4, [pc, #32]	; (32744 <__aeabi_d2iz+0x64>)
   32722:	40e8      	lsrs	r0, r5
   32724:	46a4      	mov	ip, r4
   32726:	4463      	add	r3, ip
   32728:	409a      	lsls	r2, r3
   3272a:	4302      	orrs	r2, r0
   3272c:	e7ef      	b.n	3270e <__aeabi_d2iz+0x2e>
   3272e:	46c0      	nop			; (mov r8, r8)
   32730:	000003fe 	.word	0x000003fe
   32734:	0000041d 	.word	0x0000041d
   32738:	00000433 	.word	0x00000433
   3273c:	00000413 	.word	0x00000413
   32740:	7fffffff 	.word	0x7fffffff
   32744:	fffffbed 	.word	0xfffffbed

00032748 <__aeabi_ui2d>:
   32748:	b510      	push	{r4, lr}
   3274a:	1e04      	subs	r4, r0, #0
   3274c:	d028      	beq.n	327a0 <__aeabi_ui2d+0x58>
   3274e:	f000 f833 	bl	327b8 <__clzsi2>
   32752:	4b15      	ldr	r3, [pc, #84]	; (327a8 <__aeabi_ui2d+0x60>)
   32754:	4a15      	ldr	r2, [pc, #84]	; (327ac <__aeabi_ui2d+0x64>)
   32756:	1a1b      	subs	r3, r3, r0
   32758:	1ad2      	subs	r2, r2, r3
   3275a:	2a1f      	cmp	r2, #31
   3275c:	dd15      	ble.n	3278a <__aeabi_ui2d+0x42>
   3275e:	4a14      	ldr	r2, [pc, #80]	; (327b0 <__aeabi_ui2d+0x68>)
   32760:	1ad2      	subs	r2, r2, r3
   32762:	4094      	lsls	r4, r2
   32764:	2200      	movs	r2, #0
   32766:	0324      	lsls	r4, r4, #12
   32768:	055b      	lsls	r3, r3, #21
   3276a:	0b24      	lsrs	r4, r4, #12
   3276c:	0d5b      	lsrs	r3, r3, #21
   3276e:	2100      	movs	r1, #0
   32770:	0010      	movs	r0, r2
   32772:	0324      	lsls	r4, r4, #12
   32774:	0d0a      	lsrs	r2, r1, #20
   32776:	0b24      	lsrs	r4, r4, #12
   32778:	0512      	lsls	r2, r2, #20
   3277a:	4322      	orrs	r2, r4
   3277c:	4c0d      	ldr	r4, [pc, #52]	; (327b4 <__aeabi_ui2d+0x6c>)
   3277e:	051b      	lsls	r3, r3, #20
   32780:	4022      	ands	r2, r4
   32782:	4313      	orrs	r3, r2
   32784:	005b      	lsls	r3, r3, #1
   32786:	0859      	lsrs	r1, r3, #1
   32788:	bd10      	pop	{r4, pc}
   3278a:	0021      	movs	r1, r4
   3278c:	4091      	lsls	r1, r2
   3278e:	000a      	movs	r2, r1
   32790:	210b      	movs	r1, #11
   32792:	1a08      	subs	r0, r1, r0
   32794:	40c4      	lsrs	r4, r0
   32796:	055b      	lsls	r3, r3, #21
   32798:	0324      	lsls	r4, r4, #12
   3279a:	0b24      	lsrs	r4, r4, #12
   3279c:	0d5b      	lsrs	r3, r3, #21
   3279e:	e7e6      	b.n	3276e <__aeabi_ui2d+0x26>
   327a0:	2300      	movs	r3, #0
   327a2:	2400      	movs	r4, #0
   327a4:	2200      	movs	r2, #0
   327a6:	e7e2      	b.n	3276e <__aeabi_ui2d+0x26>
   327a8:	0000041e 	.word	0x0000041e
   327ac:	00000433 	.word	0x00000433
   327b0:	00000413 	.word	0x00000413
   327b4:	800fffff 	.word	0x800fffff

000327b8 <__clzsi2>:
   327b8:	211c      	movs	r1, #28
   327ba:	2301      	movs	r3, #1
   327bc:	041b      	lsls	r3, r3, #16
   327be:	4298      	cmp	r0, r3
   327c0:	d301      	bcc.n	327c6 <__clzsi2+0xe>
   327c2:	0c00      	lsrs	r0, r0, #16
   327c4:	3910      	subs	r1, #16
   327c6:	0a1b      	lsrs	r3, r3, #8
   327c8:	4298      	cmp	r0, r3
   327ca:	d301      	bcc.n	327d0 <__clzsi2+0x18>
   327cc:	0a00      	lsrs	r0, r0, #8
   327ce:	3908      	subs	r1, #8
   327d0:	091b      	lsrs	r3, r3, #4
   327d2:	4298      	cmp	r0, r3
   327d4:	d301      	bcc.n	327da <__clzsi2+0x22>
   327d6:	0900      	lsrs	r0, r0, #4
   327d8:	3904      	subs	r1, #4
   327da:	a202      	add	r2, pc, #8	; (adr r2, 327e4 <__clzsi2+0x2c>)
   327dc:	5c10      	ldrb	r0, [r2, r0]
   327de:	1840      	adds	r0, r0, r1
   327e0:	4770      	bx	lr
   327e2:	46c0      	nop			; (mov r8, r8)
   327e4:	02020304 	.word	0x02020304
   327e8:	01010101 	.word	0x01010101
	...

000327f4 <atoi>:
   327f4:	b510      	push	{r4, lr}
   327f6:	220a      	movs	r2, #10
   327f8:	2100      	movs	r1, #0
   327fa:	f000 fb31 	bl	32e60 <strtol>
   327fe:	bd10      	pop	{r4, pc}

00032800 <__libc_init_array>:
   32800:	b570      	push	{r4, r5, r6, lr}
   32802:	2600      	movs	r6, #0
   32804:	4d0c      	ldr	r5, [pc, #48]	; (32838 <__libc_init_array+0x38>)
   32806:	4c0d      	ldr	r4, [pc, #52]	; (3283c <__libc_init_array+0x3c>)
   32808:	1b64      	subs	r4, r4, r5
   3280a:	10a4      	asrs	r4, r4, #2
   3280c:	42a6      	cmp	r6, r4
   3280e:	d109      	bne.n	32824 <__libc_init_array+0x24>
   32810:	2600      	movs	r6, #0
   32812:	f005 ff01 	bl	38618 <_init>
   32816:	4d0a      	ldr	r5, [pc, #40]	; (32840 <__libc_init_array+0x40>)
   32818:	4c0a      	ldr	r4, [pc, #40]	; (32844 <__libc_init_array+0x44>)
   3281a:	1b64      	subs	r4, r4, r5
   3281c:	10a4      	asrs	r4, r4, #2
   3281e:	42a6      	cmp	r6, r4
   32820:	d105      	bne.n	3282e <__libc_init_array+0x2e>
   32822:	bd70      	pop	{r4, r5, r6, pc}
   32824:	00b3      	lsls	r3, r6, #2
   32826:	58eb      	ldr	r3, [r5, r3]
   32828:	4798      	blx	r3
   3282a:	3601      	adds	r6, #1
   3282c:	e7ee      	b.n	3280c <__libc_init_array+0xc>
   3282e:	00b3      	lsls	r3, r6, #2
   32830:	58eb      	ldr	r3, [r5, r3]
   32832:	4798      	blx	r3
   32834:	3601      	adds	r6, #1
   32836:	e7f2      	b.n	3281e <__libc_init_array+0x1e>
   32838:	00038624 	.word	0x00038624
   3283c:	00038624 	.word	0x00038624
   32840:	00038624 	.word	0x00038624
   32844:	00038628 	.word	0x00038628

00032848 <malloc>:
   32848:	b510      	push	{r4, lr}
   3284a:	4b03      	ldr	r3, [pc, #12]	; (32858 <malloc+0x10>)
   3284c:	0001      	movs	r1, r0
   3284e:	6818      	ldr	r0, [r3, #0]
   32850:	f000 f87c 	bl	3294c <_malloc_r>
   32854:	bd10      	pop	{r4, pc}
   32856:	46c0      	nop			; (mov r8, r8)
   32858:	200000d4 	.word	0x200000d4

0003285c <free>:
   3285c:	b510      	push	{r4, lr}
   3285e:	4b03      	ldr	r3, [pc, #12]	; (3286c <free+0x10>)
   32860:	0001      	movs	r1, r0
   32862:	6818      	ldr	r0, [r3, #0]
   32864:	f000 f828 	bl	328b8 <_free_r>
   32868:	bd10      	pop	{r4, pc}
   3286a:	46c0      	nop			; (mov r8, r8)
   3286c:	200000d4 	.word	0x200000d4

00032870 <memcpy>:
   32870:	2300      	movs	r3, #0
   32872:	b510      	push	{r4, lr}
   32874:	429a      	cmp	r2, r3
   32876:	d100      	bne.n	3287a <memcpy+0xa>
   32878:	bd10      	pop	{r4, pc}
   3287a:	5ccc      	ldrb	r4, [r1, r3]
   3287c:	54c4      	strb	r4, [r0, r3]
   3287e:	3301      	adds	r3, #1
   32880:	e7f8      	b.n	32874 <memcpy+0x4>

00032882 <memmove>:
   32882:	b510      	push	{r4, lr}
   32884:	4288      	cmp	r0, r1
   32886:	d902      	bls.n	3288e <memmove+0xc>
   32888:	188b      	adds	r3, r1, r2
   3288a:	4298      	cmp	r0, r3
   3288c:	d308      	bcc.n	328a0 <memmove+0x1e>
   3288e:	2300      	movs	r3, #0
   32890:	429a      	cmp	r2, r3
   32892:	d007      	beq.n	328a4 <memmove+0x22>
   32894:	5ccc      	ldrb	r4, [r1, r3]
   32896:	54c4      	strb	r4, [r0, r3]
   32898:	3301      	adds	r3, #1
   3289a:	e7f9      	b.n	32890 <memmove+0xe>
   3289c:	5c8b      	ldrb	r3, [r1, r2]
   3289e:	5483      	strb	r3, [r0, r2]
   328a0:	3a01      	subs	r2, #1
   328a2:	d2fb      	bcs.n	3289c <memmove+0x1a>
   328a4:	bd10      	pop	{r4, pc}

000328a6 <memset>:
   328a6:	0003      	movs	r3, r0
   328a8:	1882      	adds	r2, r0, r2
   328aa:	4293      	cmp	r3, r2
   328ac:	d100      	bne.n	328b0 <memset+0xa>
   328ae:	4770      	bx	lr
   328b0:	7019      	strb	r1, [r3, #0]
   328b2:	3301      	adds	r3, #1
   328b4:	e7f9      	b.n	328aa <memset+0x4>
	...

000328b8 <_free_r>:
   328b8:	b570      	push	{r4, r5, r6, lr}
   328ba:	0005      	movs	r5, r0
   328bc:	2900      	cmp	r1, #0
   328be:	d010      	beq.n	328e2 <_free_r+0x2a>
   328c0:	1f0c      	subs	r4, r1, #4
   328c2:	6823      	ldr	r3, [r4, #0]
   328c4:	2b00      	cmp	r3, #0
   328c6:	da00      	bge.n	328ca <_free_r+0x12>
   328c8:	18e4      	adds	r4, r4, r3
   328ca:	0028      	movs	r0, r5
   328cc:	f000 fdfc 	bl	334c8 <__malloc_lock>
   328d0:	4a1d      	ldr	r2, [pc, #116]	; (32948 <_free_r+0x90>)
   328d2:	6813      	ldr	r3, [r2, #0]
   328d4:	2b00      	cmp	r3, #0
   328d6:	d105      	bne.n	328e4 <_free_r+0x2c>
   328d8:	6063      	str	r3, [r4, #4]
   328da:	6014      	str	r4, [r2, #0]
   328dc:	0028      	movs	r0, r5
   328de:	f000 fdf4 	bl	334ca <__malloc_unlock>
   328e2:	bd70      	pop	{r4, r5, r6, pc}
   328e4:	42a3      	cmp	r3, r4
   328e6:	d909      	bls.n	328fc <_free_r+0x44>
   328e8:	6821      	ldr	r1, [r4, #0]
   328ea:	1860      	adds	r0, r4, r1
   328ec:	4283      	cmp	r3, r0
   328ee:	d1f3      	bne.n	328d8 <_free_r+0x20>
   328f0:	6818      	ldr	r0, [r3, #0]
   328f2:	685b      	ldr	r3, [r3, #4]
   328f4:	1841      	adds	r1, r0, r1
   328f6:	6021      	str	r1, [r4, #0]
   328f8:	e7ee      	b.n	328d8 <_free_r+0x20>
   328fa:	0013      	movs	r3, r2
   328fc:	685a      	ldr	r2, [r3, #4]
   328fe:	2a00      	cmp	r2, #0
   32900:	d001      	beq.n	32906 <_free_r+0x4e>
   32902:	42a2      	cmp	r2, r4
   32904:	d9f9      	bls.n	328fa <_free_r+0x42>
   32906:	6819      	ldr	r1, [r3, #0]
   32908:	1858      	adds	r0, r3, r1
   3290a:	42a0      	cmp	r0, r4
   3290c:	d10b      	bne.n	32926 <_free_r+0x6e>
   3290e:	6820      	ldr	r0, [r4, #0]
   32910:	1809      	adds	r1, r1, r0
   32912:	1858      	adds	r0, r3, r1
   32914:	6019      	str	r1, [r3, #0]
   32916:	4282      	cmp	r2, r0
   32918:	d1e0      	bne.n	328dc <_free_r+0x24>
   3291a:	6810      	ldr	r0, [r2, #0]
   3291c:	6852      	ldr	r2, [r2, #4]
   3291e:	1841      	adds	r1, r0, r1
   32920:	6019      	str	r1, [r3, #0]
   32922:	605a      	str	r2, [r3, #4]
   32924:	e7da      	b.n	328dc <_free_r+0x24>
   32926:	42a0      	cmp	r0, r4
   32928:	d902      	bls.n	32930 <_free_r+0x78>
   3292a:	230c      	movs	r3, #12
   3292c:	602b      	str	r3, [r5, #0]
   3292e:	e7d5      	b.n	328dc <_free_r+0x24>
   32930:	6821      	ldr	r1, [r4, #0]
   32932:	1860      	adds	r0, r4, r1
   32934:	4282      	cmp	r2, r0
   32936:	d103      	bne.n	32940 <_free_r+0x88>
   32938:	6810      	ldr	r0, [r2, #0]
   3293a:	6852      	ldr	r2, [r2, #4]
   3293c:	1841      	adds	r1, r0, r1
   3293e:	6021      	str	r1, [r4, #0]
   32940:	6062      	str	r2, [r4, #4]
   32942:	605c      	str	r4, [r3, #4]
   32944:	e7ca      	b.n	328dc <_free_r+0x24>
   32946:	46c0      	nop			; (mov r8, r8)
   32948:	200042b4 	.word	0x200042b4

0003294c <_malloc_r>:
   3294c:	2303      	movs	r3, #3
   3294e:	b570      	push	{r4, r5, r6, lr}
   32950:	1ccd      	adds	r5, r1, #3
   32952:	439d      	bics	r5, r3
   32954:	3508      	adds	r5, #8
   32956:	0006      	movs	r6, r0
   32958:	2d0c      	cmp	r5, #12
   3295a:	d21e      	bcs.n	3299a <_malloc_r+0x4e>
   3295c:	250c      	movs	r5, #12
   3295e:	42a9      	cmp	r1, r5
   32960:	d81d      	bhi.n	3299e <_malloc_r+0x52>
   32962:	0030      	movs	r0, r6
   32964:	f000 fdb0 	bl	334c8 <__malloc_lock>
   32968:	4a25      	ldr	r2, [pc, #148]	; (32a00 <_malloc_r+0xb4>)
   3296a:	6814      	ldr	r4, [r2, #0]
   3296c:	0021      	movs	r1, r4
   3296e:	2900      	cmp	r1, #0
   32970:	d119      	bne.n	329a6 <_malloc_r+0x5a>
   32972:	4c24      	ldr	r4, [pc, #144]	; (32a04 <_malloc_r+0xb8>)
   32974:	6823      	ldr	r3, [r4, #0]
   32976:	2b00      	cmp	r3, #0
   32978:	d103      	bne.n	32982 <_malloc_r+0x36>
   3297a:	0030      	movs	r0, r6
   3297c:	f000 f8ae 	bl	32adc <_sbrk_r>
   32980:	6020      	str	r0, [r4, #0]
   32982:	0029      	movs	r1, r5
   32984:	0030      	movs	r0, r6
   32986:	f000 f8a9 	bl	32adc <_sbrk_r>
   3298a:	1c43      	adds	r3, r0, #1
   3298c:	d12c      	bne.n	329e8 <_malloc_r+0x9c>
   3298e:	230c      	movs	r3, #12
   32990:	0030      	movs	r0, r6
   32992:	6033      	str	r3, [r6, #0]
   32994:	f000 fd99 	bl	334ca <__malloc_unlock>
   32998:	e003      	b.n	329a2 <_malloc_r+0x56>
   3299a:	2d00      	cmp	r5, #0
   3299c:	dadf      	bge.n	3295e <_malloc_r+0x12>
   3299e:	230c      	movs	r3, #12
   329a0:	6033      	str	r3, [r6, #0]
   329a2:	2000      	movs	r0, #0
   329a4:	bd70      	pop	{r4, r5, r6, pc}
   329a6:	680b      	ldr	r3, [r1, #0]
   329a8:	1b5b      	subs	r3, r3, r5
   329aa:	d41a      	bmi.n	329e2 <_malloc_r+0x96>
   329ac:	2b0b      	cmp	r3, #11
   329ae:	d903      	bls.n	329b8 <_malloc_r+0x6c>
   329b0:	600b      	str	r3, [r1, #0]
   329b2:	18cc      	adds	r4, r1, r3
   329b4:	6025      	str	r5, [r4, #0]
   329b6:	e003      	b.n	329c0 <_malloc_r+0x74>
   329b8:	428c      	cmp	r4, r1
   329ba:	d10e      	bne.n	329da <_malloc_r+0x8e>
   329bc:	6863      	ldr	r3, [r4, #4]
   329be:	6013      	str	r3, [r2, #0]
   329c0:	0030      	movs	r0, r6
   329c2:	f000 fd82 	bl	334ca <__malloc_unlock>
   329c6:	0020      	movs	r0, r4
   329c8:	2207      	movs	r2, #7
   329ca:	300b      	adds	r0, #11
   329cc:	1d23      	adds	r3, r4, #4
   329ce:	4390      	bics	r0, r2
   329d0:	1ac3      	subs	r3, r0, r3
   329d2:	d0e7      	beq.n	329a4 <_malloc_r+0x58>
   329d4:	425a      	negs	r2, r3
   329d6:	50e2      	str	r2, [r4, r3]
   329d8:	e7e4      	b.n	329a4 <_malloc_r+0x58>
   329da:	684b      	ldr	r3, [r1, #4]
   329dc:	6063      	str	r3, [r4, #4]
   329de:	000c      	movs	r4, r1
   329e0:	e7ee      	b.n	329c0 <_malloc_r+0x74>
   329e2:	000c      	movs	r4, r1
   329e4:	6849      	ldr	r1, [r1, #4]
   329e6:	e7c2      	b.n	3296e <_malloc_r+0x22>
   329e8:	2303      	movs	r3, #3
   329ea:	1cc4      	adds	r4, r0, #3
   329ec:	439c      	bics	r4, r3
   329ee:	42a0      	cmp	r0, r4
   329f0:	d0e0      	beq.n	329b4 <_malloc_r+0x68>
   329f2:	1a21      	subs	r1, r4, r0
   329f4:	0030      	movs	r0, r6
   329f6:	f000 f871 	bl	32adc <_sbrk_r>
   329fa:	1c43      	adds	r3, r0, #1
   329fc:	d1da      	bne.n	329b4 <_malloc_r+0x68>
   329fe:	e7c6      	b.n	3298e <_malloc_r+0x42>
   32a00:	200042b4 	.word	0x200042b4
   32a04:	200042b8 	.word	0x200042b8

00032a08 <_puts_r>:
   32a08:	b570      	push	{r4, r5, r6, lr}
   32a0a:	0005      	movs	r5, r0
   32a0c:	000e      	movs	r6, r1
   32a0e:	2800      	cmp	r0, #0
   32a10:	d004      	beq.n	32a1c <_puts_r+0x14>
   32a12:	6983      	ldr	r3, [r0, #24]
   32a14:	2b00      	cmp	r3, #0
   32a16:	d101      	bne.n	32a1c <_puts_r+0x14>
   32a18:	f000 fc32 	bl	33280 <__sinit>
   32a1c:	69ab      	ldr	r3, [r5, #24]
   32a1e:	68ac      	ldr	r4, [r5, #8]
   32a20:	2b00      	cmp	r3, #0
   32a22:	d102      	bne.n	32a2a <_puts_r+0x22>
   32a24:	0028      	movs	r0, r5
   32a26:	f000 fc2b 	bl	33280 <__sinit>
   32a2a:	4b24      	ldr	r3, [pc, #144]	; (32abc <_puts_r+0xb4>)
   32a2c:	429c      	cmp	r4, r3
   32a2e:	d10f      	bne.n	32a50 <_puts_r+0x48>
   32a30:	686c      	ldr	r4, [r5, #4]
   32a32:	89a3      	ldrh	r3, [r4, #12]
   32a34:	071b      	lsls	r3, r3, #28
   32a36:	d502      	bpl.n	32a3e <_puts_r+0x36>
   32a38:	6923      	ldr	r3, [r4, #16]
   32a3a:	2b00      	cmp	r3, #0
   32a3c:	d120      	bne.n	32a80 <_puts_r+0x78>
   32a3e:	0021      	movs	r1, r4
   32a40:	0028      	movs	r0, r5
   32a42:	f000 faaf 	bl	32fa4 <__swsetup_r>
   32a46:	2800      	cmp	r0, #0
   32a48:	d01a      	beq.n	32a80 <_puts_r+0x78>
   32a4a:	2001      	movs	r0, #1
   32a4c:	4240      	negs	r0, r0
   32a4e:	bd70      	pop	{r4, r5, r6, pc}
   32a50:	4b1b      	ldr	r3, [pc, #108]	; (32ac0 <_puts_r+0xb8>)
   32a52:	429c      	cmp	r4, r3
   32a54:	d101      	bne.n	32a5a <_puts_r+0x52>
   32a56:	68ac      	ldr	r4, [r5, #8]
   32a58:	e7eb      	b.n	32a32 <_puts_r+0x2a>
   32a5a:	4b1a      	ldr	r3, [pc, #104]	; (32ac4 <_puts_r+0xbc>)
   32a5c:	429c      	cmp	r4, r3
   32a5e:	d1e8      	bne.n	32a32 <_puts_r+0x2a>
   32a60:	68ec      	ldr	r4, [r5, #12]
   32a62:	e7e6      	b.n	32a32 <_puts_r+0x2a>
   32a64:	3b01      	subs	r3, #1
   32a66:	3601      	adds	r6, #1
   32a68:	60a3      	str	r3, [r4, #8]
   32a6a:	2b00      	cmp	r3, #0
   32a6c:	da04      	bge.n	32a78 <_puts_r+0x70>
   32a6e:	69a2      	ldr	r2, [r4, #24]
   32a70:	4293      	cmp	r3, r2
   32a72:	db16      	blt.n	32aa2 <_puts_r+0x9a>
   32a74:	290a      	cmp	r1, #10
   32a76:	d014      	beq.n	32aa2 <_puts_r+0x9a>
   32a78:	6823      	ldr	r3, [r4, #0]
   32a7a:	1c5a      	adds	r2, r3, #1
   32a7c:	6022      	str	r2, [r4, #0]
   32a7e:	7019      	strb	r1, [r3, #0]
   32a80:	7831      	ldrb	r1, [r6, #0]
   32a82:	68a3      	ldr	r3, [r4, #8]
   32a84:	2900      	cmp	r1, #0
   32a86:	d1ed      	bne.n	32a64 <_puts_r+0x5c>
   32a88:	3b01      	subs	r3, #1
   32a8a:	60a3      	str	r3, [r4, #8]
   32a8c:	2b00      	cmp	r3, #0
   32a8e:	da0f      	bge.n	32ab0 <_puts_r+0xa8>
   32a90:	0022      	movs	r2, r4
   32a92:	310a      	adds	r1, #10
   32a94:	0028      	movs	r0, r5
   32a96:	f000 fa2f 	bl	32ef8 <__swbuf_r>
   32a9a:	1c43      	adds	r3, r0, #1
   32a9c:	d0d5      	beq.n	32a4a <_puts_r+0x42>
   32a9e:	200a      	movs	r0, #10
   32aa0:	e7d5      	b.n	32a4e <_puts_r+0x46>
   32aa2:	0022      	movs	r2, r4
   32aa4:	0028      	movs	r0, r5
   32aa6:	f000 fa27 	bl	32ef8 <__swbuf_r>
   32aaa:	1c43      	adds	r3, r0, #1
   32aac:	d1e8      	bne.n	32a80 <_puts_r+0x78>
   32aae:	e7cc      	b.n	32a4a <_puts_r+0x42>
   32ab0:	200a      	movs	r0, #10
   32ab2:	6823      	ldr	r3, [r4, #0]
   32ab4:	1c5a      	adds	r2, r3, #1
   32ab6:	6022      	str	r2, [r4, #0]
   32ab8:	7018      	strb	r0, [r3, #0]
   32aba:	e7c8      	b.n	32a4e <_puts_r+0x46>
   32abc:	00038498 	.word	0x00038498
   32ac0:	000384b8 	.word	0x000384b8
   32ac4:	00038478 	.word	0x00038478

00032ac8 <puts>:
   32ac8:	b510      	push	{r4, lr}
   32aca:	4b03      	ldr	r3, [pc, #12]	; (32ad8 <puts+0x10>)
   32acc:	0001      	movs	r1, r0
   32ace:	6818      	ldr	r0, [r3, #0]
   32ad0:	f7ff ff9a 	bl	32a08 <_puts_r>
   32ad4:	bd10      	pop	{r4, pc}
   32ad6:	46c0      	nop			; (mov r8, r8)
   32ad8:	200000d4 	.word	0x200000d4

00032adc <_sbrk_r>:
   32adc:	2300      	movs	r3, #0
   32ade:	b570      	push	{r4, r5, r6, lr}
   32ae0:	4c06      	ldr	r4, [pc, #24]	; (32afc <_sbrk_r+0x20>)
   32ae2:	0005      	movs	r5, r0
   32ae4:	0008      	movs	r0, r1
   32ae6:	6023      	str	r3, [r4, #0]
   32ae8:	f7f5 f8c6 	bl	27c78 <_sbrk>
   32aec:	1c43      	adds	r3, r0, #1
   32aee:	d103      	bne.n	32af8 <_sbrk_r+0x1c>
   32af0:	6823      	ldr	r3, [r4, #0]
   32af2:	2b00      	cmp	r3, #0
   32af4:	d000      	beq.n	32af8 <_sbrk_r+0x1c>
   32af6:	602b      	str	r3, [r5, #0]
   32af8:	bd70      	pop	{r4, r5, r6, pc}
   32afa:	46c0      	nop			; (mov r8, r8)
   32afc:	200056c0 	.word	0x200056c0

00032b00 <sniprintf>:
   32b00:	b40c      	push	{r2, r3}
   32b02:	b530      	push	{r4, r5, lr}
   32b04:	4b16      	ldr	r3, [pc, #88]	; (32b60 <sniprintf+0x60>)
   32b06:	b09d      	sub	sp, #116	; 0x74
   32b08:	1e0c      	subs	r4, r1, #0
   32b0a:	681d      	ldr	r5, [r3, #0]
   32b0c:	da08      	bge.n	32b20 <sniprintf+0x20>
   32b0e:	238b      	movs	r3, #139	; 0x8b
   32b10:	2001      	movs	r0, #1
   32b12:	602b      	str	r3, [r5, #0]
   32b14:	4240      	negs	r0, r0
   32b16:	b01d      	add	sp, #116	; 0x74
   32b18:	bc30      	pop	{r4, r5}
   32b1a:	bc08      	pop	{r3}
   32b1c:	b002      	add	sp, #8
   32b1e:	4718      	bx	r3
   32b20:	2382      	movs	r3, #130	; 0x82
   32b22:	a902      	add	r1, sp, #8
   32b24:	009b      	lsls	r3, r3, #2
   32b26:	818b      	strh	r3, [r1, #12]
   32b28:	2300      	movs	r3, #0
   32b2a:	9002      	str	r0, [sp, #8]
   32b2c:	6108      	str	r0, [r1, #16]
   32b2e:	429c      	cmp	r4, r3
   32b30:	d000      	beq.n	32b34 <sniprintf+0x34>
   32b32:	1e63      	subs	r3, r4, #1
   32b34:	608b      	str	r3, [r1, #8]
   32b36:	614b      	str	r3, [r1, #20]
   32b38:	2301      	movs	r3, #1
   32b3a:	425b      	negs	r3, r3
   32b3c:	81cb      	strh	r3, [r1, #14]
   32b3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   32b40:	ab21      	add	r3, sp, #132	; 0x84
   32b42:	0028      	movs	r0, r5
   32b44:	9301      	str	r3, [sp, #4]
   32b46:	f000 fd23 	bl	33590 <_svfiprintf_r>
   32b4a:	1c43      	adds	r3, r0, #1
   32b4c:	da01      	bge.n	32b52 <sniprintf+0x52>
   32b4e:	238b      	movs	r3, #139	; 0x8b
   32b50:	602b      	str	r3, [r5, #0]
   32b52:	2c00      	cmp	r4, #0
   32b54:	d0df      	beq.n	32b16 <sniprintf+0x16>
   32b56:	2300      	movs	r3, #0
   32b58:	9a02      	ldr	r2, [sp, #8]
   32b5a:	7013      	strb	r3, [r2, #0]
   32b5c:	e7db      	b.n	32b16 <sniprintf+0x16>
   32b5e:	46c0      	nop			; (mov r8, r8)
   32b60:	200000d4 	.word	0x200000d4

00032b64 <siprintf>:
   32b64:	b40e      	push	{r1, r2, r3}
   32b66:	b510      	push	{r4, lr}
   32b68:	b09d      	sub	sp, #116	; 0x74
   32b6a:	a902      	add	r1, sp, #8
   32b6c:	9002      	str	r0, [sp, #8]
   32b6e:	6108      	str	r0, [r1, #16]
   32b70:	480b      	ldr	r0, [pc, #44]	; (32ba0 <siprintf+0x3c>)
   32b72:	2482      	movs	r4, #130	; 0x82
   32b74:	6088      	str	r0, [r1, #8]
   32b76:	6148      	str	r0, [r1, #20]
   32b78:	2001      	movs	r0, #1
   32b7a:	4240      	negs	r0, r0
   32b7c:	ab1f      	add	r3, sp, #124	; 0x7c
   32b7e:	81c8      	strh	r0, [r1, #14]
   32b80:	4808      	ldr	r0, [pc, #32]	; (32ba4 <siprintf+0x40>)
   32b82:	cb04      	ldmia	r3!, {r2}
   32b84:	00a4      	lsls	r4, r4, #2
   32b86:	6800      	ldr	r0, [r0, #0]
   32b88:	9301      	str	r3, [sp, #4]
   32b8a:	818c      	strh	r4, [r1, #12]
   32b8c:	f000 fd00 	bl	33590 <_svfiprintf_r>
   32b90:	2300      	movs	r3, #0
   32b92:	9a02      	ldr	r2, [sp, #8]
   32b94:	7013      	strb	r3, [r2, #0]
   32b96:	b01d      	add	sp, #116	; 0x74
   32b98:	bc10      	pop	{r4}
   32b9a:	bc08      	pop	{r3}
   32b9c:	b003      	add	sp, #12
   32b9e:	4718      	bx	r3
   32ba0:	7fffffff 	.word	0x7fffffff
   32ba4:	200000d4 	.word	0x200000d4

00032ba8 <strcasecmp>:
   32ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32baa:	0007      	movs	r7, r0
   32bac:	000e      	movs	r6, r1
   32bae:	783c      	ldrb	r4, [r7, #0]
   32bb0:	f000 fbfe 	bl	333b0 <__locale_ctype_ptr>
   32bb4:	2203      	movs	r2, #3
   32bb6:	1900      	adds	r0, r0, r4
   32bb8:	7843      	ldrb	r3, [r0, #1]
   32bba:	4013      	ands	r3, r2
   32bbc:	2b01      	cmp	r3, #1
   32bbe:	d100      	bne.n	32bc2 <strcasecmp+0x1a>
   32bc0:	3420      	adds	r4, #32
   32bc2:	7835      	ldrb	r5, [r6, #0]
   32bc4:	f000 fbf4 	bl	333b0 <__locale_ctype_ptr>
   32bc8:	2203      	movs	r2, #3
   32bca:	1940      	adds	r0, r0, r5
   32bcc:	7843      	ldrb	r3, [r0, #1]
   32bce:	4013      	ands	r3, r2
   32bd0:	2b01      	cmp	r3, #1
   32bd2:	d100      	bne.n	32bd6 <strcasecmp+0x2e>
   32bd4:	3520      	adds	r5, #32
   32bd6:	1b60      	subs	r0, r4, r5
   32bd8:	d103      	bne.n	32be2 <strcasecmp+0x3a>
   32bda:	3701      	adds	r7, #1
   32bdc:	3601      	adds	r6, #1
   32bde:	2d00      	cmp	r5, #0
   32be0:	d1e5      	bne.n	32bae <strcasecmp+0x6>
   32be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00032be4 <strcat>:
   32be4:	0002      	movs	r2, r0
   32be6:	b510      	push	{r4, lr}
   32be8:	7813      	ldrb	r3, [r2, #0]
   32bea:	2b00      	cmp	r3, #0
   32bec:	d105      	bne.n	32bfa <strcat+0x16>
   32bee:	5ccc      	ldrb	r4, [r1, r3]
   32bf0:	54d4      	strb	r4, [r2, r3]
   32bf2:	3301      	adds	r3, #1
   32bf4:	2c00      	cmp	r4, #0
   32bf6:	d1fa      	bne.n	32bee <strcat+0xa>
   32bf8:	bd10      	pop	{r4, pc}
   32bfa:	3201      	adds	r2, #1
   32bfc:	e7f4      	b.n	32be8 <strcat+0x4>

00032bfe <strcmp>:
   32bfe:	7802      	ldrb	r2, [r0, #0]
   32c00:	780b      	ldrb	r3, [r1, #0]
   32c02:	2a00      	cmp	r2, #0
   32c04:	d003      	beq.n	32c0e <strcmp+0x10>
   32c06:	3001      	adds	r0, #1
   32c08:	3101      	adds	r1, #1
   32c0a:	429a      	cmp	r2, r3
   32c0c:	d0f7      	beq.n	32bfe <strcmp>
   32c0e:	1ad0      	subs	r0, r2, r3
   32c10:	4770      	bx	lr

00032c12 <strcpy>:
   32c12:	1c03      	adds	r3, r0, #0
   32c14:	780a      	ldrb	r2, [r1, #0]
   32c16:	3101      	adds	r1, #1
   32c18:	701a      	strb	r2, [r3, #0]
   32c1a:	3301      	adds	r3, #1
   32c1c:	2a00      	cmp	r2, #0
   32c1e:	d1f9      	bne.n	32c14 <strcpy+0x2>
   32c20:	4770      	bx	lr
	...

00032c24 <strdup>:
   32c24:	b510      	push	{r4, lr}
   32c26:	4b03      	ldr	r3, [pc, #12]	; (32c34 <strdup+0x10>)
   32c28:	0001      	movs	r1, r0
   32c2a:	6818      	ldr	r0, [r3, #0]
   32c2c:	f000 f804 	bl	32c38 <_strdup_r>
   32c30:	bd10      	pop	{r4, pc}
   32c32:	46c0      	nop			; (mov r8, r8)
   32c34:	200000d4 	.word	0x200000d4

00032c38 <_strdup_r>:
   32c38:	b570      	push	{r4, r5, r6, lr}
   32c3a:	0005      	movs	r5, r0
   32c3c:	0008      	movs	r0, r1
   32c3e:	000e      	movs	r6, r1
   32c40:	f000 f80d 	bl	32c5e <strlen>
   32c44:	1c44      	adds	r4, r0, #1
   32c46:	0021      	movs	r1, r4
   32c48:	0028      	movs	r0, r5
   32c4a:	f7ff fe7f 	bl	3294c <_malloc_r>
   32c4e:	1e05      	subs	r5, r0, #0
   32c50:	d003      	beq.n	32c5a <_strdup_r+0x22>
   32c52:	0022      	movs	r2, r4
   32c54:	0031      	movs	r1, r6
   32c56:	f7ff fe0b 	bl	32870 <memcpy>
   32c5a:	0028      	movs	r0, r5
   32c5c:	bd70      	pop	{r4, r5, r6, pc}

00032c5e <strlen>:
   32c5e:	2300      	movs	r3, #0
   32c60:	5cc2      	ldrb	r2, [r0, r3]
   32c62:	3301      	adds	r3, #1
   32c64:	2a00      	cmp	r2, #0
   32c66:	d1fb      	bne.n	32c60 <strlen+0x2>
   32c68:	1e58      	subs	r0, r3, #1
   32c6a:	4770      	bx	lr

00032c6c <strncasecmp>:
   32c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32c6e:	0005      	movs	r5, r0
   32c70:	000f      	movs	r7, r1
   32c72:	1883      	adds	r3, r0, r2
   32c74:	9301      	str	r3, [sp, #4]
   32c76:	9b01      	ldr	r3, [sp, #4]
   32c78:	429d      	cmp	r5, r3
   32c7a:	d019      	beq.n	32cb0 <strncasecmp+0x44>
   32c7c:	782c      	ldrb	r4, [r5, #0]
   32c7e:	f000 fb97 	bl	333b0 <__locale_ctype_ptr>
   32c82:	2203      	movs	r2, #3
   32c84:	1900      	adds	r0, r0, r4
   32c86:	7843      	ldrb	r3, [r0, #1]
   32c88:	4013      	ands	r3, r2
   32c8a:	2b01      	cmp	r3, #1
   32c8c:	d100      	bne.n	32c90 <strncasecmp+0x24>
   32c8e:	3420      	adds	r4, #32
   32c90:	783e      	ldrb	r6, [r7, #0]
   32c92:	f000 fb8d 	bl	333b0 <__locale_ctype_ptr>
   32c96:	2203      	movs	r2, #3
   32c98:	1980      	adds	r0, r0, r6
   32c9a:	7843      	ldrb	r3, [r0, #1]
   32c9c:	4013      	ands	r3, r2
   32c9e:	2b01      	cmp	r3, #1
   32ca0:	d100      	bne.n	32ca4 <strncasecmp+0x38>
   32ca2:	3620      	adds	r6, #32
   32ca4:	1ba0      	subs	r0, r4, r6
   32ca6:	d104      	bne.n	32cb2 <strncasecmp+0x46>
   32ca8:	3501      	adds	r5, #1
   32caa:	3701      	adds	r7, #1
   32cac:	2e00      	cmp	r6, #0
   32cae:	d1e2      	bne.n	32c76 <strncasecmp+0xa>
   32cb0:	2000      	movs	r0, #0
   32cb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00032cb4 <strncmp>:
   32cb4:	2300      	movs	r3, #0
   32cb6:	b530      	push	{r4, r5, lr}
   32cb8:	429a      	cmp	r2, r3
   32cba:	d00a      	beq.n	32cd2 <strncmp+0x1e>
   32cbc:	3a01      	subs	r2, #1
   32cbe:	5cc4      	ldrb	r4, [r0, r3]
   32cc0:	5ccd      	ldrb	r5, [r1, r3]
   32cc2:	42ac      	cmp	r4, r5
   32cc4:	d104      	bne.n	32cd0 <strncmp+0x1c>
   32cc6:	429a      	cmp	r2, r3
   32cc8:	d002      	beq.n	32cd0 <strncmp+0x1c>
   32cca:	3301      	adds	r3, #1
   32ccc:	2c00      	cmp	r4, #0
   32cce:	d1f6      	bne.n	32cbe <strncmp+0xa>
   32cd0:	1b63      	subs	r3, r4, r5
   32cd2:	0018      	movs	r0, r3
   32cd4:	bd30      	pop	{r4, r5, pc}

00032cd6 <strncpy>:
   32cd6:	b570      	push	{r4, r5, r6, lr}
   32cd8:	0004      	movs	r4, r0
   32cda:	2a00      	cmp	r2, #0
   32cdc:	d100      	bne.n	32ce0 <strncpy+0xa>
   32cde:	bd70      	pop	{r4, r5, r6, pc}
   32ce0:	780d      	ldrb	r5, [r1, #0]
   32ce2:	1e56      	subs	r6, r2, #1
   32ce4:	1c63      	adds	r3, r4, #1
   32ce6:	7025      	strb	r5, [r4, #0]
   32ce8:	3101      	adds	r1, #1
   32cea:	2d00      	cmp	r5, #0
   32cec:	d105      	bne.n	32cfa <strncpy+0x24>
   32cee:	18a4      	adds	r4, r4, r2
   32cf0:	429c      	cmp	r4, r3
   32cf2:	d0f4      	beq.n	32cde <strncpy+0x8>
   32cf4:	701d      	strb	r5, [r3, #0]
   32cf6:	3301      	adds	r3, #1
   32cf8:	e7fa      	b.n	32cf0 <strncpy+0x1a>
   32cfa:	001c      	movs	r4, r3
   32cfc:	0032      	movs	r2, r6
   32cfe:	e7ec      	b.n	32cda <strncpy+0x4>

00032d00 <strrchr>:
   32d00:	b570      	push	{r4, r5, r6, lr}
   32d02:	000d      	movs	r5, r1
   32d04:	2400      	movs	r4, #0
   32d06:	2900      	cmp	r1, #0
   32d08:	d105      	bne.n	32d16 <strrchr+0x16>
   32d0a:	f000 ff19 	bl	33b40 <strchr>
   32d0e:	0004      	movs	r4, r0
   32d10:	e006      	b.n	32d20 <strrchr+0x20>
   32d12:	001c      	movs	r4, r3
   32d14:	1c58      	adds	r0, r3, #1
   32d16:	0029      	movs	r1, r5
   32d18:	f000 ff12 	bl	33b40 <strchr>
   32d1c:	1e03      	subs	r3, r0, #0
   32d1e:	d1f8      	bne.n	32d12 <strrchr+0x12>
   32d20:	0020      	movs	r0, r4
   32d22:	bd70      	pop	{r4, r5, r6, pc}

00032d24 <strstr>:
   32d24:	b510      	push	{r4, lr}
   32d26:	0002      	movs	r2, r0
   32d28:	7800      	ldrb	r0, [r0, #0]
   32d2a:	2800      	cmp	r0, #0
   32d2c:	d104      	bne.n	32d38 <strstr+0x14>
   32d2e:	7809      	ldrb	r1, [r1, #0]
   32d30:	2900      	cmp	r1, #0
   32d32:	d00d      	beq.n	32d50 <strstr+0x2c>
   32d34:	bd10      	pop	{r4, pc}
   32d36:	3201      	adds	r2, #1
   32d38:	7810      	ldrb	r0, [r2, #0]
   32d3a:	2800      	cmp	r0, #0
   32d3c:	d0fa      	beq.n	32d34 <strstr+0x10>
   32d3e:	2300      	movs	r3, #0
   32d40:	5cc8      	ldrb	r0, [r1, r3]
   32d42:	2800      	cmp	r0, #0
   32d44:	d004      	beq.n	32d50 <strstr+0x2c>
   32d46:	5cd4      	ldrb	r4, [r2, r3]
   32d48:	4284      	cmp	r4, r0
   32d4a:	d1f4      	bne.n	32d36 <strstr+0x12>
   32d4c:	3301      	adds	r3, #1
   32d4e:	e7f7      	b.n	32d40 <strstr+0x1c>
   32d50:	0010      	movs	r0, r2
   32d52:	e7ef      	b.n	32d34 <strstr+0x10>

00032d54 <_strtol_l.isra.0>:
   32d54:	b5f0      	push	{r4, r5, r6, r7, lr}
   32d56:	001f      	movs	r7, r3
   32d58:	000e      	movs	r6, r1
   32d5a:	b087      	sub	sp, #28
   32d5c:	9005      	str	r0, [sp, #20]
   32d5e:	9103      	str	r1, [sp, #12]
   32d60:	9202      	str	r2, [sp, #8]
   32d62:	980c      	ldr	r0, [sp, #48]	; 0x30
   32d64:	7834      	ldrb	r4, [r6, #0]
   32d66:	f000 fb20 	bl	333aa <__locale_ctype_ptr_l>
   32d6a:	2208      	movs	r2, #8
   32d6c:	1900      	adds	r0, r0, r4
   32d6e:	7843      	ldrb	r3, [r0, #1]
   32d70:	1c75      	adds	r5, r6, #1
   32d72:	4013      	ands	r3, r2
   32d74:	d10c      	bne.n	32d90 <_strtol_l.isra.0+0x3c>
   32d76:	2c2d      	cmp	r4, #45	; 0x2d
   32d78:	d10c      	bne.n	32d94 <_strtol_l.isra.0+0x40>
   32d7a:	3301      	adds	r3, #1
   32d7c:	782c      	ldrb	r4, [r5, #0]
   32d7e:	9301      	str	r3, [sp, #4]
   32d80:	1cb5      	adds	r5, r6, #2
   32d82:	2f00      	cmp	r7, #0
   32d84:	d00c      	beq.n	32da0 <_strtol_l.isra.0+0x4c>
   32d86:	2f10      	cmp	r7, #16
   32d88:	d114      	bne.n	32db4 <_strtol_l.isra.0+0x60>
   32d8a:	2c30      	cmp	r4, #48	; 0x30
   32d8c:	d00a      	beq.n	32da4 <_strtol_l.isra.0+0x50>
   32d8e:	e011      	b.n	32db4 <_strtol_l.isra.0+0x60>
   32d90:	002e      	movs	r6, r5
   32d92:	e7e6      	b.n	32d62 <_strtol_l.isra.0+0xe>
   32d94:	9301      	str	r3, [sp, #4]
   32d96:	2c2b      	cmp	r4, #43	; 0x2b
   32d98:	d1f3      	bne.n	32d82 <_strtol_l.isra.0+0x2e>
   32d9a:	782c      	ldrb	r4, [r5, #0]
   32d9c:	1cb5      	adds	r5, r6, #2
   32d9e:	e7f0      	b.n	32d82 <_strtol_l.isra.0+0x2e>
   32da0:	2c30      	cmp	r4, #48	; 0x30
   32da2:	d12f      	bne.n	32e04 <_strtol_l.isra.0+0xb0>
   32da4:	2220      	movs	r2, #32
   32da6:	782b      	ldrb	r3, [r5, #0]
   32da8:	4393      	bics	r3, r2
   32daa:	2b58      	cmp	r3, #88	; 0x58
   32dac:	d151      	bne.n	32e52 <_strtol_l.isra.0+0xfe>
   32dae:	2710      	movs	r7, #16
   32db0:	786c      	ldrb	r4, [r5, #1]
   32db2:	3502      	adds	r5, #2
   32db4:	9b01      	ldr	r3, [sp, #4]
   32db6:	4a29      	ldr	r2, [pc, #164]	; (32e5c <_strtol_l.isra.0+0x108>)
   32db8:	0039      	movs	r1, r7
   32dba:	189e      	adds	r6, r3, r2
   32dbc:	0030      	movs	r0, r6
   32dbe:	f7fd f89b 	bl	2fef8 <__aeabi_uidivmod>
   32dc2:	0030      	movs	r0, r6
   32dc4:	9104      	str	r1, [sp, #16]
   32dc6:	0039      	movs	r1, r7
   32dc8:	f7fd f810 	bl	2fdec <__udivsi3>
   32dcc:	2101      	movs	r1, #1
   32dce:	2300      	movs	r3, #0
   32dd0:	4249      	negs	r1, r1
   32dd2:	0002      	movs	r2, r0
   32dd4:	468c      	mov	ip, r1
   32dd6:	0018      	movs	r0, r3
   32dd8:	0021      	movs	r1, r4
   32dda:	3930      	subs	r1, #48	; 0x30
   32ddc:	2909      	cmp	r1, #9
   32dde:	d813      	bhi.n	32e08 <_strtol_l.isra.0+0xb4>
   32de0:	000c      	movs	r4, r1
   32de2:	42a7      	cmp	r7, r4
   32de4:	dd1c      	ble.n	32e20 <_strtol_l.isra.0+0xcc>
   32de6:	1c59      	adds	r1, r3, #1
   32de8:	d009      	beq.n	32dfe <_strtol_l.isra.0+0xaa>
   32dea:	4663      	mov	r3, ip
   32dec:	4282      	cmp	r2, r0
   32dee:	d306      	bcc.n	32dfe <_strtol_l.isra.0+0xaa>
   32df0:	d102      	bne.n	32df8 <_strtol_l.isra.0+0xa4>
   32df2:	9904      	ldr	r1, [sp, #16]
   32df4:	42a1      	cmp	r1, r4
   32df6:	db02      	blt.n	32dfe <_strtol_l.isra.0+0xaa>
   32df8:	2301      	movs	r3, #1
   32dfa:	4378      	muls	r0, r7
   32dfc:	1820      	adds	r0, r4, r0
   32dfe:	782c      	ldrb	r4, [r5, #0]
   32e00:	3501      	adds	r5, #1
   32e02:	e7e9      	b.n	32dd8 <_strtol_l.isra.0+0x84>
   32e04:	270a      	movs	r7, #10
   32e06:	e7d5      	b.n	32db4 <_strtol_l.isra.0+0x60>
   32e08:	0021      	movs	r1, r4
   32e0a:	3941      	subs	r1, #65	; 0x41
   32e0c:	2919      	cmp	r1, #25
   32e0e:	d801      	bhi.n	32e14 <_strtol_l.isra.0+0xc0>
   32e10:	3c37      	subs	r4, #55	; 0x37
   32e12:	e7e6      	b.n	32de2 <_strtol_l.isra.0+0x8e>
   32e14:	0021      	movs	r1, r4
   32e16:	3961      	subs	r1, #97	; 0x61
   32e18:	2919      	cmp	r1, #25
   32e1a:	d801      	bhi.n	32e20 <_strtol_l.isra.0+0xcc>
   32e1c:	3c57      	subs	r4, #87	; 0x57
   32e1e:	e7e0      	b.n	32de2 <_strtol_l.isra.0+0x8e>
   32e20:	1c5a      	adds	r2, r3, #1
   32e22:	d108      	bne.n	32e36 <_strtol_l.isra.0+0xe2>
   32e24:	9a05      	ldr	r2, [sp, #20]
   32e26:	3323      	adds	r3, #35	; 0x23
   32e28:	6013      	str	r3, [r2, #0]
   32e2a:	9b02      	ldr	r3, [sp, #8]
   32e2c:	0030      	movs	r0, r6
   32e2e:	2b00      	cmp	r3, #0
   32e30:	d10b      	bne.n	32e4a <_strtol_l.isra.0+0xf6>
   32e32:	b007      	add	sp, #28
   32e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32e36:	9a01      	ldr	r2, [sp, #4]
   32e38:	2a00      	cmp	r2, #0
   32e3a:	d000      	beq.n	32e3e <_strtol_l.isra.0+0xea>
   32e3c:	4240      	negs	r0, r0
   32e3e:	9a02      	ldr	r2, [sp, #8]
   32e40:	2a00      	cmp	r2, #0
   32e42:	d0f6      	beq.n	32e32 <_strtol_l.isra.0+0xde>
   32e44:	9a03      	ldr	r2, [sp, #12]
   32e46:	2b00      	cmp	r3, #0
   32e48:	d000      	beq.n	32e4c <_strtol_l.isra.0+0xf8>
   32e4a:	1e6a      	subs	r2, r5, #1
   32e4c:	9b02      	ldr	r3, [sp, #8]
   32e4e:	601a      	str	r2, [r3, #0]
   32e50:	e7ef      	b.n	32e32 <_strtol_l.isra.0+0xde>
   32e52:	2430      	movs	r4, #48	; 0x30
   32e54:	2f00      	cmp	r7, #0
   32e56:	d1ad      	bne.n	32db4 <_strtol_l.isra.0+0x60>
   32e58:	3708      	adds	r7, #8
   32e5a:	e7ab      	b.n	32db4 <_strtol_l.isra.0+0x60>
   32e5c:	7fffffff 	.word	0x7fffffff

00032e60 <strtol>:
   32e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32e62:	0013      	movs	r3, r2
   32e64:	4a06      	ldr	r2, [pc, #24]	; (32e80 <strtol+0x20>)
   32e66:	0005      	movs	r5, r0
   32e68:	6810      	ldr	r0, [r2, #0]
   32e6a:	6a04      	ldr	r4, [r0, #32]
   32e6c:	2c00      	cmp	r4, #0
   32e6e:	d100      	bne.n	32e72 <strtol+0x12>
   32e70:	4c04      	ldr	r4, [pc, #16]	; (32e84 <strtol+0x24>)
   32e72:	000a      	movs	r2, r1
   32e74:	9400      	str	r4, [sp, #0]
   32e76:	0029      	movs	r1, r5
   32e78:	f7ff ff6c 	bl	32d54 <_strtol_l.isra.0>
   32e7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   32e7e:	46c0      	nop			; (mov r8, r8)
   32e80:	200000d4 	.word	0x200000d4
   32e84:	20000138 	.word	0x20000138

00032e88 <_vsniprintf_r>:
   32e88:	b530      	push	{r4, r5, lr}
   32e8a:	0014      	movs	r4, r2
   32e8c:	b09b      	sub	sp, #108	; 0x6c
   32e8e:	0005      	movs	r5, r0
   32e90:	001a      	movs	r2, r3
   32e92:	2c00      	cmp	r4, #0
   32e94:	da05      	bge.n	32ea2 <_vsniprintf_r+0x1a>
   32e96:	238b      	movs	r3, #139	; 0x8b
   32e98:	6003      	str	r3, [r0, #0]
   32e9a:	2001      	movs	r0, #1
   32e9c:	4240      	negs	r0, r0
   32e9e:	b01b      	add	sp, #108	; 0x6c
   32ea0:	bd30      	pop	{r4, r5, pc}
   32ea2:	2382      	movs	r3, #130	; 0x82
   32ea4:	4668      	mov	r0, sp
   32ea6:	009b      	lsls	r3, r3, #2
   32ea8:	8183      	strh	r3, [r0, #12]
   32eaa:	2300      	movs	r3, #0
   32eac:	9100      	str	r1, [sp, #0]
   32eae:	9104      	str	r1, [sp, #16]
   32eb0:	429c      	cmp	r4, r3
   32eb2:	d000      	beq.n	32eb6 <_vsniprintf_r+0x2e>
   32eb4:	1e63      	subs	r3, r4, #1
   32eb6:	9302      	str	r3, [sp, #8]
   32eb8:	9305      	str	r3, [sp, #20]
   32eba:	2301      	movs	r3, #1
   32ebc:	4669      	mov	r1, sp
   32ebe:	425b      	negs	r3, r3
   32ec0:	81cb      	strh	r3, [r1, #14]
   32ec2:	0028      	movs	r0, r5
   32ec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   32ec6:	f000 fb63 	bl	33590 <_svfiprintf_r>
   32eca:	1c43      	adds	r3, r0, #1
   32ecc:	da01      	bge.n	32ed2 <_vsniprintf_r+0x4a>
   32ece:	238b      	movs	r3, #139	; 0x8b
   32ed0:	602b      	str	r3, [r5, #0]
   32ed2:	2c00      	cmp	r4, #0
   32ed4:	d0e3      	beq.n	32e9e <_vsniprintf_r+0x16>
   32ed6:	2300      	movs	r3, #0
   32ed8:	9a00      	ldr	r2, [sp, #0]
   32eda:	7013      	strb	r3, [r2, #0]
   32edc:	e7df      	b.n	32e9e <_vsniprintf_r+0x16>
	...

00032ee0 <vsniprintf>:
   32ee0:	b507      	push	{r0, r1, r2, lr}
   32ee2:	9300      	str	r3, [sp, #0]
   32ee4:	0013      	movs	r3, r2
   32ee6:	000a      	movs	r2, r1
   32ee8:	0001      	movs	r1, r0
   32eea:	4802      	ldr	r0, [pc, #8]	; (32ef4 <vsniprintf+0x14>)
   32eec:	6800      	ldr	r0, [r0, #0]
   32eee:	f7ff ffcb 	bl	32e88 <_vsniprintf_r>
   32ef2:	bd0e      	pop	{r1, r2, r3, pc}
   32ef4:	200000d4 	.word	0x200000d4

00032ef8 <__swbuf_r>:
   32ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32efa:	0005      	movs	r5, r0
   32efc:	000e      	movs	r6, r1
   32efe:	0014      	movs	r4, r2
   32f00:	2800      	cmp	r0, #0
   32f02:	d004      	beq.n	32f0e <__swbuf_r+0x16>
   32f04:	6983      	ldr	r3, [r0, #24]
   32f06:	2b00      	cmp	r3, #0
   32f08:	d101      	bne.n	32f0e <__swbuf_r+0x16>
   32f0a:	f000 f9b9 	bl	33280 <__sinit>
   32f0e:	4b22      	ldr	r3, [pc, #136]	; (32f98 <__swbuf_r+0xa0>)
   32f10:	429c      	cmp	r4, r3
   32f12:	d12d      	bne.n	32f70 <__swbuf_r+0x78>
   32f14:	686c      	ldr	r4, [r5, #4]
   32f16:	69a3      	ldr	r3, [r4, #24]
   32f18:	60a3      	str	r3, [r4, #8]
   32f1a:	89a3      	ldrh	r3, [r4, #12]
   32f1c:	071b      	lsls	r3, r3, #28
   32f1e:	d531      	bpl.n	32f84 <__swbuf_r+0x8c>
   32f20:	6923      	ldr	r3, [r4, #16]
   32f22:	2b00      	cmp	r3, #0
   32f24:	d02e      	beq.n	32f84 <__swbuf_r+0x8c>
   32f26:	6823      	ldr	r3, [r4, #0]
   32f28:	6922      	ldr	r2, [r4, #16]
   32f2a:	b2f7      	uxtb	r7, r6
   32f2c:	1a98      	subs	r0, r3, r2
   32f2e:	6963      	ldr	r3, [r4, #20]
   32f30:	b2f6      	uxtb	r6, r6
   32f32:	4298      	cmp	r0, r3
   32f34:	db05      	blt.n	32f42 <__swbuf_r+0x4a>
   32f36:	0021      	movs	r1, r4
   32f38:	0028      	movs	r0, r5
   32f3a:	f000 f933 	bl	331a4 <_fflush_r>
   32f3e:	2800      	cmp	r0, #0
   32f40:	d126      	bne.n	32f90 <__swbuf_r+0x98>
   32f42:	68a3      	ldr	r3, [r4, #8]
   32f44:	3001      	adds	r0, #1
   32f46:	3b01      	subs	r3, #1
   32f48:	60a3      	str	r3, [r4, #8]
   32f4a:	6823      	ldr	r3, [r4, #0]
   32f4c:	1c5a      	adds	r2, r3, #1
   32f4e:	6022      	str	r2, [r4, #0]
   32f50:	701f      	strb	r7, [r3, #0]
   32f52:	6963      	ldr	r3, [r4, #20]
   32f54:	4298      	cmp	r0, r3
   32f56:	d004      	beq.n	32f62 <__swbuf_r+0x6a>
   32f58:	89a3      	ldrh	r3, [r4, #12]
   32f5a:	07db      	lsls	r3, r3, #31
   32f5c:	d51a      	bpl.n	32f94 <__swbuf_r+0x9c>
   32f5e:	2e0a      	cmp	r6, #10
   32f60:	d118      	bne.n	32f94 <__swbuf_r+0x9c>
   32f62:	0021      	movs	r1, r4
   32f64:	0028      	movs	r0, r5
   32f66:	f000 f91d 	bl	331a4 <_fflush_r>
   32f6a:	2800      	cmp	r0, #0
   32f6c:	d012      	beq.n	32f94 <__swbuf_r+0x9c>
   32f6e:	e00f      	b.n	32f90 <__swbuf_r+0x98>
   32f70:	4b0a      	ldr	r3, [pc, #40]	; (32f9c <__swbuf_r+0xa4>)
   32f72:	429c      	cmp	r4, r3
   32f74:	d101      	bne.n	32f7a <__swbuf_r+0x82>
   32f76:	68ac      	ldr	r4, [r5, #8]
   32f78:	e7cd      	b.n	32f16 <__swbuf_r+0x1e>
   32f7a:	4b09      	ldr	r3, [pc, #36]	; (32fa0 <__swbuf_r+0xa8>)
   32f7c:	429c      	cmp	r4, r3
   32f7e:	d1ca      	bne.n	32f16 <__swbuf_r+0x1e>
   32f80:	68ec      	ldr	r4, [r5, #12]
   32f82:	e7c8      	b.n	32f16 <__swbuf_r+0x1e>
   32f84:	0021      	movs	r1, r4
   32f86:	0028      	movs	r0, r5
   32f88:	f000 f80c 	bl	32fa4 <__swsetup_r>
   32f8c:	2800      	cmp	r0, #0
   32f8e:	d0ca      	beq.n	32f26 <__swbuf_r+0x2e>
   32f90:	2601      	movs	r6, #1
   32f92:	4276      	negs	r6, r6
   32f94:	0030      	movs	r0, r6
   32f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32f98:	00038498 	.word	0x00038498
   32f9c:	000384b8 	.word	0x000384b8
   32fa0:	00038478 	.word	0x00038478

00032fa4 <__swsetup_r>:
   32fa4:	4b36      	ldr	r3, [pc, #216]	; (33080 <__swsetup_r+0xdc>)
   32fa6:	b570      	push	{r4, r5, r6, lr}
   32fa8:	681d      	ldr	r5, [r3, #0]
   32faa:	0006      	movs	r6, r0
   32fac:	000c      	movs	r4, r1
   32fae:	2d00      	cmp	r5, #0
   32fb0:	d005      	beq.n	32fbe <__swsetup_r+0x1a>
   32fb2:	69ab      	ldr	r3, [r5, #24]
   32fb4:	2b00      	cmp	r3, #0
   32fb6:	d102      	bne.n	32fbe <__swsetup_r+0x1a>
   32fb8:	0028      	movs	r0, r5
   32fba:	f000 f961 	bl	33280 <__sinit>
   32fbe:	4b31      	ldr	r3, [pc, #196]	; (33084 <__swsetup_r+0xe0>)
   32fc0:	429c      	cmp	r4, r3
   32fc2:	d10f      	bne.n	32fe4 <__swsetup_r+0x40>
   32fc4:	686c      	ldr	r4, [r5, #4]
   32fc6:	230c      	movs	r3, #12
   32fc8:	5ee2      	ldrsh	r2, [r4, r3]
   32fca:	b293      	uxth	r3, r2
   32fcc:	0719      	lsls	r1, r3, #28
   32fce:	d42d      	bmi.n	3302c <__swsetup_r+0x88>
   32fd0:	06d9      	lsls	r1, r3, #27
   32fd2:	d411      	bmi.n	32ff8 <__swsetup_r+0x54>
   32fd4:	2309      	movs	r3, #9
   32fd6:	2001      	movs	r0, #1
   32fd8:	6033      	str	r3, [r6, #0]
   32fda:	3337      	adds	r3, #55	; 0x37
   32fdc:	4313      	orrs	r3, r2
   32fde:	81a3      	strh	r3, [r4, #12]
   32fe0:	4240      	negs	r0, r0
   32fe2:	bd70      	pop	{r4, r5, r6, pc}
   32fe4:	4b28      	ldr	r3, [pc, #160]	; (33088 <__swsetup_r+0xe4>)
   32fe6:	429c      	cmp	r4, r3
   32fe8:	d101      	bne.n	32fee <__swsetup_r+0x4a>
   32fea:	68ac      	ldr	r4, [r5, #8]
   32fec:	e7eb      	b.n	32fc6 <__swsetup_r+0x22>
   32fee:	4b27      	ldr	r3, [pc, #156]	; (3308c <__swsetup_r+0xe8>)
   32ff0:	429c      	cmp	r4, r3
   32ff2:	d1e8      	bne.n	32fc6 <__swsetup_r+0x22>
   32ff4:	68ec      	ldr	r4, [r5, #12]
   32ff6:	e7e6      	b.n	32fc6 <__swsetup_r+0x22>
   32ff8:	075b      	lsls	r3, r3, #29
   32ffa:	d513      	bpl.n	33024 <__swsetup_r+0x80>
   32ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   32ffe:	2900      	cmp	r1, #0
   33000:	d008      	beq.n	33014 <__swsetup_r+0x70>
   33002:	0023      	movs	r3, r4
   33004:	3344      	adds	r3, #68	; 0x44
   33006:	4299      	cmp	r1, r3
   33008:	d002      	beq.n	33010 <__swsetup_r+0x6c>
   3300a:	0030      	movs	r0, r6
   3300c:	f7ff fc54 	bl	328b8 <_free_r>
   33010:	2300      	movs	r3, #0
   33012:	6363      	str	r3, [r4, #52]	; 0x34
   33014:	2224      	movs	r2, #36	; 0x24
   33016:	89a3      	ldrh	r3, [r4, #12]
   33018:	4393      	bics	r3, r2
   3301a:	81a3      	strh	r3, [r4, #12]
   3301c:	2300      	movs	r3, #0
   3301e:	6063      	str	r3, [r4, #4]
   33020:	6923      	ldr	r3, [r4, #16]
   33022:	6023      	str	r3, [r4, #0]
   33024:	2308      	movs	r3, #8
   33026:	89a2      	ldrh	r2, [r4, #12]
   33028:	4313      	orrs	r3, r2
   3302a:	81a3      	strh	r3, [r4, #12]
   3302c:	6923      	ldr	r3, [r4, #16]
   3302e:	2b00      	cmp	r3, #0
   33030:	d10b      	bne.n	3304a <__swsetup_r+0xa6>
   33032:	21a0      	movs	r1, #160	; 0xa0
   33034:	2280      	movs	r2, #128	; 0x80
   33036:	89a3      	ldrh	r3, [r4, #12]
   33038:	0089      	lsls	r1, r1, #2
   3303a:	0092      	lsls	r2, r2, #2
   3303c:	400b      	ands	r3, r1
   3303e:	4293      	cmp	r3, r2
   33040:	d003      	beq.n	3304a <__swsetup_r+0xa6>
   33042:	0021      	movs	r1, r4
   33044:	0030      	movs	r0, r6
   33046:	f000 f9e9 	bl	3341c <__smakebuf_r>
   3304a:	2301      	movs	r3, #1
   3304c:	89a2      	ldrh	r2, [r4, #12]
   3304e:	4013      	ands	r3, r2
   33050:	d011      	beq.n	33076 <__swsetup_r+0xd2>
   33052:	2300      	movs	r3, #0
   33054:	60a3      	str	r3, [r4, #8]
   33056:	6963      	ldr	r3, [r4, #20]
   33058:	425b      	negs	r3, r3
   3305a:	61a3      	str	r3, [r4, #24]
   3305c:	2000      	movs	r0, #0
   3305e:	6923      	ldr	r3, [r4, #16]
   33060:	4283      	cmp	r3, r0
   33062:	d1be      	bne.n	32fe2 <__swsetup_r+0x3e>
   33064:	230c      	movs	r3, #12
   33066:	5ee2      	ldrsh	r2, [r4, r3]
   33068:	0613      	lsls	r3, r2, #24
   3306a:	d5ba      	bpl.n	32fe2 <__swsetup_r+0x3e>
   3306c:	2340      	movs	r3, #64	; 0x40
   3306e:	4313      	orrs	r3, r2
   33070:	81a3      	strh	r3, [r4, #12]
   33072:	3801      	subs	r0, #1
   33074:	e7b5      	b.n	32fe2 <__swsetup_r+0x3e>
   33076:	0792      	lsls	r2, r2, #30
   33078:	d400      	bmi.n	3307c <__swsetup_r+0xd8>
   3307a:	6963      	ldr	r3, [r4, #20]
   3307c:	60a3      	str	r3, [r4, #8]
   3307e:	e7ed      	b.n	3305c <__swsetup_r+0xb8>
   33080:	200000d4 	.word	0x200000d4
   33084:	00038498 	.word	0x00038498
   33088:	000384b8 	.word	0x000384b8
   3308c:	00038478 	.word	0x00038478

00033090 <__sflush_r>:
   33090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33092:	898a      	ldrh	r2, [r1, #12]
   33094:	0005      	movs	r5, r0
   33096:	000c      	movs	r4, r1
   33098:	0713      	lsls	r3, r2, #28
   3309a:	d460      	bmi.n	3315e <__sflush_r+0xce>
   3309c:	684b      	ldr	r3, [r1, #4]
   3309e:	2b00      	cmp	r3, #0
   330a0:	dc04      	bgt.n	330ac <__sflush_r+0x1c>
   330a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   330a4:	2b00      	cmp	r3, #0
   330a6:	dc01      	bgt.n	330ac <__sflush_r+0x1c>
   330a8:	2000      	movs	r0, #0
   330aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   330ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   330ae:	2f00      	cmp	r7, #0
   330b0:	d0fa      	beq.n	330a8 <__sflush_r+0x18>
   330b2:	2300      	movs	r3, #0
   330b4:	682e      	ldr	r6, [r5, #0]
   330b6:	602b      	str	r3, [r5, #0]
   330b8:	2380      	movs	r3, #128	; 0x80
   330ba:	015b      	lsls	r3, r3, #5
   330bc:	401a      	ands	r2, r3
   330be:	d034      	beq.n	3312a <__sflush_r+0x9a>
   330c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   330c2:	89a3      	ldrh	r3, [r4, #12]
   330c4:	075b      	lsls	r3, r3, #29
   330c6:	d506      	bpl.n	330d6 <__sflush_r+0x46>
   330c8:	6863      	ldr	r3, [r4, #4]
   330ca:	1ac0      	subs	r0, r0, r3
   330cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   330ce:	2b00      	cmp	r3, #0
   330d0:	d001      	beq.n	330d6 <__sflush_r+0x46>
   330d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   330d4:	1ac0      	subs	r0, r0, r3
   330d6:	0002      	movs	r2, r0
   330d8:	6a21      	ldr	r1, [r4, #32]
   330da:	2300      	movs	r3, #0
   330dc:	0028      	movs	r0, r5
   330de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   330e0:	47b8      	blx	r7
   330e2:	89a1      	ldrh	r1, [r4, #12]
   330e4:	1c43      	adds	r3, r0, #1
   330e6:	d106      	bne.n	330f6 <__sflush_r+0x66>
   330e8:	682b      	ldr	r3, [r5, #0]
   330ea:	2b1d      	cmp	r3, #29
   330ec:	d831      	bhi.n	33152 <__sflush_r+0xc2>
   330ee:	4a2c      	ldr	r2, [pc, #176]	; (331a0 <__sflush_r+0x110>)
   330f0:	40da      	lsrs	r2, r3
   330f2:	07d3      	lsls	r3, r2, #31
   330f4:	d52d      	bpl.n	33152 <__sflush_r+0xc2>
   330f6:	2300      	movs	r3, #0
   330f8:	6063      	str	r3, [r4, #4]
   330fa:	6923      	ldr	r3, [r4, #16]
   330fc:	6023      	str	r3, [r4, #0]
   330fe:	04cb      	lsls	r3, r1, #19
   33100:	d505      	bpl.n	3310e <__sflush_r+0x7e>
   33102:	1c43      	adds	r3, r0, #1
   33104:	d102      	bne.n	3310c <__sflush_r+0x7c>
   33106:	682b      	ldr	r3, [r5, #0]
   33108:	2b00      	cmp	r3, #0
   3310a:	d100      	bne.n	3310e <__sflush_r+0x7e>
   3310c:	6560      	str	r0, [r4, #84]	; 0x54
   3310e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   33110:	602e      	str	r6, [r5, #0]
   33112:	2900      	cmp	r1, #0
   33114:	d0c8      	beq.n	330a8 <__sflush_r+0x18>
   33116:	0023      	movs	r3, r4
   33118:	3344      	adds	r3, #68	; 0x44
   3311a:	4299      	cmp	r1, r3
   3311c:	d002      	beq.n	33124 <__sflush_r+0x94>
   3311e:	0028      	movs	r0, r5
   33120:	f7ff fbca 	bl	328b8 <_free_r>
   33124:	2000      	movs	r0, #0
   33126:	6360      	str	r0, [r4, #52]	; 0x34
   33128:	e7bf      	b.n	330aa <__sflush_r+0x1a>
   3312a:	2301      	movs	r3, #1
   3312c:	6a21      	ldr	r1, [r4, #32]
   3312e:	0028      	movs	r0, r5
   33130:	47b8      	blx	r7
   33132:	1c43      	adds	r3, r0, #1
   33134:	d1c5      	bne.n	330c2 <__sflush_r+0x32>
   33136:	682b      	ldr	r3, [r5, #0]
   33138:	2b00      	cmp	r3, #0
   3313a:	d0c2      	beq.n	330c2 <__sflush_r+0x32>
   3313c:	2b1d      	cmp	r3, #29
   3313e:	d001      	beq.n	33144 <__sflush_r+0xb4>
   33140:	2b16      	cmp	r3, #22
   33142:	d101      	bne.n	33148 <__sflush_r+0xb8>
   33144:	602e      	str	r6, [r5, #0]
   33146:	e7af      	b.n	330a8 <__sflush_r+0x18>
   33148:	2340      	movs	r3, #64	; 0x40
   3314a:	89a2      	ldrh	r2, [r4, #12]
   3314c:	4313      	orrs	r3, r2
   3314e:	81a3      	strh	r3, [r4, #12]
   33150:	e7ab      	b.n	330aa <__sflush_r+0x1a>
   33152:	2340      	movs	r3, #64	; 0x40
   33154:	430b      	orrs	r3, r1
   33156:	2001      	movs	r0, #1
   33158:	81a3      	strh	r3, [r4, #12]
   3315a:	4240      	negs	r0, r0
   3315c:	e7a5      	b.n	330aa <__sflush_r+0x1a>
   3315e:	690f      	ldr	r7, [r1, #16]
   33160:	2f00      	cmp	r7, #0
   33162:	d0a1      	beq.n	330a8 <__sflush_r+0x18>
   33164:	680b      	ldr	r3, [r1, #0]
   33166:	600f      	str	r7, [r1, #0]
   33168:	1bdb      	subs	r3, r3, r7
   3316a:	9301      	str	r3, [sp, #4]
   3316c:	2300      	movs	r3, #0
   3316e:	0792      	lsls	r2, r2, #30
   33170:	d100      	bne.n	33174 <__sflush_r+0xe4>
   33172:	694b      	ldr	r3, [r1, #20]
   33174:	60a3      	str	r3, [r4, #8]
   33176:	9b01      	ldr	r3, [sp, #4]
   33178:	2b00      	cmp	r3, #0
   3317a:	dc00      	bgt.n	3317e <__sflush_r+0xee>
   3317c:	e794      	b.n	330a8 <__sflush_r+0x18>
   3317e:	9b01      	ldr	r3, [sp, #4]
   33180:	003a      	movs	r2, r7
   33182:	6a21      	ldr	r1, [r4, #32]
   33184:	0028      	movs	r0, r5
   33186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   33188:	47b0      	blx	r6
   3318a:	2800      	cmp	r0, #0
   3318c:	dc03      	bgt.n	33196 <__sflush_r+0x106>
   3318e:	2340      	movs	r3, #64	; 0x40
   33190:	89a2      	ldrh	r2, [r4, #12]
   33192:	4313      	orrs	r3, r2
   33194:	e7df      	b.n	33156 <__sflush_r+0xc6>
   33196:	9b01      	ldr	r3, [sp, #4]
   33198:	183f      	adds	r7, r7, r0
   3319a:	1a1b      	subs	r3, r3, r0
   3319c:	9301      	str	r3, [sp, #4]
   3319e:	e7ea      	b.n	33176 <__sflush_r+0xe6>
   331a0:	20400001 	.word	0x20400001

000331a4 <_fflush_r>:
   331a4:	690b      	ldr	r3, [r1, #16]
   331a6:	b570      	push	{r4, r5, r6, lr}
   331a8:	0005      	movs	r5, r0
   331aa:	000c      	movs	r4, r1
   331ac:	2b00      	cmp	r3, #0
   331ae:	d101      	bne.n	331b4 <_fflush_r+0x10>
   331b0:	2000      	movs	r0, #0
   331b2:	bd70      	pop	{r4, r5, r6, pc}
   331b4:	2800      	cmp	r0, #0
   331b6:	d004      	beq.n	331c2 <_fflush_r+0x1e>
   331b8:	6983      	ldr	r3, [r0, #24]
   331ba:	2b00      	cmp	r3, #0
   331bc:	d101      	bne.n	331c2 <_fflush_r+0x1e>
   331be:	f000 f85f 	bl	33280 <__sinit>
   331c2:	4b0b      	ldr	r3, [pc, #44]	; (331f0 <_fflush_r+0x4c>)
   331c4:	429c      	cmp	r4, r3
   331c6:	d109      	bne.n	331dc <_fflush_r+0x38>
   331c8:	686c      	ldr	r4, [r5, #4]
   331ca:	220c      	movs	r2, #12
   331cc:	5ea3      	ldrsh	r3, [r4, r2]
   331ce:	2b00      	cmp	r3, #0
   331d0:	d0ee      	beq.n	331b0 <_fflush_r+0xc>
   331d2:	0021      	movs	r1, r4
   331d4:	0028      	movs	r0, r5
   331d6:	f7ff ff5b 	bl	33090 <__sflush_r>
   331da:	e7ea      	b.n	331b2 <_fflush_r+0xe>
   331dc:	4b05      	ldr	r3, [pc, #20]	; (331f4 <_fflush_r+0x50>)
   331de:	429c      	cmp	r4, r3
   331e0:	d101      	bne.n	331e6 <_fflush_r+0x42>
   331e2:	68ac      	ldr	r4, [r5, #8]
   331e4:	e7f1      	b.n	331ca <_fflush_r+0x26>
   331e6:	4b04      	ldr	r3, [pc, #16]	; (331f8 <_fflush_r+0x54>)
   331e8:	429c      	cmp	r4, r3
   331ea:	d1ee      	bne.n	331ca <_fflush_r+0x26>
   331ec:	68ec      	ldr	r4, [r5, #12]
   331ee:	e7ec      	b.n	331ca <_fflush_r+0x26>
   331f0:	00038498 	.word	0x00038498
   331f4:	000384b8 	.word	0x000384b8
   331f8:	00038478 	.word	0x00038478

000331fc <_cleanup_r>:
   331fc:	b510      	push	{r4, lr}
   331fe:	4902      	ldr	r1, [pc, #8]	; (33208 <_cleanup_r+0xc>)
   33200:	f000 f8b2 	bl	33368 <_fwalk_reent>
   33204:	bd10      	pop	{r4, pc}
   33206:	46c0      	nop			; (mov r8, r8)
   33208:	000331a5 	.word	0x000331a5

0003320c <std.isra.0>:
   3320c:	2300      	movs	r3, #0
   3320e:	b510      	push	{r4, lr}
   33210:	0004      	movs	r4, r0
   33212:	6003      	str	r3, [r0, #0]
   33214:	6043      	str	r3, [r0, #4]
   33216:	6083      	str	r3, [r0, #8]
   33218:	8181      	strh	r1, [r0, #12]
   3321a:	6643      	str	r3, [r0, #100]	; 0x64
   3321c:	81c2      	strh	r2, [r0, #14]
   3321e:	6103      	str	r3, [r0, #16]
   33220:	6143      	str	r3, [r0, #20]
   33222:	6183      	str	r3, [r0, #24]
   33224:	0019      	movs	r1, r3
   33226:	2208      	movs	r2, #8
   33228:	305c      	adds	r0, #92	; 0x5c
   3322a:	f7ff fb3c 	bl	328a6 <memset>
   3322e:	4b05      	ldr	r3, [pc, #20]	; (33244 <std.isra.0+0x38>)
   33230:	6224      	str	r4, [r4, #32]
   33232:	6263      	str	r3, [r4, #36]	; 0x24
   33234:	4b04      	ldr	r3, [pc, #16]	; (33248 <std.isra.0+0x3c>)
   33236:	62a3      	str	r3, [r4, #40]	; 0x28
   33238:	4b04      	ldr	r3, [pc, #16]	; (3324c <std.isra.0+0x40>)
   3323a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3323c:	4b04      	ldr	r3, [pc, #16]	; (33250 <std.isra.0+0x44>)
   3323e:	6323      	str	r3, [r4, #48]	; 0x30
   33240:	bd10      	pop	{r4, pc}
   33242:	46c0      	nop			; (mov r8, r8)
   33244:	00033aa9 	.word	0x00033aa9
   33248:	00033ad1 	.word	0x00033ad1
   3324c:	00033b09 	.word	0x00033b09
   33250:	00033b35 	.word	0x00033b35

00033254 <__sfmoreglue>:
   33254:	b570      	push	{r4, r5, r6, lr}
   33256:	2568      	movs	r5, #104	; 0x68
   33258:	1e4a      	subs	r2, r1, #1
   3325a:	4355      	muls	r5, r2
   3325c:	000e      	movs	r6, r1
   3325e:	0029      	movs	r1, r5
   33260:	3174      	adds	r1, #116	; 0x74
   33262:	f7ff fb73 	bl	3294c <_malloc_r>
   33266:	1e04      	subs	r4, r0, #0
   33268:	d008      	beq.n	3327c <__sfmoreglue+0x28>
   3326a:	2100      	movs	r1, #0
   3326c:	002a      	movs	r2, r5
   3326e:	6001      	str	r1, [r0, #0]
   33270:	6046      	str	r6, [r0, #4]
   33272:	300c      	adds	r0, #12
   33274:	60a0      	str	r0, [r4, #8]
   33276:	3268      	adds	r2, #104	; 0x68
   33278:	f7ff fb15 	bl	328a6 <memset>
   3327c:	0020      	movs	r0, r4
   3327e:	bd70      	pop	{r4, r5, r6, pc}

00033280 <__sinit>:
   33280:	6983      	ldr	r3, [r0, #24]
   33282:	b513      	push	{r0, r1, r4, lr}
   33284:	0004      	movs	r4, r0
   33286:	2b00      	cmp	r3, #0
   33288:	d128      	bne.n	332dc <__sinit+0x5c>
   3328a:	6483      	str	r3, [r0, #72]	; 0x48
   3328c:	64c3      	str	r3, [r0, #76]	; 0x4c
   3328e:	6503      	str	r3, [r0, #80]	; 0x50
   33290:	4b13      	ldr	r3, [pc, #76]	; (332e0 <__sinit+0x60>)
   33292:	4a14      	ldr	r2, [pc, #80]	; (332e4 <__sinit+0x64>)
   33294:	681b      	ldr	r3, [r3, #0]
   33296:	6282      	str	r2, [r0, #40]	; 0x28
   33298:	9301      	str	r3, [sp, #4]
   3329a:	4298      	cmp	r0, r3
   3329c:	d101      	bne.n	332a2 <__sinit+0x22>
   3329e:	2301      	movs	r3, #1
   332a0:	6183      	str	r3, [r0, #24]
   332a2:	0020      	movs	r0, r4
   332a4:	f000 f820 	bl	332e8 <__sfp>
   332a8:	6060      	str	r0, [r4, #4]
   332aa:	0020      	movs	r0, r4
   332ac:	f000 f81c 	bl	332e8 <__sfp>
   332b0:	60a0      	str	r0, [r4, #8]
   332b2:	0020      	movs	r0, r4
   332b4:	f000 f818 	bl	332e8 <__sfp>
   332b8:	2200      	movs	r2, #0
   332ba:	60e0      	str	r0, [r4, #12]
   332bc:	2104      	movs	r1, #4
   332be:	6860      	ldr	r0, [r4, #4]
   332c0:	f7ff ffa4 	bl	3320c <std.isra.0>
   332c4:	2201      	movs	r2, #1
   332c6:	2109      	movs	r1, #9
   332c8:	68a0      	ldr	r0, [r4, #8]
   332ca:	f7ff ff9f 	bl	3320c <std.isra.0>
   332ce:	2202      	movs	r2, #2
   332d0:	2112      	movs	r1, #18
   332d2:	68e0      	ldr	r0, [r4, #12]
   332d4:	f7ff ff9a 	bl	3320c <std.isra.0>
   332d8:	2301      	movs	r3, #1
   332da:	61a3      	str	r3, [r4, #24]
   332dc:	bd13      	pop	{r0, r1, r4, pc}
   332de:	46c0      	nop			; (mov r8, r8)
   332e0:	00038474 	.word	0x00038474
   332e4:	000331fd 	.word	0x000331fd

000332e8 <__sfp>:
   332e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   332ea:	4b1e      	ldr	r3, [pc, #120]	; (33364 <__sfp+0x7c>)
   332ec:	0007      	movs	r7, r0
   332ee:	681e      	ldr	r6, [r3, #0]
   332f0:	69b3      	ldr	r3, [r6, #24]
   332f2:	2b00      	cmp	r3, #0
   332f4:	d102      	bne.n	332fc <__sfp+0x14>
   332f6:	0030      	movs	r0, r6
   332f8:	f7ff ffc2 	bl	33280 <__sinit>
   332fc:	3648      	adds	r6, #72	; 0x48
   332fe:	68b4      	ldr	r4, [r6, #8]
   33300:	6873      	ldr	r3, [r6, #4]
   33302:	3b01      	subs	r3, #1
   33304:	d504      	bpl.n	33310 <__sfp+0x28>
   33306:	6833      	ldr	r3, [r6, #0]
   33308:	2b00      	cmp	r3, #0
   3330a:	d007      	beq.n	3331c <__sfp+0x34>
   3330c:	6836      	ldr	r6, [r6, #0]
   3330e:	e7f6      	b.n	332fe <__sfp+0x16>
   33310:	220c      	movs	r2, #12
   33312:	5ea5      	ldrsh	r5, [r4, r2]
   33314:	2d00      	cmp	r5, #0
   33316:	d00d      	beq.n	33334 <__sfp+0x4c>
   33318:	3468      	adds	r4, #104	; 0x68
   3331a:	e7f2      	b.n	33302 <__sfp+0x1a>
   3331c:	2104      	movs	r1, #4
   3331e:	0038      	movs	r0, r7
   33320:	f7ff ff98 	bl	33254 <__sfmoreglue>
   33324:	6030      	str	r0, [r6, #0]
   33326:	2800      	cmp	r0, #0
   33328:	d1f0      	bne.n	3330c <__sfp+0x24>
   3332a:	230c      	movs	r3, #12
   3332c:	0004      	movs	r4, r0
   3332e:	603b      	str	r3, [r7, #0]
   33330:	0020      	movs	r0, r4
   33332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33334:	2301      	movs	r3, #1
   33336:	0020      	movs	r0, r4
   33338:	425b      	negs	r3, r3
   3333a:	81e3      	strh	r3, [r4, #14]
   3333c:	3302      	adds	r3, #2
   3333e:	81a3      	strh	r3, [r4, #12]
   33340:	6665      	str	r5, [r4, #100]	; 0x64
   33342:	6025      	str	r5, [r4, #0]
   33344:	60a5      	str	r5, [r4, #8]
   33346:	6065      	str	r5, [r4, #4]
   33348:	6125      	str	r5, [r4, #16]
   3334a:	6165      	str	r5, [r4, #20]
   3334c:	61a5      	str	r5, [r4, #24]
   3334e:	2208      	movs	r2, #8
   33350:	0029      	movs	r1, r5
   33352:	305c      	adds	r0, #92	; 0x5c
   33354:	f7ff faa7 	bl	328a6 <memset>
   33358:	6365      	str	r5, [r4, #52]	; 0x34
   3335a:	63a5      	str	r5, [r4, #56]	; 0x38
   3335c:	64a5      	str	r5, [r4, #72]	; 0x48
   3335e:	64e5      	str	r5, [r4, #76]	; 0x4c
   33360:	e7e6      	b.n	33330 <__sfp+0x48>
   33362:	46c0      	nop			; (mov r8, r8)
   33364:	00038474 	.word	0x00038474

00033368 <_fwalk_reent>:
   33368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3336a:	0004      	movs	r4, r0
   3336c:	0007      	movs	r7, r0
   3336e:	2600      	movs	r6, #0
   33370:	9101      	str	r1, [sp, #4]
   33372:	3448      	adds	r4, #72	; 0x48
   33374:	2c00      	cmp	r4, #0
   33376:	d101      	bne.n	3337c <_fwalk_reent+0x14>
   33378:	0030      	movs	r0, r6
   3337a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3337c:	6863      	ldr	r3, [r4, #4]
   3337e:	68a5      	ldr	r5, [r4, #8]
   33380:	9300      	str	r3, [sp, #0]
   33382:	9b00      	ldr	r3, [sp, #0]
   33384:	3b01      	subs	r3, #1
   33386:	9300      	str	r3, [sp, #0]
   33388:	d501      	bpl.n	3338e <_fwalk_reent+0x26>
   3338a:	6824      	ldr	r4, [r4, #0]
   3338c:	e7f2      	b.n	33374 <_fwalk_reent+0xc>
   3338e:	89ab      	ldrh	r3, [r5, #12]
   33390:	2b01      	cmp	r3, #1
   33392:	d908      	bls.n	333a6 <_fwalk_reent+0x3e>
   33394:	220e      	movs	r2, #14
   33396:	5eab      	ldrsh	r3, [r5, r2]
   33398:	3301      	adds	r3, #1
   3339a:	d004      	beq.n	333a6 <_fwalk_reent+0x3e>
   3339c:	0029      	movs	r1, r5
   3339e:	0038      	movs	r0, r7
   333a0:	9b01      	ldr	r3, [sp, #4]
   333a2:	4798      	blx	r3
   333a4:	4306      	orrs	r6, r0
   333a6:	3568      	adds	r5, #104	; 0x68
   333a8:	e7eb      	b.n	33382 <_fwalk_reent+0x1a>

000333aa <__locale_ctype_ptr_l>:
   333aa:	30ec      	adds	r0, #236	; 0xec
   333ac:	6800      	ldr	r0, [r0, #0]
   333ae:	4770      	bx	lr

000333b0 <__locale_ctype_ptr>:
   333b0:	4b04      	ldr	r3, [pc, #16]	; (333c4 <__locale_ctype_ptr+0x14>)
   333b2:	681b      	ldr	r3, [r3, #0]
   333b4:	6a1b      	ldr	r3, [r3, #32]
   333b6:	2b00      	cmp	r3, #0
   333b8:	d100      	bne.n	333bc <__locale_ctype_ptr+0xc>
   333ba:	4b03      	ldr	r3, [pc, #12]	; (333c8 <__locale_ctype_ptr+0x18>)
   333bc:	33ec      	adds	r3, #236	; 0xec
   333be:	6818      	ldr	r0, [r3, #0]
   333c0:	4770      	bx	lr
   333c2:	46c0      	nop			; (mov r8, r8)
   333c4:	200000d4 	.word	0x200000d4
   333c8:	20000138 	.word	0x20000138

000333cc <__swhatbuf_r>:
   333cc:	b570      	push	{r4, r5, r6, lr}
   333ce:	000e      	movs	r6, r1
   333d0:	001d      	movs	r5, r3
   333d2:	230e      	movs	r3, #14
   333d4:	5ec9      	ldrsh	r1, [r1, r3]
   333d6:	b090      	sub	sp, #64	; 0x40
   333d8:	0014      	movs	r4, r2
   333da:	2900      	cmp	r1, #0
   333dc:	da07      	bge.n	333ee <__swhatbuf_r+0x22>
   333de:	2300      	movs	r3, #0
   333e0:	602b      	str	r3, [r5, #0]
   333e2:	89b3      	ldrh	r3, [r6, #12]
   333e4:	061b      	lsls	r3, r3, #24
   333e6:	d411      	bmi.n	3340c <__swhatbuf_r+0x40>
   333e8:	2380      	movs	r3, #128	; 0x80
   333ea:	00db      	lsls	r3, r3, #3
   333ec:	e00f      	b.n	3340e <__swhatbuf_r+0x42>
   333ee:	aa01      	add	r2, sp, #4
   333f0:	f000 fbe6 	bl	33bc0 <_fstat_r>
   333f4:	2800      	cmp	r0, #0
   333f6:	dbf2      	blt.n	333de <__swhatbuf_r+0x12>
   333f8:	22f0      	movs	r2, #240	; 0xf0
   333fa:	9b02      	ldr	r3, [sp, #8]
   333fc:	0212      	lsls	r2, r2, #8
   333fe:	4013      	ands	r3, r2
   33400:	4a05      	ldr	r2, [pc, #20]	; (33418 <__swhatbuf_r+0x4c>)
   33402:	189b      	adds	r3, r3, r2
   33404:	425a      	negs	r2, r3
   33406:	4153      	adcs	r3, r2
   33408:	602b      	str	r3, [r5, #0]
   3340a:	e7ed      	b.n	333e8 <__swhatbuf_r+0x1c>
   3340c:	2340      	movs	r3, #64	; 0x40
   3340e:	2000      	movs	r0, #0
   33410:	6023      	str	r3, [r4, #0]
   33412:	b010      	add	sp, #64	; 0x40
   33414:	bd70      	pop	{r4, r5, r6, pc}
   33416:	46c0      	nop			; (mov r8, r8)
   33418:	ffffe000 	.word	0xffffe000

0003341c <__smakebuf_r>:
   3341c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3341e:	2602      	movs	r6, #2
   33420:	898b      	ldrh	r3, [r1, #12]
   33422:	0005      	movs	r5, r0
   33424:	000c      	movs	r4, r1
   33426:	4233      	tst	r3, r6
   33428:	d006      	beq.n	33438 <__smakebuf_r+0x1c>
   3342a:	0023      	movs	r3, r4
   3342c:	3347      	adds	r3, #71	; 0x47
   3342e:	6023      	str	r3, [r4, #0]
   33430:	6123      	str	r3, [r4, #16]
   33432:	2301      	movs	r3, #1
   33434:	6163      	str	r3, [r4, #20]
   33436:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   33438:	ab01      	add	r3, sp, #4
   3343a:	466a      	mov	r2, sp
   3343c:	f7ff ffc6 	bl	333cc <__swhatbuf_r>
   33440:	9900      	ldr	r1, [sp, #0]
   33442:	0007      	movs	r7, r0
   33444:	0028      	movs	r0, r5
   33446:	f7ff fa81 	bl	3294c <_malloc_r>
   3344a:	2800      	cmp	r0, #0
   3344c:	d108      	bne.n	33460 <__smakebuf_r+0x44>
   3344e:	220c      	movs	r2, #12
   33450:	5ea3      	ldrsh	r3, [r4, r2]
   33452:	059a      	lsls	r2, r3, #22
   33454:	d4ef      	bmi.n	33436 <__smakebuf_r+0x1a>
   33456:	2203      	movs	r2, #3
   33458:	4393      	bics	r3, r2
   3345a:	431e      	orrs	r6, r3
   3345c:	81a6      	strh	r6, [r4, #12]
   3345e:	e7e4      	b.n	3342a <__smakebuf_r+0xe>
   33460:	4b0f      	ldr	r3, [pc, #60]	; (334a0 <__smakebuf_r+0x84>)
   33462:	62ab      	str	r3, [r5, #40]	; 0x28
   33464:	2380      	movs	r3, #128	; 0x80
   33466:	89a2      	ldrh	r2, [r4, #12]
   33468:	6020      	str	r0, [r4, #0]
   3346a:	4313      	orrs	r3, r2
   3346c:	81a3      	strh	r3, [r4, #12]
   3346e:	9b00      	ldr	r3, [sp, #0]
   33470:	6120      	str	r0, [r4, #16]
   33472:	6163      	str	r3, [r4, #20]
   33474:	9b01      	ldr	r3, [sp, #4]
   33476:	2b00      	cmp	r3, #0
   33478:	d00d      	beq.n	33496 <__smakebuf_r+0x7a>
   3347a:	230e      	movs	r3, #14
   3347c:	5ee1      	ldrsh	r1, [r4, r3]
   3347e:	0028      	movs	r0, r5
   33480:	f000 fbb0 	bl	33be4 <_isatty_r>
   33484:	2800      	cmp	r0, #0
   33486:	d006      	beq.n	33496 <__smakebuf_r+0x7a>
   33488:	2203      	movs	r2, #3
   3348a:	89a3      	ldrh	r3, [r4, #12]
   3348c:	4393      	bics	r3, r2
   3348e:	001a      	movs	r2, r3
   33490:	2301      	movs	r3, #1
   33492:	4313      	orrs	r3, r2
   33494:	81a3      	strh	r3, [r4, #12]
   33496:	89a0      	ldrh	r0, [r4, #12]
   33498:	4338      	orrs	r0, r7
   3349a:	81a0      	strh	r0, [r4, #12]
   3349c:	e7cb      	b.n	33436 <__smakebuf_r+0x1a>
   3349e:	46c0      	nop			; (mov r8, r8)
   334a0:	000331fd 	.word	0x000331fd

000334a4 <__ascii_mbtowc>:
   334a4:	b082      	sub	sp, #8
   334a6:	2900      	cmp	r1, #0
   334a8:	d100      	bne.n	334ac <__ascii_mbtowc+0x8>
   334aa:	a901      	add	r1, sp, #4
   334ac:	1e10      	subs	r0, r2, #0
   334ae:	d006      	beq.n	334be <__ascii_mbtowc+0x1a>
   334b0:	2b00      	cmp	r3, #0
   334b2:	d006      	beq.n	334c2 <__ascii_mbtowc+0x1e>
   334b4:	7813      	ldrb	r3, [r2, #0]
   334b6:	600b      	str	r3, [r1, #0]
   334b8:	7810      	ldrb	r0, [r2, #0]
   334ba:	1e43      	subs	r3, r0, #1
   334bc:	4198      	sbcs	r0, r3
   334be:	b002      	add	sp, #8
   334c0:	4770      	bx	lr
   334c2:	2002      	movs	r0, #2
   334c4:	4240      	negs	r0, r0
   334c6:	e7fa      	b.n	334be <__ascii_mbtowc+0x1a>

000334c8 <__malloc_lock>:
   334c8:	4770      	bx	lr

000334ca <__malloc_unlock>:
   334ca:	4770      	bx	lr

000334cc <__ssputs_r>:
   334cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   334ce:	688e      	ldr	r6, [r1, #8]
   334d0:	b085      	sub	sp, #20
   334d2:	0007      	movs	r7, r0
   334d4:	000c      	movs	r4, r1
   334d6:	9203      	str	r2, [sp, #12]
   334d8:	9301      	str	r3, [sp, #4]
   334da:	429e      	cmp	r6, r3
   334dc:	d839      	bhi.n	33552 <__ssputs_r+0x86>
   334de:	2390      	movs	r3, #144	; 0x90
   334e0:	898a      	ldrh	r2, [r1, #12]
   334e2:	00db      	lsls	r3, r3, #3
   334e4:	421a      	tst	r2, r3
   334e6:	d034      	beq.n	33552 <__ssputs_r+0x86>
   334e8:	2503      	movs	r5, #3
   334ea:	6909      	ldr	r1, [r1, #16]
   334ec:	6823      	ldr	r3, [r4, #0]
   334ee:	1a5b      	subs	r3, r3, r1
   334f0:	9302      	str	r3, [sp, #8]
   334f2:	6963      	ldr	r3, [r4, #20]
   334f4:	9802      	ldr	r0, [sp, #8]
   334f6:	435d      	muls	r5, r3
   334f8:	0feb      	lsrs	r3, r5, #31
   334fa:	195d      	adds	r5, r3, r5
   334fc:	9b01      	ldr	r3, [sp, #4]
   334fe:	106d      	asrs	r5, r5, #1
   33500:	3301      	adds	r3, #1
   33502:	181b      	adds	r3, r3, r0
   33504:	42ab      	cmp	r3, r5
   33506:	d900      	bls.n	3350a <__ssputs_r+0x3e>
   33508:	001d      	movs	r5, r3
   3350a:	0553      	lsls	r3, r2, #21
   3350c:	d532      	bpl.n	33574 <__ssputs_r+0xa8>
   3350e:	0029      	movs	r1, r5
   33510:	0038      	movs	r0, r7
   33512:	f7ff fa1b 	bl	3294c <_malloc_r>
   33516:	1e06      	subs	r6, r0, #0
   33518:	d109      	bne.n	3352e <__ssputs_r+0x62>
   3351a:	230c      	movs	r3, #12
   3351c:	603b      	str	r3, [r7, #0]
   3351e:	2340      	movs	r3, #64	; 0x40
   33520:	2001      	movs	r0, #1
   33522:	89a2      	ldrh	r2, [r4, #12]
   33524:	4240      	negs	r0, r0
   33526:	4313      	orrs	r3, r2
   33528:	81a3      	strh	r3, [r4, #12]
   3352a:	b005      	add	sp, #20
   3352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3352e:	9a02      	ldr	r2, [sp, #8]
   33530:	6921      	ldr	r1, [r4, #16]
   33532:	f7ff f99d 	bl	32870 <memcpy>
   33536:	89a3      	ldrh	r3, [r4, #12]
   33538:	4a14      	ldr	r2, [pc, #80]	; (3358c <__ssputs_r+0xc0>)
   3353a:	401a      	ands	r2, r3
   3353c:	2380      	movs	r3, #128	; 0x80
   3353e:	4313      	orrs	r3, r2
   33540:	81a3      	strh	r3, [r4, #12]
   33542:	9b02      	ldr	r3, [sp, #8]
   33544:	6126      	str	r6, [r4, #16]
   33546:	18f6      	adds	r6, r6, r3
   33548:	6026      	str	r6, [r4, #0]
   3354a:	6165      	str	r5, [r4, #20]
   3354c:	9e01      	ldr	r6, [sp, #4]
   3354e:	1aed      	subs	r5, r5, r3
   33550:	60a5      	str	r5, [r4, #8]
   33552:	9b01      	ldr	r3, [sp, #4]
   33554:	42b3      	cmp	r3, r6
   33556:	d200      	bcs.n	3355a <__ssputs_r+0x8e>
   33558:	001e      	movs	r6, r3
   3355a:	0032      	movs	r2, r6
   3355c:	9903      	ldr	r1, [sp, #12]
   3355e:	6820      	ldr	r0, [r4, #0]
   33560:	f7ff f98f 	bl	32882 <memmove>
   33564:	68a3      	ldr	r3, [r4, #8]
   33566:	2000      	movs	r0, #0
   33568:	1b9b      	subs	r3, r3, r6
   3356a:	60a3      	str	r3, [r4, #8]
   3356c:	6823      	ldr	r3, [r4, #0]
   3356e:	199e      	adds	r6, r3, r6
   33570:	6026      	str	r6, [r4, #0]
   33572:	e7da      	b.n	3352a <__ssputs_r+0x5e>
   33574:	002a      	movs	r2, r5
   33576:	0038      	movs	r0, r7
   33578:	f000 fb65 	bl	33c46 <_realloc_r>
   3357c:	1e06      	subs	r6, r0, #0
   3357e:	d1e0      	bne.n	33542 <__ssputs_r+0x76>
   33580:	6921      	ldr	r1, [r4, #16]
   33582:	0038      	movs	r0, r7
   33584:	f7ff f998 	bl	328b8 <_free_r>
   33588:	e7c7      	b.n	3351a <__ssputs_r+0x4e>
   3358a:	46c0      	nop			; (mov r8, r8)
   3358c:	fffffb7f 	.word	0xfffffb7f

00033590 <_svfiprintf_r>:
   33590:	b5f0      	push	{r4, r5, r6, r7, lr}
   33592:	b09f      	sub	sp, #124	; 0x7c
   33594:	9002      	str	r0, [sp, #8]
   33596:	9305      	str	r3, [sp, #20]
   33598:	898b      	ldrh	r3, [r1, #12]
   3359a:	000f      	movs	r7, r1
   3359c:	0016      	movs	r6, r2
   3359e:	061b      	lsls	r3, r3, #24
   335a0:	d511      	bpl.n	335c6 <_svfiprintf_r+0x36>
   335a2:	690b      	ldr	r3, [r1, #16]
   335a4:	2b00      	cmp	r3, #0
   335a6:	d10e      	bne.n	335c6 <_svfiprintf_r+0x36>
   335a8:	2140      	movs	r1, #64	; 0x40
   335aa:	f7ff f9cf 	bl	3294c <_malloc_r>
   335ae:	6038      	str	r0, [r7, #0]
   335b0:	6138      	str	r0, [r7, #16]
   335b2:	2800      	cmp	r0, #0
   335b4:	d105      	bne.n	335c2 <_svfiprintf_r+0x32>
   335b6:	230c      	movs	r3, #12
   335b8:	9a02      	ldr	r2, [sp, #8]
   335ba:	3801      	subs	r0, #1
   335bc:	6013      	str	r3, [r2, #0]
   335be:	b01f      	add	sp, #124	; 0x7c
   335c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   335c2:	2340      	movs	r3, #64	; 0x40
   335c4:	617b      	str	r3, [r7, #20]
   335c6:	2300      	movs	r3, #0
   335c8:	ad06      	add	r5, sp, #24
   335ca:	616b      	str	r3, [r5, #20]
   335cc:	3320      	adds	r3, #32
   335ce:	766b      	strb	r3, [r5, #25]
   335d0:	3310      	adds	r3, #16
   335d2:	76ab      	strb	r3, [r5, #26]
   335d4:	0034      	movs	r4, r6
   335d6:	7823      	ldrb	r3, [r4, #0]
   335d8:	2b00      	cmp	r3, #0
   335da:	d147      	bne.n	3366c <_svfiprintf_r+0xdc>
   335dc:	1ba3      	subs	r3, r4, r6
   335de:	9304      	str	r3, [sp, #16]
   335e0:	d00d      	beq.n	335fe <_svfiprintf_r+0x6e>
   335e2:	1ba3      	subs	r3, r4, r6
   335e4:	0032      	movs	r2, r6
   335e6:	0039      	movs	r1, r7
   335e8:	9802      	ldr	r0, [sp, #8]
   335ea:	f7ff ff6f 	bl	334cc <__ssputs_r>
   335ee:	1c43      	adds	r3, r0, #1
   335f0:	d100      	bne.n	335f4 <_svfiprintf_r+0x64>
   335f2:	e0b5      	b.n	33760 <_svfiprintf_r+0x1d0>
   335f4:	696a      	ldr	r2, [r5, #20]
   335f6:	9b04      	ldr	r3, [sp, #16]
   335f8:	4694      	mov	ip, r2
   335fa:	4463      	add	r3, ip
   335fc:	616b      	str	r3, [r5, #20]
   335fe:	7823      	ldrb	r3, [r4, #0]
   33600:	2b00      	cmp	r3, #0
   33602:	d100      	bne.n	33606 <_svfiprintf_r+0x76>
   33604:	e0ac      	b.n	33760 <_svfiprintf_r+0x1d0>
   33606:	2201      	movs	r2, #1
   33608:	2300      	movs	r3, #0
   3360a:	4252      	negs	r2, r2
   3360c:	606a      	str	r2, [r5, #4]
   3360e:	a902      	add	r1, sp, #8
   33610:	3254      	adds	r2, #84	; 0x54
   33612:	1852      	adds	r2, r2, r1
   33614:	3401      	adds	r4, #1
   33616:	602b      	str	r3, [r5, #0]
   33618:	60eb      	str	r3, [r5, #12]
   3361a:	60ab      	str	r3, [r5, #8]
   3361c:	7013      	strb	r3, [r2, #0]
   3361e:	65ab      	str	r3, [r5, #88]	; 0x58
   33620:	4e58      	ldr	r6, [pc, #352]	; (33784 <_svfiprintf_r+0x1f4>)
   33622:	2205      	movs	r2, #5
   33624:	7821      	ldrb	r1, [r4, #0]
   33626:	0030      	movs	r0, r6
   33628:	f000 fb02 	bl	33c30 <memchr>
   3362c:	1c62      	adds	r2, r4, #1
   3362e:	2800      	cmp	r0, #0
   33630:	d120      	bne.n	33674 <_svfiprintf_r+0xe4>
   33632:	6829      	ldr	r1, [r5, #0]
   33634:	06cb      	lsls	r3, r1, #27
   33636:	d504      	bpl.n	33642 <_svfiprintf_r+0xb2>
   33638:	2353      	movs	r3, #83	; 0x53
   3363a:	ae02      	add	r6, sp, #8
   3363c:	3020      	adds	r0, #32
   3363e:	199b      	adds	r3, r3, r6
   33640:	7018      	strb	r0, [r3, #0]
   33642:	070b      	lsls	r3, r1, #28
   33644:	d504      	bpl.n	33650 <_svfiprintf_r+0xc0>
   33646:	2353      	movs	r3, #83	; 0x53
   33648:	202b      	movs	r0, #43	; 0x2b
   3364a:	ae02      	add	r6, sp, #8
   3364c:	199b      	adds	r3, r3, r6
   3364e:	7018      	strb	r0, [r3, #0]
   33650:	7823      	ldrb	r3, [r4, #0]
   33652:	2b2a      	cmp	r3, #42	; 0x2a
   33654:	d016      	beq.n	33684 <_svfiprintf_r+0xf4>
   33656:	2000      	movs	r0, #0
   33658:	210a      	movs	r1, #10
   3365a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3365c:	7822      	ldrb	r2, [r4, #0]
   3365e:	3a30      	subs	r2, #48	; 0x30
   33660:	2a09      	cmp	r2, #9
   33662:	d955      	bls.n	33710 <_svfiprintf_r+0x180>
   33664:	2800      	cmp	r0, #0
   33666:	d015      	beq.n	33694 <_svfiprintf_r+0x104>
   33668:	9309      	str	r3, [sp, #36]	; 0x24
   3366a:	e013      	b.n	33694 <_svfiprintf_r+0x104>
   3366c:	2b25      	cmp	r3, #37	; 0x25
   3366e:	d0b5      	beq.n	335dc <_svfiprintf_r+0x4c>
   33670:	3401      	adds	r4, #1
   33672:	e7b0      	b.n	335d6 <_svfiprintf_r+0x46>
   33674:	2301      	movs	r3, #1
   33676:	1b80      	subs	r0, r0, r6
   33678:	4083      	lsls	r3, r0
   3367a:	6829      	ldr	r1, [r5, #0]
   3367c:	0014      	movs	r4, r2
   3367e:	430b      	orrs	r3, r1
   33680:	602b      	str	r3, [r5, #0]
   33682:	e7cd      	b.n	33620 <_svfiprintf_r+0x90>
   33684:	9b05      	ldr	r3, [sp, #20]
   33686:	1d18      	adds	r0, r3, #4
   33688:	681b      	ldr	r3, [r3, #0]
   3368a:	9005      	str	r0, [sp, #20]
   3368c:	2b00      	cmp	r3, #0
   3368e:	db39      	blt.n	33704 <_svfiprintf_r+0x174>
   33690:	9309      	str	r3, [sp, #36]	; 0x24
   33692:	0014      	movs	r4, r2
   33694:	7823      	ldrb	r3, [r4, #0]
   33696:	2b2e      	cmp	r3, #46	; 0x2e
   33698:	d10b      	bne.n	336b2 <_svfiprintf_r+0x122>
   3369a:	7863      	ldrb	r3, [r4, #1]
   3369c:	1c62      	adds	r2, r4, #1
   3369e:	2b2a      	cmp	r3, #42	; 0x2a
   336a0:	d13e      	bne.n	33720 <_svfiprintf_r+0x190>
   336a2:	9b05      	ldr	r3, [sp, #20]
   336a4:	3402      	adds	r4, #2
   336a6:	1d1a      	adds	r2, r3, #4
   336a8:	681b      	ldr	r3, [r3, #0]
   336aa:	9205      	str	r2, [sp, #20]
   336ac:	2b00      	cmp	r3, #0
   336ae:	db34      	blt.n	3371a <_svfiprintf_r+0x18a>
   336b0:	9307      	str	r3, [sp, #28]
   336b2:	4e35      	ldr	r6, [pc, #212]	; (33788 <_svfiprintf_r+0x1f8>)
   336b4:	7821      	ldrb	r1, [r4, #0]
   336b6:	2203      	movs	r2, #3
   336b8:	0030      	movs	r0, r6
   336ba:	f000 fab9 	bl	33c30 <memchr>
   336be:	2800      	cmp	r0, #0
   336c0:	d006      	beq.n	336d0 <_svfiprintf_r+0x140>
   336c2:	2340      	movs	r3, #64	; 0x40
   336c4:	1b80      	subs	r0, r0, r6
   336c6:	4083      	lsls	r3, r0
   336c8:	682a      	ldr	r2, [r5, #0]
   336ca:	3401      	adds	r4, #1
   336cc:	4313      	orrs	r3, r2
   336ce:	602b      	str	r3, [r5, #0]
   336d0:	7821      	ldrb	r1, [r4, #0]
   336d2:	2206      	movs	r2, #6
   336d4:	482d      	ldr	r0, [pc, #180]	; (3378c <_svfiprintf_r+0x1fc>)
   336d6:	1c66      	adds	r6, r4, #1
   336d8:	7629      	strb	r1, [r5, #24]
   336da:	f000 faa9 	bl	33c30 <memchr>
   336de:	2800      	cmp	r0, #0
   336e0:	d046      	beq.n	33770 <_svfiprintf_r+0x1e0>
   336e2:	4b2b      	ldr	r3, [pc, #172]	; (33790 <_svfiprintf_r+0x200>)
   336e4:	2b00      	cmp	r3, #0
   336e6:	d12f      	bne.n	33748 <_svfiprintf_r+0x1b8>
   336e8:	6829      	ldr	r1, [r5, #0]
   336ea:	9b05      	ldr	r3, [sp, #20]
   336ec:	2207      	movs	r2, #7
   336ee:	05c9      	lsls	r1, r1, #23
   336f0:	d528      	bpl.n	33744 <_svfiprintf_r+0x1b4>
   336f2:	189b      	adds	r3, r3, r2
   336f4:	4393      	bics	r3, r2
   336f6:	3308      	adds	r3, #8
   336f8:	9305      	str	r3, [sp, #20]
   336fa:	696b      	ldr	r3, [r5, #20]
   336fc:	9a03      	ldr	r2, [sp, #12]
   336fe:	189b      	adds	r3, r3, r2
   33700:	616b      	str	r3, [r5, #20]
   33702:	e767      	b.n	335d4 <_svfiprintf_r+0x44>
   33704:	425b      	negs	r3, r3
   33706:	60eb      	str	r3, [r5, #12]
   33708:	2302      	movs	r3, #2
   3370a:	430b      	orrs	r3, r1
   3370c:	602b      	str	r3, [r5, #0]
   3370e:	e7c0      	b.n	33692 <_svfiprintf_r+0x102>
   33710:	434b      	muls	r3, r1
   33712:	3401      	adds	r4, #1
   33714:	189b      	adds	r3, r3, r2
   33716:	2001      	movs	r0, #1
   33718:	e7a0      	b.n	3365c <_svfiprintf_r+0xcc>
   3371a:	2301      	movs	r3, #1
   3371c:	425b      	negs	r3, r3
   3371e:	e7c7      	b.n	336b0 <_svfiprintf_r+0x120>
   33720:	2300      	movs	r3, #0
   33722:	0014      	movs	r4, r2
   33724:	200a      	movs	r0, #10
   33726:	001a      	movs	r2, r3
   33728:	606b      	str	r3, [r5, #4]
   3372a:	7821      	ldrb	r1, [r4, #0]
   3372c:	3930      	subs	r1, #48	; 0x30
   3372e:	2909      	cmp	r1, #9
   33730:	d903      	bls.n	3373a <_svfiprintf_r+0x1aa>
   33732:	2b00      	cmp	r3, #0
   33734:	d0bd      	beq.n	336b2 <_svfiprintf_r+0x122>
   33736:	9207      	str	r2, [sp, #28]
   33738:	e7bb      	b.n	336b2 <_svfiprintf_r+0x122>
   3373a:	4342      	muls	r2, r0
   3373c:	3401      	adds	r4, #1
   3373e:	1852      	adds	r2, r2, r1
   33740:	2301      	movs	r3, #1
   33742:	e7f2      	b.n	3372a <_svfiprintf_r+0x19a>
   33744:	3307      	adds	r3, #7
   33746:	e7d5      	b.n	336f4 <_svfiprintf_r+0x164>
   33748:	ab05      	add	r3, sp, #20
   3374a:	9300      	str	r3, [sp, #0]
   3374c:	003a      	movs	r2, r7
   3374e:	4b11      	ldr	r3, [pc, #68]	; (33794 <_svfiprintf_r+0x204>)
   33750:	0029      	movs	r1, r5
   33752:	9802      	ldr	r0, [sp, #8]
   33754:	e000      	b.n	33758 <_svfiprintf_r+0x1c8>
   33756:	bf00      	nop
   33758:	9003      	str	r0, [sp, #12]
   3375a:	9b03      	ldr	r3, [sp, #12]
   3375c:	3301      	adds	r3, #1
   3375e:	d1cc      	bne.n	336fa <_svfiprintf_r+0x16a>
   33760:	89bb      	ldrh	r3, [r7, #12]
   33762:	980b      	ldr	r0, [sp, #44]	; 0x2c
   33764:	065b      	lsls	r3, r3, #25
   33766:	d400      	bmi.n	3376a <_svfiprintf_r+0x1da>
   33768:	e729      	b.n	335be <_svfiprintf_r+0x2e>
   3376a:	2001      	movs	r0, #1
   3376c:	4240      	negs	r0, r0
   3376e:	e726      	b.n	335be <_svfiprintf_r+0x2e>
   33770:	ab05      	add	r3, sp, #20
   33772:	9300      	str	r3, [sp, #0]
   33774:	003a      	movs	r2, r7
   33776:	4b07      	ldr	r3, [pc, #28]	; (33794 <_svfiprintf_r+0x204>)
   33778:	0029      	movs	r1, r5
   3377a:	9802      	ldr	r0, [sp, #8]
   3377c:	f000 f87a 	bl	33874 <_printf_i>
   33780:	e7ea      	b.n	33758 <_svfiprintf_r+0x1c8>
   33782:	46c0      	nop			; (mov r8, r8)
   33784:	000384e2 	.word	0x000384e2
   33788:	000384e8 	.word	0x000384e8
   3378c:	000384ec 	.word	0x000384ec
   33790:	00000000 	.word	0x00000000
   33794:	000334cd 	.word	0x000334cd

00033798 <_printf_common>:
   33798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3379a:	0015      	movs	r5, r2
   3379c:	9301      	str	r3, [sp, #4]
   3379e:	688a      	ldr	r2, [r1, #8]
   337a0:	690b      	ldr	r3, [r1, #16]
   337a2:	9000      	str	r0, [sp, #0]
   337a4:	000c      	movs	r4, r1
   337a6:	4293      	cmp	r3, r2
   337a8:	da00      	bge.n	337ac <_printf_common+0x14>
   337aa:	0013      	movs	r3, r2
   337ac:	0022      	movs	r2, r4
   337ae:	602b      	str	r3, [r5, #0]
   337b0:	3243      	adds	r2, #67	; 0x43
   337b2:	7812      	ldrb	r2, [r2, #0]
   337b4:	2a00      	cmp	r2, #0
   337b6:	d001      	beq.n	337bc <_printf_common+0x24>
   337b8:	3301      	adds	r3, #1
   337ba:	602b      	str	r3, [r5, #0]
   337bc:	6823      	ldr	r3, [r4, #0]
   337be:	069b      	lsls	r3, r3, #26
   337c0:	d502      	bpl.n	337c8 <_printf_common+0x30>
   337c2:	682b      	ldr	r3, [r5, #0]
   337c4:	3302      	adds	r3, #2
   337c6:	602b      	str	r3, [r5, #0]
   337c8:	2706      	movs	r7, #6
   337ca:	6823      	ldr	r3, [r4, #0]
   337cc:	401f      	ands	r7, r3
   337ce:	d027      	beq.n	33820 <_printf_common+0x88>
   337d0:	0023      	movs	r3, r4
   337d2:	3343      	adds	r3, #67	; 0x43
   337d4:	781b      	ldrb	r3, [r3, #0]
   337d6:	1e5a      	subs	r2, r3, #1
   337d8:	4193      	sbcs	r3, r2
   337da:	6822      	ldr	r2, [r4, #0]
   337dc:	0692      	lsls	r2, r2, #26
   337de:	d430      	bmi.n	33842 <_printf_common+0xaa>
   337e0:	0022      	movs	r2, r4
   337e2:	9901      	ldr	r1, [sp, #4]
   337e4:	3243      	adds	r2, #67	; 0x43
   337e6:	9800      	ldr	r0, [sp, #0]
   337e8:	9e08      	ldr	r6, [sp, #32]
   337ea:	47b0      	blx	r6
   337ec:	1c43      	adds	r3, r0, #1
   337ee:	d025      	beq.n	3383c <_printf_common+0xa4>
   337f0:	2306      	movs	r3, #6
   337f2:	6820      	ldr	r0, [r4, #0]
   337f4:	682a      	ldr	r2, [r5, #0]
   337f6:	68e1      	ldr	r1, [r4, #12]
   337f8:	4003      	ands	r3, r0
   337fa:	2500      	movs	r5, #0
   337fc:	2b04      	cmp	r3, #4
   337fe:	d103      	bne.n	33808 <_printf_common+0x70>
   33800:	1a8d      	subs	r5, r1, r2
   33802:	43eb      	mvns	r3, r5
   33804:	17db      	asrs	r3, r3, #31
   33806:	401d      	ands	r5, r3
   33808:	68a3      	ldr	r3, [r4, #8]
   3380a:	6922      	ldr	r2, [r4, #16]
   3380c:	4293      	cmp	r3, r2
   3380e:	dd01      	ble.n	33814 <_printf_common+0x7c>
   33810:	1a9b      	subs	r3, r3, r2
   33812:	18ed      	adds	r5, r5, r3
   33814:	2700      	movs	r7, #0
   33816:	42bd      	cmp	r5, r7
   33818:	d120      	bne.n	3385c <_printf_common+0xc4>
   3381a:	2000      	movs	r0, #0
   3381c:	e010      	b.n	33840 <_printf_common+0xa8>
   3381e:	3701      	adds	r7, #1
   33820:	68e3      	ldr	r3, [r4, #12]
   33822:	682a      	ldr	r2, [r5, #0]
   33824:	1a9b      	subs	r3, r3, r2
   33826:	429f      	cmp	r7, r3
   33828:	dad2      	bge.n	337d0 <_printf_common+0x38>
   3382a:	0022      	movs	r2, r4
   3382c:	2301      	movs	r3, #1
   3382e:	3219      	adds	r2, #25
   33830:	9901      	ldr	r1, [sp, #4]
   33832:	9800      	ldr	r0, [sp, #0]
   33834:	9e08      	ldr	r6, [sp, #32]
   33836:	47b0      	blx	r6
   33838:	1c43      	adds	r3, r0, #1
   3383a:	d1f0      	bne.n	3381e <_printf_common+0x86>
   3383c:	2001      	movs	r0, #1
   3383e:	4240      	negs	r0, r0
   33840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   33842:	2030      	movs	r0, #48	; 0x30
   33844:	18e1      	adds	r1, r4, r3
   33846:	3143      	adds	r1, #67	; 0x43
   33848:	7008      	strb	r0, [r1, #0]
   3384a:	0021      	movs	r1, r4
   3384c:	1c5a      	adds	r2, r3, #1
   3384e:	3145      	adds	r1, #69	; 0x45
   33850:	7809      	ldrb	r1, [r1, #0]
   33852:	18a2      	adds	r2, r4, r2
   33854:	3243      	adds	r2, #67	; 0x43
   33856:	3302      	adds	r3, #2
   33858:	7011      	strb	r1, [r2, #0]
   3385a:	e7c1      	b.n	337e0 <_printf_common+0x48>
   3385c:	0022      	movs	r2, r4
   3385e:	2301      	movs	r3, #1
   33860:	321a      	adds	r2, #26
   33862:	9901      	ldr	r1, [sp, #4]
   33864:	9800      	ldr	r0, [sp, #0]
   33866:	9e08      	ldr	r6, [sp, #32]
   33868:	47b0      	blx	r6
   3386a:	1c43      	adds	r3, r0, #1
   3386c:	d0e6      	beq.n	3383c <_printf_common+0xa4>
   3386e:	3701      	adds	r7, #1
   33870:	e7d1      	b.n	33816 <_printf_common+0x7e>
	...

00033874 <_printf_i>:
   33874:	b5f0      	push	{r4, r5, r6, r7, lr}
   33876:	b08b      	sub	sp, #44	; 0x2c
   33878:	9206      	str	r2, [sp, #24]
   3387a:	000a      	movs	r2, r1
   3387c:	3243      	adds	r2, #67	; 0x43
   3387e:	9307      	str	r3, [sp, #28]
   33880:	9005      	str	r0, [sp, #20]
   33882:	9204      	str	r2, [sp, #16]
   33884:	7e0a      	ldrb	r2, [r1, #24]
   33886:	000c      	movs	r4, r1
   33888:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3388a:	2a6e      	cmp	r2, #110	; 0x6e
   3388c:	d100      	bne.n	33890 <_printf_i+0x1c>
   3388e:	e08f      	b.n	339b0 <_printf_i+0x13c>
   33890:	d817      	bhi.n	338c2 <_printf_i+0x4e>
   33892:	2a63      	cmp	r2, #99	; 0x63
   33894:	d02c      	beq.n	338f0 <_printf_i+0x7c>
   33896:	d808      	bhi.n	338aa <_printf_i+0x36>
   33898:	2a00      	cmp	r2, #0
   3389a:	d100      	bne.n	3389e <_printf_i+0x2a>
   3389c:	e099      	b.n	339d2 <_printf_i+0x15e>
   3389e:	2a58      	cmp	r2, #88	; 0x58
   338a0:	d054      	beq.n	3394c <_printf_i+0xd8>
   338a2:	0026      	movs	r6, r4
   338a4:	3642      	adds	r6, #66	; 0x42
   338a6:	7032      	strb	r2, [r6, #0]
   338a8:	e029      	b.n	338fe <_printf_i+0x8a>
   338aa:	2a64      	cmp	r2, #100	; 0x64
   338ac:	d001      	beq.n	338b2 <_printf_i+0x3e>
   338ae:	2a69      	cmp	r2, #105	; 0x69
   338b0:	d1f7      	bne.n	338a2 <_printf_i+0x2e>
   338b2:	6821      	ldr	r1, [r4, #0]
   338b4:	681a      	ldr	r2, [r3, #0]
   338b6:	0608      	lsls	r0, r1, #24
   338b8:	d523      	bpl.n	33902 <_printf_i+0x8e>
   338ba:	1d11      	adds	r1, r2, #4
   338bc:	6019      	str	r1, [r3, #0]
   338be:	6815      	ldr	r5, [r2, #0]
   338c0:	e025      	b.n	3390e <_printf_i+0x9a>
   338c2:	2a73      	cmp	r2, #115	; 0x73
   338c4:	d100      	bne.n	338c8 <_printf_i+0x54>
   338c6:	e088      	b.n	339da <_printf_i+0x166>
   338c8:	d808      	bhi.n	338dc <_printf_i+0x68>
   338ca:	2a6f      	cmp	r2, #111	; 0x6f
   338cc:	d029      	beq.n	33922 <_printf_i+0xae>
   338ce:	2a70      	cmp	r2, #112	; 0x70
   338d0:	d1e7      	bne.n	338a2 <_printf_i+0x2e>
   338d2:	2220      	movs	r2, #32
   338d4:	6809      	ldr	r1, [r1, #0]
   338d6:	430a      	orrs	r2, r1
   338d8:	6022      	str	r2, [r4, #0]
   338da:	e003      	b.n	338e4 <_printf_i+0x70>
   338dc:	2a75      	cmp	r2, #117	; 0x75
   338de:	d020      	beq.n	33922 <_printf_i+0xae>
   338e0:	2a78      	cmp	r2, #120	; 0x78
   338e2:	d1de      	bne.n	338a2 <_printf_i+0x2e>
   338e4:	0022      	movs	r2, r4
   338e6:	2178      	movs	r1, #120	; 0x78
   338e8:	3245      	adds	r2, #69	; 0x45
   338ea:	7011      	strb	r1, [r2, #0]
   338ec:	4a6c      	ldr	r2, [pc, #432]	; (33aa0 <_printf_i+0x22c>)
   338ee:	e030      	b.n	33952 <_printf_i+0xde>
   338f0:	000e      	movs	r6, r1
   338f2:	681a      	ldr	r2, [r3, #0]
   338f4:	3642      	adds	r6, #66	; 0x42
   338f6:	1d11      	adds	r1, r2, #4
   338f8:	6019      	str	r1, [r3, #0]
   338fa:	6813      	ldr	r3, [r2, #0]
   338fc:	7033      	strb	r3, [r6, #0]
   338fe:	2301      	movs	r3, #1
   33900:	e079      	b.n	339f6 <_printf_i+0x182>
   33902:	0649      	lsls	r1, r1, #25
   33904:	d5d9      	bpl.n	338ba <_printf_i+0x46>
   33906:	1d11      	adds	r1, r2, #4
   33908:	6019      	str	r1, [r3, #0]
   3390a:	2300      	movs	r3, #0
   3390c:	5ed5      	ldrsh	r5, [r2, r3]
   3390e:	2d00      	cmp	r5, #0
   33910:	da03      	bge.n	3391a <_printf_i+0xa6>
   33912:	232d      	movs	r3, #45	; 0x2d
   33914:	9a04      	ldr	r2, [sp, #16]
   33916:	426d      	negs	r5, r5
   33918:	7013      	strb	r3, [r2, #0]
   3391a:	4b62      	ldr	r3, [pc, #392]	; (33aa4 <_printf_i+0x230>)
   3391c:	270a      	movs	r7, #10
   3391e:	9303      	str	r3, [sp, #12]
   33920:	e02f      	b.n	33982 <_printf_i+0x10e>
   33922:	6820      	ldr	r0, [r4, #0]
   33924:	6819      	ldr	r1, [r3, #0]
   33926:	0605      	lsls	r5, r0, #24
   33928:	d503      	bpl.n	33932 <_printf_i+0xbe>
   3392a:	1d08      	adds	r0, r1, #4
   3392c:	6018      	str	r0, [r3, #0]
   3392e:	680d      	ldr	r5, [r1, #0]
   33930:	e005      	b.n	3393e <_printf_i+0xca>
   33932:	0640      	lsls	r0, r0, #25
   33934:	d5f9      	bpl.n	3392a <_printf_i+0xb6>
   33936:	680d      	ldr	r5, [r1, #0]
   33938:	1d08      	adds	r0, r1, #4
   3393a:	6018      	str	r0, [r3, #0]
   3393c:	b2ad      	uxth	r5, r5
   3393e:	4b59      	ldr	r3, [pc, #356]	; (33aa4 <_printf_i+0x230>)
   33940:	2708      	movs	r7, #8
   33942:	9303      	str	r3, [sp, #12]
   33944:	2a6f      	cmp	r2, #111	; 0x6f
   33946:	d018      	beq.n	3397a <_printf_i+0x106>
   33948:	270a      	movs	r7, #10
   3394a:	e016      	b.n	3397a <_printf_i+0x106>
   3394c:	3145      	adds	r1, #69	; 0x45
   3394e:	700a      	strb	r2, [r1, #0]
   33950:	4a54      	ldr	r2, [pc, #336]	; (33aa4 <_printf_i+0x230>)
   33952:	9203      	str	r2, [sp, #12]
   33954:	681a      	ldr	r2, [r3, #0]
   33956:	6821      	ldr	r1, [r4, #0]
   33958:	1d10      	adds	r0, r2, #4
   3395a:	6018      	str	r0, [r3, #0]
   3395c:	6815      	ldr	r5, [r2, #0]
   3395e:	0608      	lsls	r0, r1, #24
   33960:	d522      	bpl.n	339a8 <_printf_i+0x134>
   33962:	07cb      	lsls	r3, r1, #31
   33964:	d502      	bpl.n	3396c <_printf_i+0xf8>
   33966:	2320      	movs	r3, #32
   33968:	4319      	orrs	r1, r3
   3396a:	6021      	str	r1, [r4, #0]
   3396c:	2710      	movs	r7, #16
   3396e:	2d00      	cmp	r5, #0
   33970:	d103      	bne.n	3397a <_printf_i+0x106>
   33972:	2320      	movs	r3, #32
   33974:	6822      	ldr	r2, [r4, #0]
   33976:	439a      	bics	r2, r3
   33978:	6022      	str	r2, [r4, #0]
   3397a:	0023      	movs	r3, r4
   3397c:	2200      	movs	r2, #0
   3397e:	3343      	adds	r3, #67	; 0x43
   33980:	701a      	strb	r2, [r3, #0]
   33982:	6863      	ldr	r3, [r4, #4]
   33984:	60a3      	str	r3, [r4, #8]
   33986:	2b00      	cmp	r3, #0
   33988:	db5c      	blt.n	33a44 <_printf_i+0x1d0>
   3398a:	2204      	movs	r2, #4
   3398c:	6821      	ldr	r1, [r4, #0]
   3398e:	4391      	bics	r1, r2
   33990:	6021      	str	r1, [r4, #0]
   33992:	2d00      	cmp	r5, #0
   33994:	d158      	bne.n	33a48 <_printf_i+0x1d4>
   33996:	9e04      	ldr	r6, [sp, #16]
   33998:	2b00      	cmp	r3, #0
   3399a:	d064      	beq.n	33a66 <_printf_i+0x1f2>
   3399c:	0026      	movs	r6, r4
   3399e:	9b03      	ldr	r3, [sp, #12]
   339a0:	3642      	adds	r6, #66	; 0x42
   339a2:	781b      	ldrb	r3, [r3, #0]
   339a4:	7033      	strb	r3, [r6, #0]
   339a6:	e05e      	b.n	33a66 <_printf_i+0x1f2>
   339a8:	0648      	lsls	r0, r1, #25
   339aa:	d5da      	bpl.n	33962 <_printf_i+0xee>
   339ac:	b2ad      	uxth	r5, r5
   339ae:	e7d8      	b.n	33962 <_printf_i+0xee>
   339b0:	6809      	ldr	r1, [r1, #0]
   339b2:	681a      	ldr	r2, [r3, #0]
   339b4:	0608      	lsls	r0, r1, #24
   339b6:	d505      	bpl.n	339c4 <_printf_i+0x150>
   339b8:	1d11      	adds	r1, r2, #4
   339ba:	6019      	str	r1, [r3, #0]
   339bc:	6813      	ldr	r3, [r2, #0]
   339be:	6962      	ldr	r2, [r4, #20]
   339c0:	601a      	str	r2, [r3, #0]
   339c2:	e006      	b.n	339d2 <_printf_i+0x15e>
   339c4:	0649      	lsls	r1, r1, #25
   339c6:	d5f7      	bpl.n	339b8 <_printf_i+0x144>
   339c8:	1d11      	adds	r1, r2, #4
   339ca:	6019      	str	r1, [r3, #0]
   339cc:	6813      	ldr	r3, [r2, #0]
   339ce:	8aa2      	ldrh	r2, [r4, #20]
   339d0:	801a      	strh	r2, [r3, #0]
   339d2:	2300      	movs	r3, #0
   339d4:	9e04      	ldr	r6, [sp, #16]
   339d6:	6123      	str	r3, [r4, #16]
   339d8:	e054      	b.n	33a84 <_printf_i+0x210>
   339da:	681a      	ldr	r2, [r3, #0]
   339dc:	1d11      	adds	r1, r2, #4
   339de:	6019      	str	r1, [r3, #0]
   339e0:	6816      	ldr	r6, [r2, #0]
   339e2:	2100      	movs	r1, #0
   339e4:	6862      	ldr	r2, [r4, #4]
   339e6:	0030      	movs	r0, r6
   339e8:	f000 f922 	bl	33c30 <memchr>
   339ec:	2800      	cmp	r0, #0
   339ee:	d001      	beq.n	339f4 <_printf_i+0x180>
   339f0:	1b80      	subs	r0, r0, r6
   339f2:	6060      	str	r0, [r4, #4]
   339f4:	6863      	ldr	r3, [r4, #4]
   339f6:	6123      	str	r3, [r4, #16]
   339f8:	2300      	movs	r3, #0
   339fa:	9a04      	ldr	r2, [sp, #16]
   339fc:	7013      	strb	r3, [r2, #0]
   339fe:	e041      	b.n	33a84 <_printf_i+0x210>
   33a00:	6923      	ldr	r3, [r4, #16]
   33a02:	0032      	movs	r2, r6
   33a04:	9906      	ldr	r1, [sp, #24]
   33a06:	9805      	ldr	r0, [sp, #20]
   33a08:	9d07      	ldr	r5, [sp, #28]
   33a0a:	47a8      	blx	r5
   33a0c:	1c43      	adds	r3, r0, #1
   33a0e:	d043      	beq.n	33a98 <_printf_i+0x224>
   33a10:	6823      	ldr	r3, [r4, #0]
   33a12:	2500      	movs	r5, #0
   33a14:	079b      	lsls	r3, r3, #30
   33a16:	d40f      	bmi.n	33a38 <_printf_i+0x1c4>
   33a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33a1a:	68e0      	ldr	r0, [r4, #12]
   33a1c:	4298      	cmp	r0, r3
   33a1e:	da3d      	bge.n	33a9c <_printf_i+0x228>
   33a20:	0018      	movs	r0, r3
   33a22:	e03b      	b.n	33a9c <_printf_i+0x228>
   33a24:	0022      	movs	r2, r4
   33a26:	2301      	movs	r3, #1
   33a28:	3219      	adds	r2, #25
   33a2a:	9906      	ldr	r1, [sp, #24]
   33a2c:	9805      	ldr	r0, [sp, #20]
   33a2e:	9e07      	ldr	r6, [sp, #28]
   33a30:	47b0      	blx	r6
   33a32:	1c43      	adds	r3, r0, #1
   33a34:	d030      	beq.n	33a98 <_printf_i+0x224>
   33a36:	3501      	adds	r5, #1
   33a38:	68e3      	ldr	r3, [r4, #12]
   33a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   33a3c:	1a9b      	subs	r3, r3, r2
   33a3e:	429d      	cmp	r5, r3
   33a40:	dbf0      	blt.n	33a24 <_printf_i+0x1b0>
   33a42:	e7e9      	b.n	33a18 <_printf_i+0x1a4>
   33a44:	2d00      	cmp	r5, #0
   33a46:	d0a9      	beq.n	3399c <_printf_i+0x128>
   33a48:	9e04      	ldr	r6, [sp, #16]
   33a4a:	0028      	movs	r0, r5
   33a4c:	0039      	movs	r1, r7
   33a4e:	f7fc fa53 	bl	2fef8 <__aeabi_uidivmod>
   33a52:	9b03      	ldr	r3, [sp, #12]
   33a54:	3e01      	subs	r6, #1
   33a56:	5c5b      	ldrb	r3, [r3, r1]
   33a58:	0028      	movs	r0, r5
   33a5a:	7033      	strb	r3, [r6, #0]
   33a5c:	0039      	movs	r1, r7
   33a5e:	f7fc f9c5 	bl	2fdec <__udivsi3>
   33a62:	1e05      	subs	r5, r0, #0
   33a64:	d1f1      	bne.n	33a4a <_printf_i+0x1d6>
   33a66:	2f08      	cmp	r7, #8
   33a68:	d109      	bne.n	33a7e <_printf_i+0x20a>
   33a6a:	6823      	ldr	r3, [r4, #0]
   33a6c:	07db      	lsls	r3, r3, #31
   33a6e:	d506      	bpl.n	33a7e <_printf_i+0x20a>
   33a70:	6863      	ldr	r3, [r4, #4]
   33a72:	6922      	ldr	r2, [r4, #16]
   33a74:	4293      	cmp	r3, r2
   33a76:	dc02      	bgt.n	33a7e <_printf_i+0x20a>
   33a78:	2330      	movs	r3, #48	; 0x30
   33a7a:	3e01      	subs	r6, #1
   33a7c:	7033      	strb	r3, [r6, #0]
   33a7e:	9b04      	ldr	r3, [sp, #16]
   33a80:	1b9b      	subs	r3, r3, r6
   33a82:	6123      	str	r3, [r4, #16]
   33a84:	9b07      	ldr	r3, [sp, #28]
   33a86:	aa09      	add	r2, sp, #36	; 0x24
   33a88:	9300      	str	r3, [sp, #0]
   33a8a:	0021      	movs	r1, r4
   33a8c:	9b06      	ldr	r3, [sp, #24]
   33a8e:	9805      	ldr	r0, [sp, #20]
   33a90:	f7ff fe82 	bl	33798 <_printf_common>
   33a94:	1c43      	adds	r3, r0, #1
   33a96:	d1b3      	bne.n	33a00 <_printf_i+0x18c>
   33a98:	2001      	movs	r0, #1
   33a9a:	4240      	negs	r0, r0
   33a9c:	b00b      	add	sp, #44	; 0x2c
   33a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33aa0:	00038504 	.word	0x00038504
   33aa4:	000384f3 	.word	0x000384f3

00033aa8 <__sread>:
   33aa8:	b570      	push	{r4, r5, r6, lr}
   33aaa:	000c      	movs	r4, r1
   33aac:	250e      	movs	r5, #14
   33aae:	5f49      	ldrsh	r1, [r1, r5]
   33ab0:	f000 f8f0 	bl	33c94 <_read_r>
   33ab4:	2800      	cmp	r0, #0
   33ab6:	db03      	blt.n	33ac0 <__sread+0x18>
   33ab8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   33aba:	181b      	adds	r3, r3, r0
   33abc:	6563      	str	r3, [r4, #84]	; 0x54
   33abe:	bd70      	pop	{r4, r5, r6, pc}
   33ac0:	89a3      	ldrh	r3, [r4, #12]
   33ac2:	4a02      	ldr	r2, [pc, #8]	; (33acc <__sread+0x24>)
   33ac4:	4013      	ands	r3, r2
   33ac6:	81a3      	strh	r3, [r4, #12]
   33ac8:	e7f9      	b.n	33abe <__sread+0x16>
   33aca:	46c0      	nop			; (mov r8, r8)
   33acc:	ffffefff 	.word	0xffffefff

00033ad0 <__swrite>:
   33ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33ad2:	001f      	movs	r7, r3
   33ad4:	898b      	ldrh	r3, [r1, #12]
   33ad6:	0005      	movs	r5, r0
   33ad8:	000c      	movs	r4, r1
   33ada:	0016      	movs	r6, r2
   33adc:	05db      	lsls	r3, r3, #23
   33ade:	d505      	bpl.n	33aec <__swrite+0x1c>
   33ae0:	230e      	movs	r3, #14
   33ae2:	5ec9      	ldrsh	r1, [r1, r3]
   33ae4:	2200      	movs	r2, #0
   33ae6:	2302      	movs	r3, #2
   33ae8:	f000 f88e 	bl	33c08 <_lseek_r>
   33aec:	89a3      	ldrh	r3, [r4, #12]
   33aee:	4a05      	ldr	r2, [pc, #20]	; (33b04 <__swrite+0x34>)
   33af0:	0028      	movs	r0, r5
   33af2:	4013      	ands	r3, r2
   33af4:	81a3      	strh	r3, [r4, #12]
   33af6:	0032      	movs	r2, r6
   33af8:	230e      	movs	r3, #14
   33afa:	5ee1      	ldrsh	r1, [r4, r3]
   33afc:	003b      	movs	r3, r7
   33afe:	f000 f839 	bl	33b74 <_write_r>
   33b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33b04:	ffffefff 	.word	0xffffefff

00033b08 <__sseek>:
   33b08:	b570      	push	{r4, r5, r6, lr}
   33b0a:	000c      	movs	r4, r1
   33b0c:	250e      	movs	r5, #14
   33b0e:	5f49      	ldrsh	r1, [r1, r5]
   33b10:	f000 f87a 	bl	33c08 <_lseek_r>
   33b14:	89a3      	ldrh	r3, [r4, #12]
   33b16:	1c42      	adds	r2, r0, #1
   33b18:	d103      	bne.n	33b22 <__sseek+0x1a>
   33b1a:	4a05      	ldr	r2, [pc, #20]	; (33b30 <__sseek+0x28>)
   33b1c:	4013      	ands	r3, r2
   33b1e:	81a3      	strh	r3, [r4, #12]
   33b20:	bd70      	pop	{r4, r5, r6, pc}
   33b22:	2280      	movs	r2, #128	; 0x80
   33b24:	0152      	lsls	r2, r2, #5
   33b26:	4313      	orrs	r3, r2
   33b28:	81a3      	strh	r3, [r4, #12]
   33b2a:	6560      	str	r0, [r4, #84]	; 0x54
   33b2c:	e7f8      	b.n	33b20 <__sseek+0x18>
   33b2e:	46c0      	nop			; (mov r8, r8)
   33b30:	ffffefff 	.word	0xffffefff

00033b34 <__sclose>:
   33b34:	b510      	push	{r4, lr}
   33b36:	230e      	movs	r3, #14
   33b38:	5ec9      	ldrsh	r1, [r1, r3]
   33b3a:	f000 f82f 	bl	33b9c <_close_r>
   33b3e:	bd10      	pop	{r4, pc}

00033b40 <strchr>:
   33b40:	b2c9      	uxtb	r1, r1
   33b42:	7803      	ldrb	r3, [r0, #0]
   33b44:	2b00      	cmp	r3, #0
   33b46:	d004      	beq.n	33b52 <strchr+0x12>
   33b48:	4299      	cmp	r1, r3
   33b4a:	d100      	bne.n	33b4e <strchr+0xe>
   33b4c:	4770      	bx	lr
   33b4e:	3001      	adds	r0, #1
   33b50:	e7f7      	b.n	33b42 <strchr+0x2>
   33b52:	424b      	negs	r3, r1
   33b54:	4159      	adcs	r1, r3
   33b56:	4249      	negs	r1, r1
   33b58:	4008      	ands	r0, r1
   33b5a:	e7f7      	b.n	33b4c <strchr+0xc>

00033b5c <__ascii_wctomb>:
   33b5c:	1e0b      	subs	r3, r1, #0
   33b5e:	d004      	beq.n	33b6a <__ascii_wctomb+0xe>
   33b60:	2aff      	cmp	r2, #255	; 0xff
   33b62:	d904      	bls.n	33b6e <__ascii_wctomb+0x12>
   33b64:	238a      	movs	r3, #138	; 0x8a
   33b66:	6003      	str	r3, [r0, #0]
   33b68:	3b8b      	subs	r3, #139	; 0x8b
   33b6a:	0018      	movs	r0, r3
   33b6c:	4770      	bx	lr
   33b6e:	700a      	strb	r2, [r1, #0]
   33b70:	2301      	movs	r3, #1
   33b72:	e7fa      	b.n	33b6a <__ascii_wctomb+0xe>

00033b74 <_write_r>:
   33b74:	b570      	push	{r4, r5, r6, lr}
   33b76:	0005      	movs	r5, r0
   33b78:	0008      	movs	r0, r1
   33b7a:	0011      	movs	r1, r2
   33b7c:	2200      	movs	r2, #0
   33b7e:	4c06      	ldr	r4, [pc, #24]	; (33b98 <_write_r+0x24>)
   33b80:	6022      	str	r2, [r4, #0]
   33b82:	001a      	movs	r2, r3
   33b84:	f7f4 f842 	bl	27c0c <_write>
   33b88:	1c43      	adds	r3, r0, #1
   33b8a:	d103      	bne.n	33b94 <_write_r+0x20>
   33b8c:	6823      	ldr	r3, [r4, #0]
   33b8e:	2b00      	cmp	r3, #0
   33b90:	d000      	beq.n	33b94 <_write_r+0x20>
   33b92:	602b      	str	r3, [r5, #0]
   33b94:	bd70      	pop	{r4, r5, r6, pc}
   33b96:	46c0      	nop			; (mov r8, r8)
   33b98:	200056c0 	.word	0x200056c0

00033b9c <_close_r>:
   33b9c:	2300      	movs	r3, #0
   33b9e:	b570      	push	{r4, r5, r6, lr}
   33ba0:	4c06      	ldr	r4, [pc, #24]	; (33bbc <_close_r+0x20>)
   33ba2:	0005      	movs	r5, r0
   33ba4:	0008      	movs	r0, r1
   33ba6:	6023      	str	r3, [r4, #0]
   33ba8:	f7f4 f884 	bl	27cb4 <_close>
   33bac:	1c43      	adds	r3, r0, #1
   33bae:	d103      	bne.n	33bb8 <_close_r+0x1c>
   33bb0:	6823      	ldr	r3, [r4, #0]
   33bb2:	2b00      	cmp	r3, #0
   33bb4:	d000      	beq.n	33bb8 <_close_r+0x1c>
   33bb6:	602b      	str	r3, [r5, #0]
   33bb8:	bd70      	pop	{r4, r5, r6, pc}
   33bba:	46c0      	nop			; (mov r8, r8)
   33bbc:	200056c0 	.word	0x200056c0

00033bc0 <_fstat_r>:
   33bc0:	2300      	movs	r3, #0
   33bc2:	b570      	push	{r4, r5, r6, lr}
   33bc4:	4c06      	ldr	r4, [pc, #24]	; (33be0 <_fstat_r+0x20>)
   33bc6:	0005      	movs	r5, r0
   33bc8:	0008      	movs	r0, r1
   33bca:	0011      	movs	r1, r2
   33bcc:	6023      	str	r3, [r4, #0]
   33bce:	f7f4 f87b 	bl	27cc8 <_fstat>
   33bd2:	1c43      	adds	r3, r0, #1
   33bd4:	d103      	bne.n	33bde <_fstat_r+0x1e>
   33bd6:	6823      	ldr	r3, [r4, #0]
   33bd8:	2b00      	cmp	r3, #0
   33bda:	d000      	beq.n	33bde <_fstat_r+0x1e>
   33bdc:	602b      	str	r3, [r5, #0]
   33bde:	bd70      	pop	{r4, r5, r6, pc}
   33be0:	200056c0 	.word	0x200056c0

00033be4 <_isatty_r>:
   33be4:	2300      	movs	r3, #0
   33be6:	b570      	push	{r4, r5, r6, lr}
   33be8:	4c06      	ldr	r4, [pc, #24]	; (33c04 <_isatty_r+0x20>)
   33bea:	0005      	movs	r5, r0
   33bec:	0008      	movs	r0, r1
   33bee:	6023      	str	r3, [r4, #0]
   33bf0:	f7f4 f878 	bl	27ce4 <_isatty>
   33bf4:	1c43      	adds	r3, r0, #1
   33bf6:	d103      	bne.n	33c00 <_isatty_r+0x1c>
   33bf8:	6823      	ldr	r3, [r4, #0]
   33bfa:	2b00      	cmp	r3, #0
   33bfc:	d000      	beq.n	33c00 <_isatty_r+0x1c>
   33bfe:	602b      	str	r3, [r5, #0]
   33c00:	bd70      	pop	{r4, r5, r6, pc}
   33c02:	46c0      	nop			; (mov r8, r8)
   33c04:	200056c0 	.word	0x200056c0

00033c08 <_lseek_r>:
   33c08:	b570      	push	{r4, r5, r6, lr}
   33c0a:	0005      	movs	r5, r0
   33c0c:	0008      	movs	r0, r1
   33c0e:	0011      	movs	r1, r2
   33c10:	2200      	movs	r2, #0
   33c12:	4c06      	ldr	r4, [pc, #24]	; (33c2c <_lseek_r+0x24>)
   33c14:	6022      	str	r2, [r4, #0]
   33c16:	001a      	movs	r2, r3
   33c18:	f7f4 f86d 	bl	27cf6 <_lseek>
   33c1c:	1c43      	adds	r3, r0, #1
   33c1e:	d103      	bne.n	33c28 <_lseek_r+0x20>
   33c20:	6823      	ldr	r3, [r4, #0]
   33c22:	2b00      	cmp	r3, #0
   33c24:	d000      	beq.n	33c28 <_lseek_r+0x20>
   33c26:	602b      	str	r3, [r5, #0]
   33c28:	bd70      	pop	{r4, r5, r6, pc}
   33c2a:	46c0      	nop			; (mov r8, r8)
   33c2c:	200056c0 	.word	0x200056c0

00033c30 <memchr>:
   33c30:	b2c9      	uxtb	r1, r1
   33c32:	1882      	adds	r2, r0, r2
   33c34:	4290      	cmp	r0, r2
   33c36:	d101      	bne.n	33c3c <memchr+0xc>
   33c38:	2000      	movs	r0, #0
   33c3a:	4770      	bx	lr
   33c3c:	7803      	ldrb	r3, [r0, #0]
   33c3e:	428b      	cmp	r3, r1
   33c40:	d0fb      	beq.n	33c3a <memchr+0xa>
   33c42:	3001      	adds	r0, #1
   33c44:	e7f6      	b.n	33c34 <memchr+0x4>

00033c46 <_realloc_r>:
   33c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33c48:	0007      	movs	r7, r0
   33c4a:	000d      	movs	r5, r1
   33c4c:	0016      	movs	r6, r2
   33c4e:	2900      	cmp	r1, #0
   33c50:	d105      	bne.n	33c5e <_realloc_r+0x18>
   33c52:	0011      	movs	r1, r2
   33c54:	f7fe fe7a 	bl	3294c <_malloc_r>
   33c58:	0004      	movs	r4, r0
   33c5a:	0020      	movs	r0, r4
   33c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33c5e:	2a00      	cmp	r2, #0
   33c60:	d103      	bne.n	33c6a <_realloc_r+0x24>
   33c62:	f7fe fe29 	bl	328b8 <_free_r>
   33c66:	0034      	movs	r4, r6
   33c68:	e7f7      	b.n	33c5a <_realloc_r+0x14>
   33c6a:	f000 f827 	bl	33cbc <_malloc_usable_size_r>
   33c6e:	002c      	movs	r4, r5
   33c70:	4286      	cmp	r6, r0
   33c72:	d9f2      	bls.n	33c5a <_realloc_r+0x14>
   33c74:	0031      	movs	r1, r6
   33c76:	0038      	movs	r0, r7
   33c78:	f7fe fe68 	bl	3294c <_malloc_r>
   33c7c:	1e04      	subs	r4, r0, #0
   33c7e:	d0ec      	beq.n	33c5a <_realloc_r+0x14>
   33c80:	0029      	movs	r1, r5
   33c82:	0032      	movs	r2, r6
   33c84:	f7fe fdf4 	bl	32870 <memcpy>
   33c88:	0029      	movs	r1, r5
   33c8a:	0038      	movs	r0, r7
   33c8c:	f7fe fe14 	bl	328b8 <_free_r>
   33c90:	e7e3      	b.n	33c5a <_realloc_r+0x14>
	...

00033c94 <_read_r>:
   33c94:	b570      	push	{r4, r5, r6, lr}
   33c96:	0005      	movs	r5, r0
   33c98:	0008      	movs	r0, r1
   33c9a:	0011      	movs	r1, r2
   33c9c:	2200      	movs	r2, #0
   33c9e:	4c06      	ldr	r4, [pc, #24]	; (33cb8 <_read_r+0x24>)
   33ca0:	6022      	str	r2, [r4, #0]
   33ca2:	001a      	movs	r2, r3
   33ca4:	f7f3 ff88 	bl	27bb8 <_read>
   33ca8:	1c43      	adds	r3, r0, #1
   33caa:	d103      	bne.n	33cb4 <_read_r+0x20>
   33cac:	6823      	ldr	r3, [r4, #0]
   33cae:	2b00      	cmp	r3, #0
   33cb0:	d000      	beq.n	33cb4 <_read_r+0x20>
   33cb2:	602b      	str	r3, [r5, #0]
   33cb4:	bd70      	pop	{r4, r5, r6, pc}
   33cb6:	46c0      	nop			; (mov r8, r8)
   33cb8:	200056c0 	.word	0x200056c0

00033cbc <_malloc_usable_size_r>:
   33cbc:	1f0b      	subs	r3, r1, #4
   33cbe:	681b      	ldr	r3, [r3, #0]
   33cc0:	1f18      	subs	r0, r3, #4
   33cc2:	2b00      	cmp	r3, #0
   33cc4:	da01      	bge.n	33cca <_malloc_usable_size_r+0xe>
   33cc6:	580b      	ldr	r3, [r1, r0]
   33cc8:	18c0      	adds	r0, r0, r3
   33cca:	4770      	bx	lr

00033ccc <pcWelcomeMessage>:
   33ccc:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   33cdc:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   33cec:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   33cfc:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   33d0c:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   33d1c:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   33d2c:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   33d3c:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   33d4c:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   33d5c:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   33d6c:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   33d7c:	7375 0a0d 0000 0000 6c63 0073 6c63 3a73     us......cls.cls:
   33d8c:	4320 656c 7261 2073 6874 2065 6574 6d72      Clears the term
   33d9c:	6e69 6c61 7320 7263 6565 0d6e 000a 0000     inal screen.....
   33dac:	6576 7372 6f69 006e 6576 7372 6f69 3a6e     version.version:
   33dbc:	5020 6972 746e 2073 6966 6d72 6177 6572      Prints firmware
   33dcc:	7620 7265 6973 6e6f 0d2e 000a 6974 6b63      version....tick
   33ddc:	0073 0000 6974 6b63 3a73 5020 6972 746e     s...ticks: Print
   33dec:	2073 6874 2065 756e 626d 7265 6f20 2066     s the number of 
   33dfc:	5452 534f 7420 6369 736b 7320 6e69 6563     RTOS ticks since
   33e0c:	7320 6174 7472 7075 0d2e 000a 6f67 646c      startup....gold
   33e1c:	0000 0000 6f67 646c 203a 6f43 6970 7365     ....gold: Copies
   33e2c:	6120 7070 696c 6163 6974 6e6f 622e 6e69      application.bin
   33e3c:	7420 206f 5f67 7061 6c70 6369 7461 6f69      to g_applicatio
   33e4c:	2e6e 6962 0d6e 000a 6574 706d 0000 0000     n.bin...temp....
   33e5c:	6574 706d 203a 7250 6e69 7374 7420 6568     temp: Prints the
   33e6c:	6320 7275 6572 746e 7420 6d65 6570 6172      current tempera
   33e7c:	7574 6572 2820 6e69 4320 6c65 6973 7375     ture (in Celsius
   33e8c:	2029 7266 6d6f 7420 6568 4d20 5841 3133     ) from the MAX31
   33e9c:	3538 2e35 0a0d 0000 696c 6867 0074 0000     855.....light...
   33eac:	696c 6867 3a74 5020 6972 746e 2073 6874     light: Prints th
   33ebc:	2065 616c 7473 6c20 6769 7468 692d 746e     e last light-int
   33ecc:	6e65 6973 7974 7220 6165 6964 676e 2820     ensity reading (
   33edc:	756c 2978 0d2e 000a 656c 5f64 666f 0066     lux)....led_off.
   33eec:	656c 5f64 666f 2066 203a 7554 6e72 5220     led_off : Turn R
   33efc:	4247 4c20 4445 6f20 6666 0d2e 000a 0000     GB LED off......
   33f0c:	656c 5f64 6c62 6575 0000 0000 656c 5f64     led_blue....led_
   33f1c:	6c62 6575 203a 6553 2074 454c 2044 6c62     blue: Set LED bl
   33f2c:	6575 0d2e 000a 0000 656c 5f64 6572 0064     ue......led_red.
   33f3c:	656c 5f64 6572 2064 203a 6553 2074 454c     led_red : Set LE
   33f4c:	2044 6572 2e64 0a0d 0000 0000 656c 5f64     D red.......led_
   33f5c:	7267 6565 006e 0000 656c 5f64 7267 6565     green...led_gree
   33f6c:	3a6e 5320 7465 4c20 4445 6720 6572 6e65     n: Set LED green
   33f7c:	0d2e 000a 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   33f8c:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   33f9c:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   33fac:	0d4b 003e 2008 0008 6325 325b 004a 0000     K.>.. ..%c[2J...
   33fbc:	3a30 612f 7070 696c 6163 6974 6e6f 622e     0:/application.b
   33fcc:	6e69 0000 6157 6e72 6e69 3a67 4620 6961     in..Warning: Fai
   33fdc:	656c 2064 6f74 6420 6c65 7465 2065 7270     led to delete pr
   33fec:	7665 6f69 7375 6120 7070 696c 6163 6974     evious applicati
   33ffc:	6e6f 622e 6e69 0a0d 0000 0000 7453 7261     on.bin......Star
   3400c:	6974 676e 6620 7269 776d 7261 2065 6f64     ting firmware do
   3401c:	6e77 6f6c 6461 7620 6169 5720 6669 4869     wnload via WifiH
   3402c:	6e61 6c64 7265 2e2e 0d2e 000a 6946 6d72     andler......Firm
   3403c:	6177 6572 6420 776f 6c6e 616f 2064 7473     ware download st
   3404c:	7261 6574 2e64 4f20 636e 2065 6f63 706d     arted. Once comp
   3405c:	656c 6574 202c 6564 6976 6563 7720 6c69     lete, device wil
   3406c:	206c 6572 6573 2e74 0a0d 0000 7245 6f72     l reset.....Erro
   3407c:	3a72 4320 756f 646c 6e20 746f 6f20 6570     r: Could not ope
   3408c:	206e 7061 6c70 6369 7461 6f69 2e6e 6962     n application.bi
   3409c:	0d6e 000a 3a30 672f 615f 7070 696c 6163     n...0:/g_applica
   340ac:	6974 6e6f 622e 6e69 0000 0000 6157 6e72     tion.bin....Warn
   340bc:	6e69 3a67 4320 756f 646c 6e20 746f 6420     ing: Could not d
   340cc:	6c65 7465 2065 7270 7665 6f69 7375 6720     elete previous g
   340dc:	615f 7070 696c 6163 6974 6e6f 622e 6e69     _application.bin
   340ec:	0a0d 0000 7245 6f72 3a72 4320 756f 646c     ....Error: Could
   340fc:	6e20 746f 6320 6572 7461 2065 5f67 7061      not create g_ap
   3410c:	6c70 6369 7461 6f69 2e6e 6962 0d6e 000a     plication.bin...
   3411c:	6f47 646c 6e65 4920 616d 6567 4320 6572     Golden Image Cre
   3412c:	7461 6465 203a 5f67 7061 6c70 6369 7461     ated: g_applicat
   3413c:	6f69 2e6e 6962 0d6e 000a 0000 7245 6f72     ion.bin.....Erro
   3414c:	2072 6f63 7970 6e69 2067 6f74 6720 615f     r copying to g_a
   3415c:	7070 696c 6163 6974 6e6f 622e 6e69 0a0d     pplication.bin..
   3416c:	0000 0000 2030 3120 2020 2032 3320 2020     ....0  1  2  3  
   3417c:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   3418c:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   3419c:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   341ac:	2058 0000 2e31 2e32 0030 0000 6946 6d72     X ..1.2.0...Firm
   341bc:	6177 6572 7620 7265 6973 6e6f 203a 7325     ware version: %s
   341cc:	0a0d 0000 6c25 0d75 000a 0000 7543 7272     ....%lu.....Curr
   341dc:	6e65 2074 6554 706d 7265 7461 7275 3a65     ent Temperature:
   341ec:	2520 2064 0d43 000a 694c 6867 2074 6e49      %d C...Light In
   341fc:	6574 736e 7469 3a79 2520 2064 754c 0d78     tensity: %d Lux.
   3420c:	000a 0000 454c 2044 6573 2074 6f74 4f20     ....LED set to O
   3421c:	4646 0a0d 0000 0000 454c 2044 6573 2074     FF......LED set 
   3422c:	6f74 4220 554c 0d45 000a 0000 454c 2044     to BLUE.....LED 
   3423c:	6573 2074 6f74 5220 4445 0a0d 0000 0000     set to RED......
   3424c:	454c 2044 6573 2074 6f74 4720 4552 4e45     LED set to GREEN
   3425c:	0a0d 0000                                   ....

00034260 <xOTAUCommand>:
   34260:	3d10 0003 3d14 0003 00c1 0001 0000 0000     .=...=..........

00034270 <xResetCommand>:
   34270:	3d44 0003 3d4c 0003 0301 0001 0000 0000     D=..L=..........

00034280 <xI2cScan>:
   34280:	3d68 0003 3d6c 0003 0329 0001 0000 0000     h=..l=..).......

00034290 <xClearScreen>:
   34290:	3d84 0003 3d88 0003 0079 0001 0000 0000     .=...=..y.......

000342a0 <xVersionCommand>:
   342a0:	3dac 0003 3db4 0003 0455 0001 0000 0000     .=...=..U.......

000342b0 <xTicksCommand>:
   342b0:	3dd8 0003 3de0 0003 0485 0001 0000 0000     .=...=..........

000342c0 <xGoldCommand>:
   342c0:	3e18 0003 3e20 0003 0145 0001 0000 0000     .>.. >..E.......

000342d0 <xTempCommand>:
   342d0:	3e54 0003 3e5c 0003 04bd 0001 0000 0000     T>..\>..........

000342e0 <xLightCommand>:
   342e0:	3ea4 0003 3eac 0003 052d 0001 0000 0000     .>...>..-.......

000342f0 <xLedOffCommand>:
   342f0:	3ee4 0003 3eec 0003 058d 0001 0000 0000     .>...>..........

00034300 <xLedBlueCommand>:
   34300:	3f0c 0003 3f18 0003 05c1 0001 0000 0000     .?...?..........

00034310 <xLedRedCommand>:
   34310:	3f34 0003 3f3c 0003 05f5 0001 0000 0000     4?..<?..........

00034320 <xLedGreenCommand>:
   34320:	3f58 0003 3f64 0003 0629 0001 0000 0000     X?..d?..).......
   34330:	0df8 0001 0e0c 0001 0e20 0001 0e34 0001     ........ ...4...
   34340:	0e48 0001 0e5c 0001 0e70 0001 7365 5f70     H...\...p...esp_
   34350:	3269 3a63 4320 6c6f 726f 6320 6168 676e     i2c: Color chang
   34360:	2065 6f63 6d6d 6e61 2064 6573 746e 0d2e     e command sent..
   34370:	000a 0000 7365 5f70 3269 3a63 4620 6961     ....esp_i2c: Fai
   34380:	656c 2064 6f74 7320 6e65 2064 3249 2043     led to send I2C 
   34390:	6164 6174 0d2e 000a 7365 5f70 3269 3a63     data....esp_i2c:
   343a0:	4320 756f 646c 6e20 746f 6f20 7462 6961      Could not obtai
   343b0:	206e 3249 2043 756d 6574 2e78 0a0d 0000     n I2C mutex.....
   343c0:	5245 4f52 3a52 4320 756f 646c 6e20 746f     ERROR: Could not
   343d0:	6320 6572 7461 2065 414d 3358 3831 3535      create MAX31855
   343e0:	5320 4950 6d20 7475 7865 0d21 000a 0000      SPI mutex!.....
   343f0:	4157 4e52 4e49 3a47 4320 756f 646c 6e20     WARNING: Could n
   34400:	746f 6120 7163 6975 6572 4d20 5841 3133     ot acquire MAX31
   34410:	3538 2035 5053 2049 756d 6574 2e78 0a0d     855 SPI mutex...
   34420:	0000 0000 ffff ffff 18bc 0001 18c2 0001     ................
   34430:	18c8 0001 18ce 0001 18d4 0001 18d4 0001     ................
   34440:	18d4 0001 18d4 0001 18b6 0001 18d4 0001     ................
   34450:	18d4 0001 18d4 0001 18b0 0001               ............

0003445c <main_mqtt_broker>:
   3445c:	3235 312e 3135 312e 2e38 3032 0030 0000     52.151.18.200...
   3446c:	3025 6433 0000 0000 7473 7261 5f74 6f64     %03d....start_do
   3447c:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
   3448c:	6761 2065 6f6e 2074 6572 6461 2e79 0a0d     age not ready...
   3449c:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   344ac:	6461 203a 6957 462d 2069 7369 6e20 746f     ad: Wi-Fi is not
   344bc:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   344cc:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   344dc:	6572 7571 7365 2074 7369 7320 6e65 2074     request is sent 
   344ec:	6c61 6572 6461 2e79 0a0d 0000 7473 7261     already.....star
   344fc:	5f74 6f64 6e77 6f6c 6461 203a 7572 6e6e     t_download: runn
   3450c:	6e69 2067 6f64 6e77 6f6c 6461 6120 726c     ing download alr
   3451c:	6165 7964 0d2e 000a 7473 7261 5f74 6f64     eady....start_do
   3452c:	6e77 6f6c 6461 203a 6573 646e 6e69 2067     wnload: sending 
   3453c:	5448 5054 7220 7165 6575 7473 2e2e 0d2e     HTTP request....
   3454c:	000a 0000 7468 7074 2f3a 352f 2e32 3531     ....http://52.15
   3455c:	2e31 3831 322e 3030 412f 7070 696c 6163     1.18.200/Applica
   3456c:	6974 6e6f 622e 6e69 0000 0000 7473 726f     tion.bin....stor
   3457c:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
   3458c:	706d 7974 6420 7461 2e61 0a0d 0000 0000     mpty data.......
   3459c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   345ac:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   345bc:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   345cc:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   345dc:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   345ec:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
   345fc:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
   3460c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   3461c:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
   3462c:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
   3463c:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   3464c:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
   3465c:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
   3466c:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   3467c:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
   3468c:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
   3469c:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
   346ac:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   346bc:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
   346cc:	6375 6563 7373 7566 6c6c 2e79 0a0d 0000     uccessfully.....
   346dc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   346ec:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   346fc:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   3470c:	6465 0d2e 000a 0000 7468 7074 635f 696c     ed......http_cli
   3471c:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   3472c:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   3473c:	0a0d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   3474c:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   3475c:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   3476c:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   3477c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   3478c:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   3479c:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   347ac:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   347bc:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   347cc:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   347dc:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   347ec:	5f49 4f43 4e4e 4345 4554 0d44 000a 0000     I_CONNECTED.....
   347fc:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   3480c:	5f49 4944 4353 4e4f 454e 5443 4445 0a0d     I_DISCONNECTED..
   3481c:	0000 0000 7075 6e65 326e 3631 0000 0000     ....upenn216....
   3482c:	5345 5f50 616c 7470 706f 0000 6977 6966     ESP_laptop..wifi
   3483c:	635f 3a62 4920 2050 6461 7264 7365 2073     _cb: IP address 
   3484c:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
   3485c:	0000 0000 7245 6f72 2072 6f63 6e6e 6365     ....Error connec
   3486c:	6974 676e 7420 206f 514d 5454 4220 6f72     ting to MQTT Bro
   3487c:	656b 2172 0a0d 0000 6e69 7469 735f 6f74     ker!....init_sto
   3488c:	6172 6567 203a 6c70 6165 6573 7020 756c     rage: please plu
   3489c:	2067 6e61 5320 2f44 4d4d 2043 6163 6472     g an SD/MMC card
   348ac:	6920 206e 6c73 746f 2e2e 0d2e 000a 0000      in slot........
   348bc:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   348cc:	4320 7261 2064 6e69 7473 6c61 206c 6166      Card install fa
   348dc:	6c69 6465 0d2e 000a 6e69 7469 735f 6f74     iled....init_sto
   348ec:	6172 6567 203a 7274 2079 6e75 6c70 6775     rage: try unplug
   348fc:	6120 646e 7220 2d65 6c70 6775 7420 6568      and re-plug the
   3490c:	6320 7261 2e64 0a0d 0000 0000 6e69 7469      card.......init
   3491c:	735f 6f74 6172 6567 203a 6f6d 6e75 6974     _storage: mounti
   3492c:	676e 5320 2044 6163 6472 2e2e 0d2e 000a     ng SD card......
   3493c:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   3494c:	6320 7261 2064 6f6d 6e75 2074 6166 6c69      card mount fail
   3495c:	6465 2021 7228 7365 2520 2964 0a0d 0000     ed! (res %d)....
   3496c:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   3497c:	6320 7261 2064 6f6d 6e75 2074 4b4f 0d2e      card mount OK..
   3498c:	000a 0000 6f63 666e 6769 7275 5f65 7468     ....configure_ht
   3499c:	7074 635f 696c 6e65 3a74 4820 5454 2050     tp_client: HTTP 
   349ac:	6c63 6569 746e 6920 696e 6974 6c61 7a69     client initializ
   349bc:	7461 6f69 206e 6166 6c69 6465 2021 7228     ation failed! (r
   349cc:	7365 2520 2964 0a0d 0000 0000 7274 6575     es %d)......true
   349dc:	0000 0000 4d5b 5451 5d54 4c20 4445 7420     ....[MQTT] LED t
   349ec:	7275 656e 2064 4e4f 0a0d 0000 6166 736c     urned ON....fals
   349fc:	0065 0000 4d5b 5451 5d54 4c20 4445 7420     e...[MQTT] LED t
   34a0c:	7275 656e 2064 464f 0d46 000a 4d5b 5451     urned OFF...[MQT
   34a1c:	5d54 5520 6b6e 6f6e 6e77 7020 7961 6f6c     T] Unknown paylo
   34a2c:	6461 6620 726f 616d 2e74 0a0d 0000 0000     ad format.......
   34a3c:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   34a4c:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   34a5c:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   34a6c:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   34a7c:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   34a8c:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   34a9c:	616d 646e 203a 0000 6425 002c 0a0d 6147     mand: ..%d,...Ga
   34aac:	656d 6d20 7365 6173 6567 7220 6365 6965     me message recei
   34abc:	6576 2064 7562 2074 6f6e 2074 6e75 6564     ved but not unde
   34acc:	7372 6f74 646f 0d21 000a 0000 0a0d 4d49     rstood!.......IM
   34adc:	2055 6f74 6970 2063 6572 6563 7669 6465     U topic received
   34aec:	0d21 000a 0a0d 6944 7473 6e61 6563 7420     !.....Distance t
   34afc:	706f 6369 7220 6365 6965 6576 2164 0a0d     opic received!..
   34b0c:	0000 0000 3e20 203e 0000 0000 3150 4c5f     .... >> ....P1_L
   34b1c:	4445 455f 4553 3135 5f36 3054 0000 0000     ED_ESE516_T0....
   34b2c:	7473 7261 0074 0000 7473 706f 0000 0000     start...stop....
   34b3c:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   34b4c:	7242 6b6f 7265 2e2e 002e 0000 5345 3545     Broker......ESE5
   34b5c:	3631 6974 6e61 656c 0000 0000 6974 6e61     16tianle....tian
   34b6c:	656c 0000 514d 5454 2020 7245 6f72 2072     le..MQTT  Error 
   34b7c:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   34b8c:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   34b9c:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   34bac:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   34bbc:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   34bcc:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   34bdc:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   34bec:	3150 475f 4d41 5f45 5345 3545 3631 545f     P1_GAME_ESE516_T
   34bfc:	0030 0000 3150 495f 554d 455f 4553 3135     0...P1_IMU_ESE51
   34c0c:	5f36 3054 0000 0000 3141 4730 4c5f 4445     6_T0....A10G_LED
   34c1c:	445f 4245 4755 0000 6568 7461 6e69 0067     _DEBUG..heating.
   34c2c:	6564 6574 7463 0000 6572 6573 0074 0000     detect..reset...
   34c3c:	7075 6164 6574 0000 6162 6b63 7075 0000     update..backup..
   34c4c:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   34c5c:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   34c6c:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   34c7c:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   34c8c:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   34c9c:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   34cac:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   34cbc:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   34ccc:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   34cdc:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   34cec:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   34cfc:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   34d0c:	0d29 000a 465b 4941 5d4c 7220 7365 2520     )...[FAIL] res %
   34d1c:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   34d2c:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   34d3c:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   34d4c:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   34d5c:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   34d6c:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   34d7c:	6425 007d 6425 0000 7d5d 0000 0a0d 0000     %d}.%d..]}......
   34d8c:	3250 475f 4d41 5f45 5345 3545 3631 545f     P2_GAME_ESE516_T
   34d9c:	0030 0000 6574 706d 7265 7461 7275 0065     0...temperature.
   34dac:	6e69 6574 736e 7469 0079 0000 5245 4f52     intensity...ERRO
   34dbc:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   34dcc:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   34ddc:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   34dec:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   34dfc:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   34e0c:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   34e1c:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   34e2c:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   34e3c:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   34e4c:	5250 5345 4553 0044 3141 4730 425f 5455     PRESSED.A10G_BUT
   34e5c:	4f54 5f4e 4544 5542 0047 0000 4552 454c     TON_DEBUG...RELE
   34e6c:	5341 4445 0000 0000 636d 5f75 6572 6573     ASED....mcu_rese
   34e7c:	0074 0000 2e31 2e32 0030 0000 6966 6d72     t...1.2.0...firm
   34e8c:	6177 6572 0000 0000 3a30 612f 7070 696c     ware....0:/appli
   34e9c:	6163 6974 6e6f 622e 6e69 0000 6157 6e72     cation.bin..Warn
   34eac:	6e69 3a67 4620 6961 656c 2064 6f74 6420     ing: Failed to d
   34ebc:	6c65 7465 2065 7270 7665 6f69 7375 6120     elete previous a
   34ecc:	7070 696c 6163 6974 6e6f 622e 6e69 0a0d     pplication.bin..
   34edc:	0000 0000 7453 7261 6974 676e 6620 7269     ....Starting fir
   34eec:	776d 7261 2065 6f64 6e77 6f6c 6461 7620     mware download v
   34efc:	6169 5720 6669 4869 6e61 6c64 7265 2e2e     ia WifiHandler..
   34f0c:	0d2e 000a 6946 6d72 6177 6572 6420 776f     ....Firmware dow
   34f1c:	6c6e 616f 2064 7473 7261 6574 2e64 4f20     nload started. O
   34f2c:	636e 2065 6f63 706d 656c 6574 202c 6564     nce complete, de
   34f3c:	6976 6563 7720 6c69 206c 6572 6573 2e74     vice will reset.
   34f4c:	0a0d 0000 7245 6f72 3a72 4320 756f 646c     ....Error: Could
   34f5c:	6e20 746f 6f20 6570 206e 7061 6c70 6369      not open applic
   34f6c:	7461 6f69 2e6e 6962 0d6e 000a 3a30 672f     ation.bin...0:/g
   34f7c:	615f 7070 696c 6163 6974 6e6f 622e 6e69     _application.bin
   34f8c:	0000 0000 6157 6e72 6e69 3a67 4320 756f     ....Warning: Cou
   34f9c:	646c 6e20 746f 6420 6c65 7465 2065 7270     ld not delete pr
   34fac:	7665 6f69 7375 6720 615f 7070 696c 6163     evious g_applica
   34fbc:	6974 6e6f 622e 6e69 0a0d 0000 7245 6f72     tion.bin....Erro
   34fcc:	3a72 4320 756f 646c 6e20 746f 6320 6572     r: Could not cre
   34fdc:	7461 2065 5f67 7061 6c70 6369 7461 6f69     ate g_applicatio
   34fec:	2e6e 6962 0d6e 000a 6f47 646c 6e65 4920     n.bin...Golden I
   34ffc:	616d 6567 4320 6572 7461 6465 203a 5f67     mage Created: g_
   3500c:	7061 6c70 6369 7461 6f69 2e6e 6962 0d6e     application.bin.
   3501c:	000a 0000 7245 6f72 2072 6f63 7970 6e69     ....Error copyin
   3502c:	2067 6f74 6720 615f 7070 696c 6163 6974     g to g_applicati
   3503c:	6e6f 622e 6e69 0a0d 0000 0000 21e8 0001     on.bin.......!..
   3504c:	21f4 0001 2206 0001 225c 0001 227c 0001     .!..."..\"..|"..
   3505c:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   3506c:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   3507c:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   3508c:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   3509c:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   350ac:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   350bc:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   350cc:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   350dc:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   350ec:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   350fc:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   3510c:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   3511c:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   3512c:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

0003513c <xHelpCommand>:
   3513c:	505c 0003 5064 0003 48c5 0001 0000 0000     \P..dP...H......
   3514c:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   3515c:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   3516c:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   3517c:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   3518c:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   3519c:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   351ac:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   351bc:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   351cc:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   351dc:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   351ec:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   351fc:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   3520c:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   3521c:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   3522c:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   3523c:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   3524c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   3525c:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   3526c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3527c:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   3528c:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   3529c:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   352ac:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   352bc:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   352cc:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   352dc:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   352ec:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   352fc:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   3530c:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   3531c:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   3532c:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   3533c:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   3534c:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   3535c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3536c:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   3537c:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   3538c:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   3539c:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   353ac:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   353bc:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   353cc:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   353dc:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   353ec:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   353fc:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   3540c:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   3541c:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   3542c:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   3543c:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   3544c:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   3545c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3546c:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   3547c:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   3548c:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   3549c:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   354ac:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   354bc:	6365 6374 616c 7373 0021 0000 4fea 0001     ectclass!....O..
   354cc:	4fe2 0001 4fe6 0001 4fda 0001 4fde 0001     .O...O...O...O..
   354dc:	4fee 0001 4ff2 0001 4ff6 0001 4ffa 0001     .O...O...O...O..
   354ec:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   354fc:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3550c:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   3551c:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   3552c:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   3553c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3554c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3555c:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   3556c:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   3557c:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   3558c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3559c:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   355ac:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   355bc:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   355cc:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   355dc:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   355ec:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   355fc:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   3560c:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   3561c:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   3562c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3563c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3564c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3565c:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   3566c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3567c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3568c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3569c:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   356ac:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   356bc:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   356cc:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   356dc:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   356ec:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   356fc:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   3570c:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   3571c:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   3572c:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   3573c:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   3574c:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   3575c:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   3576c:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   3577c:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   3578c:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   3579c:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   357ac:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   357bc:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   357cc:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   357dc:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   357ec:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   357fc:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   3580c:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   3581c:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   3582c:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   3583c:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   3584c:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   3585c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   3586c:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   3587c:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   3588c:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   3589c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   358ac:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   358bc:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   358cc:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   358dc:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   358ec:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   358fc:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   3590c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3591c:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   3592c:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   3593c:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   3594c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3595c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3596c:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   3597c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3598c:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   3599c:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   359ac:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   359bc:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   359cc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   359dc:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   359ec:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   359fc:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   35a0c:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   35a1c:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   35a2c:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   35a3c:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   35a4c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35a5c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35a6c:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   35a7c:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   35a8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35a9c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35aac:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   35abc:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   35acc:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   35adc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35aec:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35afc:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   35b0c:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   35b1c:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   35b2c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   35b3c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   35b4c:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   35b5c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   35b6c:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   35b7c:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   35b8c:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   35b9c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35bac:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   35bbc:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   35bcc:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   35bdc:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   35bec:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   35bfc:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   35c0c:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   35c1c:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   35c2c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35c3c:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   35c4c:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   35c5c:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   35c6c:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   35c7c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   35c8c:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   35c9c:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   35cac:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   35cbc:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   35ccc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35cdc:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   35cec:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   35cfc:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   35d0c:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   35d1c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   35d2c:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   35d3c:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   35d4c:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   35d5c:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   35d6c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35d7c:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   35d8c:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   35d9c:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   35dac:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   35dbc:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   35dcc:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   35ddc:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   35dec:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   35dfc:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   35e0c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35e1c:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   35e2c:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   35e3c:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   35e4c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35e5c:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   35e6c:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   35e7c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   35e8c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   35e9c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35eac:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   35ebc:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   35ecc:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   35edc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35eec:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   35efc:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   35f0c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   35f1c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35f2c:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   35f3c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   35f4c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   35f5c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35f6c:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   35f7c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   35f8c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   35f9c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35fac:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   35fbc:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   35fcc:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   35fdc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35fec:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   35ffc:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   3600c:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   3601c:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   3602c:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   3603c:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   3604c:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   3605c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3606c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3607c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3608c:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   3609c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   360ac:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   360bc:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   360cc:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   360dc:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   360ec:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   360fc:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   3610c:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   3611c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3612c:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   3613c:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   3614c:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   3615c:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   3616c:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   3617c:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   3618c:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   3619c:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   361ac:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   361bc:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   361cc:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   361dc:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   361ec:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   361fc:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   3620c:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   3621c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3622c:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   3623c:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   3624c:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   3625c:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   3626c:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   3627c:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   3628c:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   3629c:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   362ac:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   362bc:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   362cc:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   362dc:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   362ec:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   362fc:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   3630c:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   3631c:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   3632c:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   3633c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3634c:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   3635c:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   3636c:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   3637c:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   3638c:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   3639c:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   363ac:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   363bc:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   363cc:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   363dc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   363ec:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   363fc:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   3640c:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   3641c:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   3642c:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   3643c:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   3644c:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   3645c:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   3646c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3647c:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   3648c:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   3649c:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   364ac:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   364bc:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   364cc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   364dc:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   364ec:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   364fc:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   3650c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3651c:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   3652c:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   3653c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3654c:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   3655c:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   3656c:	0000 0000 6d54 2072 7653 0063 a08c 0001     ....Tmr Svc.....
   3657c:	a08c 0001 a08c 0001 a11a 0001 a0e4 0001     ................
   3658c:	a10e 0001 a08c 0001 a08c 0001 a11a 0001     ................
   3659c:	a0e4 0001                                   ....

000365a0 <sd_mmc_trans_units>:
   365a0:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

000365bc <sd_trans_multipliers>:
   365bc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   365cc:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   365dc:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   365ec:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000365fc <mmc_trans_multipliers>:
   365fc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3660c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   3661c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   3662c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   3663c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3664c:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   3665c:	746c 6320 646d 000a 000d 0000               lt cmd......

00036668 <__FUNCTION__.16822>:
   36668:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   36678:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   36688:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   36698:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   366a8:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   366b8:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   366c8:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   366d8:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   366e8:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   366f8:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   36708:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   36718:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   36728:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   36738:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   36748:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   36758:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   36768:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   36778:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   36788:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   36798:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   367a8:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   367b8:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   367c8:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   367d8:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   367e8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   367f8:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   36808:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   36818:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   36828:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   36838:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   36848:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   36858:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   36868:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   36878:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   36888:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   36898:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   368a8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   368b8:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   368c8:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   368d8:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   368e8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   368f8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   36908:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   36918:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   36928:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   36938:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   36948:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   36958:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   36968:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   36978:	203f 6425 000a 0000 e28c 0001 e25c 0001     ? %d........\...
   36988:	e254 0001 e26c 0001 e264 0001 e284 0001     T...l...d.......
   36998:	e274 0001 e27c 0001                         t...|...

000369a0 <__FUNCTION__.17690>:
   369a0:	6968 5f66 6573 646e 0000 0000               hif_send....

000369ac <__FUNCTION__.17700>:
   369ac:	6968 5f66 7369 0072                         hif_isr.

000369b4 <__FUNCTION__.17709>:
   369b4:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000369c4 <__FUNCTION__.17721>:
   369c4:	6968 5f66 6572 6563 7669 0065               hif_receive.

000369d0 <__FUNCTION__.17737>:
   369d0:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   369e0:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   369f0:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   36a00:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   36a10:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   36a20:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   36a30:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   36a40:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   36a50:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   36a60:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   36a70:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   36a80:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   36a90:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   36aa0:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   36ab0:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   36ac0:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   36ad0:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   36ae0:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   36af0:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   36b00:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   36b10:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   36b20:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   36b30:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   36b40:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   36b50:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   36b60:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   36b70:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   36b80:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   36b90:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   36ba0:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   36bb0:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   36bc0:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   36bd0:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   36be0:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   36bf0:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   36c00:	000a 0000 3831 313a 3a38 3731 0000 0000     ....18:18:17....
   36c10:	614d 2079 3520 3220 3230 0035 7244 7669     May  5 2025.Driv
   36c20:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   36c30:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   36c40:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   36c50:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   36c60:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   36c70:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   36c80:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   36c90:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   36ca0:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   36cb0:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   36cc0:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   36cd0:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   36ce0:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   36cf0:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   36d00:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   36d10:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   36d20:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   36d30:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   36d40:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   36d50:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   36d60:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   36d70:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   36d80:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   36d90:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   36da0:	4220 6675 6566 0a72 0000 0000                Buffer.....

00036dac <__FUNCTION__.17672>:
   36dac:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00036db8 <__FUNCTION__.17701>:
   36db8:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00036dc8 <__FUNCTION__.17732>:
   36dc8:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   36dd8:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   36de8:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   36df8:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   36e08:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   36e18:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   36e28:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   36e38:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   36e48:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   36e58:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00036e68 <__FUNCTION__.17529>:
   36e68:	6863 7069 775f 6b61 0065 0000               chip_wake...

00036e74 <__FUNCTION__.17578>:
   36e74:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   36e84:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   36e94:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   36ea4:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   36eb4:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   36ec4:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   36ed4:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   36ee4:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   36ef4:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   36f04:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   36f14:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   36f24:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   36f34:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   36f44:	6920 696e 2074 7562 0a73 0000                init bus...

00036f50 <__FUNCTION__.17576>:
   36f50:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00036f5c <__FUNCTION__.17583>:
   36f5c:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00036f6c <crc7_syndrome_table>:
   36f6c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   36f7c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   36f8c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   36f9c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   36fac:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   36fbc:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   36fcc:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   36fdc:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   36fec:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   36ffc:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   3700c:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   3701c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   3702c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3703c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3704c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   3705c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   3706c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3707c:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   3708c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   3709c:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   370ac:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   370bc:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   370cc:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   370dc:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   370ec:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   370fc:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   3710c:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   3711c:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   3712c:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3713c:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3714c:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   3715c:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   3716c:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   3717c:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   3718c:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   3719c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   371ac:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   371bc:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   371cc:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   371dc:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   371ec:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   371fc:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   3720c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3721c:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   3722c:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3723c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3724c:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3725c:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3726c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3727c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3728c:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3729c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   372ac:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   372bc:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   372cc:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   372dc:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   372ec:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   372fc:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3730c:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3731c:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3732c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3733c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3734c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3735c:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3736c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3737c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3738c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3739c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   373ac:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   373bc:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   373cc:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   373dc:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   373ec:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   373fc:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3740c:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3741c:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3742c:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3743c:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3744c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3745c:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3746c:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3747c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3748c:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3749c:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   374ac:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   374bc:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   374cc:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   374dc:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   374ec:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   374fc:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3750c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3751c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3752c:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3753c:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3754c:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3755c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3756c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3757c:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3758c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3759c:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   375ac:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   375bc:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   375cc:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   375dc:	2e2e 0a2e 0000 0000 feb4 0001 feb4 0001     ................
   375ec:	ff44 0001 fe08 0001 fe4e 0001 fe70 0001     D.......N...p...
   375fc:	fef6 0001 fef6 0001 ffb0 0001 fddc 0001     ................
   3760c:	000a 0002 000a 0002 000a 0002 000a 0002     ................
   3761c:	fe92 0001 0414 0002 0414 0002 049c 0002     ................
   3762c:	0378 0002 03ba 0002 03d8 0002 0452 0002     x...........R...
   3763c:	0452 0002 04fe 0002 0350 0002 054e 0002     R.......P...N...
   3764c:	054e 0002 054e 0002 054e 0002 03f6 0002     N...N...N.......

0003765c <__FUNCTION__.16851>:
   3765c:	7073 5f69 6d63 0064                         spi_cmd.

00037664 <__FUNCTION__.16858>:
   37664:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00037674 <__FUNCTION__.16867>:
   37674:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00037680 <__FUNCTION__.16900>:
   37680:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   37690:	0000 0000                                   ....

00037694 <__FUNCTION__.16946>:
   37694:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000376a4 <__FUNCTION__.16958>:
   376a4:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

000376b4 <__FUNCTION__.16969>:
   376b4:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000376c4 <__FUNCTION__.16981>:
   376c4:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000376d4 <__FUNCTION__.16992>:
   376d4:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000376e0 <__FUNCTION__.17013>:
   376e0:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   376f0:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   37700:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   37710:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   37720:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   37730:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   37740:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   37750:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   37760:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   37770:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   37780:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   37790:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   377a0:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   377b0:	2074 2230 0000 0000                         t 0"....

000377b8 <lun_desc>:
   377b8:	bb11 0001 bb69 0001 bbb5 0001 bc01 0001     ....i...........
   377c8:	bc31 0001 bcb5 0001 bd45 0001 77a0 0003     1.......E....w..
   377d8:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   377e8:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   377f8:	6032 0002 60ac 0002 60ac 0002 6050 0002     2`...`...`..P`..
   37808:	604a 0002 6056 0002 6038 0002 605c 0002     J`..V`..8`..\`..
   37818:	6092 0002 6294 0002 62e4 0002 62e4 0002     .`...b...b...b..
   37828:	62e0 0002 6286 0002 62a6 0002 6276 0002     .b...b...b..vb..
   37838:	62b8 0002 62ca 0002 6332 0002 6360 0002     .b...b..2c..`c..
   37848:	6360 0002 635c 0002 632c 0002 6338 0002     `c..\c..,c..8c..
   37858:	6326 0002 633e 0002 6344 0002               &c..>c..Dc..

00037864 <tcc_modules>:
   37864:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00037870 <_tcc_gclk_ids>:
   37870:	1a1a 001b                                   ....

00037874 <_tcc_apbcmasks>:
   37874:	0100 0000 0200 0000 0400 0000               ............

00037880 <_tcc_maxs>:
   37880:	ffff 00ff ffff 00ff ffff 0000               ............

0003788c <_tcc_cc_nums>:
   3788c:	0204 0002                                   ....

00037890 <_tcc_ow_nums>:
   37890:	0408 0002                                   ....

00037894 <_tcc_intflag>:
   37894:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   378a4:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   378b4:	0000 0001 0000 0002 0000 0004 0000 0008     ................

000378c4 <LfnOfs>:
   378c4:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   378d4:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   378e4:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   378f4:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   37904:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   37914:	5441 2020 2020 0020                         AT     .

0003791c <excvt.4558>:
   3791c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3792c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3793c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3794c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3795c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3796c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3797c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3798c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003799c <Tbl>:
   3799c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   379ac:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   379bc:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   379cc:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   379dc:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   379ec:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   379fc:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   37a0c:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   37a1c:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   37a2c:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   37a3c:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   37a4c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   37a5c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   37a6c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   37a7c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   37a8c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00037a9c <tbl_lower.4308>:
   37a9c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   37aac:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   37abc:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   37acc:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   37adc:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   37aec:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   37afc:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   37b0c:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   37b1c:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   37b2c:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   37b3c:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   37b4c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   37b5c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   37b6c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   37b7c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   37b8c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   37b9c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   37bac:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   37bbc:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   37bcc:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   37bdc:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   37bec:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   37bfc:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   37c0c:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   37c1c:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   37c2c:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   37c3c:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   37c4c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   37c5c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   37c6c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00037c7c <tbl_upper.4309>:
   37c7c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   37c8c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   37c9c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   37cac:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   37cbc:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   37ccc:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   37cdc:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   37cec:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   37cfc:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   37d0c:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   37d1c:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   37d2c:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   37d3c:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   37d4c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   37d5c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   37d6c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   37d7c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   37d8c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   37d9c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   37dac:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   37dbc:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   37dcc:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   37ddc:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   37dec:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   37dfc:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   37e0c:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   37e1c:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   37e2c:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   37e3c:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   37e4c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   37e5c:	bf1a 0002 bf1a 0002 bf1a 0002 bda8 0002     ................
   37e6c:	bf1a 0002 be92 0002 bf1a 0002 bf1a 0002     ................
   37e7c:	bf1a 0002 bf1a 0002 bf1a 0002 bf1a 0002     ................
   37e8c:	bf1a 0002 bf0c 0002 514d 4354 0000 0000     ........MQTC....
   37e9c:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   37eac:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   37eec:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   37f04:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   37f44:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   37f54:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   37f64:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   37f74:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   37f84:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   37f94:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   37fa4:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   37fb4:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   37fc4:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   37fd4:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   37fe4:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   37ff4:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   38004:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   38014:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   38024:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   38034:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   38044:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   38054:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   38064:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   38074:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   38084:	5448 5054 002f 0000 0d31 0000 e016 0002     HTTP/...1.......
   38094:	e010 0002 e00a 0002 e004 0002 e01c 0002     ................
   380a4:	dffe 0002 e01c 0002 dff8 0002 dff2 0002     ................
   380b4:	e01c 0002 dfec 0002 dfec 0002 dfe6 0002     ................
   380c4:	dfe0 0002 dfda 0002 2000 4200 2400 4200     ......... .B.$.B
   380d4:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   380e4:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   380f4:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   38104:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   38114:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   38124:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   38134:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   38144:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   38154:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   38164:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   38174:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   38184:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   38194:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   381a4:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   381b4:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   381c4:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   381d4:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   381e4:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   381f4:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   38204:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   38214:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   38224:	0a0d 0000 4556 4c4d 545f 5341 004b 0000     ....VEML_TASK...
   38234:	5245 3a52 5620 4d45 204c 6174 6b73 6320     ERR: VEML task c
   38244:	756f 646c 6e20 746f 6220 2065 6e69 7469     ould not be init
   38254:	6169 696c 657a 2164 0a0d 0000 414d 3358     ialized!....MAX3
   38264:	3831 3535 545f 5341 004b 0000 5245 3a52     1855_TASK...ERR:
   38274:	4d20 5841 3133 3538 2035 6174 6b73 6320      MAX31855 task c
   38284:	756f 646c 6e20 746f 6220 2065 6e69 7469     ould not be init
   38294:	6169 696c 657a 2164 0a0d 0000 5345 5f50     ialized!....ESP_
   382a4:	3249 5f43 4154 4b53 0000 0000 5245 3a52     I2C_TASK....ERR:
   382b4:	4520 5053 495f 4332 545f 5341 204b 6f63      ESP_I2C_TASK co
   382c4:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   382d4:	6c61 7a69 6465 0d21 000a 0000 7245 6f72     alized!.....Erro
   382e4:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   382f4:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   38304:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   38314:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   38324:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   38334:	0680 0003 0650 0003 0662 0003 05a4 0003     ....P...b.......
   38344:	0662 0003 0646 0003 0662 0003 05a4 0003     b...F...b.......
   38354:	0650 0003 0650 0003 0646 0003 05a4 0003     P...P...F.......
   38364:	05ac 0003 05ac 0003 05ac 0003 0668 0003     ............h...
   38374:	0650 0003 0650 0003 0624 0003 0708 0003     P...P...$.......
   38384:	0624 0003 0646 0003 0624 0003 0708 0003     $...F...$.......
   38394:	0650 0003 0650 0003 0646 0003 0708 0003     P...P...F.......
   383a4:	05ac 0003 05ac 0003 05ac 0003 0712 0003     ................
   383b4:	0a00 0003 0950 0003 0950 0003 094e 0003     ....P...P...N...
   383c4:	09f2 0003 09f2 0003 09e8 0003 094e 0003     ............N...
   383d4:	09f2 0003 09e8 0003 09f2 0003 094e 0003     ............N...
   383e4:	09f8 0003 09f8 0003 09f8 0003 0a88 0003     ................
   383f4:	1744 0003 1726 0003 16e0 0003 15fe 0003     D...&...........
   38404:	16e0 0003 1718 0003 16e0 0003 15fe 0003     ................
   38414:	1726 0003 1726 0003 1718 0003 15fe 0003     &...&...........
   38424:	15f6 0003 15f6 0003 15f6 0003 195c 0003     ............\...
   38434:	1da4 0003 1c64 0003 1c64 0003 1c60 0003     ....d...d...`...
   38444:	1d7c 0003 1d7c 0003 1d6e 0003 1c60 0003     |...|...n...`...
   38454:	1d7c 0003 1d6e 0003 1d7c 0003 1c60 0003     |...n...|...`...
   38464:	1d84 0003 1d84 0003 1d84 0003 1f88 0003     ................

00038474 <_global_impure_ptr>:
   38474:	00d8 2000                                   ... 

00038478 <__sf_fake_stderr>:
	...

00038498 <__sf_fake_stdin>:
	...

000384b8 <__sf_fake_stdout>:
	...
   384d8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   384e8:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   384f8:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   38508:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00038515 <_ctype_>:
   38515:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   38525:	2020 2020 2020 2020 2020 2020 2020 2020                     
   38535:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   38545:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   38555:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   38565:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   38575:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   38585:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   38595:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00038618 <_init>:
   38618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3861a:	46c0      	nop			; (mov r8, r8)
   3861c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3861e:	bc08      	pop	{r3}
   38620:	469e      	mov	lr, r3
   38622:	4770      	bx	lr

00038624 <__init_array_start>:
   38624:	0000f0dd 	.word	0x0000f0dd

00038628 <_fini>:
   38628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3862a:	46c0      	nop			; (mov r8, r8)
   3862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3862e:	bc08      	pop	{r3}
   38630:	469e      	mov	lr, r3
   38632:	4770      	bx	lr

00038634 <__fini_array_start>:
   38634:	0000f0b5 	.word	0x0000f0b5
