
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dbf8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000dbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c00  20000094  0000dc8c  00020094  2**2
                  ALLOC
  3 .stack        00002004  20000c94  0000e88c  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004bbb7  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005eee  00000000  00000000  0006bccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005b5d  00000000  00000000  00071bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001098  00000000  00000000  00077717  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ea8  00000000  00000000  000787af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002135a  00000000  00000000  00079657  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018f5b  00000000  00000000  0009a9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093e6e  00000000  00000000  000b390c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003ee8  00000000  00000000  0014777c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 2c 00 20 b5 6c 00 00 ad 6d 00 00 ad 6d 00 00     .,. .l...m...m..
	...
      2c:	ad 6d 00 00 00 00 00 00 00 00 00 00 ad 6d 00 00     .m...........m..
      3c:	e5 01 00 00 ad 6d 00 00 ad 6d 00 00 ad 6d 00 00     .....m...m...m..
      4c:	ad 6d 00 00 ad 6d 00 00 ad 6d 00 00 ad 6d 00 00     .m...m...m...m..
      5c:	ad 6d 00 00 ad 6d 00 00 41 3f 00 00 59 3f 00 00     .m...m..A?..Y?..
      6c:	71 3f 00 00 89 3f 00 00 a1 3f 00 00 b9 3f 00 00     q?...?...?...?..
      7c:	ad 6d 00 00 ad 6d 00 00 ad 6d 00 00 ad 6d 00 00     .m...m...m...m..
      8c:	ad 6d 00 00 ad 6d 00 00 00 00 00 00 00 00 00 00     .m...m..........
      9c:	ad 6d 00 00 ad 6d 00 00 ad 6d 00 00 ad 6d 00 00     .m...m...m...m..
      ac:	ad 6d 00 00 00 00 00 00                             .m......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	0000dbf8 	.word	0x0000dbf8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	0000dbf8 	.word	0x0000dbf8
     10c:	0000dbf8 	.word	0x0000dbf8
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00006869 	.word	0x00006869
     190:	20000000 	.word	0x20000000
     194:	0000baa5 	.word	0x0000baa5
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000b0 	.word	0x200000b0

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000b0 	.word	0x200000b0

000001fc <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b086      	sub	sp, #24
     200:	af00      	add	r7, sp, #0
     202:	60f8      	str	r0, [r7, #12]
     204:	60b9      	str	r1, [r7, #8]
     206:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
     208:	68ba      	ldr	r2, [r7, #8]
     20a:	68fb      	ldr	r3, [r7, #12]
     20c:	4053      	eors	r3, r2
     20e:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
     210:	687b      	ldr	r3, [r7, #4]
     212:	00db      	lsls	r3, r3, #3
     214:	617b      	str	r3, [r7, #20]
     216:	e00f      	b.n	238 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
     218:	68bb      	ldr	r3, [r7, #8]
     21a:	2201      	movs	r2, #1
     21c:	4013      	ands	r3, r2
     21e:	d005      	beq.n	22c <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     220:	68bb      	ldr	r3, [r7, #8]
     222:	085b      	lsrs	r3, r3, #1
     224:	4a08      	ldr	r2, [pc, #32]	; (248 <_crc32_recalculate_bytes_helper+0x4c>)
     226:	4053      	eors	r3, r2
     228:	60bb      	str	r3, [r7, #8]
     22a:	e002      	b.n	232 <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
     22c:	68bb      	ldr	r3, [r7, #8]
     22e:	085b      	lsrs	r3, r3, #1
     230:	60bb      	str	r3, [r7, #8]
	for (bit = 8 * bytes; bit > 0; bit--) {
     232:	697b      	ldr	r3, [r7, #20]
     234:	3b01      	subs	r3, #1
     236:	617b      	str	r3, [r7, #20]
     238:	697b      	ldr	r3, [r7, #20]
     23a:	2b00      	cmp	r3, #0
     23c:	d1ec      	bne.n	218 <_crc32_recalculate_bytes_helper+0x1c>
		}
	}

	return crc;
     23e:	68bb      	ldr	r3, [r7, #8]
}
     240:	0018      	movs	r0, r3
     242:	46bd      	mov	sp, r7
     244:	b006      	add	sp, #24
     246:	bd80      	pop	{r7, pc}
     248:	edb88320 	.word	0xedb88320

0000024c <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     24c:	b580      	push	{r7, lr}
     24e:	b088      	sub	sp, #32
     250:	af00      	add	r7, sp, #0
     252:	60f8      	str	r0, [r7, #12]
     254:	60b9      	str	r1, [r7, #8]
     256:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     258:	68fb      	ldr	r3, [r7, #12]
     25a:	2203      	movs	r2, #3
     25c:	4393      	bics	r3, r2
	const word_t *word_ptr =
     25e:	61fb      	str	r3, [r7, #28]
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     260:	687b      	ldr	r3, [r7, #4]
     262:	681b      	ldr	r3, [r3, #0]
     264:	43db      	mvns	r3, r3
     266:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
     268:	68bb      	ldr	r3, [r7, #8]
     26a:	2b03      	cmp	r3, #3
     26c:	d802      	bhi.n	274 <crc32_recalculate+0x28>
		temp_length = length;
     26e:	68bb      	ldr	r3, [r7, #8]
     270:	61bb      	str	r3, [r7, #24]
     272:	e004      	b.n	27e <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     274:	68fb      	ldr	r3, [r7, #12]
     276:	425b      	negs	r3, r3
     278:	2203      	movs	r2, #3
     27a:	4013      	ands	r3, r2
     27c:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
     27e:	69bb      	ldr	r3, [r7, #24]
     280:	2b00      	cmp	r3, #0
     282:	d01a      	beq.n	2ba <crc32_recalculate+0x6e>
		length -= temp_length;
     284:	68ba      	ldr	r2, [r7, #8]
     286:	69bb      	ldr	r3, [r7, #24]
     288:	1ad3      	subs	r3, r2, r3
     28a:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
     28c:	69fb      	ldr	r3, [r7, #28]
     28e:	1d1a      	adds	r2, r3, #4
     290:	61fa      	str	r2, [r7, #28]
     292:	681b      	ldr	r3, [r3, #0]
     294:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
     296:	69ba      	ldr	r2, [r7, #24]
     298:	0013      	movs	r3, r2
     29a:	075b      	lsls	r3, r3, #29
     29c:	1a9b      	subs	r3, r3, r2
     29e:	00db      	lsls	r3, r3, #3
     2a0:	3320      	adds	r3, #32
     2a2:	693a      	ldr	r2, [r7, #16]
     2a4:	40da      	lsrs	r2, r3
     2a6:	0013      	movs	r3, r2
     2a8:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
     2aa:	69ba      	ldr	r2, [r7, #24]
     2ac:	6979      	ldr	r1, [r7, #20]
     2ae:	693b      	ldr	r3, [r7, #16]
     2b0:	0018      	movs	r0, r3
     2b2:	4b24      	ldr	r3, [pc, #144]	; (344 <crc32_recalculate+0xf8>)
     2b4:	4798      	blx	r3
     2b6:	0003      	movs	r3, r0
     2b8:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     2ba:	68bb      	ldr	r3, [r7, #8]
     2bc:	2203      	movs	r2, #3
     2be:	4393      	bics	r3, r2
     2c0:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
     2c2:	69bb      	ldr	r3, [r7, #24]
     2c4:	2b00      	cmp	r3, #0
     2c6:	d019      	beq.n	2fc <crc32_recalculate+0xb0>
		length -= temp_length;
     2c8:	68ba      	ldr	r2, [r7, #8]
     2ca:	69bb      	ldr	r3, [r7, #24]
     2cc:	1ad3      	subs	r3, r2, r3
     2ce:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
     2d0:	69bb      	ldr	r3, [r7, #24]
     2d2:	089b      	lsrs	r3, r3, #2
     2d4:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
     2d6:	e00c      	b.n	2f2 <crc32_recalculate+0xa6>
			word = *(word_ptr++);
     2d8:	69fb      	ldr	r3, [r7, #28]
     2da:	1d1a      	adds	r2, r3, #4
     2dc:	61fa      	str	r2, [r7, #28]
     2de:	681b      	ldr	r3, [r3, #0]
     2e0:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
     2e2:	6979      	ldr	r1, [r7, #20]
     2e4:	693b      	ldr	r3, [r7, #16]
     2e6:	2204      	movs	r2, #4
     2e8:	0018      	movs	r0, r3
     2ea:	4b16      	ldr	r3, [pc, #88]	; (344 <crc32_recalculate+0xf8>)
     2ec:	4798      	blx	r3
     2ee:	0003      	movs	r3, r0
     2f0:	617b      	str	r3, [r7, #20]
		while (temp_length--) {
     2f2:	69bb      	ldr	r3, [r7, #24]
     2f4:	1e5a      	subs	r2, r3, #1
     2f6:	61ba      	str	r2, [r7, #24]
     2f8:	2b00      	cmp	r3, #0
     2fa:	d1ed      	bne.n	2d8 <crc32_recalculate+0x8c>
		}
	}

	// Calculate for tailing bytes
	if (length) {
     2fc:	68bb      	ldr	r3, [r7, #8]
     2fe:	2b00      	cmp	r3, #0
     300:	d016      	beq.n	330 <crc32_recalculate+0xe4>
		word = *word_ptr;
     302:	69fb      	ldr	r3, [r7, #28]
     304:	681b      	ldr	r3, [r3, #0]
     306:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     308:	68ba      	ldr	r2, [r7, #8]
     30a:	0013      	movs	r3, r2
     30c:	075b      	lsls	r3, r3, #29
     30e:	1a9b      	subs	r3, r3, r2
     310:	00db      	lsls	r3, r3, #3
     312:	3320      	adds	r3, #32
     314:	2201      	movs	r2, #1
     316:	4252      	negs	r2, r2
     318:	40da      	lsrs	r2, r3
     31a:	693b      	ldr	r3, [r7, #16]
     31c:	4013      	ands	r3, r2
     31e:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
     320:	68ba      	ldr	r2, [r7, #8]
     322:	6979      	ldr	r1, [r7, #20]
     324:	693b      	ldr	r3, [r7, #16]
     326:	0018      	movs	r0, r3
     328:	4b06      	ldr	r3, [pc, #24]	; (344 <crc32_recalculate+0xf8>)
     32a:	4798      	blx	r3
     32c:	0003      	movs	r3, r0
     32e:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     330:	697b      	ldr	r3, [r7, #20]
     332:	43da      	mvns	r2, r3
     334:	687b      	ldr	r3, [r7, #4]
     336:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
     338:	2300      	movs	r3, #0
     33a:	0018      	movs	r0, r3
     33c:	46bd      	mov	sp, r7
     33e:	b008      	add	sp, #32
     340:	bd80      	pop	{r7, pc}
     342:	46c0      	nop			; (mov r8, r8)
     344:	000001fd 	.word	0x000001fd

00000348 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     348:	b580      	push	{r7, lr}
     34a:	b084      	sub	sp, #16
     34c:	af00      	add	r7, sp, #0
     34e:	0002      	movs	r2, r0
     350:	1dfb      	adds	r3, r7, #7
     352:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     354:	230f      	movs	r3, #15
     356:	18fb      	adds	r3, r7, r3
     358:	1dfa      	adds	r2, r7, #7
     35a:	7812      	ldrb	r2, [r2, #0]
     35c:	09d2      	lsrs	r2, r2, #7
     35e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     360:	230e      	movs	r3, #14
     362:	18fb      	adds	r3, r7, r3
     364:	1dfa      	adds	r2, r7, #7
     366:	7812      	ldrb	r2, [r2, #0]
     368:	0952      	lsrs	r2, r2, #5
     36a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     36c:	4b0d      	ldr	r3, [pc, #52]	; (3a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     36e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     370:	230f      	movs	r3, #15
     372:	18fb      	adds	r3, r7, r3
     374:	781b      	ldrb	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d10f      	bne.n	39a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     37a:	230f      	movs	r3, #15
     37c:	18fb      	adds	r3, r7, r3
     37e:	781b      	ldrb	r3, [r3, #0]
     380:	009b      	lsls	r3, r3, #2
     382:	2210      	movs	r2, #16
     384:	4694      	mov	ip, r2
     386:	44bc      	add	ip, r7
     388:	4463      	add	r3, ip
     38a:	3b08      	subs	r3, #8
     38c:	681a      	ldr	r2, [r3, #0]
     38e:	230e      	movs	r3, #14
     390:	18fb      	adds	r3, r7, r3
     392:	781b      	ldrb	r3, [r3, #0]
     394:	01db      	lsls	r3, r3, #7
     396:	18d3      	adds	r3, r2, r3
     398:	e000      	b.n	39c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     39a:	2300      	movs	r3, #0
	}
}
     39c:	0018      	movs	r0, r3
     39e:	46bd      	mov	sp, r7
     3a0:	b004      	add	sp, #16
     3a2:	bd80      	pop	{r7, pc}
     3a4:	41004400 	.word	0x41004400

000003a8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	0002      	movs	r2, r0
     3b0:	1dfb      	adds	r3, r7, #7
     3b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     3b4:	1dfb      	adds	r3, r7, #7
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	0018      	movs	r0, r3
     3ba:	4b03      	ldr	r3, [pc, #12]	; (3c8 <port_get_group_from_gpio_pin+0x20>)
     3bc:	4798      	blx	r3
     3be:	0003      	movs	r3, r0
}
     3c0:	0018      	movs	r0, r3
     3c2:	46bd      	mov	sp, r7
     3c4:	b002      	add	sp, #8
     3c6:	bd80      	pop	{r7, pc}
     3c8:	00000349 	.word	0x00000349

000003cc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b082      	sub	sp, #8
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2200      	movs	r2, #0
     3d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2201      	movs	r2, #1
     3de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     3e0:	687b      	ldr	r3, [r7, #4]
     3e2:	2200      	movs	r2, #0
     3e4:	709a      	strb	r2, [r3, #2]
}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	46bd      	mov	sp, r7
     3ea:	b002      	add	sp, #8
     3ec:	bd80      	pop	{r7, pc}
	...

000003f0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     3f0:	b580      	push	{r7, lr}
     3f2:	b084      	sub	sp, #16
     3f4:	af00      	add	r7, sp, #0
     3f6:	0002      	movs	r2, r0
     3f8:	1dfb      	adds	r3, r7, #7
     3fa:	701a      	strb	r2, [r3, #0]
     3fc:	1dbb      	adds	r3, r7, #6
     3fe:	1c0a      	adds	r2, r1, #0
     400:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     402:	1dfb      	adds	r3, r7, #7
     404:	781b      	ldrb	r3, [r3, #0]
     406:	0018      	movs	r0, r3
     408:	4b0d      	ldr	r3, [pc, #52]	; (440 <port_pin_set_output_level+0x50>)
     40a:	4798      	blx	r3
     40c:	0003      	movs	r3, r0
     40e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     410:	1dfb      	adds	r3, r7, #7
     412:	781b      	ldrb	r3, [r3, #0]
     414:	221f      	movs	r2, #31
     416:	4013      	ands	r3, r2
     418:	2201      	movs	r2, #1
     41a:	409a      	lsls	r2, r3
     41c:	0013      	movs	r3, r2
     41e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     420:	1dbb      	adds	r3, r7, #6
     422:	781b      	ldrb	r3, [r3, #0]
     424:	2b00      	cmp	r3, #0
     426:	d003      	beq.n	430 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     428:	68fb      	ldr	r3, [r7, #12]
     42a:	68ba      	ldr	r2, [r7, #8]
     42c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     42e:	e002      	b.n	436 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     430:	68fb      	ldr	r3, [r7, #12]
     432:	68ba      	ldr	r2, [r7, #8]
     434:	615a      	str	r2, [r3, #20]
}
     436:	46c0      	nop			; (mov r8, r8)
     438:	46bd      	mov	sp, r7
     43a:	b004      	add	sp, #16
     43c:	bd80      	pop	{r7, pc}
     43e:	46c0      	nop			; (mov r8, r8)
     440:	000003a9 	.word	0x000003a9

00000444 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     444:	b580      	push	{r7, lr}
     446:	b082      	sub	sp, #8
     448:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     44a:	1d3b      	adds	r3, r7, #4
     44c:	0018      	movs	r0, r3
     44e:	4b0e      	ldr	r3, [pc, #56]	; (488 <system_board_init+0x44>)
     450:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     452:	1d3b      	adds	r3, r7, #4
     454:	2201      	movs	r2, #1
     456:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     458:	1d3b      	adds	r3, r7, #4
     45a:	0019      	movs	r1, r3
     45c:	2017      	movs	r0, #23
     45e:	4b0b      	ldr	r3, [pc, #44]	; (48c <system_board_init+0x48>)
     460:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     462:	2101      	movs	r1, #1
     464:	2017      	movs	r0, #23
     466:	4b0a      	ldr	r3, [pc, #40]	; (490 <system_board_init+0x4c>)
     468:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     46a:	1d3b      	adds	r3, r7, #4
     46c:	2200      	movs	r2, #0
     46e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     470:	1d3b      	adds	r3, r7, #4
     472:	2201      	movs	r2, #1
     474:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     476:	1d3b      	adds	r3, r7, #4
     478:	0019      	movs	r1, r3
     47a:	2037      	movs	r0, #55	; 0x37
     47c:	4b03      	ldr	r3, [pc, #12]	; (48c <system_board_init+0x48>)
     47e:	4798      	blx	r3
}
     480:	46c0      	nop			; (mov r8, r8)
     482:	46bd      	mov	sp, r7
     484:	b002      	add	sp, #8
     486:	bd80      	pop	{r7, pc}
     488:	000003cd 	.word	0x000003cd
     48c:	00003371 	.word	0x00003371
     490:	000003f1 	.word	0x000003f1

00000494 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     494:	b580      	push	{r7, lr}
     496:	b082      	sub	sp, #8
     498:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     49a:	4b07      	ldr	r3, [pc, #28]	; (4b8 <nvm_is_ready+0x24>)
     49c:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     49e:	687b      	ldr	r3, [r7, #4]
     4a0:	7d1b      	ldrb	r3, [r3, #20]
     4a2:	b2db      	uxtb	r3, r3
     4a4:	001a      	movs	r2, r3
     4a6:	2301      	movs	r3, #1
     4a8:	4013      	ands	r3, r2
     4aa:	1e5a      	subs	r2, r3, #1
     4ac:	4193      	sbcs	r3, r2
     4ae:	b2db      	uxtb	r3, r3
}
     4b0:	0018      	movs	r0, r3
     4b2:	46bd      	mov	sp, r7
     4b4:	b002      	add	sp, #8
     4b6:	bd80      	pop	{r7, pc}
     4b8:	41004000 	.word	0x41004000

000004bc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b082      	sub	sp, #8
     4c0:	af00      	add	r7, sp, #0
     4c2:	0002      	movs	r2, r0
     4c4:	6039      	str	r1, [r7, #0]
     4c6:	1dfb      	adds	r3, r7, #7
     4c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     4ca:	1dfb      	adds	r3, r7, #7
     4cc:	781b      	ldrb	r3, [r3, #0]
     4ce:	2b01      	cmp	r3, #1
     4d0:	d00a      	beq.n	4e8 <system_apb_clock_set_mask+0x2c>
     4d2:	2b02      	cmp	r3, #2
     4d4:	d00f      	beq.n	4f6 <system_apb_clock_set_mask+0x3a>
     4d6:	2b00      	cmp	r3, #0
     4d8:	d114      	bne.n	504 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     4da:	4b0e      	ldr	r3, [pc, #56]	; (514 <system_apb_clock_set_mask+0x58>)
     4dc:	4a0d      	ldr	r2, [pc, #52]	; (514 <system_apb_clock_set_mask+0x58>)
     4de:	6991      	ldr	r1, [r2, #24]
     4e0:	683a      	ldr	r2, [r7, #0]
     4e2:	430a      	orrs	r2, r1
     4e4:	619a      	str	r2, [r3, #24]
			break;
     4e6:	e00f      	b.n	508 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     4e8:	4b0a      	ldr	r3, [pc, #40]	; (514 <system_apb_clock_set_mask+0x58>)
     4ea:	4a0a      	ldr	r2, [pc, #40]	; (514 <system_apb_clock_set_mask+0x58>)
     4ec:	69d1      	ldr	r1, [r2, #28]
     4ee:	683a      	ldr	r2, [r7, #0]
     4f0:	430a      	orrs	r2, r1
     4f2:	61da      	str	r2, [r3, #28]
			break;
     4f4:	e008      	b.n	508 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4f6:	4b07      	ldr	r3, [pc, #28]	; (514 <system_apb_clock_set_mask+0x58>)
     4f8:	4a06      	ldr	r2, [pc, #24]	; (514 <system_apb_clock_set_mask+0x58>)
     4fa:	6a11      	ldr	r1, [r2, #32]
     4fc:	683a      	ldr	r2, [r7, #0]
     4fe:	430a      	orrs	r2, r1
     500:	621a      	str	r2, [r3, #32]
			break;
     502:	e001      	b.n	508 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     504:	2317      	movs	r3, #23
     506:	e000      	b.n	50a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     508:	2300      	movs	r3, #0
}
     50a:	0018      	movs	r0, r3
     50c:	46bd      	mov	sp, r7
     50e:	b002      	add	sp, #8
     510:	bd80      	pop	{r7, pc}
     512:	46c0      	nop			; (mov r8, r8)
     514:	40000400 	.word	0x40000400

00000518 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     518:	b580      	push	{r7, lr}
     51a:	b084      	sub	sp, #16
     51c:	af00      	add	r7, sp, #0
     51e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     520:	4b2f      	ldr	r3, [pc, #188]	; (5e0 <nvm_set_config+0xc8>)
     522:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     524:	2104      	movs	r1, #4
     526:	2001      	movs	r0, #1
     528:	4b2e      	ldr	r3, [pc, #184]	; (5e4 <nvm_set_config+0xcc>)
     52a:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     52c:	68fb      	ldr	r3, [r7, #12]
     52e:	2220      	movs	r2, #32
     530:	32ff      	adds	r2, #255	; 0xff
     532:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     534:	4b2c      	ldr	r3, [pc, #176]	; (5e8 <nvm_set_config+0xd0>)
     536:	4798      	blx	r3
     538:	0003      	movs	r3, r0
     53a:	001a      	movs	r2, r3
     53c:	2301      	movs	r3, #1
     53e:	4053      	eors	r3, r2
     540:	b2db      	uxtb	r3, r3
     542:	2b00      	cmp	r3, #0
     544:	d001      	beq.n	54a <nvm_set_config+0x32>
		return STATUS_BUSY;
     546:	2305      	movs	r3, #5
     548:	e045      	b.n	5d6 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	021b      	lsls	r3, r3, #8
     550:	001a      	movs	r2, r3
     552:	23c0      	movs	r3, #192	; 0xc0
     554:	009b      	lsls	r3, r3, #2
     556:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     558:	687b      	ldr	r3, [r7, #4]
     55a:	785b      	ldrb	r3, [r3, #1]
     55c:	01db      	lsls	r3, r3, #7
     55e:	0019      	movs	r1, r3
     560:	23ff      	movs	r3, #255	; 0xff
     562:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     564:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     566:	687b      	ldr	r3, [r7, #4]
     568:	789b      	ldrb	r3, [r3, #2]
     56a:	005b      	lsls	r3, r3, #1
     56c:	0019      	movs	r1, r3
     56e:	231e      	movs	r3, #30
     570:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     572:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     574:	687b      	ldr	r3, [r7, #4]
     576:	78db      	ldrb	r3, [r3, #3]
     578:	049b      	lsls	r3, r3, #18
     57a:	0019      	movs	r1, r3
     57c:	2380      	movs	r3, #128	; 0x80
     57e:	02db      	lsls	r3, r3, #11
     580:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     582:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     584:	687b      	ldr	r3, [r7, #4]
     586:	791b      	ldrb	r3, [r3, #4]
     588:	041b      	lsls	r3, r3, #16
     58a:	0019      	movs	r1, r3
     58c:	23c0      	movs	r3, #192	; 0xc0
     58e:	029b      	lsls	r3, r3, #10
     590:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     592:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     594:	68fb      	ldr	r3, [r7, #12]
     596:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     598:	68fb      	ldr	r3, [r7, #12]
     59a:	689b      	ldr	r3, [r3, #8]
     59c:	035b      	lsls	r3, r3, #13
     59e:	0f5b      	lsrs	r3, r3, #29
     5a0:	b2db      	uxtb	r3, r3
     5a2:	001a      	movs	r2, r3
     5a4:	2308      	movs	r3, #8
     5a6:	4093      	lsls	r3, r2
     5a8:	b29a      	uxth	r2, r3
     5aa:	4b10      	ldr	r3, [pc, #64]	; (5ec <nvm_set_config+0xd4>)
     5ac:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     5ae:	68fb      	ldr	r3, [r7, #12]
     5b0:	689b      	ldr	r3, [r3, #8]
     5b2:	b29a      	uxth	r2, r3
     5b4:	4b0d      	ldr	r3, [pc, #52]	; (5ec <nvm_set_config+0xd4>)
     5b6:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	785a      	ldrb	r2, [r3, #1]
     5bc:	4b0b      	ldr	r3, [pc, #44]	; (5ec <nvm_set_config+0xd4>)
     5be:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     5c0:	68fb      	ldr	r3, [r7, #12]
     5c2:	8b1b      	ldrh	r3, [r3, #24]
     5c4:	b29b      	uxth	r3, r3
     5c6:	001a      	movs	r2, r3
     5c8:	2380      	movs	r3, #128	; 0x80
     5ca:	005b      	lsls	r3, r3, #1
     5cc:	4013      	ands	r3, r2
     5ce:	d001      	beq.n	5d4 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     5d0:	2310      	movs	r3, #16
     5d2:	e000      	b.n	5d6 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     5d4:	2300      	movs	r3, #0
}
     5d6:	0018      	movs	r0, r3
     5d8:	46bd      	mov	sp, r7
     5da:	b004      	add	sp, #16
     5dc:	bd80      	pop	{r7, pc}
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	41004000 	.word	0x41004000
     5e4:	000004bd 	.word	0x000004bd
     5e8:	00000495 	.word	0x00000495
     5ec:	200000b4 	.word	0x200000b4

000005f0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     5f0:	b580      	push	{r7, lr}
     5f2:	b086      	sub	sp, #24
     5f4:	af00      	add	r7, sp, #0
     5f6:	60b9      	str	r1, [r7, #8]
     5f8:	607a      	str	r2, [r7, #4]
     5fa:	230f      	movs	r3, #15
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	1c02      	adds	r2, r0, #0
     600:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     602:	4b3a      	ldr	r3, [pc, #232]	; (6ec <nvm_execute_command+0xfc>)
     604:	881b      	ldrh	r3, [r3, #0]
     606:	001a      	movs	r2, r3
     608:	4b38      	ldr	r3, [pc, #224]	; (6ec <nvm_execute_command+0xfc>)
     60a:	885b      	ldrh	r3, [r3, #2]
     60c:	435a      	muls	r2, r3
     60e:	68bb      	ldr	r3, [r7, #8]
     610:	429a      	cmp	r2, r3
     612:	d209      	bcs.n	628 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     614:	68bb      	ldr	r3, [r7, #8]
     616:	4a36      	ldr	r2, [pc, #216]	; (6f0 <nvm_execute_command+0x100>)
     618:	4293      	cmp	r3, r2
     61a:	d903      	bls.n	624 <nvm_execute_command+0x34>
     61c:	68bb      	ldr	r3, [r7, #8]
     61e:	4a35      	ldr	r2, [pc, #212]	; (6f4 <nvm_execute_command+0x104>)
     620:	4293      	cmp	r3, r2
     622:	d901      	bls.n	628 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     624:	2318      	movs	r3, #24
     626:	e05c      	b.n	6e2 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     628:	4b33      	ldr	r3, [pc, #204]	; (6f8 <nvm_execute_command+0x108>)
     62a:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     62c:	697b      	ldr	r3, [r7, #20]
     62e:	685b      	ldr	r3, [r3, #4]
     630:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     632:	693b      	ldr	r3, [r7, #16]
     634:	2280      	movs	r2, #128	; 0x80
     636:	02d2      	lsls	r2, r2, #11
     638:	431a      	orrs	r2, r3
     63a:	697b      	ldr	r3, [r7, #20]
     63c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     63e:	697b      	ldr	r3, [r7, #20]
     640:	2220      	movs	r2, #32
     642:	32ff      	adds	r2, #255	; 0xff
     644:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     646:	4b2d      	ldr	r3, [pc, #180]	; (6fc <nvm_execute_command+0x10c>)
     648:	4798      	blx	r3
     64a:	0003      	movs	r3, r0
     64c:	001a      	movs	r2, r3
     64e:	2301      	movs	r3, #1
     650:	4053      	eors	r3, r2
     652:	b2db      	uxtb	r3, r3
     654:	2b00      	cmp	r3, #0
     656:	d004      	beq.n	662 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     658:	697b      	ldr	r3, [r7, #20]
     65a:	693a      	ldr	r2, [r7, #16]
     65c:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     65e:	2305      	movs	r3, #5
     660:	e03f      	b.n	6e2 <nvm_execute_command+0xf2>
	}

	switch (command) {
     662:	230f      	movs	r3, #15
     664:	18fb      	adds	r3, r7, r3
     666:	781b      	ldrb	r3, [r3, #0]
     668:	2b45      	cmp	r3, #69	; 0x45
     66a:	d81d      	bhi.n	6a8 <nvm_execute_command+0xb8>
     66c:	009a      	lsls	r2, r3, #2
     66e:	4b24      	ldr	r3, [pc, #144]	; (700 <nvm_execute_command+0x110>)
     670:	18d3      	adds	r3, r2, r3
     672:	681b      	ldr	r3, [r3, #0]
     674:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     676:	697b      	ldr	r3, [r7, #20]
     678:	8b1b      	ldrh	r3, [r3, #24]
     67a:	b29b      	uxth	r3, r3
     67c:	001a      	movs	r2, r3
     67e:	2380      	movs	r3, #128	; 0x80
     680:	005b      	lsls	r3, r3, #1
     682:	4013      	ands	r3, r2
     684:	d004      	beq.n	690 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     686:	697b      	ldr	r3, [r7, #20]
     688:	693a      	ldr	r2, [r7, #16]
     68a:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     68c:	2310      	movs	r3, #16
     68e:	e028      	b.n	6e2 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     690:	68bb      	ldr	r3, [r7, #8]
     692:	089b      	lsrs	r3, r3, #2
     694:	005a      	lsls	r2, r3, #1
     696:	697b      	ldr	r3, [r7, #20]
     698:	61da      	str	r2, [r3, #28]
			break;
     69a:	e00b      	b.n	6b4 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     69c:	68bb      	ldr	r3, [r7, #8]
     69e:	089b      	lsrs	r3, r3, #2
     6a0:	005a      	lsls	r2, r3, #1
     6a2:	697b      	ldr	r3, [r7, #20]
     6a4:	61da      	str	r2, [r3, #28]
			break;
     6a6:	e005      	b.n	6b4 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     6a8:	697b      	ldr	r3, [r7, #20]
     6aa:	693a      	ldr	r2, [r7, #16]
     6ac:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     6ae:	2317      	movs	r3, #23
     6b0:	e017      	b.n	6e2 <nvm_execute_command+0xf2>
			break;
     6b2:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     6b4:	230f      	movs	r3, #15
     6b6:	18fb      	adds	r3, r7, r3
     6b8:	781b      	ldrb	r3, [r3, #0]
     6ba:	b29b      	uxth	r3, r3
     6bc:	4a11      	ldr	r2, [pc, #68]	; (704 <nvm_execute_command+0x114>)
     6be:	4313      	orrs	r3, r2
     6c0:	b29a      	uxth	r2, r3
     6c2:	697b      	ldr	r3, [r7, #20]
     6c4:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	4b0c      	ldr	r3, [pc, #48]	; (6fc <nvm_execute_command+0x10c>)
     6ca:	4798      	blx	r3
     6cc:	0003      	movs	r3, r0
     6ce:	001a      	movs	r2, r3
     6d0:	2301      	movs	r3, #1
     6d2:	4053      	eors	r3, r2
     6d4:	b2db      	uxtb	r3, r3
     6d6:	2b00      	cmp	r3, #0
     6d8:	d1f6      	bne.n	6c8 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     6da:	697b      	ldr	r3, [r7, #20]
     6dc:	693a      	ldr	r2, [r7, #16]
     6de:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     6e0:	2300      	movs	r3, #0
}
     6e2:	0018      	movs	r0, r3
     6e4:	46bd      	mov	sp, r7
     6e6:	b006      	add	sp, #24
     6e8:	bd80      	pop	{r7, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	200000b4 	.word	0x200000b4
     6f0:	00803fff 	.word	0x00803fff
     6f4:	00806000 	.word	0x00806000
     6f8:	41004000 	.word	0x41004000
     6fc:	00000495 	.word	0x00000495
     700:	0000ccd4 	.word	0x0000ccd4
     704:	ffffa500 	.word	0xffffa500

00000708 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     708:	b580      	push	{r7, lr}
     70a:	b088      	sub	sp, #32
     70c:	af00      	add	r7, sp, #0
     70e:	60f8      	str	r0, [r7, #12]
     710:	60b9      	str	r1, [r7, #8]
     712:	1dbb      	adds	r3, r7, #6
     714:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     716:	4b4a      	ldr	r3, [pc, #296]	; (840 <nvm_write_buffer+0x138>)
     718:	881b      	ldrh	r3, [r3, #0]
     71a:	001a      	movs	r2, r3
     71c:	4b48      	ldr	r3, [pc, #288]	; (840 <nvm_write_buffer+0x138>)
     71e:	885b      	ldrh	r3, [r3, #2]
     720:	435a      	muls	r2, r3
	if (destination_address >
     722:	68fb      	ldr	r3, [r7, #12]
     724:	429a      	cmp	r2, r3
     726:	d201      	bcs.n	72c <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     728:	2318      	movs	r3, #24
     72a:	e084      	b.n	836 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     72c:	4b44      	ldr	r3, [pc, #272]	; (840 <nvm_write_buffer+0x138>)
     72e:	881b      	ldrh	r3, [r3, #0]
     730:	3b01      	subs	r3, #1
     732:	001a      	movs	r2, r3
     734:	68fb      	ldr	r3, [r7, #12]
     736:	4013      	ands	r3, r2
     738:	d001      	beq.n	73e <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     73a:	2318      	movs	r3, #24
     73c:	e07b      	b.n	836 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     73e:	4b40      	ldr	r3, [pc, #256]	; (840 <nvm_write_buffer+0x138>)
     740:	881b      	ldrh	r3, [r3, #0]
     742:	1dba      	adds	r2, r7, #6
     744:	8812      	ldrh	r2, [r2, #0]
     746:	429a      	cmp	r2, r3
     748:	d901      	bls.n	74e <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     74a:	2317      	movs	r3, #23
     74c:	e073      	b.n	836 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     74e:	4b3d      	ldr	r3, [pc, #244]	; (844 <nvm_write_buffer+0x13c>)
     750:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     752:	4b3d      	ldr	r3, [pc, #244]	; (848 <nvm_write_buffer+0x140>)
     754:	4798      	blx	r3
     756:	0003      	movs	r3, r0
     758:	001a      	movs	r2, r3
     75a:	2301      	movs	r3, #1
     75c:	4053      	eors	r3, r2
     75e:	b2db      	uxtb	r3, r3
     760:	2b00      	cmp	r3, #0
     762:	d001      	beq.n	768 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     764:	2305      	movs	r3, #5
     766:	e066      	b.n	836 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     768:	697b      	ldr	r3, [r7, #20]
     76a:	4a38      	ldr	r2, [pc, #224]	; (84c <nvm_write_buffer+0x144>)
     76c:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     76e:	46c0      	nop			; (mov r8, r8)
     770:	4b35      	ldr	r3, [pc, #212]	; (848 <nvm_write_buffer+0x140>)
     772:	4798      	blx	r3
     774:	0003      	movs	r3, r0
     776:	001a      	movs	r2, r3
     778:	2301      	movs	r3, #1
     77a:	4053      	eors	r3, r2
     77c:	b2db      	uxtb	r3, r3
     77e:	2b00      	cmp	r3, #0
     780:	d1f6      	bne.n	770 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     782:	697b      	ldr	r3, [r7, #20]
     784:	2220      	movs	r2, #32
     786:	32ff      	adds	r2, #255	; 0xff
     788:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     78a:	68fb      	ldr	r3, [r7, #12]
     78c:	085b      	lsrs	r3, r3, #1
     78e:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     790:	231a      	movs	r3, #26
     792:	18fb      	adds	r3, r7, r3
     794:	2200      	movs	r2, #0
     796:	801a      	strh	r2, [r3, #0]
     798:	e032      	b.n	800 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     79a:	231a      	movs	r3, #26
     79c:	18fb      	adds	r3, r7, r3
     79e:	881b      	ldrh	r3, [r3, #0]
     7a0:	68ba      	ldr	r2, [r7, #8]
     7a2:	18d3      	adds	r3, r2, r3
     7a4:	781a      	ldrb	r2, [r3, #0]
     7a6:	2318      	movs	r3, #24
     7a8:	18fb      	adds	r3, r7, r3
     7aa:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     7ac:	231a      	movs	r3, #26
     7ae:	18fb      	adds	r3, r7, r3
     7b0:	881a      	ldrh	r2, [r3, #0]
     7b2:	1dbb      	adds	r3, r7, #6
     7b4:	881b      	ldrh	r3, [r3, #0]
     7b6:	3b01      	subs	r3, #1
     7b8:	429a      	cmp	r2, r3
     7ba:	da11      	bge.n	7e0 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     7bc:	231a      	movs	r3, #26
     7be:	18fb      	adds	r3, r7, r3
     7c0:	881b      	ldrh	r3, [r3, #0]
     7c2:	3301      	adds	r3, #1
     7c4:	68ba      	ldr	r2, [r7, #8]
     7c6:	18d3      	adds	r3, r2, r3
     7c8:	781b      	ldrb	r3, [r3, #0]
     7ca:	021b      	lsls	r3, r3, #8
     7cc:	b21a      	sxth	r2, r3
     7ce:	2318      	movs	r3, #24
     7d0:	18fb      	adds	r3, r7, r3
     7d2:	2100      	movs	r1, #0
     7d4:	5e5b      	ldrsh	r3, [r3, r1]
     7d6:	4313      	orrs	r3, r2
     7d8:	b21a      	sxth	r2, r3
     7da:	2318      	movs	r3, #24
     7dc:	18fb      	adds	r3, r7, r3
     7de:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     7e0:	69fb      	ldr	r3, [r7, #28]
     7e2:	1c5a      	adds	r2, r3, #1
     7e4:	61fa      	str	r2, [r7, #28]
     7e6:	005b      	lsls	r3, r3, #1
     7e8:	001a      	movs	r2, r3
     7ea:	2318      	movs	r3, #24
     7ec:	18fb      	adds	r3, r7, r3
     7ee:	881b      	ldrh	r3, [r3, #0]
     7f0:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     7f2:	231a      	movs	r3, #26
     7f4:	18fb      	adds	r3, r7, r3
     7f6:	221a      	movs	r2, #26
     7f8:	18ba      	adds	r2, r7, r2
     7fa:	8812      	ldrh	r2, [r2, #0]
     7fc:	3202      	adds	r2, #2
     7fe:	801a      	strh	r2, [r3, #0]
     800:	231a      	movs	r3, #26
     802:	18fa      	adds	r2, r7, r3
     804:	1dbb      	adds	r3, r7, #6
     806:	8812      	ldrh	r2, [r2, #0]
     808:	881b      	ldrh	r3, [r3, #0]
     80a:	429a      	cmp	r2, r3
     80c:	d3c5      	bcc.n	79a <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     80e:	4b0c      	ldr	r3, [pc, #48]	; (840 <nvm_write_buffer+0x138>)
     810:	791b      	ldrb	r3, [r3, #4]
     812:	2201      	movs	r2, #1
     814:	4053      	eors	r3, r2
     816:	b2db      	uxtb	r3, r3
     818:	2b00      	cmp	r3, #0
     81a:	d00b      	beq.n	834 <nvm_write_buffer+0x12c>
     81c:	1dbb      	adds	r3, r7, #6
     81e:	881b      	ldrh	r3, [r3, #0]
     820:	2b3f      	cmp	r3, #63	; 0x3f
     822:	d807      	bhi.n	834 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     824:	68fb      	ldr	r3, [r7, #12]
     826:	2200      	movs	r2, #0
     828:	0019      	movs	r1, r3
     82a:	2004      	movs	r0, #4
     82c:	4b08      	ldr	r3, [pc, #32]	; (850 <nvm_write_buffer+0x148>)
     82e:	4798      	blx	r3
     830:	0003      	movs	r3, r0
     832:	e000      	b.n	836 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     834:	2300      	movs	r3, #0
}
     836:	0018      	movs	r0, r3
     838:	46bd      	mov	sp, r7
     83a:	b008      	add	sp, #32
     83c:	bd80      	pop	{r7, pc}
     83e:	46c0      	nop			; (mov r8, r8)
     840:	200000b4 	.word	0x200000b4
     844:	41004000 	.word	0x41004000
     848:	00000495 	.word	0x00000495
     84c:	ffffa544 	.word	0xffffa544
     850:	000005f1 	.word	0x000005f1

00000854 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     854:	b580      	push	{r7, lr}
     856:	b084      	sub	sp, #16
     858:	af00      	add	r7, sp, #0
     85a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     85c:	4b23      	ldr	r3, [pc, #140]	; (8ec <nvm_erase_row+0x98>)
     85e:	881b      	ldrh	r3, [r3, #0]
     860:	001a      	movs	r2, r3
     862:	4b22      	ldr	r3, [pc, #136]	; (8ec <nvm_erase_row+0x98>)
     864:	885b      	ldrh	r3, [r3, #2]
     866:	435a      	muls	r2, r3
	if (row_address >
     868:	687b      	ldr	r3, [r7, #4]
     86a:	429a      	cmp	r2, r3
     86c:	d201      	bcs.n	872 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     86e:	2318      	movs	r3, #24
     870:	e037      	b.n	8e2 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     872:	4b1e      	ldr	r3, [pc, #120]	; (8ec <nvm_erase_row+0x98>)
     874:	881b      	ldrh	r3, [r3, #0]
     876:	009b      	lsls	r3, r3, #2
     878:	3b01      	subs	r3, #1
     87a:	001a      	movs	r2, r3
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	4013      	ands	r3, r2
     880:	d001      	beq.n	886 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     882:	2318      	movs	r3, #24
     884:	e02d      	b.n	8e2 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     886:	4b1a      	ldr	r3, [pc, #104]	; (8f0 <nvm_erase_row+0x9c>)
     888:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     88a:	4b1a      	ldr	r3, [pc, #104]	; (8f4 <nvm_erase_row+0xa0>)
     88c:	4798      	blx	r3
     88e:	0003      	movs	r3, r0
     890:	001a      	movs	r2, r3
     892:	2301      	movs	r3, #1
     894:	4053      	eors	r3, r2
     896:	b2db      	uxtb	r3, r3
     898:	2b00      	cmp	r3, #0
     89a:	d001      	beq.n	8a0 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     89c:	2305      	movs	r3, #5
     89e:	e020      	b.n	8e2 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     8a0:	68fb      	ldr	r3, [r7, #12]
     8a2:	2220      	movs	r2, #32
     8a4:	32ff      	adds	r2, #255	; 0xff
     8a6:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	089b      	lsrs	r3, r3, #2
     8ac:	005a      	lsls	r2, r3, #1
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	4a10      	ldr	r2, [pc, #64]	; (8f8 <nvm_erase_row+0xa4>)
     8b6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     8b8:	46c0      	nop			; (mov r8, r8)
     8ba:	4b0e      	ldr	r3, [pc, #56]	; (8f4 <nvm_erase_row+0xa0>)
     8bc:	4798      	blx	r3
     8be:	0003      	movs	r3, r0
     8c0:	001a      	movs	r2, r3
     8c2:	2301      	movs	r3, #1
     8c4:	4053      	eors	r3, r2
     8c6:	b2db      	uxtb	r3, r3
     8c8:	2b00      	cmp	r3, #0
     8ca:	d1f6      	bne.n	8ba <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     8cc:	68fb      	ldr	r3, [r7, #12]
     8ce:	8b1b      	ldrh	r3, [r3, #24]
     8d0:	b29b      	uxth	r3, r3
     8d2:	b2db      	uxtb	r3, r3
     8d4:	001a      	movs	r2, r3
     8d6:	231c      	movs	r3, #28
     8d8:	4013      	ands	r3, r2
     8da:	d001      	beq.n	8e0 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     8dc:	2304      	movs	r3, #4
     8de:	e000      	b.n	8e2 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     8e0:	2300      	movs	r3, #0
}
     8e2:	0018      	movs	r0, r3
     8e4:	46bd      	mov	sp, r7
     8e6:	b004      	add	sp, #16
     8e8:	bd80      	pop	{r7, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	200000b4 	.word	0x200000b4
     8f0:	41004000 	.word	0x41004000
     8f4:	00000495 	.word	0x00000495
     8f8:	ffffa502 	.word	0xffffa502

000008fc <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     8fc:	b590      	push	{r4, r7, lr}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     902:	4b16      	ldr	r3, [pc, #88]	; (95c <SdCard_Initiate+0x60>)
     904:	4798      	blx	r3
     906:	0003      	movs	r3, r0
     908:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     90a:	1dfc      	adds	r4, r7, #7
     90c:	2000      	movs	r0, #0
     90e:	4b14      	ldr	r3, [pc, #80]	; (960 <SdCard_Initiate+0x64>)
     910:	4798      	blx	r3
     912:	0003      	movs	r3, r0
     914:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     916:	1dfb      	adds	r3, r7, #7
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	2b01      	cmp	r3, #1
     91c:	d106      	bne.n	92c <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     91e:	46c0      	nop			; (mov r8, r8)
     920:	2000      	movs	r0, #0
     922:	4b10      	ldr	r3, [pc, #64]	; (964 <SdCard_Initiate+0x68>)
     924:	4798      	blx	r3
     926:	0003      	movs	r3, r0
     928:	2b02      	cmp	r3, #2
     92a:	d1f9      	bne.n	920 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     92c:	4b0b      	ldr	r3, [pc, #44]	; (95c <SdCard_Initiate+0x60>)
     92e:	4798      	blx	r3
     930:	0002      	movs	r2, r0
     932:	683b      	ldr	r3, [r7, #0]
     934:	1ad2      	subs	r2, r2, r3
     936:	23fa      	movs	r3, #250	; 0xfa
     938:	005b      	lsls	r3, r3, #1
     93a:	429a      	cmp	r2, r3
     93c:	d903      	bls.n	946 <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     93e:	1dfb      	adds	r3, r7, #7
     940:	2201      	movs	r2, #1
     942:	701a      	strb	r2, [r3, #0]
		break;
     944:	e003      	b.n	94e <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     946:	1dfb      	adds	r3, r7, #7
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	2b00      	cmp	r3, #0
     94c:	d1dd      	bne.n	90a <SdCard_Initiate+0xe>

return status;
     94e:	1dfb      	adds	r3, r7, #7
     950:	781b      	ldrb	r3, [r3, #0]
}
     952:	0018      	movs	r0, r3
     954:	46bd      	mov	sp, r7
     956:	b003      	add	sp, #12
     958:	bd90      	pop	{r4, r7, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	000001d1 	.word	0x000001d1
     960:	000021a5 	.word	0x000021a5
     964:	00001d19 	.word	0x00001d19

00000968 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     968:	b580      	push	{r7, lr}
     96a:	b082      	sub	sp, #8
     96c:	af00      	add	r7, sp, #0
     96e:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     970:	687b      	ldr	r3, [r7, #4]
     972:	7c1b      	ldrb	r3, [r3, #16]
     974:	2b00      	cmp	r3, #0
     976:	d00b      	beq.n	990 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     978:	687b      	ldr	r3, [r7, #4]
     97a:	689b      	ldr	r3, [r3, #8]
     97c:	1c5a      	adds	r2, r3, #1
     97e:	687b      	ldr	r3, [r7, #4]
     980:	68d9      	ldr	r1, [r3, #12]
     982:	4b10      	ldr	r3, [pc, #64]	; (9c4 <advance_pointer+0x5c>)
     984:	0010      	movs	r0, r2
     986:	4798      	blx	r3
     988:	000b      	movs	r3, r1
     98a:	001a      	movs	r2, r3
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     990:	687b      	ldr	r3, [r7, #4]
     992:	685b      	ldr	r3, [r3, #4]
     994:	1c5a      	adds	r2, r3, #1
     996:	687b      	ldr	r3, [r7, #4]
     998:	68d9      	ldr	r1, [r3, #12]
     99a:	4b0a      	ldr	r3, [pc, #40]	; (9c4 <advance_pointer+0x5c>)
     99c:	0010      	movs	r0, r2
     99e:	4798      	blx	r3
     9a0:	000b      	movs	r3, r1
     9a2:	001a      	movs	r2, r3
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	685a      	ldr	r2, [r3, #4]
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	689b      	ldr	r3, [r3, #8]
     9b0:	1ad3      	subs	r3, r2, r3
     9b2:	425a      	negs	r2, r3
     9b4:	4153      	adcs	r3, r2
     9b6:	b2da      	uxtb	r2, r3
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	741a      	strb	r2, [r3, #16]
 }
     9bc:	46c0      	nop			; (mov r8, r8)
     9be:	46bd      	mov	sp, r7
     9c0:	b002      	add	sp, #8
     9c2:	bd80      	pop	{r7, pc}
     9c4:	0000bbb1 	.word	0x0000bbb1

000009c8 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     9c8:	b580      	push	{r7, lr}
     9ca:	b082      	sub	sp, #8
     9cc:	af00      	add	r7, sp, #0
     9ce:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	2200      	movs	r2, #0
     9d4:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	689b      	ldr	r3, [r3, #8]
     9da:	1c5a      	adds	r2, r3, #1
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	68d9      	ldr	r1, [r3, #12]
     9e0:	4b05      	ldr	r3, [pc, #20]	; (9f8 <retreat_pointer+0x30>)
     9e2:	0010      	movs	r0, r2
     9e4:	4798      	blx	r3
     9e6:	000b      	movs	r3, r1
     9e8:	001a      	movs	r2, r3
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	609a      	str	r2, [r3, #8]
 }
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	46bd      	mov	sp, r7
     9f2:	b002      	add	sp, #8
     9f4:	bd80      	pop	{r7, pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	0000bbb1 	.word	0x0000bbb1

000009fc <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
     a04:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     a06:	2014      	movs	r0, #20
     a08:	4b09      	ldr	r3, [pc, #36]	; (a30 <circular_buf_init+0x34>)
     a0a:	4798      	blx	r3
     a0c:	0003      	movs	r3, r0
     a0e:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     a10:	68fb      	ldr	r3, [r7, #12]
     a12:	687a      	ldr	r2, [r7, #4]
     a14:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     a16:	68fb      	ldr	r3, [r7, #12]
     a18:	683a      	ldr	r2, [r7, #0]
     a1a:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     a1c:	68fb      	ldr	r3, [r7, #12]
     a1e:	0018      	movs	r0, r3
     a20:	4b04      	ldr	r3, [pc, #16]	; (a34 <circular_buf_init+0x38>)
     a22:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     a24:	68fb      	ldr	r3, [r7, #12]
 }
     a26:	0018      	movs	r0, r3
     a28:	46bd      	mov	sp, r7
     a2a:	b004      	add	sp, #16
     a2c:	bd80      	pop	{r7, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	0000be2d 	.word	0x0000be2d
     a34:	00000a39 	.word	0x00000a39

00000a38 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     a38:	b580      	push	{r7, lr}
     a3a:	b082      	sub	sp, #8
     a3c:	af00      	add	r7, sp, #0
     a3e:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	2200      	movs	r2, #0
     a44:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	2200      	movs	r2, #0
     a4a:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	2200      	movs	r2, #0
     a50:	741a      	strb	r2, [r3, #16]
 }
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	46bd      	mov	sp, r7
     a56:	b002      	add	sp, #8
     a58:	bd80      	pop	{r7, pc}
	...

00000a5c <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     a5c:	b580      	push	{r7, lr}
     a5e:	b082      	sub	sp, #8
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]
     a64:	000a      	movs	r2, r1
     a66:	1cfb      	adds	r3, r7, #3
     a68:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	681a      	ldr	r2, [r3, #0]
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	685b      	ldr	r3, [r3, #4]
     a72:	18d3      	adds	r3, r2, r3
     a74:	1cfa      	adds	r2, r7, #3
     a76:	7812      	ldrb	r2, [r2, #0]
     a78:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	0018      	movs	r0, r3
     a7e:	4b03      	ldr	r3, [pc, #12]	; (a8c <circular_buf_put+0x30>)
     a80:	4798      	blx	r3
 }
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	46bd      	mov	sp, r7
     a86:	b002      	add	sp, #8
     a88:	bd80      	pop	{r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00000969 	.word	0x00000969

00000a90 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     a90:	b580      	push	{r7, lr}
     a92:	b084      	sub	sp, #16
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
     a98:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     a9a:	2301      	movs	r3, #1
     a9c:	425b      	negs	r3, r3
     a9e:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	0018      	movs	r0, r3
     aa4:	4b0d      	ldr	r3, [pc, #52]	; (adc <circular_buf_get+0x4c>)
     aa6:	4798      	blx	r3
     aa8:	0003      	movs	r3, r0
     aaa:	001a      	movs	r2, r3
     aac:	2301      	movs	r3, #1
     aae:	4053      	eors	r3, r2
     ab0:	b2db      	uxtb	r3, r3
     ab2:	2b00      	cmp	r3, #0
     ab4:	d00d      	beq.n	ad2 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	681a      	ldr	r2, [r3, #0]
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	689b      	ldr	r3, [r3, #8]
     abe:	18d3      	adds	r3, r2, r3
     ac0:	781a      	ldrb	r2, [r3, #0]
     ac2:	683b      	ldr	r3, [r7, #0]
     ac4:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	0018      	movs	r0, r3
     aca:	4b05      	ldr	r3, [pc, #20]	; (ae0 <circular_buf_get+0x50>)
     acc:	4798      	blx	r3

		 r = 0;
     ace:	2300      	movs	r3, #0
     ad0:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     ad2:	68fb      	ldr	r3, [r7, #12]
 }
     ad4:	0018      	movs	r0, r3
     ad6:	46bd      	mov	sp, r7
     ad8:	b004      	add	sp, #16
     ada:	bd80      	pop	{r7, pc}
     adc:	00000ae5 	.word	0x00000ae5
     ae0:	000009c9 	.word	0x000009c9

00000ae4 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     ae4:	b580      	push	{r7, lr}
     ae6:	b082      	sub	sp, #8
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	7c1b      	ldrb	r3, [r3, #16]
     af0:	2201      	movs	r2, #1
     af2:	4053      	eors	r3, r2
     af4:	b2db      	uxtb	r3, r3
     af6:	2b00      	cmp	r3, #0
     af8:	d007      	beq.n	b0a <circular_buf_empty+0x26>
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	685a      	ldr	r2, [r3, #4]
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	689b      	ldr	r3, [r3, #8]
     b02:	429a      	cmp	r2, r3
     b04:	d101      	bne.n	b0a <circular_buf_empty+0x26>
     b06:	2301      	movs	r3, #1
     b08:	e000      	b.n	b0c <circular_buf_empty+0x28>
     b0a:	2300      	movs	r3, #0
     b0c:	1c1a      	adds	r2, r3, #0
     b0e:	2301      	movs	r3, #1
     b10:	4013      	ands	r3, r2
     b12:	b2db      	uxtb	r3, r3
 }
     b14:	0018      	movs	r0, r3
     b16:	46bd      	mov	sp, r7
     b18:	b002      	add	sp, #8
     b1a:	bd80      	pop	{r7, pc}

00000b1c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     b1c:	b580      	push	{r7, lr}
     b1e:	b082      	sub	sp, #8
     b20:	af00      	add	r7, sp, #0
     b22:	0002      	movs	r2, r0
     b24:	1dfb      	adds	r3, r7, #7
     b26:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b28:	4b06      	ldr	r3, [pc, #24]	; (b44 <system_interrupt_enable+0x28>)
     b2a:	1dfa      	adds	r2, r7, #7
     b2c:	7812      	ldrb	r2, [r2, #0]
     b2e:	0011      	movs	r1, r2
     b30:	221f      	movs	r2, #31
     b32:	400a      	ands	r2, r1
     b34:	2101      	movs	r1, #1
     b36:	4091      	lsls	r1, r2
     b38:	000a      	movs	r2, r1
     b3a:	601a      	str	r2, [r3, #0]
}
     b3c:	46c0      	nop			; (mov r8, r8)
     b3e:	46bd      	mov	sp, r7
     b40:	b002      	add	sp, #8
     b42:	bd80      	pop	{r7, pc}
     b44:	e000e100 	.word	0xe000e100

00000b48 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     b48:	b580      	push	{r7, lr}
     b4a:	b082      	sub	sp, #8
     b4c:	af00      	add	r7, sp, #0
     b4e:	0002      	movs	r2, r0
     b50:	1dfb      	adds	r3, r7, #7
     b52:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     b54:	4a07      	ldr	r2, [pc, #28]	; (b74 <system_interrupt_disable+0x2c>)
     b56:	1dfb      	adds	r3, r7, #7
     b58:	781b      	ldrb	r3, [r3, #0]
     b5a:	0019      	movs	r1, r3
     b5c:	231f      	movs	r3, #31
     b5e:	400b      	ands	r3, r1
     b60:	2101      	movs	r1, #1
     b62:	4099      	lsls	r1, r3
     b64:	000b      	movs	r3, r1
     b66:	0019      	movs	r1, r3
     b68:	2380      	movs	r3, #128	; 0x80
     b6a:	50d1      	str	r1, [r2, r3]
}
     b6c:	46c0      	nop			; (mov r8, r8)
     b6e:	46bd      	mov	sp, r7
     b70:	b002      	add	sp, #8
     b72:	bd80      	pop	{r7, pc}
     b74:	e000e100 	.word	0xe000e100

00000b78 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
     b7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b86:	68fb      	ldr	r3, [r7, #12]
     b88:	69db      	ldr	r3, [r3, #28]
     b8a:	1e5a      	subs	r2, r3, #1
     b8c:	4193      	sbcs	r3, r2
     b8e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     b90:	0018      	movs	r0, r3
     b92:	46bd      	mov	sp, r7
     b94:	b004      	add	sp, #16
     b96:	bd80      	pop	{r7, pc}

00000b98 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     b98:	b580      	push	{r7, lr}
     b9a:	b082      	sub	sp, #8
     b9c:	af00      	add	r7, sp, #0
     b9e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ba0:	46c0      	nop			; (mov r8, r8)
     ba2:	687b      	ldr	r3, [r7, #4]
     ba4:	0018      	movs	r0, r3
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <_usart_wait_for_sync+0x20>)
     ba8:	4798      	blx	r3
     baa:	1e03      	subs	r3, r0, #0
     bac:	d1f9      	bne.n	ba2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	46bd      	mov	sp, r7
     bb2:	b002      	add	sp, #8
     bb4:	bd80      	pop	{r7, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00000b79 	.word	0x00000b79

00000bbc <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     bbc:	b580      	push	{r7, lr}
     bbe:	b082      	sub	sp, #8
     bc0:	af00      	add	r7, sp, #0
     bc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	2280      	movs	r2, #128	; 0x80
     bc8:	05d2      	lsls	r2, r2, #23
     bca:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	2200      	movs	r2, #0
     bd0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     bd2:	687b      	ldr	r3, [r7, #4]
     bd4:	22ff      	movs	r2, #255	; 0xff
     bd6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     bd8:	687b      	ldr	r3, [r7, #4]
     bda:	2200      	movs	r2, #0
     bdc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	2200      	movs	r2, #0
     be2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     be4:	687b      	ldr	r3, [r7, #4]
     be6:	2296      	movs	r2, #150	; 0x96
     be8:	0192      	lsls	r2, r2, #6
     bea:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	2224      	movs	r2, #36	; 0x24
     bf0:	2101      	movs	r1, #1
     bf2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	2225      	movs	r2, #37	; 0x25
     bf8:	2101      	movs	r1, #1
     bfa:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	2226      	movs	r2, #38	; 0x26
     c00:	2100      	movs	r1, #0
     c02:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	2227      	movs	r2, #39	; 0x27
     c08:	2100      	movs	r1, #0
     c0a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	2200      	movs	r2, #0
     c10:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	2288      	movs	r2, #136	; 0x88
     c16:	0352      	lsls	r2, r2, #13
     c18:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	222c      	movs	r2, #44	; 0x2c
     c1e:	2100      	movs	r1, #0
     c20:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	222d      	movs	r2, #45	; 0x2d
     c26:	2100      	movs	r1, #0
     c28:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	2200      	movs	r2, #0
     c2e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	2200      	movs	r2, #0
     c34:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	2200      	movs	r2, #0
     c3a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	2200      	movs	r2, #0
     c40:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	2200      	movs	r2, #0
     c46:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     c48:	687b      	ldr	r3, [r7, #4]
     c4a:	2200      	movs	r2, #0
     c4c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	2200      	movs	r2, #0
     c52:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	2200      	movs	r2, #0
     c58:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	2200      	movs	r2, #0
     c5e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	2200      	movs	r2, #0
     c64:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	2213      	movs	r2, #19
     c6a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     c6c:	687b      	ldr	r3, [r7, #4]
     c6e:	2200      	movs	r2, #0
     c70:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	46bd      	mov	sp, r7
     c76:	b002      	add	sp, #8
     c78:	bd80      	pop	{r7, pc}
	...

00000c7c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b084      	sub	sp, #16
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	0018      	movs	r0, r3
     c90:	4b09      	ldr	r3, [pc, #36]	; (cb8 <usart_enable+0x3c>)
     c92:	4798      	blx	r3
     c94:	0003      	movs	r3, r0
     c96:	0018      	movs	r0, r3
     c98:	4b08      	ldr	r3, [pc, #32]	; (cbc <usart_enable+0x40>)
     c9a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	0018      	movs	r0, r3
     ca0:	4b07      	ldr	r3, [pc, #28]	; (cc0 <usart_enable+0x44>)
     ca2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ca4:	68fb      	ldr	r3, [r7, #12]
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	2202      	movs	r2, #2
     caa:	431a      	orrs	r2, r3
     cac:	68fb      	ldr	r3, [r7, #12]
     cae:	601a      	str	r2, [r3, #0]
}
     cb0:	46c0      	nop			; (mov r8, r8)
     cb2:	46bd      	mov	sp, r7
     cb4:	b004      	add	sp, #16
     cb6:	bd80      	pop	{r7, pc}
     cb8:	00003efd 	.word	0x00003efd
     cbc:	00000b1d 	.word	0x00000b1d
     cc0:	00000b99 	.word	0x00000b99

00000cc4 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     cc4:	b580      	push	{r7, lr}
     cc6:	b084      	sub	sp, #16
     cc8:	af00      	add	r7, sp, #0
     cca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	0018      	movs	r0, r3
     cd8:	4b0a      	ldr	r3, [pc, #40]	; (d04 <usart_disable+0x40>)
     cda:	4798      	blx	r3
     cdc:	0003      	movs	r3, r0
     cde:	0018      	movs	r0, r3
     ce0:	4b09      	ldr	r3, [pc, #36]	; (d08 <usart_disable+0x44>)
     ce2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	0018      	movs	r0, r3
     ce8:	4b08      	ldr	r3, [pc, #32]	; (d0c <usart_disable+0x48>)
     cea:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     cec:	68fb      	ldr	r3, [r7, #12]
     cee:	681b      	ldr	r3, [r3, #0]
     cf0:	2202      	movs	r2, #2
     cf2:	4393      	bics	r3, r2
     cf4:	001a      	movs	r2, r3
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	601a      	str	r2, [r3, #0]
}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	46bd      	mov	sp, r7
     cfe:	b004      	add	sp, #16
     d00:	bd80      	pop	{r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00003efd 	.word	0x00003efd
     d08:	00000b49 	.word	0x00000b49
     d0c:	00000b99 	.word	0x00000b99

00000d10 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     d10:	b580      	push	{r7, lr}
     d12:	b082      	sub	sp, #8
     d14:	af00      	add	r7, sp, #0
     d16:	6078      	str	r0, [r7, #4]
     d18:	000a      	movs	r2, r1
     d1a:	1cfb      	adds	r3, r7, #3
     d1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	2231      	movs	r2, #49	; 0x31
     d22:	5c9b      	ldrb	r3, [r3, r2]
     d24:	b25a      	sxtb	r2, r3
     d26:	1cfb      	adds	r3, r7, #3
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2101      	movs	r1, #1
     d2c:	4099      	lsls	r1, r3
     d2e:	000b      	movs	r3, r1
     d30:	b25b      	sxtb	r3, r3
     d32:	4313      	orrs	r3, r2
     d34:	b25b      	sxtb	r3, r3
     d36:	b2d9      	uxtb	r1, r3
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	2231      	movs	r2, #49	; 0x31
     d3c:	5499      	strb	r1, [r3, r2]

}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	46bd      	mov	sp, r7
     d42:	b002      	add	sp, #8
     d44:	bd80      	pop	{r7, pc}
	...

00000d48 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
     d50:	000a      	movs	r2, r1
     d52:	1cfb      	adds	r3, r7, #3
     d54:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	1cfb      	adds	r3, r7, #3
     d5a:	781b      	ldrb	r3, [r3, #0]
     d5c:	b29a      	uxth	r2, r3
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	0011      	movs	r1, r2
     d62:	0018      	movs	r0, r3
     d64:	4b04      	ldr	r3, [pc, #16]	; (d78 <usart_serial_putchar+0x30>)
     d66:	4798      	blx	r3
     d68:	1e03      	subs	r3, r0, #0
     d6a:	d1f5      	bne.n	d58 <usart_serial_putchar+0x10>

	return STATUS_OK;
     d6c:	2300      	movs	r3, #0
}
     d6e:	0018      	movs	r0, r3
     d70:	46bd      	mov	sp, r7
     d72:	b002      	add	sp, #8
     d74:	bd80      	pop	{r7, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	00005615 	.word	0x00005615

00000d7c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     d7c:	b580      	push	{r7, lr}
     d7e:	b084      	sub	sp, #16
     d80:	af00      	add	r7, sp, #0
     d82:	6078      	str	r0, [r7, #4]
     d84:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     d86:	230e      	movs	r3, #14
     d88:	18fb      	adds	r3, r7, r3
     d8a:	2200      	movs	r2, #0
     d8c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	230e      	movs	r3, #14
     d92:	18fa      	adds	r2, r7, r3
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	0011      	movs	r1, r2
     d98:	0018      	movs	r0, r3
     d9a:	4b07      	ldr	r3, [pc, #28]	; (db8 <usart_serial_getchar+0x3c>)
     d9c:	4798      	blx	r3
     d9e:	1e03      	subs	r3, r0, #0
     da0:	d1f6      	bne.n	d90 <usart_serial_getchar+0x14>

	*c = temp;
     da2:	230e      	movs	r3, #14
     da4:	18fb      	adds	r3, r7, r3
     da6:	881b      	ldrh	r3, [r3, #0]
     da8:	b2da      	uxtb	r2, r3
     daa:	683b      	ldr	r3, [r7, #0]
     dac:	701a      	strb	r2, [r3, #0]
}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	46bd      	mov	sp, r7
     db2:	b004      	add	sp, #16
     db4:	bd80      	pop	{r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	00005679 	.word	0x00005679

00000dbc <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b084      	sub	sp, #16
     dc0:	af00      	add	r7, sp, #0
     dc2:	60f8      	str	r0, [r7, #12]
     dc4:	60b9      	str	r1, [r7, #8]
     dc6:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     dc8:	4b0d      	ldr	r3, [pc, #52]	; (e00 <stdio_serial_init+0x44>)
     dca:	68fa      	ldr	r2, [r7, #12]
     dcc:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     dce:	4b0d      	ldr	r3, [pc, #52]	; (e04 <stdio_serial_init+0x48>)
     dd0:	4a0d      	ldr	r2, [pc, #52]	; (e08 <stdio_serial_init+0x4c>)
     dd2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     dd4:	4b0d      	ldr	r3, [pc, #52]	; (e0c <stdio_serial_init+0x50>)
     dd6:	4a0e      	ldr	r2, [pc, #56]	; (e10 <stdio_serial_init+0x54>)
     dd8:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     dda:	4b0e      	ldr	r3, [pc, #56]	; (e14 <stdio_serial_init+0x58>)
     ddc:	681b      	ldr	r3, [r3, #0]
     dde:	689b      	ldr	r3, [r3, #8]
     de0:	2100      	movs	r1, #0
     de2:	0018      	movs	r0, r3
     de4:	4b0c      	ldr	r3, [pc, #48]	; (e18 <stdio_serial_init+0x5c>)
     de6:	4798      	blx	r3
	setbuf(stdin, NULL);
     de8:	4b0a      	ldr	r3, [pc, #40]	; (e14 <stdio_serial_init+0x58>)
     dea:	681b      	ldr	r3, [r3, #0]
     dec:	685b      	ldr	r3, [r3, #4]
     dee:	2100      	movs	r1, #0
     df0:	0018      	movs	r0, r3
     df2:	4b09      	ldr	r3, [pc, #36]	; (e18 <stdio_serial_init+0x5c>)
     df4:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	46bd      	mov	sp, r7
     dfa:	b004      	add	sp, #16
     dfc:	bd80      	pop	{r7, pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	200009f8 	.word	0x200009f8
     e04:	200009f4 	.word	0x200009f4
     e08:	00000d49 	.word	0x00000d49
     e0c:	200009f0 	.word	0x200009f0
     e10:	00000d7d 	.word	0x00000d7d
     e14:	20000030 	.word	0x20000030
     e18:	0000bfd9 	.word	0x0000bfd9

00000e1c <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 *****************************************************************************/
void InitializeSerialConsole() {
     e1c:	b580      	push	{r7, lr}
     e1e:	af00      	add	r7, sp, #0

    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
     e20:	2380      	movs	r3, #128	; 0x80
     e22:	00da      	lsls	r2, r3, #3
     e24:	4b0f      	ldr	r3, [pc, #60]	; (e64 <InitializeSerialConsole+0x48>)
     e26:	0011      	movs	r1, r2
     e28:	0018      	movs	r0, r3
     e2a:	4b0f      	ldr	r3, [pc, #60]	; (e68 <InitializeSerialConsole+0x4c>)
     e2c:	4798      	blx	r3
     e2e:	0002      	movs	r2, r0
     e30:	4b0e      	ldr	r3, [pc, #56]	; (e6c <InitializeSerialConsole+0x50>)
     e32:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, TX_BUFFER_SIZE);
     e34:	2380      	movs	r3, #128	; 0x80
     e36:	00da      	lsls	r2, r3, #3
     e38:	4b0d      	ldr	r3, [pc, #52]	; (e70 <InitializeSerialConsole+0x54>)
     e3a:	0011      	movs	r1, r2
     e3c:	0018      	movs	r0, r3
     e3e:	4b0a      	ldr	r3, [pc, #40]	; (e68 <InitializeSerialConsole+0x4c>)
     e40:	4798      	blx	r3
     e42:	0002      	movs	r2, r0
     e44:	4b0b      	ldr	r3, [pc, #44]	; (e74 <InitializeSerialConsole+0x58>)
     e46:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
     e48:	4b0b      	ldr	r3, [pc, #44]	; (e78 <InitializeSerialConsole+0x5c>)
     e4a:	4798      	blx	r3
    configure_usart_callbacks();
     e4c:	4b0b      	ldr	r3, [pc, #44]	; (e7c <InitializeSerialConsole+0x60>)
     e4e:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
     e50:	490b      	ldr	r1, [pc, #44]	; (e80 <InitializeSerialConsole+0x64>)
     e52:	4b0c      	ldr	r3, [pc, #48]	; (e84 <InitializeSerialConsole+0x68>)
     e54:	2201      	movs	r2, #1
     e56:	0018      	movs	r0, r3
     e58:	4b0b      	ldr	r3, [pc, #44]	; (e88 <InitializeSerialConsole+0x6c>)
     e5a:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
     e5c:	46c0      	nop			; (mov r8, r8)
     e5e:	46bd      	mov	sp, r7
     e60:	bd80      	pop	{r7, pc}
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	200005c8 	.word	0x200005c8
     e68:	000009fd 	.word	0x000009fd
     e6c:	200001c0 	.word	0x200001c0
     e70:	200001c8 	.word	0x200001c8
     e74:	200009cc 	.word	0x200009cc
     e78:	00000f51 	.word	0x00000f51
     e7c:	00000fd9 	.word	0x00000fd9
     e80:	200001c4 	.word	0x200001c4
     e84:	2000018c 	.word	0x2000018c
     e88:	00005935 	.word	0x00005935

00000e8c <DeinitializeSerialConsole>:

/**
 * @fn			void DeinitializeSerialConsole(void)
 *****************************************************************************/
void DeinitializeSerialConsole() { usart_disable(&usart_instance); }
     e8c:	b580      	push	{r7, lr}
     e8e:	af00      	add	r7, sp, #0
     e90:	4b03      	ldr	r3, [pc, #12]	; (ea0 <DeinitializeSerialConsole+0x14>)
     e92:	0018      	movs	r0, r3
     e94:	4b03      	ldr	r3, [pc, #12]	; (ea4 <DeinitializeSerialConsole+0x18>)
     e96:	4798      	blx	r3
     e98:	46c0      	nop			; (mov r8, r8)
     e9a:	46bd      	mov	sp, r7
     e9c:	bd80      	pop	{r7, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	2000018c 	.word	0x2000018c
     ea4:	00000cc5 	.word	0x00000cc5

00000ea8 <SerialConsoleWriteString>:
 * @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the
 *				text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @note		Use to send a string of characters to the user via UART
 *****************************************************************************/
void SerialConsoleWriteString(char *string) {
     ea8:	b580      	push	{r7, lr}
     eaa:	b084      	sub	sp, #16
     eac:	af00      	add	r7, sp, #0
     eae:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
     eb0:	687b      	ldr	r3, [r7, #4]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d02a      	beq.n	f0c <SerialConsoleWriteString+0x64>
        for (size_t iter = 0; iter < strlen(string); iter++) {
     eb6:	2300      	movs	r3, #0
     eb8:	60fb      	str	r3, [r7, #12]
     eba:	e00b      	b.n	ed4 <SerialConsoleWriteString+0x2c>
            circular_buf_put(cbufTx, string[iter]);
     ebc:	4b15      	ldr	r3, [pc, #84]	; (f14 <SerialConsoleWriteString+0x6c>)
     ebe:	6818      	ldr	r0, [r3, #0]
     ec0:	687a      	ldr	r2, [r7, #4]
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	18d3      	adds	r3, r2, r3
     ec6:	781b      	ldrb	r3, [r3, #0]
     ec8:	0019      	movs	r1, r3
     eca:	4b13      	ldr	r3, [pc, #76]	; (f18 <SerialConsoleWriteString+0x70>)
     ecc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
     ece:	68fb      	ldr	r3, [r7, #12]
     ed0:	3301      	adds	r3, #1
     ed2:	60fb      	str	r3, [r7, #12]
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	0018      	movs	r0, r3
     ed8:	4b10      	ldr	r3, [pc, #64]	; (f1c <SerialConsoleWriteString+0x74>)
     eda:	4798      	blx	r3
     edc:	0002      	movs	r2, r0
     ede:	68fb      	ldr	r3, [r7, #12]
     ee0:	429a      	cmp	r2, r3
     ee2:	d8eb      	bhi.n	ebc <SerialConsoleWriteString+0x14>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
     ee4:	4b0e      	ldr	r3, [pc, #56]	; (f20 <SerialConsoleWriteString+0x78>)
     ee6:	2101      	movs	r1, #1
     ee8:	0018      	movs	r0, r3
     eea:	4b0e      	ldr	r3, [pc, #56]	; (f24 <SerialConsoleWriteString+0x7c>)
     eec:	4798      	blx	r3
     eee:	1e03      	subs	r3, r0, #0
     ef0:	d10c      	bne.n	f0c <SerialConsoleWriteString+0x64>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
     ef2:	4b08      	ldr	r3, [pc, #32]	; (f14 <SerialConsoleWriteString+0x6c>)
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	4a0c      	ldr	r2, [pc, #48]	; (f28 <SerialConsoleWriteString+0x80>)
     ef8:	0011      	movs	r1, r2
     efa:	0018      	movs	r0, r3
     efc:	4b0b      	ldr	r3, [pc, #44]	; (f2c <SerialConsoleWriteString+0x84>)
     efe:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
     f00:	4909      	ldr	r1, [pc, #36]	; (f28 <SerialConsoleWriteString+0x80>)
     f02:	4b07      	ldr	r3, [pc, #28]	; (f20 <SerialConsoleWriteString+0x78>)
     f04:	2201      	movs	r2, #1
     f06:	0018      	movs	r0, r3
     f08:	4b09      	ldr	r3, [pc, #36]	; (f30 <SerialConsoleWriteString+0x88>)
     f0a:	4798      	blx	r3
        }
    }
}
     f0c:	46c0      	nop			; (mov r8, r8)
     f0e:	46bd      	mov	sp, r7
     f10:	b004      	add	sp, #16
     f12:	bd80      	pop	{r7, pc}
     f14:	200009cc 	.word	0x200009cc
     f18:	00000a5d 	.word	0x00000a5d
     f1c:	0000c189 	.word	0x0000c189
     f20:	2000018c 	.word	0x2000018c
     f24:	0000597d 	.word	0x0000597d
     f28:	200009c8 	.word	0x200009c8
     f2c:	00000a91 	.word	0x00000a91
     f30:	000058ed 	.word	0x000058ed

00000f34 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 *****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...){};
     f34:	b40e      	push	{r1, r2, r3}
     f36:	b580      	push	{r7, lr}
     f38:	b083      	sub	sp, #12
     f3a:	af00      	add	r7, sp, #0
     f3c:	0002      	movs	r2, r0
     f3e:	1dfb      	adds	r3, r7, #7
     f40:	701a      	strb	r2, [r3, #0]
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	46bd      	mov	sp, r7
     f46:	b003      	add	sp, #12
     f48:	bc80      	pop	{r7}
     f4a:	bc08      	pop	{r3}
     f4c:	b003      	add	sp, #12
     f4e:	4718      	bx	r3

00000f50 <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 *****************************************************************************/
static void configure_usart(void) {
     f50:	b580      	push	{r7, lr}
     f52:	b090      	sub	sp, #64	; 0x40
     f54:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
     f56:	003b      	movs	r3, r7
     f58:	0018      	movs	r0, r3
     f5a:	4b17      	ldr	r3, [pc, #92]	; (fb8 <configure_usart+0x68>)
     f5c:	4798      	blx	r3

    config_usart.baudrate = 115200;
     f5e:	003b      	movs	r3, r7
     f60:	22e1      	movs	r2, #225	; 0xe1
     f62:	0252      	lsls	r2, r2, #9
     f64:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     f66:	003b      	movs	r3, r7
     f68:	22c4      	movs	r2, #196	; 0xc4
     f6a:	0392      	lsls	r2, r2, #14
     f6c:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     f6e:	003b      	movs	r3, r7
     f70:	2201      	movs	r2, #1
     f72:	4252      	negs	r2, r2
     f74:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     f76:	003b      	movs	r3, r7
     f78:	2201      	movs	r2, #1
     f7a:	4252      	negs	r2, r2
     f7c:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     f7e:	003b      	movs	r3, r7
     f80:	4a0e      	ldr	r2, [pc, #56]	; (fbc <configure_usart+0x6c>)
     f82:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     f84:	003b      	movs	r3, r7
     f86:	4a0e      	ldr	r2, [pc, #56]	; (fc0 <configure_usart+0x70>)
     f88:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	003a      	movs	r2, r7
     f8e:	490d      	ldr	r1, [pc, #52]	; (fc4 <configure_usart+0x74>)
     f90:	4b0d      	ldr	r3, [pc, #52]	; (fc8 <configure_usart+0x78>)
     f92:	0018      	movs	r0, r3
     f94:	4b0d      	ldr	r3, [pc, #52]	; (fcc <configure_usart+0x7c>)
     f96:	4798      	blx	r3
     f98:	1e03      	subs	r3, r0, #0
     f9a:	d1f7      	bne.n	f8c <configure_usart+0x3c>
    }
    stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
     f9c:	003a      	movs	r2, r7
     f9e:	4909      	ldr	r1, [pc, #36]	; (fc4 <configure_usart+0x74>)
     fa0:	4b09      	ldr	r3, [pc, #36]	; (fc8 <configure_usart+0x78>)
     fa2:	0018      	movs	r0, r3
     fa4:	4b0a      	ldr	r3, [pc, #40]	; (fd0 <configure_usart+0x80>)
     fa6:	4798      	blx	r3
    usart_enable(&usart_instance);
     fa8:	4b07      	ldr	r3, [pc, #28]	; (fc8 <configure_usart+0x78>)
     faa:	0018      	movs	r0, r3
     fac:	4b09      	ldr	r3, [pc, #36]	; (fd4 <configure_usart+0x84>)
     fae:	4798      	blx	r3
}
     fb0:	46c0      	nop			; (mov r8, r8)
     fb2:	46bd      	mov	sp, r7
     fb4:	b010      	add	sp, #64	; 0x40
     fb6:	bd80      	pop	{r7, pc}
     fb8:	00000bbd 	.word	0x00000bbd
     fbc:	002a0003 	.word	0x002a0003
     fc0:	002b0003 	.word	0x002b0003
     fc4:	42001800 	.word	0x42001800
     fc8:	2000018c 	.word	0x2000018c
     fcc:	000053a1 	.word	0x000053a1
     fd0:	00000dbd 	.word	0x00000dbd
     fd4:	00000c7d 	.word	0x00000c7d

00000fd8 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 *****************************************************************************/
static void configure_usart_callbacks(void) {
     fd8:	b580      	push	{r7, lr}
     fda:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     fdc:	490c      	ldr	r1, [pc, #48]	; (1010 <configure_usart_callbacks+0x38>)
     fde:	4b0d      	ldr	r3, [pc, #52]	; (1014 <configure_usart_callbacks+0x3c>)
     fe0:	2200      	movs	r2, #0
     fe2:	0018      	movs	r0, r3
     fe4:	4b0c      	ldr	r3, [pc, #48]	; (1018 <configure_usart_callbacks+0x40>)
     fe6:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     fe8:	490c      	ldr	r1, [pc, #48]	; (101c <configure_usart_callbacks+0x44>)
     fea:	4b0a      	ldr	r3, [pc, #40]	; (1014 <configure_usart_callbacks+0x3c>)
     fec:	2201      	movs	r2, #1
     fee:	0018      	movs	r0, r3
     ff0:	4b09      	ldr	r3, [pc, #36]	; (1018 <configure_usart_callbacks+0x40>)
     ff2:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     ff4:	4b07      	ldr	r3, [pc, #28]	; (1014 <configure_usart_callbacks+0x3c>)
     ff6:	2100      	movs	r1, #0
     ff8:	0018      	movs	r0, r3
     ffa:	4b09      	ldr	r3, [pc, #36]	; (1020 <configure_usart_callbacks+0x48>)
     ffc:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     ffe:	4b05      	ldr	r3, [pc, #20]	; (1014 <configure_usart_callbacks+0x3c>)
    1000:	2101      	movs	r1, #1
    1002:	0018      	movs	r0, r3
    1004:	4b06      	ldr	r3, [pc, #24]	; (1020 <configure_usart_callbacks+0x48>)
    1006:	4798      	blx	r3
}
    1008:	46c0      	nop			; (mov r8, r8)
    100a:	46bd      	mov	sp, r7
    100c:	bd80      	pop	{r7, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	00001035 	.word	0x00001035
    1014:	2000018c 	.word	0x2000018c
    1018:	000058a5 	.word	0x000058a5
    101c:	00001025 	.word	0x00001025
    1020:	00000d11 	.word	0x00000d11

00001024 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module) {}
    1024:	b580      	push	{r7, lr}
    1026:	b082      	sub	sp, #8
    1028:	af00      	add	r7, sp, #0
    102a:	6078      	str	r0, [r7, #4]
    102c:	46c0      	nop			; (mov r8, r8)
    102e:	46bd      	mov	sp, r7
    1030:	b002      	add	sp, #8
    1032:	bd80      	pop	{r7, pc}

00001034 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module) {
    1034:	b580      	push	{r7, lr}
    1036:	b082      	sub	sp, #8
    1038:	af00      	add	r7, sp, #0
    103a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
    103c:	4b09      	ldr	r3, [pc, #36]	; (1064 <usart_write_callback+0x30>)
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	4a09      	ldr	r2, [pc, #36]	; (1068 <usart_write_callback+0x34>)
    1042:	0011      	movs	r1, r2
    1044:	0018      	movs	r0, r3
    1046:	4b09      	ldr	r3, [pc, #36]	; (106c <usart_write_callback+0x38>)
    1048:	4798      	blx	r3
    104a:	0003      	movs	r3, r0
    104c:	3301      	adds	r3, #1
    104e:	d005      	beq.n	105c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    1050:	4905      	ldr	r1, [pc, #20]	; (1068 <usart_write_callback+0x34>)
    1052:	4b07      	ldr	r3, [pc, #28]	; (1070 <usart_write_callback+0x3c>)
    1054:	2201      	movs	r2, #1
    1056:	0018      	movs	r0, r3
    1058:	4b06      	ldr	r3, [pc, #24]	; (1074 <usart_write_callback+0x40>)
    105a:	4798      	blx	r3
    }
}
    105c:	46c0      	nop			; (mov r8, r8)
    105e:	46bd      	mov	sp, r7
    1060:	b002      	add	sp, #8
    1062:	bd80      	pop	{r7, pc}
    1064:	200009cc 	.word	0x200009cc
    1068:	200009c8 	.word	0x200009c8
    106c:	00000a91 	.word	0x00000a91
    1070:	2000018c 	.word	0x2000018c
    1074:	000058ed 	.word	0x000058ed

00001078 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    1078:	b590      	push	{r4, r7, lr}
    107a:	b087      	sub	sp, #28
    107c:	af00      	add	r7, sp, #0
    107e:	60f8      	str	r0, [r7, #12]
    1080:	000c      	movs	r4, r1
    1082:	0010      	movs	r0, r2
    1084:	0019      	movs	r1, r3
    1086:	230a      	movs	r3, #10
    1088:	18fb      	adds	r3, r7, r3
    108a:	1c22      	adds	r2, r4, #0
    108c:	801a      	strh	r2, [r3, #0]
    108e:	2308      	movs	r3, #8
    1090:	18fb      	adds	r3, r7, r3
    1092:	1c02      	adds	r2, r0, #0
    1094:	801a      	strh	r2, [r3, #0]
    1096:	1dfb      	adds	r3, r7, #7
    1098:	1c0a      	adds	r2, r1, #0
    109a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    109c:	230a      	movs	r3, #10
    109e:	18fb      	adds	r3, r7, r3
    10a0:	881a      	ldrh	r2, [r3, #0]
    10a2:	2308      	movs	r3, #8
    10a4:	18fb      	adds	r3, r7, r3
    10a6:	881b      	ldrh	r3, [r3, #0]
    10a8:	1ad3      	subs	r3, r2, r3
    10aa:	3307      	adds	r3, #7
    10ac:	2b00      	cmp	r3, #0
    10ae:	da00      	bge.n	10b2 <SDMMC_UNSTUFF_BITS+0x3a>
    10b0:	3307      	adds	r3, #7
    10b2:	10db      	asrs	r3, r3, #3
    10b4:	3b01      	subs	r3, #1
    10b6:	68fa      	ldr	r2, [r7, #12]
    10b8:	18d3      	adds	r3, r2, r3
    10ba:	781b      	ldrb	r3, [r3, #0]
    10bc:	0019      	movs	r1, r3
    10be:	2308      	movs	r3, #8
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	881b      	ldrh	r3, [r3, #0]
    10c4:	2207      	movs	r2, #7
    10c6:	4013      	ands	r3, r2
    10c8:	4119      	asrs	r1, r3
    10ca:	000b      	movs	r3, r1
    10cc:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    10ce:	2308      	movs	r3, #8
    10d0:	18fb      	adds	r3, r7, r3
    10d2:	881b      	ldrh	r3, [r3, #0]
    10d4:	2207      	movs	r2, #7
    10d6:	401a      	ands	r2, r3
    10d8:	1dfb      	adds	r3, r7, #7
    10da:	781b      	ldrb	r3, [r3, #0]
    10dc:	18d3      	adds	r3, r2, r3
    10de:	2b08      	cmp	r3, #8
    10e0:	dd1c      	ble.n	111c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    10e2:	230a      	movs	r3, #10
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	881a      	ldrh	r2, [r3, #0]
    10e8:	2308      	movs	r3, #8
    10ea:	18fb      	adds	r3, r7, r3
    10ec:	881b      	ldrh	r3, [r3, #0]
    10ee:	1ad3      	subs	r3, r2, r3
    10f0:	3307      	adds	r3, #7
    10f2:	2b00      	cmp	r3, #0
    10f4:	da00      	bge.n	10f8 <SDMMC_UNSTUFF_BITS+0x80>
    10f6:	3307      	adds	r3, #7
    10f8:	10db      	asrs	r3, r3, #3
    10fa:	3b02      	subs	r3, #2
    10fc:	68fa      	ldr	r2, [r7, #12]
    10fe:	18d3      	adds	r3, r2, r3
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	0019      	movs	r1, r3
    1104:	2308      	movs	r3, #8
    1106:	18fb      	adds	r3, r7, r3
    1108:	881b      	ldrh	r3, [r3, #0]
    110a:	2207      	movs	r2, #7
    110c:	4013      	ands	r3, r2
    110e:	2208      	movs	r2, #8
    1110:	1ad3      	subs	r3, r2, r3
    1112:	4099      	lsls	r1, r3
    1114:	000b      	movs	r3, r1
    1116:	697a      	ldr	r2, [r7, #20]
    1118:	4313      	orrs	r3, r2
    111a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    111c:	2308      	movs	r3, #8
    111e:	18fb      	adds	r3, r7, r3
    1120:	881b      	ldrh	r3, [r3, #0]
    1122:	2207      	movs	r2, #7
    1124:	401a      	ands	r2, r3
    1126:	1dfb      	adds	r3, r7, #7
    1128:	781b      	ldrb	r3, [r3, #0]
    112a:	18d3      	adds	r3, r2, r3
    112c:	2b10      	cmp	r3, #16
    112e:	dd1c      	ble.n	116a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1130:	230a      	movs	r3, #10
    1132:	18fb      	adds	r3, r7, r3
    1134:	881a      	ldrh	r2, [r3, #0]
    1136:	2308      	movs	r3, #8
    1138:	18fb      	adds	r3, r7, r3
    113a:	881b      	ldrh	r3, [r3, #0]
    113c:	1ad3      	subs	r3, r2, r3
    113e:	3307      	adds	r3, #7
    1140:	2b00      	cmp	r3, #0
    1142:	da00      	bge.n	1146 <SDMMC_UNSTUFF_BITS+0xce>
    1144:	3307      	adds	r3, #7
    1146:	10db      	asrs	r3, r3, #3
    1148:	3b03      	subs	r3, #3
    114a:	68fa      	ldr	r2, [r7, #12]
    114c:	18d3      	adds	r3, r2, r3
    114e:	781b      	ldrb	r3, [r3, #0]
    1150:	0019      	movs	r1, r3
    1152:	2308      	movs	r3, #8
    1154:	18fb      	adds	r3, r7, r3
    1156:	881b      	ldrh	r3, [r3, #0]
    1158:	2207      	movs	r2, #7
    115a:	4013      	ands	r3, r2
    115c:	2210      	movs	r2, #16
    115e:	1ad3      	subs	r3, r2, r3
    1160:	4099      	lsls	r1, r3
    1162:	000b      	movs	r3, r1
    1164:	697a      	ldr	r2, [r7, #20]
    1166:	4313      	orrs	r3, r2
    1168:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    116a:	2308      	movs	r3, #8
    116c:	18fb      	adds	r3, r7, r3
    116e:	881b      	ldrh	r3, [r3, #0]
    1170:	2207      	movs	r2, #7
    1172:	401a      	ands	r2, r3
    1174:	1dfb      	adds	r3, r7, #7
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	18d3      	adds	r3, r2, r3
    117a:	2b10      	cmp	r3, #16
    117c:	dd1c      	ble.n	11b8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    117e:	230a      	movs	r3, #10
    1180:	18fb      	adds	r3, r7, r3
    1182:	881a      	ldrh	r2, [r3, #0]
    1184:	2308      	movs	r3, #8
    1186:	18fb      	adds	r3, r7, r3
    1188:	881b      	ldrh	r3, [r3, #0]
    118a:	1ad3      	subs	r3, r2, r3
    118c:	3307      	adds	r3, #7
    118e:	2b00      	cmp	r3, #0
    1190:	da00      	bge.n	1194 <SDMMC_UNSTUFF_BITS+0x11c>
    1192:	3307      	adds	r3, #7
    1194:	10db      	asrs	r3, r3, #3
    1196:	3b03      	subs	r3, #3
    1198:	68fa      	ldr	r2, [r7, #12]
    119a:	18d3      	adds	r3, r2, r3
    119c:	781b      	ldrb	r3, [r3, #0]
    119e:	0019      	movs	r1, r3
    11a0:	2308      	movs	r3, #8
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	881b      	ldrh	r3, [r3, #0]
    11a6:	2207      	movs	r2, #7
    11a8:	4013      	ands	r3, r2
    11aa:	2210      	movs	r2, #16
    11ac:	1ad3      	subs	r3, r2, r3
    11ae:	4099      	lsls	r1, r3
    11b0:	000b      	movs	r3, r1
    11b2:	697a      	ldr	r2, [r7, #20]
    11b4:	4313      	orrs	r3, r2
    11b6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    11b8:	1dfb      	adds	r3, r7, #7
    11ba:	781b      	ldrb	r3, [r3, #0]
    11bc:	2201      	movs	r2, #1
    11be:	409a      	lsls	r2, r3
    11c0:	0013      	movs	r3, r2
    11c2:	1e5a      	subs	r2, r3, #1
    11c4:	697b      	ldr	r3, [r7, #20]
    11c6:	4013      	ands	r3, r2
    11c8:	617b      	str	r3, [r7, #20]
	return value;
    11ca:	697b      	ldr	r3, [r7, #20]
}
    11cc:	0018      	movs	r0, r3
    11ce:	46bd      	mov	sp, r7
    11d0:	b007      	add	sp, #28
    11d2:	bd90      	pop	{r4, r7, pc}

000011d4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    11da:	4b23      	ldr	r3, [pc, #140]	; (1268 <mmc_spi_op_cond+0x94>)
    11dc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    11de:	4b23      	ldr	r3, [pc, #140]	; (126c <mmc_spi_op_cond+0x98>)
    11e0:	2100      	movs	r1, #0
    11e2:	0018      	movs	r0, r3
    11e4:	4b22      	ldr	r3, [pc, #136]	; (1270 <mmc_spi_op_cond+0x9c>)
    11e6:	4798      	blx	r3
    11e8:	0003      	movs	r3, r0
    11ea:	001a      	movs	r2, r3
    11ec:	2301      	movs	r3, #1
    11ee:	4053      	eors	r3, r2
    11f0:	b2db      	uxtb	r3, r3
    11f2:	2b00      	cmp	r3, #0
    11f4:	d001      	beq.n	11fa <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    11f6:	2300      	movs	r3, #0
    11f8:	e031      	b.n	125e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    11fa:	4b1e      	ldr	r3, [pc, #120]	; (1274 <mmc_spi_op_cond+0xa0>)
    11fc:	4798      	blx	r3
    11fe:	0003      	movs	r3, r0
    1200:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    1202:	683b      	ldr	r3, [r7, #0]
    1204:	2201      	movs	r2, #1
    1206:	4013      	ands	r3, r2
    1208:	d006      	beq.n	1218 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    120a:	687b      	ldr	r3, [r7, #4]
    120c:	1e5a      	subs	r2, r3, #1
    120e:	607a      	str	r2, [r7, #4]
    1210:	2b00      	cmp	r3, #0
    1212:	d1e4      	bne.n	11de <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    1214:	2300      	movs	r3, #0
    1216:	e022      	b.n	125e <mmc_spi_op_cond+0x8a>
			break;
    1218:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    121a:	4b17      	ldr	r3, [pc, #92]	; (1278 <mmc_spi_op_cond+0xa4>)
    121c:	2100      	movs	r1, #0
    121e:	0018      	movs	r0, r3
    1220:	4b13      	ldr	r3, [pc, #76]	; (1270 <mmc_spi_op_cond+0x9c>)
    1222:	4798      	blx	r3
    1224:	0003      	movs	r3, r0
    1226:	001a      	movs	r2, r3
    1228:	2301      	movs	r3, #1
    122a:	4053      	eors	r3, r2
    122c:	b2db      	uxtb	r3, r3
    122e:	2b00      	cmp	r3, #0
    1230:	d001      	beq.n	1236 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1232:	2300      	movs	r3, #0
    1234:	e013      	b.n	125e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    1236:	4b0f      	ldr	r3, [pc, #60]	; (1274 <mmc_spi_op_cond+0xa0>)
    1238:	4798      	blx	r3
    123a:	0002      	movs	r2, r0
    123c:	23c0      	movs	r3, #192	; 0xc0
    123e:	05db      	lsls	r3, r3, #23
    1240:	401a      	ands	r2, r3
    1242:	2380      	movs	r3, #128	; 0x80
    1244:	05db      	lsls	r3, r3, #23
    1246:	429a      	cmp	r2, r3
    1248:	d108      	bne.n	125c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    124a:	4b0c      	ldr	r3, [pc, #48]	; (127c <mmc_spi_op_cond+0xa8>)
    124c:	681a      	ldr	r2, [r3, #0]
    124e:	4b0b      	ldr	r3, [pc, #44]	; (127c <mmc_spi_op_cond+0xa8>)
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	7adb      	ldrb	r3, [r3, #11]
    1254:	2108      	movs	r1, #8
    1256:	430b      	orrs	r3, r1
    1258:	b2db      	uxtb	r3, r3
    125a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    125c:	2301      	movs	r3, #1
}
    125e:	0018      	movs	r0, r3
    1260:	46bd      	mov	sp, r7
    1262:	b002      	add	sp, #8
    1264:	bd80      	pop	{r7, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	00001bee 	.word	0x00001bee
    126c:	00001101 	.word	0x00001101
    1270:	00002c6d 	.word	0x00002c6d
    1274:	00002ead 	.word	0x00002ead
    1278:	0000053a 	.word	0x0000053a
    127c:	200000e0 	.word	0x200000e0

00001280 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    1280:	b580      	push	{r7, lr}
    1282:	b086      	sub	sp, #24
    1284:	af00      	add	r7, sp, #0
    1286:	0002      	movs	r2, r0
    1288:	1dfb      	adds	r3, r7, #7
    128a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    128c:	4b2e      	ldr	r3, [pc, #184]	; (1348 <sd_spi_op_cond+0xc8>)
    128e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    1290:	4b2e      	ldr	r3, [pc, #184]	; (134c <sd_spi_op_cond+0xcc>)
    1292:	2100      	movs	r1, #0
    1294:	0018      	movs	r0, r3
    1296:	4b2e      	ldr	r3, [pc, #184]	; (1350 <sd_spi_op_cond+0xd0>)
    1298:	4798      	blx	r3
    129a:	0003      	movs	r3, r0
    129c:	001a      	movs	r2, r3
    129e:	2301      	movs	r3, #1
    12a0:	4053      	eors	r3, r2
    12a2:	b2db      	uxtb	r3, r3
    12a4:	2b00      	cmp	r3, #0
    12a6:	d001      	beq.n	12ac <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    12a8:	2300      	movs	r3, #0
    12aa:	e048      	b.n	133e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    12ac:	2300      	movs	r3, #0
    12ae:	617b      	str	r3, [r7, #20]
		if (v2) {
    12b0:	1dfb      	adds	r3, r7, #7
    12b2:	781b      	ldrb	r3, [r3, #0]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d004      	beq.n	12c2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    12b8:	697b      	ldr	r3, [r7, #20]
    12ba:	2280      	movs	r2, #128	; 0x80
    12bc:	05d2      	lsls	r2, r2, #23
    12be:	4313      	orrs	r3, r2
    12c0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    12c2:	697b      	ldr	r3, [r7, #20]
    12c4:	4a23      	ldr	r2, [pc, #140]	; (1354 <sd_spi_op_cond+0xd4>)
    12c6:	0019      	movs	r1, r3
    12c8:	0010      	movs	r0, r2
    12ca:	4b21      	ldr	r3, [pc, #132]	; (1350 <sd_spi_op_cond+0xd0>)
    12cc:	4798      	blx	r3
    12ce:	0003      	movs	r3, r0
    12d0:	001a      	movs	r2, r3
    12d2:	2301      	movs	r3, #1
    12d4:	4053      	eors	r3, r2
    12d6:	b2db      	uxtb	r3, r3
    12d8:	2b00      	cmp	r3, #0
    12da:	d001      	beq.n	12e0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    12dc:	2300      	movs	r3, #0
    12de:	e02e      	b.n	133e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    12e0:	4b1d      	ldr	r3, [pc, #116]	; (1358 <sd_spi_op_cond+0xd8>)
    12e2:	4798      	blx	r3
    12e4:	0003      	movs	r3, r0
    12e6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	2201      	movs	r2, #1
    12ec:	4013      	ands	r3, r2
    12ee:	d006      	beq.n	12fe <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    12f0:	693b      	ldr	r3, [r7, #16]
    12f2:	1e5a      	subs	r2, r3, #1
    12f4:	613a      	str	r2, [r7, #16]
    12f6:	2b00      	cmp	r3, #0
    12f8:	d1ca      	bne.n	1290 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    12fa:	2300      	movs	r3, #0
    12fc:	e01f      	b.n	133e <sd_spi_op_cond+0xbe>
			break;
    12fe:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    1300:	4b16      	ldr	r3, [pc, #88]	; (135c <sd_spi_op_cond+0xdc>)
    1302:	2100      	movs	r1, #0
    1304:	0018      	movs	r0, r3
    1306:	4b12      	ldr	r3, [pc, #72]	; (1350 <sd_spi_op_cond+0xd0>)
    1308:	4798      	blx	r3
    130a:	0003      	movs	r3, r0
    130c:	001a      	movs	r2, r3
    130e:	2301      	movs	r3, #1
    1310:	4053      	eors	r3, r2
    1312:	b2db      	uxtb	r3, r3
    1314:	2b00      	cmp	r3, #0
    1316:	d001      	beq.n	131c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1318:	2300      	movs	r3, #0
    131a:	e010      	b.n	133e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    131c:	4b0e      	ldr	r3, [pc, #56]	; (1358 <sd_spi_op_cond+0xd8>)
    131e:	4798      	blx	r3
    1320:	0002      	movs	r2, r0
    1322:	2380      	movs	r3, #128	; 0x80
    1324:	05db      	lsls	r3, r3, #23
    1326:	4013      	ands	r3, r2
    1328:	d008      	beq.n	133c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    132a:	4b0d      	ldr	r3, [pc, #52]	; (1360 <sd_spi_op_cond+0xe0>)
    132c:	681a      	ldr	r2, [r3, #0]
    132e:	4b0c      	ldr	r3, [pc, #48]	; (1360 <sd_spi_op_cond+0xe0>)
    1330:	681b      	ldr	r3, [r3, #0]
    1332:	7adb      	ldrb	r3, [r3, #11]
    1334:	2108      	movs	r1, #8
    1336:	430b      	orrs	r3, r1
    1338:	b2db      	uxtb	r3, r3
    133a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    133c:	2301      	movs	r3, #1
}
    133e:	0018      	movs	r0, r3
    1340:	46bd      	mov	sp, r7
    1342:	b006      	add	sp, #24
    1344:	bd80      	pop	{r7, pc}
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	00001bee 	.word	0x00001bee
    134c:	00001137 	.word	0x00001137
    1350:	00002c6d 	.word	0x00002c6d
    1354:	00001129 	.word	0x00001129
    1358:	00002ead 	.word	0x00002ead
    135c:	0000053a 	.word	0x0000053a
    1360:	200000e0 	.word	0x200000e0

00001364 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    1364:	b580      	push	{r7, lr}
    1366:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    1368:	2301      	movs	r3, #1
}
    136a:	0018      	movs	r0, r3
    136c:	46bd      	mov	sp, r7
    136e:	bd80      	pop	{r7, pc}

00001370 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    1370:	b580      	push	{r7, lr}
    1372:	b084      	sub	sp, #16
    1374:	af00      	add	r7, sp, #0
    1376:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	2200      	movs	r2, #0
    137c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    137e:	23d5      	movs	r3, #213	; 0xd5
    1380:	005b      	lsls	r3, r3, #1
    1382:	4a14      	ldr	r2, [pc, #80]	; (13d4 <sd_cmd8+0x64>)
    1384:	0019      	movs	r1, r3
    1386:	0010      	movs	r0, r2
    1388:	4b13      	ldr	r3, [pc, #76]	; (13d8 <sd_cmd8+0x68>)
    138a:	4798      	blx	r3
    138c:	0003      	movs	r3, r0
    138e:	001a      	movs	r2, r3
    1390:	2301      	movs	r3, #1
    1392:	4053      	eors	r3, r2
    1394:	b2db      	uxtb	r3, r3
    1396:	2b00      	cmp	r3, #0
    1398:	d001      	beq.n	139e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    139a:	2301      	movs	r3, #1
    139c:	e015      	b.n	13ca <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    139e:	4b0f      	ldr	r3, [pc, #60]	; (13dc <sd_cmd8+0x6c>)
    13a0:	4798      	blx	r3
    13a2:	0003      	movs	r3, r0
    13a4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    13a6:	68fb      	ldr	r3, [r7, #12]
    13a8:	3301      	adds	r3, #1
    13aa:	d101      	bne.n	13b0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    13ac:	2301      	movs	r3, #1
    13ae:	e00c      	b.n	13ca <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    13b0:	68fb      	ldr	r3, [r7, #12]
    13b2:	051b      	lsls	r3, r3, #20
    13b4:	0d1a      	lsrs	r2, r3, #20
    13b6:	23d5      	movs	r3, #213	; 0xd5
    13b8:	005b      	lsls	r3, r3, #1
    13ba:	429a      	cmp	r2, r3
    13bc:	d001      	beq.n	13c2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    13be:	2300      	movs	r3, #0
    13c0:	e003      	b.n	13ca <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	2201      	movs	r2, #1
    13c6:	701a      	strb	r2, [r3, #0]
	return true;
    13c8:	2301      	movs	r3, #1
}
    13ca:	0018      	movs	r0, r3
    13cc:	46bd      	mov	sp, r7
    13ce:	b004      	add	sp, #16
    13d0:	bd80      	pop	{r7, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	00005508 	.word	0x00005508
    13d8:	00002c6d 	.word	0x00002c6d
    13dc:	00002ead 	.word	0x00002ead

000013e0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    13e0:	b590      	push	{r4, r7, lr}
    13e2:	b089      	sub	sp, #36	; 0x24
    13e4:	af02      	add	r7, sp, #8
    13e6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    13e8:	2380      	movs	r3, #128	; 0x80
    13ea:	009a      	lsls	r2, r3, #2
    13ec:	4841      	ldr	r0, [pc, #260]	; (14f4 <mmc_cmd8+0x114>)
    13ee:	2300      	movs	r3, #0
    13f0:	9300      	str	r3, [sp, #0]
    13f2:	2301      	movs	r3, #1
    13f4:	2100      	movs	r1, #0
    13f6:	4c40      	ldr	r4, [pc, #256]	; (14f8 <mmc_cmd8+0x118>)
    13f8:	47a0      	blx	r4
    13fa:	0003      	movs	r3, r0
    13fc:	001a      	movs	r2, r3
    13fe:	2301      	movs	r3, #1
    1400:	4053      	eors	r3, r2
    1402:	b2db      	uxtb	r3, r3
    1404:	2b00      	cmp	r3, #0
    1406:	d001      	beq.n	140c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    1408:	2300      	movs	r3, #0
    140a:	e06e      	b.n	14ea <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    140c:	2316      	movs	r3, #22
    140e:	18fb      	adds	r3, r7, r3
    1410:	2200      	movs	r2, #0
    1412:	801a      	strh	r2, [r3, #0]
    1414:	e014      	b.n	1440 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    1416:	2310      	movs	r3, #16
    1418:	18fb      	adds	r3, r7, r3
    141a:	0018      	movs	r0, r3
    141c:	4b37      	ldr	r3, [pc, #220]	; (14fc <mmc_cmd8+0x11c>)
    141e:	4798      	blx	r3
    1420:	0003      	movs	r3, r0
    1422:	001a      	movs	r2, r3
    1424:	2301      	movs	r3, #1
    1426:	4053      	eors	r3, r2
    1428:	b2db      	uxtb	r3, r3
    142a:	2b00      	cmp	r3, #0
    142c:	d001      	beq.n	1432 <mmc_cmd8+0x52>
			return false;
    142e:	2300      	movs	r3, #0
    1430:	e05b      	b.n	14ea <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1432:	2316      	movs	r3, #22
    1434:	18fb      	adds	r3, r7, r3
    1436:	881a      	ldrh	r2, [r3, #0]
    1438:	2316      	movs	r3, #22
    143a:	18fb      	adds	r3, r7, r3
    143c:	3201      	adds	r2, #1
    143e:	801a      	strh	r2, [r3, #0]
    1440:	2316      	movs	r3, #22
    1442:	18fb      	adds	r3, r7, r3
    1444:	881b      	ldrh	r3, [r3, #0]
    1446:	2b31      	cmp	r3, #49	; 0x31
    1448:	d9e5      	bls.n	1416 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    144a:	693b      	ldr	r3, [r7, #16]
    144c:	b2db      	uxtb	r3, r3
    144e:	2202      	movs	r2, #2
    1450:	4013      	ands	r3, r2
    1452:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1458:	4b29      	ldr	r3, [pc, #164]	; (1500 <mmc_cmd8+0x120>)
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	330e      	adds	r3, #14
    145e:	0018      	movs	r0, r3
    1460:	230c      	movs	r3, #12
    1462:	223e      	movs	r2, #62	; 0x3e
    1464:	2180      	movs	r1, #128	; 0x80
    1466:	4c27      	ldr	r4, [pc, #156]	; (1504 <mmc_cmd8+0x124>)
    1468:	47a0      	blx	r4
    146a:	0002      	movs	r2, r0
    146c:	4b26      	ldr	r3, [pc, #152]	; (1508 <mmc_cmd8+0x128>)
    146e:	429a      	cmp	r2, r3
    1470:	d135      	bne.n	14de <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1472:	e014      	b.n	149e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    1474:	230c      	movs	r3, #12
    1476:	18fb      	adds	r3, r7, r3
    1478:	0018      	movs	r0, r3
    147a:	4b20      	ldr	r3, [pc, #128]	; (14fc <mmc_cmd8+0x11c>)
    147c:	4798      	blx	r3
    147e:	0003      	movs	r3, r0
    1480:	001a      	movs	r2, r3
    1482:	2301      	movs	r3, #1
    1484:	4053      	eors	r3, r2
    1486:	b2db      	uxtb	r3, r3
    1488:	2b00      	cmp	r3, #0
    148a:	d001      	beq.n	1490 <mmc_cmd8+0xb0>
				return false;
    148c:	2300      	movs	r3, #0
    148e:	e02c      	b.n	14ea <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1490:	2316      	movs	r3, #22
    1492:	18fb      	adds	r3, r7, r3
    1494:	881a      	ldrh	r2, [r3, #0]
    1496:	2316      	movs	r3, #22
    1498:	18fb      	adds	r3, r7, r3
    149a:	3201      	adds	r2, #1
    149c:	801a      	strh	r2, [r3, #0]
    149e:	2316      	movs	r3, #22
    14a0:	18fb      	adds	r3, r7, r3
    14a2:	881b      	ldrh	r3, [r3, #0]
    14a4:	2b35      	cmp	r3, #53	; 0x35
    14a6:	d9e5      	bls.n	1474 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    14a8:	4b15      	ldr	r3, [pc, #84]	; (1500 <mmc_cmd8+0x120>)
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	68fa      	ldr	r2, [r7, #12]
    14ae:	0852      	lsrs	r2, r2, #1
    14b0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    14b2:	e014      	b.n	14de <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    14b4:	230c      	movs	r3, #12
    14b6:	18fb      	adds	r3, r7, r3
    14b8:	0018      	movs	r0, r3
    14ba:	4b10      	ldr	r3, [pc, #64]	; (14fc <mmc_cmd8+0x11c>)
    14bc:	4798      	blx	r3
    14be:	0003      	movs	r3, r0
    14c0:	001a      	movs	r2, r3
    14c2:	2301      	movs	r3, #1
    14c4:	4053      	eors	r3, r2
    14c6:	b2db      	uxtb	r3, r3
    14c8:	2b00      	cmp	r3, #0
    14ca:	d001      	beq.n	14d0 <mmc_cmd8+0xf0>
			return false;
    14cc:	2300      	movs	r3, #0
    14ce:	e00c      	b.n	14ea <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    14d0:	2316      	movs	r3, #22
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	881a      	ldrh	r2, [r3, #0]
    14d6:	2316      	movs	r3, #22
    14d8:	18fb      	adds	r3, r7, r3
    14da:	3201      	adds	r2, #1
    14dc:	801a      	strh	r2, [r3, #0]
    14de:	2316      	movs	r3, #22
    14e0:	18fb      	adds	r3, r7, r3
    14e2:	881b      	ldrh	r3, [r3, #0]
    14e4:	2b7f      	cmp	r3, #127	; 0x7f
    14e6:	d9e5      	bls.n	14b4 <mmc_cmd8+0xd4>
		}
	}
	return true;
    14e8:	2301      	movs	r3, #1
}
    14ea:	0018      	movs	r0, r3
    14ec:	46bd      	mov	sp, r7
    14ee:	b007      	add	sp, #28
    14f0:	bd90      	pop	{r4, r7, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	00081108 	.word	0x00081108
    14f8:	00002c95 	.word	0x00002c95
    14fc:	00002ec1 	.word	0x00002ec1
    1500:	200000e0 	.word	0x200000e0
    1504:	00001079 	.word	0x00001079
    1508:	00000fff 	.word	0x00000fff

0000150c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    150c:	b590      	push	{r4, r7, lr}
    150e:	b083      	sub	sp, #12
    1510:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    1512:	4b15      	ldr	r3, [pc, #84]	; (1568 <sd_mmc_cmd9_spi+0x5c>)
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	891b      	ldrh	r3, [r3, #8]
    1518:	0419      	lsls	r1, r3, #16
    151a:	4814      	ldr	r0, [pc, #80]	; (156c <sd_mmc_cmd9_spi+0x60>)
    151c:	2301      	movs	r3, #1
    151e:	9300      	str	r3, [sp, #0]
    1520:	2301      	movs	r3, #1
    1522:	2210      	movs	r2, #16
    1524:	4c12      	ldr	r4, [pc, #72]	; (1570 <sd_mmc_cmd9_spi+0x64>)
    1526:	47a0      	blx	r4
    1528:	0003      	movs	r3, r0
    152a:	001a      	movs	r2, r3
    152c:	2301      	movs	r3, #1
    152e:	4053      	eors	r3, r2
    1530:	b2db      	uxtb	r3, r3
    1532:	2b00      	cmp	r3, #0
    1534:	d001      	beq.n	153a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    1536:	2300      	movs	r3, #0
    1538:	e012      	b.n	1560 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    153a:	4b0b      	ldr	r3, [pc, #44]	; (1568 <sd_mmc_cmd9_spi+0x5c>)
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	330e      	adds	r3, #14
    1540:	2101      	movs	r1, #1
    1542:	0018      	movs	r0, r3
    1544:	4b0b      	ldr	r3, [pc, #44]	; (1574 <sd_mmc_cmd9_spi+0x68>)
    1546:	4798      	blx	r3
    1548:	0003      	movs	r3, r0
    154a:	001a      	movs	r2, r3
    154c:	2301      	movs	r3, #1
    154e:	4053      	eors	r3, r2
    1550:	b2db      	uxtb	r3, r3
    1552:	2b00      	cmp	r3, #0
    1554:	d001      	beq.n	155a <sd_mmc_cmd9_spi+0x4e>
		return false;
    1556:	2300      	movs	r3, #0
    1558:	e002      	b.n	1560 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    155a:	4b07      	ldr	r3, [pc, #28]	; (1578 <sd_mmc_cmd9_spi+0x6c>)
    155c:	4798      	blx	r3
    155e:	0003      	movs	r3, r0
}
    1560:	0018      	movs	r0, r3
    1562:	46bd      	mov	sp, r7
    1564:	b001      	add	sp, #4
    1566:	bd90      	pop	{r4, r7, pc}
    1568:	200000e0 	.word	0x200000e0
    156c:	00081109 	.word	0x00081109
    1570:	00002c95 	.word	0x00002c95
    1574:	00002f65 	.word	0x00002f65
    1578:	00003009 	.word	0x00003009

0000157c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    157c:	b5b0      	push	{r4, r5, r7, lr}
    157e:	b084      	sub	sp, #16
    1580:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    1582:	4b45      	ldr	r3, [pc, #276]	; (1698 <mmc_decode_csd+0x11c>)
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	330e      	adds	r3, #14
    1588:	0018      	movs	r0, r3
    158a:	2304      	movs	r3, #4
    158c:	227a      	movs	r2, #122	; 0x7a
    158e:	2180      	movs	r1, #128	; 0x80
    1590:	4c42      	ldr	r4, [pc, #264]	; (169c <mmc_decode_csd+0x120>)
    1592:	47a0      	blx	r4
    1594:	0003      	movs	r3, r0
    1596:	2b02      	cmp	r3, #2
    1598:	d011      	beq.n	15be <mmc_decode_csd+0x42>
    159a:	d802      	bhi.n	15a2 <mmc_decode_csd+0x26>
    159c:	2b01      	cmp	r3, #1
    159e:	d009      	beq.n	15b4 <mmc_decode_csd+0x38>
    15a0:	e003      	b.n	15aa <mmc_decode_csd+0x2e>
    15a2:	2b03      	cmp	r3, #3
    15a4:	d010      	beq.n	15c8 <mmc_decode_csd+0x4c>
    15a6:	2b04      	cmp	r3, #4
    15a8:	d013      	beq.n	15d2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    15aa:	4b3b      	ldr	r3, [pc, #236]	; (1698 <mmc_decode_csd+0x11c>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	2212      	movs	r2, #18
    15b0:	731a      	strb	r2, [r3, #12]
		break;
    15b2:	e013      	b.n	15dc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    15b4:	4b38      	ldr	r3, [pc, #224]	; (1698 <mmc_decode_csd+0x11c>)
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	2214      	movs	r2, #20
    15ba:	731a      	strb	r2, [r3, #12]
		break;
    15bc:	e00e      	b.n	15dc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    15be:	4b36      	ldr	r3, [pc, #216]	; (1698 <mmc_decode_csd+0x11c>)
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	2222      	movs	r2, #34	; 0x22
    15c4:	731a      	strb	r2, [r3, #12]
		break;
    15c6:	e009      	b.n	15dc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    15c8:	4b33      	ldr	r3, [pc, #204]	; (1698 <mmc_decode_csd+0x11c>)
    15ca:	681b      	ldr	r3, [r3, #0]
    15cc:	2230      	movs	r2, #48	; 0x30
    15ce:	731a      	strb	r2, [r3, #12]
		break;
    15d0:	e004      	b.n	15dc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    15d2:	4b31      	ldr	r3, [pc, #196]	; (1698 <mmc_decode_csd+0x11c>)
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	2240      	movs	r2, #64	; 0x40
    15d8:	731a      	strb	r2, [r3, #12]
		break;
    15da:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    15dc:	4b2e      	ldr	r3, [pc, #184]	; (1698 <mmc_decode_csd+0x11c>)
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	330e      	adds	r3, #14
    15e2:	0018      	movs	r0, r3
    15e4:	2308      	movs	r3, #8
    15e6:	2260      	movs	r2, #96	; 0x60
    15e8:	2180      	movs	r1, #128	; 0x80
    15ea:	4c2c      	ldr	r4, [pc, #176]	; (169c <mmc_decode_csd+0x120>)
    15ec:	47a0      	blx	r4
    15ee:	0003      	movs	r3, r0
    15f0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    15f2:	68fb      	ldr	r3, [r7, #12]
    15f4:	2207      	movs	r2, #7
    15f6:	401a      	ands	r2, r3
    15f8:	4b29      	ldr	r3, [pc, #164]	; (16a0 <mmc_decode_csd+0x124>)
    15fa:	0092      	lsls	r2, r2, #2
    15fc:	58d3      	ldr	r3, [r2, r3]
    15fe:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    1600:	68fb      	ldr	r3, [r7, #12]
    1602:	08db      	lsrs	r3, r3, #3
    1604:	220f      	movs	r2, #15
    1606:	401a      	ands	r2, r3
    1608:	4b26      	ldr	r3, [pc, #152]	; (16a4 <mmc_decode_csd+0x128>)
    160a:	0092      	lsls	r2, r2, #2
    160c:	58d3      	ldr	r3, [r2, r3]
    160e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1610:	4b21      	ldr	r3, [pc, #132]	; (1698 <mmc_decode_csd+0x11c>)
    1612:	681b      	ldr	r3, [r3, #0]
    1614:	68ba      	ldr	r2, [r7, #8]
    1616:	6879      	ldr	r1, [r7, #4]
    1618:	434a      	muls	r2, r1
    161a:	21fa      	movs	r1, #250	; 0xfa
    161c:	0089      	lsls	r1, r1, #2
    161e:	434a      	muls	r2, r1
    1620:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    1622:	4b1d      	ldr	r3, [pc, #116]	; (1698 <mmc_decode_csd+0x11c>)
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	330e      	adds	r3, #14
    1628:	0018      	movs	r0, r3
    162a:	230c      	movs	r3, #12
    162c:	223e      	movs	r2, #62	; 0x3e
    162e:	2180      	movs	r1, #128	; 0x80
    1630:	4c1a      	ldr	r4, [pc, #104]	; (169c <mmc_decode_csd+0x120>)
    1632:	47a0      	blx	r4
    1634:	0002      	movs	r2, r0
    1636:	4b1c      	ldr	r3, [pc, #112]	; (16a8 <mmc_decode_csd+0x12c>)
    1638:	429a      	cmp	r2, r3
    163a:	d028      	beq.n	168e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    163c:	4b16      	ldr	r3, [pc, #88]	; (1698 <mmc_decode_csd+0x11c>)
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	330e      	adds	r3, #14
    1642:	0018      	movs	r0, r3
    1644:	230c      	movs	r3, #12
    1646:	223e      	movs	r2, #62	; 0x3e
    1648:	2180      	movs	r1, #128	; 0x80
    164a:	4c14      	ldr	r4, [pc, #80]	; (169c <mmc_decode_csd+0x120>)
    164c:	47a0      	blx	r4
    164e:	0003      	movs	r3, r0
    1650:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1652:	4b11      	ldr	r3, [pc, #68]	; (1698 <mmc_decode_csd+0x11c>)
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	330e      	adds	r3, #14
    1658:	0018      	movs	r0, r3
    165a:	2303      	movs	r3, #3
    165c:	222f      	movs	r2, #47	; 0x2f
    165e:	2180      	movs	r1, #128	; 0x80
    1660:	4d0e      	ldr	r5, [pc, #56]	; (169c <mmc_decode_csd+0x120>)
    1662:	47a8      	blx	r5
    1664:	0003      	movs	r3, r0
    1666:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1668:	409c      	lsls	r4, r3
    166a:	0023      	movs	r3, r4
    166c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    166e:	4b0a      	ldr	r3, [pc, #40]	; (1698 <mmc_decode_csd+0x11c>)
    1670:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1672:	4b09      	ldr	r3, [pc, #36]	; (1698 <mmc_decode_csd+0x11c>)
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	330e      	adds	r3, #14
    1678:	0018      	movs	r0, r3
    167a:	2304      	movs	r3, #4
    167c:	2250      	movs	r2, #80	; 0x50
    167e:	2180      	movs	r1, #128	; 0x80
    1680:	4d06      	ldr	r5, [pc, #24]	; (169c <mmc_decode_csd+0x120>)
    1682:	47a8      	blx	r5
    1684:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1686:	683b      	ldr	r3, [r7, #0]
    1688:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    168a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    168c:	6063      	str	r3, [r4, #4]
	}
}
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	46bd      	mov	sp, r7
    1692:	b004      	add	sp, #16
    1694:	bdb0      	pop	{r4, r5, r7, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	200000e0 	.word	0x200000e0
    169c:	00001079 	.word	0x00001079
    16a0:	0000cdec 	.word	0x0000cdec
    16a4:	0000ce48 	.word	0x0000ce48
    16a8:	00000fff 	.word	0x00000fff

000016ac <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    16ac:	b5b0      	push	{r4, r5, r7, lr}
    16ae:	b084      	sub	sp, #16
    16b0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    16b2:	4b35      	ldr	r3, [pc, #212]	; (1788 <sd_decode_csd+0xdc>)
    16b4:	681b      	ldr	r3, [r3, #0]
    16b6:	330e      	adds	r3, #14
    16b8:	0018      	movs	r0, r3
    16ba:	2308      	movs	r3, #8
    16bc:	2260      	movs	r2, #96	; 0x60
    16be:	2180      	movs	r1, #128	; 0x80
    16c0:	4c32      	ldr	r4, [pc, #200]	; (178c <sd_decode_csd+0xe0>)
    16c2:	47a0      	blx	r4
    16c4:	0003      	movs	r3, r0
    16c6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    16c8:	68fb      	ldr	r3, [r7, #12]
    16ca:	2207      	movs	r2, #7
    16cc:	401a      	ands	r2, r3
    16ce:	4b30      	ldr	r3, [pc, #192]	; (1790 <sd_decode_csd+0xe4>)
    16d0:	0092      	lsls	r2, r2, #2
    16d2:	58d3      	ldr	r3, [r2, r3]
    16d4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    16d6:	68fb      	ldr	r3, [r7, #12]
    16d8:	08db      	lsrs	r3, r3, #3
    16da:	220f      	movs	r2, #15
    16dc:	401a      	ands	r2, r3
    16de:	4b2d      	ldr	r3, [pc, #180]	; (1794 <sd_decode_csd+0xe8>)
    16e0:	0092      	lsls	r2, r2, #2
    16e2:	58d3      	ldr	r3, [r2, r3]
    16e4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    16e6:	4b28      	ldr	r3, [pc, #160]	; (1788 <sd_decode_csd+0xdc>)
    16e8:	681b      	ldr	r3, [r3, #0]
    16ea:	68ba      	ldr	r2, [r7, #8]
    16ec:	6879      	ldr	r1, [r7, #4]
    16ee:	434a      	muls	r2, r1
    16f0:	21fa      	movs	r1, #250	; 0xfa
    16f2:	0089      	lsls	r1, r1, #2
    16f4:	434a      	muls	r2, r1
    16f6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    16f8:	4b23      	ldr	r3, [pc, #140]	; (1788 <sd_decode_csd+0xdc>)
    16fa:	681b      	ldr	r3, [r3, #0]
    16fc:	330e      	adds	r3, #14
    16fe:	0018      	movs	r0, r3
    1700:	2302      	movs	r3, #2
    1702:	227e      	movs	r2, #126	; 0x7e
    1704:	2180      	movs	r1, #128	; 0x80
    1706:	4c21      	ldr	r4, [pc, #132]	; (178c <sd_decode_csd+0xe0>)
    1708:	47a0      	blx	r4
    170a:	1e03      	subs	r3, r0, #0
    170c:	d00f      	beq.n	172e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    170e:	4b1e      	ldr	r3, [pc, #120]	; (1788 <sd_decode_csd+0xdc>)
    1710:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    1712:	4b1d      	ldr	r3, [pc, #116]	; (1788 <sd_decode_csd+0xdc>)
    1714:	681b      	ldr	r3, [r3, #0]
    1716:	330e      	adds	r3, #14
    1718:	0018      	movs	r0, r3
    171a:	2316      	movs	r3, #22
    171c:	2230      	movs	r2, #48	; 0x30
    171e:	2180      	movs	r1, #128	; 0x80
    1720:	4d1a      	ldr	r5, [pc, #104]	; (178c <sd_decode_csd+0xe0>)
    1722:	47a8      	blx	r5
    1724:	0003      	movs	r3, r0
				* 512;
    1726:	3301      	adds	r3, #1
    1728:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    172a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    172c:	e028      	b.n	1780 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    172e:	4b16      	ldr	r3, [pc, #88]	; (1788 <sd_decode_csd+0xdc>)
    1730:	681b      	ldr	r3, [r3, #0]
    1732:	330e      	adds	r3, #14
    1734:	0018      	movs	r0, r3
    1736:	230c      	movs	r3, #12
    1738:	223e      	movs	r2, #62	; 0x3e
    173a:	2180      	movs	r1, #128	; 0x80
    173c:	4c13      	ldr	r4, [pc, #76]	; (178c <sd_decode_csd+0xe0>)
    173e:	47a0      	blx	r4
    1740:	0003      	movs	r3, r0
    1742:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1744:	4b10      	ldr	r3, [pc, #64]	; (1788 <sd_decode_csd+0xdc>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	330e      	adds	r3, #14
    174a:	0018      	movs	r0, r3
    174c:	2303      	movs	r3, #3
    174e:	222f      	movs	r2, #47	; 0x2f
    1750:	2180      	movs	r1, #128	; 0x80
    1752:	4d0e      	ldr	r5, [pc, #56]	; (178c <sd_decode_csd+0xe0>)
    1754:	47a8      	blx	r5
    1756:	0003      	movs	r3, r0
    1758:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    175a:	409c      	lsls	r4, r3
    175c:	0023      	movs	r3, r4
    175e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1760:	4b09      	ldr	r3, [pc, #36]	; (1788 <sd_decode_csd+0xdc>)
    1762:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    1764:	4b08      	ldr	r3, [pc, #32]	; (1788 <sd_decode_csd+0xdc>)
    1766:	681b      	ldr	r3, [r3, #0]
    1768:	330e      	adds	r3, #14
    176a:	0018      	movs	r0, r3
    176c:	2304      	movs	r3, #4
    176e:	2250      	movs	r2, #80	; 0x50
    1770:	2180      	movs	r1, #128	; 0x80
    1772:	4d06      	ldr	r5, [pc, #24]	; (178c <sd_decode_csd+0xe0>)
    1774:	47a8      	blx	r5
    1776:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1778:	683b      	ldr	r3, [r7, #0]
    177a:	4093      	lsls	r3, r2
				/ 1024;
    177c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    177e:	6063      	str	r3, [r4, #4]
}
    1780:	46c0      	nop			; (mov r8, r8)
    1782:	46bd      	mov	sp, r7
    1784:	b004      	add	sp, #16
    1786:	bdb0      	pop	{r4, r5, r7, pc}
    1788:	200000e0 	.word	0x200000e0
    178c:	00001079 	.word	0x00001079
    1790:	0000cdec 	.word	0x0000cdec
    1794:	0000ce08 	.word	0x0000ce08

00001798 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    1798:	b580      	push	{r7, lr}
    179a:	b082      	sub	sp, #8
    179c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    179e:	4b11      	ldr	r3, [pc, #68]	; (17e4 <sd_mmc_cmd13+0x4c>)
    17a0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    17a2:	4b11      	ldr	r3, [pc, #68]	; (17e8 <sd_mmc_cmd13+0x50>)
    17a4:	2100      	movs	r1, #0
    17a6:	0018      	movs	r0, r3
    17a8:	4b10      	ldr	r3, [pc, #64]	; (17ec <sd_mmc_cmd13+0x54>)
    17aa:	4798      	blx	r3
    17ac:	0003      	movs	r3, r0
    17ae:	001a      	movs	r2, r3
    17b0:	2301      	movs	r3, #1
    17b2:	4053      	eors	r3, r2
    17b4:	b2db      	uxtb	r3, r3
    17b6:	2b00      	cmp	r3, #0
    17b8:	d001      	beq.n	17be <sd_mmc_cmd13+0x26>
				return false;
    17ba:	2300      	movs	r3, #0
    17bc:	e00e      	b.n	17dc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    17be:	4b0c      	ldr	r3, [pc, #48]	; (17f0 <sd_mmc_cmd13+0x58>)
    17c0:	4798      	blx	r3
    17c2:	0002      	movs	r2, r0
    17c4:	23ff      	movs	r3, #255	; 0xff
    17c6:	4013      	ands	r3, r2
    17c8:	d006      	beq.n	17d8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    17ca:	687b      	ldr	r3, [r7, #4]
    17cc:	1e5a      	subs	r2, r3, #1
    17ce:	607a      	str	r2, [r7, #4]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d1e6      	bne.n	17a2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    17d4:	2300      	movs	r3, #0
    17d6:	e001      	b.n	17dc <sd_mmc_cmd13+0x44>
				break;
    17d8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    17da:	2301      	movs	r3, #1
}
    17dc:	0018      	movs	r0, r3
    17de:	46bd      	mov	sp, r7
    17e0:	b002      	add	sp, #8
    17e2:	bd80      	pop	{r7, pc}
    17e4:	00030d40 	.word	0x00030d40
    17e8:	00001b0d 	.word	0x00001b0d
    17ec:	00002c6d 	.word	0x00002c6d
    17f0:	00002ead 	.word	0x00002ead

000017f4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    17f4:	b590      	push	{r4, r7, lr}
    17f6:	b085      	sub	sp, #20
    17f8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    17fa:	4b38      	ldr	r3, [pc, #224]	; (18dc <sd_acmd51+0xe8>)
    17fc:	681b      	ldr	r3, [r3, #0]
    17fe:	891b      	ldrh	r3, [r3, #8]
    1800:	041b      	lsls	r3, r3, #16
    1802:	4a37      	ldr	r2, [pc, #220]	; (18e0 <sd_acmd51+0xec>)
    1804:	0019      	movs	r1, r3
    1806:	0010      	movs	r0, r2
    1808:	4b36      	ldr	r3, [pc, #216]	; (18e4 <sd_acmd51+0xf0>)
    180a:	4798      	blx	r3
    180c:	0003      	movs	r3, r0
    180e:	001a      	movs	r2, r3
    1810:	2301      	movs	r3, #1
    1812:	4053      	eors	r3, r2
    1814:	b2db      	uxtb	r3, r3
    1816:	2b00      	cmp	r3, #0
    1818:	d001      	beq.n	181e <sd_acmd51+0x2a>
		return false;
    181a:	2300      	movs	r3, #0
    181c:	e059      	b.n	18d2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    181e:	4832      	ldr	r0, [pc, #200]	; (18e8 <sd_acmd51+0xf4>)
    1820:	2301      	movs	r3, #1
    1822:	9300      	str	r3, [sp, #0]
    1824:	2301      	movs	r3, #1
    1826:	2208      	movs	r2, #8
    1828:	2100      	movs	r1, #0
    182a:	4c30      	ldr	r4, [pc, #192]	; (18ec <sd_acmd51+0xf8>)
    182c:	47a0      	blx	r4
    182e:	0003      	movs	r3, r0
    1830:	001a      	movs	r2, r3
    1832:	2301      	movs	r3, #1
    1834:	4053      	eors	r3, r2
    1836:	b2db      	uxtb	r3, r3
    1838:	2b00      	cmp	r3, #0
    183a:	d001      	beq.n	1840 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    183c:	2300      	movs	r3, #0
    183e:	e048      	b.n	18d2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1840:	003b      	movs	r3, r7
    1842:	2101      	movs	r1, #1
    1844:	0018      	movs	r0, r3
    1846:	4b2a      	ldr	r3, [pc, #168]	; (18f0 <sd_acmd51+0xfc>)
    1848:	4798      	blx	r3
    184a:	0003      	movs	r3, r0
    184c:	001a      	movs	r2, r3
    184e:	2301      	movs	r3, #1
    1850:	4053      	eors	r3, r2
    1852:	b2db      	uxtb	r3, r3
    1854:	2b00      	cmp	r3, #0
    1856:	d001      	beq.n	185c <sd_acmd51+0x68>
		return false;
    1858:	2300      	movs	r3, #0
    185a:	e03a      	b.n	18d2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    185c:	4b25      	ldr	r3, [pc, #148]	; (18f4 <sd_acmd51+0x100>)
    185e:	4798      	blx	r3
    1860:	0003      	movs	r3, r0
    1862:	001a      	movs	r2, r3
    1864:	2301      	movs	r3, #1
    1866:	4053      	eors	r3, r2
    1868:	b2db      	uxtb	r3, r3
    186a:	2b00      	cmp	r3, #0
    186c:	d001      	beq.n	1872 <sd_acmd51+0x7e>
		return false;
    186e:	2300      	movs	r3, #0
    1870:	e02f      	b.n	18d2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    1872:	0038      	movs	r0, r7
    1874:	2304      	movs	r3, #4
    1876:	2238      	movs	r2, #56	; 0x38
    1878:	2140      	movs	r1, #64	; 0x40
    187a:	4c1f      	ldr	r4, [pc, #124]	; (18f8 <sd_acmd51+0x104>)
    187c:	47a0      	blx	r4
    187e:	0003      	movs	r3, r0
    1880:	2b01      	cmp	r3, #1
    1882:	d008      	beq.n	1896 <sd_acmd51+0xa2>
    1884:	d302      	bcc.n	188c <sd_acmd51+0x98>
    1886:	2b02      	cmp	r3, #2
    1888:	d00a      	beq.n	18a0 <sd_acmd51+0xac>
    188a:	e01c      	b.n	18c6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    188c:	4b13      	ldr	r3, [pc, #76]	; (18dc <sd_acmd51+0xe8>)
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	2210      	movs	r2, #16
    1892:	731a      	strb	r2, [r3, #12]
		break;
    1894:	e01c      	b.n	18d0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    1896:	4b11      	ldr	r3, [pc, #68]	; (18dc <sd_acmd51+0xe8>)
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	221a      	movs	r2, #26
    189c:	731a      	strb	r2, [r3, #12]
		break;
    189e:	e017      	b.n	18d0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    18a0:	0038      	movs	r0, r7
    18a2:	2301      	movs	r3, #1
    18a4:	222f      	movs	r2, #47	; 0x2f
    18a6:	2140      	movs	r1, #64	; 0x40
    18a8:	4c13      	ldr	r4, [pc, #76]	; (18f8 <sd_acmd51+0x104>)
    18aa:	47a0      	blx	r4
    18ac:	0003      	movs	r3, r0
    18ae:	2b01      	cmp	r3, #1
    18b0:	d104      	bne.n	18bc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    18b2:	4b0a      	ldr	r3, [pc, #40]	; (18dc <sd_acmd51+0xe8>)
    18b4:	681b      	ldr	r3, [r3, #0]
    18b6:	2230      	movs	r2, #48	; 0x30
    18b8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    18ba:	e009      	b.n	18d0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    18bc:	4b07      	ldr	r3, [pc, #28]	; (18dc <sd_acmd51+0xe8>)
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	2220      	movs	r2, #32
    18c2:	731a      	strb	r2, [r3, #12]
		break;
    18c4:	e004      	b.n	18d0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    18c6:	4b05      	ldr	r3, [pc, #20]	; (18dc <sd_acmd51+0xe8>)
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	2210      	movs	r2, #16
    18cc:	731a      	strb	r2, [r3, #12]
		break;
    18ce:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    18d0:	2301      	movs	r3, #1
}
    18d2:	0018      	movs	r0, r3
    18d4:	46bd      	mov	sp, r7
    18d6:	b003      	add	sp, #12
    18d8:	bd90      	pop	{r4, r7, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	200000e0 	.word	0x200000e0
    18e0:	00001137 	.word	0x00001137
    18e4:	00002c6d 	.word	0x00002c6d
    18e8:	00081133 	.word	0x00081133
    18ec:	00002c95 	.word	0x00002c95
    18f0:	00002f65 	.word	0x00002f65
    18f4:	00003009 	.word	0x00003009
    18f8:	00001079 	.word	0x00001079

000018fc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b082      	sub	sp, #8
    1900:	af00      	add	r7, sp, #0
    1902:	0002      	movs	r2, r0
    1904:	1dfb      	adds	r3, r7, #7
    1906:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    1908:	1dfb      	adds	r3, r7, #7
    190a:	781b      	ldrb	r3, [r3, #0]
    190c:	2b00      	cmp	r3, #0
    190e:	d001      	beq.n	1914 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    1910:	2304      	movs	r3, #4
    1912:	e047      	b.n	19a4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    1914:	1dfb      	adds	r3, r7, #7
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	4a24      	ldr	r2, [pc, #144]	; (19ac <sd_mmc_select_slot+0xb0>)
    191a:	015b      	lsls	r3, r3, #5
    191c:	18d3      	adds	r3, r2, r3
    191e:	330a      	adds	r3, #10
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	2b04      	cmp	r3, #4
    1924:	d008      	beq.n	1938 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    1926:	1dfb      	adds	r3, r7, #7
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	4a20      	ldr	r2, [pc, #128]	; (19ac <sd_mmc_select_slot+0xb0>)
    192c:	015b      	lsls	r3, r3, #5
    192e:	18d3      	adds	r3, r2, r3
    1930:	330a      	adds	r3, #10
    1932:	781b      	ldrb	r3, [r3, #0]
    1934:	2b03      	cmp	r3, #3
    1936:	d11d      	bne.n	1974 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1938:	1dfb      	adds	r3, r7, #7
    193a:	781b      	ldrb	r3, [r3, #0]
    193c:	4a1b      	ldr	r2, [pc, #108]	; (19ac <sd_mmc_select_slot+0xb0>)
    193e:	015b      	lsls	r3, r3, #5
    1940:	18d3      	adds	r3, r2, r3
    1942:	330a      	adds	r3, #10
    1944:	2202      	movs	r2, #2
    1946:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1948:	1dfb      	adds	r3, r7, #7
    194a:	781a      	ldrb	r2, [r3, #0]
    194c:	4b17      	ldr	r3, [pc, #92]	; (19ac <sd_mmc_select_slot+0xb0>)
    194e:	0152      	lsls	r2, r2, #5
    1950:	4917      	ldr	r1, [pc, #92]	; (19b0 <sd_mmc_select_slot+0xb4>)
    1952:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1954:	1dfb      	adds	r3, r7, #7
    1956:	781b      	ldrb	r3, [r3, #0]
    1958:	4a14      	ldr	r2, [pc, #80]	; (19ac <sd_mmc_select_slot+0xb0>)
    195a:	015b      	lsls	r3, r3, #5
    195c:	18d3      	adds	r3, r2, r3
    195e:	330d      	adds	r3, #13
    1960:	2201      	movs	r2, #1
    1962:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1964:	1dfb      	adds	r3, r7, #7
    1966:	781b      	ldrb	r3, [r3, #0]
    1968:	4a10      	ldr	r2, [pc, #64]	; (19ac <sd_mmc_select_slot+0xb0>)
    196a:	015b      	lsls	r3, r3, #5
    196c:	18d3      	adds	r3, r2, r3
    196e:	331e      	adds	r3, #30
    1970:	2200      	movs	r2, #0
    1972:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1974:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <sd_mmc_select_slot+0xb8>)
    1976:	1dfa      	adds	r2, r7, #7
    1978:	7812      	ldrb	r2, [r2, #0]
    197a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    197c:	1dfb      	adds	r3, r7, #7
    197e:	781b      	ldrb	r3, [r3, #0]
    1980:	015a      	lsls	r2, r3, #5
    1982:	4b0a      	ldr	r3, [pc, #40]	; (19ac <sd_mmc_select_slot+0xb0>)
    1984:	18d2      	adds	r2, r2, r3
    1986:	4b0c      	ldr	r3, [pc, #48]	; (19b8 <sd_mmc_select_slot+0xbc>)
    1988:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    198a:	4b0c      	ldr	r3, [pc, #48]	; (19bc <sd_mmc_select_slot+0xc0>)
    198c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    198e:	1dfb      	adds	r3, r7, #7
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	4a06      	ldr	r2, [pc, #24]	; (19ac <sd_mmc_select_slot+0xb0>)
    1994:	015b      	lsls	r3, r3, #5
    1996:	18d3      	adds	r3, r2, r3
    1998:	330a      	adds	r3, #10
    199a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    199c:	3b02      	subs	r3, #2
    199e:	425a      	negs	r2, r3
    19a0:	4153      	adcs	r3, r2
    19a2:	b2db      	uxtb	r3, r3
}
    19a4:	0018      	movs	r0, r3
    19a6:	46bd      	mov	sp, r7
    19a8:	b002      	add	sp, #8
    19aa:	bd80      	pop	{r7, pc}
    19ac:	200000bc 	.word	0x200000bc
    19b0:	00061a80 	.word	0x00061a80
    19b4:	200000dc 	.word	0x200000dc
    19b8:	200000e0 	.word	0x200000e0
    19bc:	000019c1 	.word	0x000019c1

000019c0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    19c0:	b5b0      	push	{r4, r5, r7, lr}
    19c2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    19c4:	4b09      	ldr	r3, [pc, #36]	; (19ec <sd_mmc_configure_slot+0x2c>)
    19c6:	7818      	ldrb	r0, [r3, #0]
    19c8:	4b09      	ldr	r3, [pc, #36]	; (19f0 <sd_mmc_configure_slot+0x30>)
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    19ce:	4b08      	ldr	r3, [pc, #32]	; (19f0 <sd_mmc_configure_slot+0x30>)
    19d0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    19d2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    19d4:	4b06      	ldr	r3, [pc, #24]	; (19f0 <sd_mmc_configure_slot+0x30>)
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    19da:	1e5c      	subs	r4, r3, #1
    19dc:	41a3      	sbcs	r3, r4
    19de:	b2db      	uxtb	r3, r3
    19e0:	4c04      	ldr	r4, [pc, #16]	; (19f4 <sd_mmc_configure_slot+0x34>)
    19e2:	47a0      	blx	r4
}
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46bd      	mov	sp, r7
    19e8:	bdb0      	pop	{r4, r5, r7, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	200000dc 	.word	0x200000dc
    19f0:	200000e0 	.word	0x200000e0
    19f4:	00002b55 	.word	0x00002b55

000019f8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    19fc:	4b05      	ldr	r3, [pc, #20]	; (1a14 <sd_mmc_deselect_slot+0x1c>)
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	2b00      	cmp	r3, #0
    1a02:	d104      	bne.n	1a0e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    1a04:	4b03      	ldr	r3, [pc, #12]	; (1a14 <sd_mmc_deselect_slot+0x1c>)
    1a06:	781b      	ldrb	r3, [r3, #0]
    1a08:	0018      	movs	r0, r3
    1a0a:	4b03      	ldr	r3, [pc, #12]	; (1a18 <sd_mmc_deselect_slot+0x20>)
    1a0c:	4798      	blx	r3
	}
}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	46bd      	mov	sp, r7
    1a12:	bd80      	pop	{r7, pc}
    1a14:	200000dc 	.word	0x200000dc
    1a18:	00002bdd 	.word	0x00002bdd

00001a1c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b082      	sub	sp, #8
    1a20:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    1a22:	1dfb      	adds	r3, r7, #7
    1a24:	2200      	movs	r2, #0
    1a26:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1a28:	4b59      	ldr	r3, [pc, #356]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	2201      	movs	r2, #1
    1a2e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1a30:	4b57      	ldr	r3, [pc, #348]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	2200      	movs	r2, #0
    1a36:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1a38:	4b55      	ldr	r3, [pc, #340]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	2200      	movs	r2, #0
    1a3e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1a40:	4b54      	ldr	r3, [pc, #336]	; (1b94 <sd_mmc_spi_card_init+0x178>)
    1a42:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1a44:	2388      	movs	r3, #136	; 0x88
    1a46:	015b      	lsls	r3, r3, #5
    1a48:	2100      	movs	r1, #0
    1a4a:	0018      	movs	r0, r3
    1a4c:	4b52      	ldr	r3, [pc, #328]	; (1b98 <sd_mmc_spi_card_init+0x17c>)
    1a4e:	4798      	blx	r3
    1a50:	0003      	movs	r3, r0
    1a52:	001a      	movs	r2, r3
    1a54:	2301      	movs	r3, #1
    1a56:	4053      	eors	r3, r2
    1a58:	b2db      	uxtb	r3, r3
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d001      	beq.n	1a62 <sd_mmc_spi_card_init+0x46>
		return false;
    1a5e:	2300      	movs	r3, #0
    1a60:	e092      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1a62:	1dfb      	adds	r3, r7, #7
    1a64:	0018      	movs	r0, r3
    1a66:	4b4d      	ldr	r3, [pc, #308]	; (1b9c <sd_mmc_spi_card_init+0x180>)
    1a68:	4798      	blx	r3
    1a6a:	0003      	movs	r3, r0
    1a6c:	001a      	movs	r2, r3
    1a6e:	2301      	movs	r3, #1
    1a70:	4053      	eors	r3, r2
    1a72:	b2db      	uxtb	r3, r3
    1a74:	2b00      	cmp	r3, #0
    1a76:	d001      	beq.n	1a7c <sd_mmc_spi_card_init+0x60>
		return false;
    1a78:	2300      	movs	r3, #0
    1a7a:	e085      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1a7c:	4b48      	ldr	r3, [pc, #288]	; (1ba0 <sd_mmc_spi_card_init+0x184>)
    1a7e:	4798      	blx	r3
    1a80:	0003      	movs	r3, r0
    1a82:	001a      	movs	r2, r3
    1a84:	2301      	movs	r3, #1
    1a86:	4053      	eors	r3, r2
    1a88:	b2db      	uxtb	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d001      	beq.n	1a92 <sd_mmc_spi_card_init+0x76>
		return false;
    1a8e:	2300      	movs	r3, #0
    1a90:	e07a      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1a92:	4b3f      	ldr	r3, [pc, #252]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	7adb      	ldrb	r3, [r3, #11]
    1a98:	001a      	movs	r2, r3
    1a9a:	2301      	movs	r3, #1
    1a9c:	4013      	ands	r3, r2
    1a9e:	d021      	beq.n	1ae4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1aa0:	1dfb      	adds	r3, r7, #7
    1aa2:	781b      	ldrb	r3, [r3, #0]
    1aa4:	0018      	movs	r0, r3
    1aa6:	4b3f      	ldr	r3, [pc, #252]	; (1ba4 <sd_mmc_spi_card_init+0x188>)
    1aa8:	4798      	blx	r3
    1aaa:	0003      	movs	r3, r0
    1aac:	001a      	movs	r2, r3
    1aae:	2301      	movs	r3, #1
    1ab0:	4053      	eors	r3, r2
    1ab2:	b2db      	uxtb	r3, r3
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d007      	beq.n	1ac8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1ab8:	4b35      	ldr	r3, [pc, #212]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1aba:	681b      	ldr	r3, [r3, #0]
    1abc:	2202      	movs	r2, #2
    1abe:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1ac0:	4b39      	ldr	r3, [pc, #228]	; (1ba8 <sd_mmc_spi_card_init+0x18c>)
    1ac2:	4798      	blx	r3
    1ac4:	0003      	movs	r3, r0
    1ac6:	e05f      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1ac8:	4b38      	ldr	r3, [pc, #224]	; (1bac <sd_mmc_spi_card_init+0x190>)
    1aca:	2100      	movs	r1, #0
    1acc:	0018      	movs	r0, r3
    1ace:	4b32      	ldr	r3, [pc, #200]	; (1b98 <sd_mmc_spi_card_init+0x17c>)
    1ad0:	4798      	blx	r3
    1ad2:	0003      	movs	r3, r0
    1ad4:	001a      	movs	r2, r3
    1ad6:	2301      	movs	r3, #1
    1ad8:	4053      	eors	r3, r2
    1ada:	b2db      	uxtb	r3, r3
    1adc:	2b00      	cmp	r3, #0
    1ade:	d001      	beq.n	1ae4 <sd_mmc_spi_card_init+0xc8>
			return false;
    1ae0:	2300      	movs	r3, #0
    1ae2:	e051      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1ae4:	4b2a      	ldr	r3, [pc, #168]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	7adb      	ldrb	r3, [r3, #11]
    1aea:	001a      	movs	r2, r3
    1aec:	2301      	movs	r3, #1
    1aee:	4013      	ands	r3, r2
    1af0:	d017      	beq.n	1b22 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    1af2:	4b2f      	ldr	r3, [pc, #188]	; (1bb0 <sd_mmc_spi_card_init+0x194>)
    1af4:	4798      	blx	r3
    1af6:	0003      	movs	r3, r0
    1af8:	001a      	movs	r2, r3
    1afa:	2301      	movs	r3, #1
    1afc:	4053      	eors	r3, r2
    1afe:	b2db      	uxtb	r3, r3
    1b00:	2b00      	cmp	r3, #0
    1b02:	d001      	beq.n	1b08 <sd_mmc_spi_card_init+0xec>
			return false;
    1b04:	2300      	movs	r3, #0
    1b06:	e03f      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1b08:	4b2a      	ldr	r3, [pc, #168]	; (1bb4 <sd_mmc_spi_card_init+0x198>)
    1b0a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1b0c:	4b2a      	ldr	r3, [pc, #168]	; (1bb8 <sd_mmc_spi_card_init+0x19c>)
    1b0e:	4798      	blx	r3
    1b10:	0003      	movs	r3, r0
    1b12:	001a      	movs	r2, r3
    1b14:	2301      	movs	r3, #1
    1b16:	4053      	eors	r3, r2
    1b18:	b2db      	uxtb	r3, r3
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d001      	beq.n	1b22 <sd_mmc_spi_card_init+0x106>
			return false;
    1b1e:	2300      	movs	r3, #0
    1b20:	e032      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1b22:	4b1b      	ldr	r3, [pc, #108]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1b24:	681b      	ldr	r3, [r3, #0]
    1b26:	7adb      	ldrb	r3, [r3, #11]
    1b28:	001a      	movs	r2, r3
    1b2a:	2301      	movs	r3, #1
    1b2c:	4013      	ands	r3, r2
    1b2e:	d016      	beq.n	1b5e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1b30:	4b17      	ldr	r3, [pc, #92]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	7adb      	ldrb	r3, [r3, #11]
    1b36:	001a      	movs	r2, r3
    1b38:	2308      	movs	r3, #8
    1b3a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1b3c:	d10f      	bne.n	1b5e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1b3e:	2380      	movs	r3, #128	; 0x80
    1b40:	009b      	lsls	r3, r3, #2
    1b42:	4a1e      	ldr	r2, [pc, #120]	; (1bbc <sd_mmc_spi_card_init+0x1a0>)
    1b44:	0019      	movs	r1, r3
    1b46:	0010      	movs	r0, r2
    1b48:	4b13      	ldr	r3, [pc, #76]	; (1b98 <sd_mmc_spi_card_init+0x17c>)
    1b4a:	4798      	blx	r3
    1b4c:	0003      	movs	r3, r0
    1b4e:	001a      	movs	r2, r3
    1b50:	2301      	movs	r3, #1
    1b52:	4053      	eors	r3, r2
    1b54:	b2db      	uxtb	r3, r3
    1b56:	2b00      	cmp	r3, #0
    1b58:	d001      	beq.n	1b5e <sd_mmc_spi_card_init+0x142>
			return false;
    1b5a:	2300      	movs	r3, #0
    1b5c:	e014      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1b5e:	4b0c      	ldr	r3, [pc, #48]	; (1b90 <sd_mmc_spi_card_init+0x174>)
    1b60:	681b      	ldr	r3, [r3, #0]
    1b62:	7adb      	ldrb	r3, [r3, #11]
    1b64:	001a      	movs	r2, r3
    1b66:	2301      	movs	r3, #1
    1b68:	4013      	ands	r3, r2
    1b6a:	d00a      	beq.n	1b82 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1b6c:	4b14      	ldr	r3, [pc, #80]	; (1bc0 <sd_mmc_spi_card_init+0x1a4>)
    1b6e:	4798      	blx	r3
    1b70:	0003      	movs	r3, r0
    1b72:	001a      	movs	r2, r3
    1b74:	2301      	movs	r3, #1
    1b76:	4053      	eors	r3, r2
    1b78:	b2db      	uxtb	r3, r3
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d001      	beq.n	1b82 <sd_mmc_spi_card_init+0x166>
			return false;
    1b7e:	2300      	movs	r3, #0
    1b80:	e002      	b.n	1b88 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1b82:	4b10      	ldr	r3, [pc, #64]	; (1bc4 <sd_mmc_spi_card_init+0x1a8>)
    1b84:	4798      	blx	r3
	return true;
    1b86:	2301      	movs	r3, #1
}
    1b88:	0018      	movs	r0, r3
    1b8a:	46bd      	mov	sp, r7
    1b8c:	b002      	add	sp, #8
    1b8e:	bd80      	pop	{r7, pc}
    1b90:	200000e0 	.word	0x200000e0
    1b94:	00002c21 	.word	0x00002c21
    1b98:	00002c6d 	.word	0x00002c6d
    1b9c:	00001371 	.word	0x00001371
    1ba0:	00001365 	.word	0x00001365
    1ba4:	00001281 	.word	0x00001281
    1ba8:	00001bc9 	.word	0x00001bc9
    1bac:	0000113b 	.word	0x0000113b
    1bb0:	0000150d 	.word	0x0000150d
    1bb4:	000016ad 	.word	0x000016ad
    1bb8:	000017f5 	.word	0x000017f5
    1bbc:	00001110 	.word	0x00001110
    1bc0:	00001799 	.word	0x00001799
    1bc4:	000019c1 	.word	0x000019c1

00001bc8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1bce:	2388      	movs	r3, #136	; 0x88
    1bd0:	015b      	lsls	r3, r3, #5
    1bd2:	2100      	movs	r1, #0
    1bd4:	0018      	movs	r0, r3
    1bd6:	4b32      	ldr	r3, [pc, #200]	; (1ca0 <sd_mmc_spi_install_mmc+0xd8>)
    1bd8:	4798      	blx	r3
    1bda:	0003      	movs	r3, r0
    1bdc:	001a      	movs	r2, r3
    1bde:	2301      	movs	r3, #1
    1be0:	4053      	eors	r3, r2
    1be2:	b2db      	uxtb	r3, r3
    1be4:	2b00      	cmp	r3, #0
    1be6:	d001      	beq.n	1bec <sd_mmc_spi_install_mmc+0x24>
		return false;
    1be8:	2300      	movs	r3, #0
    1bea:	e055      	b.n	1c98 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1bec:	4b2d      	ldr	r3, [pc, #180]	; (1ca4 <sd_mmc_spi_install_mmc+0xdc>)
    1bee:	4798      	blx	r3
    1bf0:	0003      	movs	r3, r0
    1bf2:	001a      	movs	r2, r3
    1bf4:	2301      	movs	r3, #1
    1bf6:	4053      	eors	r3, r2
    1bf8:	b2db      	uxtb	r3, r3
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d001      	beq.n	1c02 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1bfe:	2300      	movs	r3, #0
    1c00:	e04a      	b.n	1c98 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1c02:	4b29      	ldr	r3, [pc, #164]	; (1ca8 <sd_mmc_spi_install_mmc+0xe0>)
    1c04:	2100      	movs	r1, #0
    1c06:	0018      	movs	r0, r3
    1c08:	4b25      	ldr	r3, [pc, #148]	; (1ca0 <sd_mmc_spi_install_mmc+0xd8>)
    1c0a:	4798      	blx	r3
    1c0c:	0003      	movs	r3, r0
    1c0e:	001a      	movs	r2, r3
    1c10:	2301      	movs	r3, #1
    1c12:	4053      	eors	r3, r2
    1c14:	b2db      	uxtb	r3, r3
    1c16:	2b00      	cmp	r3, #0
    1c18:	d001      	beq.n	1c1e <sd_mmc_spi_install_mmc+0x56>
		return false;
    1c1a:	2300      	movs	r3, #0
    1c1c:	e03c      	b.n	1c98 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1c1e:	4b23      	ldr	r3, [pc, #140]	; (1cac <sd_mmc_spi_install_mmc+0xe4>)
    1c20:	4798      	blx	r3
    1c22:	0003      	movs	r3, r0
    1c24:	001a      	movs	r2, r3
    1c26:	2301      	movs	r3, #1
    1c28:	4053      	eors	r3, r2
    1c2a:	b2db      	uxtb	r3, r3
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d001      	beq.n	1c34 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1c30:	2300      	movs	r3, #0
    1c32:	e031      	b.n	1c98 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1c34:	4b1e      	ldr	r3, [pc, #120]	; (1cb0 <sd_mmc_spi_install_mmc+0xe8>)
    1c36:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1c38:	4b1e      	ldr	r3, [pc, #120]	; (1cb4 <sd_mmc_spi_install_mmc+0xec>)
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	7b1b      	ldrb	r3, [r3, #12]
    1c3e:	2b3f      	cmp	r3, #63	; 0x3f
    1c40:	d90c      	bls.n	1c5c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1c42:	1dfb      	adds	r3, r7, #7
    1c44:	0018      	movs	r0, r3
    1c46:	4b1c      	ldr	r3, [pc, #112]	; (1cb8 <sd_mmc_spi_install_mmc+0xf0>)
    1c48:	4798      	blx	r3
    1c4a:	0003      	movs	r3, r0
    1c4c:	001a      	movs	r2, r3
    1c4e:	2301      	movs	r3, #1
    1c50:	4053      	eors	r3, r2
    1c52:	b2db      	uxtb	r3, r3
    1c54:	2b00      	cmp	r3, #0
    1c56:	d001      	beq.n	1c5c <sd_mmc_spi_install_mmc+0x94>
			return false;
    1c58:	2300      	movs	r3, #0
    1c5a:	e01d      	b.n	1c98 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1c5c:	2380      	movs	r3, #128	; 0x80
    1c5e:	009b      	lsls	r3, r3, #2
    1c60:	4a16      	ldr	r2, [pc, #88]	; (1cbc <sd_mmc_spi_install_mmc+0xf4>)
    1c62:	0019      	movs	r1, r3
    1c64:	0010      	movs	r0, r2
    1c66:	4b0e      	ldr	r3, [pc, #56]	; (1ca0 <sd_mmc_spi_install_mmc+0xd8>)
    1c68:	4798      	blx	r3
    1c6a:	0003      	movs	r3, r0
    1c6c:	001a      	movs	r2, r3
    1c6e:	2301      	movs	r3, #1
    1c70:	4053      	eors	r3, r2
    1c72:	b2db      	uxtb	r3, r3
    1c74:	2b00      	cmp	r3, #0
    1c76:	d001      	beq.n	1c7c <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1c78:	2300      	movs	r3, #0
    1c7a:	e00d      	b.n	1c98 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1c7c:	4b10      	ldr	r3, [pc, #64]	; (1cc0 <sd_mmc_spi_install_mmc+0xf8>)
    1c7e:	4798      	blx	r3
    1c80:	0003      	movs	r3, r0
    1c82:	001a      	movs	r2, r3
    1c84:	2301      	movs	r3, #1
    1c86:	4053      	eors	r3, r2
    1c88:	b2db      	uxtb	r3, r3
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d001      	beq.n	1c92 <sd_mmc_spi_install_mmc+0xca>
		return false;
    1c8e:	2300      	movs	r3, #0
    1c90:	e002      	b.n	1c98 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1c92:	4b0c      	ldr	r3, [pc, #48]	; (1cc4 <sd_mmc_spi_install_mmc+0xfc>)
    1c94:	4798      	blx	r3
	return true;
    1c96:	2301      	movs	r3, #1
}
    1c98:	0018      	movs	r0, r3
    1c9a:	46bd      	mov	sp, r7
    1c9c:	b002      	add	sp, #8
    1c9e:	bd80      	pop	{r7, pc}
    1ca0:	00002c6d 	.word	0x00002c6d
    1ca4:	000011d5 	.word	0x000011d5
    1ca8:	0000113b 	.word	0x0000113b
    1cac:	0000150d 	.word	0x0000150d
    1cb0:	0000157d 	.word	0x0000157d
    1cb4:	200000e0 	.word	0x200000e0
    1cb8:	000013e1 	.word	0x000013e1
    1cbc:	00001110 	.word	0x00001110
    1cc0:	00001799 	.word	0x00001799
    1cc4:	000019c1 	.word	0x000019c1

00001cc8 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	b082      	sub	sp, #8
    1ccc:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1cce:	1dfb      	adds	r3, r7, #7
    1cd0:	2200      	movs	r2, #0
    1cd2:	701a      	strb	r2, [r3, #0]
    1cd4:	e00c      	b.n	1cf0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1cd6:	1dfb      	adds	r3, r7, #7
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	4a0c      	ldr	r2, [pc, #48]	; (1d0c <sd_mmc_init+0x44>)
    1cdc:	015b      	lsls	r3, r3, #5
    1cde:	18d3      	adds	r3, r2, r3
    1ce0:	330a      	adds	r3, #10
    1ce2:	2204      	movs	r2, #4
    1ce4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1ce6:	1dfb      	adds	r3, r7, #7
    1ce8:	781a      	ldrb	r2, [r3, #0]
    1cea:	1dfb      	adds	r3, r7, #7
    1cec:	3201      	adds	r2, #1
    1cee:	701a      	strb	r2, [r3, #0]
    1cf0:	1dfb      	adds	r3, r7, #7
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d0ee      	beq.n	1cd6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1cf8:	4b05      	ldr	r3, [pc, #20]	; (1d10 <sd_mmc_init+0x48>)
    1cfa:	22ff      	movs	r2, #255	; 0xff
    1cfc:	701a      	strb	r2, [r3, #0]
	driver_init();
    1cfe:	4b05      	ldr	r3, [pc, #20]	; (1d14 <sd_mmc_init+0x4c>)
    1d00:	4798      	blx	r3
}
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	46bd      	mov	sp, r7
    1d06:	b002      	add	sp, #8
    1d08:	bd80      	pop	{r7, pc}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	200000bc 	.word	0x200000bc
    1d10:	200000dc 	.word	0x200000dc
    1d14:	00002a8d 	.word	0x00002a8d

00001d18 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1d18:	b590      	push	{r4, r7, lr}
    1d1a:	b085      	sub	sp, #20
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	0002      	movs	r2, r0
    1d20:	1dfb      	adds	r3, r7, #7
    1d22:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1d24:	230f      	movs	r3, #15
    1d26:	18fc      	adds	r4, r7, r3
    1d28:	1dfb      	adds	r3, r7, #7
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	0018      	movs	r0, r3
    1d2e:	4b13      	ldr	r3, [pc, #76]	; (1d7c <sd_mmc_check+0x64>)
    1d30:	4798      	blx	r3
    1d32:	0003      	movs	r3, r0
    1d34:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1d36:	230f      	movs	r3, #15
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	781b      	ldrb	r3, [r3, #0]
    1d3c:	2b01      	cmp	r3, #1
    1d3e:	d005      	beq.n	1d4c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1d40:	4b0f      	ldr	r3, [pc, #60]	; (1d80 <sd_mmc_check+0x68>)
    1d42:	4798      	blx	r3
		return sd_mmc_err;
    1d44:	230f      	movs	r3, #15
    1d46:	18fb      	adds	r3, r7, r3
    1d48:	781b      	ldrb	r3, [r3, #0]
    1d4a:	e012      	b.n	1d72 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1d4c:	4b0d      	ldr	r3, [pc, #52]	; (1d84 <sd_mmc_check+0x6c>)
    1d4e:	4798      	blx	r3
    1d50:	1e03      	subs	r3, r0, #0
    1d52:	d007      	beq.n	1d64 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1d54:	4b0c      	ldr	r3, [pc, #48]	; (1d88 <sd_mmc_check+0x70>)
    1d56:	681b      	ldr	r3, [r3, #0]
    1d58:	2200      	movs	r2, #0
    1d5a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1d5c:	4b08      	ldr	r3, [pc, #32]	; (1d80 <sd_mmc_check+0x68>)
    1d5e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1d60:	2301      	movs	r3, #1
    1d62:	e006      	b.n	1d72 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1d64:	4b08      	ldr	r3, [pc, #32]	; (1d88 <sd_mmc_check+0x70>)
    1d66:	681b      	ldr	r3, [r3, #0]
    1d68:	2203      	movs	r2, #3
    1d6a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1d6c:	4b04      	ldr	r3, [pc, #16]	; (1d80 <sd_mmc_check+0x68>)
    1d6e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1d70:	2303      	movs	r3, #3
}
    1d72:	0018      	movs	r0, r3
    1d74:	46bd      	mov	sp, r7
    1d76:	b005      	add	sp, #20
    1d78:	bd90      	pop	{r4, r7, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	000018fd 	.word	0x000018fd
    1d80:	000019f9 	.word	0x000019f9
    1d84:	00001a1d 	.word	0x00001a1d
    1d88:	200000e0 	.word	0x200000e0

00001d8c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1d8c:	b580      	push	{r7, lr}
    1d8e:	b082      	sub	sp, #8
    1d90:	af00      	add	r7, sp, #0
    1d92:	0002      	movs	r2, r0
    1d94:	1dfb      	adds	r3, r7, #7
    1d96:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1d98:	1dfb      	adds	r3, r7, #7
    1d9a:	781b      	ldrb	r3, [r3, #0]
    1d9c:	0018      	movs	r0, r3
    1d9e:	4b07      	ldr	r3, [pc, #28]	; (1dbc <sd_mmc_get_type+0x30>)
    1da0:	4798      	blx	r3
    1da2:	1e03      	subs	r3, r0, #0
    1da4:	d001      	beq.n	1daa <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1da6:	2300      	movs	r3, #0
    1da8:	e004      	b.n	1db4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1daa:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <sd_mmc_get_type+0x34>)
    1dac:	4798      	blx	r3
	return sd_mmc_card->type;
    1dae:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <sd_mmc_get_type+0x38>)
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	7adb      	ldrb	r3, [r3, #11]
}
    1db4:	0018      	movs	r0, r3
    1db6:	46bd      	mov	sp, r7
    1db8:	b002      	add	sp, #8
    1dba:	bd80      	pop	{r7, pc}
    1dbc:	000018fd 	.word	0x000018fd
    1dc0:	000019f9 	.word	0x000019f9
    1dc4:	200000e0 	.word	0x200000e0

00001dc8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1dc8:	b580      	push	{r7, lr}
    1dca:	b082      	sub	sp, #8
    1dcc:	af00      	add	r7, sp, #0
    1dce:	0002      	movs	r2, r0
    1dd0:	1dfb      	adds	r3, r7, #7
    1dd2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1dd4:	1dfb      	adds	r3, r7, #7
    1dd6:	781b      	ldrb	r3, [r3, #0]
    1dd8:	0018      	movs	r0, r3
    1dda:	4b07      	ldr	r3, [pc, #28]	; (1df8 <sd_mmc_get_capacity+0x30>)
    1ddc:	4798      	blx	r3
    1dde:	1e03      	subs	r3, r0, #0
    1de0:	d001      	beq.n	1de6 <sd_mmc_get_capacity+0x1e>
		return 0;
    1de2:	2300      	movs	r3, #0
    1de4:	e004      	b.n	1df0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1de6:	4b05      	ldr	r3, [pc, #20]	; (1dfc <sd_mmc_get_capacity+0x34>)
    1de8:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1dea:	4b05      	ldr	r3, [pc, #20]	; (1e00 <sd_mmc_get_capacity+0x38>)
    1dec:	681b      	ldr	r3, [r3, #0]
    1dee:	685b      	ldr	r3, [r3, #4]
}
    1df0:	0018      	movs	r0, r3
    1df2:	46bd      	mov	sp, r7
    1df4:	b002      	add	sp, #8
    1df6:	bd80      	pop	{r7, pc}
    1df8:	000018fd 	.word	0x000018fd
    1dfc:	000019f9 	.word	0x000019f9
    1e00:	200000e0 	.word	0x200000e0

00001e04 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b082      	sub	sp, #8
    1e08:	af00      	add	r7, sp, #0
    1e0a:	0002      	movs	r2, r0
    1e0c:	1dfb      	adds	r3, r7, #7
    1e0e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1e10:	2300      	movs	r3, #0
}
    1e12:	0018      	movs	r0, r3
    1e14:	46bd      	mov	sp, r7
    1e16:	b002      	add	sp, #8
    1e18:	bd80      	pop	{r7, pc}
	...

00001e1c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1e1c:	b590      	push	{r4, r7, lr}
    1e1e:	b089      	sub	sp, #36	; 0x24
    1e20:	af02      	add	r7, sp, #8
    1e22:	6039      	str	r1, [r7, #0]
    1e24:	0011      	movs	r1, r2
    1e26:	1dfb      	adds	r3, r7, #7
    1e28:	1c02      	adds	r2, r0, #0
    1e2a:	701a      	strb	r2, [r3, #0]
    1e2c:	1d3b      	adds	r3, r7, #4
    1e2e:	1c0a      	adds	r2, r1, #0
    1e30:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1e32:	230f      	movs	r3, #15
    1e34:	18fc      	adds	r4, r7, r3
    1e36:	1dfb      	adds	r3, r7, #7
    1e38:	781b      	ldrb	r3, [r3, #0]
    1e3a:	0018      	movs	r0, r3
    1e3c:	4b29      	ldr	r3, [pc, #164]	; (1ee4 <sd_mmc_init_read_blocks+0xc8>)
    1e3e:	4798      	blx	r3
    1e40:	0003      	movs	r3, r0
    1e42:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1e44:	230f      	movs	r3, #15
    1e46:	18fb      	adds	r3, r7, r3
    1e48:	781b      	ldrb	r3, [r3, #0]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d003      	beq.n	1e56 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1e4e:	230f      	movs	r3, #15
    1e50:	18fb      	adds	r3, r7, r3
    1e52:	781b      	ldrb	r3, [r3, #0]
    1e54:	e041      	b.n	1eda <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1e56:	4b24      	ldr	r3, [pc, #144]	; (1ee8 <sd_mmc_init_read_blocks+0xcc>)
    1e58:	4798      	blx	r3
    1e5a:	0003      	movs	r3, r0
    1e5c:	001a      	movs	r2, r3
    1e5e:	2301      	movs	r3, #1
    1e60:	4053      	eors	r3, r2
    1e62:	b2db      	uxtb	r3, r3
    1e64:	2b00      	cmp	r3, #0
    1e66:	d003      	beq.n	1e70 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1e68:	4b20      	ldr	r3, [pc, #128]	; (1eec <sd_mmc_init_read_blocks+0xd0>)
    1e6a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1e6c:	2305      	movs	r3, #5
    1e6e:	e034      	b.n	1eda <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    1e70:	1d3b      	adds	r3, r7, #4
    1e72:	881b      	ldrh	r3, [r3, #0]
    1e74:	2b01      	cmp	r3, #1
    1e76:	d902      	bls.n	1e7e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1e78:	4b1d      	ldr	r3, [pc, #116]	; (1ef0 <sd_mmc_init_read_blocks+0xd4>)
    1e7a:	617b      	str	r3, [r7, #20]
    1e7c:	e001      	b.n	1e82 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1e7e:	4b1d      	ldr	r3, [pc, #116]	; (1ef4 <sd_mmc_init_read_blocks+0xd8>)
    1e80:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1e82:	4b1d      	ldr	r3, [pc, #116]	; (1ef8 <sd_mmc_init_read_blocks+0xdc>)
    1e84:	681b      	ldr	r3, [r3, #0]
    1e86:	7adb      	ldrb	r3, [r3, #11]
    1e88:	001a      	movs	r2, r3
    1e8a:	2308      	movs	r3, #8
    1e8c:	4013      	ands	r3, r2
    1e8e:	d002      	beq.n	1e96 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1e90:	683b      	ldr	r3, [r7, #0]
    1e92:	613b      	str	r3, [r7, #16]
    1e94:	e002      	b.n	1e9c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1e96:	683b      	ldr	r3, [r7, #0]
    1e98:	025b      	lsls	r3, r3, #9
    1e9a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1e9c:	1d3b      	adds	r3, r7, #4
    1e9e:	881c      	ldrh	r4, [r3, #0]
    1ea0:	2380      	movs	r3, #128	; 0x80
    1ea2:	009a      	lsls	r2, r3, #2
    1ea4:	6939      	ldr	r1, [r7, #16]
    1ea6:	6978      	ldr	r0, [r7, #20]
    1ea8:	2301      	movs	r3, #1
    1eaa:	9300      	str	r3, [sp, #0]
    1eac:	0023      	movs	r3, r4
    1eae:	4c13      	ldr	r4, [pc, #76]	; (1efc <sd_mmc_init_read_blocks+0xe0>)
    1eb0:	47a0      	blx	r4
    1eb2:	0003      	movs	r3, r0
    1eb4:	001a      	movs	r2, r3
    1eb6:	2301      	movs	r3, #1
    1eb8:	4053      	eors	r3, r2
    1eba:	b2db      	uxtb	r3, r3
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d003      	beq.n	1ec8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    1ec0:	4b0a      	ldr	r3, [pc, #40]	; (1eec <sd_mmc_init_read_blocks+0xd0>)
    1ec2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1ec4:	2305      	movs	r3, #5
    1ec6:	e008      	b.n	1eda <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1ec8:	4b0d      	ldr	r3, [pc, #52]	; (1f00 <sd_mmc_init_read_blocks+0xe4>)
    1eca:	1d3a      	adds	r2, r7, #4
    1ecc:	8812      	ldrh	r2, [r2, #0]
    1ece:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1ed0:	4b0c      	ldr	r3, [pc, #48]	; (1f04 <sd_mmc_init_read_blocks+0xe8>)
    1ed2:	1d3a      	adds	r2, r7, #4
    1ed4:	8812      	ldrh	r2, [r2, #0]
    1ed6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1ed8:	2300      	movs	r3, #0
}
    1eda:	0018      	movs	r0, r3
    1edc:	46bd      	mov	sp, r7
    1ede:	b007      	add	sp, #28
    1ee0:	bd90      	pop	{r4, r7, pc}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	000018fd 	.word	0x000018fd
    1ee8:	00001799 	.word	0x00001799
    1eec:	000019f9 	.word	0x000019f9
    1ef0:	00101112 	.word	0x00101112
    1ef4:	00081111 	.word	0x00081111
    1ef8:	200000e0 	.word	0x200000e0
    1efc:	00002c95 	.word	0x00002c95
    1f00:	200000e6 	.word	0x200000e6
    1f04:	200000e4 	.word	0x200000e4

00001f08 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	b082      	sub	sp, #8
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	6078      	str	r0, [r7, #4]
    1f10:	000a      	movs	r2, r1
    1f12:	1cbb      	adds	r3, r7, #2
    1f14:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1f16:	1cbb      	adds	r3, r7, #2
    1f18:	881a      	ldrh	r2, [r3, #0]
    1f1a:	687b      	ldr	r3, [r7, #4]
    1f1c:	0011      	movs	r1, r2
    1f1e:	0018      	movs	r0, r3
    1f20:	4b0d      	ldr	r3, [pc, #52]	; (1f58 <sd_mmc_start_read_blocks+0x50>)
    1f22:	4798      	blx	r3
    1f24:	0003      	movs	r3, r0
    1f26:	001a      	movs	r2, r3
    1f28:	2301      	movs	r3, #1
    1f2a:	4053      	eors	r3, r2
    1f2c:	b2db      	uxtb	r3, r3
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d004      	beq.n	1f3c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1f32:	4b0a      	ldr	r3, [pc, #40]	; (1f5c <sd_mmc_start_read_blocks+0x54>)
    1f34:	2200      	movs	r2, #0
    1f36:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1f38:	2305      	movs	r3, #5
    1f3a:	e008      	b.n	1f4e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1f3c:	4b07      	ldr	r3, [pc, #28]	; (1f5c <sd_mmc_start_read_blocks+0x54>)
    1f3e:	881a      	ldrh	r2, [r3, #0]
    1f40:	1cbb      	adds	r3, r7, #2
    1f42:	881b      	ldrh	r3, [r3, #0]
    1f44:	1ad3      	subs	r3, r2, r3
    1f46:	b29a      	uxth	r2, r3
    1f48:	4b04      	ldr	r3, [pc, #16]	; (1f5c <sd_mmc_start_read_blocks+0x54>)
    1f4a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1f4c:	2300      	movs	r3, #0
}
    1f4e:	0018      	movs	r0, r3
    1f50:	46bd      	mov	sp, r7
    1f52:	b002      	add	sp, #8
    1f54:	bd80      	pop	{r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	00002f65 	.word	0x00002f65
    1f5c:	200000e6 	.word	0x200000e6

00001f60 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1f60:	b580      	push	{r7, lr}
    1f62:	b082      	sub	sp, #8
    1f64:	af00      	add	r7, sp, #0
    1f66:	0002      	movs	r2, r0
    1f68:	1dfb      	adds	r3, r7, #7
    1f6a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    1f6c:	4b1c      	ldr	r3, [pc, #112]	; (1fe0 <sd_mmc_wait_end_of_read_blocks+0x80>)
    1f6e:	4798      	blx	r3
    1f70:	0003      	movs	r3, r0
    1f72:	001a      	movs	r2, r3
    1f74:	2301      	movs	r3, #1
    1f76:	4053      	eors	r3, r2
    1f78:	b2db      	uxtb	r3, r3
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d001      	beq.n	1f82 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1f7e:	2305      	movs	r3, #5
    1f80:	e029      	b.n	1fd6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    1f82:	1dfb      	adds	r3, r7, #7
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d003      	beq.n	1f92 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1f8a:	4b16      	ldr	r3, [pc, #88]	; (1fe4 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1f8c:	2200      	movs	r2, #0
    1f8e:	801a      	strh	r2, [r3, #0]
    1f90:	e005      	b.n	1f9e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1f92:	4b14      	ldr	r3, [pc, #80]	; (1fe4 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1f94:	881b      	ldrh	r3, [r3, #0]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d001      	beq.n	1f9e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    1f9a:	2300      	movs	r3, #0
    1f9c:	e01b      	b.n	1fd6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1f9e:	4b12      	ldr	r3, [pc, #72]	; (1fe8 <sd_mmc_wait_end_of_read_blocks+0x88>)
    1fa0:	881b      	ldrh	r3, [r3, #0]
    1fa2:	2b01      	cmp	r3, #1
    1fa4:	d103      	bne.n	1fae <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1fa6:	4b11      	ldr	r3, [pc, #68]	; (1fec <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1fa8:	4798      	blx	r3
		return SD_MMC_OK;
    1faa:	2300      	movs	r3, #0
    1fac:	e013      	b.n	1fd6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1fae:	4b10      	ldr	r3, [pc, #64]	; (1ff0 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1fb0:	2100      	movs	r1, #0
    1fb2:	0018      	movs	r0, r3
    1fb4:	4b0f      	ldr	r3, [pc, #60]	; (1ff4 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1fb6:	4798      	blx	r3
    1fb8:	0003      	movs	r3, r0
    1fba:	001a      	movs	r2, r3
    1fbc:	2301      	movs	r3, #1
    1fbe:	4053      	eors	r3, r2
    1fc0:	b2db      	uxtb	r3, r3
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d004      	beq.n	1fd0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1fc6:	4b0a      	ldr	r3, [pc, #40]	; (1ff0 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1fc8:	2100      	movs	r1, #0
    1fca:	0018      	movs	r0, r3
    1fcc:	4b09      	ldr	r3, [pc, #36]	; (1ff4 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1fce:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1fd2:	4798      	blx	r3
	return SD_MMC_OK;
    1fd4:	2300      	movs	r3, #0
}
    1fd6:	0018      	movs	r0, r3
    1fd8:	46bd      	mov	sp, r7
    1fda:	b002      	add	sp, #8
    1fdc:	bd80      	pop	{r7, pc}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	00003009 	.word	0x00003009
    1fe4:	200000e6 	.word	0x200000e6
    1fe8:	200000e4 	.word	0x200000e4
    1fec:	000019f9 	.word	0x000019f9
    1ff0:	0000310c 	.word	0x0000310c
    1ff4:	00002c6d 	.word	0x00002c6d

00001ff8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1ff8:	b590      	push	{r4, r7, lr}
    1ffa:	b089      	sub	sp, #36	; 0x24
    1ffc:	af02      	add	r7, sp, #8
    1ffe:	6039      	str	r1, [r7, #0]
    2000:	0011      	movs	r1, r2
    2002:	1dfb      	adds	r3, r7, #7
    2004:	1c02      	adds	r2, r0, #0
    2006:	701a      	strb	r2, [r3, #0]
    2008:	1d3b      	adds	r3, r7, #4
    200a:	1c0a      	adds	r2, r1, #0
    200c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    200e:	230f      	movs	r3, #15
    2010:	18fc      	adds	r4, r7, r3
    2012:	1dfb      	adds	r3, r7, #7
    2014:	781b      	ldrb	r3, [r3, #0]
    2016:	0018      	movs	r0, r3
    2018:	4b28      	ldr	r3, [pc, #160]	; (20bc <STACK_SIZE+0xbc>)
    201a:	4798      	blx	r3
    201c:	0003      	movs	r3, r0
    201e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    2020:	230f      	movs	r3, #15
    2022:	18fb      	adds	r3, r7, r3
    2024:	781b      	ldrb	r3, [r3, #0]
    2026:	2b00      	cmp	r3, #0
    2028:	d003      	beq.n	2032 <STACK_SIZE+0x32>
		return sd_mmc_err;
    202a:	230f      	movs	r3, #15
    202c:	18fb      	adds	r3, r7, r3
    202e:	781b      	ldrb	r3, [r3, #0]
    2030:	e03f      	b.n	20b2 <STACK_SIZE+0xb2>
	}
	if (sd_mmc_is_write_protected(slot)) {
    2032:	1dfb      	adds	r3, r7, #7
    2034:	781b      	ldrb	r3, [r3, #0]
    2036:	0018      	movs	r0, r3
    2038:	4b21      	ldr	r3, [pc, #132]	; (20c0 <STACK_SIZE+0xc0>)
    203a:	4798      	blx	r3
    203c:	1e03      	subs	r3, r0, #0
    203e:	d003      	beq.n	2048 <STACK_SIZE+0x48>
		sd_mmc_deselect_slot();
    2040:	4b20      	ldr	r3, [pc, #128]	; (20c4 <STACK_SIZE+0xc4>)
    2042:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    2044:	2307      	movs	r3, #7
    2046:	e034      	b.n	20b2 <STACK_SIZE+0xb2>
	}

	if (nb_block > 1) {
    2048:	1d3b      	adds	r3, r7, #4
    204a:	881b      	ldrh	r3, [r3, #0]
    204c:	2b01      	cmp	r3, #1
    204e:	d902      	bls.n	2056 <STACK_SIZE+0x56>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    2050:	4b1d      	ldr	r3, [pc, #116]	; (20c8 <STACK_SIZE+0xc8>)
    2052:	617b      	str	r3, [r7, #20]
    2054:	e001      	b.n	205a <STACK_SIZE+0x5a>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    2056:	4b1d      	ldr	r3, [pc, #116]	; (20cc <STACK_SIZE+0xcc>)
    2058:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    205a:	4b1d      	ldr	r3, [pc, #116]	; (20d0 <STACK_SIZE+0xd0>)
    205c:	681b      	ldr	r3, [r3, #0]
    205e:	7adb      	ldrb	r3, [r3, #11]
    2060:	001a      	movs	r2, r3
    2062:	2308      	movs	r3, #8
    2064:	4013      	ands	r3, r2
    2066:	d002      	beq.n	206e <STACK_SIZE+0x6e>
		arg = start;
    2068:	683b      	ldr	r3, [r7, #0]
    206a:	613b      	str	r3, [r7, #16]
    206c:	e002      	b.n	2074 <STACK_SIZE+0x74>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    206e:	683b      	ldr	r3, [r7, #0]
    2070:	025b      	lsls	r3, r3, #9
    2072:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    2074:	1d3b      	adds	r3, r7, #4
    2076:	881c      	ldrh	r4, [r3, #0]
    2078:	2380      	movs	r3, #128	; 0x80
    207a:	009a      	lsls	r2, r3, #2
    207c:	6939      	ldr	r1, [r7, #16]
    207e:	6978      	ldr	r0, [r7, #20]
    2080:	2301      	movs	r3, #1
    2082:	9300      	str	r3, [sp, #0]
    2084:	0023      	movs	r3, r4
    2086:	4c13      	ldr	r4, [pc, #76]	; (20d4 <STACK_SIZE+0xd4>)
    2088:	47a0      	blx	r4
    208a:	0003      	movs	r3, r0
    208c:	001a      	movs	r2, r3
    208e:	2301      	movs	r3, #1
    2090:	4053      	eors	r3, r2
    2092:	b2db      	uxtb	r3, r3
    2094:	2b00      	cmp	r3, #0
    2096:	d003      	beq.n	20a0 <STACK_SIZE+0xa0>
		sd_mmc_deselect_slot();
    2098:	4b0a      	ldr	r3, [pc, #40]	; (20c4 <STACK_SIZE+0xc4>)
    209a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    209c:	2305      	movs	r3, #5
    209e:	e008      	b.n	20b2 <STACK_SIZE+0xb2>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    20a0:	4b0d      	ldr	r3, [pc, #52]	; (20d8 <STACK_SIZE+0xd8>)
    20a2:	1d3a      	adds	r2, r7, #4
    20a4:	8812      	ldrh	r2, [r2, #0]
    20a6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    20a8:	4b0c      	ldr	r3, [pc, #48]	; (20dc <STACK_SIZE+0xdc>)
    20aa:	1d3a      	adds	r2, r7, #4
    20ac:	8812      	ldrh	r2, [r2, #0]
    20ae:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    20b0:	2300      	movs	r3, #0
}
    20b2:	0018      	movs	r0, r3
    20b4:	46bd      	mov	sp, r7
    20b6:	b007      	add	sp, #28
    20b8:	bd90      	pop	{r4, r7, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	000018fd 	.word	0x000018fd
    20c0:	00001e05 	.word	0x00001e05
    20c4:	000019f9 	.word	0x000019f9
    20c8:	00109119 	.word	0x00109119
    20cc:	00089118 	.word	0x00089118
    20d0:	200000e0 	.word	0x200000e0
    20d4:	00002c95 	.word	0x00002c95
    20d8:	200000e6 	.word	0x200000e6
    20dc:	200000e4 	.word	0x200000e4

000020e0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b082      	sub	sp, #8
    20e4:	af00      	add	r7, sp, #0
    20e6:	6078      	str	r0, [r7, #4]
    20e8:	000a      	movs	r2, r1
    20ea:	1cbb      	adds	r3, r7, #2
    20ec:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    20ee:	1cbb      	adds	r3, r7, #2
    20f0:	881a      	ldrh	r2, [r3, #0]
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	0011      	movs	r1, r2
    20f6:	0018      	movs	r0, r3
    20f8:	4b0d      	ldr	r3, [pc, #52]	; (2130 <sd_mmc_start_write_blocks+0x50>)
    20fa:	4798      	blx	r3
    20fc:	0003      	movs	r3, r0
    20fe:	001a      	movs	r2, r3
    2100:	2301      	movs	r3, #1
    2102:	4053      	eors	r3, r2
    2104:	b2db      	uxtb	r3, r3
    2106:	2b00      	cmp	r3, #0
    2108:	d004      	beq.n	2114 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    210a:	4b0a      	ldr	r3, [pc, #40]	; (2134 <sd_mmc_start_write_blocks+0x54>)
    210c:	2200      	movs	r2, #0
    210e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    2110:	2305      	movs	r3, #5
    2112:	e008      	b.n	2126 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    2114:	4b07      	ldr	r3, [pc, #28]	; (2134 <sd_mmc_start_write_blocks+0x54>)
    2116:	881a      	ldrh	r2, [r3, #0]
    2118:	1cbb      	adds	r3, r7, #2
    211a:	881b      	ldrh	r3, [r3, #0]
    211c:	1ad3      	subs	r3, r2, r3
    211e:	b29a      	uxth	r2, r3
    2120:	4b04      	ldr	r3, [pc, #16]	; (2134 <sd_mmc_start_write_blocks+0x54>)
    2122:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2124:	2300      	movs	r3, #0
}
    2126:	0018      	movs	r0, r3
    2128:	46bd      	mov	sp, r7
    212a:	b002      	add	sp, #8
    212c:	bd80      	pop	{r7, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	00003015 	.word	0x00003015
    2134:	200000e6 	.word	0x200000e6

00002138 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    2138:	b580      	push	{r7, lr}
    213a:	b082      	sub	sp, #8
    213c:	af00      	add	r7, sp, #0
    213e:	0002      	movs	r2, r0
    2140:	1dfb      	adds	r3, r7, #7
    2142:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    2144:	4b13      	ldr	r3, [pc, #76]	; (2194 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    2146:	4798      	blx	r3
    2148:	0003      	movs	r3, r0
    214a:	001a      	movs	r2, r3
    214c:	2301      	movs	r3, #1
    214e:	4053      	eors	r3, r2
    2150:	b2db      	uxtb	r3, r3
    2152:	2b00      	cmp	r3, #0
    2154:	d001      	beq.n	215a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    2156:	2305      	movs	r3, #5
    2158:	e018      	b.n	218c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    215a:	1dfb      	adds	r3, r7, #7
    215c:	781b      	ldrb	r3, [r3, #0]
    215e:	2b00      	cmp	r3, #0
    2160:	d003      	beq.n	216a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    2162:	4b0d      	ldr	r3, [pc, #52]	; (2198 <sd_mmc_wait_end_of_write_blocks+0x60>)
    2164:	2200      	movs	r2, #0
    2166:	801a      	strh	r2, [r3, #0]
    2168:	e005      	b.n	2176 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    216a:	4b0b      	ldr	r3, [pc, #44]	; (2198 <sd_mmc_wait_end_of_write_blocks+0x60>)
    216c:	881b      	ldrh	r3, [r3, #0]
    216e:	2b00      	cmp	r3, #0
    2170:	d001      	beq.n	2176 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    2172:	2300      	movs	r3, #0
    2174:	e00a      	b.n	218c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    2176:	4b09      	ldr	r3, [pc, #36]	; (219c <sd_mmc_wait_end_of_write_blocks+0x64>)
    2178:	881b      	ldrh	r3, [r3, #0]
    217a:	2b01      	cmp	r3, #1
    217c:	d103      	bne.n	2186 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    217e:	4b08      	ldr	r3, [pc, #32]	; (21a0 <sd_mmc_wait_end_of_write_blocks+0x68>)
    2180:	4798      	blx	r3
		return SD_MMC_OK;
    2182:	2300      	movs	r3, #0
    2184:	e002      	b.n	218c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    2186:	4b06      	ldr	r3, [pc, #24]	; (21a0 <sd_mmc_wait_end_of_write_blocks+0x68>)
    2188:	4798      	blx	r3
	return SD_MMC_OK;
    218a:	2300      	movs	r3, #0
}
    218c:	0018      	movs	r0, r3
    218e:	46bd      	mov	sp, r7
    2190:	b002      	add	sp, #8
    2192:	bd80      	pop	{r7, pc}
    2194:	000030d5 	.word	0x000030d5
    2198:	200000e6 	.word	0x200000e6
    219c:	200000e4 	.word	0x200000e4
    21a0:	000019f9 	.word	0x000019f9

000021a4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    21a4:	b580      	push	{r7, lr}
    21a6:	b082      	sub	sp, #8
    21a8:	af00      	add	r7, sp, #0
    21aa:	0002      	movs	r2, r0
    21ac:	1dfb      	adds	r3, r7, #7
    21ae:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    21b0:	1dfb      	adds	r3, r7, #7
    21b2:	781b      	ldrb	r3, [r3, #0]
    21b4:	0018      	movs	r0, r3
    21b6:	4b16      	ldr	r3, [pc, #88]	; (2210 <sd_mmc_test_unit_ready+0x6c>)
    21b8:	4798      	blx	r3
    21ba:	0003      	movs	r3, r0
    21bc:	2b01      	cmp	r3, #1
    21be:	d019      	beq.n	21f4 <sd_mmc_test_unit_ready+0x50>
    21c0:	2b02      	cmp	r3, #2
    21c2:	d019      	beq.n	21f8 <sd_mmc_test_unit_ready+0x54>
    21c4:	2b00      	cmp	r3, #0
    21c6:	d11e      	bne.n	2206 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    21c8:	1dfb      	adds	r3, r7, #7
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	4a11      	ldr	r2, [pc, #68]	; (2214 <sd_mmc_test_unit_ready+0x70>)
    21ce:	5cd3      	ldrb	r3, [r2, r3]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d001      	beq.n	21d8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    21d4:	2302      	movs	r3, #2
    21d6:	e017      	b.n	2208 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    21d8:	1dfb      	adds	r3, r7, #7
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	0018      	movs	r0, r3
    21de:	4b0e      	ldr	r3, [pc, #56]	; (2218 <sd_mmc_test_unit_ready+0x74>)
    21e0:	4798      	blx	r3
    21e2:	0003      	movs	r3, r0
    21e4:	001a      	movs	r2, r3
    21e6:	2303      	movs	r3, #3
    21e8:	4013      	ands	r3, r2
    21ea:	d001      	beq.n	21f0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    21ec:	2300      	movs	r3, #0
    21ee:	e00b      	b.n	2208 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    21f0:	2302      	movs	r3, #2
    21f2:	e009      	b.n	2208 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    21f4:	2303      	movs	r3, #3
    21f6:	e007      	b.n	2208 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    21f8:	1dfb      	adds	r3, r7, #7
    21fa:	781b      	ldrb	r3, [r3, #0]
    21fc:	4a05      	ldr	r2, [pc, #20]	; (2214 <sd_mmc_test_unit_ready+0x70>)
    21fe:	2100      	movs	r1, #0
    2200:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    2202:	2302      	movs	r3, #2
    2204:	e000      	b.n	2208 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    2206:	2301      	movs	r3, #1
	}
}
    2208:	0018      	movs	r0, r3
    220a:	46bd      	mov	sp, r7
    220c:	b002      	add	sp, #8
    220e:	bd80      	pop	{r7, pc}
    2210:	00001d19 	.word	0x00001d19
    2214:	200000e8 	.word	0x200000e8
    2218:	00001d8d 	.word	0x00001d8d

0000221c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    221c:	b580      	push	{r7, lr}
    221e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    2220:	2000      	movs	r0, #0
    2222:	4b03      	ldr	r3, [pc, #12]	; (2230 <sd_mmc_test_unit_ready_0+0x14>)
    2224:	4798      	blx	r3
    2226:	0003      	movs	r3, r0
}
    2228:	0018      	movs	r0, r3
    222a:	46bd      	mov	sp, r7
    222c:	bd80      	pop	{r7, pc}
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	000021a5 	.word	0x000021a5

00002234 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    2234:	b580      	push	{r7, lr}
    2236:	b082      	sub	sp, #8
    2238:	af00      	add	r7, sp, #0
    223a:	0002      	movs	r2, r0
    223c:	6039      	str	r1, [r7, #0]
    223e:	1dfb      	adds	r3, r7, #7
    2240:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    2242:	1dfb      	adds	r3, r7, #7
    2244:	781b      	ldrb	r3, [r3, #0]
    2246:	0018      	movs	r0, r3
    2248:	4b08      	ldr	r3, [pc, #32]	; (226c <sd_mmc_read_capacity+0x38>)
    224a:	4798      	blx	r3
    224c:	0003      	movs	r3, r0
    224e:	005b      	lsls	r3, r3, #1
    2250:	1e5a      	subs	r2, r3, #1
    2252:	683b      	ldr	r3, [r7, #0]
    2254:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    2256:	1dfb      	adds	r3, r7, #7
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	0018      	movs	r0, r3
    225c:	4b04      	ldr	r3, [pc, #16]	; (2270 <sd_mmc_read_capacity+0x3c>)
    225e:	4798      	blx	r3
    2260:	0003      	movs	r3, r0
}
    2262:	0018      	movs	r0, r3
    2264:	46bd      	mov	sp, r7
    2266:	b002      	add	sp, #8
    2268:	bd80      	pop	{r7, pc}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	00001dc9 	.word	0x00001dc9
    2270:	000021a5 	.word	0x000021a5

00002274 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    2274:	b580      	push	{r7, lr}
    2276:	b082      	sub	sp, #8
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	0019      	movs	r1, r3
    2280:	2000      	movs	r0, #0
    2282:	4b03      	ldr	r3, [pc, #12]	; (2290 <sd_mmc_read_capacity_0+0x1c>)
    2284:	4798      	blx	r3
    2286:	0003      	movs	r3, r0
}
    2288:	0018      	movs	r0, r3
    228a:	46bd      	mov	sp, r7
    228c:	b002      	add	sp, #8
    228e:	bd80      	pop	{r7, pc}
    2290:	00002235 	.word	0x00002235

00002294 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    2294:	b580      	push	{r7, lr}
    2296:	b082      	sub	sp, #8
    2298:	af00      	add	r7, sp, #0
    229a:	0002      	movs	r2, r0
    229c:	1dfb      	adds	r3, r7, #7
    229e:	701a      	strb	r2, [r3, #0]
    22a0:	1dbb      	adds	r3, r7, #6
    22a2:	1c0a      	adds	r2, r1, #0
    22a4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    22a6:	1dfb      	adds	r3, r7, #7
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	4a04      	ldr	r2, [pc, #16]	; (22bc <sd_mmc_unload+0x28>)
    22ac:	1db9      	adds	r1, r7, #6
    22ae:	7809      	ldrb	r1, [r1, #0]
    22b0:	54d1      	strb	r1, [r2, r3]
	return true;
    22b2:	2301      	movs	r3, #1
}
    22b4:	0018      	movs	r0, r3
    22b6:	46bd      	mov	sp, r7
    22b8:	b002      	add	sp, #8
    22ba:	bd80      	pop	{r7, pc}
    22bc:	200000e8 	.word	0x200000e8

000022c0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b082      	sub	sp, #8
    22c4:	af00      	add	r7, sp, #0
    22c6:	0002      	movs	r2, r0
    22c8:	1dfb      	adds	r3, r7, #7
    22ca:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    22cc:	1dfb      	adds	r3, r7, #7
    22ce:	781b      	ldrb	r3, [r3, #0]
    22d0:	0019      	movs	r1, r3
    22d2:	2000      	movs	r0, #0
    22d4:	4b03      	ldr	r3, [pc, #12]	; (22e4 <sd_mmc_unload_0+0x24>)
    22d6:	4798      	blx	r3
    22d8:	0003      	movs	r3, r0
}
    22da:	0018      	movs	r0, r3
    22dc:	46bd      	mov	sp, r7
    22de:	b002      	add	sp, #8
    22e0:	bd80      	pop	{r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	00002295 	.word	0x00002295

000022e8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b082      	sub	sp, #8
    22ec:	af00      	add	r7, sp, #0
    22ee:	0002      	movs	r2, r0
    22f0:	1dfb      	adds	r3, r7, #7
    22f2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    22f4:	1dfb      	adds	r3, r7, #7
    22f6:	781b      	ldrb	r3, [r3, #0]
    22f8:	0018      	movs	r0, r3
    22fa:	4b03      	ldr	r3, [pc, #12]	; (2308 <sd_mmc_wr_protect+0x20>)
    22fc:	4798      	blx	r3
    22fe:	0003      	movs	r3, r0
}
    2300:	0018      	movs	r0, r3
    2302:	46bd      	mov	sp, r7
    2304:	b002      	add	sp, #8
    2306:	bd80      	pop	{r7, pc}
    2308:	00001e05 	.word	0x00001e05

0000230c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    2310:	2000      	movs	r0, #0
    2312:	4b03      	ldr	r3, [pc, #12]	; (2320 <sd_mmc_wr_protect_0+0x14>)
    2314:	4798      	blx	r3
    2316:	0003      	movs	r3, r0
}
    2318:	0018      	movs	r0, r3
    231a:	46bd      	mov	sp, r7
    231c:	bd80      	pop	{r7, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	000022e9 	.word	0x000022e9

00002324 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    2324:	b580      	push	{r7, lr}
    2326:	b082      	sub	sp, #8
    2328:	af00      	add	r7, sp, #0
    232a:	0002      	movs	r2, r0
    232c:	1dfb      	adds	r3, r7, #7
    232e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    2330:	2301      	movs	r3, #1
}
    2332:	0018      	movs	r0, r3
    2334:	46bd      	mov	sp, r7
    2336:	b002      	add	sp, #8
    2338:	bd80      	pop	{r7, pc}
	...

0000233c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    233c:	b580      	push	{r7, lr}
    233e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    2340:	2000      	movs	r0, #0
    2342:	4b03      	ldr	r3, [pc, #12]	; (2350 <sd_mmc_removal_0+0x14>)
    2344:	4798      	blx	r3
    2346:	0003      	movs	r3, r0
}
    2348:	0018      	movs	r0, r3
    234a:	46bd      	mov	sp, r7
    234c:	bd80      	pop	{r7, pc}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	00002325 	.word	0x00002325

00002354 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    2354:	b580      	push	{r7, lr}
    2356:	b084      	sub	sp, #16
    2358:	af00      	add	r7, sp, #0
    235a:	60b9      	str	r1, [r7, #8]
    235c:	607a      	str	r2, [r7, #4]
    235e:	230f      	movs	r3, #15
    2360:	18fb      	adds	r3, r7, r3
    2362:	1c02      	adds	r2, r0, #0
    2364:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    2366:	68b9      	ldr	r1, [r7, #8]
    2368:	230f      	movs	r3, #15
    236a:	18fb      	adds	r3, r7, r3
    236c:	781b      	ldrb	r3, [r3, #0]
    236e:	2201      	movs	r2, #1
    2370:	0018      	movs	r0, r3
    2372:	4b10      	ldr	r3, [pc, #64]	; (23b4 <sd_mmc_mem_2_ram+0x60>)
    2374:	4798      	blx	r3
    2376:	1e03      	subs	r3, r0, #0
    2378:	d005      	beq.n	2386 <sd_mmc_mem_2_ram+0x32>
    237a:	2b02      	cmp	r3, #2
    237c:	d101      	bne.n	2382 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    237e:	2302      	movs	r3, #2
    2380:	e013      	b.n	23aa <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    2382:	2301      	movs	r3, #1
    2384:	e011      	b.n	23aa <sd_mmc_mem_2_ram+0x56>
		break;
    2386:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	2101      	movs	r1, #1
    238c:	0018      	movs	r0, r3
    238e:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <sd_mmc_mem_2_ram+0x64>)
    2390:	4798      	blx	r3
    2392:	1e03      	subs	r3, r0, #0
    2394:	d001      	beq.n	239a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    2396:	2301      	movs	r3, #1
    2398:	e007      	b.n	23aa <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    239a:	2000      	movs	r0, #0
    239c:	4b07      	ldr	r3, [pc, #28]	; (23bc <sd_mmc_mem_2_ram+0x68>)
    239e:	4798      	blx	r3
    23a0:	1e03      	subs	r3, r0, #0
    23a2:	d001      	beq.n	23a8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    23a4:	2301      	movs	r3, #1
    23a6:	e000      	b.n	23aa <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    23a8:	2300      	movs	r3, #0
}
    23aa:	0018      	movs	r0, r3
    23ac:	46bd      	mov	sp, r7
    23ae:	b004      	add	sp, #16
    23b0:	bd80      	pop	{r7, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	00001e1d 	.word	0x00001e1d
    23b8:	00001f09 	.word	0x00001f09
    23bc:	00001f61 	.word	0x00001f61

000023c0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	b082      	sub	sp, #8
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
    23c8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    23ca:	683a      	ldr	r2, [r7, #0]
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	0019      	movs	r1, r3
    23d0:	2000      	movs	r0, #0
    23d2:	4b03      	ldr	r3, [pc, #12]	; (23e0 <sd_mmc_mem_2_ram_0+0x20>)
    23d4:	4798      	blx	r3
    23d6:	0003      	movs	r3, r0
}
    23d8:	0018      	movs	r0, r3
    23da:	46bd      	mov	sp, r7
    23dc:	b002      	add	sp, #8
    23de:	bd80      	pop	{r7, pc}
    23e0:	00002355 	.word	0x00002355

000023e4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    23e4:	b580      	push	{r7, lr}
    23e6:	b084      	sub	sp, #16
    23e8:	af00      	add	r7, sp, #0
    23ea:	60b9      	str	r1, [r7, #8]
    23ec:	607a      	str	r2, [r7, #4]
    23ee:	230f      	movs	r3, #15
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	1c02      	adds	r2, r0, #0
    23f4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    23f6:	68b9      	ldr	r1, [r7, #8]
    23f8:	230f      	movs	r3, #15
    23fa:	18fb      	adds	r3, r7, r3
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	2201      	movs	r2, #1
    2400:	0018      	movs	r0, r3
    2402:	4b10      	ldr	r3, [pc, #64]	; (2444 <sd_mmc_ram_2_mem+0x60>)
    2404:	4798      	blx	r3
    2406:	1e03      	subs	r3, r0, #0
    2408:	d005      	beq.n	2416 <sd_mmc_ram_2_mem+0x32>
    240a:	2b02      	cmp	r3, #2
    240c:	d101      	bne.n	2412 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    240e:	2302      	movs	r3, #2
    2410:	e013      	b.n	243a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    2412:	2301      	movs	r3, #1
    2414:	e011      	b.n	243a <sd_mmc_ram_2_mem+0x56>
		break;
    2416:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	2101      	movs	r1, #1
    241c:	0018      	movs	r0, r3
    241e:	4b0a      	ldr	r3, [pc, #40]	; (2448 <sd_mmc_ram_2_mem+0x64>)
    2420:	4798      	blx	r3
    2422:	1e03      	subs	r3, r0, #0
    2424:	d001      	beq.n	242a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    2426:	2301      	movs	r3, #1
    2428:	e007      	b.n	243a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    242a:	2000      	movs	r0, #0
    242c:	4b07      	ldr	r3, [pc, #28]	; (244c <sd_mmc_ram_2_mem+0x68>)
    242e:	4798      	blx	r3
    2430:	1e03      	subs	r3, r0, #0
    2432:	d001      	beq.n	2438 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    2434:	2301      	movs	r3, #1
    2436:	e000      	b.n	243a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    2438:	2300      	movs	r3, #0
}
    243a:	0018      	movs	r0, r3
    243c:	46bd      	mov	sp, r7
    243e:	b004      	add	sp, #16
    2440:	bd80      	pop	{r7, pc}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	00001ff9 	.word	0x00001ff9
    2448:	000020e1 	.word	0x000020e1
    244c:	00002139 	.word	0x00002139

00002450 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    2450:	b580      	push	{r7, lr}
    2452:	b082      	sub	sp, #8
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
    2458:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    245a:	683a      	ldr	r2, [r7, #0]
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	0019      	movs	r1, r3
    2460:	2000      	movs	r0, #0
    2462:	4b03      	ldr	r3, [pc, #12]	; (2470 <sd_mmc_ram_2_mem_0+0x20>)
    2464:	4798      	blx	r3
    2466:	0003      	movs	r3, r0
}
    2468:	0018      	movs	r0, r3
    246a:	46bd      	mov	sp, r7
    246c:	b002      	add	sp, #8
    246e:	bd80      	pop	{r7, pc}
    2470:	000023e5 	.word	0x000023e5

00002474 <system_pinmux_get_group_from_gpio_pin>:
{
    2474:	b580      	push	{r7, lr}
    2476:	b084      	sub	sp, #16
    2478:	af00      	add	r7, sp, #0
    247a:	0002      	movs	r2, r0
    247c:	1dfb      	adds	r3, r7, #7
    247e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2480:	230f      	movs	r3, #15
    2482:	18fb      	adds	r3, r7, r3
    2484:	1dfa      	adds	r2, r7, #7
    2486:	7812      	ldrb	r2, [r2, #0]
    2488:	09d2      	lsrs	r2, r2, #7
    248a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    248c:	230e      	movs	r3, #14
    248e:	18fb      	adds	r3, r7, r3
    2490:	1dfa      	adds	r2, r7, #7
    2492:	7812      	ldrb	r2, [r2, #0]
    2494:	0952      	lsrs	r2, r2, #5
    2496:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2498:	4b0d      	ldr	r3, [pc, #52]	; (24d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    249a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    249c:	230f      	movs	r3, #15
    249e:	18fb      	adds	r3, r7, r3
    24a0:	781b      	ldrb	r3, [r3, #0]
    24a2:	2b00      	cmp	r3, #0
    24a4:	d10f      	bne.n	24c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    24a6:	230f      	movs	r3, #15
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	781b      	ldrb	r3, [r3, #0]
    24ac:	009b      	lsls	r3, r3, #2
    24ae:	2210      	movs	r2, #16
    24b0:	4694      	mov	ip, r2
    24b2:	44bc      	add	ip, r7
    24b4:	4463      	add	r3, ip
    24b6:	3b08      	subs	r3, #8
    24b8:	681a      	ldr	r2, [r3, #0]
    24ba:	230e      	movs	r3, #14
    24bc:	18fb      	adds	r3, r7, r3
    24be:	781b      	ldrb	r3, [r3, #0]
    24c0:	01db      	lsls	r3, r3, #7
    24c2:	18d3      	adds	r3, r2, r3
    24c4:	e000      	b.n	24c8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    24c6:	2300      	movs	r3, #0
}
    24c8:	0018      	movs	r0, r3
    24ca:	46bd      	mov	sp, r7
    24cc:	b004      	add	sp, #16
    24ce:	bd80      	pop	{r7, pc}
    24d0:	41004400 	.word	0x41004400

000024d4 <port_get_group_from_gpio_pin>:
{
    24d4:	b580      	push	{r7, lr}
    24d6:	b082      	sub	sp, #8
    24d8:	af00      	add	r7, sp, #0
    24da:	0002      	movs	r2, r0
    24dc:	1dfb      	adds	r3, r7, #7
    24de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    24e0:	1dfb      	adds	r3, r7, #7
    24e2:	781b      	ldrb	r3, [r3, #0]
    24e4:	0018      	movs	r0, r3
    24e6:	4b03      	ldr	r3, [pc, #12]	; (24f4 <port_get_group_from_gpio_pin+0x20>)
    24e8:	4798      	blx	r3
    24ea:	0003      	movs	r3, r0
}
    24ec:	0018      	movs	r0, r3
    24ee:	46bd      	mov	sp, r7
    24f0:	b002      	add	sp, #8
    24f2:	bd80      	pop	{r7, pc}
    24f4:	00002475 	.word	0x00002475

000024f8 <port_get_config_defaults>:
{
    24f8:	b580      	push	{r7, lr}
    24fa:	b082      	sub	sp, #8
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	2200      	movs	r2, #0
    2504:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	2201      	movs	r2, #1
    250a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	2200      	movs	r2, #0
    2510:	709a      	strb	r2, [r3, #2]
}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	46bd      	mov	sp, r7
    2516:	b002      	add	sp, #8
    2518:	bd80      	pop	{r7, pc}
	...

0000251c <port_pin_set_output_level>:
{
    251c:	b580      	push	{r7, lr}
    251e:	b084      	sub	sp, #16
    2520:	af00      	add	r7, sp, #0
    2522:	0002      	movs	r2, r0
    2524:	1dfb      	adds	r3, r7, #7
    2526:	701a      	strb	r2, [r3, #0]
    2528:	1dbb      	adds	r3, r7, #6
    252a:	1c0a      	adds	r2, r1, #0
    252c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    252e:	1dfb      	adds	r3, r7, #7
    2530:	781b      	ldrb	r3, [r3, #0]
    2532:	0018      	movs	r0, r3
    2534:	4b0d      	ldr	r3, [pc, #52]	; (256c <port_pin_set_output_level+0x50>)
    2536:	4798      	blx	r3
    2538:	0003      	movs	r3, r0
    253a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    253c:	1dfb      	adds	r3, r7, #7
    253e:	781b      	ldrb	r3, [r3, #0]
    2540:	221f      	movs	r2, #31
    2542:	4013      	ands	r3, r2
    2544:	2201      	movs	r2, #1
    2546:	409a      	lsls	r2, r3
    2548:	0013      	movs	r3, r2
    254a:	60bb      	str	r3, [r7, #8]
	if (level) {
    254c:	1dbb      	adds	r3, r7, #6
    254e:	781b      	ldrb	r3, [r3, #0]
    2550:	2b00      	cmp	r3, #0
    2552:	d003      	beq.n	255c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2554:	68fb      	ldr	r3, [r7, #12]
    2556:	68ba      	ldr	r2, [r7, #8]
    2558:	619a      	str	r2, [r3, #24]
}
    255a:	e002      	b.n	2562 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    255c:	68fb      	ldr	r3, [r7, #12]
    255e:	68ba      	ldr	r2, [r7, #8]
    2560:	615a      	str	r2, [r3, #20]
}
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	46bd      	mov	sp, r7
    2566:	b004      	add	sp, #16
    2568:	bd80      	pop	{r7, pc}
    256a:	46c0      	nop			; (mov r8, r8)
    256c:	000024d5 	.word	0x000024d5

00002570 <system_interrupt_enable>:
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
    2576:	0002      	movs	r2, r0
    2578:	1dfb      	adds	r3, r7, #7
    257a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    257c:	4b06      	ldr	r3, [pc, #24]	; (2598 <system_interrupt_enable+0x28>)
    257e:	1dfa      	adds	r2, r7, #7
    2580:	7812      	ldrb	r2, [r2, #0]
    2582:	0011      	movs	r1, r2
    2584:	221f      	movs	r2, #31
    2586:	400a      	ands	r2, r1
    2588:	2101      	movs	r1, #1
    258a:	4091      	lsls	r1, r2
    258c:	000a      	movs	r2, r1
    258e:	601a      	str	r2, [r3, #0]
}
    2590:	46c0      	nop			; (mov r8, r8)
    2592:	46bd      	mov	sp, r7
    2594:	b002      	add	sp, #8
    2596:	bd80      	pop	{r7, pc}
    2598:	e000e100 	.word	0xe000e100

0000259c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    259c:	b580      	push	{r7, lr}
    259e:	b084      	sub	sp, #16
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    25aa:	68fb      	ldr	r3, [r7, #12]
    25ac:	69db      	ldr	r3, [r3, #28]
    25ae:	1e5a      	subs	r2, r3, #1
    25b0:	4193      	sbcs	r3, r2
    25b2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    25b4:	0018      	movs	r0, r3
    25b6:	46bd      	mov	sp, r7
    25b8:	b004      	add	sp, #16
    25ba:	bd80      	pop	{r7, pc}

000025bc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    25bc:	b580      	push	{r7, lr}
    25be:	b082      	sub	sp, #8
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	2201      	movs	r2, #1
    25c8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	2200      	movs	r2, #0
    25ce:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	2200      	movs	r2, #0
    25d4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	22c0      	movs	r2, #192	; 0xc0
    25da:	0392      	lsls	r2, r2, #14
    25dc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	2200      	movs	r2, #0
    25e2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	2200      	movs	r2, #0
    25e8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	2201      	movs	r2, #1
    25ee:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	2201      	movs	r2, #1
    25f4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    25f6:	687b      	ldr	r3, [r7, #4]
    25f8:	2200      	movs	r2, #0
    25fa:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	2224      	movs	r2, #36	; 0x24
    2600:	2100      	movs	r1, #0
    2602:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	3318      	adds	r3, #24
    2608:	220c      	movs	r2, #12
    260a:	2100      	movs	r1, #0
    260c:	0018      	movs	r0, r3
    260e:	4b0a      	ldr	r3, [pc, #40]	; (2638 <spi_get_config_defaults+0x7c>)
    2610:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	4a09      	ldr	r2, [pc, #36]	; (263c <spi_get_config_defaults+0x80>)
    2616:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	2200      	movs	r2, #0
    261c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	2200      	movs	r2, #0
    2622:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	2200      	movs	r2, #0
    2628:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	2200      	movs	r2, #0
    262e:	635a      	str	r2, [r3, #52]	; 0x34

};
    2630:	46c0      	nop			; (mov r8, r8)
    2632:	46bd      	mov	sp, r7
    2634:	b002      	add	sp, #8
    2636:	bd80      	pop	{r7, pc}
    2638:	0000be53 	.word	0x0000be53
    263c:	000186a0 	.word	0x000186a0

00002640 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2640:	b580      	push	{r7, lr}
    2642:	b082      	sub	sp, #8
    2644:	af00      	add	r7, sp, #0
    2646:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	220a      	movs	r2, #10
    264c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    264e:	687b      	ldr	r3, [r7, #4]
    2650:	2200      	movs	r2, #0
    2652:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	2200      	movs	r2, #0
    2658:	709a      	strb	r2, [r3, #2]
}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	46bd      	mov	sp, r7
    265e:	b002      	add	sp, #8
    2660:	bd80      	pop	{r7, pc}
	...

00002664 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2664:	b580      	push	{r7, lr}
    2666:	b084      	sub	sp, #16
    2668:	af00      	add	r7, sp, #0
    266a:	6078      	str	r0, [r7, #4]
    266c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    266e:	683b      	ldr	r3, [r7, #0]
    2670:	781a      	ldrb	r2, [r3, #0]
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2676:	683b      	ldr	r3, [r7, #0]
    2678:	785a      	ldrb	r2, [r3, #1]
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    267e:	683b      	ldr	r3, [r7, #0]
    2680:	789a      	ldrb	r2, [r3, #2]
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2686:	230c      	movs	r3, #12
    2688:	18fb      	adds	r3, r7, r3
    268a:	0018      	movs	r0, r3
    268c:	4b0b      	ldr	r3, [pc, #44]	; (26bc <spi_attach_slave+0x58>)
    268e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2690:	230c      	movs	r3, #12
    2692:	18fb      	adds	r3, r7, r3
    2694:	2201      	movs	r2, #1
    2696:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	781b      	ldrb	r3, [r3, #0]
    269c:	220c      	movs	r2, #12
    269e:	18ba      	adds	r2, r7, r2
    26a0:	0011      	movs	r1, r2
    26a2:	0018      	movs	r0, r3
    26a4:	4b06      	ldr	r3, [pc, #24]	; (26c0 <spi_attach_slave+0x5c>)
    26a6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    26a8:	687b      	ldr	r3, [r7, #4]
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	2101      	movs	r1, #1
    26ae:	0018      	movs	r0, r3
    26b0:	4b04      	ldr	r3, [pc, #16]	; (26c4 <spi_attach_slave+0x60>)
    26b2:	4798      	blx	r3
}
    26b4:	46c0      	nop			; (mov r8, r8)
    26b6:	46bd      	mov	sp, r7
    26b8:	b004      	add	sp, #16
    26ba:	bd80      	pop	{r7, pc}
    26bc:	000024f9 	.word	0x000024f9
    26c0:	00003371 	.word	0x00003371
    26c4:	0000251d 	.word	0x0000251d

000026c8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b084      	sub	sp, #16
    26cc:	af00      	add	r7, sp, #0
    26ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	681b      	ldr	r3, [r3, #0]
    26da:	0018      	movs	r0, r3
    26dc:	4b0b      	ldr	r3, [pc, #44]	; (270c <spi_enable+0x44>)
    26de:	4798      	blx	r3
    26e0:	0003      	movs	r3, r0
    26e2:	0018      	movs	r0, r3
    26e4:	4b0a      	ldr	r3, [pc, #40]	; (2710 <spi_enable+0x48>)
    26e6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    26e8:	46c0      	nop			; (mov r8, r8)
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	0018      	movs	r0, r3
    26ee:	4b09      	ldr	r3, [pc, #36]	; (2714 <spi_enable+0x4c>)
    26f0:	4798      	blx	r3
    26f2:	1e03      	subs	r3, r0, #0
    26f4:	d1f9      	bne.n	26ea <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    26f6:	68fb      	ldr	r3, [r7, #12]
    26f8:	681b      	ldr	r3, [r3, #0]
    26fa:	2202      	movs	r2, #2
    26fc:	431a      	orrs	r2, r3
    26fe:	68fb      	ldr	r3, [r7, #12]
    2700:	601a      	str	r2, [r3, #0]
}
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	46bd      	mov	sp, r7
    2706:	b004      	add	sp, #16
    2708:	bd80      	pop	{r7, pc}
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	00003efd 	.word	0x00003efd
    2710:	00002571 	.word	0x00002571
    2714:	0000259d 	.word	0x0000259d

00002718 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    2718:	b580      	push	{r7, lr}
    271a:	b084      	sub	sp, #16
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
    2720:	000a      	movs	r2, r1
    2722:	1cfb      	adds	r3, r7, #3
    2724:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    2726:	230f      	movs	r3, #15
    2728:	18fb      	adds	r3, r7, r3
    272a:	2200      	movs	r2, #0
    272c:	701a      	strb	r2, [r3, #0]
	while (size--) {
    272e:	e038      	b.n	27a2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	1c5a      	adds	r2, r3, #1
    2734:	607a      	str	r2, [r7, #4]
    2736:	220e      	movs	r2, #14
    2738:	18ba      	adds	r2, r7, r2
    273a:	781b      	ldrb	r3, [r3, #0]
    273c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    273e:	230d      	movs	r3, #13
    2740:	18fb      	adds	r3, r7, r3
    2742:	2200      	movs	r2, #0
    2744:	701a      	strb	r2, [r3, #0]
    2746:	e027      	b.n	2798 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    2748:	230f      	movs	r3, #15
    274a:	18fa      	adds	r2, r7, r3
    274c:	230f      	movs	r3, #15
    274e:	18fb      	adds	r3, r7, r3
    2750:	781b      	ldrb	r3, [r3, #0]
    2752:	18db      	adds	r3, r3, r3
    2754:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    2756:	230e      	movs	r3, #14
    2758:	18fa      	adds	r2, r7, r3
    275a:	230f      	movs	r3, #15
    275c:	18fb      	adds	r3, r7, r3
    275e:	7812      	ldrb	r2, [r2, #0]
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	4053      	eors	r3, r2
    2764:	b2db      	uxtb	r3, r3
    2766:	b25b      	sxtb	r3, r3
    2768:	2b00      	cmp	r3, #0
    276a:	da07      	bge.n	277c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    276c:	230f      	movs	r3, #15
    276e:	18fb      	adds	r3, r7, r3
    2770:	220f      	movs	r2, #15
    2772:	18ba      	adds	r2, r7, r2
    2774:	7812      	ldrb	r2, [r2, #0]
    2776:	2109      	movs	r1, #9
    2778:	404a      	eors	r2, r1
    277a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    277c:	230e      	movs	r3, #14
    277e:	18fa      	adds	r2, r7, r3
    2780:	230e      	movs	r3, #14
    2782:	18fb      	adds	r3, r7, r3
    2784:	781b      	ldrb	r3, [r3, #0]
    2786:	18db      	adds	r3, r3, r3
    2788:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    278a:	230d      	movs	r3, #13
    278c:	18fb      	adds	r3, r7, r3
    278e:	781a      	ldrb	r2, [r3, #0]
    2790:	230d      	movs	r3, #13
    2792:	18fb      	adds	r3, r7, r3
    2794:	3201      	adds	r2, #1
    2796:	701a      	strb	r2, [r3, #0]
    2798:	230d      	movs	r3, #13
    279a:	18fb      	adds	r3, r7, r3
    279c:	781b      	ldrb	r3, [r3, #0]
    279e:	2b07      	cmp	r3, #7
    27a0:	d9d2      	bls.n	2748 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    27a2:	1cfb      	adds	r3, r7, #3
    27a4:	781b      	ldrb	r3, [r3, #0]
    27a6:	1cfa      	adds	r2, r7, #3
    27a8:	1e59      	subs	r1, r3, #1
    27aa:	7011      	strb	r1, [r2, #0]
    27ac:	2b00      	cmp	r3, #0
    27ae:	d1bf      	bne.n	2730 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    27b0:	230f      	movs	r3, #15
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	005b      	lsls	r3, r3, #1
    27b8:	b25b      	sxtb	r3, r3
    27ba:	2201      	movs	r2, #1
    27bc:	4313      	orrs	r3, r2
    27be:	b25a      	sxtb	r2, r3
    27c0:	230f      	movs	r3, #15
    27c2:	18fb      	adds	r3, r7, r3
    27c4:	701a      	strb	r2, [r3, #0]
	return crc;
    27c6:	230f      	movs	r3, #15
    27c8:	18fb      	adds	r3, r7, r3
    27ca:	781b      	ldrb	r3, [r3, #0]
}
    27cc:	0018      	movs	r0, r3
    27ce:	46bd      	mov	sp, r7
    27d0:	b004      	add	sp, #16
    27d2:	bd80      	pop	{r7, pc}

000027d4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    27d4:	b590      	push	{r4, r7, lr}
    27d6:	b083      	sub	sp, #12
    27d8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    27da:	1c7b      	adds	r3, r7, #1
    27dc:	22ff      	movs	r2, #255	; 0xff
    27de:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    27e0:	1cbb      	adds	r3, r7, #2
    27e2:	22ff      	movs	r2, #255	; 0xff
    27e4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    27e6:	1cbb      	adds	r3, r7, #2
    27e8:	881b      	ldrh	r3, [r3, #0]
    27ea:	1c79      	adds	r1, r7, #1
    27ec:	4811      	ldr	r0, [pc, #68]	; (2834 <sd_mmc_spi_wait_busy+0x60>)
    27ee:	2201      	movs	r2, #1
    27f0:	4c11      	ldr	r4, [pc, #68]	; (2838 <sd_mmc_spi_wait_busy+0x64>)
    27f2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    27f4:	4b11      	ldr	r3, [pc, #68]	; (283c <sd_mmc_spi_wait_busy+0x68>)
    27f6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    27f8:	1cbb      	adds	r3, r7, #2
    27fa:	881b      	ldrh	r3, [r3, #0]
    27fc:	1c79      	adds	r1, r7, #1
    27fe:	480d      	ldr	r0, [pc, #52]	; (2834 <sd_mmc_spi_wait_busy+0x60>)
    2800:	2201      	movs	r2, #1
    2802:	4c0d      	ldr	r4, [pc, #52]	; (2838 <sd_mmc_spi_wait_busy+0x64>)
    2804:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2806:	1cbb      	adds	r3, r7, #2
    2808:	881b      	ldrh	r3, [r3, #0]
    280a:	1c79      	adds	r1, r7, #1
    280c:	4809      	ldr	r0, [pc, #36]	; (2834 <sd_mmc_spi_wait_busy+0x60>)
    280e:	2201      	movs	r2, #1
    2810:	4c09      	ldr	r4, [pc, #36]	; (2838 <sd_mmc_spi_wait_busy+0x64>)
    2812:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    2814:	687b      	ldr	r3, [r7, #4]
    2816:	1e5a      	subs	r2, r3, #1
    2818:	607a      	str	r2, [r7, #4]
    281a:	2b00      	cmp	r3, #0
    281c:	d101      	bne.n	2822 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    281e:	2300      	movs	r3, #0
    2820:	e004      	b.n	282c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    2822:	1c7b      	adds	r3, r7, #1
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	2bff      	cmp	r3, #255	; 0xff
    2828:	d1ed      	bne.n	2806 <sd_mmc_spi_wait_busy+0x32>
	return true;
    282a:	2301      	movs	r3, #1
}
    282c:	0018      	movs	r0, r3
    282e:	46bd      	mov	sp, r7
    2830:	b003      	add	sp, #12
    2832:	bd90      	pop	{r4, r7, pc}
    2834:	200000ec 	.word	0x200000ec
    2838:	0000487d 	.word	0x0000487d
    283c:	00030d40 	.word	0x00030d40

00002840 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2840:	b590      	push	{r4, r7, lr}
    2842:	b083      	sub	sp, #12
    2844:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    2846:	1cbb      	adds	r3, r7, #2
    2848:	22ff      	movs	r2, #255	; 0xff
    284a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    284c:	1c7b      	adds	r3, r7, #1
    284e:	2200      	movs	r2, #0
    2850:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2852:	4b18      	ldr	r3, [pc, #96]	; (28b4 <sd_mmc_spi_start_read_block+0x74>)
    2854:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	1e5a      	subs	r2, r3, #1
    285a:	607a      	str	r2, [r7, #4]
    285c:	2b00      	cmp	r3, #0
    285e:	d104      	bne.n	286a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2860:	4b15      	ldr	r3, [pc, #84]	; (28b8 <sd_mmc_spi_start_read_block+0x78>)
    2862:	2204      	movs	r2, #4
    2864:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    2866:	2300      	movs	r3, #0
    2868:	e020      	b.n	28ac <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    286a:	1cbb      	adds	r3, r7, #2
    286c:	881b      	ldrh	r3, [r3, #0]
    286e:	1c79      	adds	r1, r7, #1
    2870:	4812      	ldr	r0, [pc, #72]	; (28bc <sd_mmc_spi_start_read_block+0x7c>)
    2872:	2201      	movs	r2, #1
    2874:	4c12      	ldr	r4, [pc, #72]	; (28c0 <sd_mmc_spi_start_read_block+0x80>)
    2876:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    2878:	1c7b      	adds	r3, r7, #1
    287a:	781b      	ldrb	r3, [r3, #0]
    287c:	001a      	movs	r2, r3
    287e:	23f0      	movs	r3, #240	; 0xf0
    2880:	4013      	ands	r3, r2
    2882:	d10e      	bne.n	28a2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2884:	1c7b      	adds	r3, r7, #1
    2886:	781b      	ldrb	r3, [r3, #0]
    2888:	001a      	movs	r2, r3
    288a:	2307      	movs	r3, #7
    288c:	4013      	ands	r3, r2
    288e:	d003      	beq.n	2898 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2890:	4b09      	ldr	r3, [pc, #36]	; (28b8 <sd_mmc_spi_start_read_block+0x78>)
    2892:	2207      	movs	r2, #7
    2894:	701a      	strb	r2, [r3, #0]
    2896:	e002      	b.n	289e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    2898:	4b07      	ldr	r3, [pc, #28]	; (28b8 <sd_mmc_spi_start_read_block+0x78>)
    289a:	220b      	movs	r2, #11
    289c:	701a      	strb	r2, [r3, #0]
			}
			return false;
    289e:	2300      	movs	r3, #0
    28a0:	e004      	b.n	28ac <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    28a2:	1c7b      	adds	r3, r7, #1
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	2bfe      	cmp	r3, #254	; 0xfe
    28a8:	d1d5      	bne.n	2856 <sd_mmc_spi_start_read_block+0x16>

	return true;
    28aa:	2301      	movs	r3, #1
}
    28ac:	0018      	movs	r0, r3
    28ae:	46bd      	mov	sp, r7
    28b0:	b003      	add	sp, #12
    28b2:	bd90      	pop	{r4, r7, pc}
    28b4:	0007a120 	.word	0x0007a120
    28b8:	2000012f 	.word	0x2000012f
    28bc:	200000ec 	.word	0x200000ec
    28c0:	0000487d 	.word	0x0000487d

000028c4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    28c4:	b590      	push	{r4, r7, lr}
    28c6:	b083      	sub	sp, #12
    28c8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    28ca:	1dbb      	adds	r3, r7, #6
    28cc:	22ff      	movs	r2, #255	; 0xff
    28ce:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    28d0:	1dbb      	adds	r3, r7, #6
    28d2:	881b      	ldrh	r3, [r3, #0]
    28d4:	1d39      	adds	r1, r7, #4
    28d6:	4804      	ldr	r0, [pc, #16]	; (28e8 <sd_mmc_spi_stop_read_block+0x24>)
    28d8:	2202      	movs	r2, #2
    28da:	4c04      	ldr	r4, [pc, #16]	; (28ec <sd_mmc_spi_stop_read_block+0x28>)
    28dc:	47a0      	blx	r4
			dummy);
}
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	46bd      	mov	sp, r7
    28e2:	b003      	add	sp, #12
    28e4:	bd90      	pop	{r4, r7, pc}
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	200000ec 	.word	0x200000ec
    28ec:	0000487d 	.word	0x0000487d

000028f0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    28f0:	b580      	push	{r7, lr}
    28f2:	b082      	sub	sp, #8
    28f4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    28f6:	1dfb      	adds	r3, r7, #7
    28f8:	22ff      	movs	r2, #255	; 0xff
    28fa:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    28fc:	1df9      	adds	r1, r7, #7
    28fe:	4b0d      	ldr	r3, [pc, #52]	; (2934 <sd_mmc_spi_start_write_block+0x44>)
    2900:	2201      	movs	r2, #1
    2902:	0018      	movs	r0, r3
    2904:	4b0c      	ldr	r3, [pc, #48]	; (2938 <sd_mmc_spi_start_write_block+0x48>)
    2906:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    2908:	4b0c      	ldr	r3, [pc, #48]	; (293c <sd_mmc_spi_start_write_block+0x4c>)
    290a:	881b      	ldrh	r3, [r3, #0]
    290c:	2b01      	cmp	r3, #1
    290e:	d103      	bne.n	2918 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    2910:	1dbb      	adds	r3, r7, #6
    2912:	22fe      	movs	r2, #254	; 0xfe
    2914:	701a      	strb	r2, [r3, #0]
    2916:	e002      	b.n	291e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2918:	1dbb      	adds	r3, r7, #6
    291a:	22fc      	movs	r2, #252	; 0xfc
    291c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    291e:	1db9      	adds	r1, r7, #6
    2920:	4b04      	ldr	r3, [pc, #16]	; (2934 <sd_mmc_spi_start_write_block+0x44>)
    2922:	2201      	movs	r2, #1
    2924:	0018      	movs	r0, r3
    2926:	4b04      	ldr	r3, [pc, #16]	; (2938 <sd_mmc_spi_start_write_block+0x48>)
    2928:	4798      	blx	r3
}
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	46bd      	mov	sp, r7
    292e:	b002      	add	sp, #8
    2930:	bd80      	pop	{r7, pc}
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	200000ec 	.word	0x200000ec
    2938:	00004aa1 	.word	0x00004aa1
    293c:	2000013a 	.word	0x2000013a

00002940 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2940:	b590      	push	{r4, r7, lr}
    2942:	b083      	sub	sp, #12
    2944:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    2946:	1dbb      	adds	r3, r7, #6
    2948:	22ff      	movs	r2, #255	; 0xff
    294a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    294c:	1cbb      	adds	r3, r7, #2
    294e:	2201      	movs	r2, #1
    2950:	4252      	negs	r2, r2
    2952:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2954:	1cb9      	adds	r1, r7, #2
    2956:	4b1b      	ldr	r3, [pc, #108]	; (29c4 <sd_mmc_spi_stop_write_block+0x84>)
    2958:	2202      	movs	r2, #2
    295a:	0018      	movs	r0, r3
    295c:	4b1a      	ldr	r3, [pc, #104]	; (29c8 <sd_mmc_spi_stop_write_block+0x88>)
    295e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2960:	1dbb      	adds	r3, r7, #6
    2962:	881b      	ldrh	r3, [r3, #0]
    2964:	1d79      	adds	r1, r7, #5
    2966:	4817      	ldr	r0, [pc, #92]	; (29c4 <sd_mmc_spi_stop_write_block+0x84>)
    2968:	2201      	movs	r2, #1
    296a:	4c18      	ldr	r4, [pc, #96]	; (29cc <sd_mmc_spi_stop_write_block+0x8c>)
    296c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    296e:	1d7b      	adds	r3, r7, #5
    2970:	781b      	ldrb	r3, [r3, #0]
    2972:	001a      	movs	r2, r3
    2974:	2310      	movs	r3, #16
    2976:	4013      	ands	r3, r2
    2978:	d105      	bne.n	2986 <sd_mmc_spi_stop_write_block+0x46>
    297a:	1d7b      	adds	r3, r7, #5
    297c:	781b      	ldrb	r3, [r3, #0]
    297e:	001a      	movs	r2, r3
    2980:	2301      	movs	r3, #1
    2982:	4013      	ands	r3, r2
    2984:	d104      	bne.n	2990 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2986:	4b12      	ldr	r3, [pc, #72]	; (29d0 <sd_mmc_spi_stop_write_block+0x90>)
    2988:	2201      	movs	r2, #1
    298a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    298c:	2300      	movs	r3, #0
    298e:	e014      	b.n	29ba <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2990:	1d7b      	adds	r3, r7, #5
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	001a      	movs	r2, r3
    2996:	231e      	movs	r3, #30
    2998:	4013      	ands	r3, r2
    299a:	2b04      	cmp	r3, #4
    299c:	d00b      	beq.n	29b6 <sd_mmc_spi_stop_write_block+0x76>
    299e:	2b0a      	cmp	r3, #10
    29a0:	d104      	bne.n	29ac <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    29a2:	4b0b      	ldr	r3, [pc, #44]	; (29d0 <sd_mmc_spi_stop_write_block+0x90>)
    29a4:	2208      	movs	r2, #8
    29a6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    29a8:	2300      	movs	r3, #0
    29aa:	e006      	b.n	29ba <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    29ac:	4b08      	ldr	r3, [pc, #32]	; (29d0 <sd_mmc_spi_stop_write_block+0x90>)
    29ae:	220a      	movs	r2, #10
    29b0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    29b2:	2300      	movs	r3, #0
    29b4:	e001      	b.n	29ba <sd_mmc_spi_stop_write_block+0x7a>
		break;
    29b6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    29b8:	2301      	movs	r3, #1
}
    29ba:	0018      	movs	r0, r3
    29bc:	46bd      	mov	sp, r7
    29be:	b003      	add	sp, #12
    29c0:	bd90      	pop	{r4, r7, pc}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	200000ec 	.word	0x200000ec
    29c8:	00004aa1 	.word	0x00004aa1
    29cc:	0000487d 	.word	0x0000487d
    29d0:	2000012f 	.word	0x2000012f

000029d4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    29d4:	b590      	push	{r4, r7, lr}
    29d6:	b083      	sub	sp, #12
    29d8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    29da:	4b1d      	ldr	r3, [pc, #116]	; (2a50 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    29dc:	881b      	ldrh	r3, [r3, #0]
    29de:	2b01      	cmp	r3, #1
    29e0:	d101      	bne.n	29e6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    29e2:	2301      	movs	r3, #1
    29e4:	e030      	b.n	2a48 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    29e6:	4b1a      	ldr	r3, [pc, #104]	; (2a50 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    29e8:	881b      	ldrh	r3, [r3, #0]
    29ea:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    29ec:	4b19      	ldr	r3, [pc, #100]	; (2a54 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    29ee:	681a      	ldr	r2, [r3, #0]
    29f0:	4b19      	ldr	r3, [pc, #100]	; (2a58 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    29f2:	881b      	ldrh	r3, [r3, #0]
    29f4:	0019      	movs	r1, r3
    29f6:	4b19      	ldr	r3, [pc, #100]	; (2a5c <sd_mmc_spi_stop_multiwrite_block+0x88>)
    29f8:	0010      	movs	r0, r2
    29fa:	4798      	blx	r3
    29fc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    29fe:	429c      	cmp	r4, r3
    2a00:	d901      	bls.n	2a06 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    2a02:	2301      	movs	r3, #1
    2a04:	e020      	b.n	2a48 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    2a06:	1dfb      	adds	r3, r7, #7
    2a08:	22ff      	movs	r2, #255	; 0xff
    2a0a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2a0c:	1df9      	adds	r1, r7, #7
    2a0e:	4b14      	ldr	r3, [pc, #80]	; (2a60 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2a10:	2201      	movs	r2, #1
    2a12:	0018      	movs	r0, r3
    2a14:	4b13      	ldr	r3, [pc, #76]	; (2a64 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2a16:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    2a18:	1dfb      	adds	r3, r7, #7
    2a1a:	22fd      	movs	r2, #253	; 0xfd
    2a1c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2a1e:	1df9      	adds	r1, r7, #7
    2a20:	4b0f      	ldr	r3, [pc, #60]	; (2a60 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2a22:	2201      	movs	r2, #1
    2a24:	0018      	movs	r0, r3
    2a26:	4b0f      	ldr	r3, [pc, #60]	; (2a64 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2a28:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    2a2a:	4b0f      	ldr	r3, [pc, #60]	; (2a68 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    2a2c:	4798      	blx	r3
    2a2e:	0003      	movs	r3, r0
    2a30:	001a      	movs	r2, r3
    2a32:	2301      	movs	r3, #1
    2a34:	4053      	eors	r3, r2
    2a36:	b2db      	uxtb	r3, r3
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d004      	beq.n	2a46 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2a3c:	4b0b      	ldr	r3, [pc, #44]	; (2a6c <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2a3e:	2205      	movs	r2, #5
    2a40:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2a42:	2300      	movs	r3, #0
    2a44:	e000      	b.n	2a48 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    2a46:	2301      	movs	r3, #1
}
    2a48:	0018      	movs	r0, r3
    2a4a:	46bd      	mov	sp, r7
    2a4c:	b003      	add	sp, #12
    2a4e:	bd90      	pop	{r4, r7, pc}
    2a50:	2000013a 	.word	0x2000013a
    2a54:	20000134 	.word	0x20000134
    2a58:	20000138 	.word	0x20000138
    2a5c:	0000baa5 	.word	0x0000baa5
    2a60:	200000ec 	.word	0x200000ec
    2a64:	00004aa1 	.word	0x00004aa1
    2a68:	000027d5 	.word	0x000027d5
    2a6c:	2000012f 	.word	0x2000012f

00002a70 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2a70:	b580      	push	{r7, lr}
    2a72:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2a74:	4b03      	ldr	r3, [pc, #12]	; (2a84 <sd_mmc_deinit+0x14>)
    2a76:	0018      	movs	r0, r3
    2a78:	4b03      	ldr	r3, [pc, #12]	; (2a88 <sd_mmc_deinit+0x18>)
    2a7a:	4798      	blx	r3
}
    2a7c:	46c0      	nop			; (mov r8, r8)
    2a7e:	46bd      	mov	sp, r7
    2a80:	bd80      	pop	{r7, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	200000ec 	.word	0x200000ec
    2a88:	000043d5 	.word	0x000043d5

00002a8c <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	b090      	sub	sp, #64	; 0x40
    2a90:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2a92:	4b1f      	ldr	r3, [pc, #124]	; (2b10 <sd_mmc_spi_init+0x84>)
    2a94:	2200      	movs	r2, #0
    2a96:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2a98:	233c      	movs	r3, #60	; 0x3c
    2a9a:	18fb      	adds	r3, r7, r3
    2a9c:	0018      	movs	r0, r3
    2a9e:	4b1d      	ldr	r3, [pc, #116]	; (2b14 <sd_mmc_spi_init+0x88>)
    2aa0:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2aa2:	1d3b      	adds	r3, r7, #4
    2aa4:	0018      	movs	r0, r3
    2aa6:	4b1c      	ldr	r3, [pc, #112]	; (2b18 <sd_mmc_spi_init+0x8c>)
    2aa8:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2aaa:	1d3b      	adds	r3, r7, #4
    2aac:	2280      	movs	r2, #128	; 0x80
    2aae:	0252      	lsls	r2, r2, #9
    2ab0:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2ab2:	1d3b      	adds	r3, r7, #4
    2ab4:	4a19      	ldr	r2, [pc, #100]	; (2b1c <sd_mmc_spi_init+0x90>)
    2ab6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2ab8:	1d3b      	adds	r3, r7, #4
    2aba:	4a19      	ldr	r2, [pc, #100]	; (2b20 <sd_mmc_spi_init+0x94>)
    2abc:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2abe:	1d3b      	adds	r3, r7, #4
    2ac0:	4a18      	ldr	r2, [pc, #96]	; (2b24 <sd_mmc_spi_init+0x98>)
    2ac2:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2ac4:	1d3b      	adds	r3, r7, #4
    2ac6:	4a18      	ldr	r2, [pc, #96]	; (2b28 <sd_mmc_spi_init+0x9c>)
    2ac8:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2aca:	1d3b      	adds	r3, r7, #4
    2acc:	2224      	movs	r2, #36	; 0x24
    2ace:	2100      	movs	r1, #0
    2ad0:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2ad2:	1d3b      	adds	r3, r7, #4
    2ad4:	4a15      	ldr	r2, [pc, #84]	; (2b2c <sd_mmc_spi_init+0xa0>)
    2ad6:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2ad8:	1d3a      	adds	r2, r7, #4
    2ada:	4915      	ldr	r1, [pc, #84]	; (2b30 <sd_mmc_spi_init+0xa4>)
    2adc:	4b15      	ldr	r3, [pc, #84]	; (2b34 <sd_mmc_spi_init+0xa8>)
    2ade:	0018      	movs	r0, r3
    2ae0:	4b15      	ldr	r3, [pc, #84]	; (2b38 <sd_mmc_spi_init+0xac>)
    2ae2:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    2ae4:	4b13      	ldr	r3, [pc, #76]	; (2b34 <sd_mmc_spi_init+0xa8>)
    2ae6:	0018      	movs	r0, r3
    2ae8:	4b14      	ldr	r3, [pc, #80]	; (2b3c <sd_mmc_spi_init+0xb0>)
    2aea:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2aec:	4b14      	ldr	r3, [pc, #80]	; (2b40 <sd_mmc_spi_init+0xb4>)
    2aee:	0018      	movs	r0, r3
    2af0:	4b14      	ldr	r3, [pc, #80]	; (2b44 <sd_mmc_spi_init+0xb8>)
    2af2:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    2af4:	4b14      	ldr	r3, [pc, #80]	; (2b48 <sd_mmc_spi_init+0xbc>)
    2af6:	781a      	ldrb	r2, [r3, #0]
    2af8:	4b11      	ldr	r3, [pc, #68]	; (2b40 <sd_mmc_spi_init+0xb4>)
    2afa:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2afc:	4a10      	ldr	r2, [pc, #64]	; (2b40 <sd_mmc_spi_init+0xb4>)
    2afe:	4b13      	ldr	r3, [pc, #76]	; (2b4c <sd_mmc_spi_init+0xc0>)
    2b00:	0011      	movs	r1, r2
    2b02:	0018      	movs	r0, r3
    2b04:	4b12      	ldr	r3, [pc, #72]	; (2b50 <sd_mmc_spi_init+0xc4>)
    2b06:	4798      	blx	r3
}
    2b08:	46c0      	nop			; (mov r8, r8)
    2b0a:	46bd      	mov	sp, r7
    2b0c:	b010      	add	sp, #64	; 0x40
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	2000012f 	.word	0x2000012f
    2b14:	000024f9 	.word	0x000024f9
    2b18:	000025bd 	.word	0x000025bd
    2b1c:	00100002 	.word	0x00100002
    2b20:	00110002 	.word	0x00110002
    2b24:	00120002 	.word	0x00120002
    2b28:	00130002 	.word	0x00130002
    2b2c:	00061a80 	.word	0x00061a80
    2b30:	42000c00 	.word	0x42000c00
    2b34:	200000ec 	.word	0x200000ec
    2b38:	000046ed 	.word	0x000046ed
    2b3c:	000026c9 	.word	0x000026c9
    2b40:	2000012c 	.word	0x2000012c
    2b44:	00002641 	.word	0x00002641
    2b48:	20000008 	.word	0x20000008
    2b4c:	20000128 	.word	0x20000128
    2b50:	00002665 	.word	0x00002665

00002b54 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2b54:	b590      	push	{r4, r7, lr}
    2b56:	b083      	sub	sp, #12
    2b58:	af00      	add	r7, sp, #0
    2b5a:	0004      	movs	r4, r0
    2b5c:	6039      	str	r1, [r7, #0]
    2b5e:	0010      	movs	r0, r2
    2b60:	0019      	movs	r1, r3
    2b62:	1dfb      	adds	r3, r7, #7
    2b64:	1c22      	adds	r2, r4, #0
    2b66:	701a      	strb	r2, [r3, #0]
    2b68:	1dbb      	adds	r3, r7, #6
    2b6a:	1c02      	adds	r2, r0, #0
    2b6c:	701a      	strb	r2, [r3, #0]
    2b6e:	1d7b      	adds	r3, r7, #5
    2b70:	1c0a      	adds	r2, r1, #0
    2b72:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2b74:	4b13      	ldr	r3, [pc, #76]	; (2bc4 <sd_mmc_spi_select_device+0x70>)
    2b76:	2200      	movs	r2, #0
    2b78:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	4a12      	ldr	r2, [pc, #72]	; (2bc8 <sd_mmc_spi_select_device+0x74>)
    2b7e:	4293      	cmp	r3, r2
    2b80:	d907      	bls.n	2b92 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2b82:	4b11      	ldr	r3, [pc, #68]	; (2bc8 <sd_mmc_spi_select_device+0x74>)
    2b84:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2b86:	e004      	b.n	2b92 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2b88:	683b      	ldr	r3, [r7, #0]
    2b8a:	08db      	lsrs	r3, r3, #3
    2b8c:	683a      	ldr	r2, [r7, #0]
    2b8e:	1ad3      	subs	r3, r2, r3
    2b90:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2b92:	683a      	ldr	r2, [r7, #0]
    2b94:	4b0d      	ldr	r3, [pc, #52]	; (2bcc <sd_mmc_spi_select_device+0x78>)
    2b96:	0011      	movs	r1, r2
    2b98:	0018      	movs	r0, r3
    2b9a:	4b0d      	ldr	r3, [pc, #52]	; (2bd0 <sd_mmc_spi_select_device+0x7c>)
    2b9c:	4798      	blx	r3
    2b9e:	0003      	movs	r3, r0
    2ba0:	2b17      	cmp	r3, #23
    2ba2:	d0f1      	beq.n	2b88 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2ba4:	1dfb      	adds	r3, r7, #7
    2ba6:	781a      	ldrb	r2, [r3, #0]
    2ba8:	0013      	movs	r3, r2
    2baa:	005b      	lsls	r3, r3, #1
    2bac:	189b      	adds	r3, r3, r2
    2bae:	4a09      	ldr	r2, [pc, #36]	; (2bd4 <sd_mmc_spi_select_device+0x80>)
    2bb0:	1899      	adds	r1, r3, r2
    2bb2:	4b06      	ldr	r3, [pc, #24]	; (2bcc <sd_mmc_spi_select_device+0x78>)
    2bb4:	2201      	movs	r2, #1
    2bb6:	0018      	movs	r0, r3
    2bb8:	4b07      	ldr	r3, [pc, #28]	; (2bd8 <sd_mmc_spi_select_device+0x84>)
    2bba:	4798      	blx	r3
}
    2bbc:	46c0      	nop			; (mov r8, r8)
    2bbe:	46bd      	mov	sp, r7
    2bc0:	b003      	add	sp, #12
    2bc2:	bd90      	pop	{r4, r7, pc}
    2bc4:	2000012f 	.word	0x2000012f
    2bc8:	00989680 	.word	0x00989680
    2bcc:	200000ec 	.word	0x200000ec
    2bd0:	00004415 	.word	0x00004415
    2bd4:	20000128 	.word	0x20000128
    2bd8:	000049b1 	.word	0x000049b1

00002bdc <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2bdc:	b580      	push	{r7, lr}
    2bde:	b082      	sub	sp, #8
    2be0:	af00      	add	r7, sp, #0
    2be2:	0002      	movs	r2, r0
    2be4:	1dfb      	adds	r3, r7, #7
    2be6:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2be8:	4b09      	ldr	r3, [pc, #36]	; (2c10 <sd_mmc_spi_deselect_device+0x34>)
    2bea:	2200      	movs	r2, #0
    2bec:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2bee:	1dfb      	adds	r3, r7, #7
    2bf0:	781a      	ldrb	r2, [r3, #0]
    2bf2:	0013      	movs	r3, r2
    2bf4:	005b      	lsls	r3, r3, #1
    2bf6:	189b      	adds	r3, r3, r2
    2bf8:	4a06      	ldr	r2, [pc, #24]	; (2c14 <sd_mmc_spi_deselect_device+0x38>)
    2bfa:	1899      	adds	r1, r3, r2
    2bfc:	4b06      	ldr	r3, [pc, #24]	; (2c18 <sd_mmc_spi_deselect_device+0x3c>)
    2bfe:	2200      	movs	r2, #0
    2c00:	0018      	movs	r0, r3
    2c02:	4b06      	ldr	r3, [pc, #24]	; (2c1c <sd_mmc_spi_deselect_device+0x40>)
    2c04:	4798      	blx	r3
}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	46bd      	mov	sp, r7
    2c0a:	b002      	add	sp, #8
    2c0c:	bd80      	pop	{r7, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	2000012f 	.word	0x2000012f
    2c14:	20000128 	.word	0x20000128
    2c18:	200000ec 	.word	0x200000ec
    2c1c:	000049b1 	.word	0x000049b1

00002c20 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2c20:	b580      	push	{r7, lr}
    2c22:	b082      	sub	sp, #8
    2c24:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2c26:	1dbb      	adds	r3, r7, #6
    2c28:	22ff      	movs	r2, #255	; 0xff
    2c2a:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2c2c:	4b0c      	ldr	r3, [pc, #48]	; (2c60 <sd_mmc_spi_send_clock+0x40>)
    2c2e:	2200      	movs	r2, #0
    2c30:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2c32:	1dfb      	adds	r3, r7, #7
    2c34:	2200      	movs	r2, #0
    2c36:	701a      	strb	r2, [r3, #0]
    2c38:	e00a      	b.n	2c50 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2c3a:	1db9      	adds	r1, r7, #6
    2c3c:	4b09      	ldr	r3, [pc, #36]	; (2c64 <sd_mmc_spi_send_clock+0x44>)
    2c3e:	2201      	movs	r2, #1
    2c40:	0018      	movs	r0, r3
    2c42:	4b09      	ldr	r3, [pc, #36]	; (2c68 <sd_mmc_spi_send_clock+0x48>)
    2c44:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2c46:	1dfb      	adds	r3, r7, #7
    2c48:	781a      	ldrb	r2, [r3, #0]
    2c4a:	1dfb      	adds	r3, r7, #7
    2c4c:	3201      	adds	r2, #1
    2c4e:	701a      	strb	r2, [r3, #0]
    2c50:	1dfb      	adds	r3, r7, #7
    2c52:	781b      	ldrb	r3, [r3, #0]
    2c54:	2b09      	cmp	r3, #9
    2c56:	d9f0      	bls.n	2c3a <sd_mmc_spi_send_clock+0x1a>
	}
}
    2c58:	46c0      	nop			; (mov r8, r8)
    2c5a:	46bd      	mov	sp, r7
    2c5c:	b002      	add	sp, #8
    2c5e:	bd80      	pop	{r7, pc}
    2c60:	2000012f 	.word	0x2000012f
    2c64:	200000ec 	.word	0x200000ec
    2c68:	00004aa1 	.word	0x00004aa1

00002c6c <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2c6c:	b590      	push	{r4, r7, lr}
    2c6e:	b085      	sub	sp, #20
    2c70:	af02      	add	r7, sp, #8
    2c72:	6078      	str	r0, [r7, #4]
    2c74:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2c76:	6839      	ldr	r1, [r7, #0]
    2c78:	6878      	ldr	r0, [r7, #4]
    2c7a:	2300      	movs	r3, #0
    2c7c:	9300      	str	r3, [sp, #0]
    2c7e:	2300      	movs	r3, #0
    2c80:	2200      	movs	r2, #0
    2c82:	4c03      	ldr	r4, [pc, #12]	; (2c90 <sd_mmc_spi_send_cmd+0x24>)
    2c84:	47a0      	blx	r4
    2c86:	0003      	movs	r3, r0
}
    2c88:	0018      	movs	r0, r3
    2c8a:	46bd      	mov	sp, r7
    2c8c:	b003      	add	sp, #12
    2c8e:	bd90      	pop	{r4, r7, pc}
    2c90:	00002c95 	.word	0x00002c95

00002c94 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2c94:	b590      	push	{r4, r7, lr}
    2c96:	b089      	sub	sp, #36	; 0x24
    2c98:	af00      	add	r7, sp, #0
    2c9a:	60f8      	str	r0, [r7, #12]
    2c9c:	60b9      	str	r1, [r7, #8]
    2c9e:	0019      	movs	r1, r3
    2ca0:	1dbb      	adds	r3, r7, #6
    2ca2:	801a      	strh	r2, [r3, #0]
    2ca4:	1d3b      	adds	r3, r7, #4
    2ca6:	1c0a      	adds	r2, r1, #0
    2ca8:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2caa:	231b      	movs	r3, #27
    2cac:	18fb      	adds	r3, r7, r3
    2cae:	22ff      	movs	r2, #255	; 0xff
    2cb0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2cb2:	231c      	movs	r3, #28
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	22ff      	movs	r2, #255	; 0xff
    2cb8:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2cba:	4b72      	ldr	r3, [pc, #456]	; (2e84 <sd_mmc_spi_adtc_start+0x1f0>)
    2cbc:	2200      	movs	r2, #0
    2cbe:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	b2db      	uxtb	r3, r3
    2cc4:	223f      	movs	r2, #63	; 0x3f
    2cc6:	4013      	ands	r3, r2
    2cc8:	b2db      	uxtb	r3, r3
    2cca:	2240      	movs	r2, #64	; 0x40
    2ccc:	4313      	orrs	r3, r2
    2cce:	b2da      	uxtb	r2, r3
    2cd0:	2314      	movs	r3, #20
    2cd2:	18fb      	adds	r3, r7, r3
    2cd4:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2cd6:	68bb      	ldr	r3, [r7, #8]
    2cd8:	0e1b      	lsrs	r3, r3, #24
    2cda:	b2da      	uxtb	r2, r3
    2cdc:	2314      	movs	r3, #20
    2cde:	18fb      	adds	r3, r7, r3
    2ce0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2ce2:	68bb      	ldr	r3, [r7, #8]
    2ce4:	0c1b      	lsrs	r3, r3, #16
    2ce6:	b2da      	uxtb	r2, r3
    2ce8:	2314      	movs	r3, #20
    2cea:	18fb      	adds	r3, r7, r3
    2cec:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2cee:	68bb      	ldr	r3, [r7, #8]
    2cf0:	0a1b      	lsrs	r3, r3, #8
    2cf2:	b2da      	uxtb	r2, r3
    2cf4:	2314      	movs	r3, #20
    2cf6:	18fb      	adds	r3, r7, r3
    2cf8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2cfa:	68bb      	ldr	r3, [r7, #8]
    2cfc:	b2da      	uxtb	r2, r3
    2cfe:	2314      	movs	r3, #20
    2d00:	18fb      	adds	r3, r7, r3
    2d02:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2d04:	2314      	movs	r3, #20
    2d06:	18fb      	adds	r3, r7, r3
    2d08:	2105      	movs	r1, #5
    2d0a:	0018      	movs	r0, r3
    2d0c:	4b5e      	ldr	r3, [pc, #376]	; (2e88 <sd_mmc_spi_adtc_start+0x1f4>)
    2d0e:	4798      	blx	r3
    2d10:	0003      	movs	r3, r0
    2d12:	001a      	movs	r2, r3
    2d14:	2314      	movs	r3, #20
    2d16:	18fb      	adds	r3, r7, r3
    2d18:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2d1a:	231b      	movs	r3, #27
    2d1c:	18f9      	adds	r1, r7, r3
    2d1e:	4b5b      	ldr	r3, [pc, #364]	; (2e8c <sd_mmc_spi_adtc_start+0x1f8>)
    2d20:	2201      	movs	r2, #1
    2d22:	0018      	movs	r0, r3
    2d24:	4b5a      	ldr	r3, [pc, #360]	; (2e90 <sd_mmc_spi_adtc_start+0x1fc>)
    2d26:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2d28:	2314      	movs	r3, #20
    2d2a:	18f9      	adds	r1, r7, r3
    2d2c:	4b57      	ldr	r3, [pc, #348]	; (2e8c <sd_mmc_spi_adtc_start+0x1f8>)
    2d2e:	2206      	movs	r2, #6
    2d30:	0018      	movs	r0, r3
    2d32:	4b57      	ldr	r3, [pc, #348]	; (2e90 <sd_mmc_spi_adtc_start+0x1fc>)
    2d34:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2d36:	2313      	movs	r3, #19
    2d38:	18fb      	adds	r3, r7, r3
    2d3a:	22ff      	movs	r2, #255	; 0xff
    2d3c:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2d3e:	231c      	movs	r3, #28
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	881b      	ldrh	r3, [r3, #0]
    2d44:	2213      	movs	r2, #19
    2d46:	18b9      	adds	r1, r7, r2
    2d48:	4850      	ldr	r0, [pc, #320]	; (2e8c <sd_mmc_spi_adtc_start+0x1f8>)
    2d4a:	2201      	movs	r2, #1
    2d4c:	4c51      	ldr	r4, [pc, #324]	; (2e94 <sd_mmc_spi_adtc_start+0x200>)
    2d4e:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2d50:	231f      	movs	r3, #31
    2d52:	18fb      	adds	r3, r7, r3
    2d54:	2207      	movs	r2, #7
    2d56:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2d58:	231c      	movs	r3, #28
    2d5a:	18fb      	adds	r3, r7, r3
    2d5c:	881b      	ldrh	r3, [r3, #0]
    2d5e:	2213      	movs	r2, #19
    2d60:	18b9      	adds	r1, r7, r2
    2d62:	484a      	ldr	r0, [pc, #296]	; (2e8c <sd_mmc_spi_adtc_start+0x1f8>)
    2d64:	2201      	movs	r2, #1
    2d66:	4c4b      	ldr	r4, [pc, #300]	; (2e94 <sd_mmc_spi_adtc_start+0x200>)
    2d68:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2d6a:	2313      	movs	r3, #19
    2d6c:	18fb      	adds	r3, r7, r3
    2d6e:	781b      	ldrb	r3, [r3, #0]
    2d70:	b25b      	sxtb	r3, r3
    2d72:	2b00      	cmp	r3, #0
    2d74:	da10      	bge.n	2d98 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2d76:	231f      	movs	r3, #31
    2d78:	18fb      	adds	r3, r7, r3
    2d7a:	221f      	movs	r2, #31
    2d7c:	18ba      	adds	r2, r7, r2
    2d7e:	7812      	ldrb	r2, [r2, #0]
    2d80:	3a01      	subs	r2, #1
    2d82:	701a      	strb	r2, [r3, #0]
    2d84:	231f      	movs	r3, #31
    2d86:	18fb      	adds	r3, r7, r3
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d1e4      	bne.n	2d58 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2d8e:	4b3d      	ldr	r3, [pc, #244]	; (2e84 <sd_mmc_spi_adtc_start+0x1f0>)
    2d90:	2202      	movs	r2, #2
    2d92:	701a      	strb	r2, [r3, #0]
			return false;
    2d94:	2300      	movs	r3, #0
    2d96:	e070      	b.n	2e7a <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2d98:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2d9a:	2313      	movs	r3, #19
    2d9c:	18fb      	adds	r3, r7, r3
    2d9e:	781b      	ldrb	r3, [r3, #0]
    2da0:	001a      	movs	r2, r3
    2da2:	4b3d      	ldr	r3, [pc, #244]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2da4:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2da6:	2313      	movs	r3, #19
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	001a      	movs	r2, r3
    2dae:	2308      	movs	r3, #8
    2db0:	4013      	ands	r3, r2
    2db2:	d004      	beq.n	2dbe <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2db4:	4b33      	ldr	r3, [pc, #204]	; (2e84 <sd_mmc_spi_adtc_start+0x1f0>)
    2db6:	2206      	movs	r2, #6
    2db8:	701a      	strb	r2, [r3, #0]
		return false;
    2dba:	2300      	movs	r3, #0
    2dbc:	e05d      	b.n	2e7a <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2dbe:	2313      	movs	r3, #19
    2dc0:	18fb      	adds	r3, r7, r3
    2dc2:	781b      	ldrb	r3, [r3, #0]
    2dc4:	001a      	movs	r2, r3
    2dc6:	2304      	movs	r3, #4
    2dc8:	4013      	ands	r3, r2
    2dca:	d004      	beq.n	2dd6 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2dcc:	4b2d      	ldr	r3, [pc, #180]	; (2e84 <sd_mmc_spi_adtc_start+0x1f0>)
    2dce:	2209      	movs	r2, #9
    2dd0:	701a      	strb	r2, [r3, #0]
		return false;
    2dd2:	2300      	movs	r3, #0
    2dd4:	e051      	b.n	2e7a <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2dd6:	2313      	movs	r3, #19
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	001a      	movs	r2, r3
    2dde:	2301      	movs	r3, #1
    2de0:	439a      	bics	r2, r3
    2de2:	1e13      	subs	r3, r2, #0
    2de4:	d004      	beq.n	2df0 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2de6:	4b27      	ldr	r3, [pc, #156]	; (2e84 <sd_mmc_spi_adtc_start+0x1f0>)
    2de8:	2201      	movs	r2, #1
    2dea:	701a      	strb	r2, [r3, #0]
		return false;
    2dec:	2300      	movs	r3, #0
    2dee:	e044      	b.n	2e7a <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2df0:	68fa      	ldr	r2, [r7, #12]
    2df2:	2380      	movs	r3, #128	; 0x80
    2df4:	019b      	lsls	r3, r3, #6
    2df6:	4013      	ands	r3, r2
    2df8:	d00d      	beq.n	2e16 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2dfa:	4b28      	ldr	r3, [pc, #160]	; (2e9c <sd_mmc_spi_adtc_start+0x208>)
    2dfc:	4798      	blx	r3
    2dfe:	0003      	movs	r3, r0
    2e00:	001a      	movs	r2, r3
    2e02:	2301      	movs	r3, #1
    2e04:	4053      	eors	r3, r2
    2e06:	b2db      	uxtb	r3, r3
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d004      	beq.n	2e16 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2e0c:	4b1d      	ldr	r3, [pc, #116]	; (2e84 <sd_mmc_spi_adtc_start+0x1f0>)
    2e0e:	2203      	movs	r2, #3
    2e10:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2e12:	2300      	movs	r3, #0
    2e14:	e031      	b.n	2e7a <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2e16:	68fa      	ldr	r2, [r7, #12]
    2e18:	2380      	movs	r3, #128	; 0x80
    2e1a:	009b      	lsls	r3, r3, #2
    2e1c:	4013      	ands	r3, r2
    2e1e:	d00e      	beq.n	2e3e <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2e20:	4b1d      	ldr	r3, [pc, #116]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2e22:	2200      	movs	r2, #0
    2e24:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2e26:	231c      	movs	r3, #28
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	881b      	ldrh	r3, [r3, #0]
    2e2c:	491a      	ldr	r1, [pc, #104]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2e2e:	4817      	ldr	r0, [pc, #92]	; (2e8c <sd_mmc_spi_adtc_start+0x1f8>)
    2e30:	2201      	movs	r2, #1
    2e32:	4c18      	ldr	r4, [pc, #96]	; (2e94 <sd_mmc_spi_adtc_start+0x200>)
    2e34:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2e36:	4b18      	ldr	r3, [pc, #96]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2e38:	681a      	ldr	r2, [r3, #0]
    2e3a:	4b17      	ldr	r3, [pc, #92]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2e3c:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2e3e:	68fa      	ldr	r2, [r7, #12]
    2e40:	2380      	movs	r3, #128	; 0x80
    2e42:	00db      	lsls	r3, r3, #3
    2e44:	4013      	ands	r3, r2
    2e46:	d00c      	beq.n	2e62 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2e48:	231c      	movs	r3, #28
    2e4a:	18fb      	adds	r3, r7, r3
    2e4c:	881b      	ldrh	r3, [r3, #0]
    2e4e:	4912      	ldr	r1, [pc, #72]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2e50:	480e      	ldr	r0, [pc, #56]	; (2e8c <sd_mmc_spi_adtc_start+0x1f8>)
    2e52:	2204      	movs	r2, #4
    2e54:	4c0f      	ldr	r4, [pc, #60]	; (2e94 <sd_mmc_spi_adtc_start+0x200>)
    2e56:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2e58:	4b0f      	ldr	r3, [pc, #60]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2e5a:	681b      	ldr	r3, [r3, #0]
    2e5c:	ba1a      	rev	r2, r3
    2e5e:	4b0e      	ldr	r3, [pc, #56]	; (2e98 <sd_mmc_spi_adtc_start+0x204>)
    2e60:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2e62:	4b0f      	ldr	r3, [pc, #60]	; (2ea0 <sd_mmc_spi_adtc_start+0x20c>)
    2e64:	1dba      	adds	r2, r7, #6
    2e66:	8812      	ldrh	r2, [r2, #0]
    2e68:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2e6a:	4b0e      	ldr	r3, [pc, #56]	; (2ea4 <sd_mmc_spi_adtc_start+0x210>)
    2e6c:	1d3a      	adds	r2, r7, #4
    2e6e:	8812      	ldrh	r2, [r2, #0]
    2e70:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2e72:	4b0d      	ldr	r3, [pc, #52]	; (2ea8 <sd_mmc_spi_adtc_start+0x214>)
    2e74:	2200      	movs	r2, #0
    2e76:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2e78:	2301      	movs	r3, #1
}
    2e7a:	0018      	movs	r0, r3
    2e7c:	46bd      	mov	sp, r7
    2e7e:	b009      	add	sp, #36	; 0x24
    2e80:	bd90      	pop	{r4, r7, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	2000012f 	.word	0x2000012f
    2e88:	00002719 	.word	0x00002719
    2e8c:	200000ec 	.word	0x200000ec
    2e90:	00004aa1 	.word	0x00004aa1
    2e94:	0000487d 	.word	0x0000487d
    2e98:	20000130 	.word	0x20000130
    2e9c:	000027d5 	.word	0x000027d5
    2ea0:	20000138 	.word	0x20000138
    2ea4:	2000013a 	.word	0x2000013a
    2ea8:	20000134 	.word	0x20000134

00002eac <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2eac:	b580      	push	{r7, lr}
    2eae:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2eb0:	4b02      	ldr	r3, [pc, #8]	; (2ebc <sd_mmc_spi_get_response+0x10>)
    2eb2:	681b      	ldr	r3, [r3, #0]
}
    2eb4:	0018      	movs	r0, r3
    2eb6:	46bd      	mov	sp, r7
    2eb8:	bd80      	pop	{r7, pc}
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	20000130 	.word	0x20000130

00002ec0 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    2ec0:	b590      	push	{r4, r7, lr}
    2ec2:	b085      	sub	sp, #20
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    2ec8:	230e      	movs	r3, #14
    2eca:	18fb      	adds	r3, r7, r3
    2ecc:	22ff      	movs	r2, #255	; 0xff
    2ece:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2ed0:	4b1c      	ldr	r3, [pc, #112]	; (2f44 <sd_mmc_spi_read_word+0x84>)
    2ed2:	2200      	movs	r2, #0
    2ed4:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2ed6:	4b1c      	ldr	r3, [pc, #112]	; (2f48 <sd_mmc_spi_read_word+0x88>)
    2ed8:	681a      	ldr	r2, [r3, #0]
    2eda:	4b1c      	ldr	r3, [pc, #112]	; (2f4c <sd_mmc_spi_read_word+0x8c>)
    2edc:	881b      	ldrh	r3, [r3, #0]
    2ede:	0019      	movs	r1, r3
    2ee0:	4b1b      	ldr	r3, [pc, #108]	; (2f50 <sd_mmc_spi_read_word+0x90>)
    2ee2:	0010      	movs	r0, r2
    2ee4:	4798      	blx	r3
    2ee6:	1e0b      	subs	r3, r1, #0
    2ee8:	d10a      	bne.n	2f00 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    2eea:	4b1a      	ldr	r3, [pc, #104]	; (2f54 <sd_mmc_spi_read_word+0x94>)
    2eec:	4798      	blx	r3
    2eee:	0003      	movs	r3, r0
    2ef0:	001a      	movs	r2, r3
    2ef2:	2301      	movs	r3, #1
    2ef4:	4053      	eors	r3, r2
    2ef6:	b2db      	uxtb	r3, r3
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d001      	beq.n	2f00 <sd_mmc_spi_read_word+0x40>
			return false;
    2efc:	2300      	movs	r3, #0
    2efe:	e01d      	b.n	2f3c <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    2f00:	230e      	movs	r3, #14
    2f02:	18fb      	adds	r3, r7, r3
    2f04:	881b      	ldrh	r3, [r3, #0]
    2f06:	1d39      	adds	r1, r7, #4
    2f08:	4813      	ldr	r0, [pc, #76]	; (2f58 <sd_mmc_spi_read_word+0x98>)
    2f0a:	2204      	movs	r2, #4
    2f0c:	4c13      	ldr	r4, [pc, #76]	; (2f5c <sd_mmc_spi_read_word+0x9c>)
    2f0e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	687a      	ldr	r2, [r7, #4]
    2f14:	6812      	ldr	r2, [r2, #0]
    2f16:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    2f18:	4b0b      	ldr	r3, [pc, #44]	; (2f48 <sd_mmc_spi_read_word+0x88>)
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	1d1a      	adds	r2, r3, #4
    2f1e:	4b0a      	ldr	r3, [pc, #40]	; (2f48 <sd_mmc_spi_read_word+0x88>)
    2f20:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2f22:	4b09      	ldr	r3, [pc, #36]	; (2f48 <sd_mmc_spi_read_word+0x88>)
    2f24:	681a      	ldr	r2, [r3, #0]
    2f26:	4b09      	ldr	r3, [pc, #36]	; (2f4c <sd_mmc_spi_read_word+0x8c>)
    2f28:	881b      	ldrh	r3, [r3, #0]
    2f2a:	0019      	movs	r1, r3
    2f2c:	4b08      	ldr	r3, [pc, #32]	; (2f50 <sd_mmc_spi_read_word+0x90>)
    2f2e:	0010      	movs	r0, r2
    2f30:	4798      	blx	r3
    2f32:	1e0b      	subs	r3, r1, #0
    2f34:	d101      	bne.n	2f3a <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    2f36:	4b0a      	ldr	r3, [pc, #40]	; (2f60 <sd_mmc_spi_read_word+0xa0>)
    2f38:	4798      	blx	r3
	}
	return true;
    2f3a:	2301      	movs	r3, #1
}
    2f3c:	0018      	movs	r0, r3
    2f3e:	46bd      	mov	sp, r7
    2f40:	b005      	add	sp, #20
    2f42:	bd90      	pop	{r4, r7, pc}
    2f44:	2000012f 	.word	0x2000012f
    2f48:	20000134 	.word	0x20000134
    2f4c:	20000138 	.word	0x20000138
    2f50:	0000bbb1 	.word	0x0000bbb1
    2f54:	00002841 	.word	0x00002841
    2f58:	200000ec 	.word	0x200000ec
    2f5c:	0000487d 	.word	0x0000487d
    2f60:	000028c5 	.word	0x000028c5

00002f64 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    2f64:	b590      	push	{r4, r7, lr}
    2f66:	b085      	sub	sp, #20
    2f68:	af00      	add	r7, sp, #0
    2f6a:	6078      	str	r0, [r7, #4]
    2f6c:	000a      	movs	r2, r1
    2f6e:	1cbb      	adds	r3, r7, #2
    2f70:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    2f72:	230a      	movs	r3, #10
    2f74:	18fb      	adds	r3, r7, r3
    2f76:	22ff      	movs	r2, #255	; 0xff
    2f78:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2f7a:	4b1c      	ldr	r3, [pc, #112]	; (2fec <sd_mmc_spi_start_read_blocks+0x88>)
    2f7c:	2200      	movs	r2, #0
    2f7e:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2f80:	2300      	movs	r3, #0
    2f82:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2f84:	e025      	b.n	2fd2 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    2f86:	4b1a      	ldr	r3, [pc, #104]	; (2ff0 <sd_mmc_spi_start_read_blocks+0x8c>)
    2f88:	4798      	blx	r3
    2f8a:	0003      	movs	r3, r0
    2f8c:	001a      	movs	r2, r3
    2f8e:	2301      	movs	r3, #1
    2f90:	4053      	eors	r3, r2
    2f92:	b2db      	uxtb	r3, r3
    2f94:	2b00      	cmp	r3, #0
    2f96:	d001      	beq.n	2f9c <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    2f98:	2300      	movs	r3, #0
    2f9a:	e022      	b.n	2fe2 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    2f9c:	687a      	ldr	r2, [r7, #4]
    2f9e:	68fb      	ldr	r3, [r7, #12]
    2fa0:	18d1      	adds	r1, r2, r3
    2fa2:	4b14      	ldr	r3, [pc, #80]	; (2ff4 <sd_mmc_spi_start_read_blocks+0x90>)
    2fa4:	881a      	ldrh	r2, [r3, #0]
    2fa6:	230a      	movs	r3, #10
    2fa8:	18fb      	adds	r3, r7, r3
    2faa:	881b      	ldrh	r3, [r3, #0]
    2fac:	4812      	ldr	r0, [pc, #72]	; (2ff8 <sd_mmc_spi_start_read_blocks+0x94>)
    2fae:	4c13      	ldr	r4, [pc, #76]	; (2ffc <sd_mmc_spi_start_read_blocks+0x98>)
    2fb0:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    2fb2:	4b10      	ldr	r3, [pc, #64]	; (2ff4 <sd_mmc_spi_start_read_blocks+0x90>)
    2fb4:	881b      	ldrh	r3, [r3, #0]
    2fb6:	001a      	movs	r2, r3
    2fb8:	68fb      	ldr	r3, [r7, #12]
    2fba:	189b      	adds	r3, r3, r2
    2fbc:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2fbe:	4b0d      	ldr	r3, [pc, #52]	; (2ff4 <sd_mmc_spi_start_read_blocks+0x90>)
    2fc0:	881b      	ldrh	r3, [r3, #0]
    2fc2:	001a      	movs	r2, r3
    2fc4:	4b0e      	ldr	r3, [pc, #56]	; (3000 <sd_mmc_spi_start_read_blocks+0x9c>)
    2fc6:	681b      	ldr	r3, [r3, #0]
    2fc8:	18d2      	adds	r2, r2, r3
    2fca:	4b0d      	ldr	r3, [pc, #52]	; (3000 <sd_mmc_spi_start_read_blocks+0x9c>)
    2fcc:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    2fce:	4b0d      	ldr	r3, [pc, #52]	; (3004 <sd_mmc_spi_start_read_blocks+0xa0>)
    2fd0:	4798      	blx	r3
	while (nb_block--) {
    2fd2:	1cbb      	adds	r3, r7, #2
    2fd4:	881b      	ldrh	r3, [r3, #0]
    2fd6:	1cba      	adds	r2, r7, #2
    2fd8:	1e59      	subs	r1, r3, #1
    2fda:	8011      	strh	r1, [r2, #0]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d1d2      	bne.n	2f86 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    2fe0:	2301      	movs	r3, #1
}
    2fe2:	0018      	movs	r0, r3
    2fe4:	46bd      	mov	sp, r7
    2fe6:	b005      	add	sp, #20
    2fe8:	bd90      	pop	{r4, r7, pc}
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	2000012f 	.word	0x2000012f
    2ff0:	00002841 	.word	0x00002841
    2ff4:	20000138 	.word	0x20000138
    2ff8:	200000ec 	.word	0x200000ec
    2ffc:	0000487d 	.word	0x0000487d
    3000:	20000134 	.word	0x20000134
    3004:	000028c5 	.word	0x000028c5

00003008 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    3008:	b580      	push	{r7, lr}
    300a:	af00      	add	r7, sp, #0
	return true;
    300c:	2301      	movs	r3, #1
}
    300e:	0018      	movs	r0, r3
    3010:	46bd      	mov	sp, r7
    3012:	bd80      	pop	{r7, pc}

00003014 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    3014:	b580      	push	{r7, lr}
    3016:	b084      	sub	sp, #16
    3018:	af00      	add	r7, sp, #0
    301a:	6078      	str	r0, [r7, #4]
    301c:	000a      	movs	r2, r1
    301e:	1cbb      	adds	r3, r7, #2
    3020:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3022:	4b24      	ldr	r3, [pc, #144]	; (30b4 <sd_mmc_spi_start_write_blocks+0xa0>)
    3024:	2200      	movs	r2, #0
    3026:	701a      	strb	r2, [r3, #0]
	pos = 0;
    3028:	2300      	movs	r3, #0
    302a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    302c:	e035      	b.n	309a <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    302e:	4b22      	ldr	r3, [pc, #136]	; (30b8 <sd_mmc_spi_start_write_blocks+0xa4>)
    3030:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    3032:	687a      	ldr	r2, [r7, #4]
    3034:	68fb      	ldr	r3, [r7, #12]
    3036:	18d1      	adds	r1, r2, r3
    3038:	4b20      	ldr	r3, [pc, #128]	; (30bc <sd_mmc_spi_start_write_blocks+0xa8>)
    303a:	881a      	ldrh	r2, [r3, #0]
    303c:	4b20      	ldr	r3, [pc, #128]	; (30c0 <sd_mmc_spi_start_write_blocks+0xac>)
    303e:	0018      	movs	r0, r3
    3040:	4b20      	ldr	r3, [pc, #128]	; (30c4 <sd_mmc_spi_start_write_blocks+0xb0>)
    3042:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    3044:	4b1d      	ldr	r3, [pc, #116]	; (30bc <sd_mmc_spi_start_write_blocks+0xa8>)
    3046:	881b      	ldrh	r3, [r3, #0]
    3048:	001a      	movs	r2, r3
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	189b      	adds	r3, r3, r2
    304e:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    3050:	4b1a      	ldr	r3, [pc, #104]	; (30bc <sd_mmc_spi_start_write_blocks+0xa8>)
    3052:	881b      	ldrh	r3, [r3, #0]
    3054:	001a      	movs	r2, r3
    3056:	4b1c      	ldr	r3, [pc, #112]	; (30c8 <sd_mmc_spi_start_write_blocks+0xb4>)
    3058:	681b      	ldr	r3, [r3, #0]
    305a:	18d2      	adds	r2, r2, r3
    305c:	4b1a      	ldr	r3, [pc, #104]	; (30c8 <sd_mmc_spi_start_write_blocks+0xb4>)
    305e:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    3060:	4b1a      	ldr	r3, [pc, #104]	; (30cc <sd_mmc_spi_start_write_blocks+0xb8>)
    3062:	4798      	blx	r3
    3064:	0003      	movs	r3, r0
    3066:	001a      	movs	r2, r3
    3068:	2301      	movs	r3, #1
    306a:	4053      	eors	r3, r2
    306c:	b2db      	uxtb	r3, r3
    306e:	2b00      	cmp	r3, #0
    3070:	d001      	beq.n	3076 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    3072:	2300      	movs	r3, #0
    3074:	e019      	b.n	30aa <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    3076:	1cbb      	adds	r3, r7, #2
    3078:	881b      	ldrh	r3, [r3, #0]
    307a:	2b00      	cmp	r3, #0
    307c:	d00d      	beq.n	309a <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    307e:	4b14      	ldr	r3, [pc, #80]	; (30d0 <sd_mmc_spi_start_write_blocks+0xbc>)
    3080:	4798      	blx	r3
    3082:	0003      	movs	r3, r0
    3084:	001a      	movs	r2, r3
    3086:	2301      	movs	r3, #1
    3088:	4053      	eors	r3, r2
    308a:	b2db      	uxtb	r3, r3
    308c:	2b00      	cmp	r3, #0
    308e:	d004      	beq.n	309a <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    3090:	4b08      	ldr	r3, [pc, #32]	; (30b4 <sd_mmc_spi_start_write_blocks+0xa0>)
    3092:	2205      	movs	r2, #5
    3094:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    3096:	2300      	movs	r3, #0
    3098:	e007      	b.n	30aa <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    309a:	1cbb      	adds	r3, r7, #2
    309c:	881b      	ldrh	r3, [r3, #0]
    309e:	1cba      	adds	r2, r7, #2
    30a0:	1e59      	subs	r1, r3, #1
    30a2:	8011      	strh	r1, [r2, #0]
    30a4:	2b00      	cmp	r3, #0
    30a6:	d1c2      	bne.n	302e <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    30a8:	2301      	movs	r3, #1
}
    30aa:	0018      	movs	r0, r3
    30ac:	46bd      	mov	sp, r7
    30ae:	b004      	add	sp, #16
    30b0:	bd80      	pop	{r7, pc}
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	2000012f 	.word	0x2000012f
    30b8:	000028f1 	.word	0x000028f1
    30bc:	20000138 	.word	0x20000138
    30c0:	200000ec 	.word	0x200000ec
    30c4:	00004aa1 	.word	0x00004aa1
    30c8:	20000134 	.word	0x20000134
    30cc:	00002941 	.word	0x00002941
    30d0:	000027d5 	.word	0x000027d5

000030d4 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    30d4:	b580      	push	{r7, lr}
    30d6:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    30d8:	4b09      	ldr	r3, [pc, #36]	; (3100 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    30da:	4798      	blx	r3
    30dc:	0003      	movs	r3, r0
    30de:	001a      	movs	r2, r3
    30e0:	2301      	movs	r3, #1
    30e2:	4053      	eors	r3, r2
    30e4:	b2db      	uxtb	r3, r3
    30e6:	2b00      	cmp	r3, #0
    30e8:	d004      	beq.n	30f4 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    30ea:	4b06      	ldr	r3, [pc, #24]	; (3104 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    30ec:	2205      	movs	r2, #5
    30ee:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    30f0:	2300      	movs	r3, #0
    30f2:	e002      	b.n	30fa <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    30f4:	4b04      	ldr	r3, [pc, #16]	; (3108 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    30f6:	4798      	blx	r3
    30f8:	0003      	movs	r3, r0
}
    30fa:	0018      	movs	r0, r3
    30fc:	46bd      	mov	sp, r7
    30fe:	bd80      	pop	{r7, pc}
    3100:	000027d5 	.word	0x000027d5
    3104:	2000012f 	.word	0x2000012f
    3108:	000029d5 	.word	0x000029d5

0000310c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    310c:	b580      	push	{r7, lr}
    310e:	b084      	sub	sp, #16
    3110:	af00      	add	r7, sp, #0
    3112:	0002      	movs	r2, r0
    3114:	1dfb      	adds	r3, r7, #7
    3116:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    3118:	1dfb      	adds	r3, r7, #7
    311a:	781b      	ldrb	r3, [r3, #0]
    311c:	2b00      	cmp	r3, #0
    311e:	d108      	bne.n	3132 <mem_test_unit_ready+0x26>
    3120:	1dfb      	adds	r3, r7, #7
    3122:	781a      	ldrb	r2, [r3, #0]
    3124:	4b08      	ldr	r3, [pc, #32]	; (3148 <mem_test_unit_ready+0x3c>)
    3126:	0152      	lsls	r2, r2, #5
    3128:	58d3      	ldr	r3, [r2, r3]
    312a:	4798      	blx	r3
    312c:	0003      	movs	r3, r0
    312e:	001a      	movs	r2, r3
    3130:	e000      	b.n	3134 <mem_test_unit_ready+0x28>
    3132:	2201      	movs	r2, #1
  status =
    3134:	230f      	movs	r3, #15
    3136:	18fb      	adds	r3, r7, r3
    3138:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    313a:	230f      	movs	r3, #15
    313c:	18fb      	adds	r3, r7, r3
    313e:	781b      	ldrb	r3, [r3, #0]
}
    3140:	0018      	movs	r0, r3
    3142:	46bd      	mov	sp, r7
    3144:	b004      	add	sp, #16
    3146:	bd80      	pop	{r7, pc}
    3148:	0000cea0 	.word	0x0000cea0

0000314c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    314c:	b580      	push	{r7, lr}
    314e:	b084      	sub	sp, #16
    3150:	af00      	add	r7, sp, #0
    3152:	0002      	movs	r2, r0
    3154:	6039      	str	r1, [r7, #0]
    3156:	1dfb      	adds	r3, r7, #7
    3158:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    315a:	1dfb      	adds	r3, r7, #7
    315c:	781b      	ldrb	r3, [r3, #0]
    315e:	2b00      	cmp	r3, #0
    3160:	d10c      	bne.n	317c <mem_read_capacity+0x30>
    3162:	1dfb      	adds	r3, r7, #7
    3164:	781b      	ldrb	r3, [r3, #0]
    3166:	4a0b      	ldr	r2, [pc, #44]	; (3194 <mem_read_capacity+0x48>)
    3168:	015b      	lsls	r3, r3, #5
    316a:	18d3      	adds	r3, r2, r3
    316c:	3304      	adds	r3, #4
    316e:	681b      	ldr	r3, [r3, #0]
    3170:	683a      	ldr	r2, [r7, #0]
    3172:	0010      	movs	r0, r2
    3174:	4798      	blx	r3
    3176:	0003      	movs	r3, r0
    3178:	001a      	movs	r2, r3
    317a:	e000      	b.n	317e <mem_read_capacity+0x32>
    317c:	2201      	movs	r2, #1
  status =
    317e:	230f      	movs	r3, #15
    3180:	18fb      	adds	r3, r7, r3
    3182:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    3184:	230f      	movs	r3, #15
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
}
    318a:	0018      	movs	r0, r3
    318c:	46bd      	mov	sp, r7
    318e:	b004      	add	sp, #16
    3190:	bd80      	pop	{r7, pc}
    3192:	46c0      	nop			; (mov r8, r8)
    3194:	0000cea0 	.word	0x0000cea0

00003198 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    3198:	b580      	push	{r7, lr}
    319a:	b084      	sub	sp, #16
    319c:	af00      	add	r7, sp, #0
    319e:	0002      	movs	r2, r0
    31a0:	1dfb      	adds	r3, r7, #7
    31a2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    31a4:	1dfb      	adds	r3, r7, #7
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	425a      	negs	r2, r3
    31aa:	4153      	adcs	r3, r2
    31ac:	b2da      	uxtb	r2, r3
  sector_size =
    31ae:	230f      	movs	r3, #15
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    31b4:	230f      	movs	r3, #15
    31b6:	18fb      	adds	r3, r7, r3
    31b8:	781b      	ldrb	r3, [r3, #0]
}
    31ba:	0018      	movs	r0, r3
    31bc:	46bd      	mov	sp, r7
    31be:	b004      	add	sp, #16
    31c0:	bd80      	pop	{r7, pc}
	...

000031c4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    31c4:	b580      	push	{r7, lr}
    31c6:	b084      	sub	sp, #16
    31c8:	af00      	add	r7, sp, #0
    31ca:	0002      	movs	r2, r0
    31cc:	1dfb      	adds	r3, r7, #7
    31ce:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    31d0:	1dfb      	adds	r3, r7, #7
    31d2:	781b      	ldrb	r3, [r3, #0]
    31d4:	2b00      	cmp	r3, #0
    31d6:	d109      	bne.n	31ec <mem_wr_protect+0x28>
    31d8:	1dfb      	adds	r3, r7, #7
    31da:	781b      	ldrb	r3, [r3, #0]
    31dc:	4a0a      	ldr	r2, [pc, #40]	; (3208 <mem_wr_protect+0x44>)
    31de:	015b      	lsls	r3, r3, #5
    31e0:	18d3      	adds	r3, r2, r3
    31e2:	330c      	adds	r3, #12
    31e4:	681b      	ldr	r3, [r3, #0]
    31e6:	4798      	blx	r3
    31e8:	1e03      	subs	r3, r0, #0
    31ea:	d001      	beq.n	31f0 <mem_wr_protect+0x2c>
    31ec:	2201      	movs	r2, #1
    31ee:	e000      	b.n	31f2 <mem_wr_protect+0x2e>
    31f0:	2200      	movs	r2, #0
  wr_protect =
    31f2:	230f      	movs	r3, #15
    31f4:	18fb      	adds	r3, r7, r3
    31f6:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    31f8:	230f      	movs	r3, #15
    31fa:	18fb      	adds	r3, r7, r3
    31fc:	781b      	ldrb	r3, [r3, #0]
}
    31fe:	0018      	movs	r0, r3
    3200:	46bd      	mov	sp, r7
    3202:	b004      	add	sp, #16
    3204:	bd80      	pop	{r7, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	0000cea0 	.word	0x0000cea0

0000320c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    320c:	b580      	push	{r7, lr}
    320e:	b086      	sub	sp, #24
    3210:	af00      	add	r7, sp, #0
    3212:	60b9      	str	r1, [r7, #8]
    3214:	607a      	str	r2, [r7, #4]
    3216:	230f      	movs	r3, #15
    3218:	18fb      	adds	r3, r7, r3
    321a:	1c02      	adds	r2, r0, #0
    321c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    321e:	230f      	movs	r3, #15
    3220:	18fb      	adds	r3, r7, r3
    3222:	781b      	ldrb	r3, [r3, #0]
    3224:	2b00      	cmp	r3, #0
    3226:	d10e      	bne.n	3246 <memory_2_ram+0x3a>
    3228:	230f      	movs	r3, #15
    322a:	18fb      	adds	r3, r7, r3
    322c:	781b      	ldrb	r3, [r3, #0]
    322e:	4a0b      	ldr	r2, [pc, #44]	; (325c <memory_2_ram+0x50>)
    3230:	015b      	lsls	r3, r3, #5
    3232:	18d3      	adds	r3, r2, r3
    3234:	3314      	adds	r3, #20
    3236:	681b      	ldr	r3, [r3, #0]
    3238:	6879      	ldr	r1, [r7, #4]
    323a:	68ba      	ldr	r2, [r7, #8]
    323c:	0010      	movs	r0, r2
    323e:	4798      	blx	r3
    3240:	0003      	movs	r3, r0
    3242:	001a      	movs	r2, r3
    3244:	e000      	b.n	3248 <memory_2_ram+0x3c>
    3246:	2201      	movs	r2, #1
  status =
    3248:	2317      	movs	r3, #23
    324a:	18fb      	adds	r3, r7, r3
    324c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    324e:	2317      	movs	r3, #23
    3250:	18fb      	adds	r3, r7, r3
    3252:	781b      	ldrb	r3, [r3, #0]
}
    3254:	0018      	movs	r0, r3
    3256:	46bd      	mov	sp, r7
    3258:	b006      	add	sp, #24
    325a:	bd80      	pop	{r7, pc}
    325c:	0000cea0 	.word	0x0000cea0

00003260 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    3260:	b580      	push	{r7, lr}
    3262:	b086      	sub	sp, #24
    3264:	af00      	add	r7, sp, #0
    3266:	60b9      	str	r1, [r7, #8]
    3268:	607a      	str	r2, [r7, #4]
    326a:	230f      	movs	r3, #15
    326c:	18fb      	adds	r3, r7, r3
    326e:	1c02      	adds	r2, r0, #0
    3270:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    3272:	230f      	movs	r3, #15
    3274:	18fb      	adds	r3, r7, r3
    3276:	781b      	ldrb	r3, [r3, #0]
    3278:	2b00      	cmp	r3, #0
    327a:	d10e      	bne.n	329a <ram_2_memory+0x3a>
    327c:	230f      	movs	r3, #15
    327e:	18fb      	adds	r3, r7, r3
    3280:	781b      	ldrb	r3, [r3, #0]
    3282:	4a0b      	ldr	r2, [pc, #44]	; (32b0 <ram_2_memory+0x50>)
    3284:	015b      	lsls	r3, r3, #5
    3286:	18d3      	adds	r3, r2, r3
    3288:	3318      	adds	r3, #24
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	6879      	ldr	r1, [r7, #4]
    328e:	68ba      	ldr	r2, [r7, #8]
    3290:	0010      	movs	r0, r2
    3292:	4798      	blx	r3
    3294:	0003      	movs	r3, r0
    3296:	001a      	movs	r2, r3
    3298:	e000      	b.n	329c <ram_2_memory+0x3c>
    329a:	2201      	movs	r2, #1
  status =
    329c:	2317      	movs	r3, #23
    329e:	18fb      	adds	r3, r7, r3
    32a0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    32a2:	2317      	movs	r3, #23
    32a4:	18fb      	adds	r3, r7, r3
    32a6:	781b      	ldrb	r3, [r3, #0]
}
    32a8:	0018      	movs	r0, r3
    32aa:	46bd      	mov	sp, r7
    32ac:	b006      	add	sp, #24
    32ae:	bd80      	pop	{r7, pc}
    32b0:	0000cea0 	.word	0x0000cea0

000032b4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b082      	sub	sp, #8
    32b8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    32ba:	4b10      	ldr	r3, [pc, #64]	; (32fc <cpu_irq_enter_critical+0x48>)
    32bc:	681b      	ldr	r3, [r3, #0]
    32be:	2b00      	cmp	r3, #0
    32c0:	d112      	bne.n	32e8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32c2:	f3ef 8310 	mrs	r3, PRIMASK
    32c6:	607b      	str	r3, [r7, #4]
  return(result);
    32c8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    32ca:	2b00      	cmp	r3, #0
    32cc:	d109      	bne.n	32e2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    32ce:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    32d0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    32d4:	4b0a      	ldr	r3, [pc, #40]	; (3300 <cpu_irq_enter_critical+0x4c>)
    32d6:	2200      	movs	r2, #0
    32d8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    32da:	4b0a      	ldr	r3, [pc, #40]	; (3304 <cpu_irq_enter_critical+0x50>)
    32dc:	2201      	movs	r2, #1
    32de:	701a      	strb	r2, [r3, #0]
    32e0:	e002      	b.n	32e8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    32e2:	4b08      	ldr	r3, [pc, #32]	; (3304 <cpu_irq_enter_critical+0x50>)
    32e4:	2200      	movs	r2, #0
    32e6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    32e8:	4b04      	ldr	r3, [pc, #16]	; (32fc <cpu_irq_enter_critical+0x48>)
    32ea:	681b      	ldr	r3, [r3, #0]
    32ec:	1c5a      	adds	r2, r3, #1
    32ee:	4b03      	ldr	r3, [pc, #12]	; (32fc <cpu_irq_enter_critical+0x48>)
    32f0:	601a      	str	r2, [r3, #0]
}
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	46bd      	mov	sp, r7
    32f6:	b002      	add	sp, #8
    32f8:	bd80      	pop	{r7, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	2000013c 	.word	0x2000013c
    3300:	20000009 	.word	0x20000009
    3304:	20000140 	.word	0x20000140

00003308 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3308:	b580      	push	{r7, lr}
    330a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    330c:	4b0b      	ldr	r3, [pc, #44]	; (333c <cpu_irq_leave_critical+0x34>)
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	1e5a      	subs	r2, r3, #1
    3312:	4b0a      	ldr	r3, [pc, #40]	; (333c <cpu_irq_leave_critical+0x34>)
    3314:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3316:	4b09      	ldr	r3, [pc, #36]	; (333c <cpu_irq_leave_critical+0x34>)
    3318:	681b      	ldr	r3, [r3, #0]
    331a:	2b00      	cmp	r3, #0
    331c:	d10a      	bne.n	3334 <cpu_irq_leave_critical+0x2c>
    331e:	4b08      	ldr	r3, [pc, #32]	; (3340 <cpu_irq_leave_critical+0x38>)
    3320:	781b      	ldrb	r3, [r3, #0]
    3322:	b2db      	uxtb	r3, r3
    3324:	2b00      	cmp	r3, #0
    3326:	d005      	beq.n	3334 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3328:	4b06      	ldr	r3, [pc, #24]	; (3344 <cpu_irq_leave_critical+0x3c>)
    332a:	2201      	movs	r2, #1
    332c:	701a      	strb	r2, [r3, #0]
    332e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3332:	b662      	cpsie	i
	}
}
    3334:	46c0      	nop			; (mov r8, r8)
    3336:	46bd      	mov	sp, r7
    3338:	bd80      	pop	{r7, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	2000013c 	.word	0x2000013c
    3340:	20000140 	.word	0x20000140
    3344:	20000009 	.word	0x20000009

00003348 <system_pinmux_get_config_defaults>:
{
    3348:	b580      	push	{r7, lr}
    334a:	b082      	sub	sp, #8
    334c:	af00      	add	r7, sp, #0
    334e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	2280      	movs	r2, #128	; 0x80
    3354:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	2200      	movs	r2, #0
    335a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	2201      	movs	r2, #1
    3360:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	2200      	movs	r2, #0
    3366:	70da      	strb	r2, [r3, #3]
}
    3368:	46c0      	nop			; (mov r8, r8)
    336a:	46bd      	mov	sp, r7
    336c:	b002      	add	sp, #8
    336e:	bd80      	pop	{r7, pc}

00003370 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3370:	b580      	push	{r7, lr}
    3372:	b084      	sub	sp, #16
    3374:	af00      	add	r7, sp, #0
    3376:	0002      	movs	r2, r0
    3378:	6039      	str	r1, [r7, #0]
    337a:	1dfb      	adds	r3, r7, #7
    337c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    337e:	230c      	movs	r3, #12
    3380:	18fb      	adds	r3, r7, r3
    3382:	0018      	movs	r0, r3
    3384:	4b10      	ldr	r3, [pc, #64]	; (33c8 <port_pin_set_config+0x58>)
    3386:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3388:	230c      	movs	r3, #12
    338a:	18fb      	adds	r3, r7, r3
    338c:	2280      	movs	r2, #128	; 0x80
    338e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3390:	683b      	ldr	r3, [r7, #0]
    3392:	781a      	ldrb	r2, [r3, #0]
    3394:	230c      	movs	r3, #12
    3396:	18fb      	adds	r3, r7, r3
    3398:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    339a:	683b      	ldr	r3, [r7, #0]
    339c:	785a      	ldrb	r2, [r3, #1]
    339e:	230c      	movs	r3, #12
    33a0:	18fb      	adds	r3, r7, r3
    33a2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    33a4:	683b      	ldr	r3, [r7, #0]
    33a6:	789a      	ldrb	r2, [r3, #2]
    33a8:	230c      	movs	r3, #12
    33aa:	18fb      	adds	r3, r7, r3
    33ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    33ae:	230c      	movs	r3, #12
    33b0:	18fa      	adds	r2, r7, r3
    33b2:	1dfb      	adds	r3, r7, #7
    33b4:	781b      	ldrb	r3, [r3, #0]
    33b6:	0011      	movs	r1, r2
    33b8:	0018      	movs	r0, r3
    33ba:	4b04      	ldr	r3, [pc, #16]	; (33cc <port_pin_set_config+0x5c>)
    33bc:	4798      	blx	r3
}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	46bd      	mov	sp, r7
    33c2:	b004      	add	sp, #16
    33c4:	bd80      	pop	{r7, pc}
    33c6:	46c0      	nop			; (mov r8, r8)
    33c8:	00003349 	.word	0x00003349
    33cc:	00006c2d 	.word	0x00006c2d

000033d0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    33d0:	b580      	push	{r7, lr}
    33d2:	b082      	sub	sp, #8
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	2200      	movs	r2, #0
    33dc:	701a      	strb	r2, [r3, #0]
}
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	46bd      	mov	sp, r7
    33e2:	b002      	add	sp, #8
    33e4:	bd80      	pop	{r7, pc}
	...

000033e8 <system_apb_clock_set_mask>:
{
    33e8:	b580      	push	{r7, lr}
    33ea:	b082      	sub	sp, #8
    33ec:	af00      	add	r7, sp, #0
    33ee:	0002      	movs	r2, r0
    33f0:	6039      	str	r1, [r7, #0]
    33f2:	1dfb      	adds	r3, r7, #7
    33f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    33f6:	1dfb      	adds	r3, r7, #7
    33f8:	781b      	ldrb	r3, [r3, #0]
    33fa:	2b01      	cmp	r3, #1
    33fc:	d00a      	beq.n	3414 <system_apb_clock_set_mask+0x2c>
    33fe:	2b02      	cmp	r3, #2
    3400:	d00f      	beq.n	3422 <system_apb_clock_set_mask+0x3a>
    3402:	2b00      	cmp	r3, #0
    3404:	d114      	bne.n	3430 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3406:	4b0e      	ldr	r3, [pc, #56]	; (3440 <system_apb_clock_set_mask+0x58>)
    3408:	4a0d      	ldr	r2, [pc, #52]	; (3440 <system_apb_clock_set_mask+0x58>)
    340a:	6991      	ldr	r1, [r2, #24]
    340c:	683a      	ldr	r2, [r7, #0]
    340e:	430a      	orrs	r2, r1
    3410:	619a      	str	r2, [r3, #24]
			break;
    3412:	e00f      	b.n	3434 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3414:	4b0a      	ldr	r3, [pc, #40]	; (3440 <system_apb_clock_set_mask+0x58>)
    3416:	4a0a      	ldr	r2, [pc, #40]	; (3440 <system_apb_clock_set_mask+0x58>)
    3418:	69d1      	ldr	r1, [r2, #28]
    341a:	683a      	ldr	r2, [r7, #0]
    341c:	430a      	orrs	r2, r1
    341e:	61da      	str	r2, [r3, #28]
			break;
    3420:	e008      	b.n	3434 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3422:	4b07      	ldr	r3, [pc, #28]	; (3440 <system_apb_clock_set_mask+0x58>)
    3424:	4a06      	ldr	r2, [pc, #24]	; (3440 <system_apb_clock_set_mask+0x58>)
    3426:	6a11      	ldr	r1, [r2, #32]
    3428:	683a      	ldr	r2, [r7, #0]
    342a:	430a      	orrs	r2, r1
    342c:	621a      	str	r2, [r3, #32]
			break;
    342e:	e001      	b.n	3434 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3430:	2317      	movs	r3, #23
    3432:	e000      	b.n	3436 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3434:	2300      	movs	r3, #0
}
    3436:	0018      	movs	r0, r3
    3438:	46bd      	mov	sp, r7
    343a:	b002      	add	sp, #8
    343c:	bd80      	pop	{r7, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	40000400 	.word	0x40000400

00003444 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3444:	b580      	push	{r7, lr}
    3446:	b084      	sub	sp, #16
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	681b      	ldr	r3, [r3, #0]
    3450:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3452:	68fb      	ldr	r3, [r7, #12]
    3454:	7a9b      	ldrb	r3, [r3, #10]
    3456:	b2db      	uxtb	r3, r3
    3458:	b25b      	sxtb	r3, r3
    345a:	2b00      	cmp	r3, #0
    345c:	da01      	bge.n	3462 <rtc_calendar_is_syncing+0x1e>
                return true;
    345e:	2301      	movs	r3, #1
    3460:	e000      	b.n	3464 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    3462:	2300      	movs	r3, #0
}
    3464:	0018      	movs	r0, r3
    3466:	46bd      	mov	sp, r7
    3468:	b004      	add	sp, #16
    346a:	bd80      	pop	{r7, pc}

0000346c <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    346c:	b580      	push	{r7, lr}
    346e:	b084      	sub	sp, #16
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	0018      	movs	r0, r3
    3480:	4b07      	ldr	r3, [pc, #28]	; (34a0 <rtc_calendar_enable+0x34>)
    3482:	4798      	blx	r3
    3484:	1e03      	subs	r3, r0, #0
    3486:	d1f9      	bne.n	347c <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3488:	68fb      	ldr	r3, [r7, #12]
    348a:	881b      	ldrh	r3, [r3, #0]
    348c:	b29b      	uxth	r3, r3
    348e:	2202      	movs	r2, #2
    3490:	4313      	orrs	r3, r2
    3492:	b29a      	uxth	r2, r3
    3494:	68fb      	ldr	r3, [r7, #12]
    3496:	801a      	strh	r2, [r3, #0]
}
    3498:	46c0      	nop			; (mov r8, r8)
    349a:	46bd      	mov	sp, r7
    349c:	b004      	add	sp, #16
    349e:	bd80      	pop	{r7, pc}
    34a0:	00003445 	.word	0x00003445

000034a4 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    34a4:	b580      	push	{r7, lr}
    34a6:	b084      	sub	sp, #16
    34a8:	af00      	add	r7, sp, #0
    34aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	681b      	ldr	r3, [r3, #0]
    34b0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	0018      	movs	r0, r3
    34b8:	4b0a      	ldr	r3, [pc, #40]	; (34e4 <rtc_calendar_disable+0x40>)
    34ba:	4798      	blx	r3
    34bc:	1e03      	subs	r3, r0, #0
    34be:	d1f9      	bne.n	34b4 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    34c0:	68fb      	ldr	r3, [r7, #12]
    34c2:	22c1      	movs	r2, #193	; 0xc1
    34c4:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    34c6:	68fb      	ldr	r3, [r7, #12]
    34c8:	22c1      	movs	r2, #193	; 0xc1
    34ca:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	881b      	ldrh	r3, [r3, #0]
    34d0:	b29b      	uxth	r3, r3
    34d2:	2202      	movs	r2, #2
    34d4:	4393      	bics	r3, r2
    34d6:	b29a      	uxth	r2, r3
    34d8:	68fb      	ldr	r3, [r7, #12]
    34da:	801a      	strh	r2, [r3, #0]
}
    34dc:	46c0      	nop			; (mov r8, r8)
    34de:	46bd      	mov	sp, r7
    34e0:	b004      	add	sp, #16
    34e2:	bd80      	pop	{r7, pc}
    34e4:	00003445 	.word	0x00003445

000034e8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    34e8:	b580      	push	{r7, lr}
    34ea:	b084      	sub	sp, #16
    34ec:	af00      	add	r7, sp, #0
    34ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	681b      	ldr	r3, [r3, #0]
    34f4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	0018      	movs	r0, r3
    34fa:	4b0a      	ldr	r3, [pc, #40]	; (3524 <rtc_calendar_reset+0x3c>)
    34fc:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	687b      	ldr	r3, [r7, #4]
    3502:	0018      	movs	r0, r3
    3504:	4b08      	ldr	r3, [pc, #32]	; (3528 <rtc_calendar_reset+0x40>)
    3506:	4798      	blx	r3
    3508:	1e03      	subs	r3, r0, #0
    350a:	d1f9      	bne.n	3500 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    350c:	68fb      	ldr	r3, [r7, #12]
    350e:	881b      	ldrh	r3, [r3, #0]
    3510:	b29b      	uxth	r3, r3
    3512:	2201      	movs	r2, #1
    3514:	4313      	orrs	r3, r2
    3516:	b29a      	uxth	r2, r3
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	801a      	strh	r2, [r3, #0]
}
    351c:	46c0      	nop			; (mov r8, r8)
    351e:	46bd      	mov	sp, r7
    3520:	b004      	add	sp, #16
    3522:	bd80      	pop	{r7, pc}
    3524:	000034a5 	.word	0x000034a5
    3528:	00003445 	.word	0x00003445

0000352c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    352c:	b580      	push	{r7, lr}
    352e:	b084      	sub	sp, #16
    3530:	af00      	add	r7, sp, #0
    3532:	6078      	str	r0, [r7, #4]
    3534:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    3536:	683b      	ldr	r3, [r7, #0]
    3538:	88db      	ldrh	r3, [r3, #6]
    353a:	001a      	movs	r2, r3
    353c:	687b      	ldr	r3, [r7, #4]
    353e:	88db      	ldrh	r3, [r3, #6]
    3540:	1ad3      	subs	r3, r2, r3
    3542:	069b      	lsls	r3, r3, #26
    3544:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    3546:	683b      	ldr	r3, [r7, #0]
    3548:	795b      	ldrb	r3, [r3, #5]
    354a:	059b      	lsls	r3, r3, #22
    354c:	001a      	movs	r2, r3
    354e:	68fb      	ldr	r3, [r7, #12]
    3550:	4313      	orrs	r3, r2
    3552:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3554:	683b      	ldr	r3, [r7, #0]
    3556:	791b      	ldrb	r3, [r3, #4]
    3558:	045b      	lsls	r3, r3, #17
    355a:	001a      	movs	r2, r3
    355c:	68fb      	ldr	r3, [r7, #12]
    355e:	4313      	orrs	r3, r2
    3560:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    3562:	683b      	ldr	r3, [r7, #0]
    3564:	789b      	ldrb	r3, [r3, #2]
    3566:	031b      	lsls	r3, r3, #12
    3568:	001a      	movs	r2, r3
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	4313      	orrs	r3, r2
    356e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    3570:	687b      	ldr	r3, [r7, #4]
    3572:	791b      	ldrb	r3, [r3, #4]
    3574:	2201      	movs	r2, #1
    3576:	4053      	eors	r3, r2
    3578:	b2db      	uxtb	r3, r3
    357a:	2b00      	cmp	r3, #0
    357c:	d008      	beq.n	3590 <rtc_calendar_time_to_register_value+0x64>
    357e:	683b      	ldr	r3, [r7, #0]
    3580:	78db      	ldrb	r3, [r3, #3]
    3582:	2b00      	cmp	r3, #0
    3584:	d004      	beq.n	3590 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    3586:	68fb      	ldr	r3, [r7, #12]
    3588:	2280      	movs	r2, #128	; 0x80
    358a:	0252      	lsls	r2, r2, #9
    358c:	4313      	orrs	r3, r2
    358e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    3590:	683b      	ldr	r3, [r7, #0]
    3592:	785b      	ldrb	r3, [r3, #1]
    3594:	019b      	lsls	r3, r3, #6
    3596:	001a      	movs	r2, r3
    3598:	68fb      	ldr	r3, [r7, #12]
    359a:	4313      	orrs	r3, r2
    359c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    359e:	683b      	ldr	r3, [r7, #0]
    35a0:	781b      	ldrb	r3, [r3, #0]
    35a2:	001a      	movs	r2, r3
    35a4:	68fb      	ldr	r3, [r7, #12]
    35a6:	4313      	orrs	r3, r2
    35a8:	60fb      	str	r3, [r7, #12]

	return register_value;
    35aa:	68fb      	ldr	r3, [r7, #12]
}
    35ac:	0018      	movs	r0, r3
    35ae:	46bd      	mov	sp, r7
    35b0:	b004      	add	sp, #16
    35b2:	bd80      	pop	{r7, pc}

000035b4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b084      	sub	sp, #16
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	60b9      	str	r1, [r7, #8]
    35be:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    35c0:	68bb      	ldr	r3, [r7, #8]
    35c2:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    35c4:	b29a      	uxth	r2, r3
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	88db      	ldrh	r3, [r3, #6]
    35ca:	18d3      	adds	r3, r2, r3
    35cc:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    35d2:	68bb      	ldr	r3, [r7, #8]
    35d4:	0d9b      	lsrs	r3, r3, #22
    35d6:	b2db      	uxtb	r3, r3
    35d8:	220f      	movs	r2, #15
    35da:	4013      	ands	r3, r2
    35dc:	b2da      	uxtb	r2, r3
    35de:	687b      	ldr	r3, [r7, #4]
    35e0:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    35e2:	68bb      	ldr	r3, [r7, #8]
    35e4:	0c5b      	lsrs	r3, r3, #17
    35e6:	b2db      	uxtb	r3, r3
    35e8:	221f      	movs	r2, #31
    35ea:	4013      	ands	r3, r2
    35ec:	b2da      	uxtb	r2, r3
    35ee:	687b      	ldr	r3, [r7, #4]
    35f0:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    35f2:	68fb      	ldr	r3, [r7, #12]
    35f4:	791b      	ldrb	r3, [r3, #4]
    35f6:	2b00      	cmp	r3, #0
    35f8:	d008      	beq.n	360c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    35fa:	68bb      	ldr	r3, [r7, #8]
    35fc:	0b1b      	lsrs	r3, r3, #12
    35fe:	b2db      	uxtb	r3, r3
    3600:	221f      	movs	r2, #31
    3602:	4013      	ands	r3, r2
    3604:	b2da      	uxtb	r2, r3
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	709a      	strb	r2, [r3, #2]
    360a:	e010      	b.n	362e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    360c:	68bb      	ldr	r3, [r7, #8]
    360e:	0b1b      	lsrs	r3, r3, #12
    3610:	b2db      	uxtb	r3, r3
    3612:	220f      	movs	r2, #15
    3614:	4013      	ands	r3, r2
    3616:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    361c:	68ba      	ldr	r2, [r7, #8]
    361e:	2380      	movs	r3, #128	; 0x80
    3620:	025b      	lsls	r3, r3, #9
    3622:	4013      	ands	r3, r2
    3624:	1e5a      	subs	r2, r3, #1
    3626:	4193      	sbcs	r3, r2
    3628:	b2da      	uxtb	r2, r3
    362a:	687b      	ldr	r3, [r7, #4]
    362c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    362e:	68bb      	ldr	r3, [r7, #8]
    3630:	099b      	lsrs	r3, r3, #6
    3632:	b2db      	uxtb	r3, r3
    3634:	223f      	movs	r2, #63	; 0x3f
    3636:	4013      	ands	r3, r2
    3638:	b2da      	uxtb	r2, r3
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    363e:	68bb      	ldr	r3, [r7, #8]
    3640:	b2db      	uxtb	r3, r3
    3642:	223f      	movs	r2, #63	; 0x3f
    3644:	4013      	ands	r3, r2
    3646:	b2da      	uxtb	r2, r3
    3648:	687b      	ldr	r3, [r7, #4]
    364a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    364c:	46c0      	nop			; (mov r8, r8)
    364e:	46bd      	mov	sp, r7
    3650:	b004      	add	sp, #16
    3652:	bd80      	pop	{r7, pc}

00003654 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    3654:	b580      	push	{r7, lr}
    3656:	b084      	sub	sp, #16
    3658:	af00      	add	r7, sp, #0
    365a:	6078      	str	r0, [r7, #4]
    365c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	681b      	ldr	r3, [r3, #0]
    3662:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3664:	683b      	ldr	r3, [r7, #0]
    3666:	881a      	ldrh	r2, [r3, #0]
    3668:	230e      	movs	r3, #14
    366a:	18fb      	adds	r3, r7, r3
    366c:	2108      	movs	r1, #8
    366e:	430a      	orrs	r2, r1
    3670:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    3672:	683b      	ldr	r3, [r7, #0]
    3674:	791b      	ldrb	r3, [r3, #4]
    3676:	2201      	movs	r2, #1
    3678:	4053      	eors	r3, r2
    367a:	b2db      	uxtb	r3, r3
    367c:	2b00      	cmp	r3, #0
    367e:	d007      	beq.n	3690 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3680:	230e      	movs	r3, #14
    3682:	18fb      	adds	r3, r7, r3
    3684:	220e      	movs	r2, #14
    3686:	18ba      	adds	r2, r7, r2
    3688:	8812      	ldrh	r2, [r2, #0]
    368a:	2140      	movs	r1, #64	; 0x40
    368c:	430a      	orrs	r2, r1
    368e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3690:	683b      	ldr	r3, [r7, #0]
    3692:	789b      	ldrb	r3, [r3, #2]
    3694:	2b00      	cmp	r3, #0
    3696:	d007      	beq.n	36a8 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    3698:	230e      	movs	r3, #14
    369a:	18fb      	adds	r3, r7, r3
    369c:	220e      	movs	r2, #14
    369e:	18ba      	adds	r2, r7, r2
    36a0:	8812      	ldrh	r2, [r2, #0]
    36a2:	2180      	movs	r1, #128	; 0x80
    36a4:	430a      	orrs	r2, r1
    36a6:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    36a8:	68bb      	ldr	r3, [r7, #8]
    36aa:	220e      	movs	r2, #14
    36ac:	18ba      	adds	r2, r7, r2
    36ae:	8812      	ldrh	r2, [r2, #0]
    36b0:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    36b2:	683b      	ldr	r3, [r7, #0]
    36b4:	78db      	ldrb	r3, [r3, #3]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d008      	beq.n	36cc <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    36ba:	68bb      	ldr	r3, [r7, #8]
    36bc:	885b      	ldrh	r3, [r3, #2]
    36be:	b29b      	uxth	r3, r3
    36c0:	2280      	movs	r2, #128	; 0x80
    36c2:	01d2      	lsls	r2, r2, #7
    36c4:	4313      	orrs	r3, r2
    36c6:	b29a      	uxth	r2, r3
    36c8:	68bb      	ldr	r3, [r7, #8]
    36ca:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    36cc:	230d      	movs	r3, #13
    36ce:	18fb      	adds	r3, r7, r3
    36d0:	2200      	movs	r2, #0
    36d2:	701a      	strb	r2, [r3, #0]
    36d4:	e017      	b.n	3706 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    36d6:	230d      	movs	r3, #13
    36d8:	18fb      	adds	r3, r7, r3
    36da:	781a      	ldrb	r2, [r3, #0]
    36dc:	0013      	movs	r3, r2
    36de:	009b      	lsls	r3, r3, #2
    36e0:	189b      	adds	r3, r3, r2
    36e2:	005b      	lsls	r3, r3, #1
    36e4:	3308      	adds	r3, #8
    36e6:	683a      	ldr	r2, [r7, #0]
    36e8:	18d1      	adds	r1, r2, r3
    36ea:	230d      	movs	r3, #13
    36ec:	18fb      	adds	r3, r7, r3
    36ee:	781a      	ldrb	r2, [r3, #0]
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	0018      	movs	r0, r3
    36f4:	4b08      	ldr	r3, [pc, #32]	; (3718 <_rtc_calendar_set_config+0xc4>)
    36f6:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    36f8:	230d      	movs	r3, #13
    36fa:	18fb      	adds	r3, r7, r3
    36fc:	781a      	ldrb	r2, [r3, #0]
    36fe:	230d      	movs	r3, #13
    3700:	18fb      	adds	r3, r7, r3
    3702:	3201      	adds	r2, #1
    3704:	701a      	strb	r2, [r3, #0]
    3706:	230d      	movs	r3, #13
    3708:	18fb      	adds	r3, r7, r3
    370a:	781b      	ldrb	r3, [r3, #0]
    370c:	2b00      	cmp	r3, #0
    370e:	d0e2      	beq.n	36d6 <_rtc_calendar_set_config+0x82>
	}
}
    3710:	46c0      	nop			; (mov r8, r8)
    3712:	46bd      	mov	sp, r7
    3714:	b004      	add	sp, #16
    3716:	bd80      	pop	{r7, pc}
    3718:	0000383d 	.word	0x0000383d

0000371c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    371c:	b580      	push	{r7, lr}
    371e:	b086      	sub	sp, #24
    3720:	af00      	add	r7, sp, #0
    3722:	60f8      	str	r0, [r7, #12]
    3724:	60b9      	str	r1, [r7, #8]
    3726:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3728:	68fb      	ldr	r3, [r7, #12]
    372a:	68ba      	ldr	r2, [r7, #8]
    372c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    372e:	2120      	movs	r1, #32
    3730:	2000      	movs	r0, #0
    3732:	4b18      	ldr	r3, [pc, #96]	; (3794 <rtc_calendar_init+0x78>)
    3734:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3736:	2314      	movs	r3, #20
    3738:	18fb      	adds	r3, r7, r3
    373a:	0018      	movs	r0, r3
    373c:	4b16      	ldr	r3, [pc, #88]	; (3798 <rtc_calendar_init+0x7c>)
    373e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3740:	2314      	movs	r3, #20
    3742:	18fb      	adds	r3, r7, r3
    3744:	2202      	movs	r2, #2
    3746:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3748:	2314      	movs	r3, #20
    374a:	18fb      	adds	r3, r7, r3
    374c:	0019      	movs	r1, r3
    374e:	2004      	movs	r0, #4
    3750:	4b12      	ldr	r3, [pc, #72]	; (379c <rtc_calendar_init+0x80>)
    3752:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3754:	2004      	movs	r0, #4
    3756:	4b12      	ldr	r3, [pc, #72]	; (37a0 <rtc_calendar_init+0x84>)
    3758:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    375a:	68fb      	ldr	r3, [r7, #12]
    375c:	0018      	movs	r0, r3
    375e:	4b11      	ldr	r3, [pc, #68]	; (37a4 <rtc_calendar_init+0x88>)
    3760:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    3762:	687b      	ldr	r3, [r7, #4]
    3764:	791a      	ldrb	r2, [r3, #4]
    3766:	68fb      	ldr	r3, [r7, #12]
    3768:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    376a:	687b      	ldr	r3, [r7, #4]
    376c:	78da      	ldrb	r2, [r3, #3]
    376e:	68fb      	ldr	r3, [r7, #12]
    3770:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    3772:	687b      	ldr	r3, [r7, #4]
    3774:	88da      	ldrh	r2, [r3, #6]
    3776:	68fb      	ldr	r3, [r7, #12]
    3778:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    377a:	4b0b      	ldr	r3, [pc, #44]	; (37a8 <rtc_calendar_init+0x8c>)
    377c:	68fa      	ldr	r2, [r7, #12]
    377e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    3780:	687a      	ldr	r2, [r7, #4]
    3782:	68fb      	ldr	r3, [r7, #12]
    3784:	0011      	movs	r1, r2
    3786:	0018      	movs	r0, r3
    3788:	4b08      	ldr	r3, [pc, #32]	; (37ac <rtc_calendar_init+0x90>)
    378a:	4798      	blx	r3
}
    378c:	46c0      	nop			; (mov r8, r8)
    378e:	46bd      	mov	sp, r7
    3790:	b006      	add	sp, #24
    3792:	bd80      	pop	{r7, pc}
    3794:	000033e9 	.word	0x000033e9
    3798:	000033d1 	.word	0x000033d1
    379c:	00006941 	.word	0x00006941
    37a0:	00006985 	.word	0x00006985
    37a4:	000034e9 	.word	0x000034e9
    37a8:	200009d0 	.word	0x200009d0
    37ac:	00003655 	.word	0x00003655

000037b0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    37b0:	b580      	push	{r7, lr}
    37b2:	b084      	sub	sp, #16
    37b4:	af00      	add	r7, sp, #0
    37b6:	6078      	str	r0, [r7, #4]
    37b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	681b      	ldr	r3, [r3, #0]
    37be:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    37c0:	687b      	ldr	r3, [r7, #4]
    37c2:	795b      	ldrb	r3, [r3, #5]
    37c4:	2201      	movs	r2, #1
    37c6:	4053      	eors	r3, r2
    37c8:	b2db      	uxtb	r3, r3
    37ca:	2b00      	cmp	r3, #0
    37cc:	d00a      	beq.n	37e4 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	4a16      	ldr	r2, [pc, #88]	; (382c <rtc_calendar_get_time+0x7c>)
    37d2:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    37d4:	46c0      	nop			; (mov r8, r8)
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	0018      	movs	r0, r3
    37da:	4b15      	ldr	r3, [pc, #84]	; (3830 <rtc_calendar_get_time+0x80>)
    37dc:	4798      	blx	r3
    37de:	1e03      	subs	r3, r0, #0
    37e0:	d1f9      	bne.n	37d6 <rtc_calendar_get_time+0x26>
    37e2:	e016      	b.n	3812 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    37e4:	68fb      	ldr	r3, [r7, #12]
    37e6:	885b      	ldrh	r3, [r3, #2]
    37e8:	b29b      	uxth	r3, r3
    37ea:	001a      	movs	r2, r3
    37ec:	2380      	movs	r3, #128	; 0x80
    37ee:	01db      	lsls	r3, r3, #7
    37f0:	4013      	ands	r3, r2
    37f2:	d10e      	bne.n	3812 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    37f4:	68fb      	ldr	r3, [r7, #12]
    37f6:	885b      	ldrh	r3, [r3, #2]
    37f8:	b29b      	uxth	r3, r3
    37fa:	4a0e      	ldr	r2, [pc, #56]	; (3834 <rtc_calendar_get_time+0x84>)
    37fc:	4313      	orrs	r3, r2
    37fe:	b29a      	uxth	r2, r3
    3800:	68fb      	ldr	r3, [r7, #12]
    3802:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    3804:	46c0      	nop			; (mov r8, r8)
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	0018      	movs	r0, r3
    380a:	4b09      	ldr	r3, [pc, #36]	; (3830 <rtc_calendar_get_time+0x80>)
    380c:	4798      	blx	r3
    380e:	1e03      	subs	r3, r0, #0
    3810:	d1f9      	bne.n	3806 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    3812:	68fb      	ldr	r3, [r7, #12]
    3814:	691b      	ldr	r3, [r3, #16]
    3816:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    3818:	683a      	ldr	r2, [r7, #0]
    381a:	68b9      	ldr	r1, [r7, #8]
    381c:	687b      	ldr	r3, [r7, #4]
    381e:	0018      	movs	r0, r3
    3820:	4b05      	ldr	r3, [pc, #20]	; (3838 <rtc_calendar_get_time+0x88>)
    3822:	4798      	blx	r3
}
    3824:	46c0      	nop			; (mov r8, r8)
    3826:	46bd      	mov	sp, r7
    3828:	b004      	add	sp, #16
    382a:	bd80      	pop	{r7, pc}
    382c:	ffff8000 	.word	0xffff8000
    3830:	00003445 	.word	0x00003445
    3834:	ffffc000 	.word	0xffffc000
    3838:	000035b5 	.word	0x000035b5

0000383c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    383c:	b580      	push	{r7, lr}
    383e:	b086      	sub	sp, #24
    3840:	af00      	add	r7, sp, #0
    3842:	60f8      	str	r0, [r7, #12]
    3844:	60b9      	str	r1, [r7, #8]
    3846:	1dfb      	adds	r3, r7, #7
    3848:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    384a:	68fb      	ldr	r3, [r7, #12]
    384c:	681b      	ldr	r3, [r3, #0]
    384e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3850:	1dfb      	adds	r3, r7, #7
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	2b01      	cmp	r3, #1
    3856:	d901      	bls.n	385c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3858:	2317      	movs	r3, #23
    385a:	e021      	b.n	38a0 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    385c:	68ba      	ldr	r2, [r7, #8]
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	0011      	movs	r1, r2
    3862:	0018      	movs	r0, r3
    3864:	4b10      	ldr	r3, [pc, #64]	; (38a8 <rtc_calendar_set_alarm+0x6c>)
    3866:	4798      	blx	r3
    3868:	0003      	movs	r3, r0
    386a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    386c:	46c0      	nop			; (mov r8, r8)
    386e:	68fb      	ldr	r3, [r7, #12]
    3870:	0018      	movs	r0, r3
    3872:	4b0e      	ldr	r3, [pc, #56]	; (38ac <rtc_calendar_set_alarm+0x70>)
    3874:	4798      	blx	r3
    3876:	1e03      	subs	r3, r0, #0
    3878:	d1f9      	bne.n	386e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    387a:	1dfb      	adds	r3, r7, #7
    387c:	781a      	ldrb	r2, [r3, #0]
    387e:	697b      	ldr	r3, [r7, #20]
    3880:	3203      	adds	r2, #3
    3882:	00d2      	lsls	r2, r2, #3
    3884:	6939      	ldr	r1, [r7, #16]
    3886:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3888:	1dfb      	adds	r3, r7, #7
    388a:	781b      	ldrb	r3, [r3, #0]
    388c:	68ba      	ldr	r2, [r7, #8]
    388e:	7a11      	ldrb	r1, [r2, #8]
    3890:	697a      	ldr	r2, [r7, #20]
    3892:	3303      	adds	r3, #3
    3894:	00db      	lsls	r3, r3, #3
    3896:	18d3      	adds	r3, r2, r3
    3898:	3304      	adds	r3, #4
    389a:	1c0a      	adds	r2, r1, #0
    389c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    389e:	2300      	movs	r3, #0
}
    38a0:	0018      	movs	r0, r3
    38a2:	46bd      	mov	sp, r7
    38a4:	b006      	add	sp, #24
    38a6:	bd80      	pop	{r7, pc}
    38a8:	0000352d 	.word	0x0000352d
    38ac:	00003445 	.word	0x00003445

000038b0 <system_gclk_chan_get_config_defaults>:
{
    38b0:	b580      	push	{r7, lr}
    38b2:	b082      	sub	sp, #8
    38b4:	af00      	add	r7, sp, #0
    38b6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	2200      	movs	r2, #0
    38bc:	701a      	strb	r2, [r3, #0]
}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	46bd      	mov	sp, r7
    38c2:	b002      	add	sp, #8
    38c4:	bd80      	pop	{r7, pc}

000038c6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    38c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c8:	b08d      	sub	sp, #52	; 0x34
    38ca:	af00      	add	r7, sp, #0
    38cc:	60b8      	str	r0, [r7, #8]
    38ce:	60f9      	str	r1, [r7, #12]
    38d0:	603a      	str	r2, [r7, #0]
    38d2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    38d4:	2300      	movs	r3, #0
    38d6:	2400      	movs	r4, #0
    38d8:	623b      	str	r3, [r7, #32]
    38da:	627c      	str	r4, [r7, #36]	; 0x24
    38dc:	2300      	movs	r3, #0
    38de:	2400      	movs	r4, #0
    38e0:	61bb      	str	r3, [r7, #24]
    38e2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    38e4:	233f      	movs	r3, #63	; 0x3f
    38e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    38e8:	e053      	b.n	3992 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    38ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ec:	3b20      	subs	r3, #32
    38ee:	2b00      	cmp	r3, #0
    38f0:	db04      	blt.n	38fc <long_division+0x36>
    38f2:	2201      	movs	r2, #1
    38f4:	409a      	lsls	r2, r3
    38f6:	0013      	movs	r3, r2
    38f8:	617b      	str	r3, [r7, #20]
    38fa:	e00b      	b.n	3914 <long_division+0x4e>
    38fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38fe:	2220      	movs	r2, #32
    3900:	1ad3      	subs	r3, r2, r3
    3902:	2201      	movs	r2, #1
    3904:	40da      	lsrs	r2, r3
    3906:	0013      	movs	r3, r2
    3908:	2100      	movs	r1, #0
    390a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    390c:	4091      	lsls	r1, r2
    390e:	000a      	movs	r2, r1
    3910:	4313      	orrs	r3, r2
    3912:	617b      	str	r3, [r7, #20]
    3914:	2201      	movs	r2, #1
    3916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3918:	409a      	lsls	r2, r3
    391a:	0013      	movs	r3, r2
    391c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    391e:	69bb      	ldr	r3, [r7, #24]
    3920:	69fc      	ldr	r4, [r7, #28]
    3922:	18db      	adds	r3, r3, r3
    3924:	4164      	adcs	r4, r4
    3926:	61bb      	str	r3, [r7, #24]
    3928:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    392a:	68bb      	ldr	r3, [r7, #8]
    392c:	693a      	ldr	r2, [r7, #16]
    392e:	401a      	ands	r2, r3
    3930:	0015      	movs	r5, r2
    3932:	68fb      	ldr	r3, [r7, #12]
    3934:	697a      	ldr	r2, [r7, #20]
    3936:	401a      	ands	r2, r3
    3938:	0016      	movs	r6, r2
    393a:	002b      	movs	r3, r5
    393c:	4333      	orrs	r3, r6
    393e:	d007      	beq.n	3950 <long_division+0x8a>
			r |= 0x01;
    3940:	69bb      	ldr	r3, [r7, #24]
    3942:	2201      	movs	r2, #1
    3944:	4313      	orrs	r3, r2
    3946:	61bb      	str	r3, [r7, #24]
    3948:	69fb      	ldr	r3, [r7, #28]
    394a:	2200      	movs	r2, #0
    394c:	4313      	orrs	r3, r2
    394e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3950:	687a      	ldr	r2, [r7, #4]
    3952:	69fb      	ldr	r3, [r7, #28]
    3954:	429a      	cmp	r2, r3
    3956:	d819      	bhi.n	398c <long_division+0xc6>
    3958:	687a      	ldr	r2, [r7, #4]
    395a:	69fb      	ldr	r3, [r7, #28]
    395c:	429a      	cmp	r2, r3
    395e:	d103      	bne.n	3968 <long_division+0xa2>
    3960:	683a      	ldr	r2, [r7, #0]
    3962:	69bb      	ldr	r3, [r7, #24]
    3964:	429a      	cmp	r2, r3
    3966:	d811      	bhi.n	398c <long_division+0xc6>
			r = r - d;
    3968:	69b9      	ldr	r1, [r7, #24]
    396a:	69fa      	ldr	r2, [r7, #28]
    396c:	683b      	ldr	r3, [r7, #0]
    396e:	687c      	ldr	r4, [r7, #4]
    3970:	1ac9      	subs	r1, r1, r3
    3972:	41a2      	sbcs	r2, r4
    3974:	000b      	movs	r3, r1
    3976:	0014      	movs	r4, r2
    3978:	61bb      	str	r3, [r7, #24]
    397a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    397c:	6a3a      	ldr	r2, [r7, #32]
    397e:	693b      	ldr	r3, [r7, #16]
    3980:	4313      	orrs	r3, r2
    3982:	623b      	str	r3, [r7, #32]
    3984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3986:	697b      	ldr	r3, [r7, #20]
    3988:	4313      	orrs	r3, r2
    398a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    398e:	3b01      	subs	r3, #1
    3990:	62fb      	str	r3, [r7, #44]	; 0x2c
    3992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3994:	2b00      	cmp	r3, #0
    3996:	daa8      	bge.n	38ea <long_division+0x24>
		}
	}

	return q;
    3998:	6a3b      	ldr	r3, [r7, #32]
    399a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    399c:	0018      	movs	r0, r3
    399e:	0021      	movs	r1, r4
    39a0:	46bd      	mov	sp, r7
    39a2:	b00d      	add	sp, #52	; 0x34
    39a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000039a6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    39a6:	b580      	push	{r7, lr}
    39a8:	b086      	sub	sp, #24
    39aa:	af00      	add	r7, sp, #0
    39ac:	60f8      	str	r0, [r7, #12]
    39ae:	60b9      	str	r1, [r7, #8]
    39b0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    39b2:	2316      	movs	r3, #22
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	2200      	movs	r2, #0
    39b8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    39ba:	68bb      	ldr	r3, [r7, #8]
    39bc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    39be:	68bb      	ldr	r3, [r7, #8]
    39c0:	085a      	lsrs	r2, r3, #1
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	429a      	cmp	r2, r3
    39c6:	d201      	bcs.n	39cc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    39c8:	2340      	movs	r3, #64	; 0x40
    39ca:	e026      	b.n	3a1a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    39cc:	68bb      	ldr	r3, [r7, #8]
    39ce:	085b      	lsrs	r3, r3, #1
    39d0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    39d2:	e00a      	b.n	39ea <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    39d4:	693a      	ldr	r2, [r7, #16]
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	1ad3      	subs	r3, r2, r3
    39da:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    39dc:	2316      	movs	r3, #22
    39de:	18fb      	adds	r3, r7, r3
    39e0:	881a      	ldrh	r2, [r3, #0]
    39e2:	2316      	movs	r3, #22
    39e4:	18fb      	adds	r3, r7, r3
    39e6:	3201      	adds	r2, #1
    39e8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    39ea:	693a      	ldr	r2, [r7, #16]
    39ec:	68fb      	ldr	r3, [r7, #12]
    39ee:	429a      	cmp	r2, r3
    39f0:	d2f0      	bcs.n	39d4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    39f2:	2316      	movs	r3, #22
    39f4:	18fb      	adds	r3, r7, r3
    39f6:	2216      	movs	r2, #22
    39f8:	18ba      	adds	r2, r7, r2
    39fa:	8812      	ldrh	r2, [r2, #0]
    39fc:	3a01      	subs	r2, #1
    39fe:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3a00:	2316      	movs	r3, #22
    3a02:	18fb      	adds	r3, r7, r3
    3a04:	881b      	ldrh	r3, [r3, #0]
    3a06:	2bff      	cmp	r3, #255	; 0xff
    3a08:	d901      	bls.n	3a0e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3a0a:	2340      	movs	r3, #64	; 0x40
    3a0c:	e005      	b.n	3a1a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3a0e:	687b      	ldr	r3, [r7, #4]
    3a10:	2216      	movs	r2, #22
    3a12:	18ba      	adds	r2, r7, r2
    3a14:	8812      	ldrh	r2, [r2, #0]
    3a16:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3a18:	2300      	movs	r3, #0
	}
}
    3a1a:	0018      	movs	r0, r3
    3a1c:	46bd      	mov	sp, r7
    3a1e:	b006      	add	sp, #24
    3a20:	bd80      	pop	{r7, pc}
	...

00003a24 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a26:	b0a1      	sub	sp, #132	; 0x84
    3a28:	af00      	add	r7, sp, #0
    3a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
    3a2c:	64b9      	str	r1, [r7, #72]	; 0x48
    3a2e:	647a      	str	r2, [r7, #68]	; 0x44
    3a30:	2243      	movs	r2, #67	; 0x43
    3a32:	18ba      	adds	r2, r7, r2
    3a34:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3a36:	2300      	movs	r3, #0
    3a38:	2400      	movs	r4, #0
    3a3a:	673b      	str	r3, [r7, #112]	; 0x70
    3a3c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3a3e:	2300      	movs	r3, #0
    3a40:	2400      	movs	r4, #0
    3a42:	66bb      	str	r3, [r7, #104]	; 0x68
    3a44:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3a46:	2300      	movs	r3, #0
    3a48:	2400      	movs	r4, #0
    3a4a:	67bb      	str	r3, [r7, #120]	; 0x78
    3a4c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3a4e:	2300      	movs	r3, #0
    3a50:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3a52:	2358      	movs	r3, #88	; 0x58
    3a54:	2240      	movs	r2, #64	; 0x40
    3a56:	4694      	mov	ip, r2
    3a58:	44bc      	add	ip, r7
    3a5a:	4463      	add	r3, ip
    3a5c:	781a      	ldrb	r2, [r3, #0]
    3a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3a60:	435a      	muls	r2, r3
    3a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a64:	429a      	cmp	r2, r3
    3a66:	d901      	bls.n	3a6c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3a68:	2340      	movs	r3, #64	; 0x40
    3a6a:	e0b3      	b.n	3bd4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3a6c:	2343      	movs	r3, #67	; 0x43
    3a6e:	18fb      	adds	r3, r7, r3
    3a70:	781b      	ldrb	r3, [r3, #0]
    3a72:	2b00      	cmp	r3, #0
    3a74:	d13d      	bne.n	3af2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3a76:	2358      	movs	r3, #88	; 0x58
    3a78:	2240      	movs	r2, #64	; 0x40
    3a7a:	4694      	mov	ip, r2
    3a7c:	44bc      	add	ip, r7
    3a7e:	4463      	add	r3, ip
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	b2db      	uxtb	r3, r3
    3a84:	613b      	str	r3, [r7, #16]
    3a86:	2300      	movs	r3, #0
    3a88:	617b      	str	r3, [r7, #20]
    3a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3a8c:	60bb      	str	r3, [r7, #8]
    3a8e:	2300      	movs	r3, #0
    3a90:	60fb      	str	r3, [r7, #12]
    3a92:	4c52      	ldr	r4, [pc, #328]	; (3bdc <_sercom_get_async_baud_val+0x1b8>)
    3a94:	68ba      	ldr	r2, [r7, #8]
    3a96:	68fb      	ldr	r3, [r7, #12]
    3a98:	6938      	ldr	r0, [r7, #16]
    3a9a:	6979      	ldr	r1, [r7, #20]
    3a9c:	47a0      	blx	r4
    3a9e:	0003      	movs	r3, r0
    3aa0:	000c      	movs	r4, r1
    3aa2:	001b      	movs	r3, r3
    3aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
    3aa6:	2300      	movs	r3, #0
    3aa8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3aac:	603b      	str	r3, [r7, #0]
    3aae:	2300      	movs	r3, #0
    3ab0:	607b      	str	r3, [r7, #4]
    3ab2:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3ab4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3ab6:	683a      	ldr	r2, [r7, #0]
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	4c49      	ldr	r4, [pc, #292]	; (3be0 <_sercom_get_async_baud_val+0x1bc>)
    3abc:	47a0      	blx	r4
    3abe:	0003      	movs	r3, r0
    3ac0:	000c      	movs	r4, r1
    3ac2:	673b      	str	r3, [r7, #112]	; 0x70
    3ac4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3ac6:	2100      	movs	r1, #0
    3ac8:	2201      	movs	r2, #1
    3aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3acc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3ace:	1ac9      	subs	r1, r1, r3
    3ad0:	41a2      	sbcs	r2, r4
    3ad2:	000b      	movs	r3, r1
    3ad4:	0014      	movs	r4, r2
    3ad6:	66bb      	str	r3, [r7, #104]	; 0x68
    3ad8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3adc:	0c1b      	lsrs	r3, r3, #16
    3ade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3ae0:	0416      	lsls	r6, r2, #16
    3ae2:	431e      	orrs	r6, r3
    3ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ae6:	041d      	lsls	r5, r3, #16
    3ae8:	0033      	movs	r3, r6
    3aea:	67bb      	str	r3, [r7, #120]	; 0x78
    3aec:	2300      	movs	r3, #0
    3aee:	67fb      	str	r3, [r7, #124]	; 0x7c
    3af0:	e06a      	b.n	3bc8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3af2:	2343      	movs	r3, #67	; 0x43
    3af4:	18fb      	adds	r3, r7, r3
    3af6:	781b      	ldrb	r3, [r3, #0]
    3af8:	2b01      	cmp	r3, #1
    3afa:	d165      	bne.n	3bc8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3afe:	633b      	str	r3, [r7, #48]	; 0x30
    3b00:	2300      	movs	r3, #0
    3b02:	637b      	str	r3, [r7, #52]	; 0x34
    3b04:	2358      	movs	r3, #88	; 0x58
    3b06:	2240      	movs	r2, #64	; 0x40
    3b08:	4694      	mov	ip, r2
    3b0a:	44bc      	add	ip, r7
    3b0c:	4463      	add	r3, ip
    3b0e:	781b      	ldrb	r3, [r3, #0]
    3b10:	b2db      	uxtb	r3, r3
    3b12:	62bb      	str	r3, [r7, #40]	; 0x28
    3b14:	2300      	movs	r3, #0
    3b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    3b18:	4c30      	ldr	r4, [pc, #192]	; (3bdc <_sercom_get_async_baud_val+0x1b8>)
    3b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3b20:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3b22:	47a0      	blx	r4
    3b24:	0003      	movs	r3, r0
    3b26:	000c      	movs	r4, r1
    3b28:	65bb      	str	r3, [r7, #88]	; 0x58
    3b2a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b2e:	623b      	str	r3, [r7, #32]
    3b30:	2300      	movs	r3, #0
    3b32:	627b      	str	r3, [r7, #36]	; 0x24
    3b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b36:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b38:	001a      	movs	r2, r3
    3b3a:	0023      	movs	r3, r4
    3b3c:	6a38      	ldr	r0, [r7, #32]
    3b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3b40:	4c27      	ldr	r4, [pc, #156]	; (3be0 <_sercom_get_async_baud_val+0x1bc>)
    3b42:	47a0      	blx	r4
    3b44:	0003      	movs	r3, r0
    3b46:	000c      	movs	r4, r1
    3b48:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3b4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3b4c:	2380      	movs	r3, #128	; 0x80
    3b4e:	019b      	lsls	r3, r3, #6
    3b50:	429a      	cmp	r2, r3
    3b52:	d901      	bls.n	3b58 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b54:	2340      	movs	r3, #64	; 0x40
    3b56:	e03d      	b.n	3bd4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b5a:	61bb      	str	r3, [r7, #24]
    3b5c:	2300      	movs	r3, #0
    3b5e:	61fb      	str	r3, [r7, #28]
    3b60:	69b9      	ldr	r1, [r7, #24]
    3b62:	69fa      	ldr	r2, [r7, #28]
    3b64:	000b      	movs	r3, r1
    3b66:	0f5b      	lsrs	r3, r3, #29
    3b68:	0010      	movs	r0, r2
    3b6a:	00c0      	lsls	r0, r0, #3
    3b6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    3b6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3b70:	4318      	orrs	r0, r3
    3b72:	63f8      	str	r0, [r7, #60]	; 0x3c
    3b74:	000b      	movs	r3, r1
    3b76:	00db      	lsls	r3, r3, #3
    3b78:	63bb      	str	r3, [r7, #56]	; 0x38
    3b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b7c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b7e:	001a      	movs	r2, r3
    3b80:	0023      	movs	r3, r4
    3b82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b86:	4c16      	ldr	r4, [pc, #88]	; (3be0 <_sercom_get_async_baud_val+0x1bc>)
    3b88:	47a0      	blx	r4
    3b8a:	0003      	movs	r3, r0
    3b8c:	000c      	movs	r4, r1
    3b8e:	65bb      	str	r3, [r7, #88]	; 0x58
    3b90:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b94:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b96:	b2d9      	uxtb	r1, r3
    3b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3b9a:	b2db      	uxtb	r3, r3
    3b9c:	00db      	lsls	r3, r3, #3
    3b9e:	b2da      	uxtb	r2, r3
    3ba0:	2317      	movs	r3, #23
    3ba2:	2040      	movs	r0, #64	; 0x40
    3ba4:	4684      	mov	ip, r0
    3ba6:	44bc      	add	ip, r7
    3ba8:	4463      	add	r3, ip
    3baa:	1a8a      	subs	r2, r1, r2
    3bac:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3bae:	2317      	movs	r3, #23
    3bb0:	2240      	movs	r2, #64	; 0x40
    3bb2:	4694      	mov	ip, r2
    3bb4:	44bc      	add	ip, r7
    3bb6:	4463      	add	r3, ip
    3bb8:	781b      	ldrb	r3, [r3, #0]
    3bba:	035b      	lsls	r3, r3, #13
    3bbc:	001a      	movs	r2, r3
    3bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3bc0:	4313      	orrs	r3, r2
    3bc2:	67bb      	str	r3, [r7, #120]	; 0x78
    3bc4:	2300      	movs	r3, #0
    3bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3bca:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3bcc:	b29a      	uxth	r2, r3
    3bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3bd0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3bd2:	2300      	movs	r3, #0
}
    3bd4:	0018      	movs	r0, r3
    3bd6:	46bd      	mov	sp, r7
    3bd8:	b021      	add	sp, #132	; 0x84
    3bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bdc:	0000bd91 	.word	0x0000bd91
    3be0:	000038c7 	.word	0x000038c7

00003be4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3be4:	b580      	push	{r7, lr}
    3be6:	b084      	sub	sp, #16
    3be8:	af00      	add	r7, sp, #0
    3bea:	0002      	movs	r2, r0
    3bec:	1dfb      	adds	r3, r7, #7
    3bee:	701a      	strb	r2, [r3, #0]
    3bf0:	1dbb      	adds	r3, r7, #6
    3bf2:	1c0a      	adds	r2, r1, #0
    3bf4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3bf6:	4b1a      	ldr	r3, [pc, #104]	; (3c60 <sercom_set_gclk_generator+0x7c>)
    3bf8:	781b      	ldrb	r3, [r3, #0]
    3bfa:	2201      	movs	r2, #1
    3bfc:	4053      	eors	r3, r2
    3bfe:	b2db      	uxtb	r3, r3
    3c00:	2b00      	cmp	r3, #0
    3c02:	d103      	bne.n	3c0c <sercom_set_gclk_generator+0x28>
    3c04:	1dbb      	adds	r3, r7, #6
    3c06:	781b      	ldrb	r3, [r3, #0]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d01b      	beq.n	3c44 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3c0c:	230c      	movs	r3, #12
    3c0e:	18fb      	adds	r3, r7, r3
    3c10:	0018      	movs	r0, r3
    3c12:	4b14      	ldr	r3, [pc, #80]	; (3c64 <sercom_set_gclk_generator+0x80>)
    3c14:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3c16:	230c      	movs	r3, #12
    3c18:	18fb      	adds	r3, r7, r3
    3c1a:	1dfa      	adds	r2, r7, #7
    3c1c:	7812      	ldrb	r2, [r2, #0]
    3c1e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3c20:	230c      	movs	r3, #12
    3c22:	18fb      	adds	r3, r7, r3
    3c24:	0019      	movs	r1, r3
    3c26:	2013      	movs	r0, #19
    3c28:	4b0f      	ldr	r3, [pc, #60]	; (3c68 <sercom_set_gclk_generator+0x84>)
    3c2a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3c2c:	2013      	movs	r0, #19
    3c2e:	4b0f      	ldr	r3, [pc, #60]	; (3c6c <sercom_set_gclk_generator+0x88>)
    3c30:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3c32:	4b0b      	ldr	r3, [pc, #44]	; (3c60 <sercom_set_gclk_generator+0x7c>)
    3c34:	1dfa      	adds	r2, r7, #7
    3c36:	7812      	ldrb	r2, [r2, #0]
    3c38:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3c3a:	4b09      	ldr	r3, [pc, #36]	; (3c60 <sercom_set_gclk_generator+0x7c>)
    3c3c:	2201      	movs	r2, #1
    3c3e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3c40:	2300      	movs	r3, #0
    3c42:	e008      	b.n	3c56 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3c44:	4b06      	ldr	r3, [pc, #24]	; (3c60 <sercom_set_gclk_generator+0x7c>)
    3c46:	785b      	ldrb	r3, [r3, #1]
    3c48:	1dfa      	adds	r2, r7, #7
    3c4a:	7812      	ldrb	r2, [r2, #0]
    3c4c:	429a      	cmp	r2, r3
    3c4e:	d101      	bne.n	3c54 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3c50:	2300      	movs	r3, #0
    3c52:	e000      	b.n	3c56 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3c54:	231d      	movs	r3, #29
}
    3c56:	0018      	movs	r0, r3
    3c58:	46bd      	mov	sp, r7
    3c5a:	b004      	add	sp, #16
    3c5c:	bd80      	pop	{r7, pc}
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	20000144 	.word	0x20000144
    3c64:	000038b1 	.word	0x000038b1
    3c68:	00006941 	.word	0x00006941
    3c6c:	00006985 	.word	0x00006985

00003c70 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b082      	sub	sp, #8
    3c74:	af00      	add	r7, sp, #0
    3c76:	6078      	str	r0, [r7, #4]
    3c78:	000a      	movs	r2, r1
    3c7a:	1cfb      	adds	r3, r7, #3
    3c7c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	4a4d      	ldr	r2, [pc, #308]	; (3db8 <_sercom_get_default_pad+0x148>)
    3c82:	4293      	cmp	r3, r2
    3c84:	d03f      	beq.n	3d06 <_sercom_get_default_pad+0x96>
    3c86:	4a4c      	ldr	r2, [pc, #304]	; (3db8 <_sercom_get_default_pad+0x148>)
    3c88:	4293      	cmp	r3, r2
    3c8a:	d806      	bhi.n	3c9a <_sercom_get_default_pad+0x2a>
    3c8c:	4a4b      	ldr	r2, [pc, #300]	; (3dbc <_sercom_get_default_pad+0x14c>)
    3c8e:	4293      	cmp	r3, r2
    3c90:	d00f      	beq.n	3cb2 <_sercom_get_default_pad+0x42>
    3c92:	4a4b      	ldr	r2, [pc, #300]	; (3dc0 <_sercom_get_default_pad+0x150>)
    3c94:	4293      	cmp	r3, r2
    3c96:	d021      	beq.n	3cdc <_sercom_get_default_pad+0x6c>
    3c98:	e089      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3c9a:	4a4a      	ldr	r2, [pc, #296]	; (3dc4 <_sercom_get_default_pad+0x154>)
    3c9c:	4293      	cmp	r3, r2
    3c9e:	d100      	bne.n	3ca2 <_sercom_get_default_pad+0x32>
    3ca0:	e05b      	b.n	3d5a <_sercom_get_default_pad+0xea>
    3ca2:	4a49      	ldr	r2, [pc, #292]	; (3dc8 <_sercom_get_default_pad+0x158>)
    3ca4:	4293      	cmp	r3, r2
    3ca6:	d100      	bne.n	3caa <_sercom_get_default_pad+0x3a>
    3ca8:	e06c      	b.n	3d84 <_sercom_get_default_pad+0x114>
    3caa:	4a48      	ldr	r2, [pc, #288]	; (3dcc <_sercom_get_default_pad+0x15c>)
    3cac:	4293      	cmp	r3, r2
    3cae:	d03f      	beq.n	3d30 <_sercom_get_default_pad+0xc0>
    3cb0:	e07d      	b.n	3dae <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3cb2:	1cfb      	adds	r3, r7, #3
    3cb4:	781b      	ldrb	r3, [r3, #0]
    3cb6:	2b01      	cmp	r3, #1
    3cb8:	d00a      	beq.n	3cd0 <_sercom_get_default_pad+0x60>
    3cba:	dc02      	bgt.n	3cc2 <_sercom_get_default_pad+0x52>
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d005      	beq.n	3ccc <_sercom_get_default_pad+0x5c>
    3cc0:	e075      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3cc2:	2b02      	cmp	r3, #2
    3cc4:	d006      	beq.n	3cd4 <_sercom_get_default_pad+0x64>
    3cc6:	2b03      	cmp	r3, #3
    3cc8:	d006      	beq.n	3cd8 <_sercom_get_default_pad+0x68>
    3cca:	e070      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3ccc:	4b40      	ldr	r3, [pc, #256]	; (3dd0 <_sercom_get_default_pad+0x160>)
    3cce:	e06f      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3cd0:	4b40      	ldr	r3, [pc, #256]	; (3dd4 <_sercom_get_default_pad+0x164>)
    3cd2:	e06d      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3cd4:	4b40      	ldr	r3, [pc, #256]	; (3dd8 <_sercom_get_default_pad+0x168>)
    3cd6:	e06b      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3cd8:	4b40      	ldr	r3, [pc, #256]	; (3ddc <_sercom_get_default_pad+0x16c>)
    3cda:	e069      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3cdc:	1cfb      	adds	r3, r7, #3
    3cde:	781b      	ldrb	r3, [r3, #0]
    3ce0:	2b01      	cmp	r3, #1
    3ce2:	d00a      	beq.n	3cfa <_sercom_get_default_pad+0x8a>
    3ce4:	dc02      	bgt.n	3cec <_sercom_get_default_pad+0x7c>
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d005      	beq.n	3cf6 <_sercom_get_default_pad+0x86>
    3cea:	e060      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3cec:	2b02      	cmp	r3, #2
    3cee:	d006      	beq.n	3cfe <_sercom_get_default_pad+0x8e>
    3cf0:	2b03      	cmp	r3, #3
    3cf2:	d006      	beq.n	3d02 <_sercom_get_default_pad+0x92>
    3cf4:	e05b      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3cf6:	2303      	movs	r3, #3
    3cf8:	e05a      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3cfa:	4b39      	ldr	r3, [pc, #228]	; (3de0 <_sercom_get_default_pad+0x170>)
    3cfc:	e058      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3cfe:	4b39      	ldr	r3, [pc, #228]	; (3de4 <_sercom_get_default_pad+0x174>)
    3d00:	e056      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d02:	4b39      	ldr	r3, [pc, #228]	; (3de8 <_sercom_get_default_pad+0x178>)
    3d04:	e054      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d06:	1cfb      	adds	r3, r7, #3
    3d08:	781b      	ldrb	r3, [r3, #0]
    3d0a:	2b01      	cmp	r3, #1
    3d0c:	d00a      	beq.n	3d24 <_sercom_get_default_pad+0xb4>
    3d0e:	dc02      	bgt.n	3d16 <_sercom_get_default_pad+0xa6>
    3d10:	2b00      	cmp	r3, #0
    3d12:	d005      	beq.n	3d20 <_sercom_get_default_pad+0xb0>
    3d14:	e04b      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d16:	2b02      	cmp	r3, #2
    3d18:	d006      	beq.n	3d28 <_sercom_get_default_pad+0xb8>
    3d1a:	2b03      	cmp	r3, #3
    3d1c:	d006      	beq.n	3d2c <_sercom_get_default_pad+0xbc>
    3d1e:	e046      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d20:	4b32      	ldr	r3, [pc, #200]	; (3dec <_sercom_get_default_pad+0x17c>)
    3d22:	e045      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d24:	4b32      	ldr	r3, [pc, #200]	; (3df0 <_sercom_get_default_pad+0x180>)
    3d26:	e043      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d28:	4b32      	ldr	r3, [pc, #200]	; (3df4 <_sercom_get_default_pad+0x184>)
    3d2a:	e041      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d2c:	4b32      	ldr	r3, [pc, #200]	; (3df8 <_sercom_get_default_pad+0x188>)
    3d2e:	e03f      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d30:	1cfb      	adds	r3, r7, #3
    3d32:	781b      	ldrb	r3, [r3, #0]
    3d34:	2b01      	cmp	r3, #1
    3d36:	d00a      	beq.n	3d4e <_sercom_get_default_pad+0xde>
    3d38:	dc02      	bgt.n	3d40 <_sercom_get_default_pad+0xd0>
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d005      	beq.n	3d4a <_sercom_get_default_pad+0xda>
    3d3e:	e036      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d40:	2b02      	cmp	r3, #2
    3d42:	d006      	beq.n	3d52 <_sercom_get_default_pad+0xe2>
    3d44:	2b03      	cmp	r3, #3
    3d46:	d006      	beq.n	3d56 <_sercom_get_default_pad+0xe6>
    3d48:	e031      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d4a:	4b2c      	ldr	r3, [pc, #176]	; (3dfc <_sercom_get_default_pad+0x18c>)
    3d4c:	e030      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d4e:	4b2c      	ldr	r3, [pc, #176]	; (3e00 <_sercom_get_default_pad+0x190>)
    3d50:	e02e      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d52:	4b2c      	ldr	r3, [pc, #176]	; (3e04 <_sercom_get_default_pad+0x194>)
    3d54:	e02c      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d56:	4b2c      	ldr	r3, [pc, #176]	; (3e08 <_sercom_get_default_pad+0x198>)
    3d58:	e02a      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d5a:	1cfb      	adds	r3, r7, #3
    3d5c:	781b      	ldrb	r3, [r3, #0]
    3d5e:	2b01      	cmp	r3, #1
    3d60:	d00a      	beq.n	3d78 <_sercom_get_default_pad+0x108>
    3d62:	dc02      	bgt.n	3d6a <_sercom_get_default_pad+0xfa>
    3d64:	2b00      	cmp	r3, #0
    3d66:	d005      	beq.n	3d74 <_sercom_get_default_pad+0x104>
    3d68:	e021      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d6a:	2b02      	cmp	r3, #2
    3d6c:	d006      	beq.n	3d7c <_sercom_get_default_pad+0x10c>
    3d6e:	2b03      	cmp	r3, #3
    3d70:	d006      	beq.n	3d80 <_sercom_get_default_pad+0x110>
    3d72:	e01c      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d74:	4b25      	ldr	r3, [pc, #148]	; (3e0c <_sercom_get_default_pad+0x19c>)
    3d76:	e01b      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d78:	4b25      	ldr	r3, [pc, #148]	; (3e10 <_sercom_get_default_pad+0x1a0>)
    3d7a:	e019      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d7c:	4b25      	ldr	r3, [pc, #148]	; (3e14 <_sercom_get_default_pad+0x1a4>)
    3d7e:	e017      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d80:	4b25      	ldr	r3, [pc, #148]	; (3e18 <_sercom_get_default_pad+0x1a8>)
    3d82:	e015      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3d84:	1cfb      	adds	r3, r7, #3
    3d86:	781b      	ldrb	r3, [r3, #0]
    3d88:	2b01      	cmp	r3, #1
    3d8a:	d00a      	beq.n	3da2 <_sercom_get_default_pad+0x132>
    3d8c:	dc02      	bgt.n	3d94 <_sercom_get_default_pad+0x124>
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d005      	beq.n	3d9e <_sercom_get_default_pad+0x12e>
    3d92:	e00c      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d94:	2b02      	cmp	r3, #2
    3d96:	d006      	beq.n	3da6 <_sercom_get_default_pad+0x136>
    3d98:	2b03      	cmp	r3, #3
    3d9a:	d006      	beq.n	3daa <_sercom_get_default_pad+0x13a>
    3d9c:	e007      	b.n	3dae <_sercom_get_default_pad+0x13e>
    3d9e:	4b1f      	ldr	r3, [pc, #124]	; (3e1c <_sercom_get_default_pad+0x1ac>)
    3da0:	e006      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3da2:	4b1f      	ldr	r3, [pc, #124]	; (3e20 <_sercom_get_default_pad+0x1b0>)
    3da4:	e004      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3da6:	4b1f      	ldr	r3, [pc, #124]	; (3e24 <_sercom_get_default_pad+0x1b4>)
    3da8:	e002      	b.n	3db0 <_sercom_get_default_pad+0x140>
    3daa:	4b1f      	ldr	r3, [pc, #124]	; (3e28 <_sercom_get_default_pad+0x1b8>)
    3dac:	e000      	b.n	3db0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3dae:	2300      	movs	r3, #0
}
    3db0:	0018      	movs	r0, r3
    3db2:	46bd      	mov	sp, r7
    3db4:	b002      	add	sp, #8
    3db6:	bd80      	pop	{r7, pc}
    3db8:	42001000 	.word	0x42001000
    3dbc:	42000800 	.word	0x42000800
    3dc0:	42000c00 	.word	0x42000c00
    3dc4:	42001800 	.word	0x42001800
    3dc8:	42001c00 	.word	0x42001c00
    3dcc:	42001400 	.word	0x42001400
    3dd0:	00040003 	.word	0x00040003
    3dd4:	00050003 	.word	0x00050003
    3dd8:	00060003 	.word	0x00060003
    3ddc:	00070003 	.word	0x00070003
    3de0:	00010003 	.word	0x00010003
    3de4:	001e0003 	.word	0x001e0003
    3de8:	001f0003 	.word	0x001f0003
    3dec:	00080003 	.word	0x00080003
    3df0:	00090003 	.word	0x00090003
    3df4:	000a0003 	.word	0x000a0003
    3df8:	000b0003 	.word	0x000b0003
    3dfc:	00100003 	.word	0x00100003
    3e00:	00110003 	.word	0x00110003
    3e04:	00120003 	.word	0x00120003
    3e08:	00130003 	.word	0x00130003
    3e0c:	000c0003 	.word	0x000c0003
    3e10:	000d0003 	.word	0x000d0003
    3e14:	000e0003 	.word	0x000e0003
    3e18:	000f0003 	.word	0x000f0003
    3e1c:	00160003 	.word	0x00160003
    3e20:	00170003 	.word	0x00170003
    3e24:	00180003 	.word	0x00180003
    3e28:	00190003 	.word	0x00190003

00003e2c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3e2c:	b590      	push	{r4, r7, lr}
    3e2e:	b08b      	sub	sp, #44	; 0x2c
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3e34:	230c      	movs	r3, #12
    3e36:	18fb      	adds	r3, r7, r3
    3e38:	4a0f      	ldr	r2, [pc, #60]	; (3e78 <_sercom_get_sercom_inst_index+0x4c>)
    3e3a:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e3c:	c313      	stmia	r3!, {r0, r1, r4}
    3e3e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e40:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e42:	2300      	movs	r3, #0
    3e44:	627b      	str	r3, [r7, #36]	; 0x24
    3e46:	e00e      	b.n	3e66 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3e48:	230c      	movs	r3, #12
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3e4e:	0092      	lsls	r2, r2, #2
    3e50:	58d3      	ldr	r3, [r2, r3]
    3e52:	001a      	movs	r2, r3
    3e54:	687b      	ldr	r3, [r7, #4]
    3e56:	429a      	cmp	r2, r3
    3e58:	d102      	bne.n	3e60 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e5c:	b2db      	uxtb	r3, r3
    3e5e:	e006      	b.n	3e6e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e62:	3301      	adds	r3, #1
    3e64:	627b      	str	r3, [r7, #36]	; 0x24
    3e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e68:	2b05      	cmp	r3, #5
    3e6a:	d9ed      	bls.n	3e48 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3e6c:	2300      	movs	r3, #0
}
    3e6e:	0018      	movs	r0, r3
    3e70:	46bd      	mov	sp, r7
    3e72:	b00b      	add	sp, #44	; 0x2c
    3e74:	bd90      	pop	{r4, r7, pc}
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	0000cec0 	.word	0x0000cec0

00003e7c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b082      	sub	sp, #8
    3e80:	af00      	add	r7, sp, #0
    3e82:	0002      	movs	r2, r0
    3e84:	1dfb      	adds	r3, r7, #7
    3e86:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3e88:	46c0      	nop			; (mov r8, r8)
    3e8a:	46bd      	mov	sp, r7
    3e8c:	b002      	add	sp, #8
    3e8e:	bd80      	pop	{r7, pc}

00003e90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3e90:	b580      	push	{r7, lr}
    3e92:	b084      	sub	sp, #16
    3e94:	af00      	add	r7, sp, #0
    3e96:	0002      	movs	r2, r0
    3e98:	6039      	str	r1, [r7, #0]
    3e9a:	1dfb      	adds	r3, r7, #7
    3e9c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3e9e:	4b13      	ldr	r3, [pc, #76]	; (3eec <_sercom_set_handler+0x5c>)
    3ea0:	781b      	ldrb	r3, [r3, #0]
    3ea2:	2201      	movs	r2, #1
    3ea4:	4053      	eors	r3, r2
    3ea6:	b2db      	uxtb	r3, r3
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d015      	beq.n	3ed8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3eac:	2300      	movs	r3, #0
    3eae:	60fb      	str	r3, [r7, #12]
    3eb0:	e00c      	b.n	3ecc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3eb2:	4b0f      	ldr	r3, [pc, #60]	; (3ef0 <_sercom_set_handler+0x60>)
    3eb4:	68fa      	ldr	r2, [r7, #12]
    3eb6:	0092      	lsls	r2, r2, #2
    3eb8:	490e      	ldr	r1, [pc, #56]	; (3ef4 <_sercom_set_handler+0x64>)
    3eba:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3ebc:	4b0e      	ldr	r3, [pc, #56]	; (3ef8 <_sercom_set_handler+0x68>)
    3ebe:	68fa      	ldr	r2, [r7, #12]
    3ec0:	0092      	lsls	r2, r2, #2
    3ec2:	2100      	movs	r1, #0
    3ec4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3ec6:	68fb      	ldr	r3, [r7, #12]
    3ec8:	3301      	adds	r3, #1
    3eca:	60fb      	str	r3, [r7, #12]
    3ecc:	68fb      	ldr	r3, [r7, #12]
    3ece:	2b05      	cmp	r3, #5
    3ed0:	d9ef      	bls.n	3eb2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3ed2:	4b06      	ldr	r3, [pc, #24]	; (3eec <_sercom_set_handler+0x5c>)
    3ed4:	2201      	movs	r2, #1
    3ed6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3ed8:	1dfb      	adds	r3, r7, #7
    3eda:	781a      	ldrb	r2, [r3, #0]
    3edc:	4b04      	ldr	r3, [pc, #16]	; (3ef0 <_sercom_set_handler+0x60>)
    3ede:	0092      	lsls	r2, r2, #2
    3ee0:	6839      	ldr	r1, [r7, #0]
    3ee2:	50d1      	str	r1, [r2, r3]
}
    3ee4:	46c0      	nop			; (mov r8, r8)
    3ee6:	46bd      	mov	sp, r7
    3ee8:	b004      	add	sp, #16
    3eea:	bd80      	pop	{r7, pc}
    3eec:	20000146 	.word	0x20000146
    3ef0:	20000148 	.word	0x20000148
    3ef4:	00003e7d 	.word	0x00003e7d
    3ef8:	200009d4 	.word	0x200009d4

00003efc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3efc:	b590      	push	{r4, r7, lr}
    3efe:	b085      	sub	sp, #20
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3f04:	2308      	movs	r3, #8
    3f06:	18fb      	adds	r3, r7, r3
    3f08:	4a0b      	ldr	r2, [pc, #44]	; (3f38 <_sercom_get_interrupt_vector+0x3c>)
    3f0a:	6811      	ldr	r1, [r2, #0]
    3f0c:	6019      	str	r1, [r3, #0]
    3f0e:	8892      	ldrh	r2, [r2, #4]
    3f10:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3f12:	230f      	movs	r3, #15
    3f14:	18fc      	adds	r4, r7, r3
    3f16:	687b      	ldr	r3, [r7, #4]
    3f18:	0018      	movs	r0, r3
    3f1a:	4b08      	ldr	r3, [pc, #32]	; (3f3c <_sercom_get_interrupt_vector+0x40>)
    3f1c:	4798      	blx	r3
    3f1e:	0003      	movs	r3, r0
    3f20:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3f22:	230f      	movs	r3, #15
    3f24:	18fb      	adds	r3, r7, r3
    3f26:	781b      	ldrb	r3, [r3, #0]
    3f28:	2208      	movs	r2, #8
    3f2a:	18ba      	adds	r2, r7, r2
    3f2c:	5cd3      	ldrb	r3, [r2, r3]
    3f2e:	b25b      	sxtb	r3, r3
}
    3f30:	0018      	movs	r0, r3
    3f32:	46bd      	mov	sp, r7
    3f34:	b005      	add	sp, #20
    3f36:	bd90      	pop	{r4, r7, pc}
    3f38:	0000ced8 	.word	0x0000ced8
    3f3c:	00003e2d 	.word	0x00003e2d

00003f40 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3f40:	b580      	push	{r7, lr}
    3f42:	af00      	add	r7, sp, #0
    3f44:	4b03      	ldr	r3, [pc, #12]	; (3f54 <SERCOM0_Handler+0x14>)
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	2000      	movs	r0, #0
    3f4a:	4798      	blx	r3
    3f4c:	46c0      	nop			; (mov r8, r8)
    3f4e:	46bd      	mov	sp, r7
    3f50:	bd80      	pop	{r7, pc}
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	20000148 	.word	0x20000148

00003f58 <SERCOM1_Handler>:
    3f58:	b580      	push	{r7, lr}
    3f5a:	af00      	add	r7, sp, #0
    3f5c:	4b03      	ldr	r3, [pc, #12]	; (3f6c <SERCOM1_Handler+0x14>)
    3f5e:	685b      	ldr	r3, [r3, #4]
    3f60:	2001      	movs	r0, #1
    3f62:	4798      	blx	r3
    3f64:	46c0      	nop			; (mov r8, r8)
    3f66:	46bd      	mov	sp, r7
    3f68:	bd80      	pop	{r7, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	20000148 	.word	0x20000148

00003f70 <SERCOM2_Handler>:
    3f70:	b580      	push	{r7, lr}
    3f72:	af00      	add	r7, sp, #0
    3f74:	4b03      	ldr	r3, [pc, #12]	; (3f84 <SERCOM2_Handler+0x14>)
    3f76:	689b      	ldr	r3, [r3, #8]
    3f78:	2002      	movs	r0, #2
    3f7a:	4798      	blx	r3
    3f7c:	46c0      	nop			; (mov r8, r8)
    3f7e:	46bd      	mov	sp, r7
    3f80:	bd80      	pop	{r7, pc}
    3f82:	46c0      	nop			; (mov r8, r8)
    3f84:	20000148 	.word	0x20000148

00003f88 <SERCOM3_Handler>:
    3f88:	b580      	push	{r7, lr}
    3f8a:	af00      	add	r7, sp, #0
    3f8c:	4b03      	ldr	r3, [pc, #12]	; (3f9c <SERCOM3_Handler+0x14>)
    3f8e:	68db      	ldr	r3, [r3, #12]
    3f90:	2003      	movs	r0, #3
    3f92:	4798      	blx	r3
    3f94:	46c0      	nop			; (mov r8, r8)
    3f96:	46bd      	mov	sp, r7
    3f98:	bd80      	pop	{r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	20000148 	.word	0x20000148

00003fa0 <SERCOM4_Handler>:
    3fa0:	b580      	push	{r7, lr}
    3fa2:	af00      	add	r7, sp, #0
    3fa4:	4b03      	ldr	r3, [pc, #12]	; (3fb4 <SERCOM4_Handler+0x14>)
    3fa6:	691b      	ldr	r3, [r3, #16]
    3fa8:	2004      	movs	r0, #4
    3faa:	4798      	blx	r3
    3fac:	46c0      	nop			; (mov r8, r8)
    3fae:	46bd      	mov	sp, r7
    3fb0:	bd80      	pop	{r7, pc}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	20000148 	.word	0x20000148

00003fb8 <SERCOM5_Handler>:
    3fb8:	b580      	push	{r7, lr}
    3fba:	af00      	add	r7, sp, #0
    3fbc:	4b03      	ldr	r3, [pc, #12]	; (3fcc <SERCOM5_Handler+0x14>)
    3fbe:	695b      	ldr	r3, [r3, #20]
    3fc0:	2005      	movs	r0, #5
    3fc2:	4798      	blx	r3
    3fc4:	46c0      	nop			; (mov r8, r8)
    3fc6:	46bd      	mov	sp, r7
    3fc8:	bd80      	pop	{r7, pc}
    3fca:	46c0      	nop			; (mov r8, r8)
    3fcc:	20000148 	.word	0x20000148

00003fd0 <system_pinmux_get_config_defaults>:
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	b082      	sub	sp, #8
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	2280      	movs	r2, #128	; 0x80
    3fdc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	2200      	movs	r2, #0
    3fe2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	2201      	movs	r2, #1
    3fe8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	2200      	movs	r2, #0
    3fee:	70da      	strb	r2, [r3, #3]
}
    3ff0:	46c0      	nop			; (mov r8, r8)
    3ff2:	46bd      	mov	sp, r7
    3ff4:	b002      	add	sp, #8
    3ff6:	bd80      	pop	{r7, pc}

00003ff8 <system_pinmux_get_group_from_gpio_pin>:
{
    3ff8:	b580      	push	{r7, lr}
    3ffa:	b084      	sub	sp, #16
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	0002      	movs	r2, r0
    4000:	1dfb      	adds	r3, r7, #7
    4002:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4004:	230f      	movs	r3, #15
    4006:	18fb      	adds	r3, r7, r3
    4008:	1dfa      	adds	r2, r7, #7
    400a:	7812      	ldrb	r2, [r2, #0]
    400c:	09d2      	lsrs	r2, r2, #7
    400e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4010:	230e      	movs	r3, #14
    4012:	18fb      	adds	r3, r7, r3
    4014:	1dfa      	adds	r2, r7, #7
    4016:	7812      	ldrb	r2, [r2, #0]
    4018:	0952      	lsrs	r2, r2, #5
    401a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    401c:	4b0d      	ldr	r3, [pc, #52]	; (4054 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    401e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4020:	230f      	movs	r3, #15
    4022:	18fb      	adds	r3, r7, r3
    4024:	781b      	ldrb	r3, [r3, #0]
    4026:	2b00      	cmp	r3, #0
    4028:	d10f      	bne.n	404a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    402a:	230f      	movs	r3, #15
    402c:	18fb      	adds	r3, r7, r3
    402e:	781b      	ldrb	r3, [r3, #0]
    4030:	009b      	lsls	r3, r3, #2
    4032:	2210      	movs	r2, #16
    4034:	4694      	mov	ip, r2
    4036:	44bc      	add	ip, r7
    4038:	4463      	add	r3, ip
    403a:	3b08      	subs	r3, #8
    403c:	681a      	ldr	r2, [r3, #0]
    403e:	230e      	movs	r3, #14
    4040:	18fb      	adds	r3, r7, r3
    4042:	781b      	ldrb	r3, [r3, #0]
    4044:	01db      	lsls	r3, r3, #7
    4046:	18d3      	adds	r3, r2, r3
    4048:	e000      	b.n	404c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    404a:	2300      	movs	r3, #0
}
    404c:	0018      	movs	r0, r3
    404e:	46bd      	mov	sp, r7
    4050:	b004      	add	sp, #16
    4052:	bd80      	pop	{r7, pc}
    4054:	41004400 	.word	0x41004400

00004058 <port_get_group_from_gpio_pin>:
{
    4058:	b580      	push	{r7, lr}
    405a:	b082      	sub	sp, #8
    405c:	af00      	add	r7, sp, #0
    405e:	0002      	movs	r2, r0
    4060:	1dfb      	adds	r3, r7, #7
    4062:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4064:	1dfb      	adds	r3, r7, #7
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	0018      	movs	r0, r3
    406a:	4b03      	ldr	r3, [pc, #12]	; (4078 <port_get_group_from_gpio_pin+0x20>)
    406c:	4798      	blx	r3
    406e:	0003      	movs	r3, r0
}
    4070:	0018      	movs	r0, r3
    4072:	46bd      	mov	sp, r7
    4074:	b002      	add	sp, #8
    4076:	bd80      	pop	{r7, pc}
    4078:	00003ff9 	.word	0x00003ff9

0000407c <port_pin_set_output_level>:
{
    407c:	b580      	push	{r7, lr}
    407e:	b084      	sub	sp, #16
    4080:	af00      	add	r7, sp, #0
    4082:	0002      	movs	r2, r0
    4084:	1dfb      	adds	r3, r7, #7
    4086:	701a      	strb	r2, [r3, #0]
    4088:	1dbb      	adds	r3, r7, #6
    408a:	1c0a      	adds	r2, r1, #0
    408c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    408e:	1dfb      	adds	r3, r7, #7
    4090:	781b      	ldrb	r3, [r3, #0]
    4092:	0018      	movs	r0, r3
    4094:	4b0d      	ldr	r3, [pc, #52]	; (40cc <port_pin_set_output_level+0x50>)
    4096:	4798      	blx	r3
    4098:	0003      	movs	r3, r0
    409a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    409c:	1dfb      	adds	r3, r7, #7
    409e:	781b      	ldrb	r3, [r3, #0]
    40a0:	221f      	movs	r2, #31
    40a2:	4013      	ands	r3, r2
    40a4:	2201      	movs	r2, #1
    40a6:	409a      	lsls	r2, r3
    40a8:	0013      	movs	r3, r2
    40aa:	60bb      	str	r3, [r7, #8]
	if (level) {
    40ac:	1dbb      	adds	r3, r7, #6
    40ae:	781b      	ldrb	r3, [r3, #0]
    40b0:	2b00      	cmp	r3, #0
    40b2:	d003      	beq.n	40bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	68ba      	ldr	r2, [r7, #8]
    40b8:	619a      	str	r2, [r3, #24]
}
    40ba:	e002      	b.n	40c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    40bc:	68fb      	ldr	r3, [r7, #12]
    40be:	68ba      	ldr	r2, [r7, #8]
    40c0:	615a      	str	r2, [r3, #20]
}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	46bd      	mov	sp, r7
    40c6:	b004      	add	sp, #16
    40c8:	bd80      	pop	{r7, pc}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	00004059 	.word	0x00004059

000040d0 <system_gclk_chan_get_config_defaults>:
{
    40d0:	b580      	push	{r7, lr}
    40d2:	b082      	sub	sp, #8
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	2200      	movs	r2, #0
    40dc:	701a      	strb	r2, [r3, #0]
}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	46bd      	mov	sp, r7
    40e2:	b002      	add	sp, #8
    40e4:	bd80      	pop	{r7, pc}
	...

000040e8 <system_apb_clock_set_mask>:
{
    40e8:	b580      	push	{r7, lr}
    40ea:	b082      	sub	sp, #8
    40ec:	af00      	add	r7, sp, #0
    40ee:	0002      	movs	r2, r0
    40f0:	6039      	str	r1, [r7, #0]
    40f2:	1dfb      	adds	r3, r7, #7
    40f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    40f6:	1dfb      	adds	r3, r7, #7
    40f8:	781b      	ldrb	r3, [r3, #0]
    40fa:	2b01      	cmp	r3, #1
    40fc:	d00a      	beq.n	4114 <system_apb_clock_set_mask+0x2c>
    40fe:	2b02      	cmp	r3, #2
    4100:	d00f      	beq.n	4122 <system_apb_clock_set_mask+0x3a>
    4102:	2b00      	cmp	r3, #0
    4104:	d114      	bne.n	4130 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4106:	4b0e      	ldr	r3, [pc, #56]	; (4140 <system_apb_clock_set_mask+0x58>)
    4108:	4a0d      	ldr	r2, [pc, #52]	; (4140 <system_apb_clock_set_mask+0x58>)
    410a:	6991      	ldr	r1, [r2, #24]
    410c:	683a      	ldr	r2, [r7, #0]
    410e:	430a      	orrs	r2, r1
    4110:	619a      	str	r2, [r3, #24]
			break;
    4112:	e00f      	b.n	4134 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4114:	4b0a      	ldr	r3, [pc, #40]	; (4140 <system_apb_clock_set_mask+0x58>)
    4116:	4a0a      	ldr	r2, [pc, #40]	; (4140 <system_apb_clock_set_mask+0x58>)
    4118:	69d1      	ldr	r1, [r2, #28]
    411a:	683a      	ldr	r2, [r7, #0]
    411c:	430a      	orrs	r2, r1
    411e:	61da      	str	r2, [r3, #28]
			break;
    4120:	e008      	b.n	4134 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4122:	4b07      	ldr	r3, [pc, #28]	; (4140 <system_apb_clock_set_mask+0x58>)
    4124:	4a06      	ldr	r2, [pc, #24]	; (4140 <system_apb_clock_set_mask+0x58>)
    4126:	6a11      	ldr	r1, [r2, #32]
    4128:	683a      	ldr	r2, [r7, #0]
    412a:	430a      	orrs	r2, r1
    412c:	621a      	str	r2, [r3, #32]
			break;
    412e:	e001      	b.n	4134 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4130:	2317      	movs	r3, #23
    4132:	e000      	b.n	4136 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4134:	2300      	movs	r3, #0
}
    4136:	0018      	movs	r0, r3
    4138:	46bd      	mov	sp, r7
    413a:	b002      	add	sp, #8
    413c:	bd80      	pop	{r7, pc}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	40000400 	.word	0x40000400

00004144 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4144:	b580      	push	{r7, lr}
    4146:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4148:	4b05      	ldr	r3, [pc, #20]	; (4160 <system_is_debugger_present+0x1c>)
    414a:	789b      	ldrb	r3, [r3, #2]
    414c:	b2db      	uxtb	r3, r3
    414e:	001a      	movs	r2, r3
    4150:	2302      	movs	r3, #2
    4152:	4013      	ands	r3, r2
    4154:	1e5a      	subs	r2, r3, #1
    4156:	4193      	sbcs	r3, r2
    4158:	b2db      	uxtb	r3, r3
}
    415a:	0018      	movs	r0, r3
    415c:	46bd      	mov	sp, r7
    415e:	bd80      	pop	{r7, pc}
    4160:	41002000 	.word	0x41002000

00004164 <system_interrupt_enable>:
{
    4164:	b580      	push	{r7, lr}
    4166:	b082      	sub	sp, #8
    4168:	af00      	add	r7, sp, #0
    416a:	0002      	movs	r2, r0
    416c:	1dfb      	adds	r3, r7, #7
    416e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4170:	4b06      	ldr	r3, [pc, #24]	; (418c <system_interrupt_enable+0x28>)
    4172:	1dfa      	adds	r2, r7, #7
    4174:	7812      	ldrb	r2, [r2, #0]
    4176:	0011      	movs	r1, r2
    4178:	221f      	movs	r2, #31
    417a:	400a      	ands	r2, r1
    417c:	2101      	movs	r1, #1
    417e:	4091      	lsls	r1, r2
    4180:	000a      	movs	r2, r1
    4182:	601a      	str	r2, [r3, #0]
}
    4184:	46c0      	nop			; (mov r8, r8)
    4186:	46bd      	mov	sp, r7
    4188:	b002      	add	sp, #8
    418a:	bd80      	pop	{r7, pc}
    418c:	e000e100 	.word	0xe000e100

00004190 <system_interrupt_disable>:
{
    4190:	b580      	push	{r7, lr}
    4192:	b082      	sub	sp, #8
    4194:	af00      	add	r7, sp, #0
    4196:	0002      	movs	r2, r0
    4198:	1dfb      	adds	r3, r7, #7
    419a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    419c:	4a07      	ldr	r2, [pc, #28]	; (41bc <system_interrupt_disable+0x2c>)
    419e:	1dfb      	adds	r3, r7, #7
    41a0:	781b      	ldrb	r3, [r3, #0]
    41a2:	0019      	movs	r1, r3
    41a4:	231f      	movs	r3, #31
    41a6:	400b      	ands	r3, r1
    41a8:	2101      	movs	r1, #1
    41aa:	4099      	lsls	r1, r3
    41ac:	000b      	movs	r3, r1
    41ae:	0019      	movs	r1, r3
    41b0:	2380      	movs	r3, #128	; 0x80
    41b2:	50d1      	str	r1, [r2, r3]
}
    41b4:	46c0      	nop			; (mov r8, r8)
    41b6:	46bd      	mov	sp, r7
    41b8:	b002      	add	sp, #8
    41ba:	bd80      	pop	{r7, pc}
    41bc:	e000e100 	.word	0xe000e100

000041c0 <spi_is_syncing>:
{
    41c0:	b580      	push	{r7, lr}
    41c2:	b084      	sub	sp, #16
    41c4:	af00      	add	r7, sp, #0
    41c6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	681b      	ldr	r3, [r3, #0]
    41cc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    41ce:	68fb      	ldr	r3, [r7, #12]
    41d0:	69db      	ldr	r3, [r3, #28]
    41d2:	1e5a      	subs	r2, r3, #1
    41d4:	4193      	sbcs	r3, r2
    41d6:	b2db      	uxtb	r3, r3
}
    41d8:	0018      	movs	r0, r3
    41da:	46bd      	mov	sp, r7
    41dc:	b004      	add	sp, #16
    41de:	bd80      	pop	{r7, pc}

000041e0 <spi_enable>:
{
    41e0:	b580      	push	{r7, lr}
    41e2:	b084      	sub	sp, #16
    41e4:	af00      	add	r7, sp, #0
    41e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	681b      	ldr	r3, [r3, #0]
    41ec:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	681b      	ldr	r3, [r3, #0]
    41f2:	0018      	movs	r0, r3
    41f4:	4b0b      	ldr	r3, [pc, #44]	; (4224 <spi_enable+0x44>)
    41f6:	4798      	blx	r3
    41f8:	0003      	movs	r3, r0
    41fa:	0018      	movs	r0, r3
    41fc:	4b0a      	ldr	r3, [pc, #40]	; (4228 <spi_enable+0x48>)
    41fe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    4200:	46c0      	nop			; (mov r8, r8)
    4202:	687b      	ldr	r3, [r7, #4]
    4204:	0018      	movs	r0, r3
    4206:	4b09      	ldr	r3, [pc, #36]	; (422c <spi_enable+0x4c>)
    4208:	4798      	blx	r3
    420a:	1e03      	subs	r3, r0, #0
    420c:	d1f9      	bne.n	4202 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    420e:	68fb      	ldr	r3, [r7, #12]
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	2202      	movs	r2, #2
    4214:	431a      	orrs	r2, r3
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	601a      	str	r2, [r3, #0]
}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	46bd      	mov	sp, r7
    421e:	b004      	add	sp, #16
    4220:	bd80      	pop	{r7, pc}
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	00003efd 	.word	0x00003efd
    4228:	00004165 	.word	0x00004165
    422c:	000041c1 	.word	0x000041c1

00004230 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    4230:	b580      	push	{r7, lr}
    4232:	b084      	sub	sp, #16
    4234:	af00      	add	r7, sp, #0
    4236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4238:	687b      	ldr	r3, [r7, #4]
    423a:	681b      	ldr	r3, [r3, #0]
    423c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	681b      	ldr	r3, [r3, #0]
    4242:	0018      	movs	r0, r3
    4244:	4b0e      	ldr	r3, [pc, #56]	; (4280 <spi_disable+0x50>)
    4246:	4798      	blx	r3
    4248:	0003      	movs	r3, r0
    424a:	0018      	movs	r0, r3
    424c:	4b0d      	ldr	r3, [pc, #52]	; (4284 <spi_disable+0x54>)
    424e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4250:	46c0      	nop			; (mov r8, r8)
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	0018      	movs	r0, r3
    4256:	4b0c      	ldr	r3, [pc, #48]	; (4288 <spi_disable+0x58>)
    4258:	4798      	blx	r3
    425a:	1e03      	subs	r3, r0, #0
    425c:	d1f9      	bne.n	4252 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    425e:	68fb      	ldr	r3, [r7, #12]
    4260:	228f      	movs	r2, #143	; 0x8f
    4262:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4264:	68fb      	ldr	r3, [r7, #12]
    4266:	228f      	movs	r2, #143	; 0x8f
    4268:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    426a:	68fb      	ldr	r3, [r7, #12]
    426c:	681b      	ldr	r3, [r3, #0]
    426e:	2202      	movs	r2, #2
    4270:	4393      	bics	r3, r2
    4272:	001a      	movs	r2, r3
    4274:	68fb      	ldr	r3, [r7, #12]
    4276:	601a      	str	r2, [r3, #0]
}
    4278:	46c0      	nop			; (mov r8, r8)
    427a:	46bd      	mov	sp, r7
    427c:	b004      	add	sp, #16
    427e:	bd80      	pop	{r7, pc}
    4280:	00003efd 	.word	0x00003efd
    4284:	00004191 	.word	0x00004191
    4288:	000041c1 	.word	0x000041c1

0000428c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    428c:	b580      	push	{r7, lr}
    428e:	b084      	sub	sp, #16
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	681b      	ldr	r3, [r3, #0]
    4298:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    429a:	68fb      	ldr	r3, [r7, #12]
    429c:	7e1b      	ldrb	r3, [r3, #24]
    429e:	b2db      	uxtb	r3, r3
    42a0:	001a      	movs	r2, r3
    42a2:	2302      	movs	r3, #2
    42a4:	4013      	ands	r3, r2
    42a6:	1e5a      	subs	r2, r3, #1
    42a8:	4193      	sbcs	r3, r2
    42aa:	b2db      	uxtb	r3, r3
}
    42ac:	0018      	movs	r0, r3
    42ae:	46bd      	mov	sp, r7
    42b0:	b004      	add	sp, #16
    42b2:	bd80      	pop	{r7, pc}

000042b4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	b084      	sub	sp, #16
    42b8:	af00      	add	r7, sp, #0
    42ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42c2:	68fb      	ldr	r3, [r7, #12]
    42c4:	7e1b      	ldrb	r3, [r3, #24]
    42c6:	b2db      	uxtb	r3, r3
    42c8:	001a      	movs	r2, r3
    42ca:	2301      	movs	r3, #1
    42cc:	4013      	ands	r3, r2
    42ce:	1e5a      	subs	r2, r3, #1
    42d0:	4193      	sbcs	r3, r2
    42d2:	b2db      	uxtb	r3, r3
}
    42d4:	0018      	movs	r0, r3
    42d6:	46bd      	mov	sp, r7
    42d8:	b004      	add	sp, #16
    42da:	bd80      	pop	{r7, pc}

000042dc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    42dc:	b580      	push	{r7, lr}
    42de:	b084      	sub	sp, #16
    42e0:	af00      	add	r7, sp, #0
    42e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	681b      	ldr	r3, [r3, #0]
    42e8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	7e1b      	ldrb	r3, [r3, #24]
    42ee:	b2db      	uxtb	r3, r3
    42f0:	001a      	movs	r2, r3
    42f2:	2304      	movs	r3, #4
    42f4:	4013      	ands	r3, r2
    42f6:	1e5a      	subs	r2, r3, #1
    42f8:	4193      	sbcs	r3, r2
    42fa:	b2db      	uxtb	r3, r3
}
    42fc:	0018      	movs	r0, r3
    42fe:	46bd      	mov	sp, r7
    4300:	b004      	add	sp, #16
    4302:	bd80      	pop	{r7, pc}

00004304 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4304:	b580      	push	{r7, lr}
    4306:	b084      	sub	sp, #16
    4308:	af00      	add	r7, sp, #0
    430a:	6078      	str	r0, [r7, #4]
    430c:	000a      	movs	r2, r1
    430e:	1cbb      	adds	r3, r7, #2
    4310:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4312:	687b      	ldr	r3, [r7, #4]
    4314:	681b      	ldr	r3, [r3, #0]
    4316:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	0018      	movs	r0, r3
    431c:	4b0a      	ldr	r3, [pc, #40]	; (4348 <spi_write+0x44>)
    431e:	4798      	blx	r3
    4320:	0003      	movs	r3, r0
    4322:	001a      	movs	r2, r3
    4324:	2301      	movs	r3, #1
    4326:	4053      	eors	r3, r2
    4328:	b2db      	uxtb	r3, r3
    432a:	2b00      	cmp	r3, #0
    432c:	d001      	beq.n	4332 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    432e:	2305      	movs	r3, #5
    4330:	e006      	b.n	4340 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4332:	1cbb      	adds	r3, r7, #2
    4334:	881b      	ldrh	r3, [r3, #0]
    4336:	05db      	lsls	r3, r3, #23
    4338:	0dda      	lsrs	r2, r3, #23
    433a:	68fb      	ldr	r3, [r7, #12]
    433c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    433e:	2300      	movs	r3, #0
}
    4340:	0018      	movs	r0, r3
    4342:	46bd      	mov	sp, r7
    4344:	b004      	add	sp, #16
    4346:	bd80      	pop	{r7, pc}
    4348:	000042b5 	.word	0x000042b5

0000434c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    434c:	b580      	push	{r7, lr}
    434e:	b084      	sub	sp, #16
    4350:	af00      	add	r7, sp, #0
    4352:	6078      	str	r0, [r7, #4]
    4354:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	681b      	ldr	r3, [r3, #0]
    435a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	0018      	movs	r0, r3
    4360:	4b1b      	ldr	r3, [pc, #108]	; (43d0 <spi_read+0x84>)
    4362:	4798      	blx	r3
    4364:	0003      	movs	r3, r0
    4366:	001a      	movs	r2, r3
    4368:	2301      	movs	r3, #1
    436a:	4053      	eors	r3, r2
    436c:	b2db      	uxtb	r3, r3
    436e:	2b00      	cmp	r3, #0
    4370:	d001      	beq.n	4376 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4372:	2310      	movs	r3, #16
    4374:	e027      	b.n	43c6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4376:	230f      	movs	r3, #15
    4378:	18fb      	adds	r3, r7, r3
    437a:	2200      	movs	r2, #0
    437c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    437e:	68bb      	ldr	r3, [r7, #8]
    4380:	8b5b      	ldrh	r3, [r3, #26]
    4382:	b29b      	uxth	r3, r3
    4384:	001a      	movs	r2, r3
    4386:	2304      	movs	r3, #4
    4388:	4013      	ands	r3, r2
    438a:	d006      	beq.n	439a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    438c:	230f      	movs	r3, #15
    438e:	18fb      	adds	r3, r7, r3
    4390:	221e      	movs	r2, #30
    4392:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4394:	68bb      	ldr	r3, [r7, #8]
    4396:	2204      	movs	r2, #4
    4398:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    439a:	687b      	ldr	r3, [r7, #4]
    439c:	799b      	ldrb	r3, [r3, #6]
    439e:	2b01      	cmp	r3, #1
    43a0:	d108      	bne.n	43b4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    43a2:	68bb      	ldr	r3, [r7, #8]
    43a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43a6:	b29b      	uxth	r3, r3
    43a8:	05db      	lsls	r3, r3, #23
    43aa:	0ddb      	lsrs	r3, r3, #23
    43ac:	b29a      	uxth	r2, r3
    43ae:	683b      	ldr	r3, [r7, #0]
    43b0:	801a      	strh	r2, [r3, #0]
    43b2:	e005      	b.n	43c0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43b4:	68bb      	ldr	r3, [r7, #8]
    43b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43b8:	b2db      	uxtb	r3, r3
    43ba:	b29a      	uxth	r2, r3
    43bc:	683b      	ldr	r3, [r7, #0]
    43be:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    43c0:	230f      	movs	r3, #15
    43c2:	18fb      	adds	r3, r7, r3
    43c4:	781b      	ldrb	r3, [r3, #0]
}
    43c6:	0018      	movs	r0, r3
    43c8:	46bd      	mov	sp, r7
    43ca:	b004      	add	sp, #16
    43cc:	bd80      	pop	{r7, pc}
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	000042dd 	.word	0x000042dd

000043d4 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    43d4:	b580      	push	{r7, lr}
    43d6:	b084      	sub	sp, #16
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	681b      	ldr	r3, [r3, #0]
    43e0:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	0018      	movs	r0, r3
    43e6:	4b09      	ldr	r3, [pc, #36]	; (440c <spi_reset+0x38>)
    43e8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	0018      	movs	r0, r3
    43f0:	4b07      	ldr	r3, [pc, #28]	; (4410 <spi_reset+0x3c>)
    43f2:	4798      	blx	r3
    43f4:	1e03      	subs	r3, r0, #0
    43f6:	d1f9      	bne.n	43ec <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	681b      	ldr	r3, [r3, #0]
    43fc:	2201      	movs	r2, #1
    43fe:	431a      	orrs	r2, r3
    4400:	68fb      	ldr	r3, [r7, #12]
    4402:	601a      	str	r2, [r3, #0]
}
    4404:	46c0      	nop			; (mov r8, r8)
    4406:	46bd      	mov	sp, r7
    4408:	b004      	add	sp, #16
    440a:	bd80      	pop	{r7, pc}
    440c:	00004231 	.word	0x00004231
    4410:	000041c1 	.word	0x000041c1

00004414 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4414:	b590      	push	{r4, r7, lr}
    4416:	b089      	sub	sp, #36	; 0x24
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    441e:	230c      	movs	r3, #12
    4420:	18fb      	adds	r3, r7, r3
    4422:	2200      	movs	r2, #0
    4424:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	0018      	movs	r0, r3
    4430:	4b24      	ldr	r3, [pc, #144]	; (44c4 <spi_set_baudrate+0xb0>)
    4432:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4434:	46c0      	nop			; (mov r8, r8)
    4436:	687b      	ldr	r3, [r7, #4]
    4438:	0018      	movs	r0, r3
    443a:	4b23      	ldr	r3, [pc, #140]	; (44c8 <spi_set_baudrate+0xb4>)
    443c:	4798      	blx	r3
    443e:	1e03      	subs	r3, r0, #0
    4440:	d1f9      	bne.n	4436 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	0018      	movs	r0, r3
    4448:	4b20      	ldr	r3, [pc, #128]	; (44cc <spi_set_baudrate+0xb8>)
    444a:	4798      	blx	r3
    444c:	0003      	movs	r3, r0
    444e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4450:	69bb      	ldr	r3, [r7, #24]
    4452:	3314      	adds	r3, #20
    4454:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4456:	697b      	ldr	r3, [r7, #20]
    4458:	b2db      	uxtb	r3, r3
    445a:	0018      	movs	r0, r3
    445c:	4b1c      	ldr	r3, [pc, #112]	; (44d0 <spi_set_baudrate+0xbc>)
    445e:	4798      	blx	r3
    4460:	0003      	movs	r3, r0
    4462:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4464:	230f      	movs	r3, #15
    4466:	18fc      	adds	r4, r7, r3
    4468:	230c      	movs	r3, #12
    446a:	18fa      	adds	r2, r7, r3
    446c:	6939      	ldr	r1, [r7, #16]
    446e:	683b      	ldr	r3, [r7, #0]
    4470:	0018      	movs	r0, r3
    4472:	4b18      	ldr	r3, [pc, #96]	; (44d4 <spi_set_baudrate+0xc0>)
    4474:	4798      	blx	r3
    4476:	0003      	movs	r3, r0
    4478:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    447a:	230f      	movs	r3, #15
    447c:	18fb      	adds	r3, r7, r3
    447e:	781b      	ldrb	r3, [r3, #0]
    4480:	2b00      	cmp	r3, #0
    4482:	d001      	beq.n	4488 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4484:	2317      	movs	r3, #23
    4486:	e018      	b.n	44ba <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    4488:	230c      	movs	r3, #12
    448a:	18fb      	adds	r3, r7, r3
    448c:	881b      	ldrh	r3, [r3, #0]
    448e:	b2da      	uxtb	r2, r3
    4490:	69fb      	ldr	r3, [r7, #28]
    4492:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    4494:	46c0      	nop			; (mov r8, r8)
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	0018      	movs	r0, r3
    449a:	4b0b      	ldr	r3, [pc, #44]	; (44c8 <spi_set_baudrate+0xb4>)
    449c:	4798      	blx	r3
    449e:	1e03      	subs	r3, r0, #0
    44a0:	d1f9      	bne.n	4496 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	0018      	movs	r0, r3
    44a6:	4b0c      	ldr	r3, [pc, #48]	; (44d8 <spi_set_baudrate+0xc4>)
    44a8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	0018      	movs	r0, r3
    44b0:	4b05      	ldr	r3, [pc, #20]	; (44c8 <spi_set_baudrate+0xb4>)
    44b2:	4798      	blx	r3
    44b4:	1e03      	subs	r3, r0, #0
    44b6:	d1f9      	bne.n	44ac <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    44b8:	2300      	movs	r3, #0
}
    44ba:	0018      	movs	r0, r3
    44bc:	46bd      	mov	sp, r7
    44be:	b009      	add	sp, #36	; 0x24
    44c0:	bd90      	pop	{r4, r7, pc}
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	00004231 	.word	0x00004231
    44c8:	000041c1 	.word	0x000041c1
    44cc:	00003e2d 	.word	0x00003e2d
    44d0:	00006a65 	.word	0x00006a65
    44d4:	000039a7 	.word	0x000039a7
    44d8:	000041e1 	.word	0x000041e1

000044dc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    44dc:	b590      	push	{r4, r7, lr}
    44de:	b093      	sub	sp, #76	; 0x4c
    44e0:	af00      	add	r7, sp, #0
    44e2:	6078      	str	r0, [r7, #4]
    44e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44e6:	687b      	ldr	r3, [r7, #4]
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	681b      	ldr	r3, [r3, #0]
    44f0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    44f2:	231c      	movs	r3, #28
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	0018      	movs	r0, r3
    44f8:	4b75      	ldr	r3, [pc, #468]	; (46d0 <_spi_set_config+0x1f4>)
    44fa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    44fc:	231c      	movs	r3, #28
    44fe:	18fb      	adds	r3, r7, r3
    4500:	2200      	movs	r2, #0
    4502:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4504:	683b      	ldr	r3, [r7, #0]
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	2b00      	cmp	r3, #0
    450a:	d103      	bne.n	4514 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    450c:	231c      	movs	r3, #28
    450e:	18fb      	adds	r3, r7, r3
    4510:	2200      	movs	r2, #0
    4512:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4514:	683b      	ldr	r3, [r7, #0]
    4516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    4518:	230c      	movs	r3, #12
    451a:	18fb      	adds	r3, r7, r3
    451c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    451e:	683b      	ldr	r3, [r7, #0]
    4520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    4522:	230c      	movs	r3, #12
    4524:	18fb      	adds	r3, r7, r3
    4526:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4528:	683b      	ldr	r3, [r7, #0]
    452a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    452c:	230c      	movs	r3, #12
    452e:	18fb      	adds	r3, r7, r3
    4530:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    4532:	683b      	ldr	r3, [r7, #0]
    4534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4536:	230c      	movs	r3, #12
    4538:	18fb      	adds	r3, r7, r3
    453a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    453c:	2347      	movs	r3, #71	; 0x47
    453e:	18fb      	adds	r3, r7, r3
    4540:	2200      	movs	r2, #0
    4542:	701a      	strb	r2, [r3, #0]
    4544:	e02c      	b.n	45a0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4546:	2347      	movs	r3, #71	; 0x47
    4548:	18fb      	adds	r3, r7, r3
    454a:	781a      	ldrb	r2, [r3, #0]
    454c:	230c      	movs	r3, #12
    454e:	18fb      	adds	r3, r7, r3
    4550:	0092      	lsls	r2, r2, #2
    4552:	58d3      	ldr	r3, [r2, r3]
    4554:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4558:	2b00      	cmp	r3, #0
    455a:	d109      	bne.n	4570 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    455c:	2347      	movs	r3, #71	; 0x47
    455e:	18fb      	adds	r3, r7, r3
    4560:	781a      	ldrb	r2, [r3, #0]
    4562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4564:	0011      	movs	r1, r2
    4566:	0018      	movs	r0, r3
    4568:	4b5a      	ldr	r3, [pc, #360]	; (46d4 <_spi_set_config+0x1f8>)
    456a:	4798      	blx	r3
    456c:	0003      	movs	r3, r0
    456e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4572:	3301      	adds	r3, #1
    4574:	d00d      	beq.n	4592 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4578:	b2da      	uxtb	r2, r3
    457a:	231c      	movs	r3, #28
    457c:	18fb      	adds	r3, r7, r3
    457e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4582:	0c1b      	lsrs	r3, r3, #16
    4584:	b2db      	uxtb	r3, r3
    4586:	221c      	movs	r2, #28
    4588:	18ba      	adds	r2, r7, r2
    458a:	0011      	movs	r1, r2
    458c:	0018      	movs	r0, r3
    458e:	4b52      	ldr	r3, [pc, #328]	; (46d8 <_spi_set_config+0x1fc>)
    4590:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4592:	2347      	movs	r3, #71	; 0x47
    4594:	18fb      	adds	r3, r7, r3
    4596:	781a      	ldrb	r2, [r3, #0]
    4598:	2347      	movs	r3, #71	; 0x47
    459a:	18fb      	adds	r3, r7, r3
    459c:	3201      	adds	r2, #1
    459e:	701a      	strb	r2, [r3, #0]
    45a0:	2347      	movs	r3, #71	; 0x47
    45a2:	18fb      	adds	r3, r7, r3
    45a4:	781b      	ldrb	r3, [r3, #0]
    45a6:	2b03      	cmp	r3, #3
    45a8:	d9cd      	bls.n	4546 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	781a      	ldrb	r2, [r3, #0]
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    45b2:	683b      	ldr	r3, [r7, #0]
    45b4:	7c1a      	ldrb	r2, [r3, #16]
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    45ba:	683b      	ldr	r3, [r7, #0]
    45bc:	7c9a      	ldrb	r2, [r3, #18]
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    45c2:	683b      	ldr	r3, [r7, #0]
    45c4:	7d1a      	ldrb	r2, [r3, #20]
    45c6:	687b      	ldr	r3, [r7, #4]
    45c8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    45ca:	230a      	movs	r3, #10
    45cc:	18fb      	adds	r3, r7, r3
    45ce:	2200      	movs	r2, #0
    45d0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    45d2:	2300      	movs	r3, #0
    45d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    45d6:	2300      	movs	r3, #0
    45d8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    45da:	683b      	ldr	r3, [r7, #0]
    45dc:	781b      	ldrb	r3, [r3, #0]
    45de:	2b01      	cmp	r3, #1
    45e0:	d129      	bne.n	4636 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	681b      	ldr	r3, [r3, #0]
    45e6:	0018      	movs	r0, r3
    45e8:	4b3c      	ldr	r3, [pc, #240]	; (46dc <_spi_set_config+0x200>)
    45ea:	4798      	blx	r3
    45ec:	0003      	movs	r3, r0
    45ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45f2:	3314      	adds	r3, #20
    45f4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    45f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    45f8:	b2db      	uxtb	r3, r3
    45fa:	0018      	movs	r0, r3
    45fc:	4b38      	ldr	r3, [pc, #224]	; (46e0 <_spi_set_config+0x204>)
    45fe:	4798      	blx	r3
    4600:	0003      	movs	r3, r0
    4602:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4604:	683b      	ldr	r3, [r7, #0]
    4606:	699b      	ldr	r3, [r3, #24]
    4608:	2223      	movs	r2, #35	; 0x23
    460a:	18bc      	adds	r4, r7, r2
    460c:	220a      	movs	r2, #10
    460e:	18ba      	adds	r2, r7, r2
    4610:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4612:	0018      	movs	r0, r3
    4614:	4b33      	ldr	r3, [pc, #204]	; (46e4 <_spi_set_config+0x208>)
    4616:	4798      	blx	r3
    4618:	0003      	movs	r3, r0
    461a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    461c:	2323      	movs	r3, #35	; 0x23
    461e:	18fb      	adds	r3, r7, r3
    4620:	781b      	ldrb	r3, [r3, #0]
    4622:	2b00      	cmp	r3, #0
    4624:	d001      	beq.n	462a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4626:	2317      	movs	r3, #23
    4628:	e04e      	b.n	46c8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    462a:	230a      	movs	r3, #10
    462c:	18fb      	adds	r3, r7, r3
    462e:	881b      	ldrh	r3, [r3, #0]
    4630:	b2da      	uxtb	r2, r3
    4632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4634:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4636:	683b      	ldr	r3, [r7, #0]
    4638:	685b      	ldr	r3, [r3, #4]
    463a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    463c:	4313      	orrs	r3, r2
    463e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4640:	683b      	ldr	r3, [r7, #0]
    4642:	689b      	ldr	r3, [r3, #8]
    4644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4646:	4313      	orrs	r3, r2
    4648:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    464a:	683b      	ldr	r3, [r7, #0]
    464c:	68db      	ldr	r3, [r3, #12]
    464e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4650:	4313      	orrs	r3, r2
    4652:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4654:	683b      	ldr	r3, [r7, #0]
    4656:	7c1b      	ldrb	r3, [r3, #16]
    4658:	001a      	movs	r2, r3
    465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    465c:	4313      	orrs	r3, r2
    465e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4660:	683b      	ldr	r3, [r7, #0]
    4662:	7c5b      	ldrb	r3, [r3, #17]
    4664:	2b00      	cmp	r3, #0
    4666:	d103      	bne.n	4670 <_spi_set_config+0x194>
    4668:	4b1f      	ldr	r3, [pc, #124]	; (46e8 <_spi_set_config+0x20c>)
    466a:	4798      	blx	r3
    466c:	1e03      	subs	r3, r0, #0
    466e:	d003      	beq.n	4678 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4672:	2280      	movs	r2, #128	; 0x80
    4674:	4313      	orrs	r3, r2
    4676:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4678:	683b      	ldr	r3, [r7, #0]
    467a:	7c9b      	ldrb	r3, [r3, #18]
    467c:	2b00      	cmp	r3, #0
    467e:	d004      	beq.n	468a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4682:	2280      	movs	r2, #128	; 0x80
    4684:	0292      	lsls	r2, r2, #10
    4686:	4313      	orrs	r3, r2
    4688:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	7cdb      	ldrb	r3, [r3, #19]
    468e:	2b00      	cmp	r3, #0
    4690:	d004      	beq.n	469c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4694:	2280      	movs	r2, #128	; 0x80
    4696:	0092      	lsls	r2, r2, #2
    4698:	4313      	orrs	r3, r2
    469a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    469c:	683b      	ldr	r3, [r7, #0]
    469e:	7d1b      	ldrb	r3, [r3, #20]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d004      	beq.n	46ae <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    46a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    46a6:	2280      	movs	r2, #128	; 0x80
    46a8:	0192      	lsls	r2, r2, #6
    46aa:	4313      	orrs	r3, r2
    46ac:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    46ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46b0:	681a      	ldr	r2, [r3, #0]
    46b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    46b4:	431a      	orrs	r2, r3
    46b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46b8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    46ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46bc:	685a      	ldr	r2, [r3, #4]
    46be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    46c0:	431a      	orrs	r2, r3
    46c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    46c4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    46c6:	2300      	movs	r3, #0
}
    46c8:	0018      	movs	r0, r3
    46ca:	46bd      	mov	sp, r7
    46cc:	b013      	add	sp, #76	; 0x4c
    46ce:	bd90      	pop	{r4, r7, pc}
    46d0:	00003fd1 	.word	0x00003fd1
    46d4:	00003c71 	.word	0x00003c71
    46d8:	00006c2d 	.word	0x00006c2d
    46dc:	00003e2d 	.word	0x00003e2d
    46e0:	00006a65 	.word	0x00006a65
    46e4:	000039a7 	.word	0x000039a7
    46e8:	00004145 	.word	0x00004145

000046ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    46ec:	b590      	push	{r4, r7, lr}
    46ee:	b08b      	sub	sp, #44	; 0x2c
    46f0:	af00      	add	r7, sp, #0
    46f2:	60f8      	str	r0, [r7, #12]
    46f4:	60b9      	str	r1, [r7, #8]
    46f6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    46f8:	68fb      	ldr	r3, [r7, #12]
    46fa:	68ba      	ldr	r2, [r7, #8]
    46fc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4704:	6a3b      	ldr	r3, [r7, #32]
    4706:	681b      	ldr	r3, [r3, #0]
    4708:	2202      	movs	r2, #2
    470a:	4013      	ands	r3, r2
    470c:	d001      	beq.n	4712 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    470e:	231c      	movs	r3, #28
    4710:	e09c      	b.n	484c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4712:	6a3b      	ldr	r3, [r7, #32]
    4714:	681b      	ldr	r3, [r3, #0]
    4716:	2201      	movs	r2, #1
    4718:	4013      	ands	r3, r2
    471a:	d001      	beq.n	4720 <spi_init+0x34>
		return STATUS_BUSY;
    471c:	2305      	movs	r3, #5
    471e:	e095      	b.n	484c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4720:	68fb      	ldr	r3, [r7, #12]
    4722:	681b      	ldr	r3, [r3, #0]
    4724:	0018      	movs	r0, r3
    4726:	4b4b      	ldr	r3, [pc, #300]	; (4854 <spi_init+0x168>)
    4728:	4798      	blx	r3
    472a:	0003      	movs	r3, r0
    472c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    472e:	69fb      	ldr	r3, [r7, #28]
    4730:	3302      	adds	r3, #2
    4732:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4734:	69fb      	ldr	r3, [r7, #28]
    4736:	3314      	adds	r3, #20
    4738:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    473a:	2201      	movs	r2, #1
    473c:	69bb      	ldr	r3, [r7, #24]
    473e:	409a      	lsls	r2, r3
    4740:	0013      	movs	r3, r2
    4742:	0019      	movs	r1, r3
    4744:	2002      	movs	r0, #2
    4746:	4b44      	ldr	r3, [pc, #272]	; (4858 <spi_init+0x16c>)
    4748:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    474a:	2310      	movs	r3, #16
    474c:	18fb      	adds	r3, r7, r3
    474e:	0018      	movs	r0, r3
    4750:	4b42      	ldr	r3, [pc, #264]	; (485c <spi_init+0x170>)
    4752:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	2224      	movs	r2, #36	; 0x24
    4758:	5c9a      	ldrb	r2, [r3, r2]
    475a:	2310      	movs	r3, #16
    475c:	18fb      	adds	r3, r7, r3
    475e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4760:	697b      	ldr	r3, [r7, #20]
    4762:	b2db      	uxtb	r3, r3
    4764:	2210      	movs	r2, #16
    4766:	18ba      	adds	r2, r7, r2
    4768:	0011      	movs	r1, r2
    476a:	0018      	movs	r0, r3
    476c:	4b3c      	ldr	r3, [pc, #240]	; (4860 <spi_init+0x174>)
    476e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4770:	697b      	ldr	r3, [r7, #20]
    4772:	b2db      	uxtb	r3, r3
    4774:	0018      	movs	r0, r3
    4776:	4b3b      	ldr	r3, [pc, #236]	; (4864 <spi_init+0x178>)
    4778:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    477a:	687b      	ldr	r3, [r7, #4]
    477c:	2224      	movs	r2, #36	; 0x24
    477e:	5c9b      	ldrb	r3, [r3, r2]
    4780:	2100      	movs	r1, #0
    4782:	0018      	movs	r0, r3
    4784:	4b38      	ldr	r3, [pc, #224]	; (4868 <spi_init+0x17c>)
    4786:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	781b      	ldrb	r3, [r3, #0]
    478c:	2b01      	cmp	r3, #1
    478e:	d105      	bne.n	479c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4790:	6a3b      	ldr	r3, [r7, #32]
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	220c      	movs	r2, #12
    4796:	431a      	orrs	r2, r3
    4798:	6a3b      	ldr	r3, [r7, #32]
    479a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    479c:	2327      	movs	r3, #39	; 0x27
    479e:	18fb      	adds	r3, r7, r3
    47a0:	2200      	movs	r2, #0
    47a2:	701a      	strb	r2, [r3, #0]
    47a4:	e010      	b.n	47c8 <spi_init+0xdc>
		module->callback[i]        = NULL;
    47a6:	2327      	movs	r3, #39	; 0x27
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	781b      	ldrb	r3, [r3, #0]
    47ac:	68fa      	ldr	r2, [r7, #12]
    47ae:	3302      	adds	r3, #2
    47b0:	009b      	lsls	r3, r3, #2
    47b2:	18d3      	adds	r3, r2, r3
    47b4:	3304      	adds	r3, #4
    47b6:	2200      	movs	r2, #0
    47b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    47ba:	2327      	movs	r3, #39	; 0x27
    47bc:	18fb      	adds	r3, r7, r3
    47be:	781a      	ldrb	r2, [r3, #0]
    47c0:	2327      	movs	r3, #39	; 0x27
    47c2:	18fb      	adds	r3, r7, r3
    47c4:	3201      	adds	r2, #1
    47c6:	701a      	strb	r2, [r3, #0]
    47c8:	2327      	movs	r3, #39	; 0x27
    47ca:	18fb      	adds	r3, r7, r3
    47cc:	781b      	ldrb	r3, [r3, #0]
    47ce:	2b06      	cmp	r3, #6
    47d0:	d9e9      	bls.n	47a6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    47d2:	68fb      	ldr	r3, [r7, #12]
    47d4:	2200      	movs	r2, #0
    47d6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    47d8:	68fb      	ldr	r3, [r7, #12]
    47da:	2200      	movs	r2, #0
    47dc:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    47de:	68fb      	ldr	r3, [r7, #12]
    47e0:	2200      	movs	r2, #0
    47e2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    47e4:	68fb      	ldr	r3, [r7, #12]
    47e6:	2200      	movs	r2, #0
    47e8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    47ea:	68fb      	ldr	r3, [r7, #12]
    47ec:	2236      	movs	r2, #54	; 0x36
    47ee:	2100      	movs	r1, #0
    47f0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    47f2:	68fb      	ldr	r3, [r7, #12]
    47f4:	2237      	movs	r2, #55	; 0x37
    47f6:	2100      	movs	r1, #0
    47f8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    47fa:	68fb      	ldr	r3, [r7, #12]
    47fc:	2238      	movs	r2, #56	; 0x38
    47fe:	2100      	movs	r1, #0
    4800:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	2203      	movs	r2, #3
    4806:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4808:	68fb      	ldr	r3, [r7, #12]
    480a:	2200      	movs	r2, #0
    480c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    480e:	68fb      	ldr	r3, [r7, #12]
    4810:	681b      	ldr	r3, [r3, #0]
    4812:	2213      	movs	r2, #19
    4814:	18bc      	adds	r4, r7, r2
    4816:	0018      	movs	r0, r3
    4818:	4b0e      	ldr	r3, [pc, #56]	; (4854 <spi_init+0x168>)
    481a:	4798      	blx	r3
    481c:	0003      	movs	r3, r0
    481e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4820:	4a12      	ldr	r2, [pc, #72]	; (486c <spi_init+0x180>)
    4822:	2313      	movs	r3, #19
    4824:	18fb      	adds	r3, r7, r3
    4826:	781b      	ldrb	r3, [r3, #0]
    4828:	0011      	movs	r1, r2
    482a:	0018      	movs	r0, r3
    482c:	4b10      	ldr	r3, [pc, #64]	; (4870 <spi_init+0x184>)
    482e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4830:	2313      	movs	r3, #19
    4832:	18fb      	adds	r3, r7, r3
    4834:	781a      	ldrb	r2, [r3, #0]
    4836:	4b0f      	ldr	r3, [pc, #60]	; (4874 <spi_init+0x188>)
    4838:	0092      	lsls	r2, r2, #2
    483a:	68f9      	ldr	r1, [r7, #12]
    483c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    483e:	687a      	ldr	r2, [r7, #4]
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	0011      	movs	r1, r2
    4844:	0018      	movs	r0, r3
    4846:	4b0c      	ldr	r3, [pc, #48]	; (4878 <spi_init+0x18c>)
    4848:	4798      	blx	r3
    484a:	0003      	movs	r3, r0
}
    484c:	0018      	movs	r0, r3
    484e:	46bd      	mov	sp, r7
    4850:	b00b      	add	sp, #44	; 0x2c
    4852:	bd90      	pop	{r4, r7, pc}
    4854:	00003e2d 	.word	0x00003e2d
    4858:	000040e9 	.word	0x000040e9
    485c:	000040d1 	.word	0x000040d1
    4860:	00006941 	.word	0x00006941
    4864:	00006985 	.word	0x00006985
    4868:	00003be5 	.word	0x00003be5
    486c:	00004d45 	.word	0x00004d45
    4870:	00003e91 	.word	0x00003e91
    4874:	200009d4 	.word	0x200009d4
    4878:	000044dd 	.word	0x000044dd

0000487c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    487c:	b590      	push	{r4, r7, lr}
    487e:	b087      	sub	sp, #28
    4880:	af00      	add	r7, sp, #0
    4882:	60f8      	str	r0, [r7, #12]
    4884:	60b9      	str	r1, [r7, #8]
    4886:	0019      	movs	r1, r3
    4888:	1dbb      	adds	r3, r7, #6
    488a:	801a      	strh	r2, [r3, #0]
    488c:	1d3b      	adds	r3, r7, #4
    488e:	1c0a      	adds	r2, r1, #0
    4890:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4892:	68fb      	ldr	r3, [r7, #12]
    4894:	2238      	movs	r2, #56	; 0x38
    4896:	5c9b      	ldrb	r3, [r3, r2]
    4898:	b2db      	uxtb	r3, r3
    489a:	2b05      	cmp	r3, #5
    489c:	d101      	bne.n	48a2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    489e:	2305      	movs	r3, #5
    48a0:	e07a      	b.n	4998 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    48a2:	1dbb      	adds	r3, r7, #6
    48a4:	881b      	ldrh	r3, [r3, #0]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d101      	bne.n	48ae <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    48aa:	2317      	movs	r3, #23
    48ac:	e074      	b.n	4998 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    48ae:	68fb      	ldr	r3, [r7, #12]
    48b0:	79db      	ldrb	r3, [r3, #7]
    48b2:	2201      	movs	r2, #1
    48b4:	4053      	eors	r3, r2
    48b6:	b2db      	uxtb	r3, r3
    48b8:	2b00      	cmp	r3, #0
    48ba:	d001      	beq.n	48c0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    48bc:	231c      	movs	r3, #28
    48be:	e06b      	b.n	4998 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    48c0:	2316      	movs	r3, #22
    48c2:	18fb      	adds	r3, r7, r3
    48c4:	2200      	movs	r2, #0
    48c6:	801a      	strh	r2, [r3, #0]

	while (length--) {
    48c8:	e05e      	b.n	4988 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    48ca:	68fb      	ldr	r3, [r7, #12]
    48cc:	795b      	ldrb	r3, [r3, #5]
    48ce:	2b01      	cmp	r3, #1
    48d0:	d112      	bne.n	48f8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    48d2:	46c0      	nop			; (mov r8, r8)
    48d4:	68fb      	ldr	r3, [r7, #12]
    48d6:	0018      	movs	r0, r3
    48d8:	4b31      	ldr	r3, [pc, #196]	; (49a0 <spi_read_buffer_wait+0x124>)
    48da:	4798      	blx	r3
    48dc:	0003      	movs	r3, r0
    48de:	001a      	movs	r2, r3
    48e0:	2301      	movs	r3, #1
    48e2:	4053      	eors	r3, r2
    48e4:	b2db      	uxtb	r3, r3
    48e6:	2b00      	cmp	r3, #0
    48e8:	d1f4      	bne.n	48d4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    48ea:	1d3b      	adds	r3, r7, #4
    48ec:	881a      	ldrh	r2, [r3, #0]
    48ee:	68fb      	ldr	r3, [r7, #12]
    48f0:	0011      	movs	r1, r2
    48f2:	0018      	movs	r0, r3
    48f4:	4b2b      	ldr	r3, [pc, #172]	; (49a4 <spi_read_buffer_wait+0x128>)
    48f6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    48f8:	46c0      	nop			; (mov r8, r8)
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	0018      	movs	r0, r3
    48fe:	4b2a      	ldr	r3, [pc, #168]	; (49a8 <spi_read_buffer_wait+0x12c>)
    4900:	4798      	blx	r3
    4902:	0003      	movs	r3, r0
    4904:	001a      	movs	r2, r3
    4906:	2301      	movs	r3, #1
    4908:	4053      	eors	r3, r2
    490a:	b2db      	uxtb	r3, r3
    490c:	2b00      	cmp	r3, #0
    490e:	d1f4      	bne.n	48fa <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    4910:	2312      	movs	r3, #18
    4912:	18fb      	adds	r3, r7, r3
    4914:	2200      	movs	r2, #0
    4916:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4918:	2315      	movs	r3, #21
    491a:	18fc      	adds	r4, r7, r3
    491c:	2312      	movs	r3, #18
    491e:	18fa      	adds	r2, r7, r3
    4920:	68fb      	ldr	r3, [r7, #12]
    4922:	0011      	movs	r1, r2
    4924:	0018      	movs	r0, r3
    4926:	4b21      	ldr	r3, [pc, #132]	; (49ac <spi_read_buffer_wait+0x130>)
    4928:	4798      	blx	r3
    492a:	0003      	movs	r3, r0
    492c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    492e:	2315      	movs	r3, #21
    4930:	18fb      	adds	r3, r7, r3
    4932:	781b      	ldrb	r3, [r3, #0]
    4934:	2b00      	cmp	r3, #0
    4936:	d003      	beq.n	4940 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4938:	2315      	movs	r3, #21
    493a:	18fb      	adds	r3, r7, r3
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	e02b      	b.n	4998 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4940:	2316      	movs	r3, #22
    4942:	18fb      	adds	r3, r7, r3
    4944:	881b      	ldrh	r3, [r3, #0]
    4946:	2216      	movs	r2, #22
    4948:	18ba      	adds	r2, r7, r2
    494a:	1c59      	adds	r1, r3, #1
    494c:	8011      	strh	r1, [r2, #0]
    494e:	001a      	movs	r2, r3
    4950:	68bb      	ldr	r3, [r7, #8]
    4952:	189b      	adds	r3, r3, r2
    4954:	2212      	movs	r2, #18
    4956:	18ba      	adds	r2, r7, r2
    4958:	8812      	ldrh	r2, [r2, #0]
    495a:	b2d2      	uxtb	r2, r2
    495c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    495e:	68fb      	ldr	r3, [r7, #12]
    4960:	799b      	ldrb	r3, [r3, #6]
    4962:	2b01      	cmp	r3, #1
    4964:	d110      	bne.n	4988 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    4966:	2316      	movs	r3, #22
    4968:	18fb      	adds	r3, r7, r3
    496a:	881b      	ldrh	r3, [r3, #0]
    496c:	2216      	movs	r2, #22
    496e:	18ba      	adds	r2, r7, r2
    4970:	1c59      	adds	r1, r3, #1
    4972:	8011      	strh	r1, [r2, #0]
    4974:	001a      	movs	r2, r3
    4976:	68bb      	ldr	r3, [r7, #8]
    4978:	189b      	adds	r3, r3, r2
    497a:	2212      	movs	r2, #18
    497c:	18ba      	adds	r2, r7, r2
    497e:	8812      	ldrh	r2, [r2, #0]
    4980:	0a12      	lsrs	r2, r2, #8
    4982:	b292      	uxth	r2, r2
    4984:	b2d2      	uxtb	r2, r2
    4986:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4988:	1dbb      	adds	r3, r7, #6
    498a:	881b      	ldrh	r3, [r3, #0]
    498c:	1dba      	adds	r2, r7, #6
    498e:	1e59      	subs	r1, r3, #1
    4990:	8011      	strh	r1, [r2, #0]
    4992:	2b00      	cmp	r3, #0
    4994:	d199      	bne.n	48ca <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    4996:	2300      	movs	r3, #0
}
    4998:	0018      	movs	r0, r3
    499a:	46bd      	mov	sp, r7
    499c:	b007      	add	sp, #28
    499e:	bd90      	pop	{r4, r7, pc}
    49a0:	000042b5 	.word	0x000042b5
    49a4:	00004305 	.word	0x00004305
    49a8:	000042dd 	.word	0x000042dd
    49ac:	0000434d 	.word	0x0000434d

000049b0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    49b0:	b580      	push	{r7, lr}
    49b2:	b086      	sub	sp, #24
    49b4:	af00      	add	r7, sp, #0
    49b6:	60f8      	str	r0, [r7, #12]
    49b8:	60b9      	str	r1, [r7, #8]
    49ba:	1dfb      	adds	r3, r7, #7
    49bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    49be:	68fb      	ldr	r3, [r7, #12]
    49c0:	795b      	ldrb	r3, [r3, #5]
    49c2:	2b01      	cmp	r3, #1
    49c4:	d001      	beq.n	49ca <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    49c6:	2315      	movs	r3, #21
    49c8:	e05c      	b.n	4a84 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    49ca:	68fb      	ldr	r3, [r7, #12]
    49cc:	7a1b      	ldrb	r3, [r3, #8]
    49ce:	2201      	movs	r2, #1
    49d0:	4053      	eors	r3, r2
    49d2:	b2db      	uxtb	r3, r3
    49d4:	2b00      	cmp	r3, #0
    49d6:	d054      	beq.n	4a82 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    49d8:	1dfb      	adds	r3, r7, #7
    49da:	781b      	ldrb	r3, [r3, #0]
    49dc:	2b00      	cmp	r3, #0
    49de:	d04a      	beq.n	4a76 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    49e0:	68bb      	ldr	r3, [r7, #8]
    49e2:	785b      	ldrb	r3, [r3, #1]
    49e4:	2b00      	cmp	r3, #0
    49e6:	d03f      	beq.n	4a68 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    49e8:	68fb      	ldr	r3, [r7, #12]
    49ea:	0018      	movs	r0, r3
    49ec:	4b27      	ldr	r3, [pc, #156]	; (4a8c <spi_select_slave+0xdc>)
    49ee:	4798      	blx	r3
    49f0:	0003      	movs	r3, r0
    49f2:	001a      	movs	r2, r3
    49f4:	2301      	movs	r3, #1
    49f6:	4053      	eors	r3, r2
    49f8:	b2db      	uxtb	r3, r3
    49fa:	2b00      	cmp	r3, #0
    49fc:	d007      	beq.n	4a0e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    49fe:	68bb      	ldr	r3, [r7, #8]
    4a00:	781b      	ldrb	r3, [r3, #0]
    4a02:	2101      	movs	r1, #1
    4a04:	0018      	movs	r0, r3
    4a06:	4b22      	ldr	r3, [pc, #136]	; (4a90 <spi_select_slave+0xe0>)
    4a08:	4798      	blx	r3
					return STATUS_BUSY;
    4a0a:	2305      	movs	r3, #5
    4a0c:	e03a      	b.n	4a84 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4a0e:	68bb      	ldr	r3, [r7, #8]
    4a10:	781b      	ldrb	r3, [r3, #0]
    4a12:	2100      	movs	r1, #0
    4a14:	0018      	movs	r0, r3
    4a16:	4b1e      	ldr	r3, [pc, #120]	; (4a90 <spi_select_slave+0xe0>)
    4a18:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4a1a:	68bb      	ldr	r3, [r7, #8]
    4a1c:	789b      	ldrb	r3, [r3, #2]
    4a1e:	b29a      	uxth	r2, r3
    4a20:	68fb      	ldr	r3, [r7, #12]
    4a22:	0011      	movs	r1, r2
    4a24:	0018      	movs	r0, r3
    4a26:	4b1b      	ldr	r3, [pc, #108]	; (4a94 <spi_select_slave+0xe4>)
    4a28:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	79db      	ldrb	r3, [r3, #7]
    4a2e:	2201      	movs	r2, #1
    4a30:	4053      	eors	r3, r2
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b00      	cmp	r3, #0
    4a36:	d024      	beq.n	4a82 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4a38:	46c0      	nop			; (mov r8, r8)
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	0018      	movs	r0, r3
    4a3e:	4b16      	ldr	r3, [pc, #88]	; (4a98 <spi_select_slave+0xe8>)
    4a40:	4798      	blx	r3
    4a42:	0003      	movs	r3, r0
    4a44:	001a      	movs	r2, r3
    4a46:	2301      	movs	r3, #1
    4a48:	4053      	eors	r3, r2
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d1f4      	bne.n	4a3a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4a50:	2316      	movs	r3, #22
    4a52:	18fb      	adds	r3, r7, r3
    4a54:	2200      	movs	r2, #0
    4a56:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4a58:	2316      	movs	r3, #22
    4a5a:	18fa      	adds	r2, r7, r3
    4a5c:	68fb      	ldr	r3, [r7, #12]
    4a5e:	0011      	movs	r1, r2
    4a60:	0018      	movs	r0, r3
    4a62:	4b0e      	ldr	r3, [pc, #56]	; (4a9c <spi_select_slave+0xec>)
    4a64:	4798      	blx	r3
    4a66:	e00c      	b.n	4a82 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4a68:	68bb      	ldr	r3, [r7, #8]
    4a6a:	781b      	ldrb	r3, [r3, #0]
    4a6c:	2100      	movs	r1, #0
    4a6e:	0018      	movs	r0, r3
    4a70:	4b07      	ldr	r3, [pc, #28]	; (4a90 <spi_select_slave+0xe0>)
    4a72:	4798      	blx	r3
    4a74:	e005      	b.n	4a82 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4a76:	68bb      	ldr	r3, [r7, #8]
    4a78:	781b      	ldrb	r3, [r3, #0]
    4a7a:	2101      	movs	r1, #1
    4a7c:	0018      	movs	r0, r3
    4a7e:	4b04      	ldr	r3, [pc, #16]	; (4a90 <spi_select_slave+0xe0>)
    4a80:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4a82:	2300      	movs	r3, #0
}
    4a84:	0018      	movs	r0, r3
    4a86:	46bd      	mov	sp, r7
    4a88:	b006      	add	sp, #24
    4a8a:	bd80      	pop	{r7, pc}
    4a8c:	000042b5 	.word	0x000042b5
    4a90:	0000407d 	.word	0x0000407d
    4a94:	00004305 	.word	0x00004305
    4a98:	000042dd 	.word	0x000042dd
    4a9c:	0000434d 	.word	0x0000434d

00004aa0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4aa0:	b580      	push	{r7, lr}
    4aa2:	b086      	sub	sp, #24
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	60f8      	str	r0, [r7, #12]
    4aa8:	60b9      	str	r1, [r7, #8]
    4aaa:	1dbb      	adds	r3, r7, #6
    4aac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4aae:	68fb      	ldr	r3, [r7, #12]
    4ab0:	2238      	movs	r2, #56	; 0x38
    4ab2:	5c9b      	ldrb	r3, [r3, r2]
    4ab4:	b2db      	uxtb	r3, r3
    4ab6:	2b05      	cmp	r3, #5
    4ab8:	d101      	bne.n	4abe <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4aba:	2305      	movs	r3, #5
    4abc:	e087      	b.n	4bce <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4abe:	1dbb      	adds	r3, r7, #6
    4ac0:	881b      	ldrh	r3, [r3, #0]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d101      	bne.n	4aca <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4ac6:	2317      	movs	r3, #23
    4ac8:	e081      	b.n	4bce <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4aca:	2316      	movs	r3, #22
    4acc:	18fb      	adds	r3, r7, r3
    4ace:	2200      	movs	r2, #0
    4ad0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4ad2:	2314      	movs	r3, #20
    4ad4:	18fb      	adds	r3, r7, r3
    4ad6:	1dba      	adds	r2, r7, #6
    4ad8:	8812      	ldrh	r2, [r2, #0]
    4ada:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4adc:	e05f      	b.n	4b9e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4ade:	46c0      	nop			; (mov r8, r8)
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	0018      	movs	r0, r3
    4ae4:	4b3c      	ldr	r3, [pc, #240]	; (4bd8 <spi_write_buffer_wait+0x138>)
    4ae6:	4798      	blx	r3
    4ae8:	0003      	movs	r3, r0
    4aea:	001a      	movs	r2, r3
    4aec:	2301      	movs	r3, #1
    4aee:	4053      	eors	r3, r2
    4af0:	b2db      	uxtb	r3, r3
    4af2:	2b00      	cmp	r3, #0
    4af4:	d1f4      	bne.n	4ae0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4af6:	2316      	movs	r3, #22
    4af8:	18fb      	adds	r3, r7, r3
    4afa:	881b      	ldrh	r3, [r3, #0]
    4afc:	2216      	movs	r2, #22
    4afe:	18ba      	adds	r2, r7, r2
    4b00:	1c59      	adds	r1, r3, #1
    4b02:	8011      	strh	r1, [r2, #0]
    4b04:	001a      	movs	r2, r3
    4b06:	68bb      	ldr	r3, [r7, #8]
    4b08:	189b      	adds	r3, r3, r2
    4b0a:	781a      	ldrb	r2, [r3, #0]
    4b0c:	2312      	movs	r3, #18
    4b0e:	18fb      	adds	r3, r7, r3
    4b10:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b12:	68fb      	ldr	r3, [r7, #12]
    4b14:	799b      	ldrb	r3, [r3, #6]
    4b16:	2b01      	cmp	r3, #1
    4b18:	d115      	bne.n	4b46 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4b1a:	2316      	movs	r3, #22
    4b1c:	18fb      	adds	r3, r7, r3
    4b1e:	881b      	ldrh	r3, [r3, #0]
    4b20:	2216      	movs	r2, #22
    4b22:	18ba      	adds	r2, r7, r2
    4b24:	1c59      	adds	r1, r3, #1
    4b26:	8011      	strh	r1, [r2, #0]
    4b28:	001a      	movs	r2, r3
    4b2a:	68bb      	ldr	r3, [r7, #8]
    4b2c:	189b      	adds	r3, r3, r2
    4b2e:	781b      	ldrb	r3, [r3, #0]
    4b30:	021b      	lsls	r3, r3, #8
    4b32:	b21a      	sxth	r2, r3
    4b34:	2312      	movs	r3, #18
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	2100      	movs	r1, #0
    4b3a:	5e5b      	ldrsh	r3, [r3, r1]
    4b3c:	4313      	orrs	r3, r2
    4b3e:	b21a      	sxth	r2, r3
    4b40:	2312      	movs	r3, #18
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4b46:	2312      	movs	r3, #18
    4b48:	18fb      	adds	r3, r7, r3
    4b4a:	881a      	ldrh	r2, [r3, #0]
    4b4c:	68fb      	ldr	r3, [r7, #12]
    4b4e:	0011      	movs	r1, r2
    4b50:	0018      	movs	r0, r3
    4b52:	4b22      	ldr	r3, [pc, #136]	; (4bdc <spi_write_buffer_wait+0x13c>)
    4b54:	4798      	blx	r3

		if (module->receiver_enabled) {
    4b56:	68fb      	ldr	r3, [r7, #12]
    4b58:	79db      	ldrb	r3, [r3, #7]
    4b5a:	2214      	movs	r2, #20
    4b5c:	18ba      	adds	r2, r7, r2
    4b5e:	2114      	movs	r1, #20
    4b60:	1879      	adds	r1, r7, r1
    4b62:	8809      	ldrh	r1, [r1, #0]
    4b64:	8011      	strh	r1, [r2, #0]
    4b66:	2b00      	cmp	r3, #0
    4b68:	d019      	beq.n	4b9e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4b6a:	46c0      	nop			; (mov r8, r8)
    4b6c:	68fb      	ldr	r3, [r7, #12]
    4b6e:	0018      	movs	r0, r3
    4b70:	4b1b      	ldr	r3, [pc, #108]	; (4be0 <spi_write_buffer_wait+0x140>)
    4b72:	4798      	blx	r3
    4b74:	0003      	movs	r3, r0
    4b76:	001a      	movs	r2, r3
    4b78:	2301      	movs	r3, #1
    4b7a:	4053      	eors	r3, r2
    4b7c:	b2db      	uxtb	r3, r3
    4b7e:	2b00      	cmp	r3, #0
    4b80:	d1f4      	bne.n	4b6c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4b82:	2310      	movs	r3, #16
    4b84:	18fa      	adds	r2, r7, r3
    4b86:	68fb      	ldr	r3, [r7, #12]
    4b88:	0011      	movs	r1, r2
    4b8a:	0018      	movs	r0, r3
    4b8c:	4b15      	ldr	r3, [pc, #84]	; (4be4 <spi_write_buffer_wait+0x144>)
    4b8e:	4798      	blx	r3
			flush_length--;
    4b90:	2314      	movs	r3, #20
    4b92:	18fb      	adds	r3, r7, r3
    4b94:	881a      	ldrh	r2, [r3, #0]
    4b96:	2314      	movs	r3, #20
    4b98:	18fb      	adds	r3, r7, r3
    4b9a:	3a01      	subs	r2, #1
    4b9c:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4b9e:	1dbb      	adds	r3, r7, #6
    4ba0:	881b      	ldrh	r3, [r3, #0]
    4ba2:	1dba      	adds	r2, r7, #6
    4ba4:	1e59      	subs	r1, r3, #1
    4ba6:	8011      	strh	r1, [r2, #0]
    4ba8:	2b00      	cmp	r3, #0
    4baa:	d198      	bne.n	4ade <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4bac:	68fb      	ldr	r3, [r7, #12]
    4bae:	795b      	ldrb	r3, [r3, #5]
    4bb0:	2b01      	cmp	r3, #1
    4bb2:	d10b      	bne.n	4bcc <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4bb4:	46c0      	nop			; (mov r8, r8)
    4bb6:	68fb      	ldr	r3, [r7, #12]
    4bb8:	0018      	movs	r0, r3
    4bba:	4b0b      	ldr	r3, [pc, #44]	; (4be8 <spi_write_buffer_wait+0x148>)
    4bbc:	4798      	blx	r3
    4bbe:	0003      	movs	r3, r0
    4bc0:	001a      	movs	r2, r3
    4bc2:	2301      	movs	r3, #1
    4bc4:	4053      	eors	r3, r2
    4bc6:	b2db      	uxtb	r3, r3
    4bc8:	2b00      	cmp	r3, #0
    4bca:	d1f4      	bne.n	4bb6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4bcc:	2300      	movs	r3, #0
}
    4bce:	0018      	movs	r0, r3
    4bd0:	46bd      	mov	sp, r7
    4bd2:	b006      	add	sp, #24
    4bd4:	bd80      	pop	{r7, pc}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	000042b5 	.word	0x000042b5
    4bdc:	00004305 	.word	0x00004305
    4be0:	000042dd 	.word	0x000042dd
    4be4:	0000434d 	.word	0x0000434d
    4be8:	0000428d 	.word	0x0000428d

00004bec <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bfe:	781b      	ldrb	r3, [r3, #0]
    4c00:	b2da      	uxtb	r2, r3
    4c02:	230e      	movs	r3, #14
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c0c:	1c5a      	adds	r2, r3, #1
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c12:	687b      	ldr	r3, [r7, #4]
    4c14:	799b      	ldrb	r3, [r3, #6]
    4c16:	2b01      	cmp	r3, #1
    4c18:	d113      	bne.n	4c42 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4c1a:	687b      	ldr	r3, [r7, #4]
    4c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c1e:	781b      	ldrb	r3, [r3, #0]
    4c20:	b2db      	uxtb	r3, r3
    4c22:	021b      	lsls	r3, r3, #8
    4c24:	b21a      	sxth	r2, r3
    4c26:	230e      	movs	r3, #14
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	2100      	movs	r1, #0
    4c2c:	5e5b      	ldrsh	r3, [r3, r1]
    4c2e:	4313      	orrs	r3, r2
    4c30:	b21a      	sxth	r2, r3
    4c32:	230e      	movs	r3, #14
    4c34:	18fb      	adds	r3, r7, r3
    4c36:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c3c:	1c5a      	adds	r2, r3, #1
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4c42:	230e      	movs	r3, #14
    4c44:	18fb      	adds	r3, r7, r3
    4c46:	881b      	ldrh	r3, [r3, #0]
    4c48:	05db      	lsls	r3, r3, #23
    4c4a:	0dda      	lsrs	r2, r3, #23
    4c4c:	68bb      	ldr	r3, [r7, #8]
    4c4e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4c50:	687b      	ldr	r3, [r7, #4]
    4c52:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4c54:	b29b      	uxth	r3, r3
    4c56:	3b01      	subs	r3, #1
    4c58:	b29a      	uxth	r2, r3
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	46bd      	mov	sp, r7
    4c62:	b004      	add	sp, #16
    4c64:	bd80      	pop	{r7, pc}
	...

00004c68 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4c68:	b580      	push	{r7, lr}
    4c6a:	b084      	sub	sp, #16
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	681b      	ldr	r3, [r3, #0]
    4c74:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4c76:	4b08      	ldr	r3, [pc, #32]	; (4c98 <_spi_write_dummy+0x30>)
    4c78:	881b      	ldrh	r3, [r3, #0]
    4c7a:	001a      	movs	r2, r3
    4c7c:	68fb      	ldr	r3, [r7, #12]
    4c7e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4c80:	687b      	ldr	r3, [r7, #4]
    4c82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4c84:	b29b      	uxth	r3, r3
    4c86:	3b01      	subs	r3, #1
    4c88:	b29a      	uxth	r2, r3
    4c8a:	687b      	ldr	r3, [r7, #4]
    4c8c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4c8e:	46c0      	nop			; (mov r8, r8)
    4c90:	46bd      	mov	sp, r7
    4c92:	b004      	add	sp, #16
    4c94:	bd80      	pop	{r7, pc}
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	200009ec 	.word	0x200009ec

00004c9c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4c9c:	b580      	push	{r7, lr}
    4c9e:	b084      	sub	sp, #16
    4ca0:	af00      	add	r7, sp, #0
    4ca2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	681b      	ldr	r3, [r3, #0]
    4ca8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4caa:	230a      	movs	r3, #10
    4cac:	18fb      	adds	r3, r7, r3
    4cae:	2200      	movs	r2, #0
    4cb0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4cb2:	68fb      	ldr	r3, [r7, #12]
    4cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4cb6:	230a      	movs	r3, #10
    4cb8:	18fb      	adds	r3, r7, r3
    4cba:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4cc0:	b29b      	uxth	r3, r3
    4cc2:	3b01      	subs	r3, #1
    4cc4:	b29a      	uxth	r2, r3
    4cc6:	687b      	ldr	r3, [r7, #4]
    4cc8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4cca:	46c0      	nop			; (mov r8, r8)
    4ccc:	46bd      	mov	sp, r7
    4cce:	b004      	add	sp, #16
    4cd0:	bd80      	pop	{r7, pc}

00004cd2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4cd2:	b580      	push	{r7, lr}
    4cd4:	b084      	sub	sp, #16
    4cd6:	af00      	add	r7, sp, #0
    4cd8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	681b      	ldr	r3, [r3, #0]
    4cde:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ce0:	68fb      	ldr	r3, [r7, #12]
    4ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ce4:	b29a      	uxth	r2, r3
    4ce6:	230a      	movs	r3, #10
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	05d2      	lsls	r2, r2, #23
    4cec:	0dd2      	lsrs	r2, r2, #23
    4cee:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4cf0:	687b      	ldr	r3, [r7, #4]
    4cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cf4:	220a      	movs	r2, #10
    4cf6:	18ba      	adds	r2, r7, r2
    4cf8:	8812      	ldrh	r2, [r2, #0]
    4cfa:	b2d2      	uxtb	r2, r2
    4cfc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d02:	1c5a      	adds	r2, r3, #1
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	799b      	ldrb	r3, [r3, #6]
    4d0c:	2b01      	cmp	r3, #1
    4d0e:	d10d      	bne.n	4d2c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d14:	220a      	movs	r2, #10
    4d16:	18ba      	adds	r2, r7, r2
    4d18:	8812      	ldrh	r2, [r2, #0]
    4d1a:	0a12      	lsrs	r2, r2, #8
    4d1c:	b292      	uxth	r2, r2
    4d1e:	b2d2      	uxtb	r2, r2
    4d20:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d26:	1c5a      	adds	r2, r3, #1
    4d28:	687b      	ldr	r3, [r7, #4]
    4d2a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4d2c:	687b      	ldr	r3, [r7, #4]
    4d2e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4d30:	b29b      	uxth	r3, r3
    4d32:	3b01      	subs	r3, #1
    4d34:	b29a      	uxth	r2, r3
    4d36:	687b      	ldr	r3, [r7, #4]
    4d38:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4d3a:	46c0      	nop			; (mov r8, r8)
    4d3c:	46bd      	mov	sp, r7
    4d3e:	b004      	add	sp, #16
    4d40:	bd80      	pop	{r7, pc}
	...

00004d44 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b086      	sub	sp, #24
    4d48:	af00      	add	r7, sp, #0
    4d4a:	0002      	movs	r2, r0
    4d4c:	1dfb      	adds	r3, r7, #7
    4d4e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4d50:	1dfb      	adds	r3, r7, #7
    4d52:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4d54:	4b96      	ldr	r3, [pc, #600]	; (4fb0 <_spi_interrupt_handler+0x26c>)
    4d56:	0092      	lsls	r2, r2, #2
    4d58:	58d3      	ldr	r3, [r2, r3]
    4d5a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d5c:	697b      	ldr	r3, [r7, #20]
    4d5e:	681b      	ldr	r3, [r3, #0]
    4d60:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4d62:	697b      	ldr	r3, [r7, #20]
    4d64:	2237      	movs	r2, #55	; 0x37
    4d66:	5c9a      	ldrb	r2, [r3, r2]
    4d68:	697b      	ldr	r3, [r7, #20]
    4d6a:	2136      	movs	r1, #54	; 0x36
    4d6c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4d6e:	230f      	movs	r3, #15
    4d70:	18fb      	adds	r3, r7, r3
    4d72:	400a      	ands	r2, r1
    4d74:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4d76:	693b      	ldr	r3, [r7, #16]
    4d78:	7e1b      	ldrb	r3, [r3, #24]
    4d7a:	b2da      	uxtb	r2, r3
    4d7c:	230c      	movs	r3, #12
    4d7e:	18fb      	adds	r3, r7, r3
    4d80:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4d82:	693b      	ldr	r3, [r7, #16]
    4d84:	7d9b      	ldrb	r3, [r3, #22]
    4d86:	b2db      	uxtb	r3, r3
    4d88:	b29a      	uxth	r2, r3
    4d8a:	230c      	movs	r3, #12
    4d8c:	18fb      	adds	r3, r7, r3
    4d8e:	210c      	movs	r1, #12
    4d90:	1879      	adds	r1, r7, r1
    4d92:	8809      	ldrh	r1, [r1, #0]
    4d94:	400a      	ands	r2, r1
    4d96:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4d98:	230c      	movs	r3, #12
    4d9a:	18fb      	adds	r3, r7, r3
    4d9c:	881b      	ldrh	r3, [r3, #0]
    4d9e:	2201      	movs	r2, #1
    4da0:	4013      	ands	r3, r2
    4da2:	d038      	beq.n	4e16 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4da4:	697b      	ldr	r3, [r7, #20]
    4da6:	795b      	ldrb	r3, [r3, #5]
    4da8:	2b01      	cmp	r3, #1
    4daa:	d110      	bne.n	4dce <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4dac:	697b      	ldr	r3, [r7, #20]
    4dae:	7a5b      	ldrb	r3, [r3, #9]
    4db0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4db2:	2b00      	cmp	r3, #0
    4db4:	d10b      	bne.n	4dce <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4db6:	697b      	ldr	r3, [r7, #20]
    4db8:	0018      	movs	r0, r3
    4dba:	4b7e      	ldr	r3, [pc, #504]	; (4fb4 <_spi_interrupt_handler+0x270>)
    4dbc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4dbe:	697b      	ldr	r3, [r7, #20]
    4dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4dc2:	b29b      	uxth	r3, r3
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d102      	bne.n	4dce <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4dc8:	693b      	ldr	r3, [r7, #16]
    4dca:	2201      	movs	r2, #1
    4dcc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4dce:	697b      	ldr	r3, [r7, #20]
    4dd0:	795b      	ldrb	r3, [r3, #5]
		if (0
    4dd2:	2b01      	cmp	r3, #1
    4dd4:	d11f      	bne.n	4e16 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4dd6:	697b      	ldr	r3, [r7, #20]
    4dd8:	7a5b      	ldrb	r3, [r3, #9]
    4dda:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d01a      	beq.n	4e16 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4de0:	697b      	ldr	r3, [r7, #20]
    4de2:	0018      	movs	r0, r3
    4de4:	4b74      	ldr	r3, [pc, #464]	; (4fb8 <_spi_interrupt_handler+0x274>)
    4de6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4de8:	697b      	ldr	r3, [r7, #20]
    4dea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4dec:	b29b      	uxth	r3, r3
    4dee:	2b00      	cmp	r3, #0
    4df0:	d111      	bne.n	4e16 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4df2:	693b      	ldr	r3, [r7, #16]
    4df4:	2201      	movs	r2, #1
    4df6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4df8:	697b      	ldr	r3, [r7, #20]
    4dfa:	7a5b      	ldrb	r3, [r3, #9]
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	2b01      	cmp	r3, #1
    4e00:	d109      	bne.n	4e16 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4e02:	697b      	ldr	r3, [r7, #20]
    4e04:	79db      	ldrb	r3, [r3, #7]
    4e06:	2201      	movs	r2, #1
    4e08:	4053      	eors	r3, r2
    4e0a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d002      	beq.n	4e16 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4e10:	693b      	ldr	r3, [r7, #16]
    4e12:	2202      	movs	r2, #2
    4e14:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4e16:	230c      	movs	r3, #12
    4e18:	18fb      	adds	r3, r7, r3
    4e1a:	881b      	ldrh	r3, [r3, #0]
    4e1c:	2204      	movs	r2, #4
    4e1e:	4013      	ands	r3, r2
    4e20:	d100      	bne.n	4e24 <_spi_interrupt_handler+0xe0>
    4e22:	e07e      	b.n	4f22 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e24:	693b      	ldr	r3, [r7, #16]
    4e26:	8b5b      	ldrh	r3, [r3, #26]
    4e28:	b29b      	uxth	r3, r3
    4e2a:	001a      	movs	r2, r3
    4e2c:	2304      	movs	r3, #4
    4e2e:	4013      	ands	r3, r2
    4e30:	d022      	beq.n	4e78 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4e32:	697b      	ldr	r3, [r7, #20]
    4e34:	7a5b      	ldrb	r3, [r3, #9]
    4e36:	b2db      	uxtb	r3, r3
    4e38:	2b01      	cmp	r3, #1
    4e3a:	d014      	beq.n	4e66 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4e3c:	697b      	ldr	r3, [r7, #20]
    4e3e:	2238      	movs	r2, #56	; 0x38
    4e40:	211e      	movs	r1, #30
    4e42:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4e44:	697b      	ldr	r3, [r7, #20]
    4e46:	2203      	movs	r2, #3
    4e48:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4e4a:	693b      	ldr	r3, [r7, #16]
    4e4c:	2205      	movs	r2, #5
    4e4e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4e50:	230f      	movs	r3, #15
    4e52:	18fb      	adds	r3, r7, r3
    4e54:	781b      	ldrb	r3, [r3, #0]
    4e56:	2208      	movs	r2, #8
    4e58:	4013      	ands	r3, r2
    4e5a:	d004      	beq.n	4e66 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4e5c:	697b      	ldr	r3, [r7, #20]
    4e5e:	699b      	ldr	r3, [r3, #24]
    4e60:	697a      	ldr	r2, [r7, #20]
    4e62:	0010      	movs	r0, r2
    4e64:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4e66:	693b      	ldr	r3, [r7, #16]
    4e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e6a:	230a      	movs	r3, #10
    4e6c:	18fb      	adds	r3, r7, r3
    4e6e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e70:	693b      	ldr	r3, [r7, #16]
    4e72:	2204      	movs	r2, #4
    4e74:	835a      	strh	r2, [r3, #26]
    4e76:	e054      	b.n	4f22 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4e78:	697b      	ldr	r3, [r7, #20]
    4e7a:	7a5b      	ldrb	r3, [r3, #9]
    4e7c:	b2db      	uxtb	r3, r3
    4e7e:	2b01      	cmp	r3, #1
    4e80:	d11e      	bne.n	4ec0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4e82:	697b      	ldr	r3, [r7, #20]
    4e84:	0018      	movs	r0, r3
    4e86:	4b4d      	ldr	r3, [pc, #308]	; (4fbc <_spi_interrupt_handler+0x278>)
    4e88:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4e8a:	697b      	ldr	r3, [r7, #20]
    4e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4e8e:	b29b      	uxth	r3, r3
    4e90:	2b00      	cmp	r3, #0
    4e92:	d146      	bne.n	4f22 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4e94:	693b      	ldr	r3, [r7, #16]
    4e96:	2204      	movs	r2, #4
    4e98:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4e9a:	697b      	ldr	r3, [r7, #20]
    4e9c:	2238      	movs	r2, #56	; 0x38
    4e9e:	2100      	movs	r1, #0
    4ea0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4ea2:	697b      	ldr	r3, [r7, #20]
    4ea4:	2203      	movs	r2, #3
    4ea6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4ea8:	230f      	movs	r3, #15
    4eaa:	18fb      	adds	r3, r7, r3
    4eac:	781b      	ldrb	r3, [r3, #0]
    4eae:	2201      	movs	r2, #1
    4eb0:	4013      	ands	r3, r2
    4eb2:	d036      	beq.n	4f22 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4eb4:	697b      	ldr	r3, [r7, #20]
    4eb6:	68db      	ldr	r3, [r3, #12]
    4eb8:	697a      	ldr	r2, [r7, #20]
    4eba:	0010      	movs	r0, r2
    4ebc:	4798      	blx	r3
    4ebe:	e030      	b.n	4f22 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4ec0:	697b      	ldr	r3, [r7, #20]
    4ec2:	0018      	movs	r0, r3
    4ec4:	4b3e      	ldr	r3, [pc, #248]	; (4fc0 <_spi_interrupt_handler+0x27c>)
    4ec6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4ec8:	697b      	ldr	r3, [r7, #20]
    4eca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4ecc:	b29b      	uxth	r3, r3
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d127      	bne.n	4f22 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    4ed2:	697b      	ldr	r3, [r7, #20]
    4ed4:	2238      	movs	r2, #56	; 0x38
    4ed6:	2100      	movs	r1, #0
    4ed8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4eda:	693b      	ldr	r3, [r7, #16]
    4edc:	2204      	movs	r2, #4
    4ede:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4ee0:	697b      	ldr	r3, [r7, #20]
    4ee2:	7a5b      	ldrb	r3, [r3, #9]
    4ee4:	b2db      	uxtb	r3, r3
    4ee6:	2b02      	cmp	r3, #2
    4ee8:	d10b      	bne.n	4f02 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4eea:	230f      	movs	r3, #15
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	781b      	ldrb	r3, [r3, #0]
    4ef0:	2204      	movs	r2, #4
    4ef2:	4013      	ands	r3, r2
    4ef4:	d015      	beq.n	4f22 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4ef6:	697b      	ldr	r3, [r7, #20]
    4ef8:	695b      	ldr	r3, [r3, #20]
    4efa:	697a      	ldr	r2, [r7, #20]
    4efc:	0010      	movs	r0, r2
    4efe:	4798      	blx	r3
    4f00:	e00f      	b.n	4f22 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4f02:	697b      	ldr	r3, [r7, #20]
    4f04:	7a5b      	ldrb	r3, [r3, #9]
    4f06:	b2db      	uxtb	r3, r3
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d10a      	bne.n	4f22 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4f0c:	230f      	movs	r3, #15
    4f0e:	18fb      	adds	r3, r7, r3
    4f10:	781b      	ldrb	r3, [r3, #0]
    4f12:	2202      	movs	r2, #2
    4f14:	4013      	ands	r3, r2
    4f16:	d004      	beq.n	4f22 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4f18:	697b      	ldr	r3, [r7, #20]
    4f1a:	691b      	ldr	r3, [r3, #16]
    4f1c:	697a      	ldr	r2, [r7, #20]
    4f1e:	0010      	movs	r0, r2
    4f20:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4f22:	230c      	movs	r3, #12
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	881b      	ldrh	r3, [r3, #0]
    4f28:	2202      	movs	r2, #2
    4f2a:	4013      	ands	r3, r2
    4f2c:	d024      	beq.n	4f78 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4f2e:	697b      	ldr	r3, [r7, #20]
    4f30:	795b      	ldrb	r3, [r3, #5]
    4f32:	2b01      	cmp	r3, #1
    4f34:	d120      	bne.n	4f78 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4f36:	697b      	ldr	r3, [r7, #20]
    4f38:	7a5b      	ldrb	r3, [r3, #9]
    4f3a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4f3c:	2b01      	cmp	r3, #1
    4f3e:	d11b      	bne.n	4f78 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4f40:	697b      	ldr	r3, [r7, #20]
    4f42:	79db      	ldrb	r3, [r3, #7]
    4f44:	2201      	movs	r2, #1
    4f46:	4053      	eors	r3, r2
    4f48:	b2db      	uxtb	r3, r3
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d014      	beq.n	4f78 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4f4e:	693b      	ldr	r3, [r7, #16]
    4f50:	2202      	movs	r2, #2
    4f52:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4f54:	697b      	ldr	r3, [r7, #20]
    4f56:	2203      	movs	r2, #3
    4f58:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4f5a:	697b      	ldr	r3, [r7, #20]
    4f5c:	2238      	movs	r2, #56	; 0x38
    4f5e:	2100      	movs	r1, #0
    4f60:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4f62:	230f      	movs	r3, #15
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	2201      	movs	r2, #1
    4f6a:	4013      	ands	r3, r2
    4f6c:	d004      	beq.n	4f78 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4f6e:	697b      	ldr	r3, [r7, #20]
    4f70:	68db      	ldr	r3, [r3, #12]
    4f72:	697a      	ldr	r2, [r7, #20]
    4f74:	0010      	movs	r0, r2
    4f76:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4f78:	230c      	movs	r3, #12
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	881b      	ldrh	r3, [r3, #0]
    4f7e:	2280      	movs	r2, #128	; 0x80
    4f80:	4013      	ands	r3, r2
    4f82:	d010      	beq.n	4fa6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4f84:	693b      	ldr	r3, [r7, #16]
    4f86:	2280      	movs	r2, #128	; 0x80
    4f88:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4f8a:	693b      	ldr	r3, [r7, #16]
    4f8c:	2280      	movs	r2, #128	; 0x80
    4f8e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4f90:	230f      	movs	r3, #15
    4f92:	18fb      	adds	r3, r7, r3
    4f94:	781b      	ldrb	r3, [r3, #0]
    4f96:	2240      	movs	r2, #64	; 0x40
    4f98:	4013      	ands	r3, r2
    4f9a:	d004      	beq.n	4fa6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4f9c:	697b      	ldr	r3, [r7, #20]
    4f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fa0:	697a      	ldr	r2, [r7, #20]
    4fa2:	0010      	movs	r0, r2
    4fa4:	4798      	blx	r3
		}
	}
#  endif
}
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	46bd      	mov	sp, r7
    4faa:	b006      	add	sp, #24
    4fac:	bd80      	pop	{r7, pc}
    4fae:	46c0      	nop			; (mov r8, r8)
    4fb0:	200009d4 	.word	0x200009d4
    4fb4:	00004c69 	.word	0x00004c69
    4fb8:	00004bed 	.word	0x00004bed
    4fbc:	00004c9d 	.word	0x00004c9d
    4fc0:	00004cd3 	.word	0x00004cd3

00004fc4 <system_gclk_chan_get_config_defaults>:
{
    4fc4:	b580      	push	{r7, lr}
    4fc6:	b082      	sub	sp, #8
    4fc8:	af00      	add	r7, sp, #0
    4fca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	2200      	movs	r2, #0
    4fd0:	701a      	strb	r2, [r3, #0]
}
    4fd2:	46c0      	nop			; (mov r8, r8)
    4fd4:	46bd      	mov	sp, r7
    4fd6:	b002      	add	sp, #8
    4fd8:	bd80      	pop	{r7, pc}
	...

00004fdc <system_apb_clock_set_mask>:
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	0002      	movs	r2, r0
    4fe4:	6039      	str	r1, [r7, #0]
    4fe6:	1dfb      	adds	r3, r7, #7
    4fe8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4fea:	1dfb      	adds	r3, r7, #7
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	2b01      	cmp	r3, #1
    4ff0:	d00a      	beq.n	5008 <system_apb_clock_set_mask+0x2c>
    4ff2:	2b02      	cmp	r3, #2
    4ff4:	d00f      	beq.n	5016 <system_apb_clock_set_mask+0x3a>
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d114      	bne.n	5024 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4ffa:	4b0e      	ldr	r3, [pc, #56]	; (5034 <system_apb_clock_set_mask+0x58>)
    4ffc:	4a0d      	ldr	r2, [pc, #52]	; (5034 <system_apb_clock_set_mask+0x58>)
    4ffe:	6991      	ldr	r1, [r2, #24]
    5000:	683a      	ldr	r2, [r7, #0]
    5002:	430a      	orrs	r2, r1
    5004:	619a      	str	r2, [r3, #24]
			break;
    5006:	e00f      	b.n	5028 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5008:	4b0a      	ldr	r3, [pc, #40]	; (5034 <system_apb_clock_set_mask+0x58>)
    500a:	4a0a      	ldr	r2, [pc, #40]	; (5034 <system_apb_clock_set_mask+0x58>)
    500c:	69d1      	ldr	r1, [r2, #28]
    500e:	683a      	ldr	r2, [r7, #0]
    5010:	430a      	orrs	r2, r1
    5012:	61da      	str	r2, [r3, #28]
			break;
    5014:	e008      	b.n	5028 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5016:	4b07      	ldr	r3, [pc, #28]	; (5034 <system_apb_clock_set_mask+0x58>)
    5018:	4a06      	ldr	r2, [pc, #24]	; (5034 <system_apb_clock_set_mask+0x58>)
    501a:	6a11      	ldr	r1, [r2, #32]
    501c:	683a      	ldr	r2, [r7, #0]
    501e:	430a      	orrs	r2, r1
    5020:	621a      	str	r2, [r3, #32]
			break;
    5022:	e001      	b.n	5028 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5024:	2317      	movs	r3, #23
    5026:	e000      	b.n	502a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5028:	2300      	movs	r3, #0
}
    502a:	0018      	movs	r0, r3
    502c:	46bd      	mov	sp, r7
    502e:	b002      	add	sp, #8
    5030:	bd80      	pop	{r7, pc}
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	40000400 	.word	0x40000400

00005038 <system_pinmux_get_config_defaults>:
{
    5038:	b580      	push	{r7, lr}
    503a:	b082      	sub	sp, #8
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	2280      	movs	r2, #128	; 0x80
    5044:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	2200      	movs	r2, #0
    504a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	2201      	movs	r2, #1
    5050:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5052:	687b      	ldr	r3, [r7, #4]
    5054:	2200      	movs	r2, #0
    5056:	70da      	strb	r2, [r3, #3]
}
    5058:	46c0      	nop			; (mov r8, r8)
    505a:	46bd      	mov	sp, r7
    505c:	b002      	add	sp, #8
    505e:	bd80      	pop	{r7, pc}

00005060 <system_is_debugger_present>:
{
    5060:	b580      	push	{r7, lr}
    5062:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5064:	4b05      	ldr	r3, [pc, #20]	; (507c <system_is_debugger_present+0x1c>)
    5066:	789b      	ldrb	r3, [r3, #2]
    5068:	b2db      	uxtb	r3, r3
    506a:	001a      	movs	r2, r3
    506c:	2302      	movs	r3, #2
    506e:	4013      	ands	r3, r2
    5070:	1e5a      	subs	r2, r3, #1
    5072:	4193      	sbcs	r3, r2
    5074:	b2db      	uxtb	r3, r3
}
    5076:	0018      	movs	r0, r3
    5078:	46bd      	mov	sp, r7
    507a:	bd80      	pop	{r7, pc}
    507c:	41002000 	.word	0x41002000

00005080 <usart_is_syncing>:
{
    5080:	b580      	push	{r7, lr}
    5082:	b084      	sub	sp, #16
    5084:	af00      	add	r7, sp, #0
    5086:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5088:	687b      	ldr	r3, [r7, #4]
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    508e:	68fb      	ldr	r3, [r7, #12]
    5090:	69db      	ldr	r3, [r3, #28]
    5092:	1e5a      	subs	r2, r3, #1
    5094:	4193      	sbcs	r3, r2
    5096:	b2db      	uxtb	r3, r3
}
    5098:	0018      	movs	r0, r3
    509a:	46bd      	mov	sp, r7
    509c:	b004      	add	sp, #16
    509e:	bd80      	pop	{r7, pc}

000050a0 <_usart_wait_for_sync>:
{
    50a0:	b580      	push	{r7, lr}
    50a2:	b082      	sub	sp, #8
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    50a8:	46c0      	nop			; (mov r8, r8)
    50aa:	687b      	ldr	r3, [r7, #4]
    50ac:	0018      	movs	r0, r3
    50ae:	4b04      	ldr	r3, [pc, #16]	; (50c0 <_usart_wait_for_sync+0x20>)
    50b0:	4798      	blx	r3
    50b2:	1e03      	subs	r3, r0, #0
    50b4:	d1f9      	bne.n	50aa <_usart_wait_for_sync+0xa>
}
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	46bd      	mov	sp, r7
    50ba:	b002      	add	sp, #8
    50bc:	bd80      	pop	{r7, pc}
    50be:	46c0      	nop			; (mov r8, r8)
    50c0:	00005081 	.word	0x00005081

000050c4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    50c4:	b5b0      	push	{r4, r5, r7, lr}
    50c6:	b08c      	sub	sp, #48	; 0x30
    50c8:	af02      	add	r7, sp, #8
    50ca:	6078      	str	r0, [r7, #4]
    50cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    50ce:	687b      	ldr	r3, [r7, #4]
    50d0:	681b      	ldr	r3, [r3, #0]
    50d2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    50d4:	687b      	ldr	r3, [r7, #4]
    50d6:	681b      	ldr	r3, [r3, #0]
    50d8:	0018      	movs	r0, r3
    50da:	4bab      	ldr	r3, [pc, #684]	; (5388 <_usart_set_config+0x2c4>)
    50dc:	4798      	blx	r3
    50de:	0003      	movs	r3, r0
    50e0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    50e2:	697b      	ldr	r3, [r7, #20]
    50e4:	3314      	adds	r3, #20
    50e6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    50e8:	2300      	movs	r3, #0
    50ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    50ec:	2300      	movs	r3, #0
    50ee:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    50f0:	230a      	movs	r3, #10
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	2200      	movs	r2, #0
    50f6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    50f8:	231f      	movs	r3, #31
    50fa:	18fb      	adds	r3, r7, r3
    50fc:	2200      	movs	r2, #0
    50fe:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5100:	231e      	movs	r3, #30
    5102:	18fb      	adds	r3, r7, r3
    5104:	2210      	movs	r2, #16
    5106:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5108:	683b      	ldr	r3, [r7, #0]
    510a:	8a1b      	ldrh	r3, [r3, #16]
    510c:	2280      	movs	r2, #128	; 0x80
    510e:	01d2      	lsls	r2, r2, #7
    5110:	4293      	cmp	r3, r2
    5112:	d01c      	beq.n	514e <_usart_set_config+0x8a>
    5114:	2280      	movs	r2, #128	; 0x80
    5116:	01d2      	lsls	r2, r2, #7
    5118:	4293      	cmp	r3, r2
    511a:	dc06      	bgt.n	512a <_usart_set_config+0x66>
    511c:	2b00      	cmp	r3, #0
    511e:	d00d      	beq.n	513c <_usart_set_config+0x78>
    5120:	2280      	movs	r2, #128	; 0x80
    5122:	0192      	lsls	r2, r2, #6
    5124:	4293      	cmp	r3, r2
    5126:	d024      	beq.n	5172 <_usart_set_config+0xae>
    5128:	e035      	b.n	5196 <_usart_set_config+0xd2>
    512a:	22c0      	movs	r2, #192	; 0xc0
    512c:	01d2      	lsls	r2, r2, #7
    512e:	4293      	cmp	r3, r2
    5130:	d028      	beq.n	5184 <_usart_set_config+0xc0>
    5132:	2280      	movs	r2, #128	; 0x80
    5134:	0212      	lsls	r2, r2, #8
    5136:	4293      	cmp	r3, r2
    5138:	d012      	beq.n	5160 <_usart_set_config+0x9c>
    513a:	e02c      	b.n	5196 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    513c:	231f      	movs	r3, #31
    513e:	18fb      	adds	r3, r7, r3
    5140:	2200      	movs	r2, #0
    5142:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5144:	231e      	movs	r3, #30
    5146:	18fb      	adds	r3, r7, r3
    5148:	2210      	movs	r2, #16
    514a:	701a      	strb	r2, [r3, #0]
			break;
    514c:	e023      	b.n	5196 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    514e:	231f      	movs	r3, #31
    5150:	18fb      	adds	r3, r7, r3
    5152:	2200      	movs	r2, #0
    5154:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5156:	231e      	movs	r3, #30
    5158:	18fb      	adds	r3, r7, r3
    515a:	2208      	movs	r2, #8
    515c:	701a      	strb	r2, [r3, #0]
			break;
    515e:	e01a      	b.n	5196 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5160:	231f      	movs	r3, #31
    5162:	18fb      	adds	r3, r7, r3
    5164:	2200      	movs	r2, #0
    5166:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5168:	231e      	movs	r3, #30
    516a:	18fb      	adds	r3, r7, r3
    516c:	2203      	movs	r2, #3
    516e:	701a      	strb	r2, [r3, #0]
			break;
    5170:	e011      	b.n	5196 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5172:	231f      	movs	r3, #31
    5174:	18fb      	adds	r3, r7, r3
    5176:	2201      	movs	r2, #1
    5178:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    517a:	231e      	movs	r3, #30
    517c:	18fb      	adds	r3, r7, r3
    517e:	2210      	movs	r2, #16
    5180:	701a      	strb	r2, [r3, #0]
			break;
    5182:	e008      	b.n	5196 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5184:	231f      	movs	r3, #31
    5186:	18fb      	adds	r3, r7, r3
    5188:	2201      	movs	r2, #1
    518a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    518c:	231e      	movs	r3, #30
    518e:	18fb      	adds	r3, r7, r3
    5190:	2208      	movs	r2, #8
    5192:	701a      	strb	r2, [r3, #0]
			break;
    5194:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5196:	683b      	ldr	r3, [r7, #0]
    5198:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    519a:	683b      	ldr	r3, [r7, #0]
    519c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    519e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    51a0:	683b      	ldr	r3, [r7, #0]
    51a2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    51a4:	4313      	orrs	r3, r2
		config->sample_rate |
    51a6:	683a      	ldr	r2, [r7, #0]
    51a8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    51aa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    51ac:	683a      	ldr	r2, [r7, #0]
    51ae:	7e12      	ldrb	r2, [r2, #24]
    51b0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    51b2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    51b4:	683a      	ldr	r2, [r7, #0]
    51b6:	2126      	movs	r1, #38	; 0x26
    51b8:	5c52      	ldrb	r2, [r2, r1]
    51ba:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    51bc:	4313      	orrs	r3, r2
    51be:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    51c0:	231d      	movs	r3, #29
    51c2:	18fb      	adds	r3, r7, r3
    51c4:	2200      	movs	r2, #0
    51c6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    51c8:	683b      	ldr	r3, [r7, #0]
    51ca:	685b      	ldr	r3, [r3, #4]
    51cc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    51ce:	68fb      	ldr	r3, [r7, #12]
    51d0:	2b00      	cmp	r3, #0
    51d2:	d01e      	beq.n	5212 <_usart_set_config+0x14e>
    51d4:	2280      	movs	r2, #128	; 0x80
    51d6:	0552      	lsls	r2, r2, #21
    51d8:	4293      	cmp	r3, r2
    51da:	d14f      	bne.n	527c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    51dc:	683b      	ldr	r3, [r7, #0]
    51de:	2227      	movs	r2, #39	; 0x27
    51e0:	5c9b      	ldrb	r3, [r3, r2]
    51e2:	2201      	movs	r2, #1
    51e4:	4053      	eors	r3, r2
    51e6:	b2db      	uxtb	r3, r3
    51e8:	2b00      	cmp	r3, #0
    51ea:	d046      	beq.n	527a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    51ec:	683b      	ldr	r3, [r7, #0]
    51ee:	6a1d      	ldr	r5, [r3, #32]
    51f0:	693b      	ldr	r3, [r7, #16]
    51f2:	b2db      	uxtb	r3, r3
    51f4:	0018      	movs	r0, r3
    51f6:	4b65      	ldr	r3, [pc, #404]	; (538c <_usart_set_config+0x2c8>)
    51f8:	4798      	blx	r3
    51fa:	0001      	movs	r1, r0
    51fc:	231d      	movs	r3, #29
    51fe:	18fc      	adds	r4, r7, r3
    5200:	230a      	movs	r3, #10
    5202:	18fb      	adds	r3, r7, r3
    5204:	001a      	movs	r2, r3
    5206:	0028      	movs	r0, r5
    5208:	4b61      	ldr	r3, [pc, #388]	; (5390 <_usart_set_config+0x2cc>)
    520a:	4798      	blx	r3
    520c:	0003      	movs	r3, r0
    520e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5210:	e033      	b.n	527a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5212:	683b      	ldr	r3, [r7, #0]
    5214:	2227      	movs	r2, #39	; 0x27
    5216:	5c9b      	ldrb	r3, [r3, r2]
    5218:	2b00      	cmp	r3, #0
    521a:	d014      	beq.n	5246 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    521c:	683b      	ldr	r3, [r7, #0]
    521e:	6a18      	ldr	r0, [r3, #32]
    5220:	683b      	ldr	r3, [r7, #0]
    5222:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5224:	231d      	movs	r3, #29
    5226:	18fc      	adds	r4, r7, r3
    5228:	231f      	movs	r3, #31
    522a:	18fb      	adds	r3, r7, r3
    522c:	781d      	ldrb	r5, [r3, #0]
    522e:	230a      	movs	r3, #10
    5230:	18fa      	adds	r2, r7, r3
    5232:	231e      	movs	r3, #30
    5234:	18fb      	adds	r3, r7, r3
    5236:	781b      	ldrb	r3, [r3, #0]
    5238:	9300      	str	r3, [sp, #0]
    523a:	002b      	movs	r3, r5
    523c:	4d55      	ldr	r5, [pc, #340]	; (5394 <_usart_set_config+0x2d0>)
    523e:	47a8      	blx	r5
    5240:	0003      	movs	r3, r0
    5242:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5244:	e01a      	b.n	527c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5246:	683b      	ldr	r3, [r7, #0]
    5248:	6a1d      	ldr	r5, [r3, #32]
    524a:	693b      	ldr	r3, [r7, #16]
    524c:	b2db      	uxtb	r3, r3
    524e:	0018      	movs	r0, r3
    5250:	4b4e      	ldr	r3, [pc, #312]	; (538c <_usart_set_config+0x2c8>)
    5252:	4798      	blx	r3
				status_code =
    5254:	231d      	movs	r3, #29
    5256:	18fc      	adds	r4, r7, r3
    5258:	231f      	movs	r3, #31
    525a:	18fb      	adds	r3, r7, r3
    525c:	7819      	ldrb	r1, [r3, #0]
    525e:	230a      	movs	r3, #10
    5260:	18fa      	adds	r2, r7, r3
    5262:	231e      	movs	r3, #30
    5264:	18fb      	adds	r3, r7, r3
    5266:	781b      	ldrb	r3, [r3, #0]
    5268:	9300      	str	r3, [sp, #0]
    526a:	000b      	movs	r3, r1
    526c:	0001      	movs	r1, r0
    526e:	0028      	movs	r0, r5
    5270:	4d48      	ldr	r5, [pc, #288]	; (5394 <_usart_set_config+0x2d0>)
    5272:	47a8      	blx	r5
    5274:	0003      	movs	r3, r0
    5276:	7023      	strb	r3, [r4, #0]
			break;
    5278:	e000      	b.n	527c <_usart_set_config+0x1b8>
			break;
    527a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    527c:	231d      	movs	r3, #29
    527e:	18fb      	adds	r3, r7, r3
    5280:	781b      	ldrb	r3, [r3, #0]
    5282:	2b00      	cmp	r3, #0
    5284:	d003      	beq.n	528e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5286:	231d      	movs	r3, #29
    5288:	18fb      	adds	r3, r7, r3
    528a:	781b      	ldrb	r3, [r3, #0]
    528c:	e077      	b.n	537e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    528e:	683b      	ldr	r3, [r7, #0]
    5290:	7e5b      	ldrb	r3, [r3, #25]
    5292:	2b00      	cmp	r3, #0
    5294:	d003      	beq.n	529e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5296:	683b      	ldr	r3, [r7, #0]
    5298:	7e9a      	ldrb	r2, [r3, #26]
    529a:	69bb      	ldr	r3, [r7, #24]
    529c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	0018      	movs	r0, r3
    52a2:	4b3d      	ldr	r3, [pc, #244]	; (5398 <_usart_set_config+0x2d4>)
    52a4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    52a6:	230a      	movs	r3, #10
    52a8:	18fb      	adds	r3, r7, r3
    52aa:	881a      	ldrh	r2, [r3, #0]
    52ac:	69bb      	ldr	r3, [r7, #24]
    52ae:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    52b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    52b2:	68fb      	ldr	r3, [r7, #12]
    52b4:	4313      	orrs	r3, r2
    52b6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    52b8:	683b      	ldr	r3, [r7, #0]
    52ba:	2227      	movs	r2, #39	; 0x27
    52bc:	5c9b      	ldrb	r3, [r3, r2]
    52be:	2201      	movs	r2, #1
    52c0:	4053      	eors	r3, r2
    52c2:	b2db      	uxtb	r3, r3
    52c4:	2b00      	cmp	r3, #0
    52c6:	d003      	beq.n	52d0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    52c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52ca:	2204      	movs	r2, #4
    52cc:	4313      	orrs	r3, r2
    52ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    52d0:	683b      	ldr	r3, [r7, #0]
    52d2:	7e5b      	ldrb	r3, [r3, #25]
    52d4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    52d6:	683b      	ldr	r3, [r7, #0]
    52d8:	7f1b      	ldrb	r3, [r3, #28]
    52da:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    52dc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    52de:	683b      	ldr	r3, [r7, #0]
    52e0:	7f5b      	ldrb	r3, [r3, #29]
    52e2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    52e4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    52e6:	683b      	ldr	r3, [r7, #0]
    52e8:	2124      	movs	r1, #36	; 0x24
    52ea:	5c5b      	ldrb	r3, [r3, r1]
    52ec:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    52ee:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    52f0:	683b      	ldr	r3, [r7, #0]
    52f2:	2125      	movs	r1, #37	; 0x25
    52f4:	5c5b      	ldrb	r3, [r3, r1]
    52f6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    52f8:	4313      	orrs	r3, r2
	ctrlb =  
    52fa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    52fc:	683b      	ldr	r3, [r7, #0]
    52fe:	7a9b      	ldrb	r3, [r3, #10]
    5300:	001a      	movs	r2, r3
    5302:	6a3b      	ldr	r3, [r7, #32]
    5304:	4313      	orrs	r3, r2
    5306:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5308:	683b      	ldr	r3, [r7, #0]
    530a:	7adb      	ldrb	r3, [r3, #11]
    530c:	001a      	movs	r2, r3
    530e:	6a3b      	ldr	r3, [r7, #32]
    5310:	4313      	orrs	r3, r2
    5312:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5314:	683b      	ldr	r3, [r7, #0]
    5316:	891b      	ldrh	r3, [r3, #8]
    5318:	2bff      	cmp	r3, #255	; 0xff
    531a:	d00b      	beq.n	5334 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    531e:	2280      	movs	r2, #128	; 0x80
    5320:	0452      	lsls	r2, r2, #17
    5322:	4313      	orrs	r3, r2
    5324:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5326:	683b      	ldr	r3, [r7, #0]
    5328:	891b      	ldrh	r3, [r3, #8]
    532a:	001a      	movs	r2, r3
    532c:	6a3b      	ldr	r3, [r7, #32]
    532e:	4313      	orrs	r3, r2
    5330:	623b      	str	r3, [r7, #32]
    5332:	e008      	b.n	5346 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5334:	683b      	ldr	r3, [r7, #0]
    5336:	7edb      	ldrb	r3, [r3, #27]
    5338:	2b00      	cmp	r3, #0
    533a:	d004      	beq.n	5346 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    533e:	2280      	movs	r2, #128	; 0x80
    5340:	04d2      	lsls	r2, r2, #19
    5342:	4313      	orrs	r3, r2
    5344:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5346:	683b      	ldr	r3, [r7, #0]
    5348:	222c      	movs	r2, #44	; 0x2c
    534a:	5c9b      	ldrb	r3, [r3, r2]
    534c:	2b00      	cmp	r3, #0
    534e:	d103      	bne.n	5358 <_usart_set_config+0x294>
    5350:	4b12      	ldr	r3, [pc, #72]	; (539c <_usart_set_config+0x2d8>)
    5352:	4798      	blx	r3
    5354:	1e03      	subs	r3, r0, #0
    5356:	d003      	beq.n	5360 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    535a:	2280      	movs	r2, #128	; 0x80
    535c:	4313      	orrs	r3, r2
    535e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	0018      	movs	r0, r3
    5364:	4b0c      	ldr	r3, [pc, #48]	; (5398 <_usart_set_config+0x2d4>)
    5366:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5368:	69bb      	ldr	r3, [r7, #24]
    536a:	6a3a      	ldr	r2, [r7, #32]
    536c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    536e:	687b      	ldr	r3, [r7, #4]
    5370:	0018      	movs	r0, r3
    5372:	4b09      	ldr	r3, [pc, #36]	; (5398 <_usart_set_config+0x2d4>)
    5374:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5376:	69bb      	ldr	r3, [r7, #24]
    5378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    537a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    537c:	2300      	movs	r3, #0
}
    537e:	0018      	movs	r0, r3
    5380:	46bd      	mov	sp, r7
    5382:	b00a      	add	sp, #40	; 0x28
    5384:	bdb0      	pop	{r4, r5, r7, pc}
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	00003e2d 	.word	0x00003e2d
    538c:	00006a65 	.word	0x00006a65
    5390:	000039a7 	.word	0x000039a7
    5394:	00003a25 	.word	0x00003a25
    5398:	000050a1 	.word	0x000050a1
    539c:	00005061 	.word	0x00005061

000053a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    53a0:	b590      	push	{r4, r7, lr}
    53a2:	b093      	sub	sp, #76	; 0x4c
    53a4:	af00      	add	r7, sp, #0
    53a6:	60f8      	str	r0, [r7, #12]
    53a8:	60b9      	str	r1, [r7, #8]
    53aa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    53ac:	233b      	movs	r3, #59	; 0x3b
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	2200      	movs	r2, #0
    53b2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    53b4:	68fb      	ldr	r3, [r7, #12]
    53b6:	68ba      	ldr	r2, [r7, #8]
    53b8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    53ba:	68fb      	ldr	r3, [r7, #12]
    53bc:	681b      	ldr	r3, [r3, #0]
    53be:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    53c0:	68fb      	ldr	r3, [r7, #12]
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	0018      	movs	r0, r3
    53c6:	4b86      	ldr	r3, [pc, #536]	; (55e0 <usart_init+0x240>)
    53c8:	4798      	blx	r3
    53ca:	0003      	movs	r3, r0
    53cc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    53ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    53d0:	3302      	adds	r3, #2
    53d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    53d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    53d6:	3314      	adds	r3, #20
    53d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    53da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53dc:	681b      	ldr	r3, [r3, #0]
    53de:	2201      	movs	r2, #1
    53e0:	4013      	ands	r3, r2
    53e2:	d001      	beq.n	53e8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    53e4:	2305      	movs	r3, #5
    53e6:	e0f6      	b.n	55d6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    53e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ea:	681b      	ldr	r3, [r3, #0]
    53ec:	2202      	movs	r2, #2
    53ee:	4013      	ands	r3, r2
    53f0:	d001      	beq.n	53f6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    53f2:	231c      	movs	r3, #28
    53f4:	e0ef      	b.n	55d6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    53f6:	2201      	movs	r2, #1
    53f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    53fa:	409a      	lsls	r2, r3
    53fc:	0013      	movs	r3, r2
    53fe:	0019      	movs	r1, r3
    5400:	2002      	movs	r0, #2
    5402:	4b78      	ldr	r3, [pc, #480]	; (55e4 <usart_init+0x244>)
    5404:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5406:	2324      	movs	r3, #36	; 0x24
    5408:	18fb      	adds	r3, r7, r3
    540a:	0018      	movs	r0, r3
    540c:	4b76      	ldr	r3, [pc, #472]	; (55e8 <usart_init+0x248>)
    540e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	222d      	movs	r2, #45	; 0x2d
    5414:	5c9a      	ldrb	r2, [r3, r2]
    5416:	2324      	movs	r3, #36	; 0x24
    5418:	18fb      	adds	r3, r7, r3
    541a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    541e:	b2db      	uxtb	r3, r3
    5420:	2224      	movs	r2, #36	; 0x24
    5422:	18ba      	adds	r2, r7, r2
    5424:	0011      	movs	r1, r2
    5426:	0018      	movs	r0, r3
    5428:	4b70      	ldr	r3, [pc, #448]	; (55ec <usart_init+0x24c>)
    542a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    542e:	b2db      	uxtb	r3, r3
    5430:	0018      	movs	r0, r3
    5432:	4b6f      	ldr	r3, [pc, #444]	; (55f0 <usart_init+0x250>)
    5434:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	222d      	movs	r2, #45	; 0x2d
    543a:	5c9b      	ldrb	r3, [r3, r2]
    543c:	2100      	movs	r1, #0
    543e:	0018      	movs	r0, r3
    5440:	4b6c      	ldr	r3, [pc, #432]	; (55f4 <usart_init+0x254>)
    5442:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	7ada      	ldrb	r2, [r3, #11]
    5448:	68fb      	ldr	r3, [r7, #12]
    544a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    544c:	687b      	ldr	r3, [r7, #4]
    544e:	2224      	movs	r2, #36	; 0x24
    5450:	5c9a      	ldrb	r2, [r3, r2]
    5452:	68fb      	ldr	r3, [r7, #12]
    5454:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	2225      	movs	r2, #37	; 0x25
    545a:	5c9a      	ldrb	r2, [r3, r2]
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	7eda      	ldrb	r2, [r3, #27]
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5468:	687b      	ldr	r3, [r7, #4]
    546a:	7f1a      	ldrb	r2, [r3, #28]
    546c:	68fb      	ldr	r3, [r7, #12]
    546e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5470:	233b      	movs	r3, #59	; 0x3b
    5472:	18fc      	adds	r4, r7, r3
    5474:	687a      	ldr	r2, [r7, #4]
    5476:	68fb      	ldr	r3, [r7, #12]
    5478:	0011      	movs	r1, r2
    547a:	0018      	movs	r0, r3
    547c:	4b5e      	ldr	r3, [pc, #376]	; (55f8 <usart_init+0x258>)
    547e:	4798      	blx	r3
    5480:	0003      	movs	r3, r0
    5482:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5484:	233b      	movs	r3, #59	; 0x3b
    5486:	18fb      	adds	r3, r7, r3
    5488:	781b      	ldrb	r3, [r3, #0]
    548a:	2b00      	cmp	r3, #0
    548c:	d003      	beq.n	5496 <usart_init+0xf6>
		return status_code;
    548e:	233b      	movs	r3, #59	; 0x3b
    5490:	18fb      	adds	r3, r7, r3
    5492:	781b      	ldrb	r3, [r3, #0]
    5494:	e09f      	b.n	55d6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5496:	2320      	movs	r3, #32
    5498:	18fb      	adds	r3, r7, r3
    549a:	0018      	movs	r0, r3
    549c:	4b57      	ldr	r3, [pc, #348]	; (55fc <usart_init+0x25c>)
    549e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    54a0:	2320      	movs	r3, #32
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	2200      	movs	r2, #0
    54a6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    54a8:	2320      	movs	r3, #32
    54aa:	18fb      	adds	r3, r7, r3
    54ac:	2200      	movs	r2, #0
    54ae:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    54b0:	687b      	ldr	r3, [r7, #4]
    54b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    54b4:	2310      	movs	r3, #16
    54b6:	18fb      	adds	r3, r7, r3
    54b8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    54ba:	687b      	ldr	r3, [r7, #4]
    54bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    54be:	2310      	movs	r3, #16
    54c0:	18fb      	adds	r3, r7, r3
    54c2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    54c4:	687b      	ldr	r3, [r7, #4]
    54c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    54c8:	2310      	movs	r3, #16
    54ca:	18fb      	adds	r3, r7, r3
    54cc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    54d2:	2310      	movs	r3, #16
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    54d8:	2347      	movs	r3, #71	; 0x47
    54da:	18fb      	adds	r3, r7, r3
    54dc:	2200      	movs	r2, #0
    54de:	701a      	strb	r2, [r3, #0]
    54e0:	e02c      	b.n	553c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    54e2:	2347      	movs	r3, #71	; 0x47
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	781a      	ldrb	r2, [r3, #0]
    54e8:	2310      	movs	r3, #16
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	0092      	lsls	r2, r2, #2
    54ee:	58d3      	ldr	r3, [r2, r3]
    54f0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    54f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    54f4:	2b00      	cmp	r3, #0
    54f6:	d109      	bne.n	550c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    54f8:	2347      	movs	r3, #71	; 0x47
    54fa:	18fb      	adds	r3, r7, r3
    54fc:	781a      	ldrb	r2, [r3, #0]
    54fe:	68bb      	ldr	r3, [r7, #8]
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b3e      	ldr	r3, [pc, #248]	; (5600 <usart_init+0x260>)
    5506:	4798      	blx	r3
    5508:	0003      	movs	r3, r0
    550a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    550e:	3301      	adds	r3, #1
    5510:	d00d      	beq.n	552e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5514:	b2da      	uxtb	r2, r3
    5516:	2320      	movs	r3, #32
    5518:	18fb      	adds	r3, r7, r3
    551a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    551e:	0c1b      	lsrs	r3, r3, #16
    5520:	b2db      	uxtb	r3, r3
    5522:	2220      	movs	r2, #32
    5524:	18ba      	adds	r2, r7, r2
    5526:	0011      	movs	r1, r2
    5528:	0018      	movs	r0, r3
    552a:	4b36      	ldr	r3, [pc, #216]	; (5604 <usart_init+0x264>)
    552c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    552e:	2347      	movs	r3, #71	; 0x47
    5530:	18fb      	adds	r3, r7, r3
    5532:	781a      	ldrb	r2, [r3, #0]
    5534:	2347      	movs	r3, #71	; 0x47
    5536:	18fb      	adds	r3, r7, r3
    5538:	3201      	adds	r2, #1
    553a:	701a      	strb	r2, [r3, #0]
    553c:	2347      	movs	r3, #71	; 0x47
    553e:	18fb      	adds	r3, r7, r3
    5540:	781b      	ldrb	r3, [r3, #0]
    5542:	2b03      	cmp	r3, #3
    5544:	d9cd      	bls.n	54e2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5546:	2300      	movs	r3, #0
    5548:	63fb      	str	r3, [r7, #60]	; 0x3c
    554a:	e00a      	b.n	5562 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    554c:	68fa      	ldr	r2, [r7, #12]
    554e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5550:	3302      	adds	r3, #2
    5552:	009b      	lsls	r3, r3, #2
    5554:	18d3      	adds	r3, r2, r3
    5556:	3304      	adds	r3, #4
    5558:	2200      	movs	r2, #0
    555a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    555e:	3301      	adds	r3, #1
    5560:	63fb      	str	r3, [r7, #60]	; 0x3c
    5562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5564:	2b05      	cmp	r3, #5
    5566:	d9f1      	bls.n	554c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5568:	68fb      	ldr	r3, [r7, #12]
    556a:	2200      	movs	r2, #0
    556c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    556e:	68fb      	ldr	r3, [r7, #12]
    5570:	2200      	movs	r2, #0
    5572:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5574:	68fb      	ldr	r3, [r7, #12]
    5576:	2200      	movs	r2, #0
    5578:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    557a:	68fb      	ldr	r3, [r7, #12]
    557c:	2200      	movs	r2, #0
    557e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5580:	68fb      	ldr	r3, [r7, #12]
    5582:	2230      	movs	r2, #48	; 0x30
    5584:	2100      	movs	r1, #0
    5586:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5588:	68fb      	ldr	r3, [r7, #12]
    558a:	2231      	movs	r2, #49	; 0x31
    558c:	2100      	movs	r1, #0
    558e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5590:	68fb      	ldr	r3, [r7, #12]
    5592:	2232      	movs	r2, #50	; 0x32
    5594:	2100      	movs	r1, #0
    5596:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5598:	68fb      	ldr	r3, [r7, #12]
    559a:	2233      	movs	r2, #51	; 0x33
    559c:	2100      	movs	r1, #0
    559e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    55a0:	68fb      	ldr	r3, [r7, #12]
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	2227      	movs	r2, #39	; 0x27
    55a6:	18bc      	adds	r4, r7, r2
    55a8:	0018      	movs	r0, r3
    55aa:	4b0d      	ldr	r3, [pc, #52]	; (55e0 <usart_init+0x240>)
    55ac:	4798      	blx	r3
    55ae:	0003      	movs	r3, r0
    55b0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    55b2:	4a15      	ldr	r2, [pc, #84]	; (5608 <usart_init+0x268>)
    55b4:	2327      	movs	r3, #39	; 0x27
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	781b      	ldrb	r3, [r3, #0]
    55ba:	0011      	movs	r1, r2
    55bc:	0018      	movs	r0, r3
    55be:	4b13      	ldr	r3, [pc, #76]	; (560c <usart_init+0x26c>)
    55c0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    55c2:	2327      	movs	r3, #39	; 0x27
    55c4:	18fb      	adds	r3, r7, r3
    55c6:	781a      	ldrb	r2, [r3, #0]
    55c8:	4b11      	ldr	r3, [pc, #68]	; (5610 <usart_init+0x270>)
    55ca:	0092      	lsls	r2, r2, #2
    55cc:	68f9      	ldr	r1, [r7, #12]
    55ce:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    55d0:	233b      	movs	r3, #59	; 0x3b
    55d2:	18fb      	adds	r3, r7, r3
    55d4:	781b      	ldrb	r3, [r3, #0]
}
    55d6:	0018      	movs	r0, r3
    55d8:	46bd      	mov	sp, r7
    55da:	b013      	add	sp, #76	; 0x4c
    55dc:	bd90      	pop	{r4, r7, pc}
    55de:	46c0      	nop			; (mov r8, r8)
    55e0:	00003e2d 	.word	0x00003e2d
    55e4:	00004fdd 	.word	0x00004fdd
    55e8:	00004fc5 	.word	0x00004fc5
    55ec:	00006941 	.word	0x00006941
    55f0:	00006985 	.word	0x00006985
    55f4:	00003be5 	.word	0x00003be5
    55f8:	000050c5 	.word	0x000050c5
    55fc:	00005039 	.word	0x00005039
    5600:	00003c71 	.word	0x00003c71
    5604:	00006c2d 	.word	0x00006c2d
    5608:	000059cd 	.word	0x000059cd
    560c:	00003e91 	.word	0x00003e91
    5610:	200009d4 	.word	0x200009d4

00005614 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5614:	b580      	push	{r7, lr}
    5616:	b084      	sub	sp, #16
    5618:	af00      	add	r7, sp, #0
    561a:	6078      	str	r0, [r7, #4]
    561c:	000a      	movs	r2, r1
    561e:	1cbb      	adds	r3, r7, #2
    5620:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5628:	687b      	ldr	r3, [r7, #4]
    562a:	79db      	ldrb	r3, [r3, #7]
    562c:	2201      	movs	r2, #1
    562e:	4053      	eors	r3, r2
    5630:	b2db      	uxtb	r3, r3
    5632:	2b00      	cmp	r3, #0
    5634:	d001      	beq.n	563a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5636:	231c      	movs	r3, #28
    5638:	e017      	b.n	566a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    563a:	687b      	ldr	r3, [r7, #4]
    563c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    563e:	b29b      	uxth	r3, r3
    5640:	2b00      	cmp	r3, #0
    5642:	d001      	beq.n	5648 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5644:	2305      	movs	r3, #5
    5646:	e010      	b.n	566a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5648:	687b      	ldr	r3, [r7, #4]
    564a:	0018      	movs	r0, r3
    564c:	4b09      	ldr	r3, [pc, #36]	; (5674 <usart_write_wait+0x60>)
    564e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5650:	68fb      	ldr	r3, [r7, #12]
    5652:	1cba      	adds	r2, r7, #2
    5654:	8812      	ldrh	r2, [r2, #0]
    5656:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5658:	46c0      	nop			; (mov r8, r8)
    565a:	68fb      	ldr	r3, [r7, #12]
    565c:	7e1b      	ldrb	r3, [r3, #24]
    565e:	b2db      	uxtb	r3, r3
    5660:	001a      	movs	r2, r3
    5662:	2302      	movs	r3, #2
    5664:	4013      	ands	r3, r2
    5666:	d0f8      	beq.n	565a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5668:	2300      	movs	r3, #0
}
    566a:	0018      	movs	r0, r3
    566c:	46bd      	mov	sp, r7
    566e:	b004      	add	sp, #16
    5670:	bd80      	pop	{r7, pc}
    5672:	46c0      	nop			; (mov r8, r8)
    5674:	000050a1 	.word	0x000050a1

00005678 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5678:	b580      	push	{r7, lr}
    567a:	b084      	sub	sp, #16
    567c:	af00      	add	r7, sp, #0
    567e:	6078      	str	r0, [r7, #4]
    5680:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5688:	687b      	ldr	r3, [r7, #4]
    568a:	799b      	ldrb	r3, [r3, #6]
    568c:	2201      	movs	r2, #1
    568e:	4053      	eors	r3, r2
    5690:	b2db      	uxtb	r3, r3
    5692:	2b00      	cmp	r3, #0
    5694:	d001      	beq.n	569a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5696:	231c      	movs	r3, #28
    5698:	e05e      	b.n	5758 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    569e:	b29b      	uxth	r3, r3
    56a0:	2b00      	cmp	r3, #0
    56a2:	d001      	beq.n	56a8 <usart_read_wait+0x30>
		return STATUS_BUSY;
    56a4:	2305      	movs	r3, #5
    56a6:	e057      	b.n	5758 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    56a8:	68fb      	ldr	r3, [r7, #12]
    56aa:	7e1b      	ldrb	r3, [r3, #24]
    56ac:	b2db      	uxtb	r3, r3
    56ae:	001a      	movs	r2, r3
    56b0:	2304      	movs	r3, #4
    56b2:	4013      	ands	r3, r2
    56b4:	d101      	bne.n	56ba <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    56b6:	2305      	movs	r3, #5
    56b8:	e04e      	b.n	5758 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    56ba:	687b      	ldr	r3, [r7, #4]
    56bc:	0018      	movs	r0, r3
    56be:	4b28      	ldr	r3, [pc, #160]	; (5760 <usart_read_wait+0xe8>)
    56c0:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    56c2:	68fb      	ldr	r3, [r7, #12]
    56c4:	8b5b      	ldrh	r3, [r3, #26]
    56c6:	b29b      	uxth	r3, r3
    56c8:	b2da      	uxtb	r2, r3
    56ca:	230b      	movs	r3, #11
    56cc:	18fb      	adds	r3, r7, r3
    56ce:	213f      	movs	r1, #63	; 0x3f
    56d0:	400a      	ands	r2, r1
    56d2:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    56d4:	230b      	movs	r3, #11
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	2b00      	cmp	r3, #0
    56dc:	d036      	beq.n	574c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    56de:	230b      	movs	r3, #11
    56e0:	18fb      	adds	r3, r7, r3
    56e2:	781b      	ldrb	r3, [r3, #0]
    56e4:	2202      	movs	r2, #2
    56e6:	4013      	ands	r3, r2
    56e8:	d004      	beq.n	56f4 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    56ea:	68fb      	ldr	r3, [r7, #12]
    56ec:	2202      	movs	r2, #2
    56ee:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    56f0:	231a      	movs	r3, #26
    56f2:	e031      	b.n	5758 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    56f4:	230b      	movs	r3, #11
    56f6:	18fb      	adds	r3, r7, r3
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	2204      	movs	r2, #4
    56fc:	4013      	ands	r3, r2
    56fe:	d004      	beq.n	570a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5700:	68fb      	ldr	r3, [r7, #12]
    5702:	2204      	movs	r2, #4
    5704:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5706:	231e      	movs	r3, #30
    5708:	e026      	b.n	5758 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    570a:	230b      	movs	r3, #11
    570c:	18fb      	adds	r3, r7, r3
    570e:	781b      	ldrb	r3, [r3, #0]
    5710:	2201      	movs	r2, #1
    5712:	4013      	ands	r3, r2
    5714:	d004      	beq.n	5720 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	2201      	movs	r2, #1
    571a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    571c:	2313      	movs	r3, #19
    571e:	e01b      	b.n	5758 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5720:	230b      	movs	r3, #11
    5722:	18fb      	adds	r3, r7, r3
    5724:	781b      	ldrb	r3, [r3, #0]
    5726:	2210      	movs	r2, #16
    5728:	4013      	ands	r3, r2
    572a:	d004      	beq.n	5736 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    572c:	68fb      	ldr	r3, [r7, #12]
    572e:	2210      	movs	r2, #16
    5730:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    5732:	2342      	movs	r3, #66	; 0x42
    5734:	e010      	b.n	5758 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5736:	230b      	movs	r3, #11
    5738:	18fb      	adds	r3, r7, r3
    573a:	781b      	ldrb	r3, [r3, #0]
    573c:	2220      	movs	r2, #32
    573e:	4013      	ands	r3, r2
    5740:	d004      	beq.n	574c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	2220      	movs	r2, #32
    5746:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5748:	2341      	movs	r3, #65	; 0x41
    574a:	e005      	b.n	5758 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    574c:	68fb      	ldr	r3, [r7, #12]
    574e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5750:	b29a      	uxth	r2, r3
    5752:	683b      	ldr	r3, [r7, #0]
    5754:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    5756:	2300      	movs	r3, #0
}
    5758:	0018      	movs	r0, r3
    575a:	46bd      	mov	sp, r7
    575c:	b004      	add	sp, #16
    575e:	bd80      	pop	{r7, pc}
    5760:	000050a1 	.word	0x000050a1

00005764 <system_interrupt_enter_critical_section>:
{
    5764:	b580      	push	{r7, lr}
    5766:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5768:	4b02      	ldr	r3, [pc, #8]	; (5774 <system_interrupt_enter_critical_section+0x10>)
    576a:	4798      	blx	r3
}
    576c:	46c0      	nop			; (mov r8, r8)
    576e:	46bd      	mov	sp, r7
    5770:	bd80      	pop	{r7, pc}
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	000032b5 	.word	0x000032b5

00005778 <system_interrupt_leave_critical_section>:
{
    5778:	b580      	push	{r7, lr}
    577a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    577c:	4b02      	ldr	r3, [pc, #8]	; (5788 <system_interrupt_leave_critical_section+0x10>)
    577e:	4798      	blx	r3
}
    5780:	46c0      	nop			; (mov r8, r8)
    5782:	46bd      	mov	sp, r7
    5784:	bd80      	pop	{r7, pc}
    5786:	46c0      	nop			; (mov r8, r8)
    5788:	00003309 	.word	0x00003309

0000578c <usart_is_syncing>:
{
    578c:	b580      	push	{r7, lr}
    578e:	b084      	sub	sp, #16
    5790:	af00      	add	r7, sp, #0
    5792:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	681b      	ldr	r3, [r3, #0]
    5798:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	69db      	ldr	r3, [r3, #28]
    579e:	1e5a      	subs	r2, r3, #1
    57a0:	4193      	sbcs	r3, r2
    57a2:	b2db      	uxtb	r3, r3
}
    57a4:	0018      	movs	r0, r3
    57a6:	46bd      	mov	sp, r7
    57a8:	b004      	add	sp, #16
    57aa:	bd80      	pop	{r7, pc}

000057ac <_usart_wait_for_sync>:
{
    57ac:	b580      	push	{r7, lr}
    57ae:	b082      	sub	sp, #8
    57b0:	af00      	add	r7, sp, #0
    57b2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    57b4:	46c0      	nop			; (mov r8, r8)
    57b6:	687b      	ldr	r3, [r7, #4]
    57b8:	0018      	movs	r0, r3
    57ba:	4b04      	ldr	r3, [pc, #16]	; (57cc <_usart_wait_for_sync+0x20>)
    57bc:	4798      	blx	r3
    57be:	1e03      	subs	r3, r0, #0
    57c0:	d1f9      	bne.n	57b6 <_usart_wait_for_sync+0xa>
}
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	46bd      	mov	sp, r7
    57c6:	b002      	add	sp, #8
    57c8:	bd80      	pop	{r7, pc}
    57ca:	46c0      	nop			; (mov r8, r8)
    57cc:	0000578d 	.word	0x0000578d

000057d0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    57d0:	b580      	push	{r7, lr}
    57d2:	b086      	sub	sp, #24
    57d4:	af00      	add	r7, sp, #0
    57d6:	60f8      	str	r0, [r7, #12]
    57d8:	60b9      	str	r1, [r7, #8]
    57da:	1dbb      	adds	r3, r7, #6
    57dc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    57de:	68fb      	ldr	r3, [r7, #12]
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    57e4:	4b0f      	ldr	r3, [pc, #60]	; (5824 <_usart_write_buffer+0x54>)
    57e6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    57ec:	b29b      	uxth	r3, r3
    57ee:	2b00      	cmp	r3, #0
    57f0:	d003      	beq.n	57fa <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    57f2:	4b0d      	ldr	r3, [pc, #52]	; (5828 <_usart_write_buffer+0x58>)
    57f4:	4798      	blx	r3
		return STATUS_BUSY;
    57f6:	2305      	movs	r3, #5
    57f8:	e010      	b.n	581c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    57fa:	68fb      	ldr	r3, [r7, #12]
    57fc:	1dba      	adds	r2, r7, #6
    57fe:	8812      	ldrh	r2, [r2, #0]
    5800:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    5802:	4b09      	ldr	r3, [pc, #36]	; (5828 <_usart_write_buffer+0x58>)
    5804:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5806:	68fb      	ldr	r3, [r7, #12]
    5808:	68ba      	ldr	r2, [r7, #8]
    580a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	2233      	movs	r2, #51	; 0x33
    5810:	2105      	movs	r1, #5
    5812:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5814:	697b      	ldr	r3, [r7, #20]
    5816:	2201      	movs	r2, #1
    5818:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    581a:	2300      	movs	r3, #0
}
    581c:	0018      	movs	r0, r3
    581e:	46bd      	mov	sp, r7
    5820:	b006      	add	sp, #24
    5822:	bd80      	pop	{r7, pc}
    5824:	00005765 	.word	0x00005765
    5828:	00005779 	.word	0x00005779

0000582c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    582c:	b580      	push	{r7, lr}
    582e:	b086      	sub	sp, #24
    5830:	af00      	add	r7, sp, #0
    5832:	60f8      	str	r0, [r7, #12]
    5834:	60b9      	str	r1, [r7, #8]
    5836:	1dbb      	adds	r3, r7, #6
    5838:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    583a:	68fb      	ldr	r3, [r7, #12]
    583c:	681b      	ldr	r3, [r3, #0]
    583e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5840:	4b16      	ldr	r3, [pc, #88]	; (589c <_usart_read_buffer+0x70>)
    5842:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5844:	68fb      	ldr	r3, [r7, #12]
    5846:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5848:	b29b      	uxth	r3, r3
    584a:	2b00      	cmp	r3, #0
    584c:	d003      	beq.n	5856 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    584e:	4b14      	ldr	r3, [pc, #80]	; (58a0 <_usart_read_buffer+0x74>)
    5850:	4798      	blx	r3
		return STATUS_BUSY;
    5852:	2305      	movs	r3, #5
    5854:	e01e      	b.n	5894 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5856:	68fb      	ldr	r3, [r7, #12]
    5858:	1dba      	adds	r2, r7, #6
    585a:	8812      	ldrh	r2, [r2, #0]
    585c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    585e:	4b10      	ldr	r3, [pc, #64]	; (58a0 <_usart_read_buffer+0x74>)
    5860:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5862:	68fb      	ldr	r3, [r7, #12]
    5864:	68ba      	ldr	r2, [r7, #8]
    5866:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5868:	68fb      	ldr	r3, [r7, #12]
    586a:	2232      	movs	r2, #50	; 0x32
    586c:	2105      	movs	r1, #5
    586e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5870:	697b      	ldr	r3, [r7, #20]
    5872:	2204      	movs	r2, #4
    5874:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    5876:	68fb      	ldr	r3, [r7, #12]
    5878:	7a1b      	ldrb	r3, [r3, #8]
    587a:	2b00      	cmp	r3, #0
    587c:	d002      	beq.n	5884 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    587e:	697b      	ldr	r3, [r7, #20]
    5880:	2220      	movs	r2, #32
    5882:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5884:	68fb      	ldr	r3, [r7, #12]
    5886:	7a5b      	ldrb	r3, [r3, #9]
    5888:	2b00      	cmp	r3, #0
    588a:	d002      	beq.n	5892 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    588c:	697b      	ldr	r3, [r7, #20]
    588e:	2208      	movs	r2, #8
    5890:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5892:	2300      	movs	r3, #0
}
    5894:	0018      	movs	r0, r3
    5896:	46bd      	mov	sp, r7
    5898:	b006      	add	sp, #24
    589a:	bd80      	pop	{r7, pc}
    589c:	00005765 	.word	0x00005765
    58a0:	00005779 	.word	0x00005779

000058a4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    58a4:	b580      	push	{r7, lr}
    58a6:	b084      	sub	sp, #16
    58a8:	af00      	add	r7, sp, #0
    58aa:	60f8      	str	r0, [r7, #12]
    58ac:	60b9      	str	r1, [r7, #8]
    58ae:	1dfb      	adds	r3, r7, #7
    58b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    58b2:	1dfb      	adds	r3, r7, #7
    58b4:	781b      	ldrb	r3, [r3, #0]
    58b6:	68fa      	ldr	r2, [r7, #12]
    58b8:	3302      	adds	r3, #2
    58ba:	009b      	lsls	r3, r3, #2
    58bc:	18d3      	adds	r3, r2, r3
    58be:	3304      	adds	r3, #4
    58c0:	68ba      	ldr	r2, [r7, #8]
    58c2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    58c4:	68fb      	ldr	r3, [r7, #12]
    58c6:	2230      	movs	r2, #48	; 0x30
    58c8:	5c9b      	ldrb	r3, [r3, r2]
    58ca:	b25a      	sxtb	r2, r3
    58cc:	1dfb      	adds	r3, r7, #7
    58ce:	781b      	ldrb	r3, [r3, #0]
    58d0:	2101      	movs	r1, #1
    58d2:	4099      	lsls	r1, r3
    58d4:	000b      	movs	r3, r1
    58d6:	b25b      	sxtb	r3, r3
    58d8:	4313      	orrs	r3, r2
    58da:	b25b      	sxtb	r3, r3
    58dc:	b2d9      	uxtb	r1, r3
    58de:	68fb      	ldr	r3, [r7, #12]
    58e0:	2230      	movs	r2, #48	; 0x30
    58e2:	5499      	strb	r1, [r3, r2]
}
    58e4:	46c0      	nop			; (mov r8, r8)
    58e6:	46bd      	mov	sp, r7
    58e8:	b004      	add	sp, #16
    58ea:	bd80      	pop	{r7, pc}

000058ec <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    58ec:	b580      	push	{r7, lr}
    58ee:	b084      	sub	sp, #16
    58f0:	af00      	add	r7, sp, #0
    58f2:	60f8      	str	r0, [r7, #12]
    58f4:	60b9      	str	r1, [r7, #8]
    58f6:	1dbb      	adds	r3, r7, #6
    58f8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    58fa:	1dbb      	adds	r3, r7, #6
    58fc:	881b      	ldrh	r3, [r3, #0]
    58fe:	2b00      	cmp	r3, #0
    5900:	d101      	bne.n	5906 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5902:	2317      	movs	r3, #23
    5904:	e010      	b.n	5928 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5906:	68fb      	ldr	r3, [r7, #12]
    5908:	79db      	ldrb	r3, [r3, #7]
    590a:	2201      	movs	r2, #1
    590c:	4053      	eors	r3, r2
    590e:	b2db      	uxtb	r3, r3
    5910:	2b00      	cmp	r3, #0
    5912:	d001      	beq.n	5918 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5914:	231c      	movs	r3, #28
    5916:	e007      	b.n	5928 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5918:	1dbb      	adds	r3, r7, #6
    591a:	881a      	ldrh	r2, [r3, #0]
    591c:	68b9      	ldr	r1, [r7, #8]
    591e:	68fb      	ldr	r3, [r7, #12]
    5920:	0018      	movs	r0, r3
    5922:	4b03      	ldr	r3, [pc, #12]	; (5930 <usart_write_buffer_job+0x44>)
    5924:	4798      	blx	r3
    5926:	0003      	movs	r3, r0
}
    5928:	0018      	movs	r0, r3
    592a:	46bd      	mov	sp, r7
    592c:	b004      	add	sp, #16
    592e:	bd80      	pop	{r7, pc}
    5930:	000057d1 	.word	0x000057d1

00005934 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5934:	b580      	push	{r7, lr}
    5936:	b084      	sub	sp, #16
    5938:	af00      	add	r7, sp, #0
    593a:	60f8      	str	r0, [r7, #12]
    593c:	60b9      	str	r1, [r7, #8]
    593e:	1dbb      	adds	r3, r7, #6
    5940:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5942:	1dbb      	adds	r3, r7, #6
    5944:	881b      	ldrh	r3, [r3, #0]
    5946:	2b00      	cmp	r3, #0
    5948:	d101      	bne.n	594e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    594a:	2317      	movs	r3, #23
    594c:	e010      	b.n	5970 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    594e:	68fb      	ldr	r3, [r7, #12]
    5950:	799b      	ldrb	r3, [r3, #6]
    5952:	2201      	movs	r2, #1
    5954:	4053      	eors	r3, r2
    5956:	b2db      	uxtb	r3, r3
    5958:	2b00      	cmp	r3, #0
    595a:	d001      	beq.n	5960 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    595c:	231c      	movs	r3, #28
    595e:	e007      	b.n	5970 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5960:	1dbb      	adds	r3, r7, #6
    5962:	881a      	ldrh	r2, [r3, #0]
    5964:	68b9      	ldr	r1, [r7, #8]
    5966:	68fb      	ldr	r3, [r7, #12]
    5968:	0018      	movs	r0, r3
    596a:	4b03      	ldr	r3, [pc, #12]	; (5978 <usart_read_buffer_job+0x44>)
    596c:	4798      	blx	r3
    596e:	0003      	movs	r3, r0
}
    5970:	0018      	movs	r0, r3
    5972:	46bd      	mov	sp, r7
    5974:	b004      	add	sp, #16
    5976:	bd80      	pop	{r7, pc}
    5978:	0000582d 	.word	0x0000582d

0000597c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    597c:	b580      	push	{r7, lr}
    597e:	b084      	sub	sp, #16
    5980:	af00      	add	r7, sp, #0
    5982:	6078      	str	r0, [r7, #4]
    5984:	000a      	movs	r2, r1
    5986:	1cfb      	adds	r3, r7, #3
    5988:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    598a:	1cfb      	adds	r3, r7, #3
    598c:	781b      	ldrb	r3, [r3, #0]
    598e:	2b00      	cmp	r3, #0
    5990:	d002      	beq.n	5998 <usart_get_job_status+0x1c>
    5992:	2b01      	cmp	r3, #1
    5994:	d007      	beq.n	59a6 <usart_get_job_status+0x2a>
    5996:	e00d      	b.n	59b4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5998:	230f      	movs	r3, #15
    599a:	18fb      	adds	r3, r7, r3
    599c:	687a      	ldr	r2, [r7, #4]
    599e:	2132      	movs	r1, #50	; 0x32
    59a0:	5c52      	ldrb	r2, [r2, r1]
    59a2:	701a      	strb	r2, [r3, #0]
			break;
    59a4:	e00b      	b.n	59be <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    59a6:	230f      	movs	r3, #15
    59a8:	18fb      	adds	r3, r7, r3
    59aa:	687a      	ldr	r2, [r7, #4]
    59ac:	2133      	movs	r1, #51	; 0x33
    59ae:	5c52      	ldrb	r2, [r2, r1]
    59b0:	701a      	strb	r2, [r3, #0]
			break;
    59b2:	e004      	b.n	59be <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    59b4:	230f      	movs	r3, #15
    59b6:	18fb      	adds	r3, r7, r3
    59b8:	2217      	movs	r2, #23
    59ba:	701a      	strb	r2, [r3, #0]
			break;
    59bc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    59be:	230f      	movs	r3, #15
    59c0:	18fb      	adds	r3, r7, r3
    59c2:	781b      	ldrb	r3, [r3, #0]
}
    59c4:	0018      	movs	r0, r3
    59c6:	46bd      	mov	sp, r7
    59c8:	b004      	add	sp, #16
    59ca:	bd80      	pop	{r7, pc}

000059cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    59cc:	b580      	push	{r7, lr}
    59ce:	b088      	sub	sp, #32
    59d0:	af00      	add	r7, sp, #0
    59d2:	0002      	movs	r2, r0
    59d4:	1dfb      	adds	r3, r7, #7
    59d6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    59d8:	1dfb      	adds	r3, r7, #7
    59da:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    59dc:	4ba3      	ldr	r3, [pc, #652]	; (5c6c <_usart_interrupt_handler+0x2a0>)
    59de:	0092      	lsls	r2, r2, #2
    59e0:	58d3      	ldr	r3, [r2, r3]
    59e2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    59e4:	69bb      	ldr	r3, [r7, #24]
    59e6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    59e8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    59ea:	69bb      	ldr	r3, [r7, #24]
    59ec:	0018      	movs	r0, r3
    59ee:	4ba0      	ldr	r3, [pc, #640]	; (5c70 <_usart_interrupt_handler+0x2a4>)
    59f0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    59f2:	697b      	ldr	r3, [r7, #20]
    59f4:	7e1b      	ldrb	r3, [r3, #24]
    59f6:	b2da      	uxtb	r2, r3
    59f8:	2312      	movs	r3, #18
    59fa:	18fb      	adds	r3, r7, r3
    59fc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    59fe:	697b      	ldr	r3, [r7, #20]
    5a00:	7d9b      	ldrb	r3, [r3, #22]
    5a02:	b2db      	uxtb	r3, r3
    5a04:	b29a      	uxth	r2, r3
    5a06:	2312      	movs	r3, #18
    5a08:	18fb      	adds	r3, r7, r3
    5a0a:	2112      	movs	r1, #18
    5a0c:	1879      	adds	r1, r7, r1
    5a0e:	8809      	ldrh	r1, [r1, #0]
    5a10:	400a      	ands	r2, r1
    5a12:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5a14:	69bb      	ldr	r3, [r7, #24]
    5a16:	2230      	movs	r2, #48	; 0x30
    5a18:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5a1a:	69ba      	ldr	r2, [r7, #24]
    5a1c:	2131      	movs	r1, #49	; 0x31
    5a1e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5a20:	4013      	ands	r3, r2
    5a22:	b2da      	uxtb	r2, r3
    5a24:	2310      	movs	r3, #16
    5a26:	18fb      	adds	r3, r7, r3
    5a28:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5a2a:	2312      	movs	r3, #18
    5a2c:	18fb      	adds	r3, r7, r3
    5a2e:	881b      	ldrh	r3, [r3, #0]
    5a30:	2201      	movs	r2, #1
    5a32:	4013      	ands	r3, r2
    5a34:	d044      	beq.n	5ac0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5a36:	69bb      	ldr	r3, [r7, #24]
    5a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5a3a:	b29b      	uxth	r3, r3
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d03c      	beq.n	5aba <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5a40:	69bb      	ldr	r3, [r7, #24]
    5a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	b2da      	uxtb	r2, r3
    5a48:	231c      	movs	r3, #28
    5a4a:	18fb      	adds	r3, r7, r3
    5a4c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5a4e:	69bb      	ldr	r3, [r7, #24]
    5a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a52:	1c5a      	adds	r2, r3, #1
    5a54:	69bb      	ldr	r3, [r7, #24]
    5a56:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5a58:	69bb      	ldr	r3, [r7, #24]
    5a5a:	795b      	ldrb	r3, [r3, #5]
    5a5c:	2b01      	cmp	r3, #1
    5a5e:	d113      	bne.n	5a88 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5a60:	69bb      	ldr	r3, [r7, #24]
    5a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a64:	781b      	ldrb	r3, [r3, #0]
    5a66:	b2db      	uxtb	r3, r3
    5a68:	021b      	lsls	r3, r3, #8
    5a6a:	b21a      	sxth	r2, r3
    5a6c:	231c      	movs	r3, #28
    5a6e:	18fb      	adds	r3, r7, r3
    5a70:	2100      	movs	r1, #0
    5a72:	5e5b      	ldrsh	r3, [r3, r1]
    5a74:	4313      	orrs	r3, r2
    5a76:	b21a      	sxth	r2, r3
    5a78:	231c      	movs	r3, #28
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5a7e:	69bb      	ldr	r3, [r7, #24]
    5a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a82:	1c5a      	adds	r2, r3, #1
    5a84:	69bb      	ldr	r3, [r7, #24]
    5a86:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5a88:	231c      	movs	r3, #28
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	881b      	ldrh	r3, [r3, #0]
    5a8e:	05db      	lsls	r3, r3, #23
    5a90:	0ddb      	lsrs	r3, r3, #23
    5a92:	b29a      	uxth	r2, r3
    5a94:	697b      	ldr	r3, [r7, #20]
    5a96:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5a98:	69bb      	ldr	r3, [r7, #24]
    5a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5a9c:	b29b      	uxth	r3, r3
    5a9e:	3b01      	subs	r3, #1
    5aa0:	b29b      	uxth	r3, r3
    5aa2:	69ba      	ldr	r2, [r7, #24]
    5aa4:	1c19      	adds	r1, r3, #0
    5aa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d109      	bne.n	5ac0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5aac:	697b      	ldr	r3, [r7, #20]
    5aae:	2201      	movs	r2, #1
    5ab0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5ab2:	697b      	ldr	r3, [r7, #20]
    5ab4:	2202      	movs	r2, #2
    5ab6:	759a      	strb	r2, [r3, #22]
    5ab8:	e002      	b.n	5ac0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5aba:	697b      	ldr	r3, [r7, #20]
    5abc:	2201      	movs	r2, #1
    5abe:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5ac0:	2312      	movs	r3, #18
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	881b      	ldrh	r3, [r3, #0]
    5ac6:	2202      	movs	r2, #2
    5ac8:	4013      	ands	r3, r2
    5aca:	d011      	beq.n	5af0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5acc:	697b      	ldr	r3, [r7, #20]
    5ace:	2202      	movs	r2, #2
    5ad0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5ad2:	69bb      	ldr	r3, [r7, #24]
    5ad4:	2233      	movs	r2, #51	; 0x33
    5ad6:	2100      	movs	r1, #0
    5ad8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5ada:	2310      	movs	r3, #16
    5adc:	18fb      	adds	r3, r7, r3
    5ade:	881b      	ldrh	r3, [r3, #0]
    5ae0:	2201      	movs	r2, #1
    5ae2:	4013      	ands	r3, r2
    5ae4:	d004      	beq.n	5af0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5ae6:	69bb      	ldr	r3, [r7, #24]
    5ae8:	68db      	ldr	r3, [r3, #12]
    5aea:	69ba      	ldr	r2, [r7, #24]
    5aec:	0010      	movs	r0, r2
    5aee:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5af0:	2312      	movs	r3, #18
    5af2:	18fb      	adds	r3, r7, r3
    5af4:	881b      	ldrh	r3, [r3, #0]
    5af6:	2204      	movs	r2, #4
    5af8:	4013      	ands	r3, r2
    5afa:	d100      	bne.n	5afe <_usart_interrupt_handler+0x132>
    5afc:	e0bd      	b.n	5c7a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5afe:	69bb      	ldr	r3, [r7, #24]
    5b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5b02:	b29b      	uxth	r3, r3
    5b04:	2b00      	cmp	r3, #0
    5b06:	d100      	bne.n	5b0a <_usart_interrupt_handler+0x13e>
    5b08:	e0b4      	b.n	5c74 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5b0a:	697b      	ldr	r3, [r7, #20]
    5b0c:	8b5b      	ldrh	r3, [r3, #26]
    5b0e:	b29b      	uxth	r3, r3
    5b10:	b2da      	uxtb	r2, r3
    5b12:	231f      	movs	r3, #31
    5b14:	18fb      	adds	r3, r7, r3
    5b16:	213f      	movs	r1, #63	; 0x3f
    5b18:	400a      	ands	r2, r1
    5b1a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5b1c:	231f      	movs	r3, #31
    5b1e:	18fb      	adds	r3, r7, r3
    5b20:	781b      	ldrb	r3, [r3, #0]
    5b22:	2208      	movs	r2, #8
    5b24:	4013      	ands	r3, r2
    5b26:	d007      	beq.n	5b38 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5b28:	231f      	movs	r3, #31
    5b2a:	18fb      	adds	r3, r7, r3
    5b2c:	221f      	movs	r2, #31
    5b2e:	18ba      	adds	r2, r7, r2
    5b30:	7812      	ldrb	r2, [r2, #0]
    5b32:	2108      	movs	r1, #8
    5b34:	438a      	bics	r2, r1
    5b36:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5b38:	231f      	movs	r3, #31
    5b3a:	18fb      	adds	r3, r7, r3
    5b3c:	781b      	ldrb	r3, [r3, #0]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d050      	beq.n	5be4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5b42:	231f      	movs	r3, #31
    5b44:	18fb      	adds	r3, r7, r3
    5b46:	781b      	ldrb	r3, [r3, #0]
    5b48:	2202      	movs	r2, #2
    5b4a:	4013      	ands	r3, r2
    5b4c:	d007      	beq.n	5b5e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5b4e:	69bb      	ldr	r3, [r7, #24]
    5b50:	2232      	movs	r2, #50	; 0x32
    5b52:	211a      	movs	r1, #26
    5b54:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5b56:	697b      	ldr	r3, [r7, #20]
    5b58:	2202      	movs	r2, #2
    5b5a:	835a      	strh	r2, [r3, #26]
    5b5c:	e036      	b.n	5bcc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5b5e:	231f      	movs	r3, #31
    5b60:	18fb      	adds	r3, r7, r3
    5b62:	781b      	ldrb	r3, [r3, #0]
    5b64:	2204      	movs	r2, #4
    5b66:	4013      	ands	r3, r2
    5b68:	d007      	beq.n	5b7a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5b6a:	69bb      	ldr	r3, [r7, #24]
    5b6c:	2232      	movs	r2, #50	; 0x32
    5b6e:	211e      	movs	r1, #30
    5b70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5b72:	697b      	ldr	r3, [r7, #20]
    5b74:	2204      	movs	r2, #4
    5b76:	835a      	strh	r2, [r3, #26]
    5b78:	e028      	b.n	5bcc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5b7a:	231f      	movs	r3, #31
    5b7c:	18fb      	adds	r3, r7, r3
    5b7e:	781b      	ldrb	r3, [r3, #0]
    5b80:	2201      	movs	r2, #1
    5b82:	4013      	ands	r3, r2
    5b84:	d007      	beq.n	5b96 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5b86:	69bb      	ldr	r3, [r7, #24]
    5b88:	2232      	movs	r2, #50	; 0x32
    5b8a:	2113      	movs	r1, #19
    5b8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5b8e:	697b      	ldr	r3, [r7, #20]
    5b90:	2201      	movs	r2, #1
    5b92:	835a      	strh	r2, [r3, #26]
    5b94:	e01a      	b.n	5bcc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5b96:	231f      	movs	r3, #31
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	2210      	movs	r2, #16
    5b9e:	4013      	ands	r3, r2
    5ba0:	d007      	beq.n	5bb2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5ba2:	69bb      	ldr	r3, [r7, #24]
    5ba4:	2232      	movs	r2, #50	; 0x32
    5ba6:	2142      	movs	r1, #66	; 0x42
    5ba8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5baa:	697b      	ldr	r3, [r7, #20]
    5bac:	2210      	movs	r2, #16
    5bae:	835a      	strh	r2, [r3, #26]
    5bb0:	e00c      	b.n	5bcc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5bb2:	231f      	movs	r3, #31
    5bb4:	18fb      	adds	r3, r7, r3
    5bb6:	781b      	ldrb	r3, [r3, #0]
    5bb8:	2220      	movs	r2, #32
    5bba:	4013      	ands	r3, r2
    5bbc:	d006      	beq.n	5bcc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5bbe:	69bb      	ldr	r3, [r7, #24]
    5bc0:	2232      	movs	r2, #50	; 0x32
    5bc2:	2141      	movs	r1, #65	; 0x41
    5bc4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5bc6:	697b      	ldr	r3, [r7, #20]
    5bc8:	2220      	movs	r2, #32
    5bca:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5bcc:	2310      	movs	r3, #16
    5bce:	18fb      	adds	r3, r7, r3
    5bd0:	881b      	ldrh	r3, [r3, #0]
    5bd2:	2204      	movs	r2, #4
    5bd4:	4013      	ands	r3, r2
				if (callback_status
    5bd6:	d050      	beq.n	5c7a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5bd8:	69bb      	ldr	r3, [r7, #24]
    5bda:	695b      	ldr	r3, [r3, #20]
    5bdc:	69ba      	ldr	r2, [r7, #24]
    5bde:	0010      	movs	r0, r2
    5be0:	4798      	blx	r3
    5be2:	e04a      	b.n	5c7a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5be4:	697b      	ldr	r3, [r7, #20]
    5be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5be8:	b29a      	uxth	r2, r3
    5bea:	230e      	movs	r3, #14
    5bec:	18fb      	adds	r3, r7, r3
    5bee:	05d2      	lsls	r2, r2, #23
    5bf0:	0dd2      	lsrs	r2, r2, #23
    5bf2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5bf4:	69bb      	ldr	r3, [r7, #24]
    5bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5bf8:	220e      	movs	r2, #14
    5bfa:	18ba      	adds	r2, r7, r2
    5bfc:	8812      	ldrh	r2, [r2, #0]
    5bfe:	b2d2      	uxtb	r2, r2
    5c00:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5c02:	69bb      	ldr	r3, [r7, #24]
    5c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c06:	1c5a      	adds	r2, r3, #1
    5c08:	69bb      	ldr	r3, [r7, #24]
    5c0a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5c0c:	69bb      	ldr	r3, [r7, #24]
    5c0e:	795b      	ldrb	r3, [r3, #5]
    5c10:	2b01      	cmp	r3, #1
    5c12:	d10d      	bne.n	5c30 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5c14:	69bb      	ldr	r3, [r7, #24]
    5c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c18:	220e      	movs	r2, #14
    5c1a:	18ba      	adds	r2, r7, r2
    5c1c:	8812      	ldrh	r2, [r2, #0]
    5c1e:	0a12      	lsrs	r2, r2, #8
    5c20:	b292      	uxth	r2, r2
    5c22:	b2d2      	uxtb	r2, r2
    5c24:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5c26:	69bb      	ldr	r3, [r7, #24]
    5c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c2a:	1c5a      	adds	r2, r3, #1
    5c2c:	69bb      	ldr	r3, [r7, #24]
    5c2e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5c30:	69bb      	ldr	r3, [r7, #24]
    5c32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5c34:	b29b      	uxth	r3, r3
    5c36:	3b01      	subs	r3, #1
    5c38:	b29b      	uxth	r3, r3
    5c3a:	69ba      	ldr	r2, [r7, #24]
    5c3c:	1c19      	adds	r1, r3, #0
    5c3e:	8591      	strh	r1, [r2, #44]	; 0x2c
    5c40:	2b00      	cmp	r3, #0
    5c42:	d11a      	bne.n	5c7a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5c44:	697b      	ldr	r3, [r7, #20]
    5c46:	2204      	movs	r2, #4
    5c48:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5c4a:	69bb      	ldr	r3, [r7, #24]
    5c4c:	2232      	movs	r2, #50	; 0x32
    5c4e:	2100      	movs	r1, #0
    5c50:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5c52:	2310      	movs	r3, #16
    5c54:	18fb      	adds	r3, r7, r3
    5c56:	881b      	ldrh	r3, [r3, #0]
    5c58:	2202      	movs	r2, #2
    5c5a:	4013      	ands	r3, r2
					if (callback_status
    5c5c:	d00d      	beq.n	5c7a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5c5e:	69bb      	ldr	r3, [r7, #24]
    5c60:	691b      	ldr	r3, [r3, #16]
    5c62:	69ba      	ldr	r2, [r7, #24]
    5c64:	0010      	movs	r0, r2
    5c66:	4798      	blx	r3
    5c68:	e007      	b.n	5c7a <_usart_interrupt_handler+0x2ae>
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	200009d4 	.word	0x200009d4
    5c70:	000057ad 	.word	0x000057ad
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5c74:	697b      	ldr	r3, [r7, #20]
    5c76:	2204      	movs	r2, #4
    5c78:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5c7a:	2312      	movs	r3, #18
    5c7c:	18fb      	adds	r3, r7, r3
    5c7e:	881b      	ldrh	r3, [r3, #0]
    5c80:	2210      	movs	r2, #16
    5c82:	4013      	ands	r3, r2
    5c84:	d010      	beq.n	5ca8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5c86:	697b      	ldr	r3, [r7, #20]
    5c88:	2210      	movs	r2, #16
    5c8a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5c8c:	697b      	ldr	r3, [r7, #20]
    5c8e:	2210      	movs	r2, #16
    5c90:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5c92:	2310      	movs	r3, #16
    5c94:	18fb      	adds	r3, r7, r3
    5c96:	881b      	ldrh	r3, [r3, #0]
    5c98:	2210      	movs	r2, #16
    5c9a:	4013      	ands	r3, r2
    5c9c:	d004      	beq.n	5ca8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5c9e:	69bb      	ldr	r3, [r7, #24]
    5ca0:	69db      	ldr	r3, [r3, #28]
    5ca2:	69ba      	ldr	r2, [r7, #24]
    5ca4:	0010      	movs	r0, r2
    5ca6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5ca8:	2312      	movs	r3, #18
    5caa:	18fb      	adds	r3, r7, r3
    5cac:	881b      	ldrh	r3, [r3, #0]
    5cae:	2220      	movs	r2, #32
    5cb0:	4013      	ands	r3, r2
    5cb2:	d010      	beq.n	5cd6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5cb4:	697b      	ldr	r3, [r7, #20]
    5cb6:	2220      	movs	r2, #32
    5cb8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5cba:	697b      	ldr	r3, [r7, #20]
    5cbc:	2220      	movs	r2, #32
    5cbe:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5cc0:	2310      	movs	r3, #16
    5cc2:	18fb      	adds	r3, r7, r3
    5cc4:	881b      	ldrh	r3, [r3, #0]
    5cc6:	2208      	movs	r2, #8
    5cc8:	4013      	ands	r3, r2
    5cca:	d004      	beq.n	5cd6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5ccc:	69bb      	ldr	r3, [r7, #24]
    5cce:	699b      	ldr	r3, [r3, #24]
    5cd0:	69ba      	ldr	r2, [r7, #24]
    5cd2:	0010      	movs	r0, r2
    5cd4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5cd6:	2312      	movs	r3, #18
    5cd8:	18fb      	adds	r3, r7, r3
    5cda:	881b      	ldrh	r3, [r3, #0]
    5cdc:	2208      	movs	r2, #8
    5cde:	4013      	ands	r3, r2
    5ce0:	d010      	beq.n	5d04 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5ce2:	697b      	ldr	r3, [r7, #20]
    5ce4:	2208      	movs	r2, #8
    5ce6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5ce8:	697b      	ldr	r3, [r7, #20]
    5cea:	2208      	movs	r2, #8
    5cec:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5cee:	2310      	movs	r3, #16
    5cf0:	18fb      	adds	r3, r7, r3
    5cf2:	881b      	ldrh	r3, [r3, #0]
    5cf4:	2220      	movs	r2, #32
    5cf6:	4013      	ands	r3, r2
    5cf8:	d004      	beq.n	5d04 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5cfa:	69bb      	ldr	r3, [r7, #24]
    5cfc:	6a1b      	ldr	r3, [r3, #32]
    5cfe:	69ba      	ldr	r2, [r7, #24]
    5d00:	0010      	movs	r0, r2
    5d02:	4798      	blx	r3
		}
	}
#endif
}
    5d04:	46c0      	nop			; (mov r8, r8)
    5d06:	46bd      	mov	sp, r7
    5d08:	b008      	add	sp, #32
    5d0a:	bd80      	pop	{r7, pc}

00005d0c <system_gclk_gen_get_config_defaults>:
{
    5d0c:	b580      	push	{r7, lr}
    5d0e:	b082      	sub	sp, #8
    5d10:	af00      	add	r7, sp, #0
    5d12:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	2201      	movs	r2, #1
    5d18:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	2200      	movs	r2, #0
    5d1e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	2206      	movs	r2, #6
    5d24:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	2200      	movs	r2, #0
    5d2a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	2200      	movs	r2, #0
    5d30:	725a      	strb	r2, [r3, #9]
}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	46bd      	mov	sp, r7
    5d36:	b002      	add	sp, #8
    5d38:	bd80      	pop	{r7, pc}

00005d3a <system_gclk_chan_get_config_defaults>:
{
    5d3a:	b580      	push	{r7, lr}
    5d3c:	b082      	sub	sp, #8
    5d3e:	af00      	add	r7, sp, #0
    5d40:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	2200      	movs	r2, #0
    5d46:	701a      	strb	r2, [r3, #0]
}
    5d48:	46c0      	nop			; (mov r8, r8)
    5d4a:	46bd      	mov	sp, r7
    5d4c:	b002      	add	sp, #8
    5d4e:	bd80      	pop	{r7, pc}

00005d50 <system_clock_source_xosc32k_get_config_defaults>:
{
    5d50:	b580      	push	{r7, lr}
    5d52:	b082      	sub	sp, #8
    5d54:	af00      	add	r7, sp, #0
    5d56:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	2200      	movs	r2, #0
    5d5c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	2204      	movs	r2, #4
    5d62:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	2200      	movs	r2, #0
    5d68:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	2280      	movs	r2, #128	; 0x80
    5d6e:	0212      	lsls	r2, r2, #8
    5d70:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	2200      	movs	r2, #0
    5d76:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5d78:	687b      	ldr	r3, [r7, #4]
    5d7a:	2201      	movs	r2, #1
    5d7c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5d7e:	687b      	ldr	r3, [r7, #4]
    5d80:	2200      	movs	r2, #0
    5d82:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5d84:	687b      	ldr	r3, [r7, #4]
    5d86:	2201      	movs	r2, #1
    5d88:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	2200      	movs	r2, #0
    5d8e:	739a      	strb	r2, [r3, #14]
}
    5d90:	46c0      	nop			; (mov r8, r8)
    5d92:	46bd      	mov	sp, r7
    5d94:	b002      	add	sp, #8
    5d96:	bd80      	pop	{r7, pc}

00005d98 <system_clock_source_osc8m_get_config_defaults>:
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b082      	sub	sp, #8
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	2203      	movs	r2, #3
    5da4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	2200      	movs	r2, #0
    5daa:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5dac:	687b      	ldr	r3, [r7, #4]
    5dae:	2201      	movs	r2, #1
    5db0:	709a      	strb	r2, [r3, #2]
}
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	46bd      	mov	sp, r7
    5db6:	b002      	add	sp, #8
    5db8:	bd80      	pop	{r7, pc}

00005dba <system_clock_source_dfll_get_config_defaults>:
{
    5dba:	b580      	push	{r7, lr}
    5dbc:	b082      	sub	sp, #8
    5dbe:	af00      	add	r7, sp, #0
    5dc0:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5dc2:	687b      	ldr	r3, [r7, #4]
    5dc4:	2200      	movs	r2, #0
    5dc6:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	2200      	movs	r2, #0
    5dcc:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	2200      	movs	r2, #0
    5dd2:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	2200      	movs	r2, #0
    5dd8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5dda:	687b      	ldr	r3, [r7, #4]
    5ddc:	2200      	movs	r2, #0
    5dde:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5de0:	687b      	ldr	r3, [r7, #4]
    5de2:	2201      	movs	r2, #1
    5de4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	2207      	movs	r2, #7
    5dea:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5dec:	687b      	ldr	r3, [r7, #4]
    5dee:	223f      	movs	r2, #63	; 0x3f
    5df0:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	2201      	movs	r2, #1
    5df6:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	2201      	movs	r2, #1
    5dfc:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5dfe:	687b      	ldr	r3, [r7, #4]
    5e00:	2206      	movs	r2, #6
    5e02:	821a      	strh	r2, [r3, #16]
}
    5e04:	46c0      	nop			; (mov r8, r8)
    5e06:	46bd      	mov	sp, r7
    5e08:	b002      	add	sp, #8
    5e0a:	bd80      	pop	{r7, pc}

00005e0c <system_cpu_clock_set_divider>:
{
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b082      	sub	sp, #8
    5e10:	af00      	add	r7, sp, #0
    5e12:	0002      	movs	r2, r0
    5e14:	1dfb      	adds	r3, r7, #7
    5e16:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5e18:	4a03      	ldr	r2, [pc, #12]	; (5e28 <system_cpu_clock_set_divider+0x1c>)
    5e1a:	1dfb      	adds	r3, r7, #7
    5e1c:	781b      	ldrb	r3, [r3, #0]
    5e1e:	7213      	strb	r3, [r2, #8]
}
    5e20:	46c0      	nop			; (mov r8, r8)
    5e22:	46bd      	mov	sp, r7
    5e24:	b002      	add	sp, #8
    5e26:	bd80      	pop	{r7, pc}
    5e28:	40000400 	.word	0x40000400

00005e2c <system_apb_clock_set_divider>:
{
    5e2c:	b580      	push	{r7, lr}
    5e2e:	b082      	sub	sp, #8
    5e30:	af00      	add	r7, sp, #0
    5e32:	0002      	movs	r2, r0
    5e34:	1dfb      	adds	r3, r7, #7
    5e36:	701a      	strb	r2, [r3, #0]
    5e38:	1dbb      	adds	r3, r7, #6
    5e3a:	1c0a      	adds	r2, r1, #0
    5e3c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5e3e:	1dfb      	adds	r3, r7, #7
    5e40:	781b      	ldrb	r3, [r3, #0]
    5e42:	2b01      	cmp	r3, #1
    5e44:	d008      	beq.n	5e58 <system_apb_clock_set_divider+0x2c>
    5e46:	2b02      	cmp	r3, #2
    5e48:	d00b      	beq.n	5e62 <system_apb_clock_set_divider+0x36>
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d10e      	bne.n	5e6c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5e4e:	4a0b      	ldr	r2, [pc, #44]	; (5e7c <system_apb_clock_set_divider+0x50>)
    5e50:	1dbb      	adds	r3, r7, #6
    5e52:	781b      	ldrb	r3, [r3, #0]
    5e54:	7253      	strb	r3, [r2, #9]
			break;
    5e56:	e00b      	b.n	5e70 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5e58:	4a08      	ldr	r2, [pc, #32]	; (5e7c <system_apb_clock_set_divider+0x50>)
    5e5a:	1dbb      	adds	r3, r7, #6
    5e5c:	781b      	ldrb	r3, [r3, #0]
    5e5e:	7293      	strb	r3, [r2, #10]
			break;
    5e60:	e006      	b.n	5e70 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5e62:	4a06      	ldr	r2, [pc, #24]	; (5e7c <system_apb_clock_set_divider+0x50>)
    5e64:	1dbb      	adds	r3, r7, #6
    5e66:	781b      	ldrb	r3, [r3, #0]
    5e68:	72d3      	strb	r3, [r2, #11]
			break;
    5e6a:	e001      	b.n	5e70 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5e6c:	2317      	movs	r3, #23
    5e6e:	e000      	b.n	5e72 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5e70:	2300      	movs	r3, #0
}
    5e72:	0018      	movs	r0, r3
    5e74:	46bd      	mov	sp, r7
    5e76:	b002      	add	sp, #8
    5e78:	bd80      	pop	{r7, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	40000400 	.word	0x40000400

00005e80 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b082      	sub	sp, #8
    5e84:	af00      	add	r7, sp, #0
    5e86:	0002      	movs	r2, r0
    5e88:	1dfb      	adds	r3, r7, #7
    5e8a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5e8c:	4a08      	ldr	r2, [pc, #32]	; (5eb0 <system_flash_set_waitstates+0x30>)
    5e8e:	1dfb      	adds	r3, r7, #7
    5e90:	781b      	ldrb	r3, [r3, #0]
    5e92:	210f      	movs	r1, #15
    5e94:	400b      	ands	r3, r1
    5e96:	b2d9      	uxtb	r1, r3
    5e98:	6853      	ldr	r3, [r2, #4]
    5e9a:	200f      	movs	r0, #15
    5e9c:	4001      	ands	r1, r0
    5e9e:	0049      	lsls	r1, r1, #1
    5ea0:	201e      	movs	r0, #30
    5ea2:	4383      	bics	r3, r0
    5ea4:	430b      	orrs	r3, r1
    5ea6:	6053      	str	r3, [r2, #4]
}
    5ea8:	46c0      	nop			; (mov r8, r8)
    5eaa:	46bd      	mov	sp, r7
    5eac:	b002      	add	sp, #8
    5eae:	bd80      	pop	{r7, pc}
    5eb0:	41004000 	.word	0x41004000

00005eb4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5eb4:	b580      	push	{r7, lr}
    5eb6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5eb8:	46c0      	nop			; (mov r8, r8)
    5eba:	4b04      	ldr	r3, [pc, #16]	; (5ecc <_system_dfll_wait_for_sync+0x18>)
    5ebc:	68db      	ldr	r3, [r3, #12]
    5ebe:	2210      	movs	r2, #16
    5ec0:	4013      	ands	r3, r2
    5ec2:	d0fa      	beq.n	5eba <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5ec4:	46c0      	nop			; (mov r8, r8)
    5ec6:	46bd      	mov	sp, r7
    5ec8:	bd80      	pop	{r7, pc}
    5eca:	46c0      	nop			; (mov r8, r8)
    5ecc:	40000800 	.word	0x40000800

00005ed0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5ed0:	b580      	push	{r7, lr}
    5ed2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5ed4:	4b0c      	ldr	r3, [pc, #48]	; (5f08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ed6:	2202      	movs	r2, #2
    5ed8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5eda:	4b0c      	ldr	r3, [pc, #48]	; (5f0c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5edc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5ede:	4a0a      	ldr	r2, [pc, #40]	; (5f08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ee0:	4b0b      	ldr	r3, [pc, #44]	; (5f10 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5ee2:	689b      	ldr	r3, [r3, #8]
    5ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5ee6:	4a08      	ldr	r2, [pc, #32]	; (5f08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ee8:	4b09      	ldr	r3, [pc, #36]	; (5f10 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5eea:	685b      	ldr	r3, [r3, #4]
    5eec:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5eee:	4b06      	ldr	r3, [pc, #24]	; (5f08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ef0:	2200      	movs	r2, #0
    5ef2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5ef4:	4b05      	ldr	r3, [pc, #20]	; (5f0c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5ef6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5ef8:	4a03      	ldr	r2, [pc, #12]	; (5f08 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5efa:	4b05      	ldr	r3, [pc, #20]	; (5f10 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	b29b      	uxth	r3, r3
    5f00:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	46bd      	mov	sp, r7
    5f06:	bd80      	pop	{r7, pc}
    5f08:	40000800 	.word	0x40000800
    5f0c:	00005eb5 	.word	0x00005eb5
    5f10:	20000160 	.word	0x20000160

00005f14 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5f14:	b580      	push	{r7, lr}
    5f16:	b082      	sub	sp, #8
    5f18:	af00      	add	r7, sp, #0
    5f1a:	0002      	movs	r2, r0
    5f1c:	1dfb      	adds	r3, r7, #7
    5f1e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5f20:	1dfb      	adds	r3, r7, #7
    5f22:	781b      	ldrb	r3, [r3, #0]
    5f24:	2b08      	cmp	r3, #8
    5f26:	d841      	bhi.n	5fac <system_clock_source_get_hz+0x98>
    5f28:	009a      	lsls	r2, r3, #2
    5f2a:	4b23      	ldr	r3, [pc, #140]	; (5fb8 <system_clock_source_get_hz+0xa4>)
    5f2c:	18d3      	adds	r3, r2, r3
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5f32:	4b22      	ldr	r3, [pc, #136]	; (5fbc <system_clock_source_get_hz+0xa8>)
    5f34:	691b      	ldr	r3, [r3, #16]
    5f36:	e03a      	b.n	5fae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5f38:	4b21      	ldr	r3, [pc, #132]	; (5fc0 <system_clock_source_get_hz+0xac>)
    5f3a:	6a1b      	ldr	r3, [r3, #32]
    5f3c:	059b      	lsls	r3, r3, #22
    5f3e:	0f9b      	lsrs	r3, r3, #30
    5f40:	b2db      	uxtb	r3, r3
    5f42:	001a      	movs	r2, r3
    5f44:	4b1f      	ldr	r3, [pc, #124]	; (5fc4 <system_clock_source_get_hz+0xb0>)
    5f46:	40d3      	lsrs	r3, r2
    5f48:	e031      	b.n	5fae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5f4a:	2380      	movs	r3, #128	; 0x80
    5f4c:	021b      	lsls	r3, r3, #8
    5f4e:	e02e      	b.n	5fae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5f50:	2380      	movs	r3, #128	; 0x80
    5f52:	021b      	lsls	r3, r3, #8
    5f54:	e02b      	b.n	5fae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5f56:	4b19      	ldr	r3, [pc, #100]	; (5fbc <system_clock_source_get_hz+0xa8>)
    5f58:	695b      	ldr	r3, [r3, #20]
    5f5a:	e028      	b.n	5fae <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5f5c:	4b17      	ldr	r3, [pc, #92]	; (5fbc <system_clock_source_get_hz+0xa8>)
    5f5e:	681b      	ldr	r3, [r3, #0]
    5f60:	2202      	movs	r2, #2
    5f62:	4013      	ands	r3, r2
    5f64:	d101      	bne.n	5f6a <system_clock_source_get_hz+0x56>
			return 0;
    5f66:	2300      	movs	r3, #0
    5f68:	e021      	b.n	5fae <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5f6a:	4b17      	ldr	r3, [pc, #92]	; (5fc8 <system_clock_source_get_hz+0xb4>)
    5f6c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    5f6e:	4b13      	ldr	r3, [pc, #76]	; (5fbc <system_clock_source_get_hz+0xa8>)
    5f70:	681b      	ldr	r3, [r3, #0]
    5f72:	2224      	movs	r2, #36	; 0x24
    5f74:	4013      	ands	r3, r2
    5f76:	2b04      	cmp	r3, #4
    5f78:	d109      	bne.n	5f8e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5f7a:	2000      	movs	r0, #0
    5f7c:	4b13      	ldr	r3, [pc, #76]	; (5fcc <system_clock_source_get_hz+0xb8>)
    5f7e:	4798      	blx	r3
    5f80:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5f82:	4b0e      	ldr	r3, [pc, #56]	; (5fbc <system_clock_source_get_hz+0xa8>)
    5f84:	689b      	ldr	r3, [r3, #8]
    5f86:	041b      	lsls	r3, r3, #16
    5f88:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5f8a:	4353      	muls	r3, r2
    5f8c:	e00f      	b.n	5fae <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    5f8e:	4b10      	ldr	r3, [pc, #64]	; (5fd0 <system_clock_source_get_hz+0xbc>)
    5f90:	e00d      	b.n	5fae <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5f92:	4a0b      	ldr	r2, [pc, #44]	; (5fc0 <system_clock_source_get_hz+0xac>)
    5f94:	2350      	movs	r3, #80	; 0x50
    5f96:	5cd3      	ldrb	r3, [r2, r3]
    5f98:	b2db      	uxtb	r3, r3
    5f9a:	001a      	movs	r2, r3
    5f9c:	2304      	movs	r3, #4
    5f9e:	4013      	ands	r3, r2
    5fa0:	d101      	bne.n	5fa6 <system_clock_source_get_hz+0x92>
			return 0;
    5fa2:	2300      	movs	r3, #0
    5fa4:	e003      	b.n	5fae <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    5fa6:	4b05      	ldr	r3, [pc, #20]	; (5fbc <system_clock_source_get_hz+0xa8>)
    5fa8:	68db      	ldr	r3, [r3, #12]
    5faa:	e000      	b.n	5fae <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    5fac:	2300      	movs	r3, #0
	}
}
    5fae:	0018      	movs	r0, r3
    5fb0:	46bd      	mov	sp, r7
    5fb2:	b002      	add	sp, #8
    5fb4:	bd80      	pop	{r7, pc}
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	0000cee0 	.word	0x0000cee0
    5fbc:	20000160 	.word	0x20000160
    5fc0:	40000800 	.word	0x40000800
    5fc4:	007a1200 	.word	0x007a1200
    5fc8:	00005eb5 	.word	0x00005eb5
    5fcc:	00006a65 	.word	0x00006a65
    5fd0:	02dc6c00 	.word	0x02dc6c00

00005fd4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5fd4:	b580      	push	{r7, lr}
    5fd6:	b084      	sub	sp, #16
    5fd8:	af00      	add	r7, sp, #0
    5fda:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5fdc:	4b1a      	ldr	r3, [pc, #104]	; (6048 <system_clock_source_osc8m_set_config+0x74>)
    5fde:	6a1b      	ldr	r3, [r3, #32]
    5fe0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	781b      	ldrb	r3, [r3, #0]
    5fe6:	1c1a      	adds	r2, r3, #0
    5fe8:	2303      	movs	r3, #3
    5fea:	4013      	ands	r3, r2
    5fec:	b2da      	uxtb	r2, r3
    5fee:	230d      	movs	r3, #13
    5ff0:	18fb      	adds	r3, r7, r3
    5ff2:	2103      	movs	r1, #3
    5ff4:	400a      	ands	r2, r1
    5ff6:	0010      	movs	r0, r2
    5ff8:	781a      	ldrb	r2, [r3, #0]
    5ffa:	2103      	movs	r1, #3
    5ffc:	438a      	bics	r2, r1
    5ffe:	1c11      	adds	r1, r2, #0
    6000:	1c02      	adds	r2, r0, #0
    6002:	430a      	orrs	r2, r1
    6004:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	789a      	ldrb	r2, [r3, #2]
    600a:	230c      	movs	r3, #12
    600c:	18fb      	adds	r3, r7, r3
    600e:	01d0      	lsls	r0, r2, #7
    6010:	781a      	ldrb	r2, [r3, #0]
    6012:	217f      	movs	r1, #127	; 0x7f
    6014:	400a      	ands	r2, r1
    6016:	1c11      	adds	r1, r2, #0
    6018:	1c02      	adds	r2, r0, #0
    601a:	430a      	orrs	r2, r1
    601c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	785a      	ldrb	r2, [r3, #1]
    6022:	230c      	movs	r3, #12
    6024:	18fb      	adds	r3, r7, r3
    6026:	2101      	movs	r1, #1
    6028:	400a      	ands	r2, r1
    602a:	0190      	lsls	r0, r2, #6
    602c:	781a      	ldrb	r2, [r3, #0]
    602e:	2140      	movs	r1, #64	; 0x40
    6030:	438a      	bics	r2, r1
    6032:	1c11      	adds	r1, r2, #0
    6034:	1c02      	adds	r2, r0, #0
    6036:	430a      	orrs	r2, r1
    6038:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    603a:	4b03      	ldr	r3, [pc, #12]	; (6048 <system_clock_source_osc8m_set_config+0x74>)
    603c:	68fa      	ldr	r2, [r7, #12]
    603e:	621a      	str	r2, [r3, #32]
}
    6040:	46c0      	nop			; (mov r8, r8)
    6042:	46bd      	mov	sp, r7
    6044:	b004      	add	sp, #16
    6046:	bd80      	pop	{r7, pc}
    6048:	40000800 	.word	0x40000800

0000604c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    604c:	b580      	push	{r7, lr}
    604e:	b084      	sub	sp, #16
    6050:	af00      	add	r7, sp, #0
    6052:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6054:	4a43      	ldr	r2, [pc, #268]	; (6164 <system_clock_source_xosc32k_set_config+0x118>)
    6056:	230c      	movs	r3, #12
    6058:	18fb      	adds	r3, r7, r3
    605a:	8a92      	ldrh	r2, [r2, #20]
    605c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	785b      	ldrb	r3, [r3, #1]
    6062:	1c1a      	adds	r2, r3, #0
    6064:	2307      	movs	r3, #7
    6066:	4013      	ands	r3, r2
    6068:	b2da      	uxtb	r2, r3
    606a:	230c      	movs	r3, #12
    606c:	18fb      	adds	r3, r7, r3
    606e:	2107      	movs	r1, #7
    6070:	400a      	ands	r2, r1
    6072:	0010      	movs	r0, r2
    6074:	785a      	ldrb	r2, [r3, #1]
    6076:	2107      	movs	r1, #7
    6078:	438a      	bics	r2, r1
    607a:	1c11      	adds	r1, r2, #0
    607c:	1c02      	adds	r2, r0, #0
    607e:	430a      	orrs	r2, r1
    6080:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	2b00      	cmp	r3, #0
    6088:	d106      	bne.n	6098 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    608a:	230c      	movs	r3, #12
    608c:	18fb      	adds	r3, r7, r3
    608e:	781a      	ldrb	r2, [r3, #0]
    6090:	2104      	movs	r1, #4
    6092:	430a      	orrs	r2, r1
    6094:	701a      	strb	r2, [r3, #0]
    6096:	e005      	b.n	60a4 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    6098:	230c      	movs	r3, #12
    609a:	18fb      	adds	r3, r7, r3
    609c:	781a      	ldrb	r2, [r3, #0]
    609e:	2104      	movs	r1, #4
    60a0:	438a      	bics	r2, r1
    60a2:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	789a      	ldrb	r2, [r3, #2]
    60a8:	230c      	movs	r3, #12
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	2101      	movs	r1, #1
    60ae:	400a      	ands	r2, r1
    60b0:	0150      	lsls	r0, r2, #5
    60b2:	781a      	ldrb	r2, [r3, #0]
    60b4:	2120      	movs	r1, #32
    60b6:	438a      	bics	r2, r1
    60b8:	1c11      	adds	r1, r2, #0
    60ba:	1c02      	adds	r2, r0, #0
    60bc:	430a      	orrs	r2, r1
    60be:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    60c0:	687b      	ldr	r3, [r7, #4]
    60c2:	78da      	ldrb	r2, [r3, #3]
    60c4:	230c      	movs	r3, #12
    60c6:	18fb      	adds	r3, r7, r3
    60c8:	2101      	movs	r1, #1
    60ca:	400a      	ands	r2, r1
    60cc:	0110      	lsls	r0, r2, #4
    60ce:	781a      	ldrb	r2, [r3, #0]
    60d0:	2110      	movs	r1, #16
    60d2:	438a      	bics	r2, r1
    60d4:	1c11      	adds	r1, r2, #0
    60d6:	1c02      	adds	r2, r0, #0
    60d8:	430a      	orrs	r2, r1
    60da:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	791a      	ldrb	r2, [r3, #4]
    60e0:	230c      	movs	r3, #12
    60e2:	18fb      	adds	r3, r7, r3
    60e4:	2101      	movs	r1, #1
    60e6:	400a      	ands	r2, r1
    60e8:	00d0      	lsls	r0, r2, #3
    60ea:	781a      	ldrb	r2, [r3, #0]
    60ec:	2108      	movs	r1, #8
    60ee:	438a      	bics	r2, r1
    60f0:	1c11      	adds	r1, r2, #0
    60f2:	1c02      	adds	r2, r0, #0
    60f4:	430a      	orrs	r2, r1
    60f6:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    60f8:	687b      	ldr	r3, [r7, #4]
    60fa:	7b5a      	ldrb	r2, [r3, #13]
    60fc:	230c      	movs	r3, #12
    60fe:	18fb      	adds	r3, r7, r3
    6100:	01d0      	lsls	r0, r2, #7
    6102:	781a      	ldrb	r2, [r3, #0]
    6104:	217f      	movs	r1, #127	; 0x7f
    6106:	400a      	ands	r2, r1
    6108:	1c11      	adds	r1, r2, #0
    610a:	1c02      	adds	r2, r0, #0
    610c:	430a      	orrs	r2, r1
    610e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	7b1a      	ldrb	r2, [r3, #12]
    6114:	230c      	movs	r3, #12
    6116:	18fb      	adds	r3, r7, r3
    6118:	2101      	movs	r1, #1
    611a:	400a      	ands	r2, r1
    611c:	0190      	lsls	r0, r2, #6
    611e:	781a      	ldrb	r2, [r3, #0]
    6120:	2140      	movs	r1, #64	; 0x40
    6122:	438a      	bics	r2, r1
    6124:	1c11      	adds	r1, r2, #0
    6126:	1c02      	adds	r2, r0, #0
    6128:	430a      	orrs	r2, r1
    612a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	7b9a      	ldrb	r2, [r3, #14]
    6130:	230c      	movs	r3, #12
    6132:	18fb      	adds	r3, r7, r3
    6134:	2101      	movs	r1, #1
    6136:	400a      	ands	r2, r1
    6138:	0110      	lsls	r0, r2, #4
    613a:	785a      	ldrb	r2, [r3, #1]
    613c:	2110      	movs	r1, #16
    613e:	438a      	bics	r2, r1
    6140:	1c11      	adds	r1, r2, #0
    6142:	1c02      	adds	r2, r0, #0
    6144:	430a      	orrs	r2, r1
    6146:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6148:	687b      	ldr	r3, [r7, #4]
    614a:	689a      	ldr	r2, [r3, #8]
    614c:	4b06      	ldr	r3, [pc, #24]	; (6168 <system_clock_source_xosc32k_set_config+0x11c>)
    614e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    6150:	4a04      	ldr	r2, [pc, #16]	; (6164 <system_clock_source_xosc32k_set_config+0x118>)
    6152:	230c      	movs	r3, #12
    6154:	18fb      	adds	r3, r7, r3
    6156:	881b      	ldrh	r3, [r3, #0]
    6158:	8293      	strh	r3, [r2, #20]
}
    615a:	46c0      	nop			; (mov r8, r8)
    615c:	46bd      	mov	sp, r7
    615e:	b004      	add	sp, #16
    6160:	bd80      	pop	{r7, pc}
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	40000800 	.word	0x40000800
    6168:	20000160 	.word	0x20000160

0000616c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    616c:	b580      	push	{r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	7a1b      	ldrb	r3, [r3, #8]
    6178:	029b      	lsls	r3, r3, #10
    617a:	041b      	lsls	r3, r3, #16
    617c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	895b      	ldrh	r3, [r3, #10]
    6182:	059b      	lsls	r3, r3, #22
    6184:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6186:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    6188:	4b2a      	ldr	r3, [pc, #168]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    618a:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    618c:	687b      	ldr	r3, [r7, #4]
    618e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    6194:	4313      	orrs	r3, r2
    6196:	b2db      	uxtb	r3, r3
    6198:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    619e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    61a0:	687a      	ldr	r2, [r7, #4]
    61a2:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    61a4:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    61a6:	687b      	ldr	r3, [r7, #4]
    61a8:	785b      	ldrb	r3, [r3, #1]
    61aa:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    61ac:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    61ae:	4b21      	ldr	r3, [pc, #132]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    61b0:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    61b2:	687b      	ldr	r3, [r7, #4]
    61b4:	781b      	ldrb	r3, [r3, #0]
    61b6:	2b04      	cmp	r3, #4
    61b8:	d116      	bne.n	61e8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    61ba:	687b      	ldr	r3, [r7, #4]
    61bc:	7b1b      	ldrb	r3, [r3, #12]
    61be:	069b      	lsls	r3, r3, #26
    61c0:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	89db      	ldrh	r3, [r3, #14]
    61c6:	041b      	lsls	r3, r3, #16
    61c8:	0019      	movs	r1, r3
    61ca:	4b1b      	ldr	r3, [pc, #108]	; (6238 <system_clock_source_dfll_set_config+0xcc>)
    61cc:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    61ce:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    61d0:	687a      	ldr	r2, [r7, #4]
    61d2:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    61d4:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    61d6:	4b17      	ldr	r3, [pc, #92]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    61d8:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    61da:	4b16      	ldr	r3, [pc, #88]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    61dc:	681b      	ldr	r3, [r3, #0]
    61de:	687a      	ldr	r2, [r7, #4]
    61e0:	7812      	ldrb	r2, [r2, #0]
    61e2:	431a      	orrs	r2, r3
    61e4:	4b13      	ldr	r3, [pc, #76]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    61e6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	781b      	ldrb	r3, [r3, #0]
    61ec:	2b20      	cmp	r3, #32
    61ee:	d11c      	bne.n	622a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	7b1b      	ldrb	r3, [r3, #12]
    61f4:	069b      	lsls	r3, r3, #26
    61f6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	89db      	ldrh	r3, [r3, #14]
    61fc:	041b      	lsls	r3, r3, #16
    61fe:	0019      	movs	r1, r3
    6200:	4b0d      	ldr	r3, [pc, #52]	; (6238 <system_clock_source_dfll_set_config+0xcc>)
    6202:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6204:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6206:	687a      	ldr	r2, [r7, #4]
    6208:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    620a:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    620c:	4b09      	ldr	r3, [pc, #36]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    620e:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6210:	4b08      	ldr	r3, [pc, #32]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    6212:	681b      	ldr	r3, [r3, #0]
    6214:	687a      	ldr	r2, [r7, #4]
    6216:	7812      	ldrb	r2, [r2, #0]
    6218:	2104      	movs	r1, #4
    621a:	430a      	orrs	r2, r1
    621c:	b2d2      	uxtb	r2, r2
    621e:	4313      	orrs	r3, r2
    6220:	2280      	movs	r2, #128	; 0x80
    6222:	00d2      	lsls	r2, r2, #3
    6224:	431a      	orrs	r2, r3
    6226:	4b03      	ldr	r3, [pc, #12]	; (6234 <system_clock_source_dfll_set_config+0xc8>)
    6228:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    622a:	46c0      	nop			; (mov r8, r8)
    622c:	46bd      	mov	sp, r7
    622e:	b002      	add	sp, #8
    6230:	bd80      	pop	{r7, pc}
    6232:	46c0      	nop			; (mov r8, r8)
    6234:	20000160 	.word	0x20000160
    6238:	03ff0000 	.word	0x03ff0000

0000623c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    623c:	b580      	push	{r7, lr}
    623e:	b082      	sub	sp, #8
    6240:	af00      	add	r7, sp, #0
    6242:	0002      	movs	r2, r0
    6244:	1dfb      	adds	r3, r7, #7
    6246:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6248:	1dfb      	adds	r3, r7, #7
    624a:	781b      	ldrb	r3, [r3, #0]
    624c:	2b08      	cmp	r3, #8
    624e:	d83b      	bhi.n	62c8 <system_clock_source_enable+0x8c>
    6250:	009a      	lsls	r2, r3, #2
    6252:	4b21      	ldr	r3, [pc, #132]	; (62d8 <system_clock_source_enable+0x9c>)
    6254:	18d3      	adds	r3, r2, r3
    6256:	681b      	ldr	r3, [r3, #0]
    6258:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    625a:	4b20      	ldr	r3, [pc, #128]	; (62dc <system_clock_source_enable+0xa0>)
    625c:	4a1f      	ldr	r2, [pc, #124]	; (62dc <system_clock_source_enable+0xa0>)
    625e:	6a12      	ldr	r2, [r2, #32]
    6260:	2102      	movs	r1, #2
    6262:	430a      	orrs	r2, r1
    6264:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6266:	2300      	movs	r3, #0
    6268:	e031      	b.n	62ce <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    626a:	4b1c      	ldr	r3, [pc, #112]	; (62dc <system_clock_source_enable+0xa0>)
    626c:	4a1b      	ldr	r2, [pc, #108]	; (62dc <system_clock_source_enable+0xa0>)
    626e:	6992      	ldr	r2, [r2, #24]
    6270:	2102      	movs	r1, #2
    6272:	430a      	orrs	r2, r1
    6274:	619a      	str	r2, [r3, #24]
		break;
    6276:	e029      	b.n	62cc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6278:	4a18      	ldr	r2, [pc, #96]	; (62dc <system_clock_source_enable+0xa0>)
    627a:	4b18      	ldr	r3, [pc, #96]	; (62dc <system_clock_source_enable+0xa0>)
    627c:	8a1b      	ldrh	r3, [r3, #16]
    627e:	b29b      	uxth	r3, r3
    6280:	2102      	movs	r1, #2
    6282:	430b      	orrs	r3, r1
    6284:	b29b      	uxth	r3, r3
    6286:	8213      	strh	r3, [r2, #16]
		break;
    6288:	e020      	b.n	62cc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    628a:	4a14      	ldr	r2, [pc, #80]	; (62dc <system_clock_source_enable+0xa0>)
    628c:	4b13      	ldr	r3, [pc, #76]	; (62dc <system_clock_source_enable+0xa0>)
    628e:	8a9b      	ldrh	r3, [r3, #20]
    6290:	b29b      	uxth	r3, r3
    6292:	2102      	movs	r1, #2
    6294:	430b      	orrs	r3, r1
    6296:	b29b      	uxth	r3, r3
    6298:	8293      	strh	r3, [r2, #20]
		break;
    629a:	e017      	b.n	62cc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    629c:	4b10      	ldr	r3, [pc, #64]	; (62e0 <system_clock_source_enable+0xa4>)
    629e:	681b      	ldr	r3, [r3, #0]
    62a0:	2202      	movs	r2, #2
    62a2:	431a      	orrs	r2, r3
    62a4:	4b0e      	ldr	r3, [pc, #56]	; (62e0 <system_clock_source_enable+0xa4>)
    62a6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    62a8:	4b0e      	ldr	r3, [pc, #56]	; (62e4 <system_clock_source_enable+0xa8>)
    62aa:	4798      	blx	r3
		break;
    62ac:	e00e      	b.n	62cc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    62ae:	4a0b      	ldr	r2, [pc, #44]	; (62dc <system_clock_source_enable+0xa0>)
    62b0:	490a      	ldr	r1, [pc, #40]	; (62dc <system_clock_source_enable+0xa0>)
    62b2:	2344      	movs	r3, #68	; 0x44
    62b4:	5ccb      	ldrb	r3, [r1, r3]
    62b6:	b2db      	uxtb	r3, r3
    62b8:	2102      	movs	r1, #2
    62ba:	430b      	orrs	r3, r1
    62bc:	b2d9      	uxtb	r1, r3
    62be:	2344      	movs	r3, #68	; 0x44
    62c0:	54d1      	strb	r1, [r2, r3]
		break;
    62c2:	e003      	b.n	62cc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    62c4:	2300      	movs	r3, #0
    62c6:	e002      	b.n	62ce <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    62c8:	2317      	movs	r3, #23
    62ca:	e000      	b.n	62ce <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    62cc:	2300      	movs	r3, #0
}
    62ce:	0018      	movs	r0, r3
    62d0:	46bd      	mov	sp, r7
    62d2:	b002      	add	sp, #8
    62d4:	bd80      	pop	{r7, pc}
    62d6:	46c0      	nop			; (mov r8, r8)
    62d8:	0000cf04 	.word	0x0000cf04
    62dc:	40000800 	.word	0x40000800
    62e0:	20000160 	.word	0x20000160
    62e4:	00005ed1 	.word	0x00005ed1

000062e8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    62e8:	b580      	push	{r7, lr}
    62ea:	b084      	sub	sp, #16
    62ec:	af00      	add	r7, sp, #0
    62ee:	0002      	movs	r2, r0
    62f0:	1dfb      	adds	r3, r7, #7
    62f2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    62f4:	2300      	movs	r3, #0
    62f6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    62f8:	1dfb      	adds	r3, r7, #7
    62fa:	781b      	ldrb	r3, [r3, #0]
    62fc:	2b08      	cmp	r3, #8
    62fe:	d821      	bhi.n	6344 <system_clock_source_is_ready+0x5c>
    6300:	009a      	lsls	r2, r3, #2
    6302:	4b18      	ldr	r3, [pc, #96]	; (6364 <system_clock_source_is_ready+0x7c>)
    6304:	18d3      	adds	r3, r2, r3
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    630a:	2308      	movs	r3, #8
    630c:	60fb      	str	r3, [r7, #12]
		break;
    630e:	e01b      	b.n	6348 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6310:	2304      	movs	r3, #4
    6312:	60fb      	str	r3, [r7, #12]
		break;
    6314:	e018      	b.n	6348 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6316:	2301      	movs	r3, #1
    6318:	60fb      	str	r3, [r7, #12]
		break;
    631a:	e015      	b.n	6348 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    631c:	2302      	movs	r3, #2
    631e:	60fb      	str	r3, [r7, #12]
		break;
    6320:	e012      	b.n	6348 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    6322:	23d0      	movs	r3, #208	; 0xd0
    6324:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    6326:	e00f      	b.n	6348 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6328:	4a0f      	ldr	r2, [pc, #60]	; (6368 <system_clock_source_is_ready+0x80>)
    632a:	2350      	movs	r3, #80	; 0x50
    632c:	5cd3      	ldrb	r3, [r2, r3]
    632e:	b2db      	uxtb	r3, r3
    6330:	001a      	movs	r2, r3
    6332:	2303      	movs	r3, #3
    6334:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    6336:	3b03      	subs	r3, #3
    6338:	425a      	negs	r2, r3
    633a:	4153      	adcs	r3, r2
    633c:	b2db      	uxtb	r3, r3
    633e:	e00c      	b.n	635a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6340:	2301      	movs	r3, #1
    6342:	e00a      	b.n	635a <system_clock_source_is_ready+0x72>

	default:
		return false;
    6344:	2300      	movs	r3, #0
    6346:	e008      	b.n	635a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6348:	4b07      	ldr	r3, [pc, #28]	; (6368 <system_clock_source_is_ready+0x80>)
    634a:	68db      	ldr	r3, [r3, #12]
    634c:	68fa      	ldr	r2, [r7, #12]
    634e:	401a      	ands	r2, r3
    6350:	68fb      	ldr	r3, [r7, #12]
    6352:	1ad3      	subs	r3, r2, r3
    6354:	425a      	negs	r2, r3
    6356:	4153      	adcs	r3, r2
    6358:	b2db      	uxtb	r3, r3
}
    635a:	0018      	movs	r0, r3
    635c:	46bd      	mov	sp, r7
    635e:	b004      	add	sp, #16
    6360:	bd80      	pop	{r7, pc}
    6362:	46c0      	nop			; (mov r8, r8)
    6364:	0000cf28 	.word	0x0000cf28
    6368:	40000800 	.word	0x40000800

0000636c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    636c:	b580      	push	{r7, lr}
    636e:	b082      	sub	sp, #8
    6370:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    6372:	003b      	movs	r3, r7
    6374:	2202      	movs	r2, #2
    6376:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6378:	2300      	movs	r3, #0
    637a:	607b      	str	r3, [r7, #4]
    637c:	e009      	b.n	6392 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	b2db      	uxtb	r3, r3
    6382:	003a      	movs	r2, r7
    6384:	0011      	movs	r1, r2
    6386:	0018      	movs	r0, r3
    6388:	4b05      	ldr	r3, [pc, #20]	; (63a0 <_switch_peripheral_gclk+0x34>)
    638a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	3301      	adds	r3, #1
    6390:	607b      	str	r3, [r7, #4]
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	2b24      	cmp	r3, #36	; 0x24
    6396:	d9f2      	bls.n	637e <_switch_peripheral_gclk+0x12>
	}
}
    6398:	46c0      	nop			; (mov r8, r8)
    639a:	46bd      	mov	sp, r7
    639c:	b002      	add	sp, #8
    639e:	bd80      	pop	{r7, pc}
    63a0:	00006941 	.word	0x00006941

000063a4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    63a4:	b580      	push	{r7, lr}
    63a6:	b0aa      	sub	sp, #168	; 0xa8
    63a8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    63aa:	4b85      	ldr	r3, [pc, #532]	; (65c0 <system_clock_init+0x21c>)
    63ac:	22c2      	movs	r2, #194	; 0xc2
    63ae:	00d2      	lsls	r2, r2, #3
    63b0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    63b2:	2002      	movs	r0, #2
    63b4:	4b83      	ldr	r3, [pc, #524]	; (65c4 <system_clock_init+0x220>)
    63b6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    63b8:	4b83      	ldr	r3, [pc, #524]	; (65c8 <system_clock_init+0x224>)
    63ba:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    63bc:	2394      	movs	r3, #148	; 0x94
    63be:	18fb      	adds	r3, r7, r3
    63c0:	0018      	movs	r0, r3
    63c2:	4b82      	ldr	r3, [pc, #520]	; (65cc <system_clock_init+0x228>)
    63c4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    63c6:	2394      	movs	r3, #148	; 0x94
    63c8:	18fb      	adds	r3, r7, r3
    63ca:	2280      	movs	r2, #128	; 0x80
    63cc:	0212      	lsls	r2, r2, #8
    63ce:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    63d0:	2394      	movs	r3, #148	; 0x94
    63d2:	18fb      	adds	r3, r7, r3
    63d4:	2200      	movs	r2, #0
    63d6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    63d8:	2394      	movs	r3, #148	; 0x94
    63da:	18fb      	adds	r3, r7, r3
    63dc:	2206      	movs	r2, #6
    63de:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    63e0:	2394      	movs	r3, #148	; 0x94
    63e2:	18fb      	adds	r3, r7, r3
    63e4:	2200      	movs	r2, #0
    63e6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    63e8:	2394      	movs	r3, #148	; 0x94
    63ea:	18fb      	adds	r3, r7, r3
    63ec:	2200      	movs	r2, #0
    63ee:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    63f0:	2394      	movs	r3, #148	; 0x94
    63f2:	18fb      	adds	r3, r7, r3
    63f4:	2201      	movs	r2, #1
    63f6:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    63f8:	2394      	movs	r3, #148	; 0x94
    63fa:	18fb      	adds	r3, r7, r3
    63fc:	2200      	movs	r2, #0
    63fe:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6400:	2394      	movs	r3, #148	; 0x94
    6402:	18fb      	adds	r3, r7, r3
    6404:	2201      	movs	r2, #1
    6406:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6408:	2394      	movs	r3, #148	; 0x94
    640a:	18fb      	adds	r3, r7, r3
    640c:	0018      	movs	r0, r3
    640e:	4b70      	ldr	r3, [pc, #448]	; (65d0 <system_clock_init+0x22c>)
    6410:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6412:	2005      	movs	r0, #5
    6414:	4b6f      	ldr	r3, [pc, #444]	; (65d4 <system_clock_init+0x230>)
    6416:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6418:	46c0      	nop			; (mov r8, r8)
    641a:	2005      	movs	r0, #5
    641c:	4b6e      	ldr	r3, [pc, #440]	; (65d8 <system_clock_init+0x234>)
    641e:	4798      	blx	r3
    6420:	0003      	movs	r3, r0
    6422:	001a      	movs	r2, r3
    6424:	2301      	movs	r3, #1
    6426:	4053      	eors	r3, r2
    6428:	b2db      	uxtb	r3, r3
    642a:	2b00      	cmp	r3, #0
    642c:	d1f5      	bne.n	641a <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    642e:	2380      	movs	r3, #128	; 0x80
    6430:	18fb      	adds	r3, r7, r3
    6432:	0018      	movs	r0, r3
    6434:	4b69      	ldr	r3, [pc, #420]	; (65dc <system_clock_init+0x238>)
    6436:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6438:	2380      	movs	r3, #128	; 0x80
    643a:	18fb      	adds	r3, r7, r3
    643c:	2204      	movs	r2, #4
    643e:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6440:	2380      	movs	r3, #128	; 0x80
    6442:	18fb      	adds	r3, r7, r3
    6444:	2200      	movs	r2, #0
    6446:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6448:	4b65      	ldr	r3, [pc, #404]	; (65e0 <system_clock_init+0x23c>)
    644a:	681b      	ldr	r3, [r3, #0]
    644c:	0e9b      	lsrs	r3, r3, #26
    644e:	22a4      	movs	r2, #164	; 0xa4
    6450:	18ba      	adds	r2, r7, r2
    6452:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6454:	23a4      	movs	r3, #164	; 0xa4
    6456:	18fb      	adds	r3, r7, r3
    6458:	681b      	ldr	r3, [r3, #0]
    645a:	2b3f      	cmp	r3, #63	; 0x3f
    645c:	d103      	bne.n	6466 <system_clock_init+0xc2>
		coarse = 0x1f;
    645e:	231f      	movs	r3, #31
    6460:	22a4      	movs	r2, #164	; 0xa4
    6462:	18ba      	adds	r2, r7, r2
    6464:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6466:	23a4      	movs	r3, #164	; 0xa4
    6468:	18fb      	adds	r3, r7, r3
    646a:	681b      	ldr	r3, [r3, #0]
    646c:	b2da      	uxtb	r2, r3
    646e:	2380      	movs	r3, #128	; 0x80
    6470:	18fb      	adds	r3, r7, r3
    6472:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6474:	2380      	movs	r3, #128	; 0x80
    6476:	18fb      	adds	r3, r7, r3
    6478:	2200      	movs	r2, #0
    647a:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    647c:	2380      	movs	r3, #128	; 0x80
    647e:	18fb      	adds	r3, r7, r3
    6480:	2200      	movs	r2, #0
    6482:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6484:	2380      	movs	r3, #128	; 0x80
    6486:	18fb      	adds	r3, r7, r3
    6488:	2200      	movs	r2, #0
    648a:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    648c:	2380      	movs	r3, #128	; 0x80
    648e:	18fb      	adds	r3, r7, r3
    6490:	2200      	movs	r2, #0
    6492:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6494:	2380      	movs	r3, #128	; 0x80
    6496:	18fb      	adds	r3, r7, r3
    6498:	22b7      	movs	r2, #183	; 0xb7
    649a:	00d2      	lsls	r2, r2, #3
    649c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    649e:	2380      	movs	r3, #128	; 0x80
    64a0:	18fb      	adds	r3, r7, r3
    64a2:	2203      	movs	r2, #3
    64a4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    64a6:	2380      	movs	r3, #128	; 0x80
    64a8:	18fb      	adds	r3, r7, r3
    64aa:	221f      	movs	r2, #31
    64ac:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    64ae:	2380      	movs	r3, #128	; 0x80
    64b0:	18fb      	adds	r3, r7, r3
    64b2:	0018      	movs	r0, r3
    64b4:	4b4b      	ldr	r3, [pc, #300]	; (65e4 <system_clock_init+0x240>)
    64b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    64b8:	237c      	movs	r3, #124	; 0x7c
    64ba:	18fb      	adds	r3, r7, r3
    64bc:	0018      	movs	r0, r3
    64be:	4b4a      	ldr	r3, [pc, #296]	; (65e8 <system_clock_init+0x244>)
    64c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    64c2:	237c      	movs	r3, #124	; 0x7c
    64c4:	18fb      	adds	r3, r7, r3
    64c6:	2200      	movs	r2, #0
    64c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    64ca:	237c      	movs	r3, #124	; 0x7c
    64cc:	18fb      	adds	r3, r7, r3
    64ce:	2201      	movs	r2, #1
    64d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    64d2:	237c      	movs	r3, #124	; 0x7c
    64d4:	18fb      	adds	r3, r7, r3
    64d6:	2201      	movs	r2, #1
    64d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    64da:	237c      	movs	r3, #124	; 0x7c
    64dc:	18fb      	adds	r3, r7, r3
    64de:	0018      	movs	r0, r3
    64e0:	4b42      	ldr	r3, [pc, #264]	; (65ec <system_clock_init+0x248>)
    64e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    64e4:	2006      	movs	r0, #6
    64e6:	4b3b      	ldr	r3, [pc, #236]	; (65d4 <system_clock_init+0x230>)
    64e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    64ea:	4b41      	ldr	r3, [pc, #260]	; (65f0 <system_clock_init+0x24c>)
    64ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    64ee:	2364      	movs	r3, #100	; 0x64
    64f0:	18fb      	adds	r3, r7, r3
    64f2:	0018      	movs	r0, r3
    64f4:	4b3f      	ldr	r3, [pc, #252]	; (65f4 <system_clock_init+0x250>)
    64f6:	4798      	blx	r3
    64f8:	2364      	movs	r3, #100	; 0x64
    64fa:	18fb      	adds	r3, r7, r3
    64fc:	2205      	movs	r2, #5
    64fe:	701a      	strb	r2, [r3, #0]
    6500:	2364      	movs	r3, #100	; 0x64
    6502:	18fb      	adds	r3, r7, r3
    6504:	2201      	movs	r2, #1
    6506:	605a      	str	r2, [r3, #4]
    6508:	2364      	movs	r3, #100	; 0x64
    650a:	18fb      	adds	r3, r7, r3
    650c:	2200      	movs	r2, #0
    650e:	721a      	strb	r2, [r3, #8]
    6510:	2364      	movs	r3, #100	; 0x64
    6512:	18fb      	adds	r3, r7, r3
    6514:	2200      	movs	r2, #0
    6516:	725a      	strb	r2, [r3, #9]
    6518:	2364      	movs	r3, #100	; 0x64
    651a:	18fb      	adds	r3, r7, r3
    651c:	0019      	movs	r1, r3
    651e:	2001      	movs	r0, #1
    6520:	4b35      	ldr	r3, [pc, #212]	; (65f8 <system_clock_init+0x254>)
    6522:	4798      	blx	r3
    6524:	2001      	movs	r0, #1
    6526:	4b35      	ldr	r3, [pc, #212]	; (65fc <system_clock_init+0x258>)
    6528:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    652a:	230c      	movs	r3, #12
    652c:	18fb      	adds	r3, r7, r3
    652e:	0018      	movs	r0, r3
    6530:	4b33      	ldr	r3, [pc, #204]	; (6600 <system_clock_init+0x25c>)
    6532:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6534:	230c      	movs	r3, #12
    6536:	18fb      	adds	r3, r7, r3
    6538:	2201      	movs	r2, #1
    653a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    653c:	230c      	movs	r3, #12
    653e:	18fb      	adds	r3, r7, r3
    6540:	0019      	movs	r1, r3
    6542:	2000      	movs	r0, #0
    6544:	4b2f      	ldr	r3, [pc, #188]	; (6604 <system_clock_init+0x260>)
    6546:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6548:	2000      	movs	r0, #0
    654a:	4b2f      	ldr	r3, [pc, #188]	; (6608 <system_clock_init+0x264>)
    654c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    654e:	2007      	movs	r0, #7
    6550:	4b20      	ldr	r3, [pc, #128]	; (65d4 <system_clock_init+0x230>)
    6552:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6554:	46c0      	nop			; (mov r8, r8)
    6556:	2007      	movs	r0, #7
    6558:	4b1f      	ldr	r3, [pc, #124]	; (65d8 <system_clock_init+0x234>)
    655a:	4798      	blx	r3
    655c:	0003      	movs	r3, r0
    655e:	001a      	movs	r2, r3
    6560:	2301      	movs	r3, #1
    6562:	4053      	eors	r3, r2
    6564:	b2db      	uxtb	r3, r3
    6566:	2b00      	cmp	r3, #0
    6568:	d1f5      	bne.n	6556 <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    656a:	2000      	movs	r0, #0
    656c:	4b27      	ldr	r3, [pc, #156]	; (660c <system_clock_init+0x268>)
    656e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6570:	2100      	movs	r1, #0
    6572:	2000      	movs	r0, #0
    6574:	4b26      	ldr	r3, [pc, #152]	; (6610 <system_clock_init+0x26c>)
    6576:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6578:	2100      	movs	r1, #0
    657a:	2001      	movs	r0, #1
    657c:	4b24      	ldr	r3, [pc, #144]	; (6610 <system_clock_init+0x26c>)
    657e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6580:	2100      	movs	r1, #0
    6582:	2002      	movs	r0, #2
    6584:	4b22      	ldr	r3, [pc, #136]	; (6610 <system_clock_init+0x26c>)
    6586:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6588:	003b      	movs	r3, r7
    658a:	0018      	movs	r0, r3
    658c:	4b19      	ldr	r3, [pc, #100]	; (65f4 <system_clock_init+0x250>)
    658e:	4798      	blx	r3
    6590:	003b      	movs	r3, r7
    6592:	2207      	movs	r2, #7
    6594:	701a      	strb	r2, [r3, #0]
    6596:	003b      	movs	r3, r7
    6598:	2201      	movs	r2, #1
    659a:	605a      	str	r2, [r3, #4]
    659c:	003b      	movs	r3, r7
    659e:	2201      	movs	r2, #1
    65a0:	721a      	strb	r2, [r3, #8]
    65a2:	003b      	movs	r3, r7
    65a4:	2200      	movs	r2, #0
    65a6:	725a      	strb	r2, [r3, #9]
    65a8:	003b      	movs	r3, r7
    65aa:	0019      	movs	r1, r3
    65ac:	2000      	movs	r0, #0
    65ae:	4b12      	ldr	r3, [pc, #72]	; (65f8 <system_clock_init+0x254>)
    65b0:	4798      	blx	r3
    65b2:	2000      	movs	r0, #0
    65b4:	4b11      	ldr	r3, [pc, #68]	; (65fc <system_clock_init+0x258>)
    65b6:	4798      	blx	r3
#endif
}
    65b8:	46c0      	nop			; (mov r8, r8)
    65ba:	46bd      	mov	sp, r7
    65bc:	b02a      	add	sp, #168	; 0xa8
    65be:	bd80      	pop	{r7, pc}
    65c0:	40000800 	.word	0x40000800
    65c4:	00005e81 	.word	0x00005e81
    65c8:	0000636d 	.word	0x0000636d
    65cc:	00005d51 	.word	0x00005d51
    65d0:	0000604d 	.word	0x0000604d
    65d4:	0000623d 	.word	0x0000623d
    65d8:	000062e9 	.word	0x000062e9
    65dc:	00005dbb 	.word	0x00005dbb
    65e0:	00806024 	.word	0x00806024
    65e4:	0000616d 	.word	0x0000616d
    65e8:	00005d99 	.word	0x00005d99
    65ec:	00005fd5 	.word	0x00005fd5
    65f0:	000066b9 	.word	0x000066b9
    65f4:	00005d0d 	.word	0x00005d0d
    65f8:	000066e9 	.word	0x000066e9
    65fc:	0000680d 	.word	0x0000680d
    6600:	00005d3b 	.word	0x00005d3b
    6604:	00006941 	.word	0x00006941
    6608:	00006985 	.word	0x00006985
    660c:	00005e0d 	.word	0x00005e0d
    6610:	00005e2d 	.word	0x00005e2d

00006614 <system_apb_clock_set_mask>:
{
    6614:	b580      	push	{r7, lr}
    6616:	b082      	sub	sp, #8
    6618:	af00      	add	r7, sp, #0
    661a:	0002      	movs	r2, r0
    661c:	6039      	str	r1, [r7, #0]
    661e:	1dfb      	adds	r3, r7, #7
    6620:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6622:	1dfb      	adds	r3, r7, #7
    6624:	781b      	ldrb	r3, [r3, #0]
    6626:	2b01      	cmp	r3, #1
    6628:	d00a      	beq.n	6640 <system_apb_clock_set_mask+0x2c>
    662a:	2b02      	cmp	r3, #2
    662c:	d00f      	beq.n	664e <system_apb_clock_set_mask+0x3a>
    662e:	2b00      	cmp	r3, #0
    6630:	d114      	bne.n	665c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6632:	4b0e      	ldr	r3, [pc, #56]	; (666c <system_apb_clock_set_mask+0x58>)
    6634:	4a0d      	ldr	r2, [pc, #52]	; (666c <system_apb_clock_set_mask+0x58>)
    6636:	6991      	ldr	r1, [r2, #24]
    6638:	683a      	ldr	r2, [r7, #0]
    663a:	430a      	orrs	r2, r1
    663c:	619a      	str	r2, [r3, #24]
			break;
    663e:	e00f      	b.n	6660 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6640:	4b0a      	ldr	r3, [pc, #40]	; (666c <system_apb_clock_set_mask+0x58>)
    6642:	4a0a      	ldr	r2, [pc, #40]	; (666c <system_apb_clock_set_mask+0x58>)
    6644:	69d1      	ldr	r1, [r2, #28]
    6646:	683a      	ldr	r2, [r7, #0]
    6648:	430a      	orrs	r2, r1
    664a:	61da      	str	r2, [r3, #28]
			break;
    664c:	e008      	b.n	6660 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    664e:	4b07      	ldr	r3, [pc, #28]	; (666c <system_apb_clock_set_mask+0x58>)
    6650:	4a06      	ldr	r2, [pc, #24]	; (666c <system_apb_clock_set_mask+0x58>)
    6652:	6a11      	ldr	r1, [r2, #32]
    6654:	683a      	ldr	r2, [r7, #0]
    6656:	430a      	orrs	r2, r1
    6658:	621a      	str	r2, [r3, #32]
			break;
    665a:	e001      	b.n	6660 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    665c:	2317      	movs	r3, #23
    665e:	e000      	b.n	6662 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6660:	2300      	movs	r3, #0
}
    6662:	0018      	movs	r0, r3
    6664:	46bd      	mov	sp, r7
    6666:	b002      	add	sp, #8
    6668:	bd80      	pop	{r7, pc}
    666a:	46c0      	nop			; (mov r8, r8)
    666c:	40000400 	.word	0x40000400

00006670 <system_interrupt_enter_critical_section>:
{
    6670:	b580      	push	{r7, lr}
    6672:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6674:	4b02      	ldr	r3, [pc, #8]	; (6680 <system_interrupt_enter_critical_section+0x10>)
    6676:	4798      	blx	r3
}
    6678:	46c0      	nop			; (mov r8, r8)
    667a:	46bd      	mov	sp, r7
    667c:	bd80      	pop	{r7, pc}
    667e:	46c0      	nop			; (mov r8, r8)
    6680:	000032b5 	.word	0x000032b5

00006684 <system_interrupt_leave_critical_section>:
{
    6684:	b580      	push	{r7, lr}
    6686:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6688:	4b02      	ldr	r3, [pc, #8]	; (6694 <system_interrupt_leave_critical_section+0x10>)
    668a:	4798      	blx	r3
}
    668c:	46c0      	nop			; (mov r8, r8)
    668e:	46bd      	mov	sp, r7
    6690:	bd80      	pop	{r7, pc}
    6692:	46c0      	nop			; (mov r8, r8)
    6694:	00003309 	.word	0x00003309

00006698 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6698:	b580      	push	{r7, lr}
    669a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    669c:	4b05      	ldr	r3, [pc, #20]	; (66b4 <system_gclk_is_syncing+0x1c>)
    669e:	785b      	ldrb	r3, [r3, #1]
    66a0:	b2db      	uxtb	r3, r3
    66a2:	b25b      	sxtb	r3, r3
    66a4:	2b00      	cmp	r3, #0
    66a6:	da01      	bge.n	66ac <system_gclk_is_syncing+0x14>
		return true;
    66a8:	2301      	movs	r3, #1
    66aa:	e000      	b.n	66ae <system_gclk_is_syncing+0x16>
	}

	return false;
    66ac:	2300      	movs	r3, #0
}
    66ae:	0018      	movs	r0, r3
    66b0:	46bd      	mov	sp, r7
    66b2:	bd80      	pop	{r7, pc}
    66b4:	40000c00 	.word	0x40000c00

000066b8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    66bc:	2108      	movs	r1, #8
    66be:	2000      	movs	r0, #0
    66c0:	4b07      	ldr	r3, [pc, #28]	; (66e0 <system_gclk_init+0x28>)
    66c2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    66c4:	4b07      	ldr	r3, [pc, #28]	; (66e4 <system_gclk_init+0x2c>)
    66c6:	2201      	movs	r2, #1
    66c8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    66ca:	46c0      	nop			; (mov r8, r8)
    66cc:	4b05      	ldr	r3, [pc, #20]	; (66e4 <system_gclk_init+0x2c>)
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	b2db      	uxtb	r3, r3
    66d2:	001a      	movs	r2, r3
    66d4:	2301      	movs	r3, #1
    66d6:	4013      	ands	r3, r2
    66d8:	d1f8      	bne.n	66cc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    66da:	46c0      	nop			; (mov r8, r8)
    66dc:	46bd      	mov	sp, r7
    66de:	bd80      	pop	{r7, pc}
    66e0:	00006615 	.word	0x00006615
    66e4:	40000c00 	.word	0x40000c00

000066e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    66e8:	b580      	push	{r7, lr}
    66ea:	b086      	sub	sp, #24
    66ec:	af00      	add	r7, sp, #0
    66ee:	0002      	movs	r2, r0
    66f0:	6039      	str	r1, [r7, #0]
    66f2:	1dfb      	adds	r3, r7, #7
    66f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    66f6:	1dfb      	adds	r3, r7, #7
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    66fc:	1dfb      	adds	r3, r7, #7
    66fe:	781b      	ldrb	r3, [r3, #0]
    6700:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6702:	683b      	ldr	r3, [r7, #0]
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	021b      	lsls	r3, r3, #8
    6708:	001a      	movs	r2, r3
    670a:	697b      	ldr	r3, [r7, #20]
    670c:	4313      	orrs	r3, r2
    670e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6710:	683b      	ldr	r3, [r7, #0]
    6712:	785b      	ldrb	r3, [r3, #1]
    6714:	2b00      	cmp	r3, #0
    6716:	d004      	beq.n	6722 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6718:	697b      	ldr	r3, [r7, #20]
    671a:	2280      	movs	r2, #128	; 0x80
    671c:	02d2      	lsls	r2, r2, #11
    671e:	4313      	orrs	r3, r2
    6720:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6722:	683b      	ldr	r3, [r7, #0]
    6724:	7a5b      	ldrb	r3, [r3, #9]
    6726:	2b00      	cmp	r3, #0
    6728:	d004      	beq.n	6734 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    672a:	697b      	ldr	r3, [r7, #20]
    672c:	2280      	movs	r2, #128	; 0x80
    672e:	0312      	lsls	r2, r2, #12
    6730:	4313      	orrs	r3, r2
    6732:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6734:	683b      	ldr	r3, [r7, #0]
    6736:	685b      	ldr	r3, [r3, #4]
    6738:	2b01      	cmp	r3, #1
    673a:	d92c      	bls.n	6796 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    673c:	683b      	ldr	r3, [r7, #0]
    673e:	685a      	ldr	r2, [r3, #4]
    6740:	683b      	ldr	r3, [r7, #0]
    6742:	685b      	ldr	r3, [r3, #4]
    6744:	3b01      	subs	r3, #1
    6746:	4013      	ands	r3, r2
    6748:	d11a      	bne.n	6780 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    674a:	2300      	movs	r3, #0
    674c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    674e:	2302      	movs	r3, #2
    6750:	60bb      	str	r3, [r7, #8]
    6752:	e005      	b.n	6760 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6754:	68fb      	ldr	r3, [r7, #12]
    6756:	3301      	adds	r3, #1
    6758:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    675a:	68bb      	ldr	r3, [r7, #8]
    675c:	005b      	lsls	r3, r3, #1
    675e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6760:	683b      	ldr	r3, [r7, #0]
    6762:	685a      	ldr	r2, [r3, #4]
    6764:	68bb      	ldr	r3, [r7, #8]
    6766:	429a      	cmp	r2, r3
    6768:	d8f4      	bhi.n	6754 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    676a:	68fb      	ldr	r3, [r7, #12]
    676c:	021b      	lsls	r3, r3, #8
    676e:	693a      	ldr	r2, [r7, #16]
    6770:	4313      	orrs	r3, r2
    6772:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6774:	697b      	ldr	r3, [r7, #20]
    6776:	2280      	movs	r2, #128	; 0x80
    6778:	0352      	lsls	r2, r2, #13
    677a:	4313      	orrs	r3, r2
    677c:	617b      	str	r3, [r7, #20]
    677e:	e00a      	b.n	6796 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6780:	683b      	ldr	r3, [r7, #0]
    6782:	685b      	ldr	r3, [r3, #4]
    6784:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    6786:	693a      	ldr	r2, [r7, #16]
    6788:	4313      	orrs	r3, r2
    678a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    678c:	697b      	ldr	r3, [r7, #20]
    678e:	2280      	movs	r2, #128	; 0x80
    6790:	0292      	lsls	r2, r2, #10
    6792:	4313      	orrs	r3, r2
    6794:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6796:	683b      	ldr	r3, [r7, #0]
    6798:	7a1b      	ldrb	r3, [r3, #8]
    679a:	2b00      	cmp	r3, #0
    679c:	d004      	beq.n	67a8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    679e:	697b      	ldr	r3, [r7, #20]
    67a0:	2280      	movs	r2, #128	; 0x80
    67a2:	0392      	lsls	r2, r2, #14
    67a4:	4313      	orrs	r3, r2
    67a6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    67a8:	46c0      	nop			; (mov r8, r8)
    67aa:	4b13      	ldr	r3, [pc, #76]	; (67f8 <system_gclk_gen_set_config+0x110>)
    67ac:	4798      	blx	r3
    67ae:	1e03      	subs	r3, r0, #0
    67b0:	d1fb      	bne.n	67aa <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    67b2:	4b12      	ldr	r3, [pc, #72]	; (67fc <system_gclk_gen_set_config+0x114>)
    67b4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    67b6:	4a12      	ldr	r2, [pc, #72]	; (6800 <system_gclk_gen_set_config+0x118>)
    67b8:	1dfb      	adds	r3, r7, #7
    67ba:	781b      	ldrb	r3, [r3, #0]
    67bc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    67be:	46c0      	nop			; (mov r8, r8)
    67c0:	4b0d      	ldr	r3, [pc, #52]	; (67f8 <system_gclk_gen_set_config+0x110>)
    67c2:	4798      	blx	r3
    67c4:	1e03      	subs	r3, r0, #0
    67c6:	d1fb      	bne.n	67c0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    67c8:	4b0e      	ldr	r3, [pc, #56]	; (6804 <system_gclk_gen_set_config+0x11c>)
    67ca:	693a      	ldr	r2, [r7, #16]
    67cc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	4b09      	ldr	r3, [pc, #36]	; (67f8 <system_gclk_gen_set_config+0x110>)
    67d2:	4798      	blx	r3
    67d4:	1e03      	subs	r3, r0, #0
    67d6:	d1fb      	bne.n	67d0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    67d8:	4b0a      	ldr	r3, [pc, #40]	; (6804 <system_gclk_gen_set_config+0x11c>)
    67da:	4a0a      	ldr	r2, [pc, #40]	; (6804 <system_gclk_gen_set_config+0x11c>)
    67dc:	6851      	ldr	r1, [r2, #4]
    67de:	2280      	movs	r2, #128	; 0x80
    67e0:	0252      	lsls	r2, r2, #9
    67e2:	4011      	ands	r1, r2
    67e4:	697a      	ldr	r2, [r7, #20]
    67e6:	430a      	orrs	r2, r1
    67e8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    67ea:	4b07      	ldr	r3, [pc, #28]	; (6808 <system_gclk_gen_set_config+0x120>)
    67ec:	4798      	blx	r3
}
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	46bd      	mov	sp, r7
    67f2:	b006      	add	sp, #24
    67f4:	bd80      	pop	{r7, pc}
    67f6:	46c0      	nop			; (mov r8, r8)
    67f8:	00006699 	.word	0x00006699
    67fc:	00006671 	.word	0x00006671
    6800:	40000c08 	.word	0x40000c08
    6804:	40000c00 	.word	0x40000c00
    6808:	00006685 	.word	0x00006685

0000680c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    680c:	b580      	push	{r7, lr}
    680e:	b082      	sub	sp, #8
    6810:	af00      	add	r7, sp, #0
    6812:	0002      	movs	r2, r0
    6814:	1dfb      	adds	r3, r7, #7
    6816:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6818:	46c0      	nop			; (mov r8, r8)
    681a:	4b0e      	ldr	r3, [pc, #56]	; (6854 <system_gclk_gen_enable+0x48>)
    681c:	4798      	blx	r3
    681e:	1e03      	subs	r3, r0, #0
    6820:	d1fb      	bne.n	681a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6822:	4b0d      	ldr	r3, [pc, #52]	; (6858 <system_gclk_gen_enable+0x4c>)
    6824:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6826:	4a0d      	ldr	r2, [pc, #52]	; (685c <system_gclk_gen_enable+0x50>)
    6828:	1dfb      	adds	r3, r7, #7
    682a:	781b      	ldrb	r3, [r3, #0]
    682c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    682e:	46c0      	nop			; (mov r8, r8)
    6830:	4b08      	ldr	r3, [pc, #32]	; (6854 <system_gclk_gen_enable+0x48>)
    6832:	4798      	blx	r3
    6834:	1e03      	subs	r3, r0, #0
    6836:	d1fb      	bne.n	6830 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6838:	4b09      	ldr	r3, [pc, #36]	; (6860 <system_gclk_gen_enable+0x54>)
    683a:	4a09      	ldr	r2, [pc, #36]	; (6860 <system_gclk_gen_enable+0x54>)
    683c:	6852      	ldr	r2, [r2, #4]
    683e:	2180      	movs	r1, #128	; 0x80
    6840:	0249      	lsls	r1, r1, #9
    6842:	430a      	orrs	r2, r1
    6844:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6846:	4b07      	ldr	r3, [pc, #28]	; (6864 <system_gclk_gen_enable+0x58>)
    6848:	4798      	blx	r3
}
    684a:	46c0      	nop			; (mov r8, r8)
    684c:	46bd      	mov	sp, r7
    684e:	b002      	add	sp, #8
    6850:	bd80      	pop	{r7, pc}
    6852:	46c0      	nop			; (mov r8, r8)
    6854:	00006699 	.word	0x00006699
    6858:	00006671 	.word	0x00006671
    685c:	40000c04 	.word	0x40000c04
    6860:	40000c00 	.word	0x40000c00
    6864:	00006685 	.word	0x00006685

00006868 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6868:	b580      	push	{r7, lr}
    686a:	b086      	sub	sp, #24
    686c:	af00      	add	r7, sp, #0
    686e:	0002      	movs	r2, r0
    6870:	1dfb      	adds	r3, r7, #7
    6872:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6874:	46c0      	nop			; (mov r8, r8)
    6876:	4b2a      	ldr	r3, [pc, #168]	; (6920 <system_gclk_gen_get_hz+0xb8>)
    6878:	4798      	blx	r3
    687a:	1e03      	subs	r3, r0, #0
    687c:	d1fb      	bne.n	6876 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    687e:	4b29      	ldr	r3, [pc, #164]	; (6924 <system_gclk_gen_get_hz+0xbc>)
    6880:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6882:	4a29      	ldr	r2, [pc, #164]	; (6928 <system_gclk_gen_get_hz+0xc0>)
    6884:	1dfb      	adds	r3, r7, #7
    6886:	781b      	ldrb	r3, [r3, #0]
    6888:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	4b24      	ldr	r3, [pc, #144]	; (6920 <system_gclk_gen_get_hz+0xb8>)
    688e:	4798      	blx	r3
    6890:	1e03      	subs	r3, r0, #0
    6892:	d1fb      	bne.n	688c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6894:	4b25      	ldr	r3, [pc, #148]	; (692c <system_gclk_gen_get_hz+0xc4>)
    6896:	685b      	ldr	r3, [r3, #4]
    6898:	04db      	lsls	r3, r3, #19
    689a:	0edb      	lsrs	r3, r3, #27
    689c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    689e:	0018      	movs	r0, r3
    68a0:	4b23      	ldr	r3, [pc, #140]	; (6930 <system_gclk_gen_get_hz+0xc8>)
    68a2:	4798      	blx	r3
    68a4:	0003      	movs	r3, r0
    68a6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    68a8:	4a1f      	ldr	r2, [pc, #124]	; (6928 <system_gclk_gen_get_hz+0xc0>)
    68aa:	1dfb      	adds	r3, r7, #7
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    68b0:	4b1e      	ldr	r3, [pc, #120]	; (692c <system_gclk_gen_get_hz+0xc4>)
    68b2:	685b      	ldr	r3, [r3, #4]
    68b4:	02db      	lsls	r3, r3, #11
    68b6:	0fdb      	lsrs	r3, r3, #31
    68b8:	b2da      	uxtb	r2, r3
    68ba:	2313      	movs	r3, #19
    68bc:	18fb      	adds	r3, r7, r3
    68be:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    68c0:	4a1c      	ldr	r2, [pc, #112]	; (6934 <system_gclk_gen_get_hz+0xcc>)
    68c2:	1dfb      	adds	r3, r7, #7
    68c4:	781b      	ldrb	r3, [r3, #0]
    68c6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    68c8:	46c0      	nop			; (mov r8, r8)
    68ca:	4b15      	ldr	r3, [pc, #84]	; (6920 <system_gclk_gen_get_hz+0xb8>)
    68cc:	4798      	blx	r3
    68ce:	1e03      	subs	r3, r0, #0
    68d0:	d1fb      	bne.n	68ca <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    68d2:	4b16      	ldr	r3, [pc, #88]	; (692c <system_gclk_gen_get_hz+0xc4>)
    68d4:	689b      	ldr	r3, [r3, #8]
    68d6:	021b      	lsls	r3, r3, #8
    68d8:	0c1b      	lsrs	r3, r3, #16
    68da:	b29b      	uxth	r3, r3
    68dc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    68de:	4b16      	ldr	r3, [pc, #88]	; (6938 <system_gclk_gen_get_hz+0xd0>)
    68e0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    68e2:	2313      	movs	r3, #19
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d109      	bne.n	6900 <system_gclk_gen_get_hz+0x98>
    68ec:	68fb      	ldr	r3, [r7, #12]
    68ee:	2b01      	cmp	r3, #1
    68f0:	d906      	bls.n	6900 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    68f2:	4b12      	ldr	r3, [pc, #72]	; (693c <system_gclk_gen_get_hz+0xd4>)
    68f4:	68f9      	ldr	r1, [r7, #12]
    68f6:	6978      	ldr	r0, [r7, #20]
    68f8:	4798      	blx	r3
    68fa:	0003      	movs	r3, r0
    68fc:	617b      	str	r3, [r7, #20]
    68fe:	e00a      	b.n	6916 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6900:	2313      	movs	r3, #19
    6902:	18fb      	adds	r3, r7, r3
    6904:	781b      	ldrb	r3, [r3, #0]
    6906:	2b00      	cmp	r3, #0
    6908:	d005      	beq.n	6916 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    690a:	68fb      	ldr	r3, [r7, #12]
    690c:	3301      	adds	r3, #1
    690e:	697a      	ldr	r2, [r7, #20]
    6910:	40da      	lsrs	r2, r3
    6912:	0013      	movs	r3, r2
    6914:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6916:	697b      	ldr	r3, [r7, #20]
}
    6918:	0018      	movs	r0, r3
    691a:	46bd      	mov	sp, r7
    691c:	b006      	add	sp, #24
    691e:	bd80      	pop	{r7, pc}
    6920:	00006699 	.word	0x00006699
    6924:	00006671 	.word	0x00006671
    6928:	40000c04 	.word	0x40000c04
    692c:	40000c00 	.word	0x40000c00
    6930:	00005f15 	.word	0x00005f15
    6934:	40000c08 	.word	0x40000c08
    6938:	00006685 	.word	0x00006685
    693c:	0000baa5 	.word	0x0000baa5

00006940 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6940:	b580      	push	{r7, lr}
    6942:	b084      	sub	sp, #16
    6944:	af00      	add	r7, sp, #0
    6946:	0002      	movs	r2, r0
    6948:	6039      	str	r1, [r7, #0]
    694a:	1dfb      	adds	r3, r7, #7
    694c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    694e:	1dfb      	adds	r3, r7, #7
    6950:	781b      	ldrb	r3, [r3, #0]
    6952:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6954:	683b      	ldr	r3, [r7, #0]
    6956:	781b      	ldrb	r3, [r3, #0]
    6958:	021b      	lsls	r3, r3, #8
    695a:	001a      	movs	r2, r3
    695c:	68fb      	ldr	r3, [r7, #12]
    695e:	4313      	orrs	r3, r2
    6960:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6962:	1dfb      	adds	r3, r7, #7
    6964:	781b      	ldrb	r3, [r3, #0]
    6966:	0018      	movs	r0, r3
    6968:	4b04      	ldr	r3, [pc, #16]	; (697c <system_gclk_chan_set_config+0x3c>)
    696a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    696c:	4b04      	ldr	r3, [pc, #16]	; (6980 <system_gclk_chan_set_config+0x40>)
    696e:	68fa      	ldr	r2, [r7, #12]
    6970:	b292      	uxth	r2, r2
    6972:	805a      	strh	r2, [r3, #2]
}
    6974:	46c0      	nop			; (mov r8, r8)
    6976:	46bd      	mov	sp, r7
    6978:	b004      	add	sp, #16
    697a:	bd80      	pop	{r7, pc}
    697c:	000069cd 	.word	0x000069cd
    6980:	40000c00 	.word	0x40000c00

00006984 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6984:	b580      	push	{r7, lr}
    6986:	b082      	sub	sp, #8
    6988:	af00      	add	r7, sp, #0
    698a:	0002      	movs	r2, r0
    698c:	1dfb      	adds	r3, r7, #7
    698e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6990:	4b0a      	ldr	r3, [pc, #40]	; (69bc <system_gclk_chan_enable+0x38>)
    6992:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6994:	4a0a      	ldr	r2, [pc, #40]	; (69c0 <system_gclk_chan_enable+0x3c>)
    6996:	1dfb      	adds	r3, r7, #7
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    699c:	4909      	ldr	r1, [pc, #36]	; (69c4 <system_gclk_chan_enable+0x40>)
    699e:	4b09      	ldr	r3, [pc, #36]	; (69c4 <system_gclk_chan_enable+0x40>)
    69a0:	885b      	ldrh	r3, [r3, #2]
    69a2:	b29b      	uxth	r3, r3
    69a4:	2280      	movs	r2, #128	; 0x80
    69a6:	01d2      	lsls	r2, r2, #7
    69a8:	4313      	orrs	r3, r2
    69aa:	b29b      	uxth	r3, r3
    69ac:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    69ae:	4b06      	ldr	r3, [pc, #24]	; (69c8 <system_gclk_chan_enable+0x44>)
    69b0:	4798      	blx	r3
}
    69b2:	46c0      	nop			; (mov r8, r8)
    69b4:	46bd      	mov	sp, r7
    69b6:	b002      	add	sp, #8
    69b8:	bd80      	pop	{r7, pc}
    69ba:	46c0      	nop			; (mov r8, r8)
    69bc:	00006671 	.word	0x00006671
    69c0:	40000c02 	.word	0x40000c02
    69c4:	40000c00 	.word	0x40000c00
    69c8:	00006685 	.word	0x00006685

000069cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    69cc:	b580      	push	{r7, lr}
    69ce:	b084      	sub	sp, #16
    69d0:	af00      	add	r7, sp, #0
    69d2:	0002      	movs	r2, r0
    69d4:	1dfb      	adds	r3, r7, #7
    69d6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    69d8:	4b1c      	ldr	r3, [pc, #112]	; (6a4c <system_gclk_chan_disable+0x80>)
    69da:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    69dc:	4a1c      	ldr	r2, [pc, #112]	; (6a50 <system_gclk_chan_disable+0x84>)
    69de:	1dfb      	adds	r3, r7, #7
    69e0:	781b      	ldrb	r3, [r3, #0]
    69e2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    69e4:	4b1b      	ldr	r3, [pc, #108]	; (6a54 <system_gclk_chan_disable+0x88>)
    69e6:	885b      	ldrh	r3, [r3, #2]
    69e8:	051b      	lsls	r3, r3, #20
    69ea:	0f1b      	lsrs	r3, r3, #28
    69ec:	b2db      	uxtb	r3, r3
    69ee:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    69f0:	4a18      	ldr	r2, [pc, #96]	; (6a54 <system_gclk_chan_disable+0x88>)
    69f2:	8853      	ldrh	r3, [r2, #2]
    69f4:	4918      	ldr	r1, [pc, #96]	; (6a58 <system_gclk_chan_disable+0x8c>)
    69f6:	400b      	ands	r3, r1
    69f8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    69fa:	4a16      	ldr	r2, [pc, #88]	; (6a54 <system_gclk_chan_disable+0x88>)
    69fc:	4b15      	ldr	r3, [pc, #84]	; (6a54 <system_gclk_chan_disable+0x88>)
    69fe:	885b      	ldrh	r3, [r3, #2]
    6a00:	b29b      	uxth	r3, r3
    6a02:	4916      	ldr	r1, [pc, #88]	; (6a5c <system_gclk_chan_disable+0x90>)
    6a04:	400b      	ands	r3, r1
    6a06:	b29b      	uxth	r3, r3
    6a08:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6a0a:	46c0      	nop			; (mov r8, r8)
    6a0c:	4b11      	ldr	r3, [pc, #68]	; (6a54 <system_gclk_chan_disable+0x88>)
    6a0e:	885b      	ldrh	r3, [r3, #2]
    6a10:	b29b      	uxth	r3, r3
    6a12:	001a      	movs	r2, r3
    6a14:	2380      	movs	r3, #128	; 0x80
    6a16:	01db      	lsls	r3, r3, #7
    6a18:	4013      	ands	r3, r2
    6a1a:	d1f7      	bne.n	6a0c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6a1c:	4a0d      	ldr	r2, [pc, #52]	; (6a54 <system_gclk_chan_disable+0x88>)
    6a1e:	68fb      	ldr	r3, [r7, #12]
    6a20:	b2db      	uxtb	r3, r3
    6a22:	1c19      	adds	r1, r3, #0
    6a24:	230f      	movs	r3, #15
    6a26:	400b      	ands	r3, r1
    6a28:	b2d9      	uxtb	r1, r3
    6a2a:	8853      	ldrh	r3, [r2, #2]
    6a2c:	1c08      	adds	r0, r1, #0
    6a2e:	210f      	movs	r1, #15
    6a30:	4001      	ands	r1, r0
    6a32:	0208      	lsls	r0, r1, #8
    6a34:	4908      	ldr	r1, [pc, #32]	; (6a58 <system_gclk_chan_disable+0x8c>)
    6a36:	400b      	ands	r3, r1
    6a38:	1c19      	adds	r1, r3, #0
    6a3a:	1c03      	adds	r3, r0, #0
    6a3c:	430b      	orrs	r3, r1
    6a3e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6a40:	4b07      	ldr	r3, [pc, #28]	; (6a60 <system_gclk_chan_disable+0x94>)
    6a42:	4798      	blx	r3
}
    6a44:	46c0      	nop			; (mov r8, r8)
    6a46:	46bd      	mov	sp, r7
    6a48:	b004      	add	sp, #16
    6a4a:	bd80      	pop	{r7, pc}
    6a4c:	00006671 	.word	0x00006671
    6a50:	40000c02 	.word	0x40000c02
    6a54:	40000c00 	.word	0x40000c00
    6a58:	fffff0ff 	.word	0xfffff0ff
    6a5c:	ffffbfff 	.word	0xffffbfff
    6a60:	00006685 	.word	0x00006685

00006a64 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a64:	b580      	push	{r7, lr}
    6a66:	b084      	sub	sp, #16
    6a68:	af00      	add	r7, sp, #0
    6a6a:	0002      	movs	r2, r0
    6a6c:	1dfb      	adds	r3, r7, #7
    6a6e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6a70:	4b0d      	ldr	r3, [pc, #52]	; (6aa8 <system_gclk_chan_get_hz+0x44>)
    6a72:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6a74:	4a0d      	ldr	r2, [pc, #52]	; (6aac <system_gclk_chan_get_hz+0x48>)
    6a76:	1dfb      	adds	r3, r7, #7
    6a78:	781b      	ldrb	r3, [r3, #0]
    6a7a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6a7c:	4b0c      	ldr	r3, [pc, #48]	; (6ab0 <system_gclk_chan_get_hz+0x4c>)
    6a7e:	885b      	ldrh	r3, [r3, #2]
    6a80:	051b      	lsls	r3, r3, #20
    6a82:	0f1b      	lsrs	r3, r3, #28
    6a84:	b2da      	uxtb	r2, r3
    6a86:	230f      	movs	r3, #15
    6a88:	18fb      	adds	r3, r7, r3
    6a8a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6a8c:	4b09      	ldr	r3, [pc, #36]	; (6ab4 <system_gclk_chan_get_hz+0x50>)
    6a8e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6a90:	230f      	movs	r3, #15
    6a92:	18fb      	adds	r3, r7, r3
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	0018      	movs	r0, r3
    6a98:	4b07      	ldr	r3, [pc, #28]	; (6ab8 <system_gclk_chan_get_hz+0x54>)
    6a9a:	4798      	blx	r3
    6a9c:	0003      	movs	r3, r0
}
    6a9e:	0018      	movs	r0, r3
    6aa0:	46bd      	mov	sp, r7
    6aa2:	b004      	add	sp, #16
    6aa4:	bd80      	pop	{r7, pc}
    6aa6:	46c0      	nop			; (mov r8, r8)
    6aa8:	00006671 	.word	0x00006671
    6aac:	40000c02 	.word	0x40000c02
    6ab0:	40000c00 	.word	0x40000c00
    6ab4:	00006685 	.word	0x00006685
    6ab8:	00006869 	.word	0x00006869

00006abc <system_pinmux_get_group_from_gpio_pin>:
{
    6abc:	b580      	push	{r7, lr}
    6abe:	b084      	sub	sp, #16
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	0002      	movs	r2, r0
    6ac4:	1dfb      	adds	r3, r7, #7
    6ac6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6ac8:	230f      	movs	r3, #15
    6aca:	18fb      	adds	r3, r7, r3
    6acc:	1dfa      	adds	r2, r7, #7
    6ace:	7812      	ldrb	r2, [r2, #0]
    6ad0:	09d2      	lsrs	r2, r2, #7
    6ad2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6ad4:	230e      	movs	r3, #14
    6ad6:	18fb      	adds	r3, r7, r3
    6ad8:	1dfa      	adds	r2, r7, #7
    6ada:	7812      	ldrb	r2, [r2, #0]
    6adc:	0952      	lsrs	r2, r2, #5
    6ade:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6ae0:	4b0d      	ldr	r3, [pc, #52]	; (6b18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6ae2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6ae4:	230f      	movs	r3, #15
    6ae6:	18fb      	adds	r3, r7, r3
    6ae8:	781b      	ldrb	r3, [r3, #0]
    6aea:	2b00      	cmp	r3, #0
    6aec:	d10f      	bne.n	6b0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6aee:	230f      	movs	r3, #15
    6af0:	18fb      	adds	r3, r7, r3
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	009b      	lsls	r3, r3, #2
    6af6:	2210      	movs	r2, #16
    6af8:	4694      	mov	ip, r2
    6afa:	44bc      	add	ip, r7
    6afc:	4463      	add	r3, ip
    6afe:	3b08      	subs	r3, #8
    6b00:	681a      	ldr	r2, [r3, #0]
    6b02:	230e      	movs	r3, #14
    6b04:	18fb      	adds	r3, r7, r3
    6b06:	781b      	ldrb	r3, [r3, #0]
    6b08:	01db      	lsls	r3, r3, #7
    6b0a:	18d3      	adds	r3, r2, r3
    6b0c:	e000      	b.n	6b10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6b0e:	2300      	movs	r3, #0
}
    6b10:	0018      	movs	r0, r3
    6b12:	46bd      	mov	sp, r7
    6b14:	b004      	add	sp, #16
    6b16:	bd80      	pop	{r7, pc}
    6b18:	41004400 	.word	0x41004400

00006b1c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6b1c:	b580      	push	{r7, lr}
    6b1e:	b088      	sub	sp, #32
    6b20:	af00      	add	r7, sp, #0
    6b22:	60f8      	str	r0, [r7, #12]
    6b24:	60b9      	str	r1, [r7, #8]
    6b26:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6b28:	2300      	movs	r3, #0
    6b2a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	78db      	ldrb	r3, [r3, #3]
    6b30:	2201      	movs	r2, #1
    6b32:	4053      	eors	r3, r2
    6b34:	b2db      	uxtb	r3, r3
    6b36:	2b00      	cmp	r3, #0
    6b38:	d035      	beq.n	6ba6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6b3a:	687b      	ldr	r3, [r7, #4]
    6b3c:	781b      	ldrb	r3, [r3, #0]
    6b3e:	2b80      	cmp	r3, #128	; 0x80
    6b40:	d00b      	beq.n	6b5a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6b42:	69fb      	ldr	r3, [r7, #28]
    6b44:	2280      	movs	r2, #128	; 0x80
    6b46:	0252      	lsls	r2, r2, #9
    6b48:	4313      	orrs	r3, r2
    6b4a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	781b      	ldrb	r3, [r3, #0]
    6b50:	061b      	lsls	r3, r3, #24
    6b52:	001a      	movs	r2, r3
    6b54:	69fb      	ldr	r3, [r7, #28]
    6b56:	4313      	orrs	r3, r2
    6b58:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	785b      	ldrb	r3, [r3, #1]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d003      	beq.n	6b6a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6b62:	687b      	ldr	r3, [r7, #4]
    6b64:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6b66:	2b02      	cmp	r3, #2
    6b68:	d110      	bne.n	6b8c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6b6a:	69fb      	ldr	r3, [r7, #28]
    6b6c:	2280      	movs	r2, #128	; 0x80
    6b6e:	0292      	lsls	r2, r2, #10
    6b70:	4313      	orrs	r3, r2
    6b72:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6b74:	687b      	ldr	r3, [r7, #4]
    6b76:	789b      	ldrb	r3, [r3, #2]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d004      	beq.n	6b86 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6b7c:	69fb      	ldr	r3, [r7, #28]
    6b7e:	2280      	movs	r2, #128	; 0x80
    6b80:	02d2      	lsls	r2, r2, #11
    6b82:	4313      	orrs	r3, r2
    6b84:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6b86:	68fb      	ldr	r3, [r7, #12]
    6b88:	68ba      	ldr	r2, [r7, #8]
    6b8a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b8c:	687b      	ldr	r3, [r7, #4]
    6b8e:	785b      	ldrb	r3, [r3, #1]
    6b90:	2b01      	cmp	r3, #1
    6b92:	d003      	beq.n	6b9c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b98:	2b02      	cmp	r3, #2
    6b9a:	d107      	bne.n	6bac <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6b9c:	69fb      	ldr	r3, [r7, #28]
    6b9e:	4a22      	ldr	r2, [pc, #136]	; (6c28 <_system_pinmux_config+0x10c>)
    6ba0:	4013      	ands	r3, r2
    6ba2:	61fb      	str	r3, [r7, #28]
    6ba4:	e002      	b.n	6bac <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6ba6:	68fb      	ldr	r3, [r7, #12]
    6ba8:	68ba      	ldr	r2, [r7, #8]
    6baa:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6bac:	68bb      	ldr	r3, [r7, #8]
    6bae:	041b      	lsls	r3, r3, #16
    6bb0:	0c1b      	lsrs	r3, r3, #16
    6bb2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6bb4:	68bb      	ldr	r3, [r7, #8]
    6bb6:	0c1b      	lsrs	r3, r3, #16
    6bb8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6bba:	69ba      	ldr	r2, [r7, #24]
    6bbc:	69fb      	ldr	r3, [r7, #28]
    6bbe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6bc0:	22a0      	movs	r2, #160	; 0xa0
    6bc2:	05d2      	lsls	r2, r2, #23
    6bc4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6bc6:	68fb      	ldr	r3, [r7, #12]
    6bc8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6bca:	697a      	ldr	r2, [r7, #20]
    6bcc:	69fb      	ldr	r3, [r7, #28]
    6bce:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6bd0:	22d0      	movs	r2, #208	; 0xd0
    6bd2:	0612      	lsls	r2, r2, #24
    6bd4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6bd6:	68fb      	ldr	r3, [r7, #12]
    6bd8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	78db      	ldrb	r3, [r3, #3]
    6bde:	2201      	movs	r2, #1
    6be0:	4053      	eors	r3, r2
    6be2:	b2db      	uxtb	r3, r3
    6be4:	2b00      	cmp	r3, #0
    6be6:	d01a      	beq.n	6c1e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6be8:	69fa      	ldr	r2, [r7, #28]
    6bea:	2380      	movs	r3, #128	; 0x80
    6bec:	02db      	lsls	r3, r3, #11
    6bee:	4013      	ands	r3, r2
    6bf0:	d00a      	beq.n	6c08 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	789b      	ldrb	r3, [r3, #2]
    6bf6:	2b01      	cmp	r3, #1
    6bf8:	d103      	bne.n	6c02 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6bfa:	68fb      	ldr	r3, [r7, #12]
    6bfc:	68ba      	ldr	r2, [r7, #8]
    6bfe:	619a      	str	r2, [r3, #24]
    6c00:	e002      	b.n	6c08 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6c02:	68fb      	ldr	r3, [r7, #12]
    6c04:	68ba      	ldr	r2, [r7, #8]
    6c06:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	785b      	ldrb	r3, [r3, #1]
    6c0c:	2b01      	cmp	r3, #1
    6c0e:	d003      	beq.n	6c18 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6c14:	2b02      	cmp	r3, #2
    6c16:	d102      	bne.n	6c1e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6c18:	68fb      	ldr	r3, [r7, #12]
    6c1a:	68ba      	ldr	r2, [r7, #8]
    6c1c:	609a      	str	r2, [r3, #8]
		}
	}
}
    6c1e:	46c0      	nop			; (mov r8, r8)
    6c20:	46bd      	mov	sp, r7
    6c22:	b008      	add	sp, #32
    6c24:	bd80      	pop	{r7, pc}
    6c26:	46c0      	nop			; (mov r8, r8)
    6c28:	fffbffff 	.word	0xfffbffff

00006c2c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6c2c:	b580      	push	{r7, lr}
    6c2e:	b084      	sub	sp, #16
    6c30:	af00      	add	r7, sp, #0
    6c32:	0002      	movs	r2, r0
    6c34:	6039      	str	r1, [r7, #0]
    6c36:	1dfb      	adds	r3, r7, #7
    6c38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6c3a:	1dfb      	adds	r3, r7, #7
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	0018      	movs	r0, r3
    6c40:	4b0a      	ldr	r3, [pc, #40]	; (6c6c <system_pinmux_pin_set_config+0x40>)
    6c42:	4798      	blx	r3
    6c44:	0003      	movs	r3, r0
    6c46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6c48:	1dfb      	adds	r3, r7, #7
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	221f      	movs	r2, #31
    6c4e:	4013      	ands	r3, r2
    6c50:	2201      	movs	r2, #1
    6c52:	409a      	lsls	r2, r3
    6c54:	0013      	movs	r3, r2
    6c56:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6c58:	683a      	ldr	r2, [r7, #0]
    6c5a:	68b9      	ldr	r1, [r7, #8]
    6c5c:	68fb      	ldr	r3, [r7, #12]
    6c5e:	0018      	movs	r0, r3
    6c60:	4b03      	ldr	r3, [pc, #12]	; (6c70 <system_pinmux_pin_set_config+0x44>)
    6c62:	4798      	blx	r3
}
    6c64:	46c0      	nop			; (mov r8, r8)
    6c66:	46bd      	mov	sp, r7
    6c68:	b004      	add	sp, #16
    6c6a:	bd80      	pop	{r7, pc}
    6c6c:	00006abd 	.word	0x00006abd
    6c70:	00006b1d 	.word	0x00006b1d

00006c74 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6c74:	b580      	push	{r7, lr}
    6c76:	af00      	add	r7, sp, #0
	return;
    6c78:	46c0      	nop			; (mov r8, r8)
}
    6c7a:	46bd      	mov	sp, r7
    6c7c:	bd80      	pop	{r7, pc}
	...

00006c80 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6c80:	b580      	push	{r7, lr}
    6c82:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6c84:	4b06      	ldr	r3, [pc, #24]	; (6ca0 <system_init+0x20>)
    6c86:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6c88:	4b06      	ldr	r3, [pc, #24]	; (6ca4 <system_init+0x24>)
    6c8a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6c8c:	4b06      	ldr	r3, [pc, #24]	; (6ca8 <system_init+0x28>)
    6c8e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6c90:	4b06      	ldr	r3, [pc, #24]	; (6cac <system_init+0x2c>)
    6c92:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6c94:	4b06      	ldr	r3, [pc, #24]	; (6cb0 <system_init+0x30>)
    6c96:	4798      	blx	r3
}
    6c98:	46c0      	nop			; (mov r8, r8)
    6c9a:	46bd      	mov	sp, r7
    6c9c:	bd80      	pop	{r7, pc}
    6c9e:	46c0      	nop			; (mov r8, r8)
    6ca0:	000063a5 	.word	0x000063a5
    6ca4:	00000445 	.word	0x00000445
    6ca8:	00006c75 	.word	0x00006c75
    6cac:	00006c75 	.word	0x00006c75
    6cb0:	00006c75 	.word	0x00006c75

00006cb4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6cb4:	b580      	push	{r7, lr}
    6cb6:	b082      	sub	sp, #8
    6cb8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6cba:	4b2f      	ldr	r3, [pc, #188]	; (6d78 <Reset_Handler+0xc4>)
    6cbc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6cbe:	4b2f      	ldr	r3, [pc, #188]	; (6d7c <Reset_Handler+0xc8>)
    6cc0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6cc2:	687a      	ldr	r2, [r7, #4]
    6cc4:	683b      	ldr	r3, [r7, #0]
    6cc6:	429a      	cmp	r2, r3
    6cc8:	d00c      	beq.n	6ce4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6cca:	e007      	b.n	6cdc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6ccc:	683b      	ldr	r3, [r7, #0]
    6cce:	1d1a      	adds	r2, r3, #4
    6cd0:	603a      	str	r2, [r7, #0]
    6cd2:	687a      	ldr	r2, [r7, #4]
    6cd4:	1d11      	adds	r1, r2, #4
    6cd6:	6079      	str	r1, [r7, #4]
    6cd8:	6812      	ldr	r2, [r2, #0]
    6cda:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6cdc:	683a      	ldr	r2, [r7, #0]
    6cde:	4b28      	ldr	r3, [pc, #160]	; (6d80 <Reset_Handler+0xcc>)
    6ce0:	429a      	cmp	r2, r3
    6ce2:	d3f3      	bcc.n	6ccc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6ce4:	4b27      	ldr	r3, [pc, #156]	; (6d84 <Reset_Handler+0xd0>)
    6ce6:	603b      	str	r3, [r7, #0]
    6ce8:	e004      	b.n	6cf4 <Reset_Handler+0x40>
                *pDest++ = 0;
    6cea:	683b      	ldr	r3, [r7, #0]
    6cec:	1d1a      	adds	r2, r3, #4
    6cee:	603a      	str	r2, [r7, #0]
    6cf0:	2200      	movs	r2, #0
    6cf2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6cf4:	683a      	ldr	r2, [r7, #0]
    6cf6:	4b24      	ldr	r3, [pc, #144]	; (6d88 <Reset_Handler+0xd4>)
    6cf8:	429a      	cmp	r2, r3
    6cfa:	d3f6      	bcc.n	6cea <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6cfc:	4b23      	ldr	r3, [pc, #140]	; (6d8c <Reset_Handler+0xd8>)
    6cfe:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6d00:	4b23      	ldr	r3, [pc, #140]	; (6d90 <Reset_Handler+0xdc>)
    6d02:	687a      	ldr	r2, [r7, #4]
    6d04:	21ff      	movs	r1, #255	; 0xff
    6d06:	438a      	bics	r2, r1
    6d08:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6d0a:	4a22      	ldr	r2, [pc, #136]	; (6d94 <Reset_Handler+0xe0>)
    6d0c:	2390      	movs	r3, #144	; 0x90
    6d0e:	005b      	lsls	r3, r3, #1
    6d10:	2102      	movs	r1, #2
    6d12:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6d14:	4a20      	ldr	r2, [pc, #128]	; (6d98 <Reset_Handler+0xe4>)
    6d16:	78d3      	ldrb	r3, [r2, #3]
    6d18:	2103      	movs	r1, #3
    6d1a:	438b      	bics	r3, r1
    6d1c:	1c19      	adds	r1, r3, #0
    6d1e:	2302      	movs	r3, #2
    6d20:	430b      	orrs	r3, r1
    6d22:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6d24:	4a1c      	ldr	r2, [pc, #112]	; (6d98 <Reset_Handler+0xe4>)
    6d26:	78d3      	ldrb	r3, [r2, #3]
    6d28:	210c      	movs	r1, #12
    6d2a:	438b      	bics	r3, r1
    6d2c:	1c19      	adds	r1, r3, #0
    6d2e:	2308      	movs	r3, #8
    6d30:	430b      	orrs	r3, r1
    6d32:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6d34:	4a19      	ldr	r2, [pc, #100]	; (6d9c <Reset_Handler+0xe8>)
    6d36:	7b93      	ldrb	r3, [r2, #14]
    6d38:	2130      	movs	r1, #48	; 0x30
    6d3a:	438b      	bics	r3, r1
    6d3c:	1c19      	adds	r1, r3, #0
    6d3e:	2320      	movs	r3, #32
    6d40:	430b      	orrs	r3, r1
    6d42:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6d44:	4a15      	ldr	r2, [pc, #84]	; (6d9c <Reset_Handler+0xe8>)
    6d46:	7b93      	ldrb	r3, [r2, #14]
    6d48:	210c      	movs	r1, #12
    6d4a:	438b      	bics	r3, r1
    6d4c:	1c19      	adds	r1, r3, #0
    6d4e:	2308      	movs	r3, #8
    6d50:	430b      	orrs	r3, r1
    6d52:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6d54:	4a11      	ldr	r2, [pc, #68]	; (6d9c <Reset_Handler+0xe8>)
    6d56:	7b93      	ldrb	r3, [r2, #14]
    6d58:	2103      	movs	r1, #3
    6d5a:	438b      	bics	r3, r1
    6d5c:	1c19      	adds	r1, r3, #0
    6d5e:	2302      	movs	r3, #2
    6d60:	430b      	orrs	r3, r1
    6d62:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6d64:	4a0e      	ldr	r2, [pc, #56]	; (6da0 <Reset_Handler+0xec>)
    6d66:	6853      	ldr	r3, [r2, #4]
    6d68:	2180      	movs	r1, #128	; 0x80
    6d6a:	430b      	orrs	r3, r1
    6d6c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6d6e:	4b0d      	ldr	r3, [pc, #52]	; (6da4 <Reset_Handler+0xf0>)
    6d70:	4798      	blx	r3

        /* Branch to main function */
        main();
    6d72:	4b0d      	ldr	r3, [pc, #52]	; (6da8 <Reset_Handler+0xf4>)
    6d74:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6d76:	e7fe      	b.n	6d76 <Reset_Handler+0xc2>
    6d78:	0000dbf8 	.word	0x0000dbf8
    6d7c:	20000000 	.word	0x20000000
    6d80:	20000094 	.word	0x20000094
    6d84:	20000094 	.word	0x20000094
    6d88:	20000c94 	.word	0x20000c94
    6d8c:	00000000 	.word	0x00000000
    6d90:	e000ed00 	.word	0xe000ed00
    6d94:	41007000 	.word	0x41007000
    6d98:	41005000 	.word	0x41005000
    6d9c:	41004800 	.word	0x41004800
    6da0:	41004000 	.word	0x41004000
    6da4:	0000bde5 	.word	0x0000bde5
    6da8:	0000ae31 	.word	0x0000ae31

00006dac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6dac:	b580      	push	{r7, lr}
    6dae:	af00      	add	r7, sp, #0
        while (1) {
    6db0:	e7fe      	b.n	6db0 <Dummy_Handler+0x4>
	...

00006db4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6db4:	b580      	push	{r7, lr}
    6db6:	b086      	sub	sp, #24
    6db8:	af00      	add	r7, sp, #0
    6dba:	60f8      	str	r0, [r7, #12]
    6dbc:	60b9      	str	r1, [r7, #8]
    6dbe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6dc0:	2300      	movs	r3, #0
    6dc2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6dc4:	68fb      	ldr	r3, [r7, #12]
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d012      	beq.n	6df0 <_read+0x3c>
		return -1;
    6dca:	2301      	movs	r3, #1
    6dcc:	425b      	negs	r3, r3
    6dce:	e013      	b.n	6df8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6dd0:	4b0b      	ldr	r3, [pc, #44]	; (6e00 <_read+0x4c>)
    6dd2:	681a      	ldr	r2, [r3, #0]
    6dd4:	4b0b      	ldr	r3, [pc, #44]	; (6e04 <_read+0x50>)
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	68b9      	ldr	r1, [r7, #8]
    6dda:	0018      	movs	r0, r3
    6ddc:	4790      	blx	r2
		ptr++;
    6dde:	68bb      	ldr	r3, [r7, #8]
    6de0:	3301      	adds	r3, #1
    6de2:	60bb      	str	r3, [r7, #8]
		nChars++;
    6de4:	697b      	ldr	r3, [r7, #20]
    6de6:	3301      	adds	r3, #1
    6de8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	3b01      	subs	r3, #1
    6dee:	607b      	str	r3, [r7, #4]
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	2b00      	cmp	r3, #0
    6df4:	dcec      	bgt.n	6dd0 <_read+0x1c>
	}
	return nChars;
    6df6:	697b      	ldr	r3, [r7, #20]
}
    6df8:	0018      	movs	r0, r3
    6dfa:	46bd      	mov	sp, r7
    6dfc:	b006      	add	sp, #24
    6dfe:	bd80      	pop	{r7, pc}
    6e00:	200009f0 	.word	0x200009f0
    6e04:	200009f8 	.word	0x200009f8

00006e08 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	b086      	sub	sp, #24
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	60f8      	str	r0, [r7, #12]
    6e10:	60b9      	str	r1, [r7, #8]
    6e12:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6e14:	2300      	movs	r3, #0
    6e16:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6e18:	68fb      	ldr	r3, [r7, #12]
    6e1a:	2b01      	cmp	r3, #1
    6e1c:	d01d      	beq.n	6e5a <_write+0x52>
    6e1e:	68fb      	ldr	r3, [r7, #12]
    6e20:	2b02      	cmp	r3, #2
    6e22:	d01a      	beq.n	6e5a <_write+0x52>
    6e24:	68fb      	ldr	r3, [r7, #12]
    6e26:	2b03      	cmp	r3, #3
    6e28:	d017      	beq.n	6e5a <_write+0x52>
		return -1;
    6e2a:	2301      	movs	r3, #1
    6e2c:	425b      	negs	r3, r3
    6e2e:	e018      	b.n	6e62 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6e30:	4b0e      	ldr	r3, [pc, #56]	; (6e6c <_write+0x64>)
    6e32:	681a      	ldr	r2, [r3, #0]
    6e34:	4b0e      	ldr	r3, [pc, #56]	; (6e70 <_write+0x68>)
    6e36:	6818      	ldr	r0, [r3, #0]
    6e38:	68bb      	ldr	r3, [r7, #8]
    6e3a:	1c59      	adds	r1, r3, #1
    6e3c:	60b9      	str	r1, [r7, #8]
    6e3e:	781b      	ldrb	r3, [r3, #0]
    6e40:	0019      	movs	r1, r3
    6e42:	4790      	blx	r2
    6e44:	1e03      	subs	r3, r0, #0
    6e46:	da02      	bge.n	6e4e <_write+0x46>
			return -1;
    6e48:	2301      	movs	r3, #1
    6e4a:	425b      	negs	r3, r3
    6e4c:	e009      	b.n	6e62 <_write+0x5a>
		}
		++nChars;
    6e4e:	697b      	ldr	r3, [r7, #20]
    6e50:	3301      	adds	r3, #1
    6e52:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	3b01      	subs	r3, #1
    6e58:	607b      	str	r3, [r7, #4]
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d1e7      	bne.n	6e30 <_write+0x28>
	}
	return nChars;
    6e60:	697b      	ldr	r3, [r7, #20]
}
    6e62:	0018      	movs	r0, r3
    6e64:	46bd      	mov	sp, r7
    6e66:	b006      	add	sp, #24
    6e68:	bd80      	pop	{r7, pc}
    6e6a:	46c0      	nop			; (mov r8, r8)
    6e6c:	200009f4 	.word	0x200009f4
    6e70:	200009f8 	.word	0x200009f8

00006e74 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6e74:	b580      	push	{r7, lr}
    6e76:	b084      	sub	sp, #16
    6e78:	af00      	add	r7, sp, #0
    6e7a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6e7c:	4b0a      	ldr	r3, [pc, #40]	; (6ea8 <_sbrk+0x34>)
    6e7e:	681b      	ldr	r3, [r3, #0]
    6e80:	2b00      	cmp	r3, #0
    6e82:	d102      	bne.n	6e8a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6e84:	4b08      	ldr	r3, [pc, #32]	; (6ea8 <_sbrk+0x34>)
    6e86:	4a09      	ldr	r2, [pc, #36]	; (6eac <_sbrk+0x38>)
    6e88:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6e8a:	4b07      	ldr	r3, [pc, #28]	; (6ea8 <_sbrk+0x34>)
    6e8c:	681b      	ldr	r3, [r3, #0]
    6e8e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6e90:	4b05      	ldr	r3, [pc, #20]	; (6ea8 <_sbrk+0x34>)
    6e92:	681a      	ldr	r2, [r3, #0]
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	18d2      	adds	r2, r2, r3
    6e98:	4b03      	ldr	r3, [pc, #12]	; (6ea8 <_sbrk+0x34>)
    6e9a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6e9c:	68fb      	ldr	r3, [r7, #12]
}
    6e9e:	0018      	movs	r0, r3
    6ea0:	46bd      	mov	sp, r7
    6ea2:	b004      	add	sp, #16
    6ea4:	bd80      	pop	{r7, pc}
    6ea6:	46c0      	nop			; (mov r8, r8)
    6ea8:	20000178 	.word	0x20000178
    6eac:	20002c98 	.word	0x20002c98

00006eb0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b082      	sub	sp, #8
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
	return -1;
    6eb8:	2301      	movs	r3, #1
    6eba:	425b      	negs	r3, r3
}
    6ebc:	0018      	movs	r0, r3
    6ebe:	46bd      	mov	sp, r7
    6ec0:	b002      	add	sp, #8
    6ec2:	bd80      	pop	{r7, pc}

00006ec4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6ec4:	b580      	push	{r7, lr}
    6ec6:	b082      	sub	sp, #8
    6ec8:	af00      	add	r7, sp, #0
    6eca:	6078      	str	r0, [r7, #4]
    6ecc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6ece:	683b      	ldr	r3, [r7, #0]
    6ed0:	2280      	movs	r2, #128	; 0x80
    6ed2:	0192      	lsls	r2, r2, #6
    6ed4:	605a      	str	r2, [r3, #4]

	return 0;
    6ed6:	2300      	movs	r3, #0
}
    6ed8:	0018      	movs	r0, r3
    6eda:	46bd      	mov	sp, r7
    6edc:	b002      	add	sp, #8
    6ede:	bd80      	pop	{r7, pc}

00006ee0 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    6ee0:	b580      	push	{r7, lr}
    6ee2:	b084      	sub	sp, #16
    6ee4:	af00      	add	r7, sp, #0
    6ee6:	60f8      	str	r0, [r7, #12]
    6ee8:	60b9      	str	r1, [r7, #8]
    6eea:	607a      	str	r2, [r7, #4]
	return 0;
    6eec:	2300      	movs	r3, #0
}
    6eee:	0018      	movs	r0, r3
    6ef0:	46bd      	mov	sp, r7
    6ef2:	b004      	add	sp, #16
    6ef4:	bd80      	pop	{r7, pc}

00006ef6 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    6ef6:	b580      	push	{r7, lr}
    6ef8:	b082      	sub	sp, #8
    6efa:	af00      	add	r7, sp, #0
    6efc:	6078      	str	r0, [r7, #4]
	time->second = 0;
    6efe:	687b      	ldr	r3, [r7, #4]
    6f00:	2200      	movs	r2, #0
    6f02:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    6f04:	687b      	ldr	r3, [r7, #4]
    6f06:	2200      	movs	r2, #0
    6f08:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    6f0a:	687b      	ldr	r3, [r7, #4]
    6f0c:	2200      	movs	r2, #0
    6f0e:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	2200      	movs	r2, #0
    6f14:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    6f16:	687b      	ldr	r3, [r7, #4]
    6f18:	2201      	movs	r2, #1
    6f1a:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    6f1c:	687b      	ldr	r3, [r7, #4]
    6f1e:	2201      	movs	r2, #1
    6f20:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    6f22:	687b      	ldr	r3, [r7, #4]
    6f24:	22fa      	movs	r2, #250	; 0xfa
    6f26:	00d2      	lsls	r2, r2, #3
    6f28:	80da      	strh	r2, [r3, #6]
}
    6f2a:	46c0      	nop			; (mov r8, r8)
    6f2c:	46bd      	mov	sp, r7
    6f2e:	b002      	add	sp, #8
    6f30:	bd80      	pop	{r7, pc}
	...

00006f34 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b086      	sub	sp, #24
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    6f3c:	230c      	movs	r3, #12
    6f3e:	18fb      	adds	r3, r7, r3
    6f40:	0018      	movs	r0, r3
    6f42:	4b23      	ldr	r3, [pc, #140]	; (6fd0 <rtc_calendar_get_config_defaults+0x9c>)
    6f44:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	22a0      	movs	r2, #160	; 0xa0
    6f4a:	0112      	lsls	r2, r2, #4
    6f4c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    6f4e:	687b      	ldr	r3, [r7, #4]
    6f50:	2200      	movs	r2, #0
    6f52:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    6f54:	687b      	ldr	r3, [r7, #4]
    6f56:	2200      	movs	r2, #0
    6f58:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    6f5a:	687b      	ldr	r3, [r7, #4]
    6f5c:	2200      	movs	r2, #0
    6f5e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	22fa      	movs	r2, #250	; 0xfa
    6f64:	00d2      	lsls	r2, r2, #3
    6f66:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6f68:	2317      	movs	r3, #23
    6f6a:	18fb      	adds	r3, r7, r3
    6f6c:	2200      	movs	r2, #0
    6f6e:	701a      	strb	r2, [r3, #0]
    6f70:	e025      	b.n	6fbe <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    6f72:	2317      	movs	r3, #23
    6f74:	18fb      	adds	r3, r7, r3
    6f76:	781a      	ldrb	r2, [r3, #0]
    6f78:	6879      	ldr	r1, [r7, #4]
    6f7a:	2008      	movs	r0, #8
    6f7c:	0013      	movs	r3, r2
    6f7e:	009b      	lsls	r3, r3, #2
    6f80:	189b      	adds	r3, r3, r2
    6f82:	005b      	lsls	r3, r3, #1
    6f84:	18cb      	adds	r3, r1, r3
    6f86:	181a      	adds	r2, r3, r0
    6f88:	230c      	movs	r3, #12
    6f8a:	18fb      	adds	r3, r7, r3
    6f8c:	0010      	movs	r0, r2
    6f8e:	0019      	movs	r1, r3
    6f90:	2308      	movs	r3, #8
    6f92:	001a      	movs	r2, r3
    6f94:	4b0f      	ldr	r3, [pc, #60]	; (6fd4 <rtc_calendar_get_config_defaults+0xa0>)
    6f96:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6f98:	2317      	movs	r3, #23
    6f9a:	18fb      	adds	r3, r7, r3
    6f9c:	781a      	ldrb	r2, [r3, #0]
    6f9e:	6879      	ldr	r1, [r7, #4]
    6fa0:	0013      	movs	r3, r2
    6fa2:	009b      	lsls	r3, r3, #2
    6fa4:	189b      	adds	r3, r3, r2
    6fa6:	005b      	lsls	r3, r3, #1
    6fa8:	18cb      	adds	r3, r1, r3
    6faa:	3310      	adds	r3, #16
    6fac:	2206      	movs	r2, #6
    6fae:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6fb0:	2317      	movs	r3, #23
    6fb2:	18fb      	adds	r3, r7, r3
    6fb4:	781a      	ldrb	r2, [r3, #0]
    6fb6:	2317      	movs	r3, #23
    6fb8:	18fb      	adds	r3, r7, r3
    6fba:	3201      	adds	r2, #1
    6fbc:	701a      	strb	r2, [r3, #0]
    6fbe:	2317      	movs	r3, #23
    6fc0:	18fb      	adds	r3, r7, r3
    6fc2:	781b      	ldrb	r3, [r3, #0]
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d0d4      	beq.n	6f72 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    6fc8:	46c0      	nop			; (mov r8, r8)
    6fca:	46bd      	mov	sp, r7
    6fcc:	b006      	add	sp, #24
    6fce:	bd80      	pop	{r7, pc}
    6fd0:	00006ef7 	.word	0x00006ef7
    6fd4:	0000be41 	.word	0x0000be41

00006fd8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b088      	sub	sp, #32
    6fdc:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    6fde:	230c      	movs	r3, #12
    6fe0:	18fb      	adds	r3, r7, r3
    6fe2:	0018      	movs	r0, r3
    6fe4:	4b1a      	ldr	r3, [pc, #104]	; (7050 <configure_rtc_calendar+0x78>)
    6fe6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    6fe8:	1d3b      	adds	r3, r7, #4
    6fea:	0018      	movs	r0, r3
    6fec:	4b19      	ldr	r3, [pc, #100]	; (7054 <configure_rtc_calendar+0x7c>)
    6fee:	4798      	blx	r3
	init_time.year   = 2014;
    6ff0:	1d3b      	adds	r3, r7, #4
    6ff2:	4a19      	ldr	r2, [pc, #100]	; (7058 <configure_rtc_calendar+0x80>)
    6ff4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    6ff6:	1d3b      	adds	r3, r7, #4
    6ff8:	2201      	movs	r2, #1
    6ffa:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    6ffc:	1d3b      	adds	r3, r7, #4
    6ffe:	2201      	movs	r2, #1
    7000:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    7002:	1d3b      	adds	r3, r7, #4
    7004:	2200      	movs	r2, #0
    7006:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    7008:	1d3b      	adds	r3, r7, #4
    700a:	2200      	movs	r2, #0
    700c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    700e:	1d3b      	adds	r3, r7, #4
    7010:	2204      	movs	r2, #4
    7012:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    7014:	230c      	movs	r3, #12
    7016:	18fb      	adds	r3, r7, r3
    7018:	2201      	movs	r2, #1
    701a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    701c:	230c      	movs	r3, #12
    701e:	18fb      	adds	r3, r7, r3
    7020:	1d3a      	adds	r2, r7, #4
    7022:	3308      	adds	r3, #8
    7024:	ca03      	ldmia	r2!, {r0, r1}
    7026:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    7028:	230c      	movs	r3, #12
    702a:	18fb      	adds	r3, r7, r3
    702c:	2206      	movs	r2, #6
    702e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    7030:	230c      	movs	r3, #12
    7032:	18fa      	adds	r2, r7, r3
    7034:	4909      	ldr	r1, [pc, #36]	; (705c <configure_rtc_calendar+0x84>)
    7036:	4b0a      	ldr	r3, [pc, #40]	; (7060 <configure_rtc_calendar+0x88>)
    7038:	0018      	movs	r0, r3
    703a:	4b0a      	ldr	r3, [pc, #40]	; (7064 <configure_rtc_calendar+0x8c>)
    703c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    703e:	4b08      	ldr	r3, [pc, #32]	; (7060 <configure_rtc_calendar+0x88>)
    7040:	0018      	movs	r0, r3
    7042:	4b09      	ldr	r3, [pc, #36]	; (7068 <configure_rtc_calendar+0x90>)
    7044:	4798      	blx	r3
}
    7046:	46c0      	nop			; (mov r8, r8)
    7048:	46bd      	mov	sp, r7
    704a:	b008      	add	sp, #32
    704c:	bd80      	pop	{r7, pc}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	00006f35 	.word	0x00006f35
    7054:	00006ef7 	.word	0x00006ef7
    7058:	000007de 	.word	0x000007de
    705c:	40001400 	.word	0x40001400
    7060:	200009fc 	.word	0x200009fc
    7064:	0000371d 	.word	0x0000371d
    7068:	0000346d 	.word	0x0000346d

0000706c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    706c:	b590      	push	{r4, r7, lr}
    706e:	b085      	sub	sp, #20
    7070:	af00      	add	r7, sp, #0
    7072:	0002      	movs	r2, r0
    7074:	1dfb      	adds	r3, r7, #7
    7076:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    7078:	4b1a      	ldr	r3, [pc, #104]	; (70e4 <disk_initialize+0x78>)
    707a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    707c:	1dfb      	adds	r3, r7, #7
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	2b01      	cmp	r3, #1
    7082:	d901      	bls.n	7088 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    7084:	2301      	movs	r3, #1
    7086:	e029      	b.n	70dc <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    7088:	2300      	movs	r3, #0
    708a:	60fb      	str	r3, [r7, #12]
    708c:	e010      	b.n	70b0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    708e:	230b      	movs	r3, #11
    7090:	18fc      	adds	r4, r7, r3
    7092:	1dfb      	adds	r3, r7, #7
    7094:	781b      	ldrb	r3, [r3, #0]
    7096:	0018      	movs	r0, r3
    7098:	4b13      	ldr	r3, [pc, #76]	; (70e8 <disk_initialize+0x7c>)
    709a:	4798      	blx	r3
    709c:	0003      	movs	r3, r0
    709e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    70a0:	230b      	movs	r3, #11
    70a2:	18fb      	adds	r3, r7, r3
    70a4:	781b      	ldrb	r3, [r3, #0]
    70a6:	2b03      	cmp	r3, #3
    70a8:	d106      	bne.n	70b8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    70aa:	68fb      	ldr	r3, [r7, #12]
    70ac:	3301      	adds	r3, #1
    70ae:	60fb      	str	r3, [r7, #12]
    70b0:	68fb      	ldr	r3, [r7, #12]
    70b2:	2b01      	cmp	r3, #1
    70b4:	ddeb      	ble.n	708e <disk_initialize+0x22>
    70b6:	e000      	b.n	70ba <disk_initialize+0x4e>
			break;
    70b8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    70ba:	230b      	movs	r3, #11
    70bc:	18fb      	adds	r3, r7, r3
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d001      	beq.n	70c8 <disk_initialize+0x5c>
		return STA_NOINIT;
    70c4:	2301      	movs	r3, #1
    70c6:	e009      	b.n	70dc <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    70c8:	1dfb      	adds	r3, r7, #7
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	0018      	movs	r0, r3
    70ce:	4b07      	ldr	r3, [pc, #28]	; (70ec <disk_initialize+0x80>)
    70d0:	4798      	blx	r3
    70d2:	1e03      	subs	r3, r0, #0
    70d4:	d001      	beq.n	70da <disk_initialize+0x6e>
		return STA_PROTECT;
    70d6:	2304      	movs	r3, #4
    70d8:	e000      	b.n	70dc <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    70da:	2300      	movs	r3, #0
}
    70dc:	0018      	movs	r0, r3
    70de:	46bd      	mov	sp, r7
    70e0:	b005      	add	sp, #20
    70e2:	bd90      	pop	{r4, r7, pc}
    70e4:	00006fd9 	.word	0x00006fd9
    70e8:	0000310d 	.word	0x0000310d
    70ec:	000031c5 	.word	0x000031c5

000070f0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    70f0:	b580      	push	{r7, lr}
    70f2:	b082      	sub	sp, #8
    70f4:	af00      	add	r7, sp, #0
    70f6:	0002      	movs	r2, r0
    70f8:	1dfb      	adds	r3, r7, #7
    70fa:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    70fc:	1dfb      	adds	r3, r7, #7
    70fe:	781b      	ldrb	r3, [r3, #0]
    7100:	0018      	movs	r0, r3
    7102:	4b08      	ldr	r3, [pc, #32]	; (7124 <disk_status+0x34>)
    7104:	4798      	blx	r3
    7106:	1e03      	subs	r3, r0, #0
    7108:	d002      	beq.n	7110 <disk_status+0x20>
    710a:	2b02      	cmp	r3, #2
    710c:	d002      	beq.n	7114 <disk_status+0x24>
    710e:	e003      	b.n	7118 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    7110:	2300      	movs	r3, #0
    7112:	e002      	b.n	711a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    7114:	2303      	movs	r3, #3
    7116:	e000      	b.n	711a <disk_status+0x2a>
	default:
		return STA_NOINIT;
    7118:	2301      	movs	r3, #1
	}
}
    711a:	0018      	movs	r0, r3
    711c:	46bd      	mov	sp, r7
    711e:	b002      	add	sp, #8
    7120:	bd80      	pop	{r7, pc}
    7122:	46c0      	nop			; (mov r8, r8)
    7124:	0000310d 	.word	0x0000310d

00007128 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    7128:	b590      	push	{r4, r7, lr}
    712a:	b089      	sub	sp, #36	; 0x24
    712c:	af00      	add	r7, sp, #0
    712e:	60b9      	str	r1, [r7, #8]
    7130:	607a      	str	r2, [r7, #4]
    7132:	0019      	movs	r1, r3
    7134:	230f      	movs	r3, #15
    7136:	18fb      	adds	r3, r7, r3
    7138:	1c02      	adds	r2, r0, #0
    713a:	701a      	strb	r2, [r3, #0]
    713c:	230e      	movs	r3, #14
    713e:	18fb      	adds	r3, r7, r3
    7140:	1c0a      	adds	r2, r1, #0
    7142:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7144:	231b      	movs	r3, #27
    7146:	18fc      	adds	r4, r7, r3
    7148:	230f      	movs	r3, #15
    714a:	18fb      	adds	r3, r7, r3
    714c:	781b      	ldrb	r3, [r3, #0]
    714e:	0018      	movs	r0, r3
    7150:	4b28      	ldr	r3, [pc, #160]	; (71f4 <disk_read+0xcc>)
    7152:	4798      	blx	r3
    7154:	0003      	movs	r3, r0
    7156:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7158:	231b      	movs	r3, #27
    715a:	18fb      	adds	r3, r7, r3
    715c:	781b      	ldrb	r3, [r3, #0]
    715e:	2b00      	cmp	r3, #0
    7160:	d101      	bne.n	7166 <disk_read+0x3e>
		return RES_ERROR;
    7162:	2301      	movs	r3, #1
    7164:	e042      	b.n	71ec <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    7166:	2314      	movs	r3, #20
    7168:	18fa      	adds	r2, r7, r3
    716a:	230f      	movs	r3, #15
    716c:	18fb      	adds	r3, r7, r3
    716e:	781b      	ldrb	r3, [r3, #0]
    7170:	0011      	movs	r1, r2
    7172:	0018      	movs	r0, r3
    7174:	4b20      	ldr	r3, [pc, #128]	; (71f8 <disk_read+0xd0>)
    7176:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7178:	230e      	movs	r3, #14
    717a:	18fb      	adds	r3, r7, r3
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	221b      	movs	r2, #27
    7180:	18ba      	adds	r2, r7, r2
    7182:	7812      	ldrb	r2, [r2, #0]
    7184:	4353      	muls	r3, r2
    7186:	001a      	movs	r2, r3
    7188:	687b      	ldr	r3, [r7, #4]
    718a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    718c:	697b      	ldr	r3, [r7, #20]
    718e:	3301      	adds	r3, #1
    7190:	211b      	movs	r1, #27
    7192:	1879      	adds	r1, r7, r1
    7194:	7809      	ldrb	r1, [r1, #0]
    7196:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7198:	429a      	cmp	r2, r3
    719a:	d901      	bls.n	71a0 <disk_read+0x78>
		return RES_PARERR;
    719c:	2304      	movs	r3, #4
    719e:	e025      	b.n	71ec <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    71a0:	2300      	movs	r3, #0
    71a2:	61fb      	str	r3, [r7, #28]
    71a4:	e01b      	b.n	71de <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    71a6:	231b      	movs	r3, #27
    71a8:	18fb      	adds	r3, r7, r3
    71aa:	781b      	ldrb	r3, [r3, #0]
    71ac:	69fa      	ldr	r2, [r7, #28]
    71ae:	435a      	muls	r2, r3
    71b0:	687b      	ldr	r3, [r7, #4]
    71b2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    71b4:	231b      	movs	r3, #27
    71b6:	18fb      	adds	r3, r7, r3
    71b8:	781b      	ldrb	r3, [r3, #0]
    71ba:	69fa      	ldr	r2, [r7, #28]
    71bc:	4353      	muls	r3, r2
    71be:	025b      	lsls	r3, r3, #9
    71c0:	68ba      	ldr	r2, [r7, #8]
    71c2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    71c4:	230f      	movs	r3, #15
    71c6:	18fb      	adds	r3, r7, r3
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	0018      	movs	r0, r3
    71cc:	4b0b      	ldr	r3, [pc, #44]	; (71fc <disk_read+0xd4>)
    71ce:	4798      	blx	r3
    71d0:	1e03      	subs	r3, r0, #0
    71d2:	d001      	beq.n	71d8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    71d4:	2301      	movs	r3, #1
    71d6:	e009      	b.n	71ec <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    71d8:	69fb      	ldr	r3, [r7, #28]
    71da:	3301      	adds	r3, #1
    71dc:	61fb      	str	r3, [r7, #28]
    71de:	230e      	movs	r3, #14
    71e0:	18fb      	adds	r3, r7, r3
    71e2:	781a      	ldrb	r2, [r3, #0]
    71e4:	69fb      	ldr	r3, [r7, #28]
    71e6:	429a      	cmp	r2, r3
    71e8:	d8dd      	bhi.n	71a6 <disk_read+0x7e>
		}
	}

	return RES_OK;
    71ea:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    71ec:	0018      	movs	r0, r3
    71ee:	46bd      	mov	sp, r7
    71f0:	b009      	add	sp, #36	; 0x24
    71f2:	bd90      	pop	{r4, r7, pc}
    71f4:	00003199 	.word	0x00003199
    71f8:	0000314d 	.word	0x0000314d
    71fc:	0000320d 	.word	0x0000320d

00007200 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    7200:	b590      	push	{r4, r7, lr}
    7202:	b089      	sub	sp, #36	; 0x24
    7204:	af00      	add	r7, sp, #0
    7206:	60b9      	str	r1, [r7, #8]
    7208:	607a      	str	r2, [r7, #4]
    720a:	0019      	movs	r1, r3
    720c:	230f      	movs	r3, #15
    720e:	18fb      	adds	r3, r7, r3
    7210:	1c02      	adds	r2, r0, #0
    7212:	701a      	strb	r2, [r3, #0]
    7214:	230e      	movs	r3, #14
    7216:	18fb      	adds	r3, r7, r3
    7218:	1c0a      	adds	r2, r1, #0
    721a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    721c:	231b      	movs	r3, #27
    721e:	18fc      	adds	r4, r7, r3
    7220:	230f      	movs	r3, #15
    7222:	18fb      	adds	r3, r7, r3
    7224:	781b      	ldrb	r3, [r3, #0]
    7226:	0018      	movs	r0, r3
    7228:	4b28      	ldr	r3, [pc, #160]	; (72cc <disk_write+0xcc>)
    722a:	4798      	blx	r3
    722c:	0003      	movs	r3, r0
    722e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7230:	231b      	movs	r3, #27
    7232:	18fb      	adds	r3, r7, r3
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	2b00      	cmp	r3, #0
    7238:	d101      	bne.n	723e <disk_write+0x3e>
		return RES_ERROR;
    723a:	2301      	movs	r3, #1
    723c:	e042      	b.n	72c4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    723e:	2314      	movs	r3, #20
    7240:	18fa      	adds	r2, r7, r3
    7242:	230f      	movs	r3, #15
    7244:	18fb      	adds	r3, r7, r3
    7246:	781b      	ldrb	r3, [r3, #0]
    7248:	0011      	movs	r1, r2
    724a:	0018      	movs	r0, r3
    724c:	4b20      	ldr	r3, [pc, #128]	; (72d0 <disk_write+0xd0>)
    724e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7250:	230e      	movs	r3, #14
    7252:	18fb      	adds	r3, r7, r3
    7254:	781b      	ldrb	r3, [r3, #0]
    7256:	221b      	movs	r2, #27
    7258:	18ba      	adds	r2, r7, r2
    725a:	7812      	ldrb	r2, [r2, #0]
    725c:	4353      	muls	r3, r2
    725e:	001a      	movs	r2, r3
    7260:	687b      	ldr	r3, [r7, #4]
    7262:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    7264:	697b      	ldr	r3, [r7, #20]
    7266:	3301      	adds	r3, #1
    7268:	211b      	movs	r1, #27
    726a:	1879      	adds	r1, r7, r1
    726c:	7809      	ldrb	r1, [r1, #0]
    726e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7270:	429a      	cmp	r2, r3
    7272:	d901      	bls.n	7278 <disk_write+0x78>
		return RES_PARERR;
    7274:	2304      	movs	r3, #4
    7276:	e025      	b.n	72c4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    7278:	2300      	movs	r3, #0
    727a:	61fb      	str	r3, [r7, #28]
    727c:	e01b      	b.n	72b6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    727e:	231b      	movs	r3, #27
    7280:	18fb      	adds	r3, r7, r3
    7282:	781b      	ldrb	r3, [r3, #0]
    7284:	69fa      	ldr	r2, [r7, #28]
    7286:	435a      	muls	r2, r3
    7288:	687b      	ldr	r3, [r7, #4]
    728a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    728c:	231b      	movs	r3, #27
    728e:	18fb      	adds	r3, r7, r3
    7290:	781b      	ldrb	r3, [r3, #0]
    7292:	69fa      	ldr	r2, [r7, #28]
    7294:	4353      	muls	r3, r2
    7296:	025b      	lsls	r3, r3, #9
    7298:	68ba      	ldr	r2, [r7, #8]
    729a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    729c:	230f      	movs	r3, #15
    729e:	18fb      	adds	r3, r7, r3
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	0018      	movs	r0, r3
    72a4:	4b0b      	ldr	r3, [pc, #44]	; (72d4 <disk_write+0xd4>)
    72a6:	4798      	blx	r3
    72a8:	1e03      	subs	r3, r0, #0
    72aa:	d001      	beq.n	72b0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    72ac:	2301      	movs	r3, #1
    72ae:	e009      	b.n	72c4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    72b0:	69fb      	ldr	r3, [r7, #28]
    72b2:	3301      	adds	r3, #1
    72b4:	61fb      	str	r3, [r7, #28]
    72b6:	230e      	movs	r3, #14
    72b8:	18fb      	adds	r3, r7, r3
    72ba:	781a      	ldrb	r2, [r3, #0]
    72bc:	69fb      	ldr	r3, [r7, #28]
    72be:	429a      	cmp	r2, r3
    72c0:	d8dd      	bhi.n	727e <disk_write+0x7e>
		}
	}

	return RES_OK;
    72c2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    72c4:	0018      	movs	r0, r3
    72c6:	46bd      	mov	sp, r7
    72c8:	b009      	add	sp, #36	; 0x24
    72ca:	bd90      	pop	{r4, r7, pc}
    72cc:	00003199 	.word	0x00003199
    72d0:	0000314d 	.word	0x0000314d
    72d4:	00003261 	.word	0x00003261

000072d8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    72d8:	b590      	push	{r4, r7, lr}
    72da:	b085      	sub	sp, #20
    72dc:	af00      	add	r7, sp, #0
    72de:	603a      	str	r2, [r7, #0]
    72e0:	1dfb      	adds	r3, r7, #7
    72e2:	1c02      	adds	r2, r0, #0
    72e4:	701a      	strb	r2, [r3, #0]
    72e6:	1dbb      	adds	r3, r7, #6
    72e8:	1c0a      	adds	r2, r1, #0
    72ea:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    72ec:	230f      	movs	r3, #15
    72ee:	18fb      	adds	r3, r7, r3
    72f0:	2204      	movs	r2, #4
    72f2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    72f4:	1dbb      	adds	r3, r7, #6
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	2b01      	cmp	r3, #1
    72fa:	d00f      	beq.n	731c <disk_ioctl+0x44>
    72fc:	dc02      	bgt.n	7304 <disk_ioctl+0x2c>
    72fe:	2b00      	cmp	r3, #0
    7300:	d044      	beq.n	738c <disk_ioctl+0xb4>
    7302:	e054      	b.n	73ae <disk_ioctl+0xd6>
    7304:	2b02      	cmp	r3, #2
    7306:	d01a      	beq.n	733e <disk_ioctl+0x66>
    7308:	2b03      	cmp	r3, #3
    730a:	d150      	bne.n	73ae <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    730c:	683b      	ldr	r3, [r7, #0]
    730e:	2201      	movs	r2, #1
    7310:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    7312:	230f      	movs	r3, #15
    7314:	18fb      	adds	r3, r7, r3
    7316:	2200      	movs	r2, #0
    7318:	701a      	strb	r2, [r3, #0]
		break;
    731a:	e04c      	b.n	73b6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    731c:	2308      	movs	r3, #8
    731e:	18fa      	adds	r2, r7, r3
    7320:	1dfb      	adds	r3, r7, #7
    7322:	781b      	ldrb	r3, [r3, #0]
    7324:	0011      	movs	r1, r2
    7326:	0018      	movs	r0, r3
    7328:	4b26      	ldr	r3, [pc, #152]	; (73c4 <disk_ioctl+0xec>)
    732a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    732c:	68bb      	ldr	r3, [r7, #8]
    732e:	1c5a      	adds	r2, r3, #1
    7330:	683b      	ldr	r3, [r7, #0]
    7332:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    7334:	230f      	movs	r3, #15
    7336:	18fb      	adds	r3, r7, r3
    7338:	2200      	movs	r2, #0
    733a:	701a      	strb	r2, [r3, #0]
	}
	break;
    733c:	e03b      	b.n	73b6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    733e:	230e      	movs	r3, #14
    7340:	18fc      	adds	r4, r7, r3
    7342:	1dfb      	adds	r3, r7, #7
    7344:	781b      	ldrb	r3, [r3, #0]
    7346:	0018      	movs	r0, r3
    7348:	4b1f      	ldr	r3, [pc, #124]	; (73c8 <disk_ioctl+0xf0>)
    734a:	4798      	blx	r3
    734c:	0003      	movs	r3, r0
    734e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    7350:	230e      	movs	r3, #14
    7352:	18fb      	adds	r3, r7, r3
    7354:	781b      	ldrb	r3, [r3, #0]
    7356:	2b01      	cmp	r3, #1
    7358:	d010      	beq.n	737c <disk_ioctl+0xa4>
    735a:	230e      	movs	r3, #14
    735c:	18fb      	adds	r3, r7, r3
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	2b02      	cmp	r3, #2
    7362:	d00b      	beq.n	737c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    7364:	230e      	movs	r3, #14
    7366:	18fb      	adds	r3, r7, r3
    7368:	781b      	ldrb	r3, [r3, #0]
    736a:	2b04      	cmp	r3, #4
    736c:	d006      	beq.n	737c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    736e:	230e      	movs	r3, #14
    7370:	18fb      	adds	r3, r7, r3
    7372:	781b      	ldrb	r3, [r3, #0]
    7374:	2b08      	cmp	r3, #8
    7376:	d001      	beq.n	737c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    7378:	2301      	movs	r3, #1
    737a:	e01f      	b.n	73bc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    737c:	683b      	ldr	r3, [r7, #0]
    737e:	2200      	movs	r2, #0
    7380:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    7382:	230f      	movs	r3, #15
    7384:	18fb      	adds	r3, r7, r3
    7386:	2200      	movs	r2, #0
    7388:	701a      	strb	r2, [r3, #0]
	}
	break;
    738a:	e014      	b.n	73b6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    738c:	1dfb      	adds	r3, r7, #7
    738e:	781b      	ldrb	r3, [r3, #0]
    7390:	0018      	movs	r0, r3
    7392:	4b0e      	ldr	r3, [pc, #56]	; (73cc <disk_ioctl+0xf4>)
    7394:	4798      	blx	r3
    7396:	1e03      	subs	r3, r0, #0
    7398:	d104      	bne.n	73a4 <disk_ioctl+0xcc>
			res = RES_OK;
    739a:	230f      	movs	r3, #15
    739c:	18fb      	adds	r3, r7, r3
    739e:	2200      	movs	r2, #0
    73a0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    73a2:	e008      	b.n	73b6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    73a4:	230f      	movs	r3, #15
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	2203      	movs	r2, #3
    73aa:	701a      	strb	r2, [r3, #0]
		break;
    73ac:	e003      	b.n	73b6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    73ae:	230f      	movs	r3, #15
    73b0:	18fb      	adds	r3, r7, r3
    73b2:	2204      	movs	r2, #4
    73b4:	701a      	strb	r2, [r3, #0]
	}

	return res;
    73b6:	230f      	movs	r3, #15
    73b8:	18fb      	adds	r3, r7, r3
    73ba:	781b      	ldrb	r3, [r3, #0]
}
    73bc:	0018      	movs	r0, r3
    73be:	46bd      	mov	sp, r7
    73c0:	b005      	add	sp, #20
    73c2:	bd90      	pop	{r4, r7, pc}
    73c4:	0000314d 	.word	0x0000314d
    73c8:	00003199 	.word	0x00003199
    73cc:	0000310d 	.word	0x0000310d

000073d0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    73d0:	b580      	push	{r7, lr}
    73d2:	b084      	sub	sp, #16
    73d4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    73d6:	1d3a      	adds	r2, r7, #4
    73d8:	4b12      	ldr	r3, [pc, #72]	; (7424 <get_fattime+0x54>)
    73da:	0011      	movs	r1, r2
    73dc:	0018      	movs	r0, r3
    73de:	4b12      	ldr	r3, [pc, #72]	; (7428 <get_fattime+0x58>)
    73e0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    73e2:	1d3b      	adds	r3, r7, #4
    73e4:	88db      	ldrh	r3, [r3, #6]
    73e6:	4a11      	ldr	r2, [pc, #68]	; (742c <get_fattime+0x5c>)
    73e8:	4694      	mov	ip, r2
    73ea:	4463      	add	r3, ip
    73ec:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    73ee:	1d3b      	adds	r3, r7, #4
    73f0:	795b      	ldrb	r3, [r3, #5]
    73f2:	055b      	lsls	r3, r3, #21
    73f4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    73f6:	1d3b      	adds	r3, r7, #4
    73f8:	791b      	ldrb	r3, [r3, #4]
    73fa:	041b      	lsls	r3, r3, #16
    73fc:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    73fe:	1d3b      	adds	r3, r7, #4
    7400:	789b      	ldrb	r3, [r3, #2]
    7402:	02db      	lsls	r3, r3, #11
    7404:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    7406:	1d3b      	adds	r3, r7, #4
    7408:	785b      	ldrb	r3, [r3, #1]
    740a:	015b      	lsls	r3, r3, #5
    740c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    740e:	1d3a      	adds	r2, r7, #4
    7410:	7812      	ldrb	r2, [r2, #0]
    7412:	0852      	lsrs	r2, r2, #1
    7414:	b2d2      	uxtb	r2, r2
    7416:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    7418:	60fb      	str	r3, [r7, #12]

	return ul_time;
    741a:	68fb      	ldr	r3, [r7, #12]
}
    741c:	0018      	movs	r0, r3
    741e:	46bd      	mov	sp, r7
    7420:	b004      	add	sp, #16
    7422:	bd80      	pop	{r7, pc}
    7424:	200009fc 	.word	0x200009fc
    7428:	000037b1 	.word	0x000037b1
    742c:	fffff844 	.word	0xfffff844

00007430 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    7430:	b580      	push	{r7, lr}
    7432:	b086      	sub	sp, #24
    7434:	af00      	add	r7, sp, #0
    7436:	60f8      	str	r0, [r7, #12]
    7438:	60b9      	str	r1, [r7, #8]
    743a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    743c:	68fb      	ldr	r3, [r7, #12]
    743e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    7440:	68bb      	ldr	r3, [r7, #8]
    7442:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7444:	e007      	b.n	7456 <mem_cpy+0x26>
		*d++ = *s++;
    7446:	697b      	ldr	r3, [r7, #20]
    7448:	1c5a      	adds	r2, r3, #1
    744a:	617a      	str	r2, [r7, #20]
    744c:	693a      	ldr	r2, [r7, #16]
    744e:	1c51      	adds	r1, r2, #1
    7450:	6139      	str	r1, [r7, #16]
    7452:	7812      	ldrb	r2, [r2, #0]
    7454:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7456:	687b      	ldr	r3, [r7, #4]
    7458:	1e5a      	subs	r2, r3, #1
    745a:	607a      	str	r2, [r7, #4]
    745c:	2b00      	cmp	r3, #0
    745e:	d1f2      	bne.n	7446 <mem_cpy+0x16>
}
    7460:	46c0      	nop			; (mov r8, r8)
    7462:	46bd      	mov	sp, r7
    7464:	b006      	add	sp, #24
    7466:	bd80      	pop	{r7, pc}

00007468 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    7468:	b580      	push	{r7, lr}
    746a:	b086      	sub	sp, #24
    746c:	af00      	add	r7, sp, #0
    746e:	60f8      	str	r0, [r7, #12]
    7470:	60b9      	str	r1, [r7, #8]
    7472:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7474:	68fb      	ldr	r3, [r7, #12]
    7476:	617b      	str	r3, [r7, #20]

	while (cnt--)
    7478:	e005      	b.n	7486 <mem_set+0x1e>
		*d++ = (BYTE)val;
    747a:	697b      	ldr	r3, [r7, #20]
    747c:	1c5a      	adds	r2, r3, #1
    747e:	617a      	str	r2, [r7, #20]
    7480:	68ba      	ldr	r2, [r7, #8]
    7482:	b2d2      	uxtb	r2, r2
    7484:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7486:	687b      	ldr	r3, [r7, #4]
    7488:	1e5a      	subs	r2, r3, #1
    748a:	607a      	str	r2, [r7, #4]
    748c:	2b00      	cmp	r3, #0
    748e:	d1f4      	bne.n	747a <mem_set+0x12>
}
    7490:	46c0      	nop			; (mov r8, r8)
    7492:	46bd      	mov	sp, r7
    7494:	b006      	add	sp, #24
    7496:	bd80      	pop	{r7, pc}

00007498 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    7498:	b580      	push	{r7, lr}
    749a:	b088      	sub	sp, #32
    749c:	af00      	add	r7, sp, #0
    749e:	60f8      	str	r0, [r7, #12]
    74a0:	60b9      	str	r1, [r7, #8]
    74a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    74a4:	68fb      	ldr	r3, [r7, #12]
    74a6:	61fb      	str	r3, [r7, #28]
    74a8:	68bb      	ldr	r3, [r7, #8]
    74aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
    74ac:	2300      	movs	r3, #0
    74ae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    74b0:	46c0      	nop			; (mov r8, r8)
    74b2:	687b      	ldr	r3, [r7, #4]
    74b4:	1e5a      	subs	r2, r3, #1
    74b6:	607a      	str	r2, [r7, #4]
    74b8:	2b00      	cmp	r3, #0
    74ba:	d00d      	beq.n	74d8 <mem_cmp+0x40>
    74bc:	69fb      	ldr	r3, [r7, #28]
    74be:	1c5a      	adds	r2, r3, #1
    74c0:	61fa      	str	r2, [r7, #28]
    74c2:	781b      	ldrb	r3, [r3, #0]
    74c4:	0019      	movs	r1, r3
    74c6:	69bb      	ldr	r3, [r7, #24]
    74c8:	1c5a      	adds	r2, r3, #1
    74ca:	61ba      	str	r2, [r7, #24]
    74cc:	781b      	ldrb	r3, [r3, #0]
    74ce:	1acb      	subs	r3, r1, r3
    74d0:	617b      	str	r3, [r7, #20]
    74d2:	697b      	ldr	r3, [r7, #20]
    74d4:	2b00      	cmp	r3, #0
    74d6:	d0ec      	beq.n	74b2 <mem_cmp+0x1a>
	return r;
    74d8:	697b      	ldr	r3, [r7, #20]
}
    74da:	0018      	movs	r0, r3
    74dc:	46bd      	mov	sp, r7
    74de:	b008      	add	sp, #32
    74e0:	bd80      	pop	{r7, pc}

000074e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    74e2:	b580      	push	{r7, lr}
    74e4:	b082      	sub	sp, #8
    74e6:	af00      	add	r7, sp, #0
    74e8:	6078      	str	r0, [r7, #4]
    74ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    74ec:	e002      	b.n	74f4 <chk_chr+0x12>
    74ee:	687b      	ldr	r3, [r7, #4]
    74f0:	3301      	adds	r3, #1
    74f2:	607b      	str	r3, [r7, #4]
    74f4:	687b      	ldr	r3, [r7, #4]
    74f6:	781b      	ldrb	r3, [r3, #0]
    74f8:	2b00      	cmp	r3, #0
    74fa:	d005      	beq.n	7508 <chk_chr+0x26>
    74fc:	687b      	ldr	r3, [r7, #4]
    74fe:	781b      	ldrb	r3, [r3, #0]
    7500:	001a      	movs	r2, r3
    7502:	683b      	ldr	r3, [r7, #0]
    7504:	429a      	cmp	r2, r3
    7506:	d1f2      	bne.n	74ee <chk_chr+0xc>
	return *str;
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	781b      	ldrb	r3, [r3, #0]
}
    750c:	0018      	movs	r0, r3
    750e:	46bd      	mov	sp, r7
    7510:	b002      	add	sp, #8
    7512:	bd80      	pop	{r7, pc}

00007514 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7514:	b590      	push	{r4, r7, lr}
    7516:	b085      	sub	sp, #20
    7518:	af00      	add	r7, sp, #0
    751a:	6078      	str	r0, [r7, #4]
    751c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    751e:	687b      	ldr	r3, [r7, #4]
    7520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7522:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    7524:	68fa      	ldr	r2, [r7, #12]
    7526:	683b      	ldr	r3, [r7, #0]
    7528:	429a      	cmp	r2, r3
    752a:	d04e      	beq.n	75ca <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    752c:	687b      	ldr	r3, [r7, #4]
    752e:	791b      	ldrb	r3, [r3, #4]
    7530:	2b00      	cmp	r3, #0
    7532:	d037      	beq.n	75a4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7534:	687b      	ldr	r3, [r7, #4]
    7536:	7858      	ldrb	r0, [r3, #1]
    7538:	687b      	ldr	r3, [r7, #4]
    753a:	3330      	adds	r3, #48	; 0x30
    753c:	0019      	movs	r1, r3
    753e:	68fa      	ldr	r2, [r7, #12]
    7540:	2301      	movs	r3, #1
    7542:	4c24      	ldr	r4, [pc, #144]	; (75d4 <move_window+0xc0>)
    7544:	47a0      	blx	r4
    7546:	1e03      	subs	r3, r0, #0
    7548:	d001      	beq.n	754e <move_window+0x3a>
				return FR_DISK_ERR;
    754a:	2301      	movs	r3, #1
    754c:	e03e      	b.n	75cc <move_window+0xb8>
			fs->wflag = 0;
    754e:	687b      	ldr	r3, [r7, #4]
    7550:	2200      	movs	r2, #0
    7552:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	6a1a      	ldr	r2, [r3, #32]
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	69db      	ldr	r3, [r3, #28]
    755c:	18d2      	adds	r2, r2, r3
    755e:	68fb      	ldr	r3, [r7, #12]
    7560:	429a      	cmp	r2, r3
    7562:	d91f      	bls.n	75a4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7564:	230b      	movs	r3, #11
    7566:	18fb      	adds	r3, r7, r3
    7568:	687a      	ldr	r2, [r7, #4]
    756a:	78d2      	ldrb	r2, [r2, #3]
    756c:	701a      	strb	r2, [r3, #0]
    756e:	e014      	b.n	759a <move_window+0x86>
					wsect += fs->fsize;
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	69db      	ldr	r3, [r3, #28]
    7574:	68fa      	ldr	r2, [r7, #12]
    7576:	18d3      	adds	r3, r2, r3
    7578:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    757a:	687b      	ldr	r3, [r7, #4]
    757c:	7858      	ldrb	r0, [r3, #1]
    757e:	687b      	ldr	r3, [r7, #4]
    7580:	3330      	adds	r3, #48	; 0x30
    7582:	0019      	movs	r1, r3
    7584:	68fa      	ldr	r2, [r7, #12]
    7586:	2301      	movs	r3, #1
    7588:	4c12      	ldr	r4, [pc, #72]	; (75d4 <move_window+0xc0>)
    758a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    758c:	230b      	movs	r3, #11
    758e:	18fb      	adds	r3, r7, r3
    7590:	781a      	ldrb	r2, [r3, #0]
    7592:	230b      	movs	r3, #11
    7594:	18fb      	adds	r3, r7, r3
    7596:	3a01      	subs	r2, #1
    7598:	701a      	strb	r2, [r3, #0]
    759a:	230b      	movs	r3, #11
    759c:	18fb      	adds	r3, r7, r3
    759e:	781b      	ldrb	r3, [r3, #0]
    75a0:	2b01      	cmp	r3, #1
    75a2:	d8e5      	bhi.n	7570 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    75a4:	683b      	ldr	r3, [r7, #0]
    75a6:	2b00      	cmp	r3, #0
    75a8:	d00f      	beq.n	75ca <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    75aa:	687b      	ldr	r3, [r7, #4]
    75ac:	7858      	ldrb	r0, [r3, #1]
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	3330      	adds	r3, #48	; 0x30
    75b2:	0019      	movs	r1, r3
    75b4:	683a      	ldr	r2, [r7, #0]
    75b6:	2301      	movs	r3, #1
    75b8:	4c07      	ldr	r4, [pc, #28]	; (75d8 <move_window+0xc4>)
    75ba:	47a0      	blx	r4
    75bc:	1e03      	subs	r3, r0, #0
    75be:	d001      	beq.n	75c4 <move_window+0xb0>
				return FR_DISK_ERR;
    75c0:	2301      	movs	r3, #1
    75c2:	e003      	b.n	75cc <move_window+0xb8>
			fs->winsect = sector;
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	683a      	ldr	r2, [r7, #0]
    75c8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    75ca:	2300      	movs	r3, #0
}
    75cc:	0018      	movs	r0, r3
    75ce:	46bd      	mov	sp, r7
    75d0:	b005      	add	sp, #20
    75d2:	bd90      	pop	{r4, r7, pc}
    75d4:	00007201 	.word	0x00007201
    75d8:	00007129 	.word	0x00007129

000075dc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    75dc:	b590      	push	{r4, r7, lr}
    75de:	b085      	sub	sp, #20
    75e0:	af00      	add	r7, sp, #0
    75e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    75e4:	230f      	movs	r3, #15
    75e6:	18fc      	adds	r4, r7, r3
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	2100      	movs	r1, #0
    75ec:	0018      	movs	r0, r3
    75ee:	4b52      	ldr	r3, [pc, #328]	; (7738 <sync+0x15c>)
    75f0:	4798      	blx	r3
    75f2:	0003      	movs	r3, r0
    75f4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    75f6:	230f      	movs	r3, #15
    75f8:	18fb      	adds	r3, r7, r3
    75fa:	781b      	ldrb	r3, [r3, #0]
    75fc:	2b00      	cmp	r3, #0
    75fe:	d000      	beq.n	7602 <sync+0x26>
    7600:	e093      	b.n	772a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7602:	687b      	ldr	r3, [r7, #4]
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	2b03      	cmp	r3, #3
    7608:	d000      	beq.n	760c <sync+0x30>
    760a:	e081      	b.n	7710 <sync+0x134>
    760c:	687b      	ldr	r3, [r7, #4]
    760e:	795b      	ldrb	r3, [r3, #5]
    7610:	2b00      	cmp	r3, #0
    7612:	d07d      	beq.n	7710 <sync+0x134>
			fs->winsect = 0;
    7614:	687b      	ldr	r3, [r7, #4]
    7616:	2200      	movs	r2, #0
    7618:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    761a:	687b      	ldr	r3, [r7, #4]
    761c:	3330      	adds	r3, #48	; 0x30
    761e:	0018      	movs	r0, r3
    7620:	2380      	movs	r3, #128	; 0x80
    7622:	009b      	lsls	r3, r3, #2
    7624:	001a      	movs	r2, r3
    7626:	2100      	movs	r1, #0
    7628:	4b44      	ldr	r3, [pc, #272]	; (773c <sync+0x160>)
    762a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	4a44      	ldr	r2, [pc, #272]	; (7740 <sync+0x164>)
    7630:	2155      	movs	r1, #85	; 0x55
    7632:	5499      	strb	r1, [r3, r2]
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	4a43      	ldr	r2, [pc, #268]	; (7744 <sync+0x168>)
    7638:	21aa      	movs	r1, #170	; 0xaa
    763a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	2230      	movs	r2, #48	; 0x30
    7640:	2152      	movs	r1, #82	; 0x52
    7642:	5499      	strb	r1, [r3, r2]
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	2231      	movs	r2, #49	; 0x31
    7648:	2152      	movs	r1, #82	; 0x52
    764a:	5499      	strb	r1, [r3, r2]
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	2232      	movs	r2, #50	; 0x32
    7650:	2161      	movs	r1, #97	; 0x61
    7652:	5499      	strb	r1, [r3, r2]
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	2233      	movs	r2, #51	; 0x33
    7658:	2141      	movs	r1, #65	; 0x41
    765a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    765c:	687a      	ldr	r2, [r7, #4]
    765e:	2385      	movs	r3, #133	; 0x85
    7660:	009b      	lsls	r3, r3, #2
    7662:	2172      	movs	r1, #114	; 0x72
    7664:	54d1      	strb	r1, [r2, r3]
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	4a37      	ldr	r2, [pc, #220]	; (7748 <sync+0x16c>)
    766a:	2172      	movs	r1, #114	; 0x72
    766c:	5499      	strb	r1, [r3, r2]
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	4a36      	ldr	r2, [pc, #216]	; (774c <sync+0x170>)
    7672:	2141      	movs	r1, #65	; 0x41
    7674:	5499      	strb	r1, [r3, r2]
    7676:	687b      	ldr	r3, [r7, #4]
    7678:	4a35      	ldr	r2, [pc, #212]	; (7750 <sync+0x174>)
    767a:	2161      	movs	r1, #97	; 0x61
    767c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	691b      	ldr	r3, [r3, #16]
    7682:	b2d9      	uxtb	r1, r3
    7684:	687a      	ldr	r2, [r7, #4]
    7686:	2386      	movs	r3, #134	; 0x86
    7688:	009b      	lsls	r3, r3, #2
    768a:	54d1      	strb	r1, [r2, r3]
    768c:	687b      	ldr	r3, [r7, #4]
    768e:	691b      	ldr	r3, [r3, #16]
    7690:	b29b      	uxth	r3, r3
    7692:	0a1b      	lsrs	r3, r3, #8
    7694:	b29b      	uxth	r3, r3
    7696:	b2d9      	uxtb	r1, r3
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	4a2e      	ldr	r2, [pc, #184]	; (7754 <sync+0x178>)
    769c:	5499      	strb	r1, [r3, r2]
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	691b      	ldr	r3, [r3, #16]
    76a2:	0c1b      	lsrs	r3, r3, #16
    76a4:	b2d9      	uxtb	r1, r3
    76a6:	687b      	ldr	r3, [r7, #4]
    76a8:	4a2b      	ldr	r2, [pc, #172]	; (7758 <sync+0x17c>)
    76aa:	5499      	strb	r1, [r3, r2]
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	691b      	ldr	r3, [r3, #16]
    76b0:	0e1b      	lsrs	r3, r3, #24
    76b2:	b2d9      	uxtb	r1, r3
    76b4:	687b      	ldr	r3, [r7, #4]
    76b6:	4a29      	ldr	r2, [pc, #164]	; (775c <sync+0x180>)
    76b8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    76ba:	687b      	ldr	r3, [r7, #4]
    76bc:	68db      	ldr	r3, [r3, #12]
    76be:	b2d9      	uxtb	r1, r3
    76c0:	687a      	ldr	r2, [r7, #4]
    76c2:	2387      	movs	r3, #135	; 0x87
    76c4:	009b      	lsls	r3, r3, #2
    76c6:	54d1      	strb	r1, [r2, r3]
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	68db      	ldr	r3, [r3, #12]
    76cc:	b29b      	uxth	r3, r3
    76ce:	0a1b      	lsrs	r3, r3, #8
    76d0:	b29b      	uxth	r3, r3
    76d2:	b2d9      	uxtb	r1, r3
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	4a22      	ldr	r2, [pc, #136]	; (7760 <sync+0x184>)
    76d8:	5499      	strb	r1, [r3, r2]
    76da:	687b      	ldr	r3, [r7, #4]
    76dc:	68db      	ldr	r3, [r3, #12]
    76de:	0c1b      	lsrs	r3, r3, #16
    76e0:	b2d9      	uxtb	r1, r3
    76e2:	687b      	ldr	r3, [r7, #4]
    76e4:	4a1f      	ldr	r2, [pc, #124]	; (7764 <sync+0x188>)
    76e6:	5499      	strb	r1, [r3, r2]
    76e8:	687b      	ldr	r3, [r7, #4]
    76ea:	68db      	ldr	r3, [r3, #12]
    76ec:	0e1b      	lsrs	r3, r3, #24
    76ee:	b2d9      	uxtb	r1, r3
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	4a1d      	ldr	r2, [pc, #116]	; (7768 <sync+0x18c>)
    76f4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    76f6:	687b      	ldr	r3, [r7, #4]
    76f8:	7858      	ldrb	r0, [r3, #1]
    76fa:	687b      	ldr	r3, [r7, #4]
    76fc:	3330      	adds	r3, #48	; 0x30
    76fe:	0019      	movs	r1, r3
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	695a      	ldr	r2, [r3, #20]
    7704:	2301      	movs	r3, #1
    7706:	4c19      	ldr	r4, [pc, #100]	; (776c <sync+0x190>)
    7708:	47a0      	blx	r4
			fs->fsi_flag = 0;
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	2200      	movs	r2, #0
    770e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7710:	687b      	ldr	r3, [r7, #4]
    7712:	785b      	ldrb	r3, [r3, #1]
    7714:	2200      	movs	r2, #0
    7716:	2100      	movs	r1, #0
    7718:	0018      	movs	r0, r3
    771a:	4b15      	ldr	r3, [pc, #84]	; (7770 <sync+0x194>)
    771c:	4798      	blx	r3
    771e:	1e03      	subs	r3, r0, #0
    7720:	d003      	beq.n	772a <sync+0x14e>
			res = FR_DISK_ERR;
    7722:	230f      	movs	r3, #15
    7724:	18fb      	adds	r3, r7, r3
    7726:	2201      	movs	r2, #1
    7728:	701a      	strb	r2, [r3, #0]
	}

	return res;
    772a:	230f      	movs	r3, #15
    772c:	18fb      	adds	r3, r7, r3
    772e:	781b      	ldrb	r3, [r3, #0]
}
    7730:	0018      	movs	r0, r3
    7732:	46bd      	mov	sp, r7
    7734:	b005      	add	sp, #20
    7736:	bd90      	pop	{r4, r7, pc}
    7738:	00007515 	.word	0x00007515
    773c:	00007469 	.word	0x00007469
    7740:	0000022e 	.word	0x0000022e
    7744:	0000022f 	.word	0x0000022f
    7748:	00000215 	.word	0x00000215
    774c:	00000216 	.word	0x00000216
    7750:	00000217 	.word	0x00000217
    7754:	00000219 	.word	0x00000219
    7758:	0000021a 	.word	0x0000021a
    775c:	0000021b 	.word	0x0000021b
    7760:	0000021d 	.word	0x0000021d
    7764:	0000021e 	.word	0x0000021e
    7768:	0000021f 	.word	0x0000021f
    776c:	00007201 	.word	0x00007201
    7770:	000072d9 	.word	0x000072d9

00007774 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7774:	b580      	push	{r7, lr}
    7776:	b082      	sub	sp, #8
    7778:	af00      	add	r7, sp, #0
    777a:	6078      	str	r0, [r7, #4]
    777c:	6039      	str	r1, [r7, #0]
	clst -= 2;
    777e:	683b      	ldr	r3, [r7, #0]
    7780:	3b02      	subs	r3, #2
    7782:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	699b      	ldr	r3, [r3, #24]
    7788:	1e9a      	subs	r2, r3, #2
    778a:	683b      	ldr	r3, [r7, #0]
    778c:	429a      	cmp	r2, r3
    778e:	d801      	bhi.n	7794 <clust2sect+0x20>
    7790:	2300      	movs	r3, #0
    7792:	e007      	b.n	77a4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    7794:	687b      	ldr	r3, [r7, #4]
    7796:	789b      	ldrb	r3, [r3, #2]
    7798:	001a      	movs	r2, r3
    779a:	683b      	ldr	r3, [r7, #0]
    779c:	435a      	muls	r2, r3
    779e:	687b      	ldr	r3, [r7, #4]
    77a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77a2:	18d3      	adds	r3, r2, r3
}
    77a4:	0018      	movs	r0, r3
    77a6:	46bd      	mov	sp, r7
    77a8:	b002      	add	sp, #8
    77aa:	bd80      	pop	{r7, pc}

000077ac <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    77ac:	b580      	push	{r7, lr}
    77ae:	b086      	sub	sp, #24
    77b0:	af00      	add	r7, sp, #0
    77b2:	6078      	str	r0, [r7, #4]
    77b4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    77b6:	683b      	ldr	r3, [r7, #0]
    77b8:	2b01      	cmp	r3, #1
    77ba:	d904      	bls.n	77c6 <get_fat+0x1a>
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	699a      	ldr	r2, [r3, #24]
    77c0:	683b      	ldr	r3, [r7, #0]
    77c2:	429a      	cmp	r2, r3
    77c4:	d801      	bhi.n	77ca <get_fat+0x1e>
		return 1;
    77c6:	2301      	movs	r3, #1
    77c8:	e09f      	b.n	790a <get_fat+0x15e>

	switch (fs->fs_type) {
    77ca:	687b      	ldr	r3, [r7, #4]
    77cc:	781b      	ldrb	r3, [r3, #0]
    77ce:	2b02      	cmp	r3, #2
    77d0:	d048      	beq.n	7864 <get_fat+0xb8>
    77d2:	2b03      	cmp	r3, #3
    77d4:	d067      	beq.n	78a6 <get_fat+0xfa>
    77d6:	2b01      	cmp	r3, #1
    77d8:	d000      	beq.n	77dc <get_fat+0x30>
    77da:	e094      	b.n	7906 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    77dc:	683b      	ldr	r3, [r7, #0]
    77de:	617b      	str	r3, [r7, #20]
    77e0:	697b      	ldr	r3, [r7, #20]
    77e2:	085b      	lsrs	r3, r3, #1
    77e4:	697a      	ldr	r2, [r7, #20]
    77e6:	18d3      	adds	r3, r2, r3
    77e8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    77ea:	687b      	ldr	r3, [r7, #4]
    77ec:	6a1a      	ldr	r2, [r3, #32]
    77ee:	697b      	ldr	r3, [r7, #20]
    77f0:	0a5b      	lsrs	r3, r3, #9
    77f2:	18d2      	adds	r2, r2, r3
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	0011      	movs	r1, r2
    77f8:	0018      	movs	r0, r3
    77fa:	4b46      	ldr	r3, [pc, #280]	; (7914 <get_fat+0x168>)
    77fc:	4798      	blx	r3
    77fe:	1e03      	subs	r3, r0, #0
    7800:	d000      	beq.n	7804 <get_fat+0x58>
    7802:	e079      	b.n	78f8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    7804:	697b      	ldr	r3, [r7, #20]
    7806:	05db      	lsls	r3, r3, #23
    7808:	0ddb      	lsrs	r3, r3, #23
    780a:	687a      	ldr	r2, [r7, #4]
    780c:	2130      	movs	r1, #48	; 0x30
    780e:	18d3      	adds	r3, r2, r3
    7810:	185b      	adds	r3, r3, r1
    7812:	781b      	ldrb	r3, [r3, #0]
    7814:	613b      	str	r3, [r7, #16]
    7816:	697b      	ldr	r3, [r7, #20]
    7818:	3301      	adds	r3, #1
    781a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    781c:	687b      	ldr	r3, [r7, #4]
    781e:	6a1a      	ldr	r2, [r3, #32]
    7820:	697b      	ldr	r3, [r7, #20]
    7822:	0a5b      	lsrs	r3, r3, #9
    7824:	18d2      	adds	r2, r2, r3
    7826:	687b      	ldr	r3, [r7, #4]
    7828:	0011      	movs	r1, r2
    782a:	0018      	movs	r0, r3
    782c:	4b39      	ldr	r3, [pc, #228]	; (7914 <get_fat+0x168>)
    782e:	4798      	blx	r3
    7830:	1e03      	subs	r3, r0, #0
    7832:	d163      	bne.n	78fc <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    7834:	697b      	ldr	r3, [r7, #20]
    7836:	05db      	lsls	r3, r3, #23
    7838:	0ddb      	lsrs	r3, r3, #23
    783a:	687a      	ldr	r2, [r7, #4]
    783c:	2130      	movs	r1, #48	; 0x30
    783e:	18d3      	adds	r3, r2, r3
    7840:	185b      	adds	r3, r3, r1
    7842:	781b      	ldrb	r3, [r3, #0]
    7844:	021b      	lsls	r3, r3, #8
    7846:	001a      	movs	r2, r3
    7848:	693b      	ldr	r3, [r7, #16]
    784a:	4313      	orrs	r3, r2
    784c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    784e:	683b      	ldr	r3, [r7, #0]
    7850:	2201      	movs	r2, #1
    7852:	4013      	ands	r3, r2
    7854:	d002      	beq.n	785c <get_fat+0xb0>
    7856:	693b      	ldr	r3, [r7, #16]
    7858:	091b      	lsrs	r3, r3, #4
    785a:	e056      	b.n	790a <get_fat+0x15e>
    785c:	693b      	ldr	r3, [r7, #16]
    785e:	051b      	lsls	r3, r3, #20
    7860:	0d1b      	lsrs	r3, r3, #20
    7862:	e052      	b.n	790a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	6a1a      	ldr	r2, [r3, #32]
    7868:	683b      	ldr	r3, [r7, #0]
    786a:	0a1b      	lsrs	r3, r3, #8
    786c:	18d2      	adds	r2, r2, r3
    786e:	687b      	ldr	r3, [r7, #4]
    7870:	0011      	movs	r1, r2
    7872:	0018      	movs	r0, r3
    7874:	4b27      	ldr	r3, [pc, #156]	; (7914 <get_fat+0x168>)
    7876:	4798      	blx	r3
    7878:	1e03      	subs	r3, r0, #0
    787a:	d141      	bne.n	7900 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    787c:	683b      	ldr	r3, [r7, #0]
    787e:	005a      	lsls	r2, r3, #1
    7880:	23ff      	movs	r3, #255	; 0xff
    7882:	005b      	lsls	r3, r3, #1
    7884:	4013      	ands	r3, r2
    7886:	3330      	adds	r3, #48	; 0x30
    7888:	687a      	ldr	r2, [r7, #4]
    788a:	18d3      	adds	r3, r2, r3
    788c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    788e:	68fb      	ldr	r3, [r7, #12]
    7890:	3301      	adds	r3, #1
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	021b      	lsls	r3, r3, #8
    7896:	b21a      	sxth	r2, r3
    7898:	68fb      	ldr	r3, [r7, #12]
    789a:	781b      	ldrb	r3, [r3, #0]
    789c:	b21b      	sxth	r3, r3
    789e:	4313      	orrs	r3, r2
    78a0:	b21b      	sxth	r3, r3
    78a2:	b29b      	uxth	r3, r3
    78a4:	e031      	b.n	790a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    78a6:	687b      	ldr	r3, [r7, #4]
    78a8:	6a1a      	ldr	r2, [r3, #32]
    78aa:	683b      	ldr	r3, [r7, #0]
    78ac:	09db      	lsrs	r3, r3, #7
    78ae:	18d2      	adds	r2, r2, r3
    78b0:	687b      	ldr	r3, [r7, #4]
    78b2:	0011      	movs	r1, r2
    78b4:	0018      	movs	r0, r3
    78b6:	4b17      	ldr	r3, [pc, #92]	; (7914 <get_fat+0x168>)
    78b8:	4798      	blx	r3
    78ba:	1e03      	subs	r3, r0, #0
    78bc:	d122      	bne.n	7904 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    78be:	683b      	ldr	r3, [r7, #0]
    78c0:	009a      	lsls	r2, r3, #2
    78c2:	23fe      	movs	r3, #254	; 0xfe
    78c4:	005b      	lsls	r3, r3, #1
    78c6:	4013      	ands	r3, r2
    78c8:	3330      	adds	r3, #48	; 0x30
    78ca:	687a      	ldr	r2, [r7, #4]
    78cc:	18d3      	adds	r3, r2, r3
    78ce:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    78d0:	68fb      	ldr	r3, [r7, #12]
    78d2:	3303      	adds	r3, #3
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	061a      	lsls	r2, r3, #24
    78d8:	68fb      	ldr	r3, [r7, #12]
    78da:	3302      	adds	r3, #2
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	041b      	lsls	r3, r3, #16
    78e0:	4313      	orrs	r3, r2
    78e2:	68fa      	ldr	r2, [r7, #12]
    78e4:	3201      	adds	r2, #1
    78e6:	7812      	ldrb	r2, [r2, #0]
    78e8:	0212      	lsls	r2, r2, #8
    78ea:	4313      	orrs	r3, r2
    78ec:	68fa      	ldr	r2, [r7, #12]
    78ee:	7812      	ldrb	r2, [r2, #0]
    78f0:	4313      	orrs	r3, r2
    78f2:	011b      	lsls	r3, r3, #4
    78f4:	091b      	lsrs	r3, r3, #4
    78f6:	e008      	b.n	790a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    78f8:	46c0      	nop			; (mov r8, r8)
    78fa:	e004      	b.n	7906 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    78fc:	46c0      	nop			; (mov r8, r8)
    78fe:	e002      	b.n	7906 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7900:	46c0      	nop			; (mov r8, r8)
    7902:	e000      	b.n	7906 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7904:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7906:	2301      	movs	r3, #1
    7908:	425b      	negs	r3, r3
}
    790a:	0018      	movs	r0, r3
    790c:	46bd      	mov	sp, r7
    790e:	b006      	add	sp, #24
    7910:	bd80      	pop	{r7, pc}
    7912:	46c0      	nop			; (mov r8, r8)
    7914:	00007515 	.word	0x00007515

00007918 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7918:	b590      	push	{r4, r7, lr}
    791a:	b089      	sub	sp, #36	; 0x24
    791c:	af00      	add	r7, sp, #0
    791e:	60f8      	str	r0, [r7, #12]
    7920:	60b9      	str	r1, [r7, #8]
    7922:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7924:	68bb      	ldr	r3, [r7, #8]
    7926:	2b01      	cmp	r3, #1
    7928:	d904      	bls.n	7934 <put_fat+0x1c>
    792a:	68fb      	ldr	r3, [r7, #12]
    792c:	699a      	ldr	r2, [r3, #24]
    792e:	68bb      	ldr	r3, [r7, #8]
    7930:	429a      	cmp	r2, r3
    7932:	d804      	bhi.n	793e <put_fat+0x26>
		res = FR_INT_ERR;
    7934:	231f      	movs	r3, #31
    7936:	18fb      	adds	r3, r7, r3
    7938:	2202      	movs	r2, #2
    793a:	701a      	strb	r2, [r3, #0]
    793c:	e100      	b.n	7b40 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    793e:	68fb      	ldr	r3, [r7, #12]
    7940:	781b      	ldrb	r3, [r3, #0]
    7942:	2b02      	cmp	r3, #2
    7944:	d100      	bne.n	7948 <put_fat+0x30>
    7946:	e078      	b.n	7a3a <put_fat+0x122>
    7948:	2b03      	cmp	r3, #3
    794a:	d100      	bne.n	794e <put_fat+0x36>
    794c:	e09e      	b.n	7a8c <put_fat+0x174>
    794e:	2b01      	cmp	r3, #1
    7950:	d000      	beq.n	7954 <put_fat+0x3c>
    7952:	e0e6      	b.n	7b22 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7954:	68bb      	ldr	r3, [r7, #8]
    7956:	61bb      	str	r3, [r7, #24]
    7958:	69bb      	ldr	r3, [r7, #24]
    795a:	085b      	lsrs	r3, r3, #1
    795c:	69ba      	ldr	r2, [r7, #24]
    795e:	18d3      	adds	r3, r2, r3
    7960:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7962:	68fb      	ldr	r3, [r7, #12]
    7964:	6a1a      	ldr	r2, [r3, #32]
    7966:	69bb      	ldr	r3, [r7, #24]
    7968:	0a5b      	lsrs	r3, r3, #9
    796a:	18d2      	adds	r2, r2, r3
    796c:	231f      	movs	r3, #31
    796e:	18fc      	adds	r4, r7, r3
    7970:	68fb      	ldr	r3, [r7, #12]
    7972:	0011      	movs	r1, r2
    7974:	0018      	movs	r0, r3
    7976:	4b76      	ldr	r3, [pc, #472]	; (7b50 <put_fat+0x238>)
    7978:	4798      	blx	r3
    797a:	0003      	movs	r3, r0
    797c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    797e:	231f      	movs	r3, #31
    7980:	18fb      	adds	r3, r7, r3
    7982:	781b      	ldrb	r3, [r3, #0]
    7984:	2b00      	cmp	r3, #0
    7986:	d000      	beq.n	798a <put_fat+0x72>
    7988:	e0d0      	b.n	7b2c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    798a:	69bb      	ldr	r3, [r7, #24]
    798c:	05db      	lsls	r3, r3, #23
    798e:	0ddb      	lsrs	r3, r3, #23
    7990:	3330      	adds	r3, #48	; 0x30
    7992:	68fa      	ldr	r2, [r7, #12]
    7994:	18d3      	adds	r3, r2, r3
    7996:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7998:	68bb      	ldr	r3, [r7, #8]
    799a:	2201      	movs	r2, #1
    799c:	4013      	ands	r3, r2
    799e:	d00d      	beq.n	79bc <put_fat+0xa4>
    79a0:	697b      	ldr	r3, [r7, #20]
    79a2:	781b      	ldrb	r3, [r3, #0]
    79a4:	b25b      	sxtb	r3, r3
    79a6:	220f      	movs	r2, #15
    79a8:	4013      	ands	r3, r2
    79aa:	b25a      	sxtb	r2, r3
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	b2db      	uxtb	r3, r3
    79b0:	011b      	lsls	r3, r3, #4
    79b2:	b25b      	sxtb	r3, r3
    79b4:	4313      	orrs	r3, r2
    79b6:	b25b      	sxtb	r3, r3
    79b8:	b2db      	uxtb	r3, r3
    79ba:	e001      	b.n	79c0 <put_fat+0xa8>
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	b2db      	uxtb	r3, r3
    79c0:	697a      	ldr	r2, [r7, #20]
    79c2:	7013      	strb	r3, [r2, #0]
			bc++;
    79c4:	69bb      	ldr	r3, [r7, #24]
    79c6:	3301      	adds	r3, #1
    79c8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    79ca:	68fb      	ldr	r3, [r7, #12]
    79cc:	2201      	movs	r2, #1
    79ce:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    79d0:	68fb      	ldr	r3, [r7, #12]
    79d2:	6a1a      	ldr	r2, [r3, #32]
    79d4:	69bb      	ldr	r3, [r7, #24]
    79d6:	0a5b      	lsrs	r3, r3, #9
    79d8:	18d2      	adds	r2, r2, r3
    79da:	231f      	movs	r3, #31
    79dc:	18fc      	adds	r4, r7, r3
    79de:	68fb      	ldr	r3, [r7, #12]
    79e0:	0011      	movs	r1, r2
    79e2:	0018      	movs	r0, r3
    79e4:	4b5a      	ldr	r3, [pc, #360]	; (7b50 <put_fat+0x238>)
    79e6:	4798      	blx	r3
    79e8:	0003      	movs	r3, r0
    79ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    79ec:	231f      	movs	r3, #31
    79ee:	18fb      	adds	r3, r7, r3
    79f0:	781b      	ldrb	r3, [r3, #0]
    79f2:	2b00      	cmp	r3, #0
    79f4:	d000      	beq.n	79f8 <put_fat+0xe0>
    79f6:	e09b      	b.n	7b30 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    79f8:	69bb      	ldr	r3, [r7, #24]
    79fa:	05db      	lsls	r3, r3, #23
    79fc:	0ddb      	lsrs	r3, r3, #23
    79fe:	3330      	adds	r3, #48	; 0x30
    7a00:	68fa      	ldr	r2, [r7, #12]
    7a02:	18d3      	adds	r3, r2, r3
    7a04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7a06:	68bb      	ldr	r3, [r7, #8]
    7a08:	2201      	movs	r2, #1
    7a0a:	4013      	ands	r3, r2
    7a0c:	d003      	beq.n	7a16 <put_fat+0xfe>
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	091b      	lsrs	r3, r3, #4
    7a12:	b2db      	uxtb	r3, r3
    7a14:	e00e      	b.n	7a34 <put_fat+0x11c>
    7a16:	697b      	ldr	r3, [r7, #20]
    7a18:	781b      	ldrb	r3, [r3, #0]
    7a1a:	b25b      	sxtb	r3, r3
    7a1c:	220f      	movs	r2, #15
    7a1e:	4393      	bics	r3, r2
    7a20:	b25a      	sxtb	r2, r3
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	0a1b      	lsrs	r3, r3, #8
    7a26:	b25b      	sxtb	r3, r3
    7a28:	210f      	movs	r1, #15
    7a2a:	400b      	ands	r3, r1
    7a2c:	b25b      	sxtb	r3, r3
    7a2e:	4313      	orrs	r3, r2
    7a30:	b25b      	sxtb	r3, r3
    7a32:	b2db      	uxtb	r3, r3
    7a34:	697a      	ldr	r2, [r7, #20]
    7a36:	7013      	strb	r3, [r2, #0]
			break;
    7a38:	e07f      	b.n	7b3a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7a3a:	68fb      	ldr	r3, [r7, #12]
    7a3c:	6a1a      	ldr	r2, [r3, #32]
    7a3e:	68bb      	ldr	r3, [r7, #8]
    7a40:	0a1b      	lsrs	r3, r3, #8
    7a42:	18d2      	adds	r2, r2, r3
    7a44:	231f      	movs	r3, #31
    7a46:	18fc      	adds	r4, r7, r3
    7a48:	68fb      	ldr	r3, [r7, #12]
    7a4a:	0011      	movs	r1, r2
    7a4c:	0018      	movs	r0, r3
    7a4e:	4b40      	ldr	r3, [pc, #256]	; (7b50 <put_fat+0x238>)
    7a50:	4798      	blx	r3
    7a52:	0003      	movs	r3, r0
    7a54:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7a56:	231f      	movs	r3, #31
    7a58:	18fb      	adds	r3, r7, r3
    7a5a:	781b      	ldrb	r3, [r3, #0]
    7a5c:	2b00      	cmp	r3, #0
    7a5e:	d169      	bne.n	7b34 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7a60:	68bb      	ldr	r3, [r7, #8]
    7a62:	005a      	lsls	r2, r3, #1
    7a64:	23ff      	movs	r3, #255	; 0xff
    7a66:	005b      	lsls	r3, r3, #1
    7a68:	4013      	ands	r3, r2
    7a6a:	3330      	adds	r3, #48	; 0x30
    7a6c:	68fa      	ldr	r2, [r7, #12]
    7a6e:	18d3      	adds	r3, r2, r3
    7a70:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	b2da      	uxtb	r2, r3
    7a76:	697b      	ldr	r3, [r7, #20]
    7a78:	701a      	strb	r2, [r3, #0]
    7a7a:	697b      	ldr	r3, [r7, #20]
    7a7c:	3301      	adds	r3, #1
    7a7e:	687a      	ldr	r2, [r7, #4]
    7a80:	b292      	uxth	r2, r2
    7a82:	0a12      	lsrs	r2, r2, #8
    7a84:	b292      	uxth	r2, r2
    7a86:	b2d2      	uxtb	r2, r2
    7a88:	701a      	strb	r2, [r3, #0]
			break;
    7a8a:	e056      	b.n	7b3a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7a8c:	68fb      	ldr	r3, [r7, #12]
    7a8e:	6a1a      	ldr	r2, [r3, #32]
    7a90:	68bb      	ldr	r3, [r7, #8]
    7a92:	09db      	lsrs	r3, r3, #7
    7a94:	18d2      	adds	r2, r2, r3
    7a96:	231f      	movs	r3, #31
    7a98:	18fc      	adds	r4, r7, r3
    7a9a:	68fb      	ldr	r3, [r7, #12]
    7a9c:	0011      	movs	r1, r2
    7a9e:	0018      	movs	r0, r3
    7aa0:	4b2b      	ldr	r3, [pc, #172]	; (7b50 <put_fat+0x238>)
    7aa2:	4798      	blx	r3
    7aa4:	0003      	movs	r3, r0
    7aa6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7aa8:	231f      	movs	r3, #31
    7aaa:	18fb      	adds	r3, r7, r3
    7aac:	781b      	ldrb	r3, [r3, #0]
    7aae:	2b00      	cmp	r3, #0
    7ab0:	d142      	bne.n	7b38 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7ab2:	68bb      	ldr	r3, [r7, #8]
    7ab4:	009a      	lsls	r2, r3, #2
    7ab6:	23fe      	movs	r3, #254	; 0xfe
    7ab8:	005b      	lsls	r3, r3, #1
    7aba:	4013      	ands	r3, r2
    7abc:	3330      	adds	r3, #48	; 0x30
    7abe:	68fa      	ldr	r2, [r7, #12]
    7ac0:	18d3      	adds	r3, r2, r3
    7ac2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7ac4:	697b      	ldr	r3, [r7, #20]
    7ac6:	3303      	adds	r3, #3
    7ac8:	781b      	ldrb	r3, [r3, #0]
    7aca:	061a      	lsls	r2, r3, #24
    7acc:	697b      	ldr	r3, [r7, #20]
    7ace:	3302      	adds	r3, #2
    7ad0:	781b      	ldrb	r3, [r3, #0]
    7ad2:	041b      	lsls	r3, r3, #16
    7ad4:	4313      	orrs	r3, r2
    7ad6:	697a      	ldr	r2, [r7, #20]
    7ad8:	3201      	adds	r2, #1
    7ada:	7812      	ldrb	r2, [r2, #0]
    7adc:	0212      	lsls	r2, r2, #8
    7ade:	4313      	orrs	r3, r2
    7ae0:	697a      	ldr	r2, [r7, #20]
    7ae2:	7812      	ldrb	r2, [r2, #0]
    7ae4:	4313      	orrs	r3, r2
    7ae6:	0f1b      	lsrs	r3, r3, #28
    7ae8:	071b      	lsls	r3, r3, #28
    7aea:	687a      	ldr	r2, [r7, #4]
    7aec:	4313      	orrs	r3, r2
    7aee:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7af0:	687b      	ldr	r3, [r7, #4]
    7af2:	b2da      	uxtb	r2, r3
    7af4:	697b      	ldr	r3, [r7, #20]
    7af6:	701a      	strb	r2, [r3, #0]
    7af8:	697b      	ldr	r3, [r7, #20]
    7afa:	3301      	adds	r3, #1
    7afc:	687a      	ldr	r2, [r7, #4]
    7afe:	b292      	uxth	r2, r2
    7b00:	0a12      	lsrs	r2, r2, #8
    7b02:	b292      	uxth	r2, r2
    7b04:	b2d2      	uxtb	r2, r2
    7b06:	701a      	strb	r2, [r3, #0]
    7b08:	697b      	ldr	r3, [r7, #20]
    7b0a:	3302      	adds	r3, #2
    7b0c:	687a      	ldr	r2, [r7, #4]
    7b0e:	0c12      	lsrs	r2, r2, #16
    7b10:	b2d2      	uxtb	r2, r2
    7b12:	701a      	strb	r2, [r3, #0]
    7b14:	697b      	ldr	r3, [r7, #20]
    7b16:	3303      	adds	r3, #3
    7b18:	687a      	ldr	r2, [r7, #4]
    7b1a:	0e12      	lsrs	r2, r2, #24
    7b1c:	b2d2      	uxtb	r2, r2
    7b1e:	701a      	strb	r2, [r3, #0]
			break;
    7b20:	e00b      	b.n	7b3a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    7b22:	231f      	movs	r3, #31
    7b24:	18fb      	adds	r3, r7, r3
    7b26:	2202      	movs	r2, #2
    7b28:	701a      	strb	r2, [r3, #0]
    7b2a:	e006      	b.n	7b3a <put_fat+0x222>
			if (res != FR_OK) break;
    7b2c:	46c0      	nop			; (mov r8, r8)
    7b2e:	e004      	b.n	7b3a <put_fat+0x222>
			if (res != FR_OK) break;
    7b30:	46c0      	nop			; (mov r8, r8)
    7b32:	e002      	b.n	7b3a <put_fat+0x222>
			if (res != FR_OK) break;
    7b34:	46c0      	nop			; (mov r8, r8)
    7b36:	e000      	b.n	7b3a <put_fat+0x222>
			if (res != FR_OK) break;
    7b38:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7b3a:	68fb      	ldr	r3, [r7, #12]
    7b3c:	2201      	movs	r2, #1
    7b3e:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7b40:	231f      	movs	r3, #31
    7b42:	18fb      	adds	r3, r7, r3
    7b44:	781b      	ldrb	r3, [r3, #0]
}
    7b46:	0018      	movs	r0, r3
    7b48:	46bd      	mov	sp, r7
    7b4a:	b009      	add	sp, #36	; 0x24
    7b4c:	bd90      	pop	{r4, r7, pc}
    7b4e:	46c0      	nop			; (mov r8, r8)
    7b50:	00007515 	.word	0x00007515

00007b54 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7b54:	b590      	push	{r4, r7, lr}
    7b56:	b085      	sub	sp, #20
    7b58:	af00      	add	r7, sp, #0
    7b5a:	6078      	str	r0, [r7, #4]
    7b5c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7b5e:	683b      	ldr	r3, [r7, #0]
    7b60:	2b01      	cmp	r3, #1
    7b62:	d904      	bls.n	7b6e <remove_chain+0x1a>
    7b64:	687b      	ldr	r3, [r7, #4]
    7b66:	699a      	ldr	r2, [r3, #24]
    7b68:	683b      	ldr	r3, [r7, #0]
    7b6a:	429a      	cmp	r2, r3
    7b6c:	d804      	bhi.n	7b78 <remove_chain+0x24>
		res = FR_INT_ERR;
    7b6e:	230f      	movs	r3, #15
    7b70:	18fb      	adds	r3, r7, r3
    7b72:	2202      	movs	r2, #2
    7b74:	701a      	strb	r2, [r3, #0]
    7b76:	e045      	b.n	7c04 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7b78:	230f      	movs	r3, #15
    7b7a:	18fb      	adds	r3, r7, r3
    7b7c:	2200      	movs	r2, #0
    7b7e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7b80:	e037      	b.n	7bf2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7b82:	683a      	ldr	r2, [r7, #0]
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	0011      	movs	r1, r2
    7b88:	0018      	movs	r0, r3
    7b8a:	4b22      	ldr	r3, [pc, #136]	; (7c14 <remove_chain+0xc0>)
    7b8c:	4798      	blx	r3
    7b8e:	0003      	movs	r3, r0
    7b90:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7b92:	68bb      	ldr	r3, [r7, #8]
    7b94:	2b00      	cmp	r3, #0
    7b96:	d032      	beq.n	7bfe <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7b98:	68bb      	ldr	r3, [r7, #8]
    7b9a:	2b01      	cmp	r3, #1
    7b9c:	d104      	bne.n	7ba8 <remove_chain+0x54>
    7b9e:	230f      	movs	r3, #15
    7ba0:	18fb      	adds	r3, r7, r3
    7ba2:	2202      	movs	r2, #2
    7ba4:	701a      	strb	r2, [r3, #0]
    7ba6:	e02d      	b.n	7c04 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7ba8:	68bb      	ldr	r3, [r7, #8]
    7baa:	3301      	adds	r3, #1
    7bac:	d104      	bne.n	7bb8 <remove_chain+0x64>
    7bae:	230f      	movs	r3, #15
    7bb0:	18fb      	adds	r3, r7, r3
    7bb2:	2201      	movs	r2, #1
    7bb4:	701a      	strb	r2, [r3, #0]
    7bb6:	e025      	b.n	7c04 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7bb8:	230f      	movs	r3, #15
    7bba:	18fc      	adds	r4, r7, r3
    7bbc:	6839      	ldr	r1, [r7, #0]
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	2200      	movs	r2, #0
    7bc2:	0018      	movs	r0, r3
    7bc4:	4b14      	ldr	r3, [pc, #80]	; (7c18 <remove_chain+0xc4>)
    7bc6:	4798      	blx	r3
    7bc8:	0003      	movs	r3, r0
    7bca:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7bcc:	230f      	movs	r3, #15
    7bce:	18fb      	adds	r3, r7, r3
    7bd0:	781b      	ldrb	r3, [r3, #0]
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d115      	bne.n	7c02 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7bd6:	687b      	ldr	r3, [r7, #4]
    7bd8:	691b      	ldr	r3, [r3, #16]
    7bda:	3301      	adds	r3, #1
    7bdc:	d007      	beq.n	7bee <remove_chain+0x9a>
				fs->free_clust++;
    7bde:	687b      	ldr	r3, [r7, #4]
    7be0:	691b      	ldr	r3, [r3, #16]
    7be2:	1c5a      	adds	r2, r3, #1
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	2201      	movs	r2, #1
    7bec:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7bee:	68bb      	ldr	r3, [r7, #8]
    7bf0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7bf2:	687b      	ldr	r3, [r7, #4]
    7bf4:	699a      	ldr	r2, [r3, #24]
    7bf6:	683b      	ldr	r3, [r7, #0]
    7bf8:	429a      	cmp	r2, r3
    7bfa:	d8c2      	bhi.n	7b82 <remove_chain+0x2e>
    7bfc:	e002      	b.n	7c04 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7bfe:	46c0      	nop			; (mov r8, r8)
    7c00:	e000      	b.n	7c04 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7c02:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7c04:	230f      	movs	r3, #15
    7c06:	18fb      	adds	r3, r7, r3
    7c08:	781b      	ldrb	r3, [r3, #0]
}
    7c0a:	0018      	movs	r0, r3
    7c0c:	46bd      	mov	sp, r7
    7c0e:	b005      	add	sp, #20
    7c10:	bd90      	pop	{r4, r7, pc}
    7c12:	46c0      	nop			; (mov r8, r8)
    7c14:	000077ad 	.word	0x000077ad
    7c18:	00007919 	.word	0x00007919

00007c1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7c1c:	b590      	push	{r4, r7, lr}
    7c1e:	b087      	sub	sp, #28
    7c20:	af00      	add	r7, sp, #0
    7c22:	6078      	str	r0, [r7, #4]
    7c24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7c26:	683b      	ldr	r3, [r7, #0]
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d10d      	bne.n	7c48 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	68db      	ldr	r3, [r3, #12]
    7c30:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7c32:	693b      	ldr	r3, [r7, #16]
    7c34:	2b00      	cmp	r3, #0
    7c36:	d004      	beq.n	7c42 <create_chain+0x26>
    7c38:	687b      	ldr	r3, [r7, #4]
    7c3a:	699a      	ldr	r2, [r3, #24]
    7c3c:	693b      	ldr	r3, [r7, #16]
    7c3e:	429a      	cmp	r2, r3
    7c40:	d818      	bhi.n	7c74 <create_chain+0x58>
    7c42:	2301      	movs	r3, #1
    7c44:	613b      	str	r3, [r7, #16]
    7c46:	e015      	b.n	7c74 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7c48:	683a      	ldr	r2, [r7, #0]
    7c4a:	687b      	ldr	r3, [r7, #4]
    7c4c:	0011      	movs	r1, r2
    7c4e:	0018      	movs	r0, r3
    7c50:	4b3e      	ldr	r3, [pc, #248]	; (7d4c <create_chain+0x130>)
    7c52:	4798      	blx	r3
    7c54:	0003      	movs	r3, r0
    7c56:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7c58:	68bb      	ldr	r3, [r7, #8]
    7c5a:	2b01      	cmp	r3, #1
    7c5c:	d801      	bhi.n	7c62 <create_chain+0x46>
    7c5e:	2301      	movs	r3, #1
    7c60:	e070      	b.n	7d44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7c62:	687b      	ldr	r3, [r7, #4]
    7c64:	699a      	ldr	r2, [r3, #24]
    7c66:	68bb      	ldr	r3, [r7, #8]
    7c68:	429a      	cmp	r2, r3
    7c6a:	d901      	bls.n	7c70 <create_chain+0x54>
    7c6c:	68bb      	ldr	r3, [r7, #8]
    7c6e:	e069      	b.n	7d44 <create_chain+0x128>
		scl = clst;
    7c70:	683b      	ldr	r3, [r7, #0]
    7c72:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7c74:	693b      	ldr	r3, [r7, #16]
    7c76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7c78:	697b      	ldr	r3, [r7, #20]
    7c7a:	3301      	adds	r3, #1
    7c7c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	699a      	ldr	r2, [r3, #24]
    7c82:	697b      	ldr	r3, [r7, #20]
    7c84:	429a      	cmp	r2, r3
    7c86:	d807      	bhi.n	7c98 <create_chain+0x7c>
			ncl = 2;
    7c88:	2302      	movs	r3, #2
    7c8a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7c8c:	697a      	ldr	r2, [r7, #20]
    7c8e:	693b      	ldr	r3, [r7, #16]
    7c90:	429a      	cmp	r2, r3
    7c92:	d901      	bls.n	7c98 <create_chain+0x7c>
    7c94:	2300      	movs	r3, #0
    7c96:	e055      	b.n	7d44 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7c98:	697a      	ldr	r2, [r7, #20]
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	0011      	movs	r1, r2
    7c9e:	0018      	movs	r0, r3
    7ca0:	4b2a      	ldr	r3, [pc, #168]	; (7d4c <create_chain+0x130>)
    7ca2:	4798      	blx	r3
    7ca4:	0003      	movs	r3, r0
    7ca6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7ca8:	68bb      	ldr	r3, [r7, #8]
    7caa:	2b00      	cmp	r3, #0
    7cac:	d00d      	beq.n	7cca <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7cae:	68bb      	ldr	r3, [r7, #8]
    7cb0:	3301      	adds	r3, #1
    7cb2:	d002      	beq.n	7cba <create_chain+0x9e>
    7cb4:	68bb      	ldr	r3, [r7, #8]
    7cb6:	2b01      	cmp	r3, #1
    7cb8:	d101      	bne.n	7cbe <create_chain+0xa2>
			return cs;
    7cba:	68bb      	ldr	r3, [r7, #8]
    7cbc:	e042      	b.n	7d44 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7cbe:	697a      	ldr	r2, [r7, #20]
    7cc0:	693b      	ldr	r3, [r7, #16]
    7cc2:	429a      	cmp	r2, r3
    7cc4:	d1d8      	bne.n	7c78 <create_chain+0x5c>
    7cc6:	2300      	movs	r3, #0
    7cc8:	e03c      	b.n	7d44 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7cca:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7ccc:	230f      	movs	r3, #15
    7cce:	18fc      	adds	r4, r7, r3
    7cd0:	4a1f      	ldr	r2, [pc, #124]	; (7d50 <create_chain+0x134>)
    7cd2:	6979      	ldr	r1, [r7, #20]
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	0018      	movs	r0, r3
    7cd8:	4b1e      	ldr	r3, [pc, #120]	; (7d54 <create_chain+0x138>)
    7cda:	4798      	blx	r3
    7cdc:	0003      	movs	r3, r0
    7cde:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7ce0:	230f      	movs	r3, #15
    7ce2:	18fb      	adds	r3, r7, r3
    7ce4:	781b      	ldrb	r3, [r3, #0]
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d10c      	bne.n	7d04 <create_chain+0xe8>
    7cea:	683b      	ldr	r3, [r7, #0]
    7cec:	2b00      	cmp	r3, #0
    7cee:	d009      	beq.n	7d04 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7cf0:	230f      	movs	r3, #15
    7cf2:	18fc      	adds	r4, r7, r3
    7cf4:	697a      	ldr	r2, [r7, #20]
    7cf6:	6839      	ldr	r1, [r7, #0]
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	0018      	movs	r0, r3
    7cfc:	4b15      	ldr	r3, [pc, #84]	; (7d54 <create_chain+0x138>)
    7cfe:	4798      	blx	r3
    7d00:	0003      	movs	r3, r0
    7d02:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7d04:	230f      	movs	r3, #15
    7d06:	18fb      	adds	r3, r7, r3
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	d10f      	bne.n	7d2e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	697a      	ldr	r2, [r7, #20]
    7d12:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	691b      	ldr	r3, [r3, #16]
    7d18:	3301      	adds	r3, #1
    7d1a:	d012      	beq.n	7d42 <create_chain+0x126>
			fs->free_clust--;
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	691b      	ldr	r3, [r3, #16]
    7d20:	1e5a      	subs	r2, r3, #1
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7d26:	687b      	ldr	r3, [r7, #4]
    7d28:	2201      	movs	r2, #1
    7d2a:	715a      	strb	r2, [r3, #5]
    7d2c:	e009      	b.n	7d42 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7d2e:	230f      	movs	r3, #15
    7d30:	18fb      	adds	r3, r7, r3
    7d32:	781b      	ldrb	r3, [r3, #0]
    7d34:	2b01      	cmp	r3, #1
    7d36:	d102      	bne.n	7d3e <create_chain+0x122>
    7d38:	2301      	movs	r3, #1
    7d3a:	425b      	negs	r3, r3
    7d3c:	e000      	b.n	7d40 <create_chain+0x124>
    7d3e:	2301      	movs	r3, #1
    7d40:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7d42:	697b      	ldr	r3, [r7, #20]
}
    7d44:	0018      	movs	r0, r3
    7d46:	46bd      	mov	sp, r7
    7d48:	b007      	add	sp, #28
    7d4a:	bd90      	pop	{r4, r7, pc}
    7d4c:	000077ad 	.word	0x000077ad
    7d50:	0fffffff 	.word	0x0fffffff
    7d54:	00007919 	.word	0x00007919

00007d58 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7d58:	b580      	push	{r7, lr}
    7d5a:	b084      	sub	sp, #16
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
    7d60:	000a      	movs	r2, r1
    7d62:	1cbb      	adds	r3, r7, #2
    7d64:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7d66:	687b      	ldr	r3, [r7, #4]
    7d68:	1cba      	adds	r2, r7, #2
    7d6a:	8812      	ldrh	r2, [r2, #0]
    7d6c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7d6e:	687b      	ldr	r3, [r7, #4]
    7d70:	689b      	ldr	r3, [r3, #8]
    7d72:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7d74:	68fb      	ldr	r3, [r7, #12]
    7d76:	2b01      	cmp	r3, #1
    7d78:	d005      	beq.n	7d86 <dir_sdi+0x2e>
    7d7a:	687b      	ldr	r3, [r7, #4]
    7d7c:	681b      	ldr	r3, [r3, #0]
    7d7e:	699a      	ldr	r2, [r3, #24]
    7d80:	68fb      	ldr	r3, [r7, #12]
    7d82:	429a      	cmp	r2, r3
    7d84:	d801      	bhi.n	7d8a <dir_sdi+0x32>
		return FR_INT_ERR;
    7d86:	2302      	movs	r3, #2
    7d88:	e075      	b.n	7e76 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7d8a:	68fb      	ldr	r3, [r7, #12]
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d108      	bne.n	7da2 <dir_sdi+0x4a>
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	681b      	ldr	r3, [r3, #0]
    7d94:	781b      	ldrb	r3, [r3, #0]
    7d96:	2b03      	cmp	r3, #3
    7d98:	d103      	bne.n	7da2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7d9a:	687b      	ldr	r3, [r7, #4]
    7d9c:	681b      	ldr	r3, [r3, #0]
    7d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7da0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7da2:	68fb      	ldr	r3, [r7, #12]
    7da4:	2b00      	cmp	r3, #0
    7da6:	d116      	bne.n	7dd6 <dir_sdi+0x7e>
		dj->clust = clst;
    7da8:	687b      	ldr	r3, [r7, #4]
    7daa:	68fa      	ldr	r2, [r7, #12]
    7dac:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7dae:	687b      	ldr	r3, [r7, #4]
    7db0:	681b      	ldr	r3, [r3, #0]
    7db2:	891b      	ldrh	r3, [r3, #8]
    7db4:	1cba      	adds	r2, r7, #2
    7db6:	8812      	ldrh	r2, [r2, #0]
    7db8:	429a      	cmp	r2, r3
    7dba:	d301      	bcc.n	7dc0 <dir_sdi+0x68>
			return FR_INT_ERR;
    7dbc:	2302      	movs	r3, #2
    7dbe:	e05a      	b.n	7e76 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7dc0:	687b      	ldr	r3, [r7, #4]
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7dc6:	1cba      	adds	r2, r7, #2
    7dc8:	8812      	ldrh	r2, [r2, #0]
    7dca:	0912      	lsrs	r2, r2, #4
    7dcc:	b292      	uxth	r2, r2
    7dce:	189a      	adds	r2, r3, r2
    7dd0:	687b      	ldr	r3, [r7, #4]
    7dd2:	611a      	str	r2, [r3, #16]
    7dd4:	e042      	b.n	7e5c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7dd6:	687b      	ldr	r3, [r7, #4]
    7dd8:	681b      	ldr	r3, [r3, #0]
    7dda:	789b      	ldrb	r3, [r3, #2]
    7ddc:	b29a      	uxth	r2, r3
    7dde:	230a      	movs	r3, #10
    7de0:	18fb      	adds	r3, r7, r3
    7de2:	0112      	lsls	r2, r2, #4
    7de4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7de6:	e020      	b.n	7e2a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7de8:	687b      	ldr	r3, [r7, #4]
    7dea:	681b      	ldr	r3, [r3, #0]
    7dec:	68fa      	ldr	r2, [r7, #12]
    7dee:	0011      	movs	r1, r2
    7df0:	0018      	movs	r0, r3
    7df2:	4b23      	ldr	r3, [pc, #140]	; (7e80 <dir_sdi+0x128>)
    7df4:	4798      	blx	r3
    7df6:	0003      	movs	r3, r0
    7df8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7dfa:	68fb      	ldr	r3, [r7, #12]
    7dfc:	3301      	adds	r3, #1
    7dfe:	d101      	bne.n	7e04 <dir_sdi+0xac>
    7e00:	2301      	movs	r3, #1
    7e02:	e038      	b.n	7e76 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7e04:	68fb      	ldr	r3, [r7, #12]
    7e06:	2b01      	cmp	r3, #1
    7e08:	d905      	bls.n	7e16 <dir_sdi+0xbe>
    7e0a:	687b      	ldr	r3, [r7, #4]
    7e0c:	681b      	ldr	r3, [r3, #0]
    7e0e:	699a      	ldr	r2, [r3, #24]
    7e10:	68fb      	ldr	r3, [r7, #12]
    7e12:	429a      	cmp	r2, r3
    7e14:	d801      	bhi.n	7e1a <dir_sdi+0xc2>
				return FR_INT_ERR;
    7e16:	2302      	movs	r3, #2
    7e18:	e02d      	b.n	7e76 <dir_sdi+0x11e>
			idx -= ic;
    7e1a:	1cbb      	adds	r3, r7, #2
    7e1c:	1cb9      	adds	r1, r7, #2
    7e1e:	220a      	movs	r2, #10
    7e20:	18ba      	adds	r2, r7, r2
    7e22:	8809      	ldrh	r1, [r1, #0]
    7e24:	8812      	ldrh	r2, [r2, #0]
    7e26:	1a8a      	subs	r2, r1, r2
    7e28:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7e2a:	1cba      	adds	r2, r7, #2
    7e2c:	230a      	movs	r3, #10
    7e2e:	18fb      	adds	r3, r7, r3
    7e30:	8812      	ldrh	r2, [r2, #0]
    7e32:	881b      	ldrh	r3, [r3, #0]
    7e34:	429a      	cmp	r2, r3
    7e36:	d2d7      	bcs.n	7de8 <dir_sdi+0x90>
		}
		dj->clust = clst;
    7e38:	687b      	ldr	r3, [r7, #4]
    7e3a:	68fa      	ldr	r2, [r7, #12]
    7e3c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	681b      	ldr	r3, [r3, #0]
    7e42:	68fa      	ldr	r2, [r7, #12]
    7e44:	0011      	movs	r1, r2
    7e46:	0018      	movs	r0, r3
    7e48:	4b0e      	ldr	r3, [pc, #56]	; (7e84 <dir_sdi+0x12c>)
    7e4a:	4798      	blx	r3
    7e4c:	0002      	movs	r2, r0
    7e4e:	1cbb      	adds	r3, r7, #2
    7e50:	881b      	ldrh	r3, [r3, #0]
    7e52:	091b      	lsrs	r3, r3, #4
    7e54:	b29b      	uxth	r3, r3
    7e56:	18d2      	adds	r2, r2, r3
    7e58:	687b      	ldr	r3, [r7, #4]
    7e5a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	681b      	ldr	r3, [r3, #0]
    7e60:	3330      	adds	r3, #48	; 0x30
    7e62:	001a      	movs	r2, r3
    7e64:	1cbb      	adds	r3, r7, #2
    7e66:	881b      	ldrh	r3, [r3, #0]
    7e68:	210f      	movs	r1, #15
    7e6a:	400b      	ands	r3, r1
    7e6c:	015b      	lsls	r3, r3, #5
    7e6e:	18d2      	adds	r2, r2, r3
    7e70:	687b      	ldr	r3, [r7, #4]
    7e72:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7e74:	2300      	movs	r3, #0
}
    7e76:	0018      	movs	r0, r3
    7e78:	46bd      	mov	sp, r7
    7e7a:	b004      	add	sp, #16
    7e7c:	bd80      	pop	{r7, pc}
    7e7e:	46c0      	nop			; (mov r8, r8)
    7e80:	000077ad 	.word	0x000077ad
    7e84:	00007775 	.word	0x00007775

00007e88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7e88:	b590      	push	{r4, r7, lr}
    7e8a:	b085      	sub	sp, #20
    7e8c:	af00      	add	r7, sp, #0
    7e8e:	6078      	str	r0, [r7, #4]
    7e90:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7e92:	687b      	ldr	r3, [r7, #4]
    7e94:	88da      	ldrh	r2, [r3, #6]
    7e96:	2308      	movs	r3, #8
    7e98:	18fb      	adds	r3, r7, r3
    7e9a:	3201      	adds	r2, #1
    7e9c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7e9e:	2308      	movs	r3, #8
    7ea0:	18fb      	adds	r3, r7, r3
    7ea2:	881b      	ldrh	r3, [r3, #0]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d003      	beq.n	7eb0 <dir_next+0x28>
    7ea8:	687b      	ldr	r3, [r7, #4]
    7eaa:	691b      	ldr	r3, [r3, #16]
    7eac:	2b00      	cmp	r3, #0
    7eae:	d101      	bne.n	7eb4 <dir_next+0x2c>
		return FR_NO_FILE;
    7eb0:	2304      	movs	r3, #4
    7eb2:	e0d2      	b.n	805a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7eb4:	2308      	movs	r3, #8
    7eb6:	18fb      	adds	r3, r7, r3
    7eb8:	881b      	ldrh	r3, [r3, #0]
    7eba:	220f      	movs	r2, #15
    7ebc:	4013      	ands	r3, r2
    7ebe:	b29b      	uxth	r3, r3
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	d000      	beq.n	7ec6 <dir_next+0x3e>
    7ec4:	e0b6      	b.n	8034 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    7ec6:	687b      	ldr	r3, [r7, #4]
    7ec8:	691b      	ldr	r3, [r3, #16]
    7eca:	1c5a      	adds	r2, r3, #1
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	68db      	ldr	r3, [r3, #12]
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	d10a      	bne.n	7eee <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7ed8:	687b      	ldr	r3, [r7, #4]
    7eda:	681b      	ldr	r3, [r3, #0]
    7edc:	891b      	ldrh	r3, [r3, #8]
    7ede:	2208      	movs	r2, #8
    7ee0:	18ba      	adds	r2, r7, r2
    7ee2:	8812      	ldrh	r2, [r2, #0]
    7ee4:	429a      	cmp	r2, r3
    7ee6:	d200      	bcs.n	7eea <dir_next+0x62>
    7ee8:	e0a4      	b.n	8034 <dir_next+0x1ac>
				return FR_NO_FILE;
    7eea:	2304      	movs	r3, #4
    7eec:	e0b5      	b.n	805a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7eee:	2308      	movs	r3, #8
    7ef0:	18fb      	adds	r3, r7, r3
    7ef2:	881b      	ldrh	r3, [r3, #0]
    7ef4:	091b      	lsrs	r3, r3, #4
    7ef6:	b29b      	uxth	r3, r3
    7ef8:	001a      	movs	r2, r3
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	681b      	ldr	r3, [r3, #0]
    7efe:	789b      	ldrb	r3, [r3, #2]
    7f00:	3b01      	subs	r3, #1
    7f02:	4013      	ands	r3, r2
    7f04:	d000      	beq.n	7f08 <dir_next+0x80>
    7f06:	e095      	b.n	8034 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	681a      	ldr	r2, [r3, #0]
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	68db      	ldr	r3, [r3, #12]
    7f10:	0019      	movs	r1, r3
    7f12:	0010      	movs	r0, r2
    7f14:	4b53      	ldr	r3, [pc, #332]	; (8064 <dir_next+0x1dc>)
    7f16:	4798      	blx	r3
    7f18:	0003      	movs	r3, r0
    7f1a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    7f1c:	68fb      	ldr	r3, [r7, #12]
    7f1e:	2b01      	cmp	r3, #1
    7f20:	d801      	bhi.n	7f26 <dir_next+0x9e>
    7f22:	2302      	movs	r3, #2
    7f24:	e099      	b.n	805a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7f26:	68fb      	ldr	r3, [r7, #12]
    7f28:	3301      	adds	r3, #1
    7f2a:	d101      	bne.n	7f30 <dir_next+0xa8>
    7f2c:	2301      	movs	r3, #1
    7f2e:	e094      	b.n	805a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	681b      	ldr	r3, [r3, #0]
    7f34:	699a      	ldr	r2, [r3, #24]
    7f36:	68fb      	ldr	r3, [r7, #12]
    7f38:	429a      	cmp	r2, r3
    7f3a:	d900      	bls.n	7f3e <dir_next+0xb6>
    7f3c:	e06d      	b.n	801a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    7f3e:	683b      	ldr	r3, [r7, #0]
    7f40:	2b00      	cmp	r3, #0
    7f42:	d101      	bne.n	7f48 <dir_next+0xc0>
    7f44:	2304      	movs	r3, #4
    7f46:	e088      	b.n	805a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    7f48:	687b      	ldr	r3, [r7, #4]
    7f4a:	681a      	ldr	r2, [r3, #0]
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	68db      	ldr	r3, [r3, #12]
    7f50:	0019      	movs	r1, r3
    7f52:	0010      	movs	r0, r2
    7f54:	4b44      	ldr	r3, [pc, #272]	; (8068 <dir_next+0x1e0>)
    7f56:	4798      	blx	r3
    7f58:	0003      	movs	r3, r0
    7f5a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7f5c:	68fb      	ldr	r3, [r7, #12]
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d101      	bne.n	7f66 <dir_next+0xde>
    7f62:	2307      	movs	r3, #7
    7f64:	e079      	b.n	805a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    7f66:	68fb      	ldr	r3, [r7, #12]
    7f68:	2b01      	cmp	r3, #1
    7f6a:	d101      	bne.n	7f70 <dir_next+0xe8>
    7f6c:	2302      	movs	r3, #2
    7f6e:	e074      	b.n	805a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7f70:	68fb      	ldr	r3, [r7, #12]
    7f72:	3301      	adds	r3, #1
    7f74:	d101      	bne.n	7f7a <dir_next+0xf2>
    7f76:	2301      	movs	r3, #1
    7f78:	e06f      	b.n	805a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7f7a:	687b      	ldr	r3, [r7, #4]
    7f7c:	681b      	ldr	r3, [r3, #0]
    7f7e:	2100      	movs	r1, #0
    7f80:	0018      	movs	r0, r3
    7f82:	4b3a      	ldr	r3, [pc, #232]	; (806c <dir_next+0x1e4>)
    7f84:	4798      	blx	r3
    7f86:	1e03      	subs	r3, r0, #0
    7f88:	d001      	beq.n	7f8e <dir_next+0x106>
    7f8a:	2301      	movs	r3, #1
    7f8c:	e065      	b.n	805a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7f8e:	687b      	ldr	r3, [r7, #4]
    7f90:	681b      	ldr	r3, [r3, #0]
    7f92:	3330      	adds	r3, #48	; 0x30
    7f94:	0018      	movs	r0, r3
    7f96:	2380      	movs	r3, #128	; 0x80
    7f98:	009b      	lsls	r3, r3, #2
    7f9a:	001a      	movs	r2, r3
    7f9c:	2100      	movs	r1, #0
    7f9e:	4b34      	ldr	r3, [pc, #208]	; (8070 <dir_next+0x1e8>)
    7fa0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	681c      	ldr	r4, [r3, #0]
    7fa6:	687b      	ldr	r3, [r7, #4]
    7fa8:	681b      	ldr	r3, [r3, #0]
    7faa:	68fa      	ldr	r2, [r7, #12]
    7fac:	0011      	movs	r1, r2
    7fae:	0018      	movs	r0, r3
    7fb0:	4b30      	ldr	r3, [pc, #192]	; (8074 <dir_next+0x1ec>)
    7fb2:	4798      	blx	r3
    7fb4:	0003      	movs	r3, r0
    7fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7fb8:	230b      	movs	r3, #11
    7fba:	18fb      	adds	r3, r7, r3
    7fbc:	2200      	movs	r2, #0
    7fbe:	701a      	strb	r2, [r3, #0]
    7fc0:	e019      	b.n	7ff6 <dir_next+0x16e>
						dj->fs->wflag = 1;
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	681b      	ldr	r3, [r3, #0]
    7fc6:	2201      	movs	r2, #1
    7fc8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7fca:	687b      	ldr	r3, [r7, #4]
    7fcc:	681b      	ldr	r3, [r3, #0]
    7fce:	2100      	movs	r1, #0
    7fd0:	0018      	movs	r0, r3
    7fd2:	4b26      	ldr	r3, [pc, #152]	; (806c <dir_next+0x1e4>)
    7fd4:	4798      	blx	r3
    7fd6:	1e03      	subs	r3, r0, #0
    7fd8:	d001      	beq.n	7fde <dir_next+0x156>
    7fda:	2301      	movs	r3, #1
    7fdc:	e03d      	b.n	805a <dir_next+0x1d2>
						dj->fs->winsect++;
    7fde:	687b      	ldr	r3, [r7, #4]
    7fe0:	681b      	ldr	r3, [r3, #0]
    7fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7fe4:	3201      	adds	r2, #1
    7fe6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7fe8:	230b      	movs	r3, #11
    7fea:	18fb      	adds	r3, r7, r3
    7fec:	781a      	ldrb	r2, [r3, #0]
    7fee:	230b      	movs	r3, #11
    7ff0:	18fb      	adds	r3, r7, r3
    7ff2:	3201      	adds	r2, #1
    7ff4:	701a      	strb	r2, [r3, #0]
    7ff6:	687b      	ldr	r3, [r7, #4]
    7ff8:	681b      	ldr	r3, [r3, #0]
    7ffa:	789b      	ldrb	r3, [r3, #2]
    7ffc:	220b      	movs	r2, #11
    7ffe:	18ba      	adds	r2, r7, r2
    8000:	7812      	ldrb	r2, [r2, #0]
    8002:	429a      	cmp	r2, r3
    8004:	d3dd      	bcc.n	7fc2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	687a      	ldr	r2, [r7, #4]
    800c:	6812      	ldr	r2, [r2, #0]
    800e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8010:	220b      	movs	r2, #11
    8012:	18ba      	adds	r2, r7, r2
    8014:	7812      	ldrb	r2, [r2, #0]
    8016:	1a8a      	subs	r2, r1, r2
    8018:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    801a:	687b      	ldr	r3, [r7, #4]
    801c:	68fa      	ldr	r2, [r7, #12]
    801e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    8020:	687b      	ldr	r3, [r7, #4]
    8022:	681b      	ldr	r3, [r3, #0]
    8024:	68fa      	ldr	r2, [r7, #12]
    8026:	0011      	movs	r1, r2
    8028:	0018      	movs	r0, r3
    802a:	4b12      	ldr	r3, [pc, #72]	; (8074 <dir_next+0x1ec>)
    802c:	4798      	blx	r3
    802e:	0002      	movs	r2, r0
    8030:	687b      	ldr	r3, [r7, #4]
    8032:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	2208      	movs	r2, #8
    8038:	18ba      	adds	r2, r7, r2
    803a:	8812      	ldrh	r2, [r2, #0]
    803c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    803e:	687b      	ldr	r3, [r7, #4]
    8040:	681b      	ldr	r3, [r3, #0]
    8042:	3330      	adds	r3, #48	; 0x30
    8044:	001a      	movs	r2, r3
    8046:	2308      	movs	r3, #8
    8048:	18fb      	adds	r3, r7, r3
    804a:	881b      	ldrh	r3, [r3, #0]
    804c:	210f      	movs	r1, #15
    804e:	400b      	ands	r3, r1
    8050:	015b      	lsls	r3, r3, #5
    8052:	18d2      	adds	r2, r2, r3
    8054:	687b      	ldr	r3, [r7, #4]
    8056:	615a      	str	r2, [r3, #20]

	return FR_OK;
    8058:	2300      	movs	r3, #0
}
    805a:	0018      	movs	r0, r3
    805c:	46bd      	mov	sp, r7
    805e:	b005      	add	sp, #20
    8060:	bd90      	pop	{r4, r7, pc}
    8062:	46c0      	nop			; (mov r8, r8)
    8064:	000077ad 	.word	0x000077ad
    8068:	00007c1d 	.word	0x00007c1d
    806c:	00007515 	.word	0x00007515
    8070:	00007469 	.word	0x00007469
    8074:	00007775 	.word	0x00007775

00008078 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    8078:	b590      	push	{r4, r7, lr}
    807a:	b087      	sub	sp, #28
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
    8080:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    8082:	683b      	ldr	r3, [r7, #0]
    8084:	781b      	ldrb	r3, [r3, #0]
    8086:	001a      	movs	r2, r3
    8088:	2340      	movs	r3, #64	; 0x40
    808a:	439a      	bics	r2, r3
    808c:	0013      	movs	r3, r2
    808e:	1e5a      	subs	r2, r3, #1
    8090:	0013      	movs	r3, r2
    8092:	005b      	lsls	r3, r3, #1
    8094:	189b      	adds	r3, r3, r2
    8096:	009b      	lsls	r3, r3, #2
    8098:	189b      	adds	r3, r3, r2
    809a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    809c:	2300      	movs	r3, #0
    809e:	613b      	str	r3, [r7, #16]
    80a0:	230e      	movs	r3, #14
    80a2:	18fb      	adds	r3, r7, r3
    80a4:	2201      	movs	r2, #1
    80a6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    80a8:	4a31      	ldr	r2, [pc, #196]	; (8170 <cmp_lfn+0xf8>)
    80aa:	693b      	ldr	r3, [r7, #16]
    80ac:	18d3      	adds	r3, r2, r3
    80ae:	781b      	ldrb	r3, [r3, #0]
    80b0:	3301      	adds	r3, #1
    80b2:	683a      	ldr	r2, [r7, #0]
    80b4:	18d3      	adds	r3, r2, r3
    80b6:	781b      	ldrb	r3, [r3, #0]
    80b8:	021b      	lsls	r3, r3, #8
    80ba:	b21a      	sxth	r2, r3
    80bc:	492c      	ldr	r1, [pc, #176]	; (8170 <cmp_lfn+0xf8>)
    80be:	693b      	ldr	r3, [r7, #16]
    80c0:	18cb      	adds	r3, r1, r3
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	0019      	movs	r1, r3
    80c6:	683b      	ldr	r3, [r7, #0]
    80c8:	185b      	adds	r3, r3, r1
    80ca:	781b      	ldrb	r3, [r3, #0]
    80cc:	b21b      	sxth	r3, r3
    80ce:	4313      	orrs	r3, r2
    80d0:	b21a      	sxth	r2, r3
    80d2:	230c      	movs	r3, #12
    80d4:	18fb      	adds	r3, r7, r3
    80d6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    80d8:	230e      	movs	r3, #14
    80da:	18fb      	adds	r3, r7, r3
    80dc:	881b      	ldrh	r3, [r3, #0]
    80de:	2b00      	cmp	r3, #0
    80e0:	d01f      	beq.n	8122 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    80e2:	230e      	movs	r3, #14
    80e4:	18fc      	adds	r4, r7, r3
    80e6:	230c      	movs	r3, #12
    80e8:	18fb      	adds	r3, r7, r3
    80ea:	881b      	ldrh	r3, [r3, #0]
    80ec:	0018      	movs	r0, r3
    80ee:	4b21      	ldr	r3, [pc, #132]	; (8174 <cmp_lfn+0xfc>)
    80f0:	4798      	blx	r3
    80f2:	0003      	movs	r3, r0
    80f4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    80f6:	697b      	ldr	r3, [r7, #20]
    80f8:	2bfe      	cmp	r3, #254	; 0xfe
    80fa:	d810      	bhi.n	811e <cmp_lfn+0xa6>
    80fc:	697b      	ldr	r3, [r7, #20]
    80fe:	1c5a      	adds	r2, r3, #1
    8100:	617a      	str	r2, [r7, #20]
    8102:	005b      	lsls	r3, r3, #1
    8104:	687a      	ldr	r2, [r7, #4]
    8106:	18d3      	adds	r3, r2, r3
    8108:	881b      	ldrh	r3, [r3, #0]
    810a:	0018      	movs	r0, r3
    810c:	4b19      	ldr	r3, [pc, #100]	; (8174 <cmp_lfn+0xfc>)
    810e:	4798      	blx	r3
    8110:	0003      	movs	r3, r0
    8112:	001a      	movs	r2, r3
    8114:	230e      	movs	r3, #14
    8116:	18fb      	adds	r3, r7, r3
    8118:	881b      	ldrh	r3, [r3, #0]
    811a:	4293      	cmp	r3, r2
    811c:	d009      	beq.n	8132 <cmp_lfn+0xba>
				return 0;				/* Not matched */
    811e:	2300      	movs	r3, #0
    8120:	e022      	b.n	8168 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    8122:	230c      	movs	r3, #12
    8124:	18fb      	adds	r3, r7, r3
    8126:	881b      	ldrh	r3, [r3, #0]
    8128:	4a13      	ldr	r2, [pc, #76]	; (8178 <cmp_lfn+0x100>)
    812a:	4293      	cmp	r3, r2
    812c:	d001      	beq.n	8132 <cmp_lfn+0xba>
    812e:	2300      	movs	r3, #0
    8130:	e01a      	b.n	8168 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    8132:	693b      	ldr	r3, [r7, #16]
    8134:	3301      	adds	r3, #1
    8136:	613b      	str	r3, [r7, #16]
    8138:	693b      	ldr	r3, [r7, #16]
    813a:	2b0c      	cmp	r3, #12
    813c:	d9b4      	bls.n	80a8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    813e:	683b      	ldr	r3, [r7, #0]
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	001a      	movs	r2, r3
    8144:	2340      	movs	r3, #64	; 0x40
    8146:	4013      	ands	r3, r2
    8148:	d00d      	beq.n	8166 <cmp_lfn+0xee>
    814a:	230e      	movs	r3, #14
    814c:	18fb      	adds	r3, r7, r3
    814e:	881b      	ldrh	r3, [r3, #0]
    8150:	2b00      	cmp	r3, #0
    8152:	d008      	beq.n	8166 <cmp_lfn+0xee>
    8154:	697b      	ldr	r3, [r7, #20]
    8156:	005b      	lsls	r3, r3, #1
    8158:	687a      	ldr	r2, [r7, #4]
    815a:	18d3      	adds	r3, r2, r3
    815c:	881b      	ldrh	r3, [r3, #0]
    815e:	2b00      	cmp	r3, #0
    8160:	d001      	beq.n	8166 <cmp_lfn+0xee>
		return 0;
    8162:	2300      	movs	r3, #0
    8164:	e000      	b.n	8168 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    8166:	2301      	movs	r3, #1
}
    8168:	0018      	movs	r0, r3
    816a:	46bd      	mov	sp, r7
    816c:	b007      	add	sp, #28
    816e:	bd90      	pop	{r4, r7, pc}
    8170:	0000cf4c 	.word	0x0000cf4c
    8174:	0000aca9 	.word	0x0000aca9
    8178:	0000ffff 	.word	0x0000ffff

0000817c <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    817c:	b580      	push	{r7, lr}
    817e:	b086      	sub	sp, #24
    8180:	af00      	add	r7, sp, #0
    8182:	6078      	str	r0, [r7, #4]
    8184:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    8186:	683b      	ldr	r3, [r7, #0]
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	001a      	movs	r2, r3
    818c:	233f      	movs	r3, #63	; 0x3f
    818e:	4013      	ands	r3, r2
    8190:	1e5a      	subs	r2, r3, #1
    8192:	0013      	movs	r3, r2
    8194:	005b      	lsls	r3, r3, #1
    8196:	189b      	adds	r3, r3, r2
    8198:	009b      	lsls	r3, r3, #2
    819a:	189b      	adds	r3, r3, r2
    819c:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    819e:	2300      	movs	r3, #0
    81a0:	613b      	str	r3, [r7, #16]
    81a2:	230e      	movs	r3, #14
    81a4:	18fb      	adds	r3, r7, r3
    81a6:	2201      	movs	r2, #1
    81a8:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    81aa:	4a2b      	ldr	r2, [pc, #172]	; (8258 <pick_lfn+0xdc>)
    81ac:	693b      	ldr	r3, [r7, #16]
    81ae:	18d3      	adds	r3, r2, r3
    81b0:	781b      	ldrb	r3, [r3, #0]
    81b2:	3301      	adds	r3, #1
    81b4:	683a      	ldr	r2, [r7, #0]
    81b6:	18d3      	adds	r3, r2, r3
    81b8:	781b      	ldrb	r3, [r3, #0]
    81ba:	021b      	lsls	r3, r3, #8
    81bc:	b21a      	sxth	r2, r3
    81be:	4926      	ldr	r1, [pc, #152]	; (8258 <pick_lfn+0xdc>)
    81c0:	693b      	ldr	r3, [r7, #16]
    81c2:	18cb      	adds	r3, r1, r3
    81c4:	781b      	ldrb	r3, [r3, #0]
    81c6:	0019      	movs	r1, r3
    81c8:	683b      	ldr	r3, [r7, #0]
    81ca:	185b      	adds	r3, r3, r1
    81cc:	781b      	ldrb	r3, [r3, #0]
    81ce:	b21b      	sxth	r3, r3
    81d0:	4313      	orrs	r3, r2
    81d2:	b21a      	sxth	r2, r3
    81d4:	230c      	movs	r3, #12
    81d6:	18fb      	adds	r3, r7, r3
    81d8:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    81da:	230e      	movs	r3, #14
    81dc:	18fb      	adds	r3, r7, r3
    81de:	881b      	ldrh	r3, [r3, #0]
    81e0:	2b00      	cmp	r3, #0
    81e2:	d015      	beq.n	8210 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    81e4:	697b      	ldr	r3, [r7, #20]
    81e6:	2bfe      	cmp	r3, #254	; 0xfe
    81e8:	d901      	bls.n	81ee <pick_lfn+0x72>
    81ea:	2300      	movs	r3, #0
    81ec:	e030      	b.n	8250 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    81ee:	697b      	ldr	r3, [r7, #20]
    81f0:	1c5a      	adds	r2, r3, #1
    81f2:	617a      	str	r2, [r7, #20]
    81f4:	005b      	lsls	r3, r3, #1
    81f6:	687a      	ldr	r2, [r7, #4]
    81f8:	18d3      	adds	r3, r2, r3
    81fa:	220e      	movs	r2, #14
    81fc:	18ba      	adds	r2, r7, r2
    81fe:	210c      	movs	r1, #12
    8200:	1879      	adds	r1, r7, r1
    8202:	8809      	ldrh	r1, [r1, #0]
    8204:	8011      	strh	r1, [r2, #0]
    8206:	220e      	movs	r2, #14
    8208:	18ba      	adds	r2, r7, r2
    820a:	8812      	ldrh	r2, [r2, #0]
    820c:	801a      	strh	r2, [r3, #0]
    820e:	e007      	b.n	8220 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    8210:	230c      	movs	r3, #12
    8212:	18fb      	adds	r3, r7, r3
    8214:	881b      	ldrh	r3, [r3, #0]
    8216:	4a11      	ldr	r2, [pc, #68]	; (825c <pick_lfn+0xe0>)
    8218:	4293      	cmp	r3, r2
    821a:	d001      	beq.n	8220 <pick_lfn+0xa4>
    821c:	2300      	movs	r3, #0
    821e:	e017      	b.n	8250 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    8220:	693b      	ldr	r3, [r7, #16]
    8222:	3301      	adds	r3, #1
    8224:	613b      	str	r3, [r7, #16]
    8226:	693b      	ldr	r3, [r7, #16]
    8228:	2b0c      	cmp	r3, #12
    822a:	d9be      	bls.n	81aa <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    822c:	683b      	ldr	r3, [r7, #0]
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	001a      	movs	r2, r3
    8232:	2340      	movs	r3, #64	; 0x40
    8234:	4013      	ands	r3, r2
    8236:	d00a      	beq.n	824e <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    8238:	697b      	ldr	r3, [r7, #20]
    823a:	2bfe      	cmp	r3, #254	; 0xfe
    823c:	d901      	bls.n	8242 <pick_lfn+0xc6>
    823e:	2300      	movs	r3, #0
    8240:	e006      	b.n	8250 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    8242:	697b      	ldr	r3, [r7, #20]
    8244:	005b      	lsls	r3, r3, #1
    8246:	687a      	ldr	r2, [r7, #4]
    8248:	18d3      	adds	r3, r2, r3
    824a:	2200      	movs	r2, #0
    824c:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    824e:	2301      	movs	r3, #1
}
    8250:	0018      	movs	r0, r3
    8252:	46bd      	mov	sp, r7
    8254:	b006      	add	sp, #24
    8256:	bd80      	pop	{r7, pc}
    8258:	0000cf4c 	.word	0x0000cf4c
    825c:	0000ffff 	.word	0x0000ffff

00008260 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    8260:	b580      	push	{r7, lr}
    8262:	b088      	sub	sp, #32
    8264:	af00      	add	r7, sp, #0
    8266:	60f8      	str	r0, [r7, #12]
    8268:	60b9      	str	r1, [r7, #8]
    826a:	0019      	movs	r1, r3
    826c:	1dfb      	adds	r3, r7, #7
    826e:	701a      	strb	r2, [r3, #0]
    8270:	1dbb      	adds	r3, r7, #6
    8272:	1c0a      	adds	r2, r1, #0
    8274:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    8276:	68bb      	ldr	r3, [r7, #8]
    8278:	330d      	adds	r3, #13
    827a:	1dba      	adds	r2, r7, #6
    827c:	7812      	ldrb	r2, [r2, #0]
    827e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    8280:	68bb      	ldr	r3, [r7, #8]
    8282:	330b      	adds	r3, #11
    8284:	220f      	movs	r2, #15
    8286:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    8288:	68bb      	ldr	r3, [r7, #8]
    828a:	330c      	adds	r3, #12
    828c:	2200      	movs	r2, #0
    828e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    8290:	68bb      	ldr	r3, [r7, #8]
    8292:	331a      	adds	r3, #26
    8294:	2200      	movs	r2, #0
    8296:	701a      	strb	r2, [r3, #0]
    8298:	68bb      	ldr	r3, [r7, #8]
    829a:	331b      	adds	r3, #27
    829c:	2200      	movs	r2, #0
    829e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    82a0:	1dfb      	adds	r3, r7, #7
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	1e5a      	subs	r2, r3, #1
    82a6:	0013      	movs	r3, r2
    82a8:	005b      	lsls	r3, r3, #1
    82aa:	189b      	adds	r3, r3, r2
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	189b      	adds	r3, r3, r2
    82b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    82b2:	2316      	movs	r3, #22
    82b4:	18fb      	adds	r3, r7, r3
    82b6:	2200      	movs	r2, #0
    82b8:	801a      	strh	r2, [r3, #0]
    82ba:	2300      	movs	r3, #0
    82bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    82be:	2316      	movs	r3, #22
    82c0:	18fb      	adds	r3, r7, r3
    82c2:	881b      	ldrh	r3, [r3, #0]
    82c4:	4a28      	ldr	r2, [pc, #160]	; (8368 <fit_lfn+0x108>)
    82c6:	4293      	cmp	r3, r2
    82c8:	d009      	beq.n	82de <fit_lfn+0x7e>
    82ca:	69fb      	ldr	r3, [r7, #28]
    82cc:	1c5a      	adds	r2, r3, #1
    82ce:	61fa      	str	r2, [r7, #28]
    82d0:	005b      	lsls	r3, r3, #1
    82d2:	68fa      	ldr	r2, [r7, #12]
    82d4:	18d2      	adds	r2, r2, r3
    82d6:	2316      	movs	r3, #22
    82d8:	18fb      	adds	r3, r7, r3
    82da:	8812      	ldrh	r2, [r2, #0]
    82dc:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    82de:	4a23      	ldr	r2, [pc, #140]	; (836c <fit_lfn+0x10c>)
    82e0:	69bb      	ldr	r3, [r7, #24]
    82e2:	18d3      	adds	r3, r2, r3
    82e4:	781b      	ldrb	r3, [r3, #0]
    82e6:	001a      	movs	r2, r3
    82e8:	68bb      	ldr	r3, [r7, #8]
    82ea:	189b      	adds	r3, r3, r2
    82ec:	2216      	movs	r2, #22
    82ee:	18ba      	adds	r2, r7, r2
    82f0:	8812      	ldrh	r2, [r2, #0]
    82f2:	b2d2      	uxtb	r2, r2
    82f4:	701a      	strb	r2, [r3, #0]
    82f6:	4a1d      	ldr	r2, [pc, #116]	; (836c <fit_lfn+0x10c>)
    82f8:	69bb      	ldr	r3, [r7, #24]
    82fa:	18d3      	adds	r3, r2, r3
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	3301      	adds	r3, #1
    8300:	68ba      	ldr	r2, [r7, #8]
    8302:	18d3      	adds	r3, r2, r3
    8304:	2216      	movs	r2, #22
    8306:	18ba      	adds	r2, r7, r2
    8308:	8812      	ldrh	r2, [r2, #0]
    830a:	0a12      	lsrs	r2, r2, #8
    830c:	b292      	uxth	r2, r2
    830e:	b2d2      	uxtb	r2, r2
    8310:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    8312:	2316      	movs	r3, #22
    8314:	18fb      	adds	r3, r7, r3
    8316:	881b      	ldrh	r3, [r3, #0]
    8318:	2b00      	cmp	r3, #0
    831a:	d104      	bne.n	8326 <fit_lfn+0xc6>
    831c:	2316      	movs	r3, #22
    831e:	18fb      	adds	r3, r7, r3
    8320:	2201      	movs	r2, #1
    8322:	4252      	negs	r2, r2
    8324:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    8326:	69bb      	ldr	r3, [r7, #24]
    8328:	3301      	adds	r3, #1
    832a:	61bb      	str	r3, [r7, #24]
    832c:	69bb      	ldr	r3, [r7, #24]
    832e:	2b0c      	cmp	r3, #12
    8330:	d9c5      	bls.n	82be <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    8332:	2316      	movs	r3, #22
    8334:	18fb      	adds	r3, r7, r3
    8336:	881b      	ldrh	r3, [r3, #0]
    8338:	4a0b      	ldr	r2, [pc, #44]	; (8368 <fit_lfn+0x108>)
    833a:	4293      	cmp	r3, r2
    833c:	d006      	beq.n	834c <fit_lfn+0xec>
    833e:	69fb      	ldr	r3, [r7, #28]
    8340:	005b      	lsls	r3, r3, #1
    8342:	68fa      	ldr	r2, [r7, #12]
    8344:	18d3      	adds	r3, r2, r3
    8346:	881b      	ldrh	r3, [r3, #0]
    8348:	2b00      	cmp	r3, #0
    834a:	d105      	bne.n	8358 <fit_lfn+0xf8>
    834c:	1dfb      	adds	r3, r7, #7
    834e:	1dfa      	adds	r2, r7, #7
    8350:	7812      	ldrb	r2, [r2, #0]
    8352:	2140      	movs	r1, #64	; 0x40
    8354:	430a      	orrs	r2, r1
    8356:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    8358:	68bb      	ldr	r3, [r7, #8]
    835a:	1dfa      	adds	r2, r7, #7
    835c:	7812      	ldrb	r2, [r2, #0]
    835e:	701a      	strb	r2, [r3, #0]
}
    8360:	46c0      	nop			; (mov r8, r8)
    8362:	46bd      	mov	sp, r7
    8364:	b008      	add	sp, #32
    8366:	bd80      	pop	{r7, pc}
    8368:	0000ffff 	.word	0x0000ffff
    836c:	0000cf4c 	.word	0x0000cf4c

00008370 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    8370:	b580      	push	{r7, lr}
    8372:	b08a      	sub	sp, #40	; 0x28
    8374:	af00      	add	r7, sp, #0
    8376:	60f8      	str	r0, [r7, #12]
    8378:	60b9      	str	r1, [r7, #8]
    837a:	607a      	str	r2, [r7, #4]
    837c:	001a      	movs	r2, r3
    837e:	1cbb      	adds	r3, r7, #2
    8380:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    8382:	68b9      	ldr	r1, [r7, #8]
    8384:	68fb      	ldr	r3, [r7, #12]
    8386:	220b      	movs	r2, #11
    8388:	0018      	movs	r0, r3
    838a:	4b38      	ldr	r3, [pc, #224]	; (846c <gen_numname+0xfc>)
    838c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    838e:	1cbb      	adds	r3, r7, #2
    8390:	881b      	ldrh	r3, [r3, #0]
    8392:	2b05      	cmp	r3, #5
    8394:	d911      	bls.n	83ba <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    8396:	1cbb      	adds	r3, r7, #2
    8398:	881b      	ldrh	r3, [r3, #0]
    839a:	b29a      	uxth	r2, r3
    839c:	0852      	lsrs	r2, r2, #1
    839e:	03db      	lsls	r3, r3, #15
    83a0:	4313      	orrs	r3, r2
    83a2:	b299      	uxth	r1, r3
    83a4:	687b      	ldr	r3, [r7, #4]
    83a6:	1c9a      	adds	r2, r3, #2
    83a8:	607a      	str	r2, [r7, #4]
    83aa:	881a      	ldrh	r2, [r3, #0]
    83ac:	1cbb      	adds	r3, r7, #2
    83ae:	188a      	adds	r2, r1, r2
    83b0:	801a      	strh	r2, [r3, #0]
    83b2:	687b      	ldr	r3, [r7, #4]
    83b4:	881b      	ldrh	r3, [r3, #0]
    83b6:	2b00      	cmp	r3, #0
    83b8:	d1ed      	bne.n	8396 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    83ba:	2307      	movs	r3, #7
    83bc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    83be:	1cbb      	adds	r3, r7, #2
    83c0:	881b      	ldrh	r3, [r3, #0]
    83c2:	b2db      	uxtb	r3, r3
    83c4:	220f      	movs	r2, #15
    83c6:	4013      	ands	r3, r2
    83c8:	b2da      	uxtb	r2, r3
    83ca:	2327      	movs	r3, #39	; 0x27
    83cc:	18fb      	adds	r3, r7, r3
    83ce:	3230      	adds	r2, #48	; 0x30
    83d0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    83d2:	2327      	movs	r3, #39	; 0x27
    83d4:	18fb      	adds	r3, r7, r3
    83d6:	781b      	ldrb	r3, [r3, #0]
    83d8:	2b39      	cmp	r3, #57	; 0x39
    83da:	d906      	bls.n	83ea <gen_numname+0x7a>
    83dc:	2327      	movs	r3, #39	; 0x27
    83de:	18fb      	adds	r3, r7, r3
    83e0:	2227      	movs	r2, #39	; 0x27
    83e2:	18ba      	adds	r2, r7, r2
    83e4:	7812      	ldrb	r2, [r2, #0]
    83e6:	3207      	adds	r2, #7
    83e8:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    83ea:	6a3b      	ldr	r3, [r7, #32]
    83ec:	1e5a      	subs	r2, r3, #1
    83ee:	623a      	str	r2, [r7, #32]
    83f0:	2214      	movs	r2, #20
    83f2:	18ba      	adds	r2, r7, r2
    83f4:	2127      	movs	r1, #39	; 0x27
    83f6:	1879      	adds	r1, r7, r1
    83f8:	7809      	ldrb	r1, [r1, #0]
    83fa:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    83fc:	1cbb      	adds	r3, r7, #2
    83fe:	1cba      	adds	r2, r7, #2
    8400:	8812      	ldrh	r2, [r2, #0]
    8402:	0912      	lsrs	r2, r2, #4
    8404:	801a      	strh	r2, [r3, #0]
	} while (seq);
    8406:	1cbb      	adds	r3, r7, #2
    8408:	881b      	ldrh	r3, [r3, #0]
    840a:	2b00      	cmp	r3, #0
    840c:	d1d7      	bne.n	83be <gen_numname+0x4e>
	ns[i] = '~';
    840e:	2314      	movs	r3, #20
    8410:	18fa      	adds	r2, r7, r3
    8412:	6a3b      	ldr	r3, [r7, #32]
    8414:	18d3      	adds	r3, r2, r3
    8416:	227e      	movs	r2, #126	; 0x7e
    8418:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    841a:	2300      	movs	r3, #0
    841c:	61fb      	str	r3, [r7, #28]
    841e:	e002      	b.n	8426 <gen_numname+0xb6>
    8420:	69fb      	ldr	r3, [r7, #28]
    8422:	3301      	adds	r3, #1
    8424:	61fb      	str	r3, [r7, #28]
    8426:	69fa      	ldr	r2, [r7, #28]
    8428:	6a3b      	ldr	r3, [r7, #32]
    842a:	429a      	cmp	r2, r3
    842c:	d205      	bcs.n	843a <gen_numname+0xca>
    842e:	68fa      	ldr	r2, [r7, #12]
    8430:	69fb      	ldr	r3, [r7, #28]
    8432:	18d3      	adds	r3, r2, r3
    8434:	781b      	ldrb	r3, [r3, #0]
    8436:	2b20      	cmp	r3, #32
    8438:	d1f2      	bne.n	8420 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    843a:	69fb      	ldr	r3, [r7, #28]
    843c:	1c5a      	adds	r2, r3, #1
    843e:	61fa      	str	r2, [r7, #28]
    8440:	68fa      	ldr	r2, [r7, #12]
    8442:	18d2      	adds	r2, r2, r3
    8444:	6a3b      	ldr	r3, [r7, #32]
    8446:	2b07      	cmp	r3, #7
    8448:	d806      	bhi.n	8458 <gen_numname+0xe8>
    844a:	6a3b      	ldr	r3, [r7, #32]
    844c:	1c59      	adds	r1, r3, #1
    844e:	6239      	str	r1, [r7, #32]
    8450:	2114      	movs	r1, #20
    8452:	1879      	adds	r1, r7, r1
    8454:	5ccb      	ldrb	r3, [r1, r3]
    8456:	e000      	b.n	845a <gen_numname+0xea>
    8458:	2320      	movs	r3, #32
    845a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    845c:	69fb      	ldr	r3, [r7, #28]
    845e:	2b07      	cmp	r3, #7
    8460:	d9eb      	bls.n	843a <gen_numname+0xca>
}
    8462:	46c0      	nop			; (mov r8, r8)
    8464:	46bd      	mov	sp, r7
    8466:	b00a      	add	sp, #40	; 0x28
    8468:	bd80      	pop	{r7, pc}
    846a:	46c0      	nop			; (mov r8, r8)
    846c:	00007431 	.word	0x00007431

00008470 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    8470:	b580      	push	{r7, lr}
    8472:	b084      	sub	sp, #16
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    8478:	230f      	movs	r3, #15
    847a:	18fb      	adds	r3, r7, r3
    847c:	2200      	movs	r2, #0
    847e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    8480:	230b      	movs	r3, #11
    8482:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    8484:	230f      	movs	r3, #15
    8486:	18fb      	adds	r3, r7, r3
    8488:	781b      	ldrb	r3, [r3, #0]
    848a:	b2da      	uxtb	r2, r3
    848c:	0852      	lsrs	r2, r2, #1
    848e:	01db      	lsls	r3, r3, #7
    8490:	4313      	orrs	r3, r2
    8492:	b2d9      	uxtb	r1, r3
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	1c5a      	adds	r2, r3, #1
    8498:	607a      	str	r2, [r7, #4]
    849a:	781a      	ldrb	r2, [r3, #0]
    849c:	230f      	movs	r3, #15
    849e:	18fb      	adds	r3, r7, r3
    84a0:	188a      	adds	r2, r1, r2
    84a2:	701a      	strb	r2, [r3, #0]
    84a4:	68bb      	ldr	r3, [r7, #8]
    84a6:	3b01      	subs	r3, #1
    84a8:	60bb      	str	r3, [r7, #8]
    84aa:	68bb      	ldr	r3, [r7, #8]
    84ac:	2b00      	cmp	r3, #0
    84ae:	d1e9      	bne.n	8484 <sum_sfn+0x14>
	return sum;
    84b0:	230f      	movs	r3, #15
    84b2:	18fb      	adds	r3, r7, r3
    84b4:	781b      	ldrb	r3, [r3, #0]
}
    84b6:	0018      	movs	r0, r3
    84b8:	46bd      	mov	sp, r7
    84ba:	b004      	add	sp, #16
    84bc:	bd80      	pop	{r7, pc}
	...

000084c0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    84c0:	b590      	push	{r4, r7, lr}
    84c2:	b087      	sub	sp, #28
    84c4:	af00      	add	r7, sp, #0
    84c6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    84c8:	2317      	movs	r3, #23
    84ca:	18fc      	adds	r4, r7, r3
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	2100      	movs	r1, #0
    84d0:	0018      	movs	r0, r3
    84d2:	4b74      	ldr	r3, [pc, #464]	; (86a4 <dir_find+0x1e4>)
    84d4:	4798      	blx	r3
    84d6:	0003      	movs	r3, r0
    84d8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    84da:	2317      	movs	r3, #23
    84dc:	18fb      	adds	r3, r7, r3
    84de:	781b      	ldrb	r3, [r3, #0]
    84e0:	2b00      	cmp	r3, #0
    84e2:	d003      	beq.n	84ec <dir_find+0x2c>
    84e4:	2317      	movs	r3, #23
    84e6:	18fb      	adds	r3, r7, r3
    84e8:	781b      	ldrb	r3, [r3, #0]
    84ea:	e0d6      	b.n	869a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    84ec:	2314      	movs	r3, #20
    84ee:	18fb      	adds	r3, r7, r3
    84f0:	22ff      	movs	r2, #255	; 0xff
    84f2:	701a      	strb	r2, [r3, #0]
    84f4:	2315      	movs	r3, #21
    84f6:	18fb      	adds	r3, r7, r3
    84f8:	2214      	movs	r2, #20
    84fa:	18ba      	adds	r2, r7, r2
    84fc:	7812      	ldrb	r2, [r2, #0]
    84fe:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	681a      	ldr	r2, [r3, #0]
    8504:	687b      	ldr	r3, [r7, #4]
    8506:	691b      	ldr	r3, [r3, #16]
    8508:	2117      	movs	r1, #23
    850a:	187c      	adds	r4, r7, r1
    850c:	0019      	movs	r1, r3
    850e:	0010      	movs	r0, r2
    8510:	4b65      	ldr	r3, [pc, #404]	; (86a8 <dir_find+0x1e8>)
    8512:	4798      	blx	r3
    8514:	0003      	movs	r3, r0
    8516:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8518:	2317      	movs	r3, #23
    851a:	18fb      	adds	r3, r7, r3
    851c:	781b      	ldrb	r3, [r3, #0]
    851e:	2b00      	cmp	r3, #0
    8520:	d000      	beq.n	8524 <dir_find+0x64>
    8522:	e0b2      	b.n	868a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	695b      	ldr	r3, [r3, #20]
    8528:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    852a:	2316      	movs	r3, #22
    852c:	18fb      	adds	r3, r7, r3
    852e:	693a      	ldr	r2, [r7, #16]
    8530:	7812      	ldrb	r2, [r2, #0]
    8532:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8534:	2316      	movs	r3, #22
    8536:	18fb      	adds	r3, r7, r3
    8538:	781b      	ldrb	r3, [r3, #0]
    853a:	2b00      	cmp	r3, #0
    853c:	d104      	bne.n	8548 <dir_find+0x88>
    853e:	2317      	movs	r3, #23
    8540:	18fb      	adds	r3, r7, r3
    8542:	2204      	movs	r2, #4
    8544:	701a      	strb	r2, [r3, #0]
    8546:	e0a5      	b.n	8694 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8548:	693b      	ldr	r3, [r7, #16]
    854a:	330b      	adds	r3, #11
    854c:	781a      	ldrb	r2, [r3, #0]
    854e:	230f      	movs	r3, #15
    8550:	18fb      	adds	r3, r7, r3
    8552:	213f      	movs	r1, #63	; 0x3f
    8554:	400a      	ands	r2, r1
    8556:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8558:	2316      	movs	r3, #22
    855a:	18fb      	adds	r3, r7, r3
    855c:	781b      	ldrb	r3, [r3, #0]
    855e:	2be5      	cmp	r3, #229	; 0xe5
    8560:	d00a      	beq.n	8578 <dir_find+0xb8>
    8562:	230f      	movs	r3, #15
    8564:	18fb      	adds	r3, r7, r3
    8566:	781b      	ldrb	r3, [r3, #0]
    8568:	2208      	movs	r2, #8
    856a:	4013      	ands	r3, r2
    856c:	d009      	beq.n	8582 <dir_find+0xc2>
    856e:	230f      	movs	r3, #15
    8570:	18fb      	adds	r3, r7, r3
    8572:	781b      	ldrb	r3, [r3, #0]
    8574:	2b0f      	cmp	r3, #15
    8576:	d004      	beq.n	8582 <dir_find+0xc2>
			ord = 0xFF;
    8578:	2315      	movs	r3, #21
    857a:	18fb      	adds	r3, r7, r3
    857c:	22ff      	movs	r2, #255	; 0xff
    857e:	701a      	strb	r2, [r3, #0]
    8580:	e073      	b.n	866a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    8582:	230f      	movs	r3, #15
    8584:	18fb      	adds	r3, r7, r3
    8586:	781b      	ldrb	r3, [r3, #0]
    8588:	2b0f      	cmp	r3, #15
    858a:	d145      	bne.n	8618 <dir_find+0x158>
				if (dj->lfn) {
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	69db      	ldr	r3, [r3, #28]
    8590:	2b00      	cmp	r3, #0
    8592:	d100      	bne.n	8596 <dir_find+0xd6>
    8594:	e069      	b.n	866a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    8596:	2316      	movs	r3, #22
    8598:	18fb      	adds	r3, r7, r3
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	2240      	movs	r2, #64	; 0x40
    859e:	4013      	ands	r3, r2
    85a0:	d016      	beq.n	85d0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    85a2:	2314      	movs	r3, #20
    85a4:	18fb      	adds	r3, r7, r3
    85a6:	693a      	ldr	r2, [r7, #16]
    85a8:	7b52      	ldrb	r2, [r2, #13]
    85aa:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    85ac:	2316      	movs	r3, #22
    85ae:	18fb      	adds	r3, r7, r3
    85b0:	2216      	movs	r2, #22
    85b2:	18ba      	adds	r2, r7, r2
    85b4:	7812      	ldrb	r2, [r2, #0]
    85b6:	2140      	movs	r1, #64	; 0x40
    85b8:	438a      	bics	r2, r1
    85ba:	701a      	strb	r2, [r3, #0]
    85bc:	2315      	movs	r3, #21
    85be:	18fb      	adds	r3, r7, r3
    85c0:	2216      	movs	r2, #22
    85c2:	18ba      	adds	r2, r7, r2
    85c4:	7812      	ldrb	r2, [r2, #0]
    85c6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    85c8:	687b      	ldr	r3, [r7, #4]
    85ca:	88da      	ldrh	r2, [r3, #6]
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    85d0:	2316      	movs	r3, #22
    85d2:	18fa      	adds	r2, r7, r3
    85d4:	2315      	movs	r3, #21
    85d6:	18fb      	adds	r3, r7, r3
    85d8:	7812      	ldrb	r2, [r2, #0]
    85da:	781b      	ldrb	r3, [r3, #0]
    85dc:	429a      	cmp	r2, r3
    85de:	d116      	bne.n	860e <dir_find+0x14e>
    85e0:	693b      	ldr	r3, [r7, #16]
    85e2:	330d      	adds	r3, #13
    85e4:	781b      	ldrb	r3, [r3, #0]
    85e6:	2214      	movs	r2, #20
    85e8:	18ba      	adds	r2, r7, r2
    85ea:	7812      	ldrb	r2, [r2, #0]
    85ec:	429a      	cmp	r2, r3
    85ee:	d10e      	bne.n	860e <dir_find+0x14e>
    85f0:	687b      	ldr	r3, [r7, #4]
    85f2:	69db      	ldr	r3, [r3, #28]
    85f4:	693a      	ldr	r2, [r7, #16]
    85f6:	0011      	movs	r1, r2
    85f8:	0018      	movs	r0, r3
    85fa:	4b2c      	ldr	r3, [pc, #176]	; (86ac <dir_find+0x1ec>)
    85fc:	4798      	blx	r3
    85fe:	1e03      	subs	r3, r0, #0
    8600:	d005      	beq.n	860e <dir_find+0x14e>
    8602:	2315      	movs	r3, #21
    8604:	18fb      	adds	r3, r7, r3
    8606:	781b      	ldrb	r3, [r3, #0]
    8608:	3b01      	subs	r3, #1
    860a:	b2da      	uxtb	r2, r3
    860c:	e000      	b.n	8610 <dir_find+0x150>
    860e:	22ff      	movs	r2, #255	; 0xff
    8610:	2315      	movs	r3, #21
    8612:	18fb      	adds	r3, r7, r3
    8614:	701a      	strb	r2, [r3, #0]
    8616:	e028      	b.n	866a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8618:	2315      	movs	r3, #21
    861a:	18fb      	adds	r3, r7, r3
    861c:	781b      	ldrb	r3, [r3, #0]
    861e:	2b00      	cmp	r3, #0
    8620:	d10a      	bne.n	8638 <dir_find+0x178>
    8622:	693b      	ldr	r3, [r7, #16]
    8624:	0018      	movs	r0, r3
    8626:	4b22      	ldr	r3, [pc, #136]	; (86b0 <dir_find+0x1f0>)
    8628:	4798      	blx	r3
    862a:	0003      	movs	r3, r0
    862c:	001a      	movs	r2, r3
    862e:	2314      	movs	r3, #20
    8630:	18fb      	adds	r3, r7, r3
    8632:	781b      	ldrb	r3, [r3, #0]
    8634:	4293      	cmp	r3, r2
    8636:	d02a      	beq.n	868e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    8638:	2315      	movs	r3, #21
    863a:	18fb      	adds	r3, r7, r3
    863c:	22ff      	movs	r2, #255	; 0xff
    863e:	701a      	strb	r2, [r3, #0]
    8640:	687b      	ldr	r3, [r7, #4]
    8642:	2201      	movs	r2, #1
    8644:	4252      	negs	r2, r2
    8646:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8648:	687b      	ldr	r3, [r7, #4]
    864a:	699b      	ldr	r3, [r3, #24]
    864c:	330b      	adds	r3, #11
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	001a      	movs	r2, r3
    8652:	2301      	movs	r3, #1
    8654:	4013      	ands	r3, r2
    8656:	d108      	bne.n	866a <dir_find+0x1aa>
    8658:	687b      	ldr	r3, [r7, #4]
    865a:	6999      	ldr	r1, [r3, #24]
    865c:	693b      	ldr	r3, [r7, #16]
    865e:	220b      	movs	r2, #11
    8660:	0018      	movs	r0, r3
    8662:	4b14      	ldr	r3, [pc, #80]	; (86b4 <dir_find+0x1f4>)
    8664:	4798      	blx	r3
    8666:	1e03      	subs	r3, r0, #0
    8668:	d013      	beq.n	8692 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    866a:	2317      	movs	r3, #23
    866c:	18fc      	adds	r4, r7, r3
    866e:	687b      	ldr	r3, [r7, #4]
    8670:	2100      	movs	r1, #0
    8672:	0018      	movs	r0, r3
    8674:	4b10      	ldr	r3, [pc, #64]	; (86b8 <dir_find+0x1f8>)
    8676:	4798      	blx	r3
    8678:	0003      	movs	r3, r0
    867a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    867c:	2317      	movs	r3, #23
    867e:	18fb      	adds	r3, r7, r3
    8680:	781b      	ldrb	r3, [r3, #0]
    8682:	2b00      	cmp	r3, #0
    8684:	d100      	bne.n	8688 <dir_find+0x1c8>
    8686:	e73b      	b.n	8500 <dir_find+0x40>
    8688:	e004      	b.n	8694 <dir_find+0x1d4>
		if (res != FR_OK) break;
    868a:	46c0      	nop			; (mov r8, r8)
    868c:	e002      	b.n	8694 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    868e:	46c0      	nop			; (mov r8, r8)
    8690:	e000      	b.n	8694 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8692:	46c0      	nop			; (mov r8, r8)

	return res;
    8694:	2317      	movs	r3, #23
    8696:	18fb      	adds	r3, r7, r3
    8698:	781b      	ldrb	r3, [r3, #0]
}
    869a:	0018      	movs	r0, r3
    869c:	46bd      	mov	sp, r7
    869e:	b007      	add	sp, #28
    86a0:	bd90      	pop	{r4, r7, pc}
    86a2:	46c0      	nop			; (mov r8, r8)
    86a4:	00007d59 	.word	0x00007d59
    86a8:	00007515 	.word	0x00007515
    86ac:	00008079 	.word	0x00008079
    86b0:	00008471 	.word	0x00008471
    86b4:	00007499 	.word	0x00007499
    86b8:	00007e89 	.word	0x00007e89

000086bc <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    86bc:	b590      	push	{r4, r7, lr}
    86be:	b087      	sub	sp, #28
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    86c4:	2315      	movs	r3, #21
    86c6:	18fb      	adds	r3, r7, r3
    86c8:	22ff      	movs	r2, #255	; 0xff
    86ca:	701a      	strb	r2, [r3, #0]
    86cc:	2314      	movs	r3, #20
    86ce:	18fb      	adds	r3, r7, r3
    86d0:	22ff      	movs	r2, #255	; 0xff
    86d2:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    86d4:	2317      	movs	r3, #23
    86d6:	18fb      	adds	r3, r7, r3
    86d8:	2204      	movs	r2, #4
    86da:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    86dc:	e0ae      	b.n	883c <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    86de:	687b      	ldr	r3, [r7, #4]
    86e0:	681a      	ldr	r2, [r3, #0]
    86e2:	687b      	ldr	r3, [r7, #4]
    86e4:	691b      	ldr	r3, [r3, #16]
    86e6:	2117      	movs	r1, #23
    86e8:	187c      	adds	r4, r7, r1
    86ea:	0019      	movs	r1, r3
    86ec:	0010      	movs	r0, r2
    86ee:	4b60      	ldr	r3, [pc, #384]	; (8870 <dir_read+0x1b4>)
    86f0:	4798      	blx	r3
    86f2:	0003      	movs	r3, r0
    86f4:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    86f6:	2317      	movs	r3, #23
    86f8:	18fb      	adds	r3, r7, r3
    86fa:	781b      	ldrb	r3, [r3, #0]
    86fc:	2b00      	cmp	r3, #0
    86fe:	d000      	beq.n	8702 <dir_read+0x46>
    8700:	e0a2      	b.n	8848 <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8702:	687b      	ldr	r3, [r7, #4]
    8704:	695b      	ldr	r3, [r3, #20]
    8706:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    8708:	2316      	movs	r3, #22
    870a:	18fb      	adds	r3, r7, r3
    870c:	693a      	ldr	r2, [r7, #16]
    870e:	7812      	ldrb	r2, [r2, #0]
    8710:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8712:	2316      	movs	r3, #22
    8714:	18fb      	adds	r3, r7, r3
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	2b00      	cmp	r3, #0
    871a:	d104      	bne.n	8726 <dir_read+0x6a>
    871c:	2317      	movs	r3, #23
    871e:	18fb      	adds	r3, r7, r3
    8720:	2204      	movs	r2, #4
    8722:	701a      	strb	r2, [r3, #0]
    8724:	e095      	b.n	8852 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8726:	693b      	ldr	r3, [r7, #16]
    8728:	330b      	adds	r3, #11
    872a:	781a      	ldrb	r2, [r3, #0]
    872c:	230f      	movs	r3, #15
    872e:	18fb      	adds	r3, r7, r3
    8730:	213f      	movs	r1, #63	; 0x3f
    8732:	400a      	ands	r2, r1
    8734:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8736:	2316      	movs	r3, #22
    8738:	18fb      	adds	r3, r7, r3
    873a:	781b      	ldrb	r3, [r3, #0]
    873c:	2be5      	cmp	r3, #229	; 0xe5
    873e:	d00f      	beq.n	8760 <dir_read+0xa4>
    8740:	2316      	movs	r3, #22
    8742:	18fb      	adds	r3, r7, r3
    8744:	781b      	ldrb	r3, [r3, #0]
    8746:	2b2e      	cmp	r3, #46	; 0x2e
    8748:	d00a      	beq.n	8760 <dir_read+0xa4>
    874a:	230f      	movs	r3, #15
    874c:	18fb      	adds	r3, r7, r3
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	2208      	movs	r2, #8
    8752:	4013      	ands	r3, r2
    8754:	d009      	beq.n	876a <dir_read+0xae>
    8756:	230f      	movs	r3, #15
    8758:	18fb      	adds	r3, r7, r3
    875a:	781b      	ldrb	r3, [r3, #0]
    875c:	2b0f      	cmp	r3, #15
    875e:	d004      	beq.n	876a <dir_read+0xae>
			ord = 0xFF;
    8760:	2315      	movs	r3, #21
    8762:	18fb      	adds	r3, r7, r3
    8764:	22ff      	movs	r2, #255	; 0xff
    8766:	701a      	strb	r2, [r3, #0]
    8768:	e05a      	b.n	8820 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    876a:	230f      	movs	r3, #15
    876c:	18fb      	adds	r3, r7, r3
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	2b0f      	cmp	r3, #15
    8772:	d140      	bne.n	87f6 <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    8774:	2316      	movs	r3, #22
    8776:	18fb      	adds	r3, r7, r3
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	2240      	movs	r2, #64	; 0x40
    877c:	4013      	ands	r3, r2
    877e:	d016      	beq.n	87ae <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    8780:	2314      	movs	r3, #20
    8782:	18fb      	adds	r3, r7, r3
    8784:	693a      	ldr	r2, [r7, #16]
    8786:	7b52      	ldrb	r2, [r2, #13]
    8788:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    878a:	2316      	movs	r3, #22
    878c:	18fb      	adds	r3, r7, r3
    878e:	2216      	movs	r2, #22
    8790:	18ba      	adds	r2, r7, r2
    8792:	7812      	ldrb	r2, [r2, #0]
    8794:	2140      	movs	r1, #64	; 0x40
    8796:	438a      	bics	r2, r1
    8798:	701a      	strb	r2, [r3, #0]
    879a:	2315      	movs	r3, #21
    879c:	18fb      	adds	r3, r7, r3
    879e:	2216      	movs	r2, #22
    87a0:	18ba      	adds	r2, r7, r2
    87a2:	7812      	ldrb	r2, [r2, #0]
    87a4:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    87a6:	687b      	ldr	r3, [r7, #4]
    87a8:	88da      	ldrh	r2, [r3, #6]
    87aa:	687b      	ldr	r3, [r7, #4]
    87ac:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    87ae:	2316      	movs	r3, #22
    87b0:	18fa      	adds	r2, r7, r3
    87b2:	2315      	movs	r3, #21
    87b4:	18fb      	adds	r3, r7, r3
    87b6:	7812      	ldrb	r2, [r2, #0]
    87b8:	781b      	ldrb	r3, [r3, #0]
    87ba:	429a      	cmp	r2, r3
    87bc:	d116      	bne.n	87ec <dir_read+0x130>
    87be:	693b      	ldr	r3, [r7, #16]
    87c0:	330d      	adds	r3, #13
    87c2:	781b      	ldrb	r3, [r3, #0]
    87c4:	2214      	movs	r2, #20
    87c6:	18ba      	adds	r2, r7, r2
    87c8:	7812      	ldrb	r2, [r2, #0]
    87ca:	429a      	cmp	r2, r3
    87cc:	d10e      	bne.n	87ec <dir_read+0x130>
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	69db      	ldr	r3, [r3, #28]
    87d2:	693a      	ldr	r2, [r7, #16]
    87d4:	0011      	movs	r1, r2
    87d6:	0018      	movs	r0, r3
    87d8:	4b26      	ldr	r3, [pc, #152]	; (8874 <dir_read+0x1b8>)
    87da:	4798      	blx	r3
    87dc:	1e03      	subs	r3, r0, #0
    87de:	d005      	beq.n	87ec <dir_read+0x130>
    87e0:	2315      	movs	r3, #21
    87e2:	18fb      	adds	r3, r7, r3
    87e4:	781b      	ldrb	r3, [r3, #0]
    87e6:	3b01      	subs	r3, #1
    87e8:	b2da      	uxtb	r2, r3
    87ea:	e000      	b.n	87ee <dir_read+0x132>
    87ec:	22ff      	movs	r2, #255	; 0xff
    87ee:	2315      	movs	r3, #21
    87f0:	18fb      	adds	r3, r7, r3
    87f2:	701a      	strb	r2, [r3, #0]
    87f4:	e014      	b.n	8820 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    87f6:	2315      	movs	r3, #21
    87f8:	18fb      	adds	r3, r7, r3
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	2b00      	cmp	r3, #0
    87fe:	d10a      	bne.n	8816 <dir_read+0x15a>
    8800:	693b      	ldr	r3, [r7, #16]
    8802:	0018      	movs	r0, r3
    8804:	4b1c      	ldr	r3, [pc, #112]	; (8878 <dir_read+0x1bc>)
    8806:	4798      	blx	r3
    8808:	0003      	movs	r3, r0
    880a:	001a      	movs	r2, r3
    880c:	2314      	movs	r3, #20
    880e:	18fb      	adds	r3, r7, r3
    8810:	781b      	ldrb	r3, [r3, #0]
    8812:	4293      	cmp	r3, r2
    8814:	d01a      	beq.n	884c <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    8816:	687b      	ldr	r3, [r7, #4]
    8818:	2201      	movs	r2, #1
    881a:	4252      	negs	r2, r2
    881c:	841a      	strh	r2, [r3, #32]
				break;
    881e:	e015      	b.n	884c <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    8820:	2317      	movs	r3, #23
    8822:	18fc      	adds	r4, r7, r3
    8824:	687b      	ldr	r3, [r7, #4]
    8826:	2100      	movs	r1, #0
    8828:	0018      	movs	r0, r3
    882a:	4b14      	ldr	r3, [pc, #80]	; (887c <dir_read+0x1c0>)
    882c:	4798      	blx	r3
    882e:	0003      	movs	r3, r0
    8830:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8832:	2317      	movs	r3, #23
    8834:	18fb      	adds	r3, r7, r3
    8836:	781b      	ldrb	r3, [r3, #0]
    8838:	2b00      	cmp	r3, #0
    883a:	d109      	bne.n	8850 <dir_read+0x194>
	while (dj->sect) {
    883c:	687b      	ldr	r3, [r7, #4]
    883e:	691b      	ldr	r3, [r3, #16]
    8840:	2b00      	cmp	r3, #0
    8842:	d000      	beq.n	8846 <dir_read+0x18a>
    8844:	e74b      	b.n	86de <dir_read+0x22>
    8846:	e004      	b.n	8852 <dir_read+0x196>
		if (res != FR_OK) break;
    8848:	46c0      	nop			; (mov r8, r8)
    884a:	e002      	b.n	8852 <dir_read+0x196>
				break;
    884c:	46c0      	nop			; (mov r8, r8)
    884e:	e000      	b.n	8852 <dir_read+0x196>
		if (res != FR_OK) break;
    8850:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    8852:	2317      	movs	r3, #23
    8854:	18fb      	adds	r3, r7, r3
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	2b00      	cmp	r3, #0
    885a:	d002      	beq.n	8862 <dir_read+0x1a6>
    885c:	687b      	ldr	r3, [r7, #4]
    885e:	2200      	movs	r2, #0
    8860:	611a      	str	r2, [r3, #16]

	return res;
    8862:	2317      	movs	r3, #23
    8864:	18fb      	adds	r3, r7, r3
    8866:	781b      	ldrb	r3, [r3, #0]
}
    8868:	0018      	movs	r0, r3
    886a:	46bd      	mov	sp, r7
    886c:	b007      	add	sp, #28
    886e:	bd90      	pop	{r4, r7, pc}
    8870:	00007515 	.word	0x00007515
    8874:	0000817d 	.word	0x0000817d
    8878:	00008471 	.word	0x00008471
    887c:	00007e89 	.word	0x00007e89

00008880 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8880:	b590      	push	{r4, r7, lr}
    8882:	b08d      	sub	sp, #52	; 0x34
    8884:	af00      	add	r7, sp, #0
    8886:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	699b      	ldr	r3, [r3, #24]
    888c:	627b      	str	r3, [r7, #36]	; 0x24
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	69db      	ldr	r3, [r3, #28]
    8892:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8894:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8896:	230c      	movs	r3, #12
    8898:	18fb      	adds	r3, r7, r3
    889a:	220c      	movs	r2, #12
    889c:	0018      	movs	r0, r3
    889e:	4bc8      	ldr	r3, [pc, #800]	; (8bc0 <dir_register+0x340>)
    88a0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    88a2:	230c      	movs	r3, #12
    88a4:	18fb      	adds	r3, r7, r3
    88a6:	7adb      	ldrb	r3, [r3, #11]
    88a8:	001a      	movs	r2, r3
    88aa:	2301      	movs	r3, #1
    88ac:	4013      	ands	r3, r2
    88ae:	d048      	beq.n	8942 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    88b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88b2:	330b      	adds	r3, #11
    88b4:	2200      	movs	r2, #0
    88b6:	701a      	strb	r2, [r3, #0]
    88b8:	687b      	ldr	r3, [r7, #4]
    88ba:	2200      	movs	r2, #0
    88bc:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    88be:	232c      	movs	r3, #44	; 0x2c
    88c0:	18fb      	adds	r3, r7, r3
    88c2:	2201      	movs	r2, #1
    88c4:	801a      	strh	r2, [r3, #0]
    88c6:	e01c      	b.n	8902 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    88c8:	232c      	movs	r3, #44	; 0x2c
    88ca:	18fb      	adds	r3, r7, r3
    88cc:	881b      	ldrh	r3, [r3, #0]
    88ce:	6a3a      	ldr	r2, [r7, #32]
    88d0:	210c      	movs	r1, #12
    88d2:	1879      	adds	r1, r7, r1
    88d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    88d6:	4cbb      	ldr	r4, [pc, #748]	; (8bc4 <dir_register+0x344>)
    88d8:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    88da:	232f      	movs	r3, #47	; 0x2f
    88dc:	18fc      	adds	r4, r7, r3
    88de:	687b      	ldr	r3, [r7, #4]
    88e0:	0018      	movs	r0, r3
    88e2:	4bb9      	ldr	r3, [pc, #740]	; (8bc8 <dir_register+0x348>)
    88e4:	4798      	blx	r3
    88e6:	0003      	movs	r3, r0
    88e8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    88ea:	232f      	movs	r3, #47	; 0x2f
    88ec:	18fb      	adds	r3, r7, r3
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	2b00      	cmp	r3, #0
    88f2:	d10c      	bne.n	890e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    88f4:	232c      	movs	r3, #44	; 0x2c
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	881a      	ldrh	r2, [r3, #0]
    88fa:	232c      	movs	r3, #44	; 0x2c
    88fc:	18fb      	adds	r3, r7, r3
    88fe:	3201      	adds	r2, #1
    8900:	801a      	strh	r2, [r3, #0]
    8902:	232c      	movs	r3, #44	; 0x2c
    8904:	18fb      	adds	r3, r7, r3
    8906:	881b      	ldrh	r3, [r3, #0]
    8908:	2b63      	cmp	r3, #99	; 0x63
    890a:	d9dd      	bls.n	88c8 <dir_register+0x48>
    890c:	e000      	b.n	8910 <dir_register+0x90>
			if (res != FR_OK) break;
    890e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8910:	232c      	movs	r3, #44	; 0x2c
    8912:	18fb      	adds	r3, r7, r3
    8914:	881b      	ldrh	r3, [r3, #0]
    8916:	2b64      	cmp	r3, #100	; 0x64
    8918:	d101      	bne.n	891e <dir_register+0x9e>
    891a:	2307      	movs	r3, #7
    891c:	e14c      	b.n	8bb8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    891e:	232f      	movs	r3, #47	; 0x2f
    8920:	18fb      	adds	r3, r7, r3
    8922:	781b      	ldrb	r3, [r3, #0]
    8924:	2b04      	cmp	r3, #4
    8926:	d003      	beq.n	8930 <dir_register+0xb0>
    8928:	232f      	movs	r3, #47	; 0x2f
    892a:	18fb      	adds	r3, r7, r3
    892c:	781b      	ldrb	r3, [r3, #0]
    892e:	e143      	b.n	8bb8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8932:	330b      	adds	r3, #11
    8934:	220c      	movs	r2, #12
    8936:	18ba      	adds	r2, r7, r2
    8938:	7ad2      	ldrb	r2, [r2, #11]
    893a:	701a      	strb	r2, [r3, #0]
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	6a3a      	ldr	r2, [r7, #32]
    8940:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8942:	230c      	movs	r3, #12
    8944:	18fb      	adds	r3, r7, r3
    8946:	7adb      	ldrb	r3, [r3, #11]
    8948:	001a      	movs	r2, r3
    894a:	2302      	movs	r3, #2
    894c:	4013      	ands	r3, r2
    894e:	d023      	beq.n	8998 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8950:	232a      	movs	r3, #42	; 0x2a
    8952:	18fb      	adds	r3, r7, r3
    8954:	2200      	movs	r2, #0
    8956:	801a      	strh	r2, [r3, #0]
    8958:	e006      	b.n	8968 <dir_register+0xe8>
    895a:	232a      	movs	r3, #42	; 0x2a
    895c:	18fb      	adds	r3, r7, r3
    895e:	881a      	ldrh	r2, [r3, #0]
    8960:	232a      	movs	r3, #42	; 0x2a
    8962:	18fb      	adds	r3, r7, r3
    8964:	3201      	adds	r2, #1
    8966:	801a      	strh	r2, [r3, #0]
    8968:	232a      	movs	r3, #42	; 0x2a
    896a:	18fb      	adds	r3, r7, r3
    896c:	881b      	ldrh	r3, [r3, #0]
    896e:	005b      	lsls	r3, r3, #1
    8970:	6a3a      	ldr	r2, [r7, #32]
    8972:	18d3      	adds	r3, r2, r3
    8974:	881b      	ldrh	r3, [r3, #0]
    8976:	2b00      	cmp	r3, #0
    8978:	d1ef      	bne.n	895a <dir_register+0xda>
		ne = (ne + 25) / 13;
    897a:	232a      	movs	r3, #42	; 0x2a
    897c:	18fb      	adds	r3, r7, r3
    897e:	881b      	ldrh	r3, [r3, #0]
    8980:	3319      	adds	r3, #25
    8982:	001a      	movs	r2, r3
    8984:	4b91      	ldr	r3, [pc, #580]	; (8bcc <dir_register+0x34c>)
    8986:	210d      	movs	r1, #13
    8988:	0010      	movs	r0, r2
    898a:	4798      	blx	r3
    898c:	0003      	movs	r3, r0
    898e:	001a      	movs	r2, r3
    8990:	232a      	movs	r3, #42	; 0x2a
    8992:	18fb      	adds	r3, r7, r3
    8994:	801a      	strh	r2, [r3, #0]
    8996:	e003      	b.n	89a0 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    8998:	232a      	movs	r3, #42	; 0x2a
    899a:	18fb      	adds	r3, r7, r3
    899c:	2201      	movs	r2, #1
    899e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    89a0:	232f      	movs	r3, #47	; 0x2f
    89a2:	18fc      	adds	r4, r7, r3
    89a4:	687b      	ldr	r3, [r7, #4]
    89a6:	2100      	movs	r1, #0
    89a8:	0018      	movs	r0, r3
    89aa:	4b89      	ldr	r3, [pc, #548]	; (8bd0 <dir_register+0x350>)
    89ac:	4798      	blx	r3
    89ae:	0003      	movs	r3, r0
    89b0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    89b2:	232f      	movs	r3, #47	; 0x2f
    89b4:	18fb      	adds	r3, r7, r3
    89b6:	781b      	ldrb	r3, [r3, #0]
    89b8:	2b00      	cmp	r3, #0
    89ba:	d003      	beq.n	89c4 <dir_register+0x144>
    89bc:	232f      	movs	r3, #47	; 0x2f
    89be:	18fb      	adds	r3, r7, r3
    89c0:	781b      	ldrb	r3, [r3, #0]
    89c2:	e0f9      	b.n	8bb8 <dir_register+0x338>
	n = is = 0;
    89c4:	2328      	movs	r3, #40	; 0x28
    89c6:	18fb      	adds	r3, r7, r3
    89c8:	2200      	movs	r2, #0
    89ca:	801a      	strh	r2, [r3, #0]
    89cc:	232c      	movs	r3, #44	; 0x2c
    89ce:	18fb      	adds	r3, r7, r3
    89d0:	2228      	movs	r2, #40	; 0x28
    89d2:	18ba      	adds	r2, r7, r2
    89d4:	8812      	ldrh	r2, [r2, #0]
    89d6:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    89d8:	687b      	ldr	r3, [r7, #4]
    89da:	681a      	ldr	r2, [r3, #0]
    89dc:	687b      	ldr	r3, [r7, #4]
    89de:	691b      	ldr	r3, [r3, #16]
    89e0:	212f      	movs	r1, #47	; 0x2f
    89e2:	187c      	adds	r4, r7, r1
    89e4:	0019      	movs	r1, r3
    89e6:	0010      	movs	r0, r2
    89e8:	4b7a      	ldr	r3, [pc, #488]	; (8bd4 <dir_register+0x354>)
    89ea:	4798      	blx	r3
    89ec:	0003      	movs	r3, r0
    89ee:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    89f0:	232f      	movs	r3, #47	; 0x2f
    89f2:	18fb      	adds	r3, r7, r3
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	2b00      	cmp	r3, #0
    89f8:	d13c      	bne.n	8a74 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	695a      	ldr	r2, [r3, #20]
    89fe:	231f      	movs	r3, #31
    8a00:	18fb      	adds	r3, r7, r3
    8a02:	7812      	ldrb	r2, [r2, #0]
    8a04:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8a06:	231f      	movs	r3, #31
    8a08:	18fb      	adds	r3, r7, r3
    8a0a:	781b      	ldrb	r3, [r3, #0]
    8a0c:	2be5      	cmp	r3, #229	; 0xe5
    8a0e:	d004      	beq.n	8a1a <dir_register+0x19a>
    8a10:	231f      	movs	r3, #31
    8a12:	18fb      	adds	r3, r7, r3
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	2b00      	cmp	r3, #0
    8a18:	d119      	bne.n	8a4e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    8a1a:	232c      	movs	r3, #44	; 0x2c
    8a1c:	18fb      	adds	r3, r7, r3
    8a1e:	881b      	ldrh	r3, [r3, #0]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d104      	bne.n	8a2e <dir_register+0x1ae>
    8a24:	2328      	movs	r3, #40	; 0x28
    8a26:	18fb      	adds	r3, r7, r3
    8a28:	687a      	ldr	r2, [r7, #4]
    8a2a:	88d2      	ldrh	r2, [r2, #6]
    8a2c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    8a2e:	232c      	movs	r3, #44	; 0x2c
    8a30:	18fb      	adds	r3, r7, r3
    8a32:	222c      	movs	r2, #44	; 0x2c
    8a34:	18ba      	adds	r2, r7, r2
    8a36:	8812      	ldrh	r2, [r2, #0]
    8a38:	3201      	adds	r2, #1
    8a3a:	801a      	strh	r2, [r3, #0]
    8a3c:	232c      	movs	r3, #44	; 0x2c
    8a3e:	18fa      	adds	r2, r7, r3
    8a40:	232a      	movs	r3, #42	; 0x2a
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	8812      	ldrh	r2, [r2, #0]
    8a46:	881b      	ldrh	r3, [r3, #0]
    8a48:	429a      	cmp	r2, r3
    8a4a:	d104      	bne.n	8a56 <dir_register+0x1d6>
    8a4c:	e013      	b.n	8a76 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8a4e:	232c      	movs	r3, #44	; 0x2c
    8a50:	18fb      	adds	r3, r7, r3
    8a52:	2200      	movs	r2, #0
    8a54:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    8a56:	232f      	movs	r3, #47	; 0x2f
    8a58:	18fc      	adds	r4, r7, r3
    8a5a:	687b      	ldr	r3, [r7, #4]
    8a5c:	2101      	movs	r1, #1
    8a5e:	0018      	movs	r0, r3
    8a60:	4b5d      	ldr	r3, [pc, #372]	; (8bd8 <dir_register+0x358>)
    8a62:	4798      	blx	r3
    8a64:	0003      	movs	r3, r0
    8a66:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8a68:	232f      	movs	r3, #47	; 0x2f
    8a6a:	18fb      	adds	r3, r7, r3
    8a6c:	781b      	ldrb	r3, [r3, #0]
    8a6e:	2b00      	cmp	r3, #0
    8a70:	d0b2      	beq.n	89d8 <dir_register+0x158>
    8a72:	e000      	b.n	8a76 <dir_register+0x1f6>
		if (res != FR_OK) break;
    8a74:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8a76:	232f      	movs	r3, #47	; 0x2f
    8a78:	18fb      	adds	r3, r7, r3
    8a7a:	781b      	ldrb	r3, [r3, #0]
    8a7c:	2b00      	cmp	r3, #0
    8a7e:	d163      	bne.n	8b48 <dir_register+0x2c8>
    8a80:	232a      	movs	r3, #42	; 0x2a
    8a82:	18fb      	adds	r3, r7, r3
    8a84:	881b      	ldrh	r3, [r3, #0]
    8a86:	2b01      	cmp	r3, #1
    8a88:	d95e      	bls.n	8b48 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    8a8a:	232f      	movs	r3, #47	; 0x2f
    8a8c:	18fc      	adds	r4, r7, r3
    8a8e:	2328      	movs	r3, #40	; 0x28
    8a90:	18fb      	adds	r3, r7, r3
    8a92:	881a      	ldrh	r2, [r3, #0]
    8a94:	687b      	ldr	r3, [r7, #4]
    8a96:	0011      	movs	r1, r2
    8a98:	0018      	movs	r0, r3
    8a9a:	4b4d      	ldr	r3, [pc, #308]	; (8bd0 <dir_register+0x350>)
    8a9c:	4798      	blx	r3
    8a9e:	0003      	movs	r3, r0
    8aa0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8aa2:	232f      	movs	r3, #47	; 0x2f
    8aa4:	18fb      	adds	r3, r7, r3
    8aa6:	781b      	ldrb	r3, [r3, #0]
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d14d      	bne.n	8b48 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8aac:	687b      	ldr	r3, [r7, #4]
    8aae:	699b      	ldr	r3, [r3, #24]
    8ab0:	221e      	movs	r2, #30
    8ab2:	18bc      	adds	r4, r7, r2
    8ab4:	0018      	movs	r0, r3
    8ab6:	4b49      	ldr	r3, [pc, #292]	; (8bdc <dir_register+0x35c>)
    8ab8:	4798      	blx	r3
    8aba:	0003      	movs	r3, r0
    8abc:	7023      	strb	r3, [r4, #0]
			ne--;
    8abe:	232a      	movs	r3, #42	; 0x2a
    8ac0:	18fb      	adds	r3, r7, r3
    8ac2:	881a      	ldrh	r2, [r3, #0]
    8ac4:	232a      	movs	r3, #42	; 0x2a
    8ac6:	18fb      	adds	r3, r7, r3
    8ac8:	3a01      	subs	r2, #1
    8aca:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8acc:	687b      	ldr	r3, [r7, #4]
    8ace:	681a      	ldr	r2, [r3, #0]
    8ad0:	687b      	ldr	r3, [r7, #4]
    8ad2:	691b      	ldr	r3, [r3, #16]
    8ad4:	212f      	movs	r1, #47	; 0x2f
    8ad6:	187c      	adds	r4, r7, r1
    8ad8:	0019      	movs	r1, r3
    8ada:	0010      	movs	r0, r2
    8adc:	4b3d      	ldr	r3, [pc, #244]	; (8bd4 <dir_register+0x354>)
    8ade:	4798      	blx	r3
    8ae0:	0003      	movs	r3, r0
    8ae2:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8ae4:	232f      	movs	r3, #47	; 0x2f
    8ae6:	18fb      	adds	r3, r7, r3
    8ae8:	781b      	ldrb	r3, [r3, #0]
    8aea:	2b00      	cmp	r3, #0
    8aec:	d12b      	bne.n	8b46 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	69d8      	ldr	r0, [r3, #28]
    8af2:	687b      	ldr	r3, [r7, #4]
    8af4:	6959      	ldr	r1, [r3, #20]
    8af6:	232a      	movs	r3, #42	; 0x2a
    8af8:	18fb      	adds	r3, r7, r3
    8afa:	881b      	ldrh	r3, [r3, #0]
    8afc:	b2da      	uxtb	r2, r3
    8afe:	231e      	movs	r3, #30
    8b00:	18fb      	adds	r3, r7, r3
    8b02:	781b      	ldrb	r3, [r3, #0]
    8b04:	4c36      	ldr	r4, [pc, #216]	; (8be0 <dir_register+0x360>)
    8b06:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	681b      	ldr	r3, [r3, #0]
    8b0c:	2201      	movs	r2, #1
    8b0e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8b10:	232f      	movs	r3, #47	; 0x2f
    8b12:	18fc      	adds	r4, r7, r3
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	2100      	movs	r1, #0
    8b18:	0018      	movs	r0, r3
    8b1a:	4b2f      	ldr	r3, [pc, #188]	; (8bd8 <dir_register+0x358>)
    8b1c:	4798      	blx	r3
    8b1e:	0003      	movs	r3, r0
    8b20:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8b22:	232f      	movs	r3, #47	; 0x2f
    8b24:	18fb      	adds	r3, r7, r3
    8b26:	781b      	ldrb	r3, [r3, #0]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d10d      	bne.n	8b48 <dir_register+0x2c8>
    8b2c:	232a      	movs	r3, #42	; 0x2a
    8b2e:	18fb      	adds	r3, r7, r3
    8b30:	222a      	movs	r2, #42	; 0x2a
    8b32:	18ba      	adds	r2, r7, r2
    8b34:	8812      	ldrh	r2, [r2, #0]
    8b36:	3a01      	subs	r2, #1
    8b38:	801a      	strh	r2, [r3, #0]
    8b3a:	232a      	movs	r3, #42	; 0x2a
    8b3c:	18fb      	adds	r3, r7, r3
    8b3e:	881b      	ldrh	r3, [r3, #0]
    8b40:	2b00      	cmp	r3, #0
    8b42:	d1c3      	bne.n	8acc <dir_register+0x24c>
    8b44:	e000      	b.n	8b48 <dir_register+0x2c8>
				if (res != FR_OK) break;
    8b46:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8b48:	232f      	movs	r3, #47	; 0x2f
    8b4a:	18fb      	adds	r3, r7, r3
    8b4c:	781b      	ldrb	r3, [r3, #0]
    8b4e:	2b00      	cmp	r3, #0
    8b50:	d12f      	bne.n	8bb2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8b52:	687b      	ldr	r3, [r7, #4]
    8b54:	681a      	ldr	r2, [r3, #0]
    8b56:	687b      	ldr	r3, [r7, #4]
    8b58:	691b      	ldr	r3, [r3, #16]
    8b5a:	212f      	movs	r1, #47	; 0x2f
    8b5c:	187c      	adds	r4, r7, r1
    8b5e:	0019      	movs	r1, r3
    8b60:	0010      	movs	r0, r2
    8b62:	4b1c      	ldr	r3, [pc, #112]	; (8bd4 <dir_register+0x354>)
    8b64:	4798      	blx	r3
    8b66:	0003      	movs	r3, r0
    8b68:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8b6a:	232f      	movs	r3, #47	; 0x2f
    8b6c:	18fb      	adds	r3, r7, r3
    8b6e:	781b      	ldrb	r3, [r3, #0]
    8b70:	2b00      	cmp	r3, #0
    8b72:	d11e      	bne.n	8bb2 <dir_register+0x332>
			dir = dj->dir;
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	695b      	ldr	r3, [r3, #20]
    8b78:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8b7a:	69bb      	ldr	r3, [r7, #24]
    8b7c:	2220      	movs	r2, #32
    8b7e:	2100      	movs	r1, #0
    8b80:	0018      	movs	r0, r3
    8b82:	4b18      	ldr	r3, [pc, #96]	; (8be4 <dir_register+0x364>)
    8b84:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8b86:	687b      	ldr	r3, [r7, #4]
    8b88:	6999      	ldr	r1, [r3, #24]
    8b8a:	69bb      	ldr	r3, [r7, #24]
    8b8c:	220b      	movs	r2, #11
    8b8e:	0018      	movs	r0, r3
    8b90:	4b0b      	ldr	r3, [pc, #44]	; (8bc0 <dir_register+0x340>)
    8b92:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8b94:	69bb      	ldr	r3, [r7, #24]
    8b96:	330c      	adds	r3, #12
    8b98:	001a      	movs	r2, r3
    8b9a:	687b      	ldr	r3, [r7, #4]
    8b9c:	699b      	ldr	r3, [r3, #24]
    8b9e:	330b      	adds	r3, #11
    8ba0:	781b      	ldrb	r3, [r3, #0]
    8ba2:	2118      	movs	r1, #24
    8ba4:	400b      	ands	r3, r1
    8ba6:	b2db      	uxtb	r3, r3
    8ba8:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	681b      	ldr	r3, [r3, #0]
    8bae:	2201      	movs	r2, #1
    8bb0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8bb2:	232f      	movs	r3, #47	; 0x2f
    8bb4:	18fb      	adds	r3, r7, r3
    8bb6:	781b      	ldrb	r3, [r3, #0]
}
    8bb8:	0018      	movs	r0, r3
    8bba:	46bd      	mov	sp, r7
    8bbc:	b00d      	add	sp, #52	; 0x34
    8bbe:	bd90      	pop	{r4, r7, pc}
    8bc0:	00007431 	.word	0x00007431
    8bc4:	00008371 	.word	0x00008371
    8bc8:	000084c1 	.word	0x000084c1
    8bcc:	0000bbb9 	.word	0x0000bbb9
    8bd0:	00007d59 	.word	0x00007d59
    8bd4:	00007515 	.word	0x00007515
    8bd8:	00007e89 	.word	0x00007e89
    8bdc:	00008471 	.word	0x00008471
    8be0:	00008261 	.word	0x00008261
    8be4:	00007469 	.word	0x00007469

00008be8 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8be8:	b590      	push	{r4, r7, lr}
    8bea:	b085      	sub	sp, #20
    8bec:	af00      	add	r7, sp, #0
    8bee:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    8bf0:	230c      	movs	r3, #12
    8bf2:	18fb      	adds	r3, r7, r3
    8bf4:	687a      	ldr	r2, [r7, #4]
    8bf6:	88d2      	ldrh	r2, [r2, #6]
    8bf8:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	8c1b      	ldrh	r3, [r3, #32]
    8bfe:	4a2c      	ldr	r2, [pc, #176]	; (8cb0 <dir_remove+0xc8>)
    8c00:	4293      	cmp	r3, r2
    8c02:	d002      	beq.n	8c0a <dir_remove+0x22>
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	8c1b      	ldrh	r3, [r3, #32]
    8c08:	e002      	b.n	8c10 <dir_remove+0x28>
    8c0a:	230c      	movs	r3, #12
    8c0c:	18fb      	adds	r3, r7, r3
    8c0e:	881b      	ldrh	r3, [r3, #0]
    8c10:	220f      	movs	r2, #15
    8c12:	18bc      	adds	r4, r7, r2
    8c14:	687a      	ldr	r2, [r7, #4]
    8c16:	0019      	movs	r1, r3
    8c18:	0010      	movs	r0, r2
    8c1a:	4b26      	ldr	r3, [pc, #152]	; (8cb4 <dir_remove+0xcc>)
    8c1c:	4798      	blx	r3
    8c1e:	0003      	movs	r3, r0
    8c20:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    8c22:	230f      	movs	r3, #15
    8c24:	18fb      	adds	r3, r7, r3
    8c26:	781b      	ldrb	r3, [r3, #0]
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d13a      	bne.n	8ca2 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	681a      	ldr	r2, [r3, #0]
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	691b      	ldr	r3, [r3, #16]
    8c34:	210f      	movs	r1, #15
    8c36:	187c      	adds	r4, r7, r1
    8c38:	0019      	movs	r1, r3
    8c3a:	0010      	movs	r0, r2
    8c3c:	4b1e      	ldr	r3, [pc, #120]	; (8cb8 <dir_remove+0xd0>)
    8c3e:	4798      	blx	r3
    8c40:	0003      	movs	r3, r0
    8c42:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8c44:	230f      	movs	r3, #15
    8c46:	18fb      	adds	r3, r7, r3
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d11d      	bne.n	8c8a <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	695b      	ldr	r3, [r3, #20]
    8c52:	22e5      	movs	r2, #229	; 0xe5
    8c54:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	681b      	ldr	r3, [r3, #0]
    8c5a:	2201      	movs	r2, #1
    8c5c:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8c5e:	687b      	ldr	r3, [r7, #4]
    8c60:	88db      	ldrh	r3, [r3, #6]
    8c62:	220c      	movs	r2, #12
    8c64:	18ba      	adds	r2, r7, r2
    8c66:	8812      	ldrh	r2, [r2, #0]
    8c68:	429a      	cmp	r2, r3
    8c6a:	d910      	bls.n	8c8e <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8c6c:	230f      	movs	r3, #15
    8c6e:	18fc      	adds	r4, r7, r3
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	2100      	movs	r1, #0
    8c74:	0018      	movs	r0, r3
    8c76:	4b11      	ldr	r3, [pc, #68]	; (8cbc <dir_remove+0xd4>)
    8c78:	4798      	blx	r3
    8c7a:	0003      	movs	r3, r0
    8c7c:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8c7e:	230f      	movs	r3, #15
    8c80:	18fb      	adds	r3, r7, r3
    8c82:	781b      	ldrb	r3, [r3, #0]
    8c84:	2b00      	cmp	r3, #0
    8c86:	d0d1      	beq.n	8c2c <dir_remove+0x44>
    8c88:	e002      	b.n	8c90 <dir_remove+0xa8>
			if (res != FR_OK) break;
    8c8a:	46c0      	nop			; (mov r8, r8)
    8c8c:	e000      	b.n	8c90 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8c8e:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8c90:	230f      	movs	r3, #15
    8c92:	18fb      	adds	r3, r7, r3
    8c94:	781b      	ldrb	r3, [r3, #0]
    8c96:	2b04      	cmp	r3, #4
    8c98:	d103      	bne.n	8ca2 <dir_remove+0xba>
    8c9a:	230f      	movs	r3, #15
    8c9c:	18fb      	adds	r3, r7, r3
    8c9e:	2202      	movs	r2, #2
    8ca0:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8ca2:	230f      	movs	r3, #15
    8ca4:	18fb      	adds	r3, r7, r3
    8ca6:	781b      	ldrb	r3, [r3, #0]
}
    8ca8:	0018      	movs	r0, r3
    8caa:	46bd      	mov	sp, r7
    8cac:	b005      	add	sp, #20
    8cae:	bd90      	pop	{r4, r7, pc}
    8cb0:	0000ffff 	.word	0x0000ffff
    8cb4:	00007d59 	.word	0x00007d59
    8cb8:	00007515 	.word	0x00007515
    8cbc:	00007e89 	.word	0x00007e89

00008cc0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8cc0:	b590      	push	{r4, r7, lr}
    8cc2:	b08b      	sub	sp, #44	; 0x2c
    8cc4:	af00      	add	r7, sp, #0
    8cc6:	6078      	str	r0, [r7, #4]
    8cc8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8cca:	683b      	ldr	r3, [r7, #0]
    8ccc:	681b      	ldr	r3, [r3, #0]
    8cce:	613b      	str	r3, [r7, #16]
    8cd0:	e002      	b.n	8cd8 <create_name+0x18>
    8cd2:	693b      	ldr	r3, [r7, #16]
    8cd4:	3301      	adds	r3, #1
    8cd6:	613b      	str	r3, [r7, #16]
    8cd8:	693b      	ldr	r3, [r7, #16]
    8cda:	781b      	ldrb	r3, [r3, #0]
    8cdc:	2b2f      	cmp	r3, #47	; 0x2f
    8cde:	d0f8      	beq.n	8cd2 <create_name+0x12>
    8ce0:	693b      	ldr	r3, [r7, #16]
    8ce2:	781b      	ldrb	r3, [r3, #0]
    8ce4:	2b5c      	cmp	r3, #92	; 0x5c
    8ce6:	d0f4      	beq.n	8cd2 <create_name+0x12>
	lfn = dj->lfn;
    8ce8:	687b      	ldr	r3, [r7, #4]
    8cea:	69db      	ldr	r3, [r3, #28]
    8cec:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8cee:	2300      	movs	r3, #0
    8cf0:	617b      	str	r3, [r7, #20]
    8cf2:	697b      	ldr	r3, [r7, #20]
    8cf4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8cf6:	69bb      	ldr	r3, [r7, #24]
    8cf8:	1c5a      	adds	r2, r3, #1
    8cfa:	61ba      	str	r2, [r7, #24]
    8cfc:	693a      	ldr	r2, [r7, #16]
    8cfe:	18d3      	adds	r3, r2, r3
    8d00:	781a      	ldrb	r2, [r3, #0]
    8d02:	2324      	movs	r3, #36	; 0x24
    8d04:	18fb      	adds	r3, r7, r3
    8d06:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8d08:	2324      	movs	r3, #36	; 0x24
    8d0a:	18fb      	adds	r3, r7, r3
    8d0c:	881b      	ldrh	r3, [r3, #0]
    8d0e:	2b1f      	cmp	r3, #31
    8d10:	d944      	bls.n	8d9c <create_name+0xdc>
    8d12:	2324      	movs	r3, #36	; 0x24
    8d14:	18fb      	adds	r3, r7, r3
    8d16:	881b      	ldrh	r3, [r3, #0]
    8d18:	2b2f      	cmp	r3, #47	; 0x2f
    8d1a:	d03f      	beq.n	8d9c <create_name+0xdc>
    8d1c:	2324      	movs	r3, #36	; 0x24
    8d1e:	18fb      	adds	r3, r7, r3
    8d20:	881b      	ldrh	r3, [r3, #0]
    8d22:	2b5c      	cmp	r3, #92	; 0x5c
    8d24:	d03a      	beq.n	8d9c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8d26:	697b      	ldr	r3, [r7, #20]
    8d28:	2bfe      	cmp	r3, #254	; 0xfe
    8d2a:	d901      	bls.n	8d30 <create_name+0x70>
			return FR_INVALID_NAME;
    8d2c:	2306      	movs	r3, #6
    8d2e:	e1e7      	b.n	9100 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8d30:	2324      	movs	r3, #36	; 0x24
    8d32:	18fb      	adds	r3, r7, r3
    8d34:	2224      	movs	r2, #36	; 0x24
    8d36:	18ba      	adds	r2, r7, r2
    8d38:	8812      	ldrh	r2, [r2, #0]
    8d3a:	21ff      	movs	r1, #255	; 0xff
    8d3c:	400a      	ands	r2, r1
    8d3e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8d40:	2324      	movs	r3, #36	; 0x24
    8d42:	18fc      	adds	r4, r7, r3
    8d44:	2324      	movs	r3, #36	; 0x24
    8d46:	18fb      	adds	r3, r7, r3
    8d48:	881b      	ldrh	r3, [r3, #0]
    8d4a:	2101      	movs	r1, #1
    8d4c:	0018      	movs	r0, r3
    8d4e:	4bba      	ldr	r3, [pc, #744]	; (9038 <create_name+0x378>)
    8d50:	4798      	blx	r3
    8d52:	0003      	movs	r3, r0
    8d54:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8d56:	2324      	movs	r3, #36	; 0x24
    8d58:	18fb      	adds	r3, r7, r3
    8d5a:	881b      	ldrh	r3, [r3, #0]
    8d5c:	2b00      	cmp	r3, #0
    8d5e:	d101      	bne.n	8d64 <create_name+0xa4>
    8d60:	2306      	movs	r3, #6
    8d62:	e1cd      	b.n	9100 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8d64:	2324      	movs	r3, #36	; 0x24
    8d66:	18fb      	adds	r3, r7, r3
    8d68:	881b      	ldrh	r3, [r3, #0]
    8d6a:	2b7f      	cmp	r3, #127	; 0x7f
    8d6c:	d80b      	bhi.n	8d86 <create_name+0xc6>
    8d6e:	2324      	movs	r3, #36	; 0x24
    8d70:	18fb      	adds	r3, r7, r3
    8d72:	881a      	ldrh	r2, [r3, #0]
    8d74:	4bb1      	ldr	r3, [pc, #708]	; (903c <create_name+0x37c>)
    8d76:	0011      	movs	r1, r2
    8d78:	0018      	movs	r0, r3
    8d7a:	4bb1      	ldr	r3, [pc, #708]	; (9040 <create_name+0x380>)
    8d7c:	4798      	blx	r3
    8d7e:	1e03      	subs	r3, r0, #0
    8d80:	d001      	beq.n	8d86 <create_name+0xc6>
			return FR_INVALID_NAME;
    8d82:	2306      	movs	r3, #6
    8d84:	e1bc      	b.n	9100 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8d86:	697b      	ldr	r3, [r7, #20]
    8d88:	1c5a      	adds	r2, r3, #1
    8d8a:	617a      	str	r2, [r7, #20]
    8d8c:	005b      	lsls	r3, r3, #1
    8d8e:	68fa      	ldr	r2, [r7, #12]
    8d90:	18d3      	adds	r3, r2, r3
    8d92:	2224      	movs	r2, #36	; 0x24
    8d94:	18ba      	adds	r2, r7, r2
    8d96:	8812      	ldrh	r2, [r2, #0]
    8d98:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8d9a:	e7ac      	b.n	8cf6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8d9c:	693a      	ldr	r2, [r7, #16]
    8d9e:	69bb      	ldr	r3, [r7, #24]
    8da0:	18d2      	adds	r2, r2, r3
    8da2:	683b      	ldr	r3, [r7, #0]
    8da4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8da6:	2324      	movs	r3, #36	; 0x24
    8da8:	18fb      	adds	r3, r7, r3
    8daa:	881b      	ldrh	r3, [r3, #0]
    8dac:	2b1f      	cmp	r3, #31
    8dae:	d801      	bhi.n	8db4 <create_name+0xf4>
    8db0:	2204      	movs	r2, #4
    8db2:	e000      	b.n	8db6 <create_name+0xf6>
    8db4:	2200      	movs	r2, #0
    8db6:	2326      	movs	r3, #38	; 0x26
    8db8:	18fb      	adds	r3, r7, r3
    8dba:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8dbc:	e017      	b.n	8dee <create_name+0x12e>
		w = lfn[di-1];
    8dbe:	697b      	ldr	r3, [r7, #20]
    8dc0:	4aa0      	ldr	r2, [pc, #640]	; (9044 <create_name+0x384>)
    8dc2:	4694      	mov	ip, r2
    8dc4:	4463      	add	r3, ip
    8dc6:	005b      	lsls	r3, r3, #1
    8dc8:	68fa      	ldr	r2, [r7, #12]
    8dca:	18d2      	adds	r2, r2, r3
    8dcc:	2324      	movs	r3, #36	; 0x24
    8dce:	18fb      	adds	r3, r7, r3
    8dd0:	8812      	ldrh	r2, [r2, #0]
    8dd2:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8dd4:	2324      	movs	r3, #36	; 0x24
    8dd6:	18fb      	adds	r3, r7, r3
    8dd8:	881b      	ldrh	r3, [r3, #0]
    8dda:	2b20      	cmp	r3, #32
    8ddc:	d004      	beq.n	8de8 <create_name+0x128>
    8dde:	2324      	movs	r3, #36	; 0x24
    8de0:	18fb      	adds	r3, r7, r3
    8de2:	881b      	ldrh	r3, [r3, #0]
    8de4:	2b2e      	cmp	r3, #46	; 0x2e
    8de6:	d106      	bne.n	8df6 <create_name+0x136>
		di--;
    8de8:	697b      	ldr	r3, [r7, #20]
    8dea:	3b01      	subs	r3, #1
    8dec:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8dee:	697b      	ldr	r3, [r7, #20]
    8df0:	2b00      	cmp	r3, #0
    8df2:	d1e4      	bne.n	8dbe <create_name+0xfe>
    8df4:	e000      	b.n	8df8 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8df6:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8df8:	697b      	ldr	r3, [r7, #20]
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	d101      	bne.n	8e02 <create_name+0x142>
    8dfe:	2306      	movs	r3, #6
    8e00:	e17e      	b.n	9100 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8e02:	697b      	ldr	r3, [r7, #20]
    8e04:	005b      	lsls	r3, r3, #1
    8e06:	68fa      	ldr	r2, [r7, #12]
    8e08:	18d3      	adds	r3, r2, r3
    8e0a:	2200      	movs	r2, #0
    8e0c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8e0e:	687b      	ldr	r3, [r7, #4]
    8e10:	699b      	ldr	r3, [r3, #24]
    8e12:	220b      	movs	r2, #11
    8e14:	2120      	movs	r1, #32
    8e16:	0018      	movs	r0, r3
    8e18:	4b8b      	ldr	r3, [pc, #556]	; (9048 <create_name+0x388>)
    8e1a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8e1c:	2300      	movs	r3, #0
    8e1e:	61bb      	str	r3, [r7, #24]
    8e20:	e002      	b.n	8e28 <create_name+0x168>
    8e22:	69bb      	ldr	r3, [r7, #24]
    8e24:	3301      	adds	r3, #1
    8e26:	61bb      	str	r3, [r7, #24]
    8e28:	69bb      	ldr	r3, [r7, #24]
    8e2a:	005b      	lsls	r3, r3, #1
    8e2c:	68fa      	ldr	r2, [r7, #12]
    8e2e:	18d3      	adds	r3, r2, r3
    8e30:	881b      	ldrh	r3, [r3, #0]
    8e32:	2b20      	cmp	r3, #32
    8e34:	d0f5      	beq.n	8e22 <create_name+0x162>
    8e36:	69bb      	ldr	r3, [r7, #24]
    8e38:	005b      	lsls	r3, r3, #1
    8e3a:	68fa      	ldr	r2, [r7, #12]
    8e3c:	18d3      	adds	r3, r2, r3
    8e3e:	881b      	ldrh	r3, [r3, #0]
    8e40:	2b2e      	cmp	r3, #46	; 0x2e
    8e42:	d0ee      	beq.n	8e22 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8e44:	69bb      	ldr	r3, [r7, #24]
    8e46:	2b00      	cmp	r3, #0
    8e48:	d00b      	beq.n	8e62 <create_name+0x1a2>
    8e4a:	2326      	movs	r3, #38	; 0x26
    8e4c:	18fb      	adds	r3, r7, r3
    8e4e:	2226      	movs	r2, #38	; 0x26
    8e50:	18ba      	adds	r2, r7, r2
    8e52:	7812      	ldrb	r2, [r2, #0]
    8e54:	2103      	movs	r1, #3
    8e56:	430a      	orrs	r2, r1
    8e58:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8e5a:	e002      	b.n	8e62 <create_name+0x1a2>
    8e5c:	697b      	ldr	r3, [r7, #20]
    8e5e:	3b01      	subs	r3, #1
    8e60:	617b      	str	r3, [r7, #20]
    8e62:	697b      	ldr	r3, [r7, #20]
    8e64:	2b00      	cmp	r3, #0
    8e66:	d009      	beq.n	8e7c <create_name+0x1bc>
    8e68:	697b      	ldr	r3, [r7, #20]
    8e6a:	4a76      	ldr	r2, [pc, #472]	; (9044 <create_name+0x384>)
    8e6c:	4694      	mov	ip, r2
    8e6e:	4463      	add	r3, ip
    8e70:	005b      	lsls	r3, r3, #1
    8e72:	68fa      	ldr	r2, [r7, #12]
    8e74:	18d3      	adds	r3, r2, r3
    8e76:	881b      	ldrh	r3, [r3, #0]
    8e78:	2b2e      	cmp	r3, #46	; 0x2e
    8e7a:	d1ef      	bne.n	8e5c <create_name+0x19c>

	b = i = 0; ni = 8;
    8e7c:	2300      	movs	r3, #0
    8e7e:	623b      	str	r3, [r7, #32]
    8e80:	2327      	movs	r3, #39	; 0x27
    8e82:	18fb      	adds	r3, r7, r3
    8e84:	2200      	movs	r2, #0
    8e86:	701a      	strb	r2, [r3, #0]
    8e88:	2308      	movs	r3, #8
    8e8a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8e8c:	69bb      	ldr	r3, [r7, #24]
    8e8e:	1c5a      	adds	r2, r3, #1
    8e90:	61ba      	str	r2, [r7, #24]
    8e92:	005b      	lsls	r3, r3, #1
    8e94:	68fa      	ldr	r2, [r7, #12]
    8e96:	18d2      	adds	r2, r2, r3
    8e98:	2324      	movs	r3, #36	; 0x24
    8e9a:	18fb      	adds	r3, r7, r3
    8e9c:	8812      	ldrh	r2, [r2, #0]
    8e9e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8ea0:	2324      	movs	r3, #36	; 0x24
    8ea2:	18fb      	adds	r3, r7, r3
    8ea4:	881b      	ldrh	r3, [r3, #0]
    8ea6:	2b00      	cmp	r3, #0
    8ea8:	d100      	bne.n	8eac <create_name+0x1ec>
    8eaa:	e0c3      	b.n	9034 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8eac:	2324      	movs	r3, #36	; 0x24
    8eae:	18fb      	adds	r3, r7, r3
    8eb0:	881b      	ldrh	r3, [r3, #0]
    8eb2:	2b20      	cmp	r3, #32
    8eb4:	d008      	beq.n	8ec8 <create_name+0x208>
    8eb6:	2324      	movs	r3, #36	; 0x24
    8eb8:	18fb      	adds	r3, r7, r3
    8eba:	881b      	ldrh	r3, [r3, #0]
    8ebc:	2b2e      	cmp	r3, #46	; 0x2e
    8ebe:	d10c      	bne.n	8eda <create_name+0x21a>
    8ec0:	69ba      	ldr	r2, [r7, #24]
    8ec2:	697b      	ldr	r3, [r7, #20]
    8ec4:	429a      	cmp	r2, r3
    8ec6:	d008      	beq.n	8eda <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    8ec8:	2326      	movs	r3, #38	; 0x26
    8eca:	18fb      	adds	r3, r7, r3
    8ecc:	2226      	movs	r2, #38	; 0x26
    8ece:	18ba      	adds	r2, r7, r2
    8ed0:	7812      	ldrb	r2, [r2, #0]
    8ed2:	2103      	movs	r1, #3
    8ed4:	430a      	orrs	r2, r1
    8ed6:	701a      	strb	r2, [r3, #0]
    8ed8:	e0ab      	b.n	9032 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8eda:	6a3a      	ldr	r2, [r7, #32]
    8edc:	69fb      	ldr	r3, [r7, #28]
    8ede:	429a      	cmp	r2, r3
    8ee0:	d203      	bcs.n	8eea <create_name+0x22a>
    8ee2:	69ba      	ldr	r2, [r7, #24]
    8ee4:	697b      	ldr	r3, [r7, #20]
    8ee6:	429a      	cmp	r2, r3
    8ee8:	d12a      	bne.n	8f40 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    8eea:	69fb      	ldr	r3, [r7, #28]
    8eec:	2b0b      	cmp	r3, #11
    8eee:	d108      	bne.n	8f02 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    8ef0:	2326      	movs	r3, #38	; 0x26
    8ef2:	18fb      	adds	r3, r7, r3
    8ef4:	2226      	movs	r2, #38	; 0x26
    8ef6:	18ba      	adds	r2, r7, r2
    8ef8:	7812      	ldrb	r2, [r2, #0]
    8efa:	2103      	movs	r1, #3
    8efc:	430a      	orrs	r2, r1
    8efe:	701a      	strb	r2, [r3, #0]
    8f00:	e0a9      	b.n	9056 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    8f02:	69ba      	ldr	r2, [r7, #24]
    8f04:	697b      	ldr	r3, [r7, #20]
    8f06:	429a      	cmp	r2, r3
    8f08:	d007      	beq.n	8f1a <create_name+0x25a>
    8f0a:	2326      	movs	r3, #38	; 0x26
    8f0c:	18fb      	adds	r3, r7, r3
    8f0e:	2226      	movs	r2, #38	; 0x26
    8f10:	18ba      	adds	r2, r7, r2
    8f12:	7812      	ldrb	r2, [r2, #0]
    8f14:	2103      	movs	r1, #3
    8f16:	430a      	orrs	r2, r1
    8f18:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    8f1a:	69ba      	ldr	r2, [r7, #24]
    8f1c:	697b      	ldr	r3, [r7, #20]
    8f1e:	429a      	cmp	r2, r3
    8f20:	d900      	bls.n	8f24 <create_name+0x264>
    8f22:	e097      	b.n	9054 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    8f24:	697b      	ldr	r3, [r7, #20]
    8f26:	61bb      	str	r3, [r7, #24]
    8f28:	2308      	movs	r3, #8
    8f2a:	623b      	str	r3, [r7, #32]
    8f2c:	230b      	movs	r3, #11
    8f2e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    8f30:	2327      	movs	r3, #39	; 0x27
    8f32:	18fb      	adds	r3, r7, r3
    8f34:	2227      	movs	r2, #39	; 0x27
    8f36:	18ba      	adds	r2, r7, r2
    8f38:	7812      	ldrb	r2, [r2, #0]
    8f3a:	0092      	lsls	r2, r2, #2
    8f3c:	701a      	strb	r2, [r3, #0]
    8f3e:	e078      	b.n	9032 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    8f40:	2324      	movs	r3, #36	; 0x24
    8f42:	18fb      	adds	r3, r7, r3
    8f44:	881b      	ldrh	r3, [r3, #0]
    8f46:	2b7f      	cmp	r3, #127	; 0x7f
    8f48:	d920      	bls.n	8f8c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    8f4a:	2324      	movs	r3, #36	; 0x24
    8f4c:	18fc      	adds	r4, r7, r3
    8f4e:	2324      	movs	r3, #36	; 0x24
    8f50:	18fb      	adds	r3, r7, r3
    8f52:	881b      	ldrh	r3, [r3, #0]
    8f54:	2100      	movs	r1, #0
    8f56:	0018      	movs	r0, r3
    8f58:	4b37      	ldr	r3, [pc, #220]	; (9038 <create_name+0x378>)
    8f5a:	4798      	blx	r3
    8f5c:	0003      	movs	r3, r0
    8f5e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    8f60:	2324      	movs	r3, #36	; 0x24
    8f62:	18fb      	adds	r3, r7, r3
    8f64:	881b      	ldrh	r3, [r3, #0]
    8f66:	2b00      	cmp	r3, #0
    8f68:	d008      	beq.n	8f7c <create_name+0x2bc>
    8f6a:	2324      	movs	r3, #36	; 0x24
    8f6c:	18fb      	adds	r3, r7, r3
    8f6e:	881b      	ldrh	r3, [r3, #0]
    8f70:	3b80      	subs	r3, #128	; 0x80
    8f72:	4a36      	ldr	r2, [pc, #216]	; (904c <create_name+0x38c>)
    8f74:	5cd2      	ldrb	r2, [r2, r3]
    8f76:	2324      	movs	r3, #36	; 0x24
    8f78:	18fb      	adds	r3, r7, r3
    8f7a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    8f7c:	2326      	movs	r3, #38	; 0x26
    8f7e:	18fb      	adds	r3, r7, r3
    8f80:	2226      	movs	r2, #38	; 0x26
    8f82:	18ba      	adds	r2, r7, r2
    8f84:	7812      	ldrb	r2, [r2, #0]
    8f86:	2102      	movs	r1, #2
    8f88:	430a      	orrs	r2, r1
    8f8a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    8f8c:	2324      	movs	r3, #36	; 0x24
    8f8e:	18fb      	adds	r3, r7, r3
    8f90:	881b      	ldrh	r3, [r3, #0]
    8f92:	2b00      	cmp	r3, #0
    8f94:	d009      	beq.n	8faa <create_name+0x2ea>
    8f96:	2324      	movs	r3, #36	; 0x24
    8f98:	18fb      	adds	r3, r7, r3
    8f9a:	881a      	ldrh	r2, [r3, #0]
    8f9c:	4b2c      	ldr	r3, [pc, #176]	; (9050 <create_name+0x390>)
    8f9e:	0011      	movs	r1, r2
    8fa0:	0018      	movs	r0, r3
    8fa2:	4b27      	ldr	r3, [pc, #156]	; (9040 <create_name+0x380>)
    8fa4:	4798      	blx	r3
    8fa6:	1e03      	subs	r3, r0, #0
    8fa8:	d00c      	beq.n	8fc4 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    8faa:	2324      	movs	r3, #36	; 0x24
    8fac:	18fb      	adds	r3, r7, r3
    8fae:	225f      	movs	r2, #95	; 0x5f
    8fb0:	801a      	strh	r2, [r3, #0]
    8fb2:	2326      	movs	r3, #38	; 0x26
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	2226      	movs	r2, #38	; 0x26
    8fb8:	18ba      	adds	r2, r7, r2
    8fba:	7812      	ldrb	r2, [r2, #0]
    8fbc:	2103      	movs	r1, #3
    8fbe:	430a      	orrs	r2, r1
    8fc0:	701a      	strb	r2, [r3, #0]
    8fc2:	e02b      	b.n	901c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    8fc4:	2324      	movs	r3, #36	; 0x24
    8fc6:	18fb      	adds	r3, r7, r3
    8fc8:	881b      	ldrh	r3, [r3, #0]
    8fca:	2b40      	cmp	r3, #64	; 0x40
    8fcc:	d90d      	bls.n	8fea <create_name+0x32a>
    8fce:	2324      	movs	r3, #36	; 0x24
    8fd0:	18fb      	adds	r3, r7, r3
    8fd2:	881b      	ldrh	r3, [r3, #0]
    8fd4:	2b5a      	cmp	r3, #90	; 0x5a
    8fd6:	d808      	bhi.n	8fea <create_name+0x32a>
					b |= 2;
    8fd8:	2327      	movs	r3, #39	; 0x27
    8fda:	18fb      	adds	r3, r7, r3
    8fdc:	2227      	movs	r2, #39	; 0x27
    8fde:	18ba      	adds	r2, r7, r2
    8fe0:	7812      	ldrb	r2, [r2, #0]
    8fe2:	2102      	movs	r1, #2
    8fe4:	430a      	orrs	r2, r1
    8fe6:	701a      	strb	r2, [r3, #0]
    8fe8:	e018      	b.n	901c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    8fea:	2324      	movs	r3, #36	; 0x24
    8fec:	18fb      	adds	r3, r7, r3
    8fee:	881b      	ldrh	r3, [r3, #0]
    8ff0:	2b60      	cmp	r3, #96	; 0x60
    8ff2:	d913      	bls.n	901c <create_name+0x35c>
    8ff4:	2324      	movs	r3, #36	; 0x24
    8ff6:	18fb      	adds	r3, r7, r3
    8ff8:	881b      	ldrh	r3, [r3, #0]
    8ffa:	2b7a      	cmp	r3, #122	; 0x7a
    8ffc:	d80e      	bhi.n	901c <create_name+0x35c>
						b |= 1; w -= 0x20;
    8ffe:	2327      	movs	r3, #39	; 0x27
    9000:	18fb      	adds	r3, r7, r3
    9002:	2227      	movs	r2, #39	; 0x27
    9004:	18ba      	adds	r2, r7, r2
    9006:	7812      	ldrb	r2, [r2, #0]
    9008:	2101      	movs	r1, #1
    900a:	430a      	orrs	r2, r1
    900c:	701a      	strb	r2, [r3, #0]
    900e:	2324      	movs	r3, #36	; 0x24
    9010:	18fb      	adds	r3, r7, r3
    9012:	2224      	movs	r2, #36	; 0x24
    9014:	18ba      	adds	r2, r7, r2
    9016:	8812      	ldrh	r2, [r2, #0]
    9018:	3a20      	subs	r2, #32
    901a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	699a      	ldr	r2, [r3, #24]
    9020:	6a3b      	ldr	r3, [r7, #32]
    9022:	1c59      	adds	r1, r3, #1
    9024:	6239      	str	r1, [r7, #32]
    9026:	18d3      	adds	r3, r2, r3
    9028:	2224      	movs	r2, #36	; 0x24
    902a:	18ba      	adds	r2, r7, r2
    902c:	8812      	ldrh	r2, [r2, #0]
    902e:	b2d2      	uxtb	r2, r2
    9030:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    9032:	e72b      	b.n	8e8c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    9034:	46c0      	nop			; (mov r8, r8)
    9036:	e00e      	b.n	9056 <create_name+0x396>
    9038:	0000abfd 	.word	0x0000abfd
    903c:	0000cf5c 	.word	0x0000cf5c
    9040:	000074e3 	.word	0x000074e3
    9044:	7fffffff 	.word	0x7fffffff
    9048:	00007469 	.word	0x00007469
    904c:	0000cfa4 	.word	0x0000cfa4
    9050:	0000cf68 	.word	0x0000cf68
			if (si > di) break;			/* No extension */
    9054:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	699b      	ldr	r3, [r3, #24]
    905a:	781b      	ldrb	r3, [r3, #0]
    905c:	2be5      	cmp	r3, #229	; 0xe5
    905e:	d103      	bne.n	9068 <create_name+0x3a8>
    9060:	687b      	ldr	r3, [r7, #4]
    9062:	699b      	ldr	r3, [r3, #24]
    9064:	2205      	movs	r2, #5
    9066:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    9068:	69fb      	ldr	r3, [r7, #28]
    906a:	2b08      	cmp	r3, #8
    906c:	d106      	bne.n	907c <create_name+0x3bc>
    906e:	2327      	movs	r3, #39	; 0x27
    9070:	18fb      	adds	r3, r7, r3
    9072:	2227      	movs	r2, #39	; 0x27
    9074:	18ba      	adds	r2, r7, r2
    9076:	7812      	ldrb	r2, [r2, #0]
    9078:	0092      	lsls	r2, r2, #2
    907a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    907c:	2327      	movs	r3, #39	; 0x27
    907e:	18fb      	adds	r3, r7, r3
    9080:	781b      	ldrb	r3, [r3, #0]
    9082:	220c      	movs	r2, #12
    9084:	4013      	ands	r3, r2
    9086:	2b0c      	cmp	r3, #12
    9088:	d006      	beq.n	9098 <create_name+0x3d8>
    908a:	2327      	movs	r3, #39	; 0x27
    908c:	18fb      	adds	r3, r7, r3
    908e:	781b      	ldrb	r3, [r3, #0]
    9090:	2203      	movs	r2, #3
    9092:	4013      	ands	r3, r2
    9094:	2b03      	cmp	r3, #3
    9096:	d107      	bne.n	90a8 <create_name+0x3e8>
		cf |= NS_LFN;
    9098:	2326      	movs	r3, #38	; 0x26
    909a:	18fb      	adds	r3, r7, r3
    909c:	2226      	movs	r2, #38	; 0x26
    909e:	18ba      	adds	r2, r7, r2
    90a0:	7812      	ldrb	r2, [r2, #0]
    90a2:	2102      	movs	r1, #2
    90a4:	430a      	orrs	r2, r1
    90a6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    90a8:	2326      	movs	r3, #38	; 0x26
    90aa:	18fb      	adds	r3, r7, r3
    90ac:	781b      	ldrb	r3, [r3, #0]
    90ae:	2202      	movs	r2, #2
    90b0:	4013      	ands	r3, r2
    90b2:	d11d      	bne.n	90f0 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    90b4:	2327      	movs	r3, #39	; 0x27
    90b6:	18fb      	adds	r3, r7, r3
    90b8:	781b      	ldrb	r3, [r3, #0]
    90ba:	2203      	movs	r2, #3
    90bc:	4013      	ands	r3, r2
    90be:	2b01      	cmp	r3, #1
    90c0:	d107      	bne.n	90d2 <create_name+0x412>
    90c2:	2326      	movs	r3, #38	; 0x26
    90c4:	18fb      	adds	r3, r7, r3
    90c6:	2226      	movs	r2, #38	; 0x26
    90c8:	18ba      	adds	r2, r7, r2
    90ca:	7812      	ldrb	r2, [r2, #0]
    90cc:	2110      	movs	r1, #16
    90ce:	430a      	orrs	r2, r1
    90d0:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    90d2:	2327      	movs	r3, #39	; 0x27
    90d4:	18fb      	adds	r3, r7, r3
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	220c      	movs	r2, #12
    90da:	4013      	ands	r3, r2
    90dc:	2b04      	cmp	r3, #4
    90de:	d107      	bne.n	90f0 <create_name+0x430>
    90e0:	2326      	movs	r3, #38	; 0x26
    90e2:	18fb      	adds	r3, r7, r3
    90e4:	2226      	movs	r2, #38	; 0x26
    90e6:	18ba      	adds	r2, r7, r2
    90e8:	7812      	ldrb	r2, [r2, #0]
    90ea:	2108      	movs	r1, #8
    90ec:	430a      	orrs	r2, r1
    90ee:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	699b      	ldr	r3, [r3, #24]
    90f4:	330b      	adds	r3, #11
    90f6:	2226      	movs	r2, #38	; 0x26
    90f8:	18ba      	adds	r2, r7, r2
    90fa:	7812      	ldrb	r2, [r2, #0]
    90fc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    90fe:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    9100:	0018      	movs	r0, r3
    9102:	46bd      	mov	sp, r7
    9104:	b00b      	add	sp, #44	; 0x2c
    9106:	bd90      	pop	{r4, r7, pc}

00009108 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    9108:	b590      	push	{r4, r7, lr}
    910a:	b085      	sub	sp, #20
    910c:	af00      	add	r7, sp, #0
    910e:	6078      	str	r0, [r7, #4]
    9110:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    9112:	683b      	ldr	r3, [r7, #0]
    9114:	781b      	ldrb	r3, [r3, #0]
    9116:	2b2f      	cmp	r3, #47	; 0x2f
    9118:	d003      	beq.n	9122 <follow_path+0x1a>
    911a:	683b      	ldr	r3, [r7, #0]
    911c:	781b      	ldrb	r3, [r3, #0]
    911e:	2b5c      	cmp	r3, #92	; 0x5c
    9120:	d102      	bne.n	9128 <follow_path+0x20>
		path++;
    9122:	683b      	ldr	r3, [r7, #0]
    9124:	3301      	adds	r3, #1
    9126:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    9128:	687b      	ldr	r3, [r7, #4]
    912a:	2200      	movs	r2, #0
    912c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    912e:	683b      	ldr	r3, [r7, #0]
    9130:	781b      	ldrb	r3, [r3, #0]
    9132:	2b1f      	cmp	r3, #31
    9134:	d80c      	bhi.n	9150 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    9136:	230f      	movs	r3, #15
    9138:	18fc      	adds	r4, r7, r3
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	2100      	movs	r1, #0
    913e:	0018      	movs	r0, r3
    9140:	4b3c      	ldr	r3, [pc, #240]	; (9234 <follow_path+0x12c>)
    9142:	4798      	blx	r3
    9144:	0003      	movs	r3, r0
    9146:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	2200      	movs	r2, #0
    914c:	615a      	str	r2, [r3, #20]
    914e:	e06a      	b.n	9226 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    9150:	230f      	movs	r3, #15
    9152:	18fc      	adds	r4, r7, r3
    9154:	003a      	movs	r2, r7
    9156:	687b      	ldr	r3, [r7, #4]
    9158:	0011      	movs	r1, r2
    915a:	0018      	movs	r0, r3
    915c:	4b36      	ldr	r3, [pc, #216]	; (9238 <follow_path+0x130>)
    915e:	4798      	blx	r3
    9160:	0003      	movs	r3, r0
    9162:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    9164:	230f      	movs	r3, #15
    9166:	18fb      	adds	r3, r7, r3
    9168:	781b      	ldrb	r3, [r3, #0]
    916a:	2b00      	cmp	r3, #0
    916c:	d154      	bne.n	9218 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    916e:	230f      	movs	r3, #15
    9170:	18fc      	adds	r4, r7, r3
    9172:	687b      	ldr	r3, [r7, #4]
    9174:	0018      	movs	r0, r3
    9176:	4b31      	ldr	r3, [pc, #196]	; (923c <follow_path+0x134>)
    9178:	4798      	blx	r3
    917a:	0003      	movs	r3, r0
    917c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    917e:	687b      	ldr	r3, [r7, #4]
    9180:	699a      	ldr	r2, [r3, #24]
    9182:	230e      	movs	r3, #14
    9184:	18fb      	adds	r3, r7, r3
    9186:	7ad2      	ldrb	r2, [r2, #11]
    9188:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    918a:	230f      	movs	r3, #15
    918c:	18fb      	adds	r3, r7, r3
    918e:	781b      	ldrb	r3, [r3, #0]
    9190:	2b00      	cmp	r3, #0
    9192:	d00f      	beq.n	91b4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9194:	230f      	movs	r3, #15
    9196:	18fb      	adds	r3, r7, r3
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	2b04      	cmp	r3, #4
    919c:	d13e      	bne.n	921c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    919e:	230e      	movs	r3, #14
    91a0:	18fb      	adds	r3, r7, r3
    91a2:	781b      	ldrb	r3, [r3, #0]
    91a4:	2204      	movs	r2, #4
    91a6:	4013      	ands	r3, r2
    91a8:	d13a      	bne.n	9220 <follow_path+0x118>
    91aa:	230f      	movs	r3, #15
    91ac:	18fb      	adds	r3, r7, r3
    91ae:	2205      	movs	r2, #5
    91b0:	701a      	strb	r2, [r3, #0]
				}
				break;
    91b2:	e035      	b.n	9220 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    91b4:	230e      	movs	r3, #14
    91b6:	18fb      	adds	r3, r7, r3
    91b8:	781b      	ldrb	r3, [r3, #0]
    91ba:	2204      	movs	r2, #4
    91bc:	4013      	ands	r3, r2
    91be:	d131      	bne.n	9224 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    91c0:	687b      	ldr	r3, [r7, #4]
    91c2:	695b      	ldr	r3, [r3, #20]
    91c4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    91c6:	68bb      	ldr	r3, [r7, #8]
    91c8:	330b      	adds	r3, #11
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	001a      	movs	r2, r3
    91ce:	2310      	movs	r3, #16
    91d0:	4013      	ands	r3, r2
    91d2:	d104      	bne.n	91de <follow_path+0xd6>
				res = FR_NO_PATH; break;
    91d4:	230f      	movs	r3, #15
    91d6:	18fb      	adds	r3, r7, r3
    91d8:	2205      	movs	r2, #5
    91da:	701a      	strb	r2, [r3, #0]
    91dc:	e023      	b.n	9226 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    91de:	68bb      	ldr	r3, [r7, #8]
    91e0:	3315      	adds	r3, #21
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	021b      	lsls	r3, r3, #8
    91e6:	b21a      	sxth	r2, r3
    91e8:	68bb      	ldr	r3, [r7, #8]
    91ea:	3314      	adds	r3, #20
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	b21b      	sxth	r3, r3
    91f0:	4313      	orrs	r3, r2
    91f2:	b21b      	sxth	r3, r3
    91f4:	b29b      	uxth	r3, r3
    91f6:	041b      	lsls	r3, r3, #16
    91f8:	68ba      	ldr	r2, [r7, #8]
    91fa:	321b      	adds	r2, #27
    91fc:	7812      	ldrb	r2, [r2, #0]
    91fe:	0212      	lsls	r2, r2, #8
    9200:	b211      	sxth	r1, r2
    9202:	68ba      	ldr	r2, [r7, #8]
    9204:	321a      	adds	r2, #26
    9206:	7812      	ldrb	r2, [r2, #0]
    9208:	b212      	sxth	r2, r2
    920a:	430a      	orrs	r2, r1
    920c:	b212      	sxth	r2, r2
    920e:	b292      	uxth	r2, r2
    9210:	431a      	orrs	r2, r3
    9212:	687b      	ldr	r3, [r7, #4]
    9214:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    9216:	e79b      	b.n	9150 <follow_path+0x48>
			if (res != FR_OK) break;
    9218:	46c0      	nop			; (mov r8, r8)
    921a:	e004      	b.n	9226 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    921c:	46c0      	nop			; (mov r8, r8)
    921e:	e002      	b.n	9226 <follow_path+0x11e>
				break;
    9220:	46c0      	nop			; (mov r8, r8)
    9222:	e000      	b.n	9226 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9224:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    9226:	230f      	movs	r3, #15
    9228:	18fb      	adds	r3, r7, r3
    922a:	781b      	ldrb	r3, [r3, #0]
}
    922c:	0018      	movs	r0, r3
    922e:	46bd      	mov	sp, r7
    9230:	b005      	add	sp, #20
    9232:	bd90      	pop	{r4, r7, pc}
    9234:	00007d59 	.word	0x00007d59
    9238:	00008cc1 	.word	0x00008cc1
    923c:	000084c1 	.word	0x000084c1

00009240 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    9240:	b590      	push	{r4, r7, lr}
    9242:	b083      	sub	sp, #12
    9244:	af00      	add	r7, sp, #0
    9246:	6078      	str	r0, [r7, #4]
    9248:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    924a:	687b      	ldr	r3, [r7, #4]
    924c:	7858      	ldrb	r0, [r3, #1]
    924e:	687b      	ldr	r3, [r7, #4]
    9250:	3330      	adds	r3, #48	; 0x30
    9252:	0019      	movs	r1, r3
    9254:	683a      	ldr	r2, [r7, #0]
    9256:	2301      	movs	r3, #1
    9258:	4c2a      	ldr	r4, [pc, #168]	; (9304 <check_fs+0xc4>)
    925a:	47a0      	blx	r4
    925c:	1e03      	subs	r3, r0, #0
    925e:	d001      	beq.n	9264 <check_fs+0x24>
		return 3;
    9260:	2303      	movs	r3, #3
    9262:	e04b      	b.n	92fc <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	4a28      	ldr	r2, [pc, #160]	; (9308 <check_fs+0xc8>)
    9268:	4694      	mov	ip, r2
    926a:	4463      	add	r3, ip
    926c:	3301      	adds	r3, #1
    926e:	781b      	ldrb	r3, [r3, #0]
    9270:	021b      	lsls	r3, r3, #8
    9272:	b21a      	sxth	r2, r3
    9274:	687b      	ldr	r3, [r7, #4]
    9276:	4924      	ldr	r1, [pc, #144]	; (9308 <check_fs+0xc8>)
    9278:	5c5b      	ldrb	r3, [r3, r1]
    927a:	b21b      	sxth	r3, r3
    927c:	4313      	orrs	r3, r2
    927e:	b21b      	sxth	r3, r3
    9280:	4a22      	ldr	r2, [pc, #136]	; (930c <check_fs+0xcc>)
    9282:	4293      	cmp	r3, r2
    9284:	d001      	beq.n	928a <check_fs+0x4a>
		return 2;
    9286:	2302      	movs	r3, #2
    9288:	e038      	b.n	92fc <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    928a:	687b      	ldr	r3, [r7, #4]
    928c:	3366      	adds	r3, #102	; 0x66
    928e:	3303      	adds	r3, #3
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	061a      	lsls	r2, r3, #24
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	3366      	adds	r3, #102	; 0x66
    9298:	3302      	adds	r3, #2
    929a:	781b      	ldrb	r3, [r3, #0]
    929c:	041b      	lsls	r3, r3, #16
    929e:	4313      	orrs	r3, r2
    92a0:	687a      	ldr	r2, [r7, #4]
    92a2:	3266      	adds	r2, #102	; 0x66
    92a4:	3201      	adds	r2, #1
    92a6:	7812      	ldrb	r2, [r2, #0]
    92a8:	0212      	lsls	r2, r2, #8
    92aa:	4313      	orrs	r3, r2
    92ac:	687a      	ldr	r2, [r7, #4]
    92ae:	2166      	movs	r1, #102	; 0x66
    92b0:	5c52      	ldrb	r2, [r2, r1]
    92b2:	4313      	orrs	r3, r2
    92b4:	021b      	lsls	r3, r3, #8
    92b6:	0a1b      	lsrs	r3, r3, #8
    92b8:	4a15      	ldr	r2, [pc, #84]	; (9310 <check_fs+0xd0>)
    92ba:	4293      	cmp	r3, r2
    92bc:	d101      	bne.n	92c2 <check_fs+0x82>
		return 0;
    92be:	2300      	movs	r3, #0
    92c0:	e01c      	b.n	92fc <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    92c2:	687b      	ldr	r3, [r7, #4]
    92c4:	3382      	adds	r3, #130	; 0x82
    92c6:	3303      	adds	r3, #3
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	061a      	lsls	r2, r3, #24
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	3382      	adds	r3, #130	; 0x82
    92d0:	3302      	adds	r3, #2
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	041b      	lsls	r3, r3, #16
    92d6:	4313      	orrs	r3, r2
    92d8:	687a      	ldr	r2, [r7, #4]
    92da:	3282      	adds	r2, #130	; 0x82
    92dc:	3201      	adds	r2, #1
    92de:	7812      	ldrb	r2, [r2, #0]
    92e0:	0212      	lsls	r2, r2, #8
    92e2:	4313      	orrs	r3, r2
    92e4:	687a      	ldr	r2, [r7, #4]
    92e6:	2182      	movs	r1, #130	; 0x82
    92e8:	5c52      	ldrb	r2, [r2, r1]
    92ea:	4313      	orrs	r3, r2
    92ec:	021b      	lsls	r3, r3, #8
    92ee:	0a1b      	lsrs	r3, r3, #8
    92f0:	4a07      	ldr	r2, [pc, #28]	; (9310 <check_fs+0xd0>)
    92f2:	4293      	cmp	r3, r2
    92f4:	d101      	bne.n	92fa <check_fs+0xba>
		return 0;
    92f6:	2300      	movs	r3, #0
    92f8:	e000      	b.n	92fc <check_fs+0xbc>

	return 1;
    92fa:	2301      	movs	r3, #1
}
    92fc:	0018      	movs	r0, r3
    92fe:	46bd      	mov	sp, r7
    9300:	b003      	add	sp, #12
    9302:	bd90      	pop	{r4, r7, pc}
    9304:	00007129 	.word	0x00007129
    9308:	0000022e 	.word	0x0000022e
    930c:	ffffaa55 	.word	0xffffaa55
    9310:	00544146 	.word	0x00544146

00009314 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    9314:	b590      	push	{r4, r7, lr}
    9316:	b093      	sub	sp, #76	; 0x4c
    9318:	af00      	add	r7, sp, #0
    931a:	60f8      	str	r0, [r7, #12]
    931c:	60b9      	str	r1, [r7, #8]
    931e:	1dfb      	adds	r3, r7, #7
    9320:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    9322:	68fb      	ldr	r3, [r7, #12]
    9324:	681b      	ldr	r3, [r3, #0]
    9326:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    9328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    932a:	781b      	ldrb	r3, [r3, #0]
    932c:	3b30      	subs	r3, #48	; 0x30
    932e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    9330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9332:	2b09      	cmp	r3, #9
    9334:	d80b      	bhi.n	934e <chk_mounted+0x3a>
    9336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9338:	3301      	adds	r3, #1
    933a:	781b      	ldrb	r3, [r3, #0]
    933c:	2b3a      	cmp	r3, #58	; 0x3a
    933e:	d106      	bne.n	934e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    9340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9342:	3302      	adds	r3, #2
    9344:	62fb      	str	r3, [r7, #44]	; 0x2c
    9346:	68fb      	ldr	r3, [r7, #12]
    9348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    934a:	601a      	str	r2, [r3, #0]
    934c:	e001      	b.n	9352 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    934e:	2300      	movs	r3, #0
    9350:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    9352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9354:	2b00      	cmp	r3, #0
    9356:	d001      	beq.n	935c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    9358:	230b      	movs	r3, #11
    935a:	e2af      	b.n	98bc <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    935c:	4bc5      	ldr	r3, [pc, #788]	; (9674 <chk_mounted+0x360>)
    935e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9360:	0092      	lsls	r2, r2, #2
    9362:	58d3      	ldr	r3, [r2, r3]
    9364:	62bb      	str	r3, [r7, #40]	; 0x28
    9366:	68bb      	ldr	r3, [r7, #8]
    9368:	6aba      	ldr	r2, [r7, #40]	; 0x28
    936a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    936e:	2b00      	cmp	r3, #0
    9370:	d101      	bne.n	9376 <chk_mounted+0x62>
    9372:	230c      	movs	r3, #12
    9374:	e2a2      	b.n	98bc <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    9376:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	2b00      	cmp	r3, #0
    937c:	d01c      	beq.n	93b8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9380:	785b      	ldrb	r3, [r3, #1]
    9382:	2227      	movs	r2, #39	; 0x27
    9384:	18bc      	adds	r4, r7, r2
    9386:	0018      	movs	r0, r3
    9388:	4bbb      	ldr	r3, [pc, #748]	; (9678 <chk_mounted+0x364>)
    938a:	4798      	blx	r3
    938c:	0003      	movs	r3, r0
    938e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    9390:	2327      	movs	r3, #39	; 0x27
    9392:	18fb      	adds	r3, r7, r3
    9394:	781b      	ldrb	r3, [r3, #0]
    9396:	2201      	movs	r2, #1
    9398:	4013      	ands	r3, r2
    939a:	d10d      	bne.n	93b8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    939c:	1dfb      	adds	r3, r7, #7
    939e:	781b      	ldrb	r3, [r3, #0]
    93a0:	2b00      	cmp	r3, #0
    93a2:	d007      	beq.n	93b4 <chk_mounted+0xa0>
    93a4:	2327      	movs	r3, #39	; 0x27
    93a6:	18fb      	adds	r3, r7, r3
    93a8:	781b      	ldrb	r3, [r3, #0]
    93aa:	2204      	movs	r2, #4
    93ac:	4013      	ands	r3, r2
    93ae:	d001      	beq.n	93b4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    93b0:	230a      	movs	r3, #10
    93b2:	e283      	b.n	98bc <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    93b4:	2300      	movs	r3, #0
    93b6:	e281      	b.n	98bc <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    93b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93ba:	2200      	movs	r2, #0
    93bc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    93be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    93c0:	b2da      	uxtb	r2, r3
    93c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93c4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    93c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93c8:	785b      	ldrb	r3, [r3, #1]
    93ca:	2227      	movs	r2, #39	; 0x27
    93cc:	18bc      	adds	r4, r7, r2
    93ce:	0018      	movs	r0, r3
    93d0:	4baa      	ldr	r3, [pc, #680]	; (967c <chk_mounted+0x368>)
    93d2:	4798      	blx	r3
    93d4:	0003      	movs	r3, r0
    93d6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    93d8:	2327      	movs	r3, #39	; 0x27
    93da:	18fb      	adds	r3, r7, r3
    93dc:	781b      	ldrb	r3, [r3, #0]
    93de:	2201      	movs	r2, #1
    93e0:	4013      	ands	r3, r2
    93e2:	d001      	beq.n	93e8 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    93e4:	2303      	movs	r3, #3
    93e6:	e269      	b.n	98bc <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    93e8:	1dfb      	adds	r3, r7, #7
    93ea:	781b      	ldrb	r3, [r3, #0]
    93ec:	2b00      	cmp	r3, #0
    93ee:	d007      	beq.n	9400 <chk_mounted+0xec>
    93f0:	2327      	movs	r3, #39	; 0x27
    93f2:	18fb      	adds	r3, r7, r3
    93f4:	781b      	ldrb	r3, [r3, #0]
    93f6:	2204      	movs	r2, #4
    93f8:	4013      	ands	r3, r2
    93fa:	d001      	beq.n	9400 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    93fc:	230a      	movs	r3, #10
    93fe:	e25d      	b.n	98bc <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    9400:	2300      	movs	r3, #0
    9402:	63fb      	str	r3, [r7, #60]	; 0x3c
    9404:	2347      	movs	r3, #71	; 0x47
    9406:	18fc      	adds	r4, r7, r3
    9408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    940c:	0011      	movs	r1, r2
    940e:	0018      	movs	r0, r3
    9410:	4b9b      	ldr	r3, [pc, #620]	; (9680 <chk_mounted+0x36c>)
    9412:	4798      	blx	r3
    9414:	0003      	movs	r3, r0
    9416:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    9418:	2347      	movs	r3, #71	; 0x47
    941a:	18fb      	adds	r3, r7, r3
    941c:	781b      	ldrb	r3, [r3, #0]
    941e:	2b01      	cmp	r3, #1
    9420:	d13b      	bne.n	949a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    9422:	2346      	movs	r3, #70	; 0x46
    9424:	18fb      	adds	r3, r7, r3
    9426:	2200      	movs	r2, #0
    9428:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    942a:	2346      	movs	r3, #70	; 0x46
    942c:	18fb      	adds	r3, r7, r3
    942e:	781b      	ldrb	r3, [r3, #0]
    9430:	2b00      	cmp	r3, #0
    9432:	d006      	beq.n	9442 <chk_mounted+0x12e>
    9434:	2346      	movs	r3, #70	; 0x46
    9436:	18fb      	adds	r3, r7, r3
    9438:	781a      	ldrb	r2, [r3, #0]
    943a:	2346      	movs	r3, #70	; 0x46
    943c:	18fb      	adds	r3, r7, r3
    943e:	3a01      	subs	r2, #1
    9440:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    9442:	2346      	movs	r3, #70	; 0x46
    9444:	18fb      	adds	r3, r7, r3
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	011b      	lsls	r3, r3, #4
    944a:	33bf      	adds	r3, #191	; 0xbf
    944c:	33ff      	adds	r3, #255	; 0xff
    944e:	3330      	adds	r3, #48	; 0x30
    9450:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9452:	18d3      	adds	r3, r2, r3
    9454:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    9456:	6a3b      	ldr	r3, [r7, #32]
    9458:	3304      	adds	r3, #4
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	2b00      	cmp	r3, #0
    945e:	d01c      	beq.n	949a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    9460:	6a3b      	ldr	r3, [r7, #32]
    9462:	330b      	adds	r3, #11
    9464:	781b      	ldrb	r3, [r3, #0]
    9466:	061a      	lsls	r2, r3, #24
    9468:	6a3b      	ldr	r3, [r7, #32]
    946a:	330a      	adds	r3, #10
    946c:	781b      	ldrb	r3, [r3, #0]
    946e:	041b      	lsls	r3, r3, #16
    9470:	4313      	orrs	r3, r2
    9472:	6a3a      	ldr	r2, [r7, #32]
    9474:	3209      	adds	r2, #9
    9476:	7812      	ldrb	r2, [r2, #0]
    9478:	0212      	lsls	r2, r2, #8
    947a:	4313      	orrs	r3, r2
    947c:	6a3a      	ldr	r2, [r7, #32]
    947e:	3208      	adds	r2, #8
    9480:	7812      	ldrb	r2, [r2, #0]
    9482:	4313      	orrs	r3, r2
    9484:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    9486:	2347      	movs	r3, #71	; 0x47
    9488:	18fc      	adds	r4, r7, r3
    948a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    948e:	0011      	movs	r1, r2
    9490:	0018      	movs	r0, r3
    9492:	4b7b      	ldr	r3, [pc, #492]	; (9680 <chk_mounted+0x36c>)
    9494:	4798      	blx	r3
    9496:	0003      	movs	r3, r0
    9498:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    949a:	2347      	movs	r3, #71	; 0x47
    949c:	18fb      	adds	r3, r7, r3
    949e:	781b      	ldrb	r3, [r3, #0]
    94a0:	2b03      	cmp	r3, #3
    94a2:	d101      	bne.n	94a8 <chk_mounted+0x194>
    94a4:	2301      	movs	r3, #1
    94a6:	e209      	b.n	98bc <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    94a8:	2347      	movs	r3, #71	; 0x47
    94aa:	18fb      	adds	r3, r7, r3
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	2b00      	cmp	r3, #0
    94b0:	d001      	beq.n	94b6 <chk_mounted+0x1a2>
    94b2:	230d      	movs	r3, #13
    94b4:	e202      	b.n	98bc <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    94b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b8:	223c      	movs	r2, #60	; 0x3c
    94ba:	5c9b      	ldrb	r3, [r3, r2]
    94bc:	021b      	lsls	r3, r3, #8
    94be:	b21a      	sxth	r2, r3
    94c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94c2:	213b      	movs	r1, #59	; 0x3b
    94c4:	5c5b      	ldrb	r3, [r3, r1]
    94c6:	b21b      	sxth	r3, r3
    94c8:	4313      	orrs	r3, r2
    94ca:	b21a      	sxth	r2, r3
    94cc:	2380      	movs	r3, #128	; 0x80
    94ce:	009b      	lsls	r3, r3, #2
    94d0:	429a      	cmp	r2, r3
    94d2:	d001      	beq.n	94d8 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    94d4:	230d      	movs	r3, #13
    94d6:	e1f1      	b.n	98bc <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    94d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94da:	2247      	movs	r2, #71	; 0x47
    94dc:	5c9b      	ldrb	r3, [r3, r2]
    94de:	021b      	lsls	r3, r3, #8
    94e0:	b21a      	sxth	r2, r3
    94e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94e4:	2146      	movs	r1, #70	; 0x46
    94e6:	5c5b      	ldrb	r3, [r3, r1]
    94e8:	b21b      	sxth	r3, r3
    94ea:	4313      	orrs	r3, r2
    94ec:	b21b      	sxth	r3, r3
    94ee:	b29b      	uxth	r3, r3
    94f0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    94f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    94f4:	2b00      	cmp	r3, #0
    94f6:	d112      	bne.n	951e <chk_mounted+0x20a>
    94f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94fa:	2257      	movs	r2, #87	; 0x57
    94fc:	5c9b      	ldrb	r3, [r3, r2]
    94fe:	061a      	lsls	r2, r3, #24
    9500:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9502:	2156      	movs	r1, #86	; 0x56
    9504:	5c5b      	ldrb	r3, [r3, r1]
    9506:	041b      	lsls	r3, r3, #16
    9508:	4313      	orrs	r3, r2
    950a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    950c:	2155      	movs	r1, #85	; 0x55
    950e:	5c52      	ldrb	r2, [r2, r1]
    9510:	0212      	lsls	r2, r2, #8
    9512:	4313      	orrs	r3, r2
    9514:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9516:	2154      	movs	r1, #84	; 0x54
    9518:	5c52      	ldrb	r2, [r2, r1]
    951a:	4313      	orrs	r3, r2
    951c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9520:	6bba      	ldr	r2, [r7, #56]	; 0x38
    9522:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    9524:	231f      	movs	r3, #31
    9526:	18fb      	adds	r3, r7, r3
    9528:	6aba      	ldr	r2, [r7, #40]	; 0x28
    952a:	2140      	movs	r1, #64	; 0x40
    952c:	5c52      	ldrb	r2, [r2, r1]
    952e:	701a      	strb	r2, [r3, #0]
    9530:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9532:	221f      	movs	r2, #31
    9534:	18ba      	adds	r2, r7, r2
    9536:	7812      	ldrb	r2, [r2, #0]
    9538:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    953a:	231f      	movs	r3, #31
    953c:	18fb      	adds	r3, r7, r3
    953e:	781b      	ldrb	r3, [r3, #0]
    9540:	2b01      	cmp	r3, #1
    9542:	d006      	beq.n	9552 <chk_mounted+0x23e>
    9544:	231f      	movs	r3, #31
    9546:	18fb      	adds	r3, r7, r3
    9548:	781b      	ldrb	r3, [r3, #0]
    954a:	2b02      	cmp	r3, #2
    954c:	d001      	beq.n	9552 <chk_mounted+0x23e>
    954e:	230d      	movs	r3, #13
    9550:	e1b4      	b.n	98bc <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    9552:	231f      	movs	r3, #31
    9554:	18fb      	adds	r3, r7, r3
    9556:	781a      	ldrb	r2, [r3, #0]
    9558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    955a:	4353      	muls	r3, r2
    955c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    955e:	231f      	movs	r3, #31
    9560:	18fb      	adds	r3, r7, r3
    9562:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9564:	213d      	movs	r1, #61	; 0x3d
    9566:	5c52      	ldrb	r2, [r2, r1]
    9568:	701a      	strb	r2, [r3, #0]
    956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    956c:	221f      	movs	r2, #31
    956e:	18ba      	adds	r2, r7, r2
    9570:	7812      	ldrb	r2, [r2, #0]
    9572:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    9574:	231f      	movs	r3, #31
    9576:	18fb      	adds	r3, r7, r3
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	2b00      	cmp	r3, #0
    957c:	d008      	beq.n	9590 <chk_mounted+0x27c>
    957e:	231f      	movs	r3, #31
    9580:	18fb      	adds	r3, r7, r3
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	221f      	movs	r2, #31
    9586:	18ba      	adds	r2, r7, r2
    9588:	7812      	ldrb	r2, [r2, #0]
    958a:	3a01      	subs	r2, #1
    958c:	4013      	ands	r3, r2
    958e:	d001      	beq.n	9594 <chk_mounted+0x280>
    9590:	230d      	movs	r3, #13
    9592:	e193      	b.n	98bc <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    9594:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9596:	2242      	movs	r2, #66	; 0x42
    9598:	5c9b      	ldrb	r3, [r3, r2]
    959a:	021b      	lsls	r3, r3, #8
    959c:	b21a      	sxth	r2, r3
    959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95a0:	2141      	movs	r1, #65	; 0x41
    95a2:	5c5b      	ldrb	r3, [r3, r1]
    95a4:	b21b      	sxth	r3, r3
    95a6:	4313      	orrs	r3, r2
    95a8:	b21b      	sxth	r3, r3
    95aa:	b29a      	uxth	r2, r3
    95ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95ae:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    95b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95b2:	891b      	ldrh	r3, [r3, #8]
    95b4:	220f      	movs	r2, #15
    95b6:	4013      	ands	r3, r2
    95b8:	b29b      	uxth	r3, r3
    95ba:	2b00      	cmp	r3, #0
    95bc:	d001      	beq.n	95c2 <chk_mounted+0x2ae>
    95be:	230d      	movs	r3, #13
    95c0:	e17c      	b.n	98bc <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    95c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95c4:	2244      	movs	r2, #68	; 0x44
    95c6:	5c9b      	ldrb	r3, [r3, r2]
    95c8:	021b      	lsls	r3, r3, #8
    95ca:	b21a      	sxth	r2, r3
    95cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95ce:	2143      	movs	r1, #67	; 0x43
    95d0:	5c5b      	ldrb	r3, [r3, r1]
    95d2:	b21b      	sxth	r3, r3
    95d4:	4313      	orrs	r3, r2
    95d6:	b21b      	sxth	r3, r3
    95d8:	b29b      	uxth	r3, r3
    95da:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    95dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95de:	2b00      	cmp	r3, #0
    95e0:	d112      	bne.n	9608 <chk_mounted+0x2f4>
    95e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95e4:	2253      	movs	r2, #83	; 0x53
    95e6:	5c9b      	ldrb	r3, [r3, r2]
    95e8:	061a      	lsls	r2, r3, #24
    95ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95ec:	2152      	movs	r1, #82	; 0x52
    95ee:	5c5b      	ldrb	r3, [r3, r1]
    95f0:	041b      	lsls	r3, r3, #16
    95f2:	4313      	orrs	r3, r2
    95f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    95f6:	2151      	movs	r1, #81	; 0x51
    95f8:	5c52      	ldrb	r2, [r2, r1]
    95fa:	0212      	lsls	r2, r2, #8
    95fc:	4313      	orrs	r3, r2
    95fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9600:	2150      	movs	r1, #80	; 0x50
    9602:	5c52      	ldrb	r2, [r2, r1]
    9604:	4313      	orrs	r3, r2
    9606:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    9608:	6abb      	ldr	r3, [r7, #40]	; 0x28
    960a:	223f      	movs	r2, #63	; 0x3f
    960c:	5c9b      	ldrb	r3, [r3, r2]
    960e:	021b      	lsls	r3, r3, #8
    9610:	b21a      	sxth	r2, r3
    9612:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9614:	213e      	movs	r1, #62	; 0x3e
    9616:	5c5b      	ldrb	r3, [r3, r1]
    9618:	b21b      	sxth	r3, r3
    961a:	4313      	orrs	r3, r2
    961c:	b21a      	sxth	r2, r3
    961e:	231c      	movs	r3, #28
    9620:	18fb      	adds	r3, r7, r3
    9622:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    9624:	231c      	movs	r3, #28
    9626:	18fb      	adds	r3, r7, r3
    9628:	881b      	ldrh	r3, [r3, #0]
    962a:	2b00      	cmp	r3, #0
    962c:	d101      	bne.n	9632 <chk_mounted+0x31e>
    962e:	230d      	movs	r3, #13
    9630:	e144      	b.n	98bc <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    9632:	231c      	movs	r3, #28
    9634:	18fb      	adds	r3, r7, r3
    9636:	881a      	ldrh	r2, [r3, #0]
    9638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    963a:	18d3      	adds	r3, r2, r3
    963c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    963e:	8912      	ldrh	r2, [r2, #8]
    9640:	0912      	lsrs	r2, r2, #4
    9642:	b292      	uxth	r2, r2
    9644:	189b      	adds	r3, r3, r2
    9646:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    964a:	69bb      	ldr	r3, [r7, #24]
    964c:	429a      	cmp	r2, r3
    964e:	d201      	bcs.n	9654 <chk_mounted+0x340>
    9650:	230d      	movs	r3, #13
    9652:	e133      	b.n	98bc <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9656:	69bb      	ldr	r3, [r7, #24]
    9658:	1ad2      	subs	r2, r2, r3
    965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    965c:	789b      	ldrb	r3, [r3, #2]
    965e:	0019      	movs	r1, r3
    9660:	4b08      	ldr	r3, [pc, #32]	; (9684 <chk_mounted+0x370>)
    9662:	0010      	movs	r0, r2
    9664:	4798      	blx	r3
    9666:	0003      	movs	r3, r0
    9668:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    966a:	697b      	ldr	r3, [r7, #20]
    966c:	2b00      	cmp	r3, #0
    966e:	d10b      	bne.n	9688 <chk_mounted+0x374>
    9670:	230d      	movs	r3, #13
    9672:	e123      	b.n	98bc <chk_mounted+0x5a8>
    9674:	2000017c 	.word	0x2000017c
    9678:	000070f1 	.word	0x000070f1
    967c:	0000706d 	.word	0x0000706d
    9680:	00009241 	.word	0x00009241
    9684:	0000baa5 	.word	0x0000baa5
	fmt = FS_FAT12;
    9688:	2347      	movs	r3, #71	; 0x47
    968a:	18fb      	adds	r3, r7, r3
    968c:	2201      	movs	r2, #1
    968e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    9690:	697b      	ldr	r3, [r7, #20]
    9692:	4a8c      	ldr	r2, [pc, #560]	; (98c4 <chk_mounted+0x5b0>)
    9694:	4293      	cmp	r3, r2
    9696:	d903      	bls.n	96a0 <chk_mounted+0x38c>
    9698:	2347      	movs	r3, #71	; 0x47
    969a:	18fb      	adds	r3, r7, r3
    969c:	2202      	movs	r2, #2
    969e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    96a0:	697b      	ldr	r3, [r7, #20]
    96a2:	4a89      	ldr	r2, [pc, #548]	; (98c8 <chk_mounted+0x5b4>)
    96a4:	4293      	cmp	r3, r2
    96a6:	d903      	bls.n	96b0 <chk_mounted+0x39c>
    96a8:	2347      	movs	r3, #71	; 0x47
    96aa:	18fb      	adds	r3, r7, r3
    96ac:	2203      	movs	r2, #3
    96ae:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    96b0:	697b      	ldr	r3, [r7, #20]
    96b2:	1c9a      	adds	r2, r3, #2
    96b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96b6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    96b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    96ba:	69bb      	ldr	r3, [r7, #24]
    96bc:	18d2      	adds	r2, r2, r3
    96be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96c0:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    96c2:	231c      	movs	r3, #28
    96c4:	18fb      	adds	r3, r7, r3
    96c6:	881a      	ldrh	r2, [r3, #0]
    96c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96ca:	18d2      	adds	r2, r2, r3
    96cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96ce:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    96d0:	2347      	movs	r3, #71	; 0x47
    96d2:	18fb      	adds	r3, r7, r3
    96d4:	781b      	ldrb	r3, [r3, #0]
    96d6:	2b03      	cmp	r3, #3
    96d8:	d11e      	bne.n	9718 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    96da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96dc:	891b      	ldrh	r3, [r3, #8]
    96de:	2b00      	cmp	r3, #0
    96e0:	d001      	beq.n	96e6 <chk_mounted+0x3d2>
    96e2:	230d      	movs	r3, #13
    96e4:	e0ea      	b.n	98bc <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    96e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96e8:	225f      	movs	r2, #95	; 0x5f
    96ea:	5c9b      	ldrb	r3, [r3, r2]
    96ec:	061a      	lsls	r2, r3, #24
    96ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96f0:	215e      	movs	r1, #94	; 0x5e
    96f2:	5c5b      	ldrb	r3, [r3, r1]
    96f4:	041b      	lsls	r3, r3, #16
    96f6:	4313      	orrs	r3, r2
    96f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96fa:	215d      	movs	r1, #93	; 0x5d
    96fc:	5c52      	ldrb	r2, [r2, r1]
    96fe:	0212      	lsls	r2, r2, #8
    9700:	4313      	orrs	r3, r2
    9702:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9704:	215c      	movs	r1, #92	; 0x5c
    9706:	5c52      	ldrb	r2, [r2, r1]
    9708:	431a      	orrs	r2, r3
    970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    970c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9710:	699b      	ldr	r3, [r3, #24]
    9712:	009b      	lsls	r3, r3, #2
    9714:	633b      	str	r3, [r7, #48]	; 0x30
    9716:	e020      	b.n	975a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9718:	6abb      	ldr	r3, [r7, #40]	; 0x28
    971a:	891b      	ldrh	r3, [r3, #8]
    971c:	2b00      	cmp	r3, #0
    971e:	d101      	bne.n	9724 <chk_mounted+0x410>
    9720:	230d      	movs	r3, #13
    9722:	e0cb      	b.n	98bc <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    9724:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9726:	6a1a      	ldr	r2, [r3, #32]
    9728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    972a:	18d2      	adds	r2, r2, r3
    972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    972e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9730:	2347      	movs	r3, #71	; 0x47
    9732:	18fb      	adds	r3, r7, r3
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	2b02      	cmp	r3, #2
    9738:	d103      	bne.n	9742 <chk_mounted+0x42e>
    973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    973c:	699b      	ldr	r3, [r3, #24]
    973e:	005b      	lsls	r3, r3, #1
    9740:	e00a      	b.n	9758 <chk_mounted+0x444>
    9742:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9744:	699a      	ldr	r2, [r3, #24]
    9746:	0013      	movs	r3, r2
    9748:	005b      	lsls	r3, r3, #1
    974a:	189b      	adds	r3, r3, r2
    974c:	085a      	lsrs	r2, r3, #1
    974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9750:	699b      	ldr	r3, [r3, #24]
    9752:	2101      	movs	r1, #1
    9754:	400b      	ands	r3, r1
    9756:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9758:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    975c:	69da      	ldr	r2, [r3, #28]
    975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9760:	495a      	ldr	r1, [pc, #360]	; (98cc <chk_mounted+0x5b8>)
    9762:	468c      	mov	ip, r1
    9764:	4463      	add	r3, ip
    9766:	0a5b      	lsrs	r3, r3, #9
    9768:	429a      	cmp	r2, r3
    976a:	d201      	bcs.n	9770 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    976c:	230d      	movs	r3, #13
    976e:	e0a5      	b.n	98bc <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9770:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9772:	2201      	movs	r2, #1
    9774:	4252      	negs	r2, r2
    9776:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    9778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    977a:	2200      	movs	r2, #0
    977c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    977e:	2347      	movs	r3, #71	; 0x47
    9780:	18fb      	adds	r3, r7, r3
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	2b03      	cmp	r3, #3
    9786:	d000      	beq.n	978a <chk_mounted+0x476>
    9788:	e082      	b.n	9890 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    978c:	2200      	movs	r2, #0
    978e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    9790:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9792:	2261      	movs	r2, #97	; 0x61
    9794:	5c9b      	ldrb	r3, [r3, r2]
    9796:	021b      	lsls	r3, r3, #8
    9798:	b21a      	sxth	r2, r3
    979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    979c:	2160      	movs	r1, #96	; 0x60
    979e:	5c5b      	ldrb	r3, [r3, r1]
    97a0:	b21b      	sxth	r3, r3
    97a2:	4313      	orrs	r3, r2
    97a4:	b21b      	sxth	r3, r3
    97a6:	b29b      	uxth	r3, r3
    97a8:	001a      	movs	r2, r3
    97aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97ac:	18d2      	adds	r2, r2, r3
    97ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97b0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    97b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97b4:	7858      	ldrb	r0, [r3, #1]
    97b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97b8:	3330      	adds	r3, #48	; 0x30
    97ba:	0019      	movs	r1, r3
    97bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97be:	695a      	ldr	r2, [r3, #20]
    97c0:	2301      	movs	r3, #1
    97c2:	4c43      	ldr	r4, [pc, #268]	; (98d0 <chk_mounted+0x5bc>)
    97c4:	47a0      	blx	r4
    97c6:	1e03      	subs	r3, r0, #0
    97c8:	d162      	bne.n	9890 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    97ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97cc:	4a41      	ldr	r2, [pc, #260]	; (98d4 <chk_mounted+0x5c0>)
    97ce:	5c9b      	ldrb	r3, [r3, r2]
    97d0:	021b      	lsls	r3, r3, #8
    97d2:	b21a      	sxth	r2, r3
    97d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97d6:	4940      	ldr	r1, [pc, #256]	; (98d8 <chk_mounted+0x5c4>)
    97d8:	5c5b      	ldrb	r3, [r3, r1]
    97da:	b21b      	sxth	r3, r3
    97dc:	4313      	orrs	r3, r2
    97de:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    97e0:	4a3e      	ldr	r2, [pc, #248]	; (98dc <chk_mounted+0x5c8>)
    97e2:	4293      	cmp	r3, r2
    97e4:	d154      	bne.n	9890 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    97e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97e8:	2233      	movs	r2, #51	; 0x33
    97ea:	5c9b      	ldrb	r3, [r3, r2]
    97ec:	061a      	lsls	r2, r3, #24
    97ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97f0:	2132      	movs	r1, #50	; 0x32
    97f2:	5c5b      	ldrb	r3, [r3, r1]
    97f4:	041b      	lsls	r3, r3, #16
    97f6:	4313      	orrs	r3, r2
    97f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    97fa:	2131      	movs	r1, #49	; 0x31
    97fc:	5c52      	ldrb	r2, [r2, r1]
    97fe:	0212      	lsls	r2, r2, #8
    9800:	4313      	orrs	r3, r2
    9802:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9804:	2130      	movs	r1, #48	; 0x30
    9806:	5c52      	ldrb	r2, [r2, r1]
    9808:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    980a:	4a35      	ldr	r2, [pc, #212]	; (98e0 <chk_mounted+0x5cc>)
    980c:	4293      	cmp	r3, r2
    980e:	d13f      	bne.n	9890 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9810:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9812:	4a34      	ldr	r2, [pc, #208]	; (98e4 <chk_mounted+0x5d0>)
    9814:	5c9b      	ldrb	r3, [r3, r2]
    9816:	061a      	lsls	r2, r3, #24
    9818:	6abb      	ldr	r3, [r7, #40]	; 0x28
    981a:	4933      	ldr	r1, [pc, #204]	; (98e8 <chk_mounted+0x5d4>)
    981c:	5c5b      	ldrb	r3, [r3, r1]
    981e:	041b      	lsls	r3, r3, #16
    9820:	4313      	orrs	r3, r2
    9822:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9824:	4931      	ldr	r1, [pc, #196]	; (98ec <chk_mounted+0x5d8>)
    9826:	5c52      	ldrb	r2, [r2, r1]
    9828:	0212      	lsls	r2, r2, #8
    982a:	4313      	orrs	r3, r2
    982c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    982e:	2285      	movs	r2, #133	; 0x85
    9830:	0092      	lsls	r2, r2, #2
    9832:	5c8a      	ldrb	r2, [r1, r2]
    9834:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9836:	4a2e      	ldr	r2, [pc, #184]	; (98f0 <chk_mounted+0x5dc>)
    9838:	4293      	cmp	r3, r2
    983a:	d129      	bne.n	9890 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    983e:	4a2d      	ldr	r2, [pc, #180]	; (98f4 <chk_mounted+0x5e0>)
    9840:	5c9b      	ldrb	r3, [r3, r2]
    9842:	061a      	lsls	r2, r3, #24
    9844:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9846:	492c      	ldr	r1, [pc, #176]	; (98f8 <chk_mounted+0x5e4>)
    9848:	5c5b      	ldrb	r3, [r3, r1]
    984a:	041b      	lsls	r3, r3, #16
    984c:	4313      	orrs	r3, r2
    984e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9850:	492a      	ldr	r1, [pc, #168]	; (98fc <chk_mounted+0x5e8>)
    9852:	5c52      	ldrb	r2, [r2, r1]
    9854:	0212      	lsls	r2, r2, #8
    9856:	4313      	orrs	r3, r2
    9858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    985a:	2287      	movs	r2, #135	; 0x87
    985c:	0092      	lsls	r2, r2, #2
    985e:	5c8a      	ldrb	r2, [r1, r2]
    9860:	431a      	orrs	r2, r3
    9862:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9864:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    9866:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9868:	4a25      	ldr	r2, [pc, #148]	; (9900 <chk_mounted+0x5ec>)
    986a:	5c9b      	ldrb	r3, [r3, r2]
    986c:	061a      	lsls	r2, r3, #24
    986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9870:	4924      	ldr	r1, [pc, #144]	; (9904 <chk_mounted+0x5f0>)
    9872:	5c5b      	ldrb	r3, [r3, r1]
    9874:	041b      	lsls	r3, r3, #16
    9876:	4313      	orrs	r3, r2
    9878:	6aba      	ldr	r2, [r7, #40]	; 0x28
    987a:	4923      	ldr	r1, [pc, #140]	; (9908 <chk_mounted+0x5f4>)
    987c:	5c52      	ldrb	r2, [r2, r1]
    987e:	0212      	lsls	r2, r2, #8
    9880:	4313      	orrs	r3, r2
    9882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9884:	2286      	movs	r2, #134	; 0x86
    9886:	0092      	lsls	r2, r2, #2
    9888:	5c8a      	ldrb	r2, [r1, r2]
    988a:	431a      	orrs	r2, r3
    988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    988e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9890:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9892:	2247      	movs	r2, #71	; 0x47
    9894:	18ba      	adds	r2, r7, r2
    9896:	7812      	ldrb	r2, [r2, #0]
    9898:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    989a:	4b1c      	ldr	r3, [pc, #112]	; (990c <chk_mounted+0x5f8>)
    989c:	881b      	ldrh	r3, [r3, #0]
    989e:	3301      	adds	r3, #1
    98a0:	b29a      	uxth	r2, r3
    98a2:	4b1a      	ldr	r3, [pc, #104]	; (990c <chk_mounted+0x5f8>)
    98a4:	801a      	strh	r2, [r3, #0]
    98a6:	4b19      	ldr	r3, [pc, #100]	; (990c <chk_mounted+0x5f8>)
    98a8:	881a      	ldrh	r2, [r3, #0]
    98aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98ac:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    98ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98b0:	2200      	movs	r2, #0
    98b2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    98b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98b6:	2200      	movs	r2, #0
    98b8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    98ba:	2300      	movs	r3, #0
}
    98bc:	0018      	movs	r0, r3
    98be:	46bd      	mov	sp, r7
    98c0:	b013      	add	sp, #76	; 0x4c
    98c2:	bd90      	pop	{r4, r7, pc}
    98c4:	00000ff5 	.word	0x00000ff5
    98c8:	0000fff5 	.word	0x0000fff5
    98cc:	000001ff 	.word	0x000001ff
    98d0:	00007129 	.word	0x00007129
    98d4:	0000022f 	.word	0x0000022f
    98d8:	0000022e 	.word	0x0000022e
    98dc:	ffffaa55 	.word	0xffffaa55
    98e0:	41615252 	.word	0x41615252
    98e4:	00000217 	.word	0x00000217
    98e8:	00000216 	.word	0x00000216
    98ec:	00000215 	.word	0x00000215
    98f0:	61417272 	.word	0x61417272
    98f4:	0000021f 	.word	0x0000021f
    98f8:	0000021e 	.word	0x0000021e
    98fc:	0000021d 	.word	0x0000021d
    9900:	0000021b 	.word	0x0000021b
    9904:	0000021a 	.word	0x0000021a
    9908:	00000219 	.word	0x00000219
    990c:	20000180 	.word	0x20000180

00009910 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9910:	b580      	push	{r7, lr}
    9912:	b082      	sub	sp, #8
    9914:	af00      	add	r7, sp, #0
    9916:	6078      	str	r0, [r7, #4]
    9918:	000a      	movs	r2, r1
    991a:	1cbb      	adds	r3, r7, #2
    991c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    991e:	687b      	ldr	r3, [r7, #4]
    9920:	2b00      	cmp	r3, #0
    9922:	d009      	beq.n	9938 <validate+0x28>
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	781b      	ldrb	r3, [r3, #0]
    9928:	2b00      	cmp	r3, #0
    992a:	d005      	beq.n	9938 <validate+0x28>
    992c:	687b      	ldr	r3, [r7, #4]
    992e:	88db      	ldrh	r3, [r3, #6]
    9930:	1cba      	adds	r2, r7, #2
    9932:	8812      	ldrh	r2, [r2, #0]
    9934:	429a      	cmp	r2, r3
    9936:	d001      	beq.n	993c <validate+0x2c>
		return FR_INVALID_OBJECT;
    9938:	2309      	movs	r3, #9
    993a:	e00c      	b.n	9956 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    993c:	687b      	ldr	r3, [r7, #4]
    993e:	785b      	ldrb	r3, [r3, #1]
    9940:	0018      	movs	r0, r3
    9942:	4b07      	ldr	r3, [pc, #28]	; (9960 <validate+0x50>)
    9944:	4798      	blx	r3
    9946:	0003      	movs	r3, r0
    9948:	001a      	movs	r2, r3
    994a:	2301      	movs	r3, #1
    994c:	4013      	ands	r3, r2
    994e:	d001      	beq.n	9954 <validate+0x44>
		return FR_NOT_READY;
    9950:	2303      	movs	r3, #3
    9952:	e000      	b.n	9956 <validate+0x46>

	return FR_OK;
    9954:	2300      	movs	r3, #0
}
    9956:	0018      	movs	r0, r3
    9958:	46bd      	mov	sp, r7
    995a:	b002      	add	sp, #8
    995c:	bd80      	pop	{r7, pc}
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	000070f1 	.word	0x000070f1

00009964 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9964:	b580      	push	{r7, lr}
    9966:	b084      	sub	sp, #16
    9968:	af00      	add	r7, sp, #0
    996a:	0002      	movs	r2, r0
    996c:	6039      	str	r1, [r7, #0]
    996e:	1dfb      	adds	r3, r7, #7
    9970:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    9972:	1dfb      	adds	r3, r7, #7
    9974:	781b      	ldrb	r3, [r3, #0]
    9976:	2b00      	cmp	r3, #0
    9978:	d001      	beq.n	997e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    997a:	230b      	movs	r3, #11
    997c:	e018      	b.n	99b0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    997e:	1dfb      	adds	r3, r7, #7
    9980:	781a      	ldrb	r2, [r3, #0]
    9982:	4b0d      	ldr	r3, [pc, #52]	; (99b8 <f_mount+0x54>)
    9984:	0092      	lsls	r2, r2, #2
    9986:	58d3      	ldr	r3, [r2, r3]
    9988:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    998a:	68fb      	ldr	r3, [r7, #12]
    998c:	2b00      	cmp	r3, #0
    998e:	d002      	beq.n	9996 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9990:	68fb      	ldr	r3, [r7, #12]
    9992:	2200      	movs	r2, #0
    9994:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    9996:	683b      	ldr	r3, [r7, #0]
    9998:	2b00      	cmp	r3, #0
    999a:	d002      	beq.n	99a2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    999c:	683b      	ldr	r3, [r7, #0]
    999e:	2200      	movs	r2, #0
    99a0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    99a2:	1dfb      	adds	r3, r7, #7
    99a4:	781a      	ldrb	r2, [r3, #0]
    99a6:	4b04      	ldr	r3, [pc, #16]	; (99b8 <f_mount+0x54>)
    99a8:	0092      	lsls	r2, r2, #2
    99aa:	6839      	ldr	r1, [r7, #0]
    99ac:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    99ae:	2300      	movs	r3, #0
}
    99b0:	0018      	movs	r0, r3
    99b2:	46bd      	mov	sp, r7
    99b4:	b004      	add	sp, #16
    99b6:	bd80      	pop	{r7, pc}
    99b8:	2000017c 	.word	0x2000017c

000099bc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    99bc:	b590      	push	{r4, r7, lr}
    99be:	4ce5      	ldr	r4, [pc, #916]	; (9d54 <f_open+0x398>)
    99c0:	44a5      	add	sp, r4
    99c2:	af00      	add	r7, sp, #0
    99c4:	60f8      	str	r0, [r7, #12]
    99c6:	60b9      	str	r1, [r7, #8]
    99c8:	4be3      	ldr	r3, [pc, #908]	; (9d58 <f_open+0x39c>)
    99ca:	2194      	movs	r1, #148	; 0x94
    99cc:	0089      	lsls	r1, r1, #2
    99ce:	468c      	mov	ip, r1
    99d0:	44bc      	add	ip, r7
    99d2:	4463      	add	r3, ip
    99d4:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    99d6:	68fb      	ldr	r3, [r7, #12]
    99d8:	2200      	movs	r2, #0
    99da:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    99dc:	4bde      	ldr	r3, [pc, #888]	; (9d58 <f_open+0x39c>)
    99de:	2294      	movs	r2, #148	; 0x94
    99e0:	0092      	lsls	r2, r2, #2
    99e2:	4694      	mov	ip, r2
    99e4:	44bc      	add	ip, r7
    99e6:	4463      	add	r3, ip
    99e8:	4adb      	ldr	r2, [pc, #876]	; (9d58 <f_open+0x39c>)
    99ea:	2194      	movs	r1, #148	; 0x94
    99ec:	0089      	lsls	r1, r1, #2
    99ee:	468c      	mov	ip, r1
    99f0:	44bc      	add	ip, r7
    99f2:	4462      	add	r2, ip
    99f4:	7812      	ldrb	r2, [r2, #0]
    99f6:	211f      	movs	r1, #31
    99f8:	400a      	ands	r2, r1
    99fa:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    99fc:	4bd6      	ldr	r3, [pc, #856]	; (9d58 <f_open+0x39c>)
    99fe:	2294      	movs	r2, #148	; 0x94
    9a00:	0092      	lsls	r2, r2, #2
    9a02:	4694      	mov	ip, r2
    9a04:	44bc      	add	ip, r7
    9a06:	4463      	add	r3, ip
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	2201      	movs	r2, #1
    9a0c:	4393      	bics	r3, r2
    9a0e:	b2da      	uxtb	r2, r3
    9a10:	4bd2      	ldr	r3, [pc, #840]	; (9d5c <f_open+0x3a0>)
    9a12:	18fc      	adds	r4, r7, r3
    9a14:	2387      	movs	r3, #135	; 0x87
    9a16:	009b      	lsls	r3, r3, #2
    9a18:	18f9      	adds	r1, r7, r3
    9a1a:	2308      	movs	r3, #8
    9a1c:	18fb      	adds	r3, r7, r3
    9a1e:	0018      	movs	r0, r3
    9a20:	4bcf      	ldr	r3, [pc, #828]	; (9d60 <f_open+0x3a4>)
    9a22:	4798      	blx	r3
    9a24:	0003      	movs	r3, r0
    9a26:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    9a28:	2387      	movs	r3, #135	; 0x87
    9a2a:	009b      	lsls	r3, r3, #2
    9a2c:	18fb      	adds	r3, r7, r3
    9a2e:	2284      	movs	r2, #132	; 0x84
    9a30:	0092      	lsls	r2, r2, #2
    9a32:	18ba      	adds	r2, r7, r2
    9a34:	619a      	str	r2, [r3, #24]
    9a36:	2387      	movs	r3, #135	; 0x87
    9a38:	009b      	lsls	r3, r3, #2
    9a3a:	18fb      	adds	r3, r7, r3
    9a3c:	2210      	movs	r2, #16
    9a3e:	18ba      	adds	r2, r7, r2
    9a40:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    9a42:	4bc6      	ldr	r3, [pc, #792]	; (9d5c <f_open+0x3a0>)
    9a44:	18fb      	adds	r3, r7, r3
    9a46:	781b      	ldrb	r3, [r3, #0]
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d10b      	bne.n	9a64 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9a4c:	68ba      	ldr	r2, [r7, #8]
    9a4e:	4bc3      	ldr	r3, [pc, #780]	; (9d5c <f_open+0x3a0>)
    9a50:	18fc      	adds	r4, r7, r3
    9a52:	2387      	movs	r3, #135	; 0x87
    9a54:	009b      	lsls	r3, r3, #2
    9a56:	18fb      	adds	r3, r7, r3
    9a58:	0011      	movs	r1, r2
    9a5a:	0018      	movs	r0, r3
    9a5c:	4bc1      	ldr	r3, [pc, #772]	; (9d64 <f_open+0x3a8>)
    9a5e:	4798      	blx	r3
    9a60:	0003      	movs	r3, r0
    9a62:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9a64:	2387      	movs	r3, #135	; 0x87
    9a66:	009b      	lsls	r3, r3, #2
    9a68:	18fb      	adds	r3, r7, r3
    9a6a:	695b      	ldr	r3, [r3, #20]
    9a6c:	2292      	movs	r2, #146	; 0x92
    9a6e:	0092      	lsls	r2, r2, #2
    9a70:	18ba      	adds	r2, r7, r2
    9a72:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9a74:	4bb9      	ldr	r3, [pc, #740]	; (9d5c <f_open+0x3a0>)
    9a76:	18fb      	adds	r3, r7, r3
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d109      	bne.n	9a92 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9a7e:	2392      	movs	r3, #146	; 0x92
    9a80:	009b      	lsls	r3, r3, #2
    9a82:	18fb      	adds	r3, r7, r3
    9a84:	681b      	ldr	r3, [r3, #0]
    9a86:	2b00      	cmp	r3, #0
    9a88:	d103      	bne.n	9a92 <f_open+0xd6>
			res = FR_INVALID_NAME;
    9a8a:	4bb4      	ldr	r3, [pc, #720]	; (9d5c <f_open+0x3a0>)
    9a8c:	18fb      	adds	r3, r7, r3
    9a8e:	2206      	movs	r2, #6
    9a90:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9a92:	4bb1      	ldr	r3, [pc, #708]	; (9d58 <f_open+0x39c>)
    9a94:	2294      	movs	r2, #148	; 0x94
    9a96:	0092      	lsls	r2, r2, #2
    9a98:	4694      	mov	ip, r2
    9a9a:	44bc      	add	ip, r7
    9a9c:	4463      	add	r3, ip
    9a9e:	781b      	ldrb	r3, [r3, #0]
    9aa0:	221c      	movs	r2, #28
    9aa2:	4013      	ands	r3, r2
    9aa4:	d100      	bne.n	9aa8 <f_open+0xec>
    9aa6:	e141      	b.n	9d2c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9aa8:	4bac      	ldr	r3, [pc, #688]	; (9d5c <f_open+0x3a0>)
    9aaa:	18fb      	adds	r3, r7, r3
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d027      	beq.n	9b02 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9ab2:	4baa      	ldr	r3, [pc, #680]	; (9d5c <f_open+0x3a0>)
    9ab4:	18fb      	adds	r3, r7, r3
    9ab6:	781b      	ldrb	r3, [r3, #0]
    9ab8:	2b04      	cmp	r3, #4
    9aba:	d109      	bne.n	9ad0 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9abc:	4ba7      	ldr	r3, [pc, #668]	; (9d5c <f_open+0x3a0>)
    9abe:	18fc      	adds	r4, r7, r3
    9ac0:	2387      	movs	r3, #135	; 0x87
    9ac2:	009b      	lsls	r3, r3, #2
    9ac4:	18fb      	adds	r3, r7, r3
    9ac6:	0018      	movs	r0, r3
    9ac8:	4ba7      	ldr	r3, [pc, #668]	; (9d68 <f_open+0x3ac>)
    9aca:	4798      	blx	r3
    9acc:	0003      	movs	r3, r0
    9ace:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9ad0:	4ba1      	ldr	r3, [pc, #644]	; (9d58 <f_open+0x39c>)
    9ad2:	2294      	movs	r2, #148	; 0x94
    9ad4:	0092      	lsls	r2, r2, #2
    9ad6:	4694      	mov	ip, r2
    9ad8:	44bc      	add	ip, r7
    9ada:	4463      	add	r3, ip
    9adc:	4a9e      	ldr	r2, [pc, #632]	; (9d58 <f_open+0x39c>)
    9ade:	2194      	movs	r1, #148	; 0x94
    9ae0:	0089      	lsls	r1, r1, #2
    9ae2:	468c      	mov	ip, r1
    9ae4:	44bc      	add	ip, r7
    9ae6:	4462      	add	r2, ip
    9ae8:	7812      	ldrb	r2, [r2, #0]
    9aea:	2108      	movs	r1, #8
    9aec:	430a      	orrs	r2, r1
    9aee:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9af0:	2387      	movs	r3, #135	; 0x87
    9af2:	009b      	lsls	r3, r3, #2
    9af4:	18fb      	adds	r3, r7, r3
    9af6:	695b      	ldr	r3, [r3, #20]
    9af8:	2292      	movs	r2, #146	; 0x92
    9afa:	0092      	lsls	r2, r2, #2
    9afc:	18ba      	adds	r2, r7, r2
    9afe:	6013      	str	r3, [r2, #0]
    9b00:	e01c      	b.n	9b3c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9b02:	2392      	movs	r3, #146	; 0x92
    9b04:	009b      	lsls	r3, r3, #2
    9b06:	18fb      	adds	r3, r7, r3
    9b08:	681b      	ldr	r3, [r3, #0]
    9b0a:	330b      	adds	r3, #11
    9b0c:	781b      	ldrb	r3, [r3, #0]
    9b0e:	001a      	movs	r2, r3
    9b10:	2311      	movs	r3, #17
    9b12:	4013      	ands	r3, r2
    9b14:	d004      	beq.n	9b20 <f_open+0x164>
				res = FR_DENIED;
    9b16:	4b91      	ldr	r3, [pc, #580]	; (9d5c <f_open+0x3a0>)
    9b18:	18fb      	adds	r3, r7, r3
    9b1a:	2207      	movs	r2, #7
    9b1c:	701a      	strb	r2, [r3, #0]
    9b1e:	e00d      	b.n	9b3c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9b20:	4b8d      	ldr	r3, [pc, #564]	; (9d58 <f_open+0x39c>)
    9b22:	2294      	movs	r2, #148	; 0x94
    9b24:	0092      	lsls	r2, r2, #2
    9b26:	4694      	mov	ip, r2
    9b28:	44bc      	add	ip, r7
    9b2a:	4463      	add	r3, ip
    9b2c:	781b      	ldrb	r3, [r3, #0]
    9b2e:	2204      	movs	r2, #4
    9b30:	4013      	ands	r3, r2
    9b32:	d003      	beq.n	9b3c <f_open+0x180>
					res = FR_EXIST;
    9b34:	4b89      	ldr	r3, [pc, #548]	; (9d5c <f_open+0x3a0>)
    9b36:	18fb      	adds	r3, r7, r3
    9b38:	2208      	movs	r2, #8
    9b3a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9b3c:	4b87      	ldr	r3, [pc, #540]	; (9d5c <f_open+0x3a0>)
    9b3e:	18fb      	adds	r3, r7, r3
    9b40:	781b      	ldrb	r3, [r3, #0]
    9b42:	2b00      	cmp	r3, #0
    9b44:	d000      	beq.n	9b48 <f_open+0x18c>
    9b46:	e12f      	b.n	9da8 <f_open+0x3ec>
    9b48:	4b83      	ldr	r3, [pc, #524]	; (9d58 <f_open+0x39c>)
    9b4a:	2294      	movs	r2, #148	; 0x94
    9b4c:	0092      	lsls	r2, r2, #2
    9b4e:	4694      	mov	ip, r2
    9b50:	44bc      	add	ip, r7
    9b52:	4463      	add	r3, ip
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	2208      	movs	r2, #8
    9b58:	4013      	ands	r3, r2
    9b5a:	d100      	bne.n	9b5e <f_open+0x1a2>
    9b5c:	e124      	b.n	9da8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9b5e:	4b83      	ldr	r3, [pc, #524]	; (9d6c <f_open+0x3b0>)
    9b60:	4798      	blx	r3
    9b62:	0003      	movs	r3, r0
    9b64:	2291      	movs	r2, #145	; 0x91
    9b66:	0092      	lsls	r2, r2, #2
    9b68:	18ba      	adds	r2, r7, r2
    9b6a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9b6c:	2392      	movs	r3, #146	; 0x92
    9b6e:	009b      	lsls	r3, r3, #2
    9b70:	18fb      	adds	r3, r7, r3
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	330e      	adds	r3, #14
    9b76:	2291      	movs	r2, #145	; 0x91
    9b78:	0092      	lsls	r2, r2, #2
    9b7a:	18ba      	adds	r2, r7, r2
    9b7c:	6812      	ldr	r2, [r2, #0]
    9b7e:	b2d2      	uxtb	r2, r2
    9b80:	701a      	strb	r2, [r3, #0]
    9b82:	2392      	movs	r3, #146	; 0x92
    9b84:	009b      	lsls	r3, r3, #2
    9b86:	18fb      	adds	r3, r7, r3
    9b88:	681b      	ldr	r3, [r3, #0]
    9b8a:	330f      	adds	r3, #15
    9b8c:	2291      	movs	r2, #145	; 0x91
    9b8e:	0092      	lsls	r2, r2, #2
    9b90:	18ba      	adds	r2, r7, r2
    9b92:	6812      	ldr	r2, [r2, #0]
    9b94:	b292      	uxth	r2, r2
    9b96:	0a12      	lsrs	r2, r2, #8
    9b98:	b292      	uxth	r2, r2
    9b9a:	b2d2      	uxtb	r2, r2
    9b9c:	701a      	strb	r2, [r3, #0]
    9b9e:	2392      	movs	r3, #146	; 0x92
    9ba0:	009b      	lsls	r3, r3, #2
    9ba2:	18fb      	adds	r3, r7, r3
    9ba4:	681b      	ldr	r3, [r3, #0]
    9ba6:	3310      	adds	r3, #16
    9ba8:	2291      	movs	r2, #145	; 0x91
    9baa:	0092      	lsls	r2, r2, #2
    9bac:	18ba      	adds	r2, r7, r2
    9bae:	6812      	ldr	r2, [r2, #0]
    9bb0:	0c12      	lsrs	r2, r2, #16
    9bb2:	b2d2      	uxtb	r2, r2
    9bb4:	701a      	strb	r2, [r3, #0]
    9bb6:	2392      	movs	r3, #146	; 0x92
    9bb8:	009b      	lsls	r3, r3, #2
    9bba:	18fb      	adds	r3, r7, r3
    9bbc:	681b      	ldr	r3, [r3, #0]
    9bbe:	3311      	adds	r3, #17
    9bc0:	2291      	movs	r2, #145	; 0x91
    9bc2:	0092      	lsls	r2, r2, #2
    9bc4:	18ba      	adds	r2, r7, r2
    9bc6:	6812      	ldr	r2, [r2, #0]
    9bc8:	0e12      	lsrs	r2, r2, #24
    9bca:	b2d2      	uxtb	r2, r2
    9bcc:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9bce:	2392      	movs	r3, #146	; 0x92
    9bd0:	009b      	lsls	r3, r3, #2
    9bd2:	18fb      	adds	r3, r7, r3
    9bd4:	681b      	ldr	r3, [r3, #0]
    9bd6:	330b      	adds	r3, #11
    9bd8:	2200      	movs	r2, #0
    9bda:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9bdc:	2392      	movs	r3, #146	; 0x92
    9bde:	009b      	lsls	r3, r3, #2
    9be0:	18fb      	adds	r3, r7, r3
    9be2:	681b      	ldr	r3, [r3, #0]
    9be4:	331c      	adds	r3, #28
    9be6:	2200      	movs	r2, #0
    9be8:	701a      	strb	r2, [r3, #0]
    9bea:	2392      	movs	r3, #146	; 0x92
    9bec:	009b      	lsls	r3, r3, #2
    9bee:	18fb      	adds	r3, r7, r3
    9bf0:	681b      	ldr	r3, [r3, #0]
    9bf2:	331d      	adds	r3, #29
    9bf4:	2200      	movs	r2, #0
    9bf6:	701a      	strb	r2, [r3, #0]
    9bf8:	2392      	movs	r3, #146	; 0x92
    9bfa:	009b      	lsls	r3, r3, #2
    9bfc:	18fb      	adds	r3, r7, r3
    9bfe:	681b      	ldr	r3, [r3, #0]
    9c00:	331e      	adds	r3, #30
    9c02:	2200      	movs	r2, #0
    9c04:	701a      	strb	r2, [r3, #0]
    9c06:	2392      	movs	r3, #146	; 0x92
    9c08:	009b      	lsls	r3, r3, #2
    9c0a:	18fb      	adds	r3, r7, r3
    9c0c:	681b      	ldr	r3, [r3, #0]
    9c0e:	331f      	adds	r3, #31
    9c10:	2200      	movs	r2, #0
    9c12:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9c14:	2392      	movs	r3, #146	; 0x92
    9c16:	009b      	lsls	r3, r3, #2
    9c18:	18fb      	adds	r3, r7, r3
    9c1a:	681b      	ldr	r3, [r3, #0]
    9c1c:	3315      	adds	r3, #21
    9c1e:	781b      	ldrb	r3, [r3, #0]
    9c20:	021b      	lsls	r3, r3, #8
    9c22:	b21a      	sxth	r2, r3
    9c24:	2392      	movs	r3, #146	; 0x92
    9c26:	009b      	lsls	r3, r3, #2
    9c28:	18fb      	adds	r3, r7, r3
    9c2a:	681b      	ldr	r3, [r3, #0]
    9c2c:	3314      	adds	r3, #20
    9c2e:	781b      	ldrb	r3, [r3, #0]
    9c30:	b21b      	sxth	r3, r3
    9c32:	4313      	orrs	r3, r2
    9c34:	b21b      	sxth	r3, r3
    9c36:	b29b      	uxth	r3, r3
    9c38:	041b      	lsls	r3, r3, #16
    9c3a:	2292      	movs	r2, #146	; 0x92
    9c3c:	0092      	lsls	r2, r2, #2
    9c3e:	18ba      	adds	r2, r7, r2
    9c40:	6812      	ldr	r2, [r2, #0]
    9c42:	321b      	adds	r2, #27
    9c44:	7812      	ldrb	r2, [r2, #0]
    9c46:	0212      	lsls	r2, r2, #8
    9c48:	b211      	sxth	r1, r2
    9c4a:	2292      	movs	r2, #146	; 0x92
    9c4c:	0092      	lsls	r2, r2, #2
    9c4e:	18ba      	adds	r2, r7, r2
    9c50:	6812      	ldr	r2, [r2, #0]
    9c52:	321a      	adds	r2, #26
    9c54:	7812      	ldrb	r2, [r2, #0]
    9c56:	b212      	sxth	r2, r2
    9c58:	430a      	orrs	r2, r1
    9c5a:	b212      	sxth	r2, r2
    9c5c:	b292      	uxth	r2, r2
    9c5e:	4313      	orrs	r3, r2
    9c60:	2290      	movs	r2, #144	; 0x90
    9c62:	0092      	lsls	r2, r2, #2
    9c64:	18ba      	adds	r2, r7, r2
    9c66:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9c68:	2392      	movs	r3, #146	; 0x92
    9c6a:	009b      	lsls	r3, r3, #2
    9c6c:	18fb      	adds	r3, r7, r3
    9c6e:	681b      	ldr	r3, [r3, #0]
    9c70:	331a      	adds	r3, #26
    9c72:	2200      	movs	r2, #0
    9c74:	701a      	strb	r2, [r3, #0]
    9c76:	2392      	movs	r3, #146	; 0x92
    9c78:	009b      	lsls	r3, r3, #2
    9c7a:	18fb      	adds	r3, r7, r3
    9c7c:	681b      	ldr	r3, [r3, #0]
    9c7e:	331b      	adds	r3, #27
    9c80:	2200      	movs	r2, #0
    9c82:	701a      	strb	r2, [r3, #0]
    9c84:	2392      	movs	r3, #146	; 0x92
    9c86:	009b      	lsls	r3, r3, #2
    9c88:	18fb      	adds	r3, r7, r3
    9c8a:	681b      	ldr	r3, [r3, #0]
    9c8c:	3314      	adds	r3, #20
    9c8e:	2200      	movs	r2, #0
    9c90:	701a      	strb	r2, [r3, #0]
    9c92:	2392      	movs	r3, #146	; 0x92
    9c94:	009b      	lsls	r3, r3, #2
    9c96:	18fb      	adds	r3, r7, r3
    9c98:	681b      	ldr	r3, [r3, #0]
    9c9a:	3315      	adds	r3, #21
    9c9c:	2200      	movs	r2, #0
    9c9e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9ca0:	2387      	movs	r3, #135	; 0x87
    9ca2:	009b      	lsls	r3, r3, #2
    9ca4:	18fb      	adds	r3, r7, r3
    9ca6:	681b      	ldr	r3, [r3, #0]
    9ca8:	2201      	movs	r2, #1
    9caa:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9cac:	2390      	movs	r3, #144	; 0x90
    9cae:	009b      	lsls	r3, r3, #2
    9cb0:	18fb      	adds	r3, r7, r3
    9cb2:	681b      	ldr	r3, [r3, #0]
    9cb4:	2b00      	cmp	r3, #0
    9cb6:	d100      	bne.n	9cba <f_open+0x2fe>
    9cb8:	e076      	b.n	9da8 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9cba:	2387      	movs	r3, #135	; 0x87
    9cbc:	009b      	lsls	r3, r3, #2
    9cbe:	18fb      	adds	r3, r7, r3
    9cc0:	681b      	ldr	r3, [r3, #0]
    9cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9cc4:	2291      	movs	r2, #145	; 0x91
    9cc6:	0092      	lsls	r2, r2, #2
    9cc8:	18ba      	adds	r2, r7, r2
    9cca:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9ccc:	2387      	movs	r3, #135	; 0x87
    9cce:	009b      	lsls	r3, r3, #2
    9cd0:	18fb      	adds	r3, r7, r3
    9cd2:	681b      	ldr	r3, [r3, #0]
    9cd4:	4a21      	ldr	r2, [pc, #132]	; (9d5c <f_open+0x3a0>)
    9cd6:	18bc      	adds	r4, r7, r2
    9cd8:	2290      	movs	r2, #144	; 0x90
    9cda:	0092      	lsls	r2, r2, #2
    9cdc:	18ba      	adds	r2, r7, r2
    9cde:	6812      	ldr	r2, [r2, #0]
    9ce0:	0011      	movs	r1, r2
    9ce2:	0018      	movs	r0, r3
    9ce4:	4b22      	ldr	r3, [pc, #136]	; (9d70 <f_open+0x3b4>)
    9ce6:	4798      	blx	r3
    9ce8:	0003      	movs	r3, r0
    9cea:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9cec:	4b1b      	ldr	r3, [pc, #108]	; (9d5c <f_open+0x3a0>)
    9cee:	18fb      	adds	r3, r7, r3
    9cf0:	781b      	ldrb	r3, [r3, #0]
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d158      	bne.n	9da8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9cf6:	2387      	movs	r3, #135	; 0x87
    9cf8:	009b      	lsls	r3, r3, #2
    9cfa:	18fb      	adds	r3, r7, r3
    9cfc:	681b      	ldr	r3, [r3, #0]
    9cfe:	2290      	movs	r2, #144	; 0x90
    9d00:	0092      	lsls	r2, r2, #2
    9d02:	18ba      	adds	r2, r7, r2
    9d04:	6812      	ldr	r2, [r2, #0]
    9d06:	3a01      	subs	r2, #1
    9d08:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9d0a:	2387      	movs	r3, #135	; 0x87
    9d0c:	009b      	lsls	r3, r3, #2
    9d0e:	18fb      	adds	r3, r7, r3
    9d10:	681b      	ldr	r3, [r3, #0]
    9d12:	4a12      	ldr	r2, [pc, #72]	; (9d5c <f_open+0x3a0>)
    9d14:	18bc      	adds	r4, r7, r2
    9d16:	2291      	movs	r2, #145	; 0x91
    9d18:	0092      	lsls	r2, r2, #2
    9d1a:	18ba      	adds	r2, r7, r2
    9d1c:	6812      	ldr	r2, [r2, #0]
    9d1e:	0011      	movs	r1, r2
    9d20:	0018      	movs	r0, r3
    9d22:	4b14      	ldr	r3, [pc, #80]	; (9d74 <f_open+0x3b8>)
    9d24:	4798      	blx	r3
    9d26:	0003      	movs	r3, r0
    9d28:	7023      	strb	r3, [r4, #0]
    9d2a:	e03d      	b.n	9da8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9d2c:	4b0b      	ldr	r3, [pc, #44]	; (9d5c <f_open+0x3a0>)
    9d2e:	18fb      	adds	r3, r7, r3
    9d30:	781b      	ldrb	r3, [r3, #0]
    9d32:	2b00      	cmp	r3, #0
    9d34:	d138      	bne.n	9da8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9d36:	2392      	movs	r3, #146	; 0x92
    9d38:	009b      	lsls	r3, r3, #2
    9d3a:	18fb      	adds	r3, r7, r3
    9d3c:	681b      	ldr	r3, [r3, #0]
    9d3e:	330b      	adds	r3, #11
    9d40:	781b      	ldrb	r3, [r3, #0]
    9d42:	001a      	movs	r2, r3
    9d44:	2310      	movs	r3, #16
    9d46:	4013      	ands	r3, r2
    9d48:	d016      	beq.n	9d78 <f_open+0x3bc>
				res = FR_NO_FILE;
    9d4a:	4b04      	ldr	r3, [pc, #16]	; (9d5c <f_open+0x3a0>)
    9d4c:	18fb      	adds	r3, r7, r3
    9d4e:	2204      	movs	r2, #4
    9d50:	701a      	strb	r2, [r3, #0]
    9d52:	e029      	b.n	9da8 <f_open+0x3ec>
    9d54:	fffffdac 	.word	0xfffffdac
    9d58:	fffffdb7 	.word	0xfffffdb7
    9d5c:	0000024f 	.word	0x0000024f
    9d60:	00009315 	.word	0x00009315
    9d64:	00009109 	.word	0x00009109
    9d68:	00008881 	.word	0x00008881
    9d6c:	000073d1 	.word	0x000073d1
    9d70:	00007b55 	.word	0x00007b55
    9d74:	00007515 	.word	0x00007515
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9d78:	4b5a      	ldr	r3, [pc, #360]	; (9ee4 <f_open+0x528>)
    9d7a:	2294      	movs	r2, #148	; 0x94
    9d7c:	0092      	lsls	r2, r2, #2
    9d7e:	4694      	mov	ip, r2
    9d80:	44bc      	add	ip, r7
    9d82:	4463      	add	r3, ip
    9d84:	781b      	ldrb	r3, [r3, #0]
    9d86:	2202      	movs	r2, #2
    9d88:	4013      	ands	r3, r2
    9d8a:	d00d      	beq.n	9da8 <f_open+0x3ec>
    9d8c:	2392      	movs	r3, #146	; 0x92
    9d8e:	009b      	lsls	r3, r3, #2
    9d90:	18fb      	adds	r3, r7, r3
    9d92:	681b      	ldr	r3, [r3, #0]
    9d94:	330b      	adds	r3, #11
    9d96:	781b      	ldrb	r3, [r3, #0]
    9d98:	001a      	movs	r2, r3
    9d9a:	2301      	movs	r3, #1
    9d9c:	4013      	ands	r3, r2
    9d9e:	d003      	beq.n	9da8 <f_open+0x3ec>
					res = FR_DENIED;
    9da0:	4b51      	ldr	r3, [pc, #324]	; (9ee8 <f_open+0x52c>)
    9da2:	18fb      	adds	r3, r7, r3
    9da4:	2207      	movs	r2, #7
    9da6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9da8:	4b4f      	ldr	r3, [pc, #316]	; (9ee8 <f_open+0x52c>)
    9daa:	18fb      	adds	r3, r7, r3
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	2b00      	cmp	r3, #0
    9db0:	d126      	bne.n	9e00 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9db2:	4b4c      	ldr	r3, [pc, #304]	; (9ee4 <f_open+0x528>)
    9db4:	2294      	movs	r2, #148	; 0x94
    9db6:	0092      	lsls	r2, r2, #2
    9db8:	4694      	mov	ip, r2
    9dba:	44bc      	add	ip, r7
    9dbc:	4463      	add	r3, ip
    9dbe:	781b      	ldrb	r3, [r3, #0]
    9dc0:	2208      	movs	r2, #8
    9dc2:	4013      	ands	r3, r2
    9dc4:	d00f      	beq.n	9de6 <f_open+0x42a>
			mode |= FA__WRITTEN;
    9dc6:	4b47      	ldr	r3, [pc, #284]	; (9ee4 <f_open+0x528>)
    9dc8:	2294      	movs	r2, #148	; 0x94
    9dca:	0092      	lsls	r2, r2, #2
    9dcc:	4694      	mov	ip, r2
    9dce:	44bc      	add	ip, r7
    9dd0:	4463      	add	r3, ip
    9dd2:	4a44      	ldr	r2, [pc, #272]	; (9ee4 <f_open+0x528>)
    9dd4:	2194      	movs	r1, #148	; 0x94
    9dd6:	0089      	lsls	r1, r1, #2
    9dd8:	468c      	mov	ip, r1
    9dda:	44bc      	add	ip, r7
    9ddc:	4462      	add	r2, ip
    9dde:	7812      	ldrb	r2, [r2, #0]
    9de0:	2120      	movs	r1, #32
    9de2:	430a      	orrs	r2, r1
    9de4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9de6:	2387      	movs	r3, #135	; 0x87
    9de8:	009b      	lsls	r3, r3, #2
    9dea:	18fb      	adds	r3, r7, r3
    9dec:	681b      	ldr	r3, [r3, #0]
    9dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9df0:	68fb      	ldr	r3, [r7, #12]
    9df2:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9df4:	68fb      	ldr	r3, [r7, #12]
    9df6:	2292      	movs	r2, #146	; 0x92
    9df8:	0092      	lsls	r2, r2, #2
    9dfa:	18ba      	adds	r2, r7, r2
    9dfc:	6812      	ldr	r2, [r2, #0]
    9dfe:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9e00:	4b39      	ldr	r3, [pc, #228]	; (9ee8 <f_open+0x52c>)
    9e02:	18fb      	adds	r3, r7, r3
    9e04:	781b      	ldrb	r3, [r3, #0]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d163      	bne.n	9ed2 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9e0a:	68fb      	ldr	r3, [r7, #12]
    9e0c:	4a35      	ldr	r2, [pc, #212]	; (9ee4 <f_open+0x528>)
    9e0e:	2194      	movs	r1, #148	; 0x94
    9e10:	0089      	lsls	r1, r1, #2
    9e12:	468c      	mov	ip, r1
    9e14:	44bc      	add	ip, r7
    9e16:	4462      	add	r2, ip
    9e18:	7812      	ldrb	r2, [r2, #0]
    9e1a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9e1c:	2392      	movs	r3, #146	; 0x92
    9e1e:	009b      	lsls	r3, r3, #2
    9e20:	18fb      	adds	r3, r7, r3
    9e22:	681b      	ldr	r3, [r3, #0]
    9e24:	3315      	adds	r3, #21
    9e26:	781b      	ldrb	r3, [r3, #0]
    9e28:	021b      	lsls	r3, r3, #8
    9e2a:	b21a      	sxth	r2, r3
    9e2c:	2392      	movs	r3, #146	; 0x92
    9e2e:	009b      	lsls	r3, r3, #2
    9e30:	18fb      	adds	r3, r7, r3
    9e32:	681b      	ldr	r3, [r3, #0]
    9e34:	3314      	adds	r3, #20
    9e36:	781b      	ldrb	r3, [r3, #0]
    9e38:	b21b      	sxth	r3, r3
    9e3a:	4313      	orrs	r3, r2
    9e3c:	b21b      	sxth	r3, r3
    9e3e:	b29b      	uxth	r3, r3
    9e40:	041b      	lsls	r3, r3, #16
    9e42:	2292      	movs	r2, #146	; 0x92
    9e44:	0092      	lsls	r2, r2, #2
    9e46:	18ba      	adds	r2, r7, r2
    9e48:	6812      	ldr	r2, [r2, #0]
    9e4a:	321b      	adds	r2, #27
    9e4c:	7812      	ldrb	r2, [r2, #0]
    9e4e:	0212      	lsls	r2, r2, #8
    9e50:	b211      	sxth	r1, r2
    9e52:	2292      	movs	r2, #146	; 0x92
    9e54:	0092      	lsls	r2, r2, #2
    9e56:	18ba      	adds	r2, r7, r2
    9e58:	6812      	ldr	r2, [r2, #0]
    9e5a:	321a      	adds	r2, #26
    9e5c:	7812      	ldrb	r2, [r2, #0]
    9e5e:	b212      	sxth	r2, r2
    9e60:	430a      	orrs	r2, r1
    9e62:	b212      	sxth	r2, r2
    9e64:	b292      	uxth	r2, r2
    9e66:	431a      	orrs	r2, r3
    9e68:	68fb      	ldr	r3, [r7, #12]
    9e6a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9e6c:	2392      	movs	r3, #146	; 0x92
    9e6e:	009b      	lsls	r3, r3, #2
    9e70:	18fb      	adds	r3, r7, r3
    9e72:	681b      	ldr	r3, [r3, #0]
    9e74:	331f      	adds	r3, #31
    9e76:	781b      	ldrb	r3, [r3, #0]
    9e78:	061a      	lsls	r2, r3, #24
    9e7a:	2392      	movs	r3, #146	; 0x92
    9e7c:	009b      	lsls	r3, r3, #2
    9e7e:	18fb      	adds	r3, r7, r3
    9e80:	681b      	ldr	r3, [r3, #0]
    9e82:	331e      	adds	r3, #30
    9e84:	781b      	ldrb	r3, [r3, #0]
    9e86:	041b      	lsls	r3, r3, #16
    9e88:	4313      	orrs	r3, r2
    9e8a:	2292      	movs	r2, #146	; 0x92
    9e8c:	0092      	lsls	r2, r2, #2
    9e8e:	18ba      	adds	r2, r7, r2
    9e90:	6812      	ldr	r2, [r2, #0]
    9e92:	321d      	adds	r2, #29
    9e94:	7812      	ldrb	r2, [r2, #0]
    9e96:	0212      	lsls	r2, r2, #8
    9e98:	4313      	orrs	r3, r2
    9e9a:	2292      	movs	r2, #146	; 0x92
    9e9c:	0092      	lsls	r2, r2, #2
    9e9e:	18ba      	adds	r2, r7, r2
    9ea0:	6812      	ldr	r2, [r2, #0]
    9ea2:	321c      	adds	r2, #28
    9ea4:	7812      	ldrb	r2, [r2, #0]
    9ea6:	431a      	orrs	r2, r3
    9ea8:	68fb      	ldr	r3, [r7, #12]
    9eaa:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9eac:	68fb      	ldr	r3, [r7, #12]
    9eae:	2200      	movs	r2, #0
    9eb0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    9eb2:	68fb      	ldr	r3, [r7, #12]
    9eb4:	2200      	movs	r2, #0
    9eb6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9eb8:	2387      	movs	r3, #135	; 0x87
    9eba:	009b      	lsls	r3, r3, #2
    9ebc:	18fb      	adds	r3, r7, r3
    9ebe:	681a      	ldr	r2, [r3, #0]
    9ec0:	68fb      	ldr	r3, [r7, #12]
    9ec2:	601a      	str	r2, [r3, #0]
    9ec4:	2387      	movs	r3, #135	; 0x87
    9ec6:	009b      	lsls	r3, r3, #2
    9ec8:	18fb      	adds	r3, r7, r3
    9eca:	681b      	ldr	r3, [r3, #0]
    9ecc:	88da      	ldrh	r2, [r3, #6]
    9ece:	68fb      	ldr	r3, [r7, #12]
    9ed0:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    9ed2:	4b05      	ldr	r3, [pc, #20]	; (9ee8 <f_open+0x52c>)
    9ed4:	18fb      	adds	r3, r7, r3
    9ed6:	781b      	ldrb	r3, [r3, #0]
}
    9ed8:	0018      	movs	r0, r3
    9eda:	46bd      	mov	sp, r7
    9edc:	2395      	movs	r3, #149	; 0x95
    9ede:	009b      	lsls	r3, r3, #2
    9ee0:	449d      	add	sp, r3
    9ee2:	bd90      	pop	{r4, r7, pc}
    9ee4:	fffffdb7 	.word	0xfffffdb7
    9ee8:	0000024f 	.word	0x0000024f

00009eec <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9eec:	b590      	push	{r4, r7, lr}
    9eee:	b08d      	sub	sp, #52	; 0x34
    9ef0:	af00      	add	r7, sp, #0
    9ef2:	60f8      	str	r0, [r7, #12]
    9ef4:	60b9      	str	r1, [r7, #8]
    9ef6:	607a      	str	r2, [r7, #4]
    9ef8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    9efa:	68bb      	ldr	r3, [r7, #8]
    9efc:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    9efe:	683b      	ldr	r3, [r7, #0]
    9f00:	2200      	movs	r2, #0
    9f02:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    9f04:	68fb      	ldr	r3, [r7, #12]
    9f06:	681a      	ldr	r2, [r3, #0]
    9f08:	68fb      	ldr	r3, [r7, #12]
    9f0a:	889b      	ldrh	r3, [r3, #4]
    9f0c:	211f      	movs	r1, #31
    9f0e:	187c      	adds	r4, r7, r1
    9f10:	0019      	movs	r1, r3
    9f12:	0010      	movs	r0, r2
    9f14:	4b96      	ldr	r3, [pc, #600]	; (a170 <f_read+0x284>)
    9f16:	4798      	blx	r3
    9f18:	0003      	movs	r3, r0
    9f1a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9f1c:	231f      	movs	r3, #31
    9f1e:	18fb      	adds	r3, r7, r3
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	2b00      	cmp	r3, #0
    9f24:	d003      	beq.n	9f2e <f_read+0x42>
    9f26:	231f      	movs	r3, #31
    9f28:	18fb      	adds	r3, r7, r3
    9f2a:	781b      	ldrb	r3, [r3, #0]
    9f2c:	e11b      	b.n	a166 <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    9f2e:	68fb      	ldr	r3, [r7, #12]
    9f30:	799b      	ldrb	r3, [r3, #6]
    9f32:	b25b      	sxtb	r3, r3
    9f34:	2b00      	cmp	r3, #0
    9f36:	da01      	bge.n	9f3c <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    9f38:	2302      	movs	r3, #2
    9f3a:	e114      	b.n	a166 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    9f3c:	68fb      	ldr	r3, [r7, #12]
    9f3e:	799b      	ldrb	r3, [r3, #6]
    9f40:	001a      	movs	r2, r3
    9f42:	2301      	movs	r3, #1
    9f44:	4013      	ands	r3, r2
    9f46:	d101      	bne.n	9f4c <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    9f48:	2307      	movs	r3, #7
    9f4a:	e10c      	b.n	a166 <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    9f4c:	68fb      	ldr	r3, [r7, #12]
    9f4e:	68da      	ldr	r2, [r3, #12]
    9f50:	68fb      	ldr	r3, [r7, #12]
    9f52:	689b      	ldr	r3, [r3, #8]
    9f54:	1ad3      	subs	r3, r2, r3
    9f56:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    9f58:	687a      	ldr	r2, [r7, #4]
    9f5a:	69bb      	ldr	r3, [r7, #24]
    9f5c:	429a      	cmp	r2, r3
    9f5e:	d800      	bhi.n	9f62 <f_read+0x76>
    9f60:	e0fc      	b.n	a15c <f_read+0x270>
    9f62:	69bb      	ldr	r3, [r7, #24]
    9f64:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    9f66:	e0f9      	b.n	a15c <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    9f68:	68fb      	ldr	r3, [r7, #12]
    9f6a:	689b      	ldr	r3, [r3, #8]
    9f6c:	05db      	lsls	r3, r3, #23
    9f6e:	0ddb      	lsrs	r3, r3, #23
    9f70:	d000      	beq.n	9f74 <f_read+0x88>
    9f72:	e0b0      	b.n	a0d6 <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    9f74:	68fb      	ldr	r3, [r7, #12]
    9f76:	689b      	ldr	r3, [r3, #8]
    9f78:	0a5b      	lsrs	r3, r3, #9
    9f7a:	b2da      	uxtb	r2, r3
    9f7c:	68fb      	ldr	r3, [r7, #12]
    9f7e:	681b      	ldr	r3, [r3, #0]
    9f80:	789b      	ldrb	r3, [r3, #2]
    9f82:	3b01      	subs	r3, #1
    9f84:	b2d9      	uxtb	r1, r3
    9f86:	2317      	movs	r3, #23
    9f88:	18fb      	adds	r3, r7, r3
    9f8a:	400a      	ands	r2, r1
    9f8c:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    9f8e:	2317      	movs	r3, #23
    9f90:	18fb      	adds	r3, r7, r3
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	2b00      	cmp	r3, #0
    9f96:	d12e      	bne.n	9ff6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    9f98:	68fb      	ldr	r3, [r7, #12]
    9f9a:	689b      	ldr	r3, [r3, #8]
    9f9c:	2b00      	cmp	r3, #0
    9f9e:	d103      	bne.n	9fa8 <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    9fa0:	68fb      	ldr	r3, [r7, #12]
    9fa2:	691b      	ldr	r3, [r3, #16]
    9fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    9fa6:	e009      	b.n	9fbc <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    9fa8:	68fb      	ldr	r3, [r7, #12]
    9faa:	681a      	ldr	r2, [r3, #0]
    9fac:	68fb      	ldr	r3, [r7, #12]
    9fae:	695b      	ldr	r3, [r3, #20]
    9fb0:	0019      	movs	r1, r3
    9fb2:	0010      	movs	r0, r2
    9fb4:	4b6f      	ldr	r3, [pc, #444]	; (a174 <f_read+0x288>)
    9fb6:	4798      	blx	r3
    9fb8:	0003      	movs	r3, r0
    9fba:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    9fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9fbe:	2b01      	cmp	r3, #1
    9fc0:	d809      	bhi.n	9fd6 <f_read+0xea>
    9fc2:	68fb      	ldr	r3, [r7, #12]
    9fc4:	799b      	ldrb	r3, [r3, #6]
    9fc6:	2280      	movs	r2, #128	; 0x80
    9fc8:	4252      	negs	r2, r2
    9fca:	4313      	orrs	r3, r2
    9fcc:	b2da      	uxtb	r2, r3
    9fce:	68fb      	ldr	r3, [r7, #12]
    9fd0:	719a      	strb	r2, [r3, #6]
    9fd2:	2302      	movs	r3, #2
    9fd4:	e0c7      	b.n	a166 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9fd8:	3301      	adds	r3, #1
    9fda:	d109      	bne.n	9ff0 <f_read+0x104>
    9fdc:	68fb      	ldr	r3, [r7, #12]
    9fde:	799b      	ldrb	r3, [r3, #6]
    9fe0:	2280      	movs	r2, #128	; 0x80
    9fe2:	4252      	negs	r2, r2
    9fe4:	4313      	orrs	r3, r2
    9fe6:	b2da      	uxtb	r2, r3
    9fe8:	68fb      	ldr	r3, [r7, #12]
    9fea:	719a      	strb	r2, [r3, #6]
    9fec:	2301      	movs	r3, #1
    9fee:	e0ba      	b.n	a166 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    9ff0:	68fb      	ldr	r3, [r7, #12]
    9ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9ff4:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    9ff6:	68fb      	ldr	r3, [r7, #12]
    9ff8:	681a      	ldr	r2, [r3, #0]
    9ffa:	68fb      	ldr	r3, [r7, #12]
    9ffc:	695b      	ldr	r3, [r3, #20]
    9ffe:	0019      	movs	r1, r3
    a000:	0010      	movs	r0, r2
    a002:	4b5d      	ldr	r3, [pc, #372]	; (a178 <f_read+0x28c>)
    a004:	4798      	blx	r3
    a006:	0003      	movs	r3, r0
    a008:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a00a:	693b      	ldr	r3, [r7, #16]
    a00c:	2b00      	cmp	r3, #0
    a00e:	d109      	bne.n	a024 <f_read+0x138>
    a010:	68fb      	ldr	r3, [r7, #12]
    a012:	799b      	ldrb	r3, [r3, #6]
    a014:	2280      	movs	r2, #128	; 0x80
    a016:	4252      	negs	r2, r2
    a018:	4313      	orrs	r3, r2
    a01a:	b2da      	uxtb	r2, r3
    a01c:	68fb      	ldr	r3, [r7, #12]
    a01e:	719a      	strb	r2, [r3, #6]
    a020:	2302      	movs	r3, #2
    a022:	e0a0      	b.n	a166 <f_read+0x27a>
			sect += csect;
    a024:	2317      	movs	r3, #23
    a026:	18fb      	adds	r3, r7, r3
    a028:	781b      	ldrb	r3, [r3, #0]
    a02a:	693a      	ldr	r2, [r7, #16]
    a02c:	18d3      	adds	r3, r2, r3
    a02e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	0a5b      	lsrs	r3, r3, #9
    a034:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a038:	2b00      	cmp	r3, #0
    a03a:	d049      	beq.n	a0d0 <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a03c:	2317      	movs	r3, #23
    a03e:	18fb      	adds	r3, r7, r3
    a040:	781a      	ldrb	r2, [r3, #0]
    a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a044:	18d2      	adds	r2, r2, r3
    a046:	68fb      	ldr	r3, [r7, #12]
    a048:	681b      	ldr	r3, [r3, #0]
    a04a:	789b      	ldrb	r3, [r3, #2]
    a04c:	429a      	cmp	r2, r3
    a04e:	d908      	bls.n	a062 <f_read+0x176>
					cc = fp->fs->csize - csect;
    a050:	68fb      	ldr	r3, [r7, #12]
    a052:	681b      	ldr	r3, [r3, #0]
    a054:	789b      	ldrb	r3, [r3, #2]
    a056:	001a      	movs	r2, r3
    a058:	2317      	movs	r3, #23
    a05a:	18fb      	adds	r3, r7, r3
    a05c:	781b      	ldrb	r3, [r3, #0]
    a05e:	1ad3      	subs	r3, r2, r3
    a060:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    a062:	68fb      	ldr	r3, [r7, #12]
    a064:	681b      	ldr	r3, [r3, #0]
    a066:	7858      	ldrb	r0, [r3, #1]
    a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a06a:	b2db      	uxtb	r3, r3
    a06c:	693a      	ldr	r2, [r7, #16]
    a06e:	6a39      	ldr	r1, [r7, #32]
    a070:	4c42      	ldr	r4, [pc, #264]	; (a17c <f_read+0x290>)
    a072:	47a0      	blx	r4
    a074:	1e03      	subs	r3, r0, #0
    a076:	d009      	beq.n	a08c <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    a078:	68fb      	ldr	r3, [r7, #12]
    a07a:	799b      	ldrb	r3, [r3, #6]
    a07c:	2280      	movs	r2, #128	; 0x80
    a07e:	4252      	negs	r2, r2
    a080:	4313      	orrs	r3, r2
    a082:	b2da      	uxtb	r2, r3
    a084:	68fb      	ldr	r3, [r7, #12]
    a086:	719a      	strb	r2, [r3, #6]
    a088:	2301      	movs	r3, #1
    a08a:	e06c      	b.n	a166 <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    a08c:	68fb      	ldr	r3, [r7, #12]
    a08e:	681b      	ldr	r3, [r3, #0]
    a090:	791b      	ldrb	r3, [r3, #4]
    a092:	2b00      	cmp	r3, #0
    a094:	d018      	beq.n	a0c8 <f_read+0x1dc>
    a096:	68fb      	ldr	r3, [r7, #12]
    a098:	681b      	ldr	r3, [r3, #0]
    a09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a09c:	693b      	ldr	r3, [r7, #16]
    a09e:	1ad2      	subs	r2, r2, r3
    a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0a2:	429a      	cmp	r2, r3
    a0a4:	d210      	bcs.n	a0c8 <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    a0a6:	68fb      	ldr	r3, [r7, #12]
    a0a8:	681b      	ldr	r3, [r3, #0]
    a0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a0ac:	693b      	ldr	r3, [r7, #16]
    a0ae:	1ad3      	subs	r3, r2, r3
    a0b0:	025b      	lsls	r3, r3, #9
    a0b2:	6a3a      	ldr	r2, [r7, #32]
    a0b4:	18d0      	adds	r0, r2, r3
    a0b6:	68fb      	ldr	r3, [r7, #12]
    a0b8:	681b      	ldr	r3, [r3, #0]
    a0ba:	3330      	adds	r3, #48	; 0x30
    a0bc:	0019      	movs	r1, r3
    a0be:	2380      	movs	r3, #128	; 0x80
    a0c0:	009b      	lsls	r3, r3, #2
    a0c2:	001a      	movs	r2, r3
    a0c4:	4b2e      	ldr	r3, [pc, #184]	; (a180 <f_read+0x294>)
    a0c6:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0ca:	025b      	lsls	r3, r3, #9
    a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    a0ce:	e031      	b.n	a134 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a0d0:	68fb      	ldr	r3, [r7, #12]
    a0d2:	693a      	ldr	r2, [r7, #16]
    a0d4:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a0d6:	68fb      	ldr	r3, [r7, #12]
    a0d8:	689b      	ldr	r3, [r3, #8]
    a0da:	05db      	lsls	r3, r3, #23
    a0dc:	0ddb      	lsrs	r3, r3, #23
    a0de:	2280      	movs	r2, #128	; 0x80
    a0e0:	0092      	lsls	r2, r2, #2
    a0e2:	1ad3      	subs	r3, r2, r3
    a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    a0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	429a      	cmp	r2, r3
    a0ec:	d901      	bls.n	a0f2 <f_read+0x206>
    a0ee:	687b      	ldr	r3, [r7, #4]
    a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    a0f2:	68fb      	ldr	r3, [r7, #12]
    a0f4:	681a      	ldr	r2, [r3, #0]
    a0f6:	68fb      	ldr	r3, [r7, #12]
    a0f8:	699b      	ldr	r3, [r3, #24]
    a0fa:	0019      	movs	r1, r3
    a0fc:	0010      	movs	r0, r2
    a0fe:	4b21      	ldr	r3, [pc, #132]	; (a184 <f_read+0x298>)
    a100:	4798      	blx	r3
    a102:	1e03      	subs	r3, r0, #0
    a104:	d009      	beq.n	a11a <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    a106:	68fb      	ldr	r3, [r7, #12]
    a108:	799b      	ldrb	r3, [r3, #6]
    a10a:	2280      	movs	r2, #128	; 0x80
    a10c:	4252      	negs	r2, r2
    a10e:	4313      	orrs	r3, r2
    a110:	b2da      	uxtb	r2, r3
    a112:	68fb      	ldr	r3, [r7, #12]
    a114:	719a      	strb	r2, [r3, #6]
    a116:	2301      	movs	r3, #1
    a118:	e025      	b.n	a166 <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    a11a:	68fb      	ldr	r3, [r7, #12]
    a11c:	681a      	ldr	r2, [r3, #0]
    a11e:	68fb      	ldr	r3, [r7, #12]
    a120:	689b      	ldr	r3, [r3, #8]
    a122:	05db      	lsls	r3, r3, #23
    a124:	0ddb      	lsrs	r3, r3, #23
    a126:	3330      	adds	r3, #48	; 0x30
    a128:	18d1      	adds	r1, r2, r3
    a12a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a12c:	6a3b      	ldr	r3, [r7, #32]
    a12e:	0018      	movs	r0, r3
    a130:	4b13      	ldr	r3, [pc, #76]	; (a180 <f_read+0x294>)
    a132:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a134:	6a3a      	ldr	r2, [r7, #32]
    a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a138:	18d3      	adds	r3, r2, r3
    a13a:	623b      	str	r3, [r7, #32]
    a13c:	68fb      	ldr	r3, [r7, #12]
    a13e:	689a      	ldr	r2, [r3, #8]
    a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a142:	18d2      	adds	r2, r2, r3
    a144:	68fb      	ldr	r3, [r7, #12]
    a146:	609a      	str	r2, [r3, #8]
    a148:	683b      	ldr	r3, [r7, #0]
    a14a:	681a      	ldr	r2, [r3, #0]
    a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a14e:	18d2      	adds	r2, r2, r3
    a150:	683b      	ldr	r3, [r7, #0]
    a152:	601a      	str	r2, [r3, #0]
    a154:	687a      	ldr	r2, [r7, #4]
    a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a158:	1ad3      	subs	r3, r2, r3
    a15a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a15c:	687b      	ldr	r3, [r7, #4]
    a15e:	2b00      	cmp	r3, #0
    a160:	d000      	beq.n	a164 <f_read+0x278>
    a162:	e701      	b.n	9f68 <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a164:	2300      	movs	r3, #0
}
    a166:	0018      	movs	r0, r3
    a168:	46bd      	mov	sp, r7
    a16a:	b00d      	add	sp, #52	; 0x34
    a16c:	bd90      	pop	{r4, r7, pc}
    a16e:	46c0      	nop			; (mov r8, r8)
    a170:	00009911 	.word	0x00009911
    a174:	000077ad 	.word	0x000077ad
    a178:	00007775 	.word	0x00007775
    a17c:	00007129 	.word	0x00007129
    a180:	00007431 	.word	0x00007431
    a184:	00007515 	.word	0x00007515

0000a188 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a188:	b590      	push	{r4, r7, lr}
    a18a:	b08b      	sub	sp, #44	; 0x2c
    a18c:	af00      	add	r7, sp, #0
    a18e:	60f8      	str	r0, [r7, #12]
    a190:	60b9      	str	r1, [r7, #8]
    a192:	607a      	str	r2, [r7, #4]
    a194:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a196:	68bb      	ldr	r3, [r7, #8]
    a198:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a19a:	683b      	ldr	r3, [r7, #0]
    a19c:	2200      	movs	r2, #0
    a19e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a1a0:	68fb      	ldr	r3, [r7, #12]
    a1a2:	681a      	ldr	r2, [r3, #0]
    a1a4:	68fb      	ldr	r3, [r7, #12]
    a1a6:	889b      	ldrh	r3, [r3, #4]
    a1a8:	2117      	movs	r1, #23
    a1aa:	187c      	adds	r4, r7, r1
    a1ac:	0019      	movs	r1, r3
    a1ae:	0010      	movs	r0, r2
    a1b0:	4bc3      	ldr	r3, [pc, #780]	; (a4c0 <f_write+0x338>)
    a1b2:	4798      	blx	r3
    a1b4:	0003      	movs	r3, r0
    a1b6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a1b8:	2317      	movs	r3, #23
    a1ba:	18fb      	adds	r3, r7, r3
    a1bc:	781b      	ldrb	r3, [r3, #0]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d003      	beq.n	a1ca <f_write+0x42>
    a1c2:	2317      	movs	r3, #23
    a1c4:	18fb      	adds	r3, r7, r3
    a1c6:	781b      	ldrb	r3, [r3, #0]
    a1c8:	e176      	b.n	a4b8 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a1ca:	68fb      	ldr	r3, [r7, #12]
    a1cc:	799b      	ldrb	r3, [r3, #6]
    a1ce:	b25b      	sxtb	r3, r3
    a1d0:	2b00      	cmp	r3, #0
    a1d2:	da01      	bge.n	a1d8 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a1d4:	2302      	movs	r3, #2
    a1d6:	e16f      	b.n	a4b8 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a1d8:	68fb      	ldr	r3, [r7, #12]
    a1da:	799b      	ldrb	r3, [r3, #6]
    a1dc:	001a      	movs	r2, r3
    a1de:	2302      	movs	r3, #2
    a1e0:	4013      	ands	r3, r2
    a1e2:	d101      	bne.n	a1e8 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a1e4:	2307      	movs	r3, #7
    a1e6:	e167      	b.n	a4b8 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a1e8:	68fb      	ldr	r3, [r7, #12]
    a1ea:	68da      	ldr	r2, [r3, #12]
    a1ec:	687b      	ldr	r3, [r7, #4]
    a1ee:	18d2      	adds	r2, r2, r3
    a1f0:	68fb      	ldr	r3, [r7, #12]
    a1f2:	68db      	ldr	r3, [r3, #12]
    a1f4:	429a      	cmp	r2, r3
    a1f6:	d300      	bcc.n	a1fa <f_write+0x72>
    a1f8:	e146      	b.n	a488 <f_write+0x300>
    a1fa:	2300      	movs	r3, #0
    a1fc:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a1fe:	e143      	b.n	a488 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a200:	68fb      	ldr	r3, [r7, #12]
    a202:	689b      	ldr	r3, [r3, #8]
    a204:	05db      	lsls	r3, r3, #23
    a206:	0ddb      	lsrs	r3, r3, #23
    a208:	d000      	beq.n	a20c <f_write+0x84>
    a20a:	e0f6      	b.n	a3fa <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a20c:	68fb      	ldr	r3, [r7, #12]
    a20e:	689b      	ldr	r3, [r3, #8]
    a210:	0a5b      	lsrs	r3, r3, #9
    a212:	b2da      	uxtb	r2, r3
    a214:	68fb      	ldr	r3, [r7, #12]
    a216:	681b      	ldr	r3, [r3, #0]
    a218:	789b      	ldrb	r3, [r3, #2]
    a21a:	3b01      	subs	r3, #1
    a21c:	b2d9      	uxtb	r1, r3
    a21e:	2316      	movs	r3, #22
    a220:	18fb      	adds	r3, r7, r3
    a222:	400a      	ands	r2, r1
    a224:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a226:	2316      	movs	r3, #22
    a228:	18fb      	adds	r3, r7, r3
    a22a:	781b      	ldrb	r3, [r3, #0]
    a22c:	2b00      	cmp	r3, #0
    a22e:	d140      	bne.n	a2b2 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a230:	68fb      	ldr	r3, [r7, #12]
    a232:	689b      	ldr	r3, [r3, #8]
    a234:	2b00      	cmp	r3, #0
    a236:	d111      	bne.n	a25c <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a238:	68fb      	ldr	r3, [r7, #12]
    a23a:	691b      	ldr	r3, [r3, #16]
    a23c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a240:	2b00      	cmp	r3, #0
    a242:	d115      	bne.n	a270 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a244:	68fb      	ldr	r3, [r7, #12]
    a246:	681b      	ldr	r3, [r3, #0]
    a248:	2100      	movs	r1, #0
    a24a:	0018      	movs	r0, r3
    a24c:	4b9d      	ldr	r3, [pc, #628]	; (a4c4 <f_write+0x33c>)
    a24e:	4798      	blx	r3
    a250:	0003      	movs	r3, r0
    a252:	627b      	str	r3, [r7, #36]	; 0x24
    a254:	68fb      	ldr	r3, [r7, #12]
    a256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a258:	611a      	str	r2, [r3, #16]
    a25a:	e009      	b.n	a270 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a25c:	68fb      	ldr	r3, [r7, #12]
    a25e:	681a      	ldr	r2, [r3, #0]
    a260:	68fb      	ldr	r3, [r7, #12]
    a262:	695b      	ldr	r3, [r3, #20]
    a264:	0019      	movs	r1, r3
    a266:	0010      	movs	r0, r2
    a268:	4b96      	ldr	r3, [pc, #600]	; (a4c4 <f_write+0x33c>)
    a26a:	4798      	blx	r3
    a26c:	0003      	movs	r3, r0
    a26e:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a272:	2b00      	cmp	r3, #0
    a274:	d100      	bne.n	a278 <f_write+0xf0>
    a276:	e10c      	b.n	a492 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a27a:	2b01      	cmp	r3, #1
    a27c:	d109      	bne.n	a292 <f_write+0x10a>
    a27e:	68fb      	ldr	r3, [r7, #12]
    a280:	799b      	ldrb	r3, [r3, #6]
    a282:	2280      	movs	r2, #128	; 0x80
    a284:	4252      	negs	r2, r2
    a286:	4313      	orrs	r3, r2
    a288:	b2da      	uxtb	r2, r3
    a28a:	68fb      	ldr	r3, [r7, #12]
    a28c:	719a      	strb	r2, [r3, #6]
    a28e:	2302      	movs	r3, #2
    a290:	e112      	b.n	a4b8 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a294:	3301      	adds	r3, #1
    a296:	d109      	bne.n	a2ac <f_write+0x124>
    a298:	68fb      	ldr	r3, [r7, #12]
    a29a:	799b      	ldrb	r3, [r3, #6]
    a29c:	2280      	movs	r2, #128	; 0x80
    a29e:	4252      	negs	r2, r2
    a2a0:	4313      	orrs	r3, r2
    a2a2:	b2da      	uxtb	r2, r3
    a2a4:	68fb      	ldr	r3, [r7, #12]
    a2a6:	719a      	strb	r2, [r3, #6]
    a2a8:	2301      	movs	r3, #1
    a2aa:	e105      	b.n	a4b8 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a2ac:	68fb      	ldr	r3, [r7, #12]
    a2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a2b0:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a2b2:	68fb      	ldr	r3, [r7, #12]
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a2b8:	68fb      	ldr	r3, [r7, #12]
    a2ba:	699b      	ldr	r3, [r3, #24]
    a2bc:	429a      	cmp	r2, r3
    a2be:	d111      	bne.n	a2e4 <f_write+0x15c>
    a2c0:	68fb      	ldr	r3, [r7, #12]
    a2c2:	681b      	ldr	r3, [r3, #0]
    a2c4:	2100      	movs	r1, #0
    a2c6:	0018      	movs	r0, r3
    a2c8:	4b7f      	ldr	r3, [pc, #508]	; (a4c8 <f_write+0x340>)
    a2ca:	4798      	blx	r3
    a2cc:	1e03      	subs	r3, r0, #0
    a2ce:	d009      	beq.n	a2e4 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a2d0:	68fb      	ldr	r3, [r7, #12]
    a2d2:	799b      	ldrb	r3, [r3, #6]
    a2d4:	2280      	movs	r2, #128	; 0x80
    a2d6:	4252      	negs	r2, r2
    a2d8:	4313      	orrs	r3, r2
    a2da:	b2da      	uxtb	r2, r3
    a2dc:	68fb      	ldr	r3, [r7, #12]
    a2de:	719a      	strb	r2, [r3, #6]
    a2e0:	2301      	movs	r3, #1
    a2e2:	e0e9      	b.n	a4b8 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a2e4:	68fb      	ldr	r3, [r7, #12]
    a2e6:	681a      	ldr	r2, [r3, #0]
    a2e8:	68fb      	ldr	r3, [r7, #12]
    a2ea:	695b      	ldr	r3, [r3, #20]
    a2ec:	0019      	movs	r1, r3
    a2ee:	0010      	movs	r0, r2
    a2f0:	4b76      	ldr	r3, [pc, #472]	; (a4cc <f_write+0x344>)
    a2f2:	4798      	blx	r3
    a2f4:	0003      	movs	r3, r0
    a2f6:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a2f8:	693b      	ldr	r3, [r7, #16]
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d109      	bne.n	a312 <f_write+0x18a>
    a2fe:	68fb      	ldr	r3, [r7, #12]
    a300:	799b      	ldrb	r3, [r3, #6]
    a302:	2280      	movs	r2, #128	; 0x80
    a304:	4252      	negs	r2, r2
    a306:	4313      	orrs	r3, r2
    a308:	b2da      	uxtb	r2, r3
    a30a:	68fb      	ldr	r3, [r7, #12]
    a30c:	719a      	strb	r2, [r3, #6]
    a30e:	2302      	movs	r3, #2
    a310:	e0d2      	b.n	a4b8 <f_write+0x330>
			sect += csect;
    a312:	2316      	movs	r3, #22
    a314:	18fb      	adds	r3, r7, r3
    a316:	781b      	ldrb	r3, [r3, #0]
    a318:	693a      	ldr	r2, [r7, #16]
    a31a:	18d3      	adds	r3, r2, r3
    a31c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a31e:	687b      	ldr	r3, [r7, #4]
    a320:	0a5b      	lsrs	r3, r3, #9
    a322:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a324:	69fb      	ldr	r3, [r7, #28]
    a326:	2b00      	cmp	r3, #0
    a328:	d048      	beq.n	a3bc <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a32a:	2316      	movs	r3, #22
    a32c:	18fb      	adds	r3, r7, r3
    a32e:	781a      	ldrb	r2, [r3, #0]
    a330:	69fb      	ldr	r3, [r7, #28]
    a332:	18d2      	adds	r2, r2, r3
    a334:	68fb      	ldr	r3, [r7, #12]
    a336:	681b      	ldr	r3, [r3, #0]
    a338:	789b      	ldrb	r3, [r3, #2]
    a33a:	429a      	cmp	r2, r3
    a33c:	d908      	bls.n	a350 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a33e:	68fb      	ldr	r3, [r7, #12]
    a340:	681b      	ldr	r3, [r3, #0]
    a342:	789b      	ldrb	r3, [r3, #2]
    a344:	001a      	movs	r2, r3
    a346:	2316      	movs	r3, #22
    a348:	18fb      	adds	r3, r7, r3
    a34a:	781b      	ldrb	r3, [r3, #0]
    a34c:	1ad3      	subs	r3, r2, r3
    a34e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a350:	68fb      	ldr	r3, [r7, #12]
    a352:	681b      	ldr	r3, [r3, #0]
    a354:	7858      	ldrb	r0, [r3, #1]
    a356:	69fb      	ldr	r3, [r7, #28]
    a358:	b2db      	uxtb	r3, r3
    a35a:	693a      	ldr	r2, [r7, #16]
    a35c:	69b9      	ldr	r1, [r7, #24]
    a35e:	4c5c      	ldr	r4, [pc, #368]	; (a4d0 <f_write+0x348>)
    a360:	47a0      	blx	r4
    a362:	1e03      	subs	r3, r0, #0
    a364:	d009      	beq.n	a37a <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a366:	68fb      	ldr	r3, [r7, #12]
    a368:	799b      	ldrb	r3, [r3, #6]
    a36a:	2280      	movs	r2, #128	; 0x80
    a36c:	4252      	negs	r2, r2
    a36e:	4313      	orrs	r3, r2
    a370:	b2da      	uxtb	r2, r3
    a372:	68fb      	ldr	r3, [r7, #12]
    a374:	719a      	strb	r2, [r3, #6]
    a376:	2301      	movs	r3, #1
    a378:	e09e      	b.n	a4b8 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a37a:	68fb      	ldr	r3, [r7, #12]
    a37c:	681b      	ldr	r3, [r3, #0]
    a37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a380:	693b      	ldr	r3, [r7, #16]
    a382:	1ad2      	subs	r2, r2, r3
    a384:	69fb      	ldr	r3, [r7, #28]
    a386:	429a      	cmp	r2, r3
    a388:	d214      	bcs.n	a3b4 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a38a:	68fb      	ldr	r3, [r7, #12]
    a38c:	681b      	ldr	r3, [r3, #0]
    a38e:	3330      	adds	r3, #48	; 0x30
    a390:	0018      	movs	r0, r3
    a392:	68fb      	ldr	r3, [r7, #12]
    a394:	681b      	ldr	r3, [r3, #0]
    a396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a398:	693b      	ldr	r3, [r7, #16]
    a39a:	1ad3      	subs	r3, r2, r3
    a39c:	025b      	lsls	r3, r3, #9
    a39e:	69ba      	ldr	r2, [r7, #24]
    a3a0:	18d1      	adds	r1, r2, r3
    a3a2:	2380      	movs	r3, #128	; 0x80
    a3a4:	009b      	lsls	r3, r3, #2
    a3a6:	001a      	movs	r2, r3
    a3a8:	4b4a      	ldr	r3, [pc, #296]	; (a4d4 <f_write+0x34c>)
    a3aa:	4798      	blx	r3
					fp->fs->wflag = 0;
    a3ac:	68fb      	ldr	r3, [r7, #12]
    a3ae:	681b      	ldr	r3, [r3, #0]
    a3b0:	2200      	movs	r2, #0
    a3b2:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a3b4:	69fb      	ldr	r3, [r7, #28]
    a3b6:	025b      	lsls	r3, r3, #9
    a3b8:	623b      	str	r3, [r7, #32]
				continue;
    a3ba:	e051      	b.n	a460 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a3bc:	68fb      	ldr	r3, [r7, #12]
    a3be:	689a      	ldr	r2, [r3, #8]
    a3c0:	68fb      	ldr	r3, [r7, #12]
    a3c2:	68db      	ldr	r3, [r3, #12]
    a3c4:	429a      	cmp	r2, r3
    a3c6:	d315      	bcc.n	a3f4 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a3c8:	68fb      	ldr	r3, [r7, #12]
    a3ca:	681b      	ldr	r3, [r3, #0]
    a3cc:	2100      	movs	r1, #0
    a3ce:	0018      	movs	r0, r3
    a3d0:	4b3d      	ldr	r3, [pc, #244]	; (a4c8 <f_write+0x340>)
    a3d2:	4798      	blx	r3
    a3d4:	1e03      	subs	r3, r0, #0
    a3d6:	d009      	beq.n	a3ec <f_write+0x264>
    a3d8:	68fb      	ldr	r3, [r7, #12]
    a3da:	799b      	ldrb	r3, [r3, #6]
    a3dc:	2280      	movs	r2, #128	; 0x80
    a3de:	4252      	negs	r2, r2
    a3e0:	4313      	orrs	r3, r2
    a3e2:	b2da      	uxtb	r2, r3
    a3e4:	68fb      	ldr	r3, [r7, #12]
    a3e6:	719a      	strb	r2, [r3, #6]
    a3e8:	2301      	movs	r3, #1
    a3ea:	e065      	b.n	a4b8 <f_write+0x330>
				fp->fs->winsect = sect;
    a3ec:	68fb      	ldr	r3, [r7, #12]
    a3ee:	681b      	ldr	r3, [r3, #0]
    a3f0:	693a      	ldr	r2, [r7, #16]
    a3f2:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a3f4:	68fb      	ldr	r3, [r7, #12]
    a3f6:	693a      	ldr	r2, [r7, #16]
    a3f8:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a3fa:	68fb      	ldr	r3, [r7, #12]
    a3fc:	689b      	ldr	r3, [r3, #8]
    a3fe:	05db      	lsls	r3, r3, #23
    a400:	0ddb      	lsrs	r3, r3, #23
    a402:	2280      	movs	r2, #128	; 0x80
    a404:	0092      	lsls	r2, r2, #2
    a406:	1ad3      	subs	r3, r2, r3
    a408:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a40a:	6a3a      	ldr	r2, [r7, #32]
    a40c:	687b      	ldr	r3, [r7, #4]
    a40e:	429a      	cmp	r2, r3
    a410:	d901      	bls.n	a416 <f_write+0x28e>
    a412:	687b      	ldr	r3, [r7, #4]
    a414:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a416:	68fb      	ldr	r3, [r7, #12]
    a418:	681a      	ldr	r2, [r3, #0]
    a41a:	68fb      	ldr	r3, [r7, #12]
    a41c:	699b      	ldr	r3, [r3, #24]
    a41e:	0019      	movs	r1, r3
    a420:	0010      	movs	r0, r2
    a422:	4b29      	ldr	r3, [pc, #164]	; (a4c8 <f_write+0x340>)
    a424:	4798      	blx	r3
    a426:	1e03      	subs	r3, r0, #0
    a428:	d009      	beq.n	a43e <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a42a:	68fb      	ldr	r3, [r7, #12]
    a42c:	799b      	ldrb	r3, [r3, #6]
    a42e:	2280      	movs	r2, #128	; 0x80
    a430:	4252      	negs	r2, r2
    a432:	4313      	orrs	r3, r2
    a434:	b2da      	uxtb	r2, r3
    a436:	68fb      	ldr	r3, [r7, #12]
    a438:	719a      	strb	r2, [r3, #6]
    a43a:	2301      	movs	r3, #1
    a43c:	e03c      	b.n	a4b8 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a43e:	68fb      	ldr	r3, [r7, #12]
    a440:	681a      	ldr	r2, [r3, #0]
    a442:	68fb      	ldr	r3, [r7, #12]
    a444:	689b      	ldr	r3, [r3, #8]
    a446:	05db      	lsls	r3, r3, #23
    a448:	0ddb      	lsrs	r3, r3, #23
    a44a:	3330      	adds	r3, #48	; 0x30
    a44c:	18d3      	adds	r3, r2, r3
    a44e:	6a3a      	ldr	r2, [r7, #32]
    a450:	69b9      	ldr	r1, [r7, #24]
    a452:	0018      	movs	r0, r3
    a454:	4b1f      	ldr	r3, [pc, #124]	; (a4d4 <f_write+0x34c>)
    a456:	4798      	blx	r3
		fp->fs->wflag = 1;
    a458:	68fb      	ldr	r3, [r7, #12]
    a45a:	681b      	ldr	r3, [r3, #0]
    a45c:	2201      	movs	r2, #1
    a45e:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a460:	69ba      	ldr	r2, [r7, #24]
    a462:	6a3b      	ldr	r3, [r7, #32]
    a464:	18d3      	adds	r3, r2, r3
    a466:	61bb      	str	r3, [r7, #24]
    a468:	68fb      	ldr	r3, [r7, #12]
    a46a:	689a      	ldr	r2, [r3, #8]
    a46c:	6a3b      	ldr	r3, [r7, #32]
    a46e:	18d2      	adds	r2, r2, r3
    a470:	68fb      	ldr	r3, [r7, #12]
    a472:	609a      	str	r2, [r3, #8]
    a474:	683b      	ldr	r3, [r7, #0]
    a476:	681a      	ldr	r2, [r3, #0]
    a478:	6a3b      	ldr	r3, [r7, #32]
    a47a:	18d2      	adds	r2, r2, r3
    a47c:	683b      	ldr	r3, [r7, #0]
    a47e:	601a      	str	r2, [r3, #0]
    a480:	687a      	ldr	r2, [r7, #4]
    a482:	6a3b      	ldr	r3, [r7, #32]
    a484:	1ad3      	subs	r3, r2, r3
    a486:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a488:	687b      	ldr	r3, [r7, #4]
    a48a:	2b00      	cmp	r3, #0
    a48c:	d000      	beq.n	a490 <f_write+0x308>
    a48e:	e6b7      	b.n	a200 <f_write+0x78>
    a490:	e000      	b.n	a494 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a492:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a494:	68fb      	ldr	r3, [r7, #12]
    a496:	689a      	ldr	r2, [r3, #8]
    a498:	68fb      	ldr	r3, [r7, #12]
    a49a:	68db      	ldr	r3, [r3, #12]
    a49c:	429a      	cmp	r2, r3
    a49e:	d903      	bls.n	a4a8 <f_write+0x320>
    a4a0:	68fb      	ldr	r3, [r7, #12]
    a4a2:	689a      	ldr	r2, [r3, #8]
    a4a4:	68fb      	ldr	r3, [r7, #12]
    a4a6:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a4a8:	68fb      	ldr	r3, [r7, #12]
    a4aa:	799b      	ldrb	r3, [r3, #6]
    a4ac:	2220      	movs	r2, #32
    a4ae:	4313      	orrs	r3, r2
    a4b0:	b2da      	uxtb	r2, r3
    a4b2:	68fb      	ldr	r3, [r7, #12]
    a4b4:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a4b6:	2300      	movs	r3, #0
}
    a4b8:	0018      	movs	r0, r3
    a4ba:	46bd      	mov	sp, r7
    a4bc:	b00b      	add	sp, #44	; 0x2c
    a4be:	bd90      	pop	{r4, r7, pc}
    a4c0:	00009911 	.word	0x00009911
    a4c4:	00007c1d 	.word	0x00007c1d
    a4c8:	00007515 	.word	0x00007515
    a4cc:	00007775 	.word	0x00007775
    a4d0:	00007201 	.word	0x00007201
    a4d4:	00007431 	.word	0x00007431

0000a4d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a4d8:	b590      	push	{r4, r7, lr}
    a4da:	b087      	sub	sp, #28
    a4dc:	af00      	add	r7, sp, #0
    a4de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	681a      	ldr	r2, [r3, #0]
    a4e4:	687b      	ldr	r3, [r7, #4]
    a4e6:	889b      	ldrh	r3, [r3, #4]
    a4e8:	2117      	movs	r1, #23
    a4ea:	187c      	adds	r4, r7, r1
    a4ec:	0019      	movs	r1, r3
    a4ee:	0010      	movs	r0, r2
    a4f0:	4b55      	ldr	r3, [pc, #340]	; (a648 <f_sync+0x170>)
    a4f2:	4798      	blx	r3
    a4f4:	0003      	movs	r3, r0
    a4f6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a4f8:	2317      	movs	r3, #23
    a4fa:	18fb      	adds	r3, r7, r3
    a4fc:	781b      	ldrb	r3, [r3, #0]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d000      	beq.n	a504 <f_sync+0x2c>
    a502:	e09a      	b.n	a63a <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a504:	687b      	ldr	r3, [r7, #4]
    a506:	799b      	ldrb	r3, [r3, #6]
    a508:	001a      	movs	r2, r3
    a50a:	2320      	movs	r3, #32
    a50c:	4013      	ands	r3, r2
    a50e:	d100      	bne.n	a512 <f_sync+0x3a>
    a510:	e093      	b.n	a63a <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a512:	687b      	ldr	r3, [r7, #4]
    a514:	681a      	ldr	r2, [r3, #0]
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	69db      	ldr	r3, [r3, #28]
    a51a:	2117      	movs	r1, #23
    a51c:	187c      	adds	r4, r7, r1
    a51e:	0019      	movs	r1, r3
    a520:	0010      	movs	r0, r2
    a522:	4b4a      	ldr	r3, [pc, #296]	; (a64c <f_sync+0x174>)
    a524:	4798      	blx	r3
    a526:	0003      	movs	r3, r0
    a528:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a52a:	2317      	movs	r3, #23
    a52c:	18fb      	adds	r3, r7, r3
    a52e:	781b      	ldrb	r3, [r3, #0]
    a530:	2b00      	cmp	r3, #0
    a532:	d000      	beq.n	a536 <f_sync+0x5e>
    a534:	e081      	b.n	a63a <f_sync+0x162>
				dir = fp->dir_ptr;
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	6a1b      	ldr	r3, [r3, #32]
    a53a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a53c:	693b      	ldr	r3, [r7, #16]
    a53e:	330b      	adds	r3, #11
    a540:	693a      	ldr	r2, [r7, #16]
    a542:	320b      	adds	r2, #11
    a544:	7812      	ldrb	r2, [r2, #0]
    a546:	2120      	movs	r1, #32
    a548:	430a      	orrs	r2, r1
    a54a:	b2d2      	uxtb	r2, r2
    a54c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a54e:	693b      	ldr	r3, [r7, #16]
    a550:	331c      	adds	r3, #28
    a552:	001a      	movs	r2, r3
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	68db      	ldr	r3, [r3, #12]
    a558:	b2db      	uxtb	r3, r3
    a55a:	7013      	strb	r3, [r2, #0]
    a55c:	693b      	ldr	r3, [r7, #16]
    a55e:	331d      	adds	r3, #29
    a560:	001a      	movs	r2, r3
    a562:	687b      	ldr	r3, [r7, #4]
    a564:	68db      	ldr	r3, [r3, #12]
    a566:	b29b      	uxth	r3, r3
    a568:	0a1b      	lsrs	r3, r3, #8
    a56a:	b29b      	uxth	r3, r3
    a56c:	b2db      	uxtb	r3, r3
    a56e:	7013      	strb	r3, [r2, #0]
    a570:	693b      	ldr	r3, [r7, #16]
    a572:	331e      	adds	r3, #30
    a574:	001a      	movs	r2, r3
    a576:	687b      	ldr	r3, [r7, #4]
    a578:	68db      	ldr	r3, [r3, #12]
    a57a:	0c1b      	lsrs	r3, r3, #16
    a57c:	b2db      	uxtb	r3, r3
    a57e:	7013      	strb	r3, [r2, #0]
    a580:	693b      	ldr	r3, [r7, #16]
    a582:	331f      	adds	r3, #31
    a584:	001a      	movs	r2, r3
    a586:	687b      	ldr	r3, [r7, #4]
    a588:	68db      	ldr	r3, [r3, #12]
    a58a:	0e1b      	lsrs	r3, r3, #24
    a58c:	b2db      	uxtb	r3, r3
    a58e:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a590:	693b      	ldr	r3, [r7, #16]
    a592:	331a      	adds	r3, #26
    a594:	001a      	movs	r2, r3
    a596:	687b      	ldr	r3, [r7, #4]
    a598:	691b      	ldr	r3, [r3, #16]
    a59a:	b2db      	uxtb	r3, r3
    a59c:	7013      	strb	r3, [r2, #0]
    a59e:	693b      	ldr	r3, [r7, #16]
    a5a0:	331b      	adds	r3, #27
    a5a2:	001a      	movs	r2, r3
    a5a4:	687b      	ldr	r3, [r7, #4]
    a5a6:	691b      	ldr	r3, [r3, #16]
    a5a8:	b29b      	uxth	r3, r3
    a5aa:	0a1b      	lsrs	r3, r3, #8
    a5ac:	b29b      	uxth	r3, r3
    a5ae:	b2db      	uxtb	r3, r3
    a5b0:	7013      	strb	r3, [r2, #0]
    a5b2:	693b      	ldr	r3, [r7, #16]
    a5b4:	3314      	adds	r3, #20
    a5b6:	001a      	movs	r2, r3
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	691b      	ldr	r3, [r3, #16]
    a5bc:	0c1b      	lsrs	r3, r3, #16
    a5be:	b2db      	uxtb	r3, r3
    a5c0:	7013      	strb	r3, [r2, #0]
    a5c2:	693b      	ldr	r3, [r7, #16]
    a5c4:	3315      	adds	r3, #21
    a5c6:	001a      	movs	r2, r3
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	691b      	ldr	r3, [r3, #16]
    a5cc:	0c1b      	lsrs	r3, r3, #16
    a5ce:	b29b      	uxth	r3, r3
    a5d0:	0a1b      	lsrs	r3, r3, #8
    a5d2:	b29b      	uxth	r3, r3
    a5d4:	b2db      	uxtb	r3, r3
    a5d6:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a5d8:	4b1d      	ldr	r3, [pc, #116]	; (a650 <f_sync+0x178>)
    a5da:	4798      	blx	r3
    a5dc:	0003      	movs	r3, r0
    a5de:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a5e0:	693b      	ldr	r3, [r7, #16]
    a5e2:	3316      	adds	r3, #22
    a5e4:	68fa      	ldr	r2, [r7, #12]
    a5e6:	b2d2      	uxtb	r2, r2
    a5e8:	701a      	strb	r2, [r3, #0]
    a5ea:	693b      	ldr	r3, [r7, #16]
    a5ec:	3317      	adds	r3, #23
    a5ee:	68fa      	ldr	r2, [r7, #12]
    a5f0:	b292      	uxth	r2, r2
    a5f2:	0a12      	lsrs	r2, r2, #8
    a5f4:	b292      	uxth	r2, r2
    a5f6:	b2d2      	uxtb	r2, r2
    a5f8:	701a      	strb	r2, [r3, #0]
    a5fa:	693b      	ldr	r3, [r7, #16]
    a5fc:	3318      	adds	r3, #24
    a5fe:	68fa      	ldr	r2, [r7, #12]
    a600:	0c12      	lsrs	r2, r2, #16
    a602:	b2d2      	uxtb	r2, r2
    a604:	701a      	strb	r2, [r3, #0]
    a606:	693b      	ldr	r3, [r7, #16]
    a608:	3319      	adds	r3, #25
    a60a:	68fa      	ldr	r2, [r7, #12]
    a60c:	0e12      	lsrs	r2, r2, #24
    a60e:	b2d2      	uxtb	r2, r2
    a610:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a612:	687b      	ldr	r3, [r7, #4]
    a614:	799b      	ldrb	r3, [r3, #6]
    a616:	2220      	movs	r2, #32
    a618:	4393      	bics	r3, r2
    a61a:	b2da      	uxtb	r2, r3
    a61c:	687b      	ldr	r3, [r7, #4]
    a61e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a620:	687b      	ldr	r3, [r7, #4]
    a622:	681b      	ldr	r3, [r3, #0]
    a624:	2201      	movs	r2, #1
    a626:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	681b      	ldr	r3, [r3, #0]
    a62c:	2217      	movs	r2, #23
    a62e:	18bc      	adds	r4, r7, r2
    a630:	0018      	movs	r0, r3
    a632:	4b08      	ldr	r3, [pc, #32]	; (a654 <f_sync+0x17c>)
    a634:	4798      	blx	r3
    a636:	0003      	movs	r3, r0
    a638:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a63a:	2317      	movs	r3, #23
    a63c:	18fb      	adds	r3, r7, r3
    a63e:	781b      	ldrb	r3, [r3, #0]
}
    a640:	0018      	movs	r0, r3
    a642:	46bd      	mov	sp, r7
    a644:	b007      	add	sp, #28
    a646:	bd90      	pop	{r4, r7, pc}
    a648:	00009911 	.word	0x00009911
    a64c:	00007515 	.word	0x00007515
    a650:	000073d1 	.word	0x000073d1
    a654:	000075dd 	.word	0x000075dd

0000a658 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a658:	b590      	push	{r4, r7, lr}
    a65a:	b085      	sub	sp, #20
    a65c:	af00      	add	r7, sp, #0
    a65e:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a660:	230f      	movs	r3, #15
    a662:	18fc      	adds	r4, r7, r3
    a664:	687b      	ldr	r3, [r7, #4]
    a666:	0018      	movs	r0, r3
    a668:	4b09      	ldr	r3, [pc, #36]	; (a690 <f_close+0x38>)
    a66a:	4798      	blx	r3
    a66c:	0003      	movs	r3, r0
    a66e:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a670:	230f      	movs	r3, #15
    a672:	18fb      	adds	r3, r7, r3
    a674:	781b      	ldrb	r3, [r3, #0]
    a676:	2b00      	cmp	r3, #0
    a678:	d102      	bne.n	a680 <f_close+0x28>
    a67a:	687b      	ldr	r3, [r7, #4]
    a67c:	2200      	movs	r2, #0
    a67e:	601a      	str	r2, [r3, #0]
	return res;
    a680:	230f      	movs	r3, #15
    a682:	18fb      	adds	r3, r7, r3
    a684:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a686:	0018      	movs	r0, r3
    a688:	46bd      	mov	sp, r7
    a68a:	b005      	add	sp, #20
    a68c:	bd90      	pop	{r4, r7, pc}
    a68e:	46c0      	nop			; (mov r8, r8)
    a690:	0000a4d9 	.word	0x0000a4d9

0000a694 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    a694:	b590      	push	{r4, r7, lr}
    a696:	b089      	sub	sp, #36	; 0x24
    a698:	af00      	add	r7, sp, #0
    a69a:	6078      	str	r0, [r7, #4]
    a69c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a69e:	687b      	ldr	r3, [r7, #4]
    a6a0:	681a      	ldr	r2, [r3, #0]
    a6a2:	687b      	ldr	r3, [r7, #4]
    a6a4:	889b      	ldrh	r3, [r3, #4]
    a6a6:	2117      	movs	r1, #23
    a6a8:	187c      	adds	r4, r7, r1
    a6aa:	0019      	movs	r1, r3
    a6ac:	0010      	movs	r0, r2
    a6ae:	4b91      	ldr	r3, [pc, #580]	; (a8f4 <f_lseek+0x260>)
    a6b0:	4798      	blx	r3
    a6b2:	0003      	movs	r3, r0
    a6b4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a6b6:	2317      	movs	r3, #23
    a6b8:	18fb      	adds	r3, r7, r3
    a6ba:	781b      	ldrb	r3, [r3, #0]
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d003      	beq.n	a6c8 <f_lseek+0x34>
    a6c0:	2317      	movs	r3, #23
    a6c2:	18fb      	adds	r3, r7, r3
    a6c4:	781b      	ldrb	r3, [r3, #0]
    a6c6:	e111      	b.n	a8ec <f_lseek+0x258>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    a6c8:	687b      	ldr	r3, [r7, #4]
    a6ca:	799b      	ldrb	r3, [r3, #6]
    a6cc:	b25b      	sxtb	r3, r3
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	da01      	bge.n	a6d6 <f_lseek+0x42>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a6d2:	2302      	movs	r3, #2
    a6d4:	e10a      	b.n	a8ec <f_lseek+0x258>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    a6d6:	687b      	ldr	r3, [r7, #4]
    a6d8:	68da      	ldr	r2, [r3, #12]
    a6da:	683b      	ldr	r3, [r7, #0]
    a6dc:	429a      	cmp	r2, r3
    a6de:	d208      	bcs.n	a6f2 <f_lseek+0x5e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    a6e0:	687b      	ldr	r3, [r7, #4]
    a6e2:	799b      	ldrb	r3, [r3, #6]
    a6e4:	001a      	movs	r2, r3
    a6e6:	2302      	movs	r3, #2
    a6e8:	4013      	ands	r3, r2
    a6ea:	d102      	bne.n	a6f2 <f_lseek+0x5e>
#endif
			) ofs = fp->fsize;
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	68db      	ldr	r3, [r3, #12]
    a6f0:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	689b      	ldr	r3, [r3, #8]
    a6f6:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
    a6f8:	2300      	movs	r3, #0
    a6fa:	61bb      	str	r3, [r7, #24]
    a6fc:	687b      	ldr	r3, [r7, #4]
    a6fe:	69ba      	ldr	r2, [r7, #24]
    a700:	609a      	str	r2, [r3, #8]
		if (ofs) {
    a702:	683b      	ldr	r3, [r7, #0]
    a704:	2b00      	cmp	r3, #0
    a706:	d100      	bne.n	a70a <f_lseek+0x76>
    a708:	e0cf      	b.n	a8aa <f_lseek+0x216>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    a70a:	687b      	ldr	r3, [r7, #4]
    a70c:	681b      	ldr	r3, [r3, #0]
    a70e:	789b      	ldrb	r3, [r3, #2]
    a710:	025b      	lsls	r3, r3, #9
    a712:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
    a714:	693b      	ldr	r3, [r7, #16]
    a716:	2b00      	cmp	r3, #0
    a718:	d020      	beq.n	a75c <f_lseek+0xc8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    a71a:	683b      	ldr	r3, [r7, #0]
    a71c:	1e5a      	subs	r2, r3, #1
    a71e:	4b76      	ldr	r3, [pc, #472]	; (a8f8 <f_lseek+0x264>)
    a720:	68f9      	ldr	r1, [r7, #12]
    a722:	0010      	movs	r0, r2
    a724:	4798      	blx	r3
    a726:	0003      	movs	r3, r0
    a728:	001c      	movs	r4, r3
    a72a:	693b      	ldr	r3, [r7, #16]
    a72c:	1e5a      	subs	r2, r3, #1
    a72e:	4b72      	ldr	r3, [pc, #456]	; (a8f8 <f_lseek+0x264>)
    a730:	68f9      	ldr	r1, [r7, #12]
    a732:	0010      	movs	r0, r2
    a734:	4798      	blx	r3
    a736:	0003      	movs	r3, r0
			if (ifptr > 0 &&
    a738:	429c      	cmp	r4, r3
    a73a:	d30f      	bcc.n	a75c <f_lseek+0xc8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    a73c:	693b      	ldr	r3, [r7, #16]
    a73e:	3b01      	subs	r3, #1
    a740:	68fa      	ldr	r2, [r7, #12]
    a742:	4252      	negs	r2, r2
    a744:	401a      	ands	r2, r3
    a746:	687b      	ldr	r3, [r7, #4]
    a748:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
    a74a:	687b      	ldr	r3, [r7, #4]
    a74c:	689b      	ldr	r3, [r3, #8]
    a74e:	683a      	ldr	r2, [r7, #0]
    a750:	1ad3      	subs	r3, r2, r3
    a752:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
    a754:	687b      	ldr	r3, [r7, #4]
    a756:	695b      	ldr	r3, [r3, #20]
    a758:	61fb      	str	r3, [r7, #28]
    a75a:	e02d      	b.n	a7b8 <f_lseek+0x124>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	691b      	ldr	r3, [r3, #16]
    a760:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    a762:	69fb      	ldr	r3, [r7, #28]
    a764:	2b00      	cmp	r3, #0
    a766:	d124      	bne.n	a7b2 <f_lseek+0x11e>
					clst = create_chain(fp->fs, 0);
    a768:	687b      	ldr	r3, [r7, #4]
    a76a:	681b      	ldr	r3, [r3, #0]
    a76c:	2100      	movs	r1, #0
    a76e:	0018      	movs	r0, r3
    a770:	4b62      	ldr	r3, [pc, #392]	; (a8fc <f_lseek+0x268>)
    a772:	4798      	blx	r3
    a774:	0003      	movs	r3, r0
    a776:	61fb      	str	r3, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a778:	69fb      	ldr	r3, [r7, #28]
    a77a:	2b01      	cmp	r3, #1
    a77c:	d109      	bne.n	a792 <f_lseek+0xfe>
    a77e:	687b      	ldr	r3, [r7, #4]
    a780:	799b      	ldrb	r3, [r3, #6]
    a782:	2280      	movs	r2, #128	; 0x80
    a784:	4252      	negs	r2, r2
    a786:	4313      	orrs	r3, r2
    a788:	b2da      	uxtb	r2, r3
    a78a:	687b      	ldr	r3, [r7, #4]
    a78c:	719a      	strb	r2, [r3, #6]
    a78e:	2302      	movs	r3, #2
    a790:	e0ac      	b.n	a8ec <f_lseek+0x258>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a792:	69fb      	ldr	r3, [r7, #28]
    a794:	3301      	adds	r3, #1
    a796:	d109      	bne.n	a7ac <f_lseek+0x118>
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	799b      	ldrb	r3, [r3, #6]
    a79c:	2280      	movs	r2, #128	; 0x80
    a79e:	4252      	negs	r2, r2
    a7a0:	4313      	orrs	r3, r2
    a7a2:	b2da      	uxtb	r2, r3
    a7a4:	687b      	ldr	r3, [r7, #4]
    a7a6:	719a      	strb	r2, [r3, #6]
    a7a8:	2301      	movs	r3, #1
    a7aa:	e09f      	b.n	a8ec <f_lseek+0x258>
					fp->sclust = clst;
    a7ac:	687b      	ldr	r3, [r7, #4]
    a7ae:	69fa      	ldr	r2, [r7, #28]
    a7b0:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
    a7b2:	687b      	ldr	r3, [r7, #4]
    a7b4:	69fa      	ldr	r2, [r7, #28]
    a7b6:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
    a7b8:	69fb      	ldr	r3, [r7, #28]
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d100      	bne.n	a7c0 <f_lseek+0x12c>
    a7be:	e074      	b.n	a8aa <f_lseek+0x216>
				while (ofs > bcs) {						/* Cluster following loop */
    a7c0:	e04a      	b.n	a858 <f_lseek+0x1c4>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    a7c2:	687b      	ldr	r3, [r7, #4]
    a7c4:	799b      	ldrb	r3, [r3, #6]
    a7c6:	001a      	movs	r2, r3
    a7c8:	2302      	movs	r3, #2
    a7ca:	4013      	ands	r3, r2
    a7cc:	d00e      	beq.n	a7ec <f_lseek+0x158>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    a7ce:	687b      	ldr	r3, [r7, #4]
    a7d0:	681b      	ldr	r3, [r3, #0]
    a7d2:	69fa      	ldr	r2, [r7, #28]
    a7d4:	0011      	movs	r1, r2
    a7d6:	0018      	movs	r0, r3
    a7d8:	4b48      	ldr	r3, [pc, #288]	; (a8fc <f_lseek+0x268>)
    a7da:	4798      	blx	r3
    a7dc:	0003      	movs	r3, r0
    a7de:	61fb      	str	r3, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
    a7e0:	69fb      	ldr	r3, [r7, #28]
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d10b      	bne.n	a7fe <f_lseek+0x16a>
							ofs = bcs; break;
    a7e6:	68fb      	ldr	r3, [r7, #12]
    a7e8:	603b      	str	r3, [r7, #0]
    a7ea:	e039      	b.n	a860 <f_lseek+0x1cc>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    a7ec:	687b      	ldr	r3, [r7, #4]
    a7ee:	681b      	ldr	r3, [r3, #0]
    a7f0:	69fa      	ldr	r2, [r7, #28]
    a7f2:	0011      	movs	r1, r2
    a7f4:	0018      	movs	r0, r3
    a7f6:	4b42      	ldr	r3, [pc, #264]	; (a900 <f_lseek+0x26c>)
    a7f8:	4798      	blx	r3
    a7fa:	0003      	movs	r3, r0
    a7fc:	61fb      	str	r3, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a7fe:	69fb      	ldr	r3, [r7, #28]
    a800:	3301      	adds	r3, #1
    a802:	d109      	bne.n	a818 <f_lseek+0x184>
    a804:	687b      	ldr	r3, [r7, #4]
    a806:	799b      	ldrb	r3, [r3, #6]
    a808:	2280      	movs	r2, #128	; 0x80
    a80a:	4252      	negs	r2, r2
    a80c:	4313      	orrs	r3, r2
    a80e:	b2da      	uxtb	r2, r3
    a810:	687b      	ldr	r3, [r7, #4]
    a812:	719a      	strb	r2, [r3, #6]
    a814:	2301      	movs	r3, #1
    a816:	e069      	b.n	a8ec <f_lseek+0x258>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    a818:	69fb      	ldr	r3, [r7, #28]
    a81a:	2b01      	cmp	r3, #1
    a81c:	d905      	bls.n	a82a <f_lseek+0x196>
    a81e:	687b      	ldr	r3, [r7, #4]
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	699a      	ldr	r2, [r3, #24]
    a824:	69fb      	ldr	r3, [r7, #28]
    a826:	429a      	cmp	r2, r3
    a828:	d809      	bhi.n	a83e <f_lseek+0x1aa>
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	799b      	ldrb	r3, [r3, #6]
    a82e:	2280      	movs	r2, #128	; 0x80
    a830:	4252      	negs	r2, r2
    a832:	4313      	orrs	r3, r2
    a834:	b2da      	uxtb	r2, r3
    a836:	687b      	ldr	r3, [r7, #4]
    a838:	719a      	strb	r2, [r3, #6]
    a83a:	2302      	movs	r3, #2
    a83c:	e056      	b.n	a8ec <f_lseek+0x258>
					fp->clust = clst;
    a83e:	687b      	ldr	r3, [r7, #4]
    a840:	69fa      	ldr	r2, [r7, #28]
    a842:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
    a844:	687b      	ldr	r3, [r7, #4]
    a846:	689a      	ldr	r2, [r3, #8]
    a848:	68fb      	ldr	r3, [r7, #12]
    a84a:	18d2      	adds	r2, r2, r3
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
    a850:	683a      	ldr	r2, [r7, #0]
    a852:	68fb      	ldr	r3, [r7, #12]
    a854:	1ad3      	subs	r3, r2, r3
    a856:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
    a858:	683a      	ldr	r2, [r7, #0]
    a85a:	68fb      	ldr	r3, [r7, #12]
    a85c:	429a      	cmp	r2, r3
    a85e:	d8b0      	bhi.n	a7c2 <f_lseek+0x12e>
				}
				fp->fptr += ofs;
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	689a      	ldr	r2, [r3, #8]
    a864:	683b      	ldr	r3, [r7, #0]
    a866:	18d2      	adds	r2, r2, r3
    a868:	687b      	ldr	r3, [r7, #4]
    a86a:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
    a86c:	683b      	ldr	r3, [r7, #0]
    a86e:	05db      	lsls	r3, r3, #23
    a870:	0ddb      	lsrs	r3, r3, #23
    a872:	d01a      	beq.n	a8aa <f_lseek+0x216>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	681b      	ldr	r3, [r3, #0]
    a878:	69fa      	ldr	r2, [r7, #28]
    a87a:	0011      	movs	r1, r2
    a87c:	0018      	movs	r0, r3
    a87e:	4b21      	ldr	r3, [pc, #132]	; (a904 <f_lseek+0x270>)
    a880:	4798      	blx	r3
    a882:	0003      	movs	r3, r0
    a884:	61bb      	str	r3, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    a886:	69bb      	ldr	r3, [r7, #24]
    a888:	2b00      	cmp	r3, #0
    a88a:	d109      	bne.n	a8a0 <f_lseek+0x20c>
    a88c:	687b      	ldr	r3, [r7, #4]
    a88e:	799b      	ldrb	r3, [r3, #6]
    a890:	2280      	movs	r2, #128	; 0x80
    a892:	4252      	negs	r2, r2
    a894:	4313      	orrs	r3, r2
    a896:	b2da      	uxtb	r2, r3
    a898:	687b      	ldr	r3, [r7, #4]
    a89a:	719a      	strb	r2, [r3, #6]
    a89c:	2302      	movs	r3, #2
    a89e:	e025      	b.n	a8ec <f_lseek+0x258>
					nsect += ofs / SS(fp->fs);
    a8a0:	683b      	ldr	r3, [r7, #0]
    a8a2:	0a5b      	lsrs	r3, r3, #9
    a8a4:	69ba      	ldr	r2, [r7, #24]
    a8a6:	18d3      	adds	r3, r2, r3
    a8a8:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    a8aa:	687b      	ldr	r3, [r7, #4]
    a8ac:	689b      	ldr	r3, [r3, #8]
    a8ae:	05db      	lsls	r3, r3, #23
    a8b0:	0ddb      	lsrs	r3, r3, #23
    a8b2:	d007      	beq.n	a8c4 <f_lseek+0x230>
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	699a      	ldr	r2, [r3, #24]
    a8b8:	69bb      	ldr	r3, [r7, #24]
    a8ba:	429a      	cmp	r2, r3
    a8bc:	d002      	beq.n	a8c4 <f_lseek+0x230>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	69ba      	ldr	r2, [r7, #24]
    a8c2:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	689a      	ldr	r2, [r3, #8]
    a8c8:	687b      	ldr	r3, [r7, #4]
    a8ca:	68db      	ldr	r3, [r3, #12]
    a8cc:	429a      	cmp	r2, r3
    a8ce:	d90a      	bls.n	a8e6 <f_lseek+0x252>
			fp->fsize = fp->fptr;
    a8d0:	687b      	ldr	r3, [r7, #4]
    a8d2:	689a      	ldr	r2, [r3, #8]
    a8d4:	687b      	ldr	r3, [r7, #4]
    a8d6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
    a8d8:	687b      	ldr	r3, [r7, #4]
    a8da:	799b      	ldrb	r3, [r3, #6]
    a8dc:	2220      	movs	r2, #32
    a8de:	4313      	orrs	r3, r2
    a8e0:	b2da      	uxtb	r2, r3
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    a8e6:	2317      	movs	r3, #23
    a8e8:	18fb      	adds	r3, r7, r3
    a8ea:	781b      	ldrb	r3, [r3, #0]
}
    a8ec:	0018      	movs	r0, r3
    a8ee:	46bd      	mov	sp, r7
    a8f0:	b009      	add	sp, #36	; 0x24
    a8f2:	bd90      	pop	{r4, r7, pc}
    a8f4:	00009911 	.word	0x00009911
    a8f8:	0000baa5 	.word	0x0000baa5
    a8fc:	00007c1d 	.word	0x00007c1d
    a900:	000077ad 	.word	0x000077ad
    a904:	00007775 	.word	0x00007775

0000a908 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    a908:	b590      	push	{r4, r7, lr}
    a90a:	4c8d      	ldr	r4, [pc, #564]	; (ab40 <f_unlink+0x238>)
    a90c:	44a5      	add	sp, r4
    a90e:	af00      	add	r7, sp, #0
    a910:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    a912:	4b8c      	ldr	r3, [pc, #560]	; (ab44 <f_unlink+0x23c>)
    a914:	18fc      	adds	r4, r7, r3
    a916:	238e      	movs	r3, #142	; 0x8e
    a918:	009b      	lsls	r3, r3, #2
    a91a:	18f9      	adds	r1, r7, r3
    a91c:	1d3b      	adds	r3, r7, #4
    a91e:	2201      	movs	r2, #1
    a920:	0018      	movs	r0, r3
    a922:	4b89      	ldr	r3, [pc, #548]	; (ab48 <f_unlink+0x240>)
    a924:	4798      	blx	r3
    a926:	0003      	movs	r3, r0
    a928:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a92a:	4b86      	ldr	r3, [pc, #536]	; (ab44 <f_unlink+0x23c>)
    a92c:	18fb      	adds	r3, r7, r3
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	2b00      	cmp	r3, #0
    a932:	d000      	beq.n	a936 <f_unlink+0x2e>
    a934:	e0fb      	b.n	ab2e <f_unlink+0x226>
		INIT_BUF(dj);
    a936:	238e      	movs	r3, #142	; 0x8e
    a938:	009b      	lsls	r3, r3, #2
    a93a:	18fb      	adds	r3, r7, r3
    a93c:	2282      	movs	r2, #130	; 0x82
    a93e:	0092      	lsls	r2, r2, #2
    a940:	18ba      	adds	r2, r7, r2
    a942:	619a      	str	r2, [r3, #24]
    a944:	238e      	movs	r3, #142	; 0x8e
    a946:	009b      	lsls	r3, r3, #2
    a948:	18fb      	adds	r3, r7, r3
    a94a:	2208      	movs	r2, #8
    a94c:	18ba      	adds	r2, r7, r2
    a94e:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    a950:	687a      	ldr	r2, [r7, #4]
    a952:	4b7c      	ldr	r3, [pc, #496]	; (ab44 <f_unlink+0x23c>)
    a954:	18fc      	adds	r4, r7, r3
    a956:	238e      	movs	r3, #142	; 0x8e
    a958:	009b      	lsls	r3, r3, #2
    a95a:	18fb      	adds	r3, r7, r3
    a95c:	0011      	movs	r1, r2
    a95e:	0018      	movs	r0, r3
    a960:	4b7a      	ldr	r3, [pc, #488]	; (ab4c <f_unlink+0x244>)
    a962:	4798      	blx	r3
    a964:	0003      	movs	r3, r0
    a966:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    a968:	4b76      	ldr	r3, [pc, #472]	; (ab44 <f_unlink+0x23c>)
    a96a:	18fb      	adds	r3, r7, r3
    a96c:	781b      	ldrb	r3, [r3, #0]
    a96e:	2b00      	cmp	r3, #0
    a970:	d000      	beq.n	a974 <f_unlink+0x6c>
    a972:	e0dc      	b.n	ab2e <f_unlink+0x226>
			dir = dj.dir;
    a974:	238e      	movs	r3, #142	; 0x8e
    a976:	009b      	lsls	r3, r3, #2
    a978:	18fb      	adds	r3, r7, r3
    a97a:	695b      	ldr	r3, [r3, #20]
    a97c:	2298      	movs	r2, #152	; 0x98
    a97e:	0092      	lsls	r2, r2, #2
    a980:	18ba      	adds	r2, r7, r2
    a982:	6013      	str	r3, [r2, #0]
			if (!dir) {
    a984:	2398      	movs	r3, #152	; 0x98
    a986:	009b      	lsls	r3, r3, #2
    a988:	18fb      	adds	r3, r7, r3
    a98a:	681b      	ldr	r3, [r3, #0]
    a98c:	2b00      	cmp	r3, #0
    a98e:	d104      	bne.n	a99a <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    a990:	4b6c      	ldr	r3, [pc, #432]	; (ab44 <f_unlink+0x23c>)
    a992:	18fb      	adds	r3, r7, r3
    a994:	2206      	movs	r2, #6
    a996:	701a      	strb	r2, [r3, #0]
    a998:	e00d      	b.n	a9b6 <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    a99a:	2398      	movs	r3, #152	; 0x98
    a99c:	009b      	lsls	r3, r3, #2
    a99e:	18fb      	adds	r3, r7, r3
    a9a0:	681b      	ldr	r3, [r3, #0]
    a9a2:	330b      	adds	r3, #11
    a9a4:	781b      	ldrb	r3, [r3, #0]
    a9a6:	001a      	movs	r2, r3
    a9a8:	2301      	movs	r3, #1
    a9aa:	4013      	ands	r3, r2
    a9ac:	d003      	beq.n	a9b6 <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    a9ae:	4b65      	ldr	r3, [pc, #404]	; (ab44 <f_unlink+0x23c>)
    a9b0:	18fb      	adds	r3, r7, r3
    a9b2:	2207      	movs	r2, #7
    a9b4:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    a9b6:	2398      	movs	r3, #152	; 0x98
    a9b8:	009b      	lsls	r3, r3, #2
    a9ba:	18fb      	adds	r3, r7, r3
    a9bc:	681b      	ldr	r3, [r3, #0]
    a9be:	3315      	adds	r3, #21
    a9c0:	781b      	ldrb	r3, [r3, #0]
    a9c2:	021b      	lsls	r3, r3, #8
    a9c4:	b21a      	sxth	r2, r3
    a9c6:	2398      	movs	r3, #152	; 0x98
    a9c8:	009b      	lsls	r3, r3, #2
    a9ca:	18fb      	adds	r3, r7, r3
    a9cc:	681b      	ldr	r3, [r3, #0]
    a9ce:	3314      	adds	r3, #20
    a9d0:	781b      	ldrb	r3, [r3, #0]
    a9d2:	b21b      	sxth	r3, r3
    a9d4:	4313      	orrs	r3, r2
    a9d6:	b21b      	sxth	r3, r3
    a9d8:	b29b      	uxth	r3, r3
    a9da:	041b      	lsls	r3, r3, #16
    a9dc:	2298      	movs	r2, #152	; 0x98
    a9de:	0092      	lsls	r2, r2, #2
    a9e0:	18ba      	adds	r2, r7, r2
    a9e2:	6812      	ldr	r2, [r2, #0]
    a9e4:	321b      	adds	r2, #27
    a9e6:	7812      	ldrb	r2, [r2, #0]
    a9e8:	0212      	lsls	r2, r2, #8
    a9ea:	b211      	sxth	r1, r2
    a9ec:	2298      	movs	r2, #152	; 0x98
    a9ee:	0092      	lsls	r2, r2, #2
    a9f0:	18ba      	adds	r2, r7, r2
    a9f2:	6812      	ldr	r2, [r2, #0]
    a9f4:	321a      	adds	r2, #26
    a9f6:	7812      	ldrb	r2, [r2, #0]
    a9f8:	b212      	sxth	r2, r2
    a9fa:	430a      	orrs	r2, r1
    a9fc:	b212      	sxth	r2, r2
    a9fe:	b292      	uxth	r2, r2
    aa00:	4313      	orrs	r3, r2
    aa02:	2297      	movs	r2, #151	; 0x97
    aa04:	0092      	lsls	r2, r2, #2
    aa06:	18ba      	adds	r2, r7, r2
    aa08:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    aa0a:	4b4e      	ldr	r3, [pc, #312]	; (ab44 <f_unlink+0x23c>)
    aa0c:	18fb      	adds	r3, r7, r3
    aa0e:	781b      	ldrb	r3, [r3, #0]
    aa10:	2b00      	cmp	r3, #0
    aa12:	d152      	bne.n	aaba <f_unlink+0x1b2>
    aa14:	2398      	movs	r3, #152	; 0x98
    aa16:	009b      	lsls	r3, r3, #2
    aa18:	18fb      	adds	r3, r7, r3
    aa1a:	681b      	ldr	r3, [r3, #0]
    aa1c:	330b      	adds	r3, #11
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	001a      	movs	r2, r3
    aa22:	2310      	movs	r3, #16
    aa24:	4013      	ands	r3, r2
    aa26:	d048      	beq.n	aaba <f_unlink+0x1b2>
				if (dclst < 2) {
    aa28:	2397      	movs	r3, #151	; 0x97
    aa2a:	009b      	lsls	r3, r3, #2
    aa2c:	18fb      	adds	r3, r7, r3
    aa2e:	681b      	ldr	r3, [r3, #0]
    aa30:	2b01      	cmp	r3, #1
    aa32:	d804      	bhi.n	aa3e <f_unlink+0x136>
					res = FR_INT_ERR;
    aa34:	4b43      	ldr	r3, [pc, #268]	; (ab44 <f_unlink+0x23c>)
    aa36:	18fb      	adds	r3, r7, r3
    aa38:	2202      	movs	r2, #2
    aa3a:	701a      	strb	r2, [r3, #0]
    aa3c:	e03d      	b.n	aaba <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    aa3e:	238e      	movs	r3, #142	; 0x8e
    aa40:	009b      	lsls	r3, r3, #2
    aa42:	18f9      	adds	r1, r7, r3
    aa44:	2385      	movs	r3, #133	; 0x85
    aa46:	009b      	lsls	r3, r3, #2
    aa48:	18fb      	adds	r3, r7, r3
    aa4a:	2224      	movs	r2, #36	; 0x24
    aa4c:	0018      	movs	r0, r3
    aa4e:	4b40      	ldr	r3, [pc, #256]	; (ab50 <f_unlink+0x248>)
    aa50:	4798      	blx	r3
					sdj.sclust = dclst;
    aa52:	2385      	movs	r3, #133	; 0x85
    aa54:	009b      	lsls	r3, r3, #2
    aa56:	18fb      	adds	r3, r7, r3
    aa58:	2297      	movs	r2, #151	; 0x97
    aa5a:	0092      	lsls	r2, r2, #2
    aa5c:	18ba      	adds	r2, r7, r2
    aa5e:	6812      	ldr	r2, [r2, #0]
    aa60:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    aa62:	4b38      	ldr	r3, [pc, #224]	; (ab44 <f_unlink+0x23c>)
    aa64:	18fc      	adds	r4, r7, r3
    aa66:	2385      	movs	r3, #133	; 0x85
    aa68:	009b      	lsls	r3, r3, #2
    aa6a:	18fb      	adds	r3, r7, r3
    aa6c:	2102      	movs	r1, #2
    aa6e:	0018      	movs	r0, r3
    aa70:	4b38      	ldr	r3, [pc, #224]	; (ab54 <f_unlink+0x24c>)
    aa72:	4798      	blx	r3
    aa74:	0003      	movs	r3, r0
    aa76:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    aa78:	4b32      	ldr	r3, [pc, #200]	; (ab44 <f_unlink+0x23c>)
    aa7a:	18fb      	adds	r3, r7, r3
    aa7c:	781b      	ldrb	r3, [r3, #0]
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d11b      	bne.n	aaba <f_unlink+0x1b2>
						res = dir_read(&sdj);
    aa82:	4b30      	ldr	r3, [pc, #192]	; (ab44 <f_unlink+0x23c>)
    aa84:	18fc      	adds	r4, r7, r3
    aa86:	2385      	movs	r3, #133	; 0x85
    aa88:	009b      	lsls	r3, r3, #2
    aa8a:	18fb      	adds	r3, r7, r3
    aa8c:	0018      	movs	r0, r3
    aa8e:	4b32      	ldr	r3, [pc, #200]	; (ab58 <f_unlink+0x250>)
    aa90:	4798      	blx	r3
    aa92:	0003      	movs	r3, r0
    aa94:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    aa96:	4b2b      	ldr	r3, [pc, #172]	; (ab44 <f_unlink+0x23c>)
    aa98:	18fb      	adds	r3, r7, r3
    aa9a:	781b      	ldrb	r3, [r3, #0]
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	d103      	bne.n	aaa8 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    aaa0:	4b28      	ldr	r3, [pc, #160]	; (ab44 <f_unlink+0x23c>)
    aaa2:	18fb      	adds	r3, r7, r3
    aaa4:	2207      	movs	r2, #7
    aaa6:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    aaa8:	4b26      	ldr	r3, [pc, #152]	; (ab44 <f_unlink+0x23c>)
    aaaa:	18fb      	adds	r3, r7, r3
    aaac:	781b      	ldrb	r3, [r3, #0]
    aaae:	2b04      	cmp	r3, #4
    aab0:	d103      	bne.n	aaba <f_unlink+0x1b2>
    aab2:	4b24      	ldr	r3, [pc, #144]	; (ab44 <f_unlink+0x23c>)
    aab4:	18fb      	adds	r3, r7, r3
    aab6:	2200      	movs	r2, #0
    aab8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    aaba:	4b22      	ldr	r3, [pc, #136]	; (ab44 <f_unlink+0x23c>)
    aabc:	18fb      	adds	r3, r7, r3
    aabe:	781b      	ldrb	r3, [r3, #0]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d134      	bne.n	ab2e <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    aac4:	4b1f      	ldr	r3, [pc, #124]	; (ab44 <f_unlink+0x23c>)
    aac6:	18fc      	adds	r4, r7, r3
    aac8:	238e      	movs	r3, #142	; 0x8e
    aaca:	009b      	lsls	r3, r3, #2
    aacc:	18fb      	adds	r3, r7, r3
    aace:	0018      	movs	r0, r3
    aad0:	4b22      	ldr	r3, [pc, #136]	; (ab5c <f_unlink+0x254>)
    aad2:	4798      	blx	r3
    aad4:	0003      	movs	r3, r0
    aad6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    aad8:	4b1a      	ldr	r3, [pc, #104]	; (ab44 <f_unlink+0x23c>)
    aada:	18fb      	adds	r3, r7, r3
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	2b00      	cmp	r3, #0
    aae0:	d125      	bne.n	ab2e <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    aae2:	2397      	movs	r3, #151	; 0x97
    aae4:	009b      	lsls	r3, r3, #2
    aae6:	18fb      	adds	r3, r7, r3
    aae8:	681b      	ldr	r3, [r3, #0]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d00f      	beq.n	ab0e <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    aaee:	238e      	movs	r3, #142	; 0x8e
    aaf0:	009b      	lsls	r3, r3, #2
    aaf2:	18fb      	adds	r3, r7, r3
    aaf4:	681b      	ldr	r3, [r3, #0]
    aaf6:	4a13      	ldr	r2, [pc, #76]	; (ab44 <f_unlink+0x23c>)
    aaf8:	18bc      	adds	r4, r7, r2
    aafa:	2297      	movs	r2, #151	; 0x97
    aafc:	0092      	lsls	r2, r2, #2
    aafe:	18ba      	adds	r2, r7, r2
    ab00:	6812      	ldr	r2, [r2, #0]
    ab02:	0011      	movs	r1, r2
    ab04:	0018      	movs	r0, r3
    ab06:	4b16      	ldr	r3, [pc, #88]	; (ab60 <f_unlink+0x258>)
    ab08:	4798      	blx	r3
    ab0a:	0003      	movs	r3, r0
    ab0c:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    ab0e:	4b0d      	ldr	r3, [pc, #52]	; (ab44 <f_unlink+0x23c>)
    ab10:	18fb      	adds	r3, r7, r3
    ab12:	781b      	ldrb	r3, [r3, #0]
    ab14:	2b00      	cmp	r3, #0
    ab16:	d10a      	bne.n	ab2e <f_unlink+0x226>
    ab18:	238e      	movs	r3, #142	; 0x8e
    ab1a:	009b      	lsls	r3, r3, #2
    ab1c:	18fb      	adds	r3, r7, r3
    ab1e:	681b      	ldr	r3, [r3, #0]
    ab20:	4a08      	ldr	r2, [pc, #32]	; (ab44 <f_unlink+0x23c>)
    ab22:	18bc      	adds	r4, r7, r2
    ab24:	0018      	movs	r0, r3
    ab26:	4b0f      	ldr	r3, [pc, #60]	; (ab64 <f_unlink+0x25c>)
    ab28:	4798      	blx	r3
    ab2a:	0003      	movs	r3, r0
    ab2c:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    ab2e:	4b05      	ldr	r3, [pc, #20]	; (ab44 <f_unlink+0x23c>)
    ab30:	18fb      	adds	r3, r7, r3
    ab32:	781b      	ldrb	r3, [r3, #0]
}
    ab34:	0018      	movs	r0, r3
    ab36:	46bd      	mov	sp, r7
    ab38:	239b      	movs	r3, #155	; 0x9b
    ab3a:	009b      	lsls	r3, r3, #2
    ab3c:	449d      	add	sp, r3
    ab3e:	bd90      	pop	{r4, r7, pc}
    ab40:	fffffd94 	.word	0xfffffd94
    ab44:	00000267 	.word	0x00000267
    ab48:	00009315 	.word	0x00009315
    ab4c:	00009109 	.word	0x00009109
    ab50:	00007431 	.word	0x00007431
    ab54:	00007d59 	.word	0x00007d59
    ab58:	000086bd 	.word	0x000086bd
    ab5c:	00008be9 	.word	0x00008be9
    ab60:	00007b55 	.word	0x00007b55
    ab64:	000075dd 	.word	0x000075dd

0000ab68 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    ab68:	b590      	push	{r4, r7, lr}
    ab6a:	b087      	sub	sp, #28
    ab6c:	af00      	add	r7, sp, #0
    ab6e:	0002      	movs	r2, r0
    ab70:	6039      	str	r1, [r7, #0]
    ab72:	1dfb      	adds	r3, r7, #7
    ab74:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    ab76:	230c      	movs	r3, #12
    ab78:	18fb      	adds	r3, r7, r3
    ab7a:	1dfa      	adds	r2, r7, #7
    ab7c:	7812      	ldrb	r2, [r2, #0]
    ab7e:	701a      	strb	r2, [r3, #0]
	btw = 1;
    ab80:	2301      	movs	r3, #1
    ab82:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    ab84:	2310      	movs	r3, #16
    ab86:	18fb      	adds	r3, r7, r3
    ab88:	697a      	ldr	r2, [r7, #20]
    ab8a:	210c      	movs	r1, #12
    ab8c:	1879      	adds	r1, r7, r1
    ab8e:	6838      	ldr	r0, [r7, #0]
    ab90:	4c06      	ldr	r4, [pc, #24]	; (abac <f_putc+0x44>)
    ab92:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    ab94:	693a      	ldr	r2, [r7, #16]
    ab96:	697b      	ldr	r3, [r7, #20]
    ab98:	429a      	cmp	r2, r3
    ab9a:	d101      	bne.n	aba0 <f_putc+0x38>
    ab9c:	2301      	movs	r3, #1
    ab9e:	e001      	b.n	aba4 <f_putc+0x3c>
    aba0:	2301      	movs	r3, #1
    aba2:	425b      	negs	r3, r3
}
    aba4:	0018      	movs	r0, r3
    aba6:	46bd      	mov	sp, r7
    aba8:	b007      	add	sp, #28
    abaa:	bd90      	pop	{r4, r7, pc}
    abac:	0000a189 	.word	0x0000a189

0000abb0 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    abb0:	b580      	push	{r7, lr}
    abb2:	b084      	sub	sp, #16
    abb4:	af00      	add	r7, sp, #0
    abb6:	6078      	str	r0, [r7, #4]
    abb8:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    abba:	2300      	movs	r3, #0
    abbc:	60fb      	str	r3, [r7, #12]
    abbe:	e012      	b.n	abe6 <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    abc0:	687b      	ldr	r3, [r7, #4]
    abc2:	781b      	ldrb	r3, [r3, #0]
    abc4:	683a      	ldr	r2, [r7, #0]
    abc6:	0011      	movs	r1, r2
    abc8:	0018      	movs	r0, r3
    abca:	4b0b      	ldr	r3, [pc, #44]	; (abf8 <f_puts+0x48>)
    abcc:	4798      	blx	r3
    abce:	0003      	movs	r3, r0
    abd0:	3301      	adds	r3, #1
    abd2:	d102      	bne.n	abda <f_puts+0x2a>
    abd4:	2301      	movs	r3, #1
    abd6:	425b      	negs	r3, r3
    abd8:	e00a      	b.n	abf0 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    abda:	687b      	ldr	r3, [r7, #4]
    abdc:	3301      	adds	r3, #1
    abde:	607b      	str	r3, [r7, #4]
    abe0:	68fb      	ldr	r3, [r7, #12]
    abe2:	3301      	adds	r3, #1
    abe4:	60fb      	str	r3, [r7, #12]
    abe6:	687b      	ldr	r3, [r7, #4]
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	2b00      	cmp	r3, #0
    abec:	d1e8      	bne.n	abc0 <f_puts+0x10>
	}
	return n;
    abee:	68fb      	ldr	r3, [r7, #12]
}
    abf0:	0018      	movs	r0, r3
    abf2:	46bd      	mov	sp, r7
    abf4:	b004      	add	sp, #16
    abf6:	bd80      	pop	{r7, pc}
    abf8:	0000ab69 	.word	0x0000ab69

0000abfc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    abfc:	b580      	push	{r7, lr}
    abfe:	b084      	sub	sp, #16
    ac00:	af00      	add	r7, sp, #0
    ac02:	0002      	movs	r2, r0
    ac04:	6039      	str	r1, [r7, #0]
    ac06:	1dbb      	adds	r3, r7, #6
    ac08:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    ac0a:	1dbb      	adds	r3, r7, #6
    ac0c:	881b      	ldrh	r3, [r3, #0]
    ac0e:	2b7f      	cmp	r3, #127	; 0x7f
    ac10:	d805      	bhi.n	ac1e <ff_convert+0x22>
		c = src;
    ac12:	230e      	movs	r3, #14
    ac14:	18fb      	adds	r3, r7, r3
    ac16:	1dba      	adds	r2, r7, #6
    ac18:	8812      	ldrh	r2, [r2, #0]
    ac1a:	801a      	strh	r2, [r3, #0]
    ac1c:	e03a      	b.n	ac94 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    ac1e:	683b      	ldr	r3, [r7, #0]
    ac20:	2b00      	cmp	r3, #0
    ac22:	d010      	beq.n	ac46 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    ac24:	1dbb      	adds	r3, r7, #6
    ac26:	881b      	ldrh	r3, [r3, #0]
    ac28:	2bff      	cmp	r3, #255	; 0xff
    ac2a:	d807      	bhi.n	ac3c <ff_convert+0x40>
    ac2c:	1dbb      	adds	r3, r7, #6
    ac2e:	881b      	ldrh	r3, [r3, #0]
    ac30:	3b80      	subs	r3, #128	; 0x80
    ac32:	001a      	movs	r2, r3
    ac34:	4b1b      	ldr	r3, [pc, #108]	; (aca4 <ff_convert+0xa8>)
    ac36:	0052      	lsls	r2, r2, #1
    ac38:	5ad2      	ldrh	r2, [r2, r3]
    ac3a:	e000      	b.n	ac3e <ff_convert+0x42>
    ac3c:	2200      	movs	r2, #0
    ac3e:	230e      	movs	r3, #14
    ac40:	18fb      	adds	r3, r7, r3
    ac42:	801a      	strh	r2, [r3, #0]
    ac44:	e026      	b.n	ac94 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    ac46:	230e      	movs	r3, #14
    ac48:	18fb      	adds	r3, r7, r3
    ac4a:	2200      	movs	r2, #0
    ac4c:	801a      	strh	r2, [r3, #0]
    ac4e:	e010      	b.n	ac72 <ff_convert+0x76>
				if (src == Tbl[c]) break;
    ac50:	230e      	movs	r3, #14
    ac52:	18fb      	adds	r3, r7, r3
    ac54:	881a      	ldrh	r2, [r3, #0]
    ac56:	4b13      	ldr	r3, [pc, #76]	; (aca4 <ff_convert+0xa8>)
    ac58:	0052      	lsls	r2, r2, #1
    ac5a:	5ad3      	ldrh	r3, [r2, r3]
    ac5c:	1dba      	adds	r2, r7, #6
    ac5e:	8812      	ldrh	r2, [r2, #0]
    ac60:	429a      	cmp	r2, r3
    ac62:	d00c      	beq.n	ac7e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    ac64:	230e      	movs	r3, #14
    ac66:	18fb      	adds	r3, r7, r3
    ac68:	881a      	ldrh	r2, [r3, #0]
    ac6a:	230e      	movs	r3, #14
    ac6c:	18fb      	adds	r3, r7, r3
    ac6e:	3201      	adds	r2, #1
    ac70:	801a      	strh	r2, [r3, #0]
    ac72:	230e      	movs	r3, #14
    ac74:	18fb      	adds	r3, r7, r3
    ac76:	881b      	ldrh	r3, [r3, #0]
    ac78:	2b7f      	cmp	r3, #127	; 0x7f
    ac7a:	d9e9      	bls.n	ac50 <ff_convert+0x54>
    ac7c:	e000      	b.n	ac80 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    ac7e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    ac80:	230e      	movs	r3, #14
    ac82:	18fb      	adds	r3, r7, r3
    ac84:	881b      	ldrh	r3, [r3, #0]
    ac86:	3380      	adds	r3, #128	; 0x80
    ac88:	b29a      	uxth	r2, r3
    ac8a:	230e      	movs	r3, #14
    ac8c:	18fb      	adds	r3, r7, r3
    ac8e:	21ff      	movs	r1, #255	; 0xff
    ac90:	400a      	ands	r2, r1
    ac92:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    ac94:	230e      	movs	r3, #14
    ac96:	18fb      	adds	r3, r7, r3
    ac98:	881b      	ldrh	r3, [r3, #0]
}
    ac9a:	0018      	movs	r0, r3
    ac9c:	46bd      	mov	sp, r7
    ac9e:	b004      	add	sp, #16
    aca0:	bd80      	pop	{r7, pc}
    aca2:	46c0      	nop			; (mov r8, r8)
    aca4:	0000d024 	.word	0x0000d024

0000aca8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    aca8:	b580      	push	{r7, lr}
    acaa:	b084      	sub	sp, #16
    acac:	af00      	add	r7, sp, #0
    acae:	0002      	movs	r2, r0
    acb0:	1dbb      	adds	r3, r7, #6
    acb2:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    acb4:	2300      	movs	r3, #0
    acb6:	60fb      	str	r3, [r7, #12]
    acb8:	e002      	b.n	acc0 <ff_wtoupper+0x18>
    acba:	68fb      	ldr	r3, [r7, #12]
    acbc:	3301      	adds	r3, #1
    acbe:	60fb      	str	r3, [r7, #12]
    acc0:	4b0f      	ldr	r3, [pc, #60]	; (ad00 <ff_wtoupper+0x58>)
    acc2:	68fa      	ldr	r2, [r7, #12]
    acc4:	0052      	lsls	r2, r2, #1
    acc6:	5ad3      	ldrh	r3, [r2, r3]
    acc8:	2b00      	cmp	r3, #0
    acca:	d007      	beq.n	acdc <ff_wtoupper+0x34>
    accc:	4b0c      	ldr	r3, [pc, #48]	; (ad00 <ff_wtoupper+0x58>)
    acce:	68fa      	ldr	r2, [r7, #12]
    acd0:	0052      	lsls	r2, r2, #1
    acd2:	5ad3      	ldrh	r3, [r2, r3]
    acd4:	1dba      	adds	r2, r7, #6
    acd6:	8812      	ldrh	r2, [r2, #0]
    acd8:	429a      	cmp	r2, r3
    acda:	d1ee      	bne.n	acba <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    acdc:	4b08      	ldr	r3, [pc, #32]	; (ad00 <ff_wtoupper+0x58>)
    acde:	68fa      	ldr	r2, [r7, #12]
    ace0:	0052      	lsls	r2, r2, #1
    ace2:	5ad3      	ldrh	r3, [r2, r3]
    ace4:	2b00      	cmp	r3, #0
    ace6:	d004      	beq.n	acf2 <ff_wtoupper+0x4a>
    ace8:	4b06      	ldr	r3, [pc, #24]	; (ad04 <ff_wtoupper+0x5c>)
    acea:	68fa      	ldr	r2, [r7, #12]
    acec:	0052      	lsls	r2, r2, #1
    acee:	5ad3      	ldrh	r3, [r2, r3]
    acf0:	e001      	b.n	acf6 <ff_wtoupper+0x4e>
    acf2:	1dbb      	adds	r3, r7, #6
    acf4:	881b      	ldrh	r3, [r3, #0]
}
    acf6:	0018      	movs	r0, r3
    acf8:	46bd      	mov	sp, r7
    acfa:	b004      	add	sp, #16
    acfc:	bd80      	pop	{r7, pc}
    acfe:	46c0      	nop			; (mov r8, r8)
    ad00:	0000d124 	.word	0x0000d124
    ad04:	0000d304 	.word	0x0000d304

0000ad08 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    ad08:	b580      	push	{r7, lr}
    ad0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    ad0c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    ad10:	4b02      	ldr	r3, [pc, #8]	; (ad1c <NVIC_SystemReset+0x14>)
    ad12:	4a03      	ldr	r2, [pc, #12]	; (ad20 <NVIC_SystemReset+0x18>)
    ad14:	60da      	str	r2, [r3, #12]
    ad16:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    ad1a:	e7fe      	b.n	ad1a <NVIC_SystemReset+0x12>
    ad1c:	e000ed00 	.word	0xe000ed00
    ad20:	05fa0004 	.word	0x05fa0004

0000ad24 <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
    ad24:	b580      	push	{r7, lr}
    ad26:	b084      	sub	sp, #16
    ad28:	af00      	add	r7, sp, #0
    ad2a:	60f8      	str	r0, [r7, #12]
    ad2c:	60b9      	str	r1, [r7, #8]
    ad2e:	607a      	str	r2, [r7, #4]
	*crc = 0;
    ad30:	687b      	ldr	r3, [r7, #4]
    ad32:	2200      	movs	r2, #0
    ad34:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
    ad36:	687a      	ldr	r2, [r7, #4]
    ad38:	68b9      	ldr	r1, [r7, #8]
    ad3a:	68fb      	ldr	r3, [r7, #12]
    ad3c:	0018      	movs	r0, r3
    ad3e:	4b03      	ldr	r3, [pc, #12]	; (ad4c <crc32_calculate+0x28>)
    ad40:	4798      	blx	r3
    ad42:	0003      	movs	r3, r0
}
    ad44:	0018      	movs	r0, r3
    ad46:	46bd      	mov	sp, r7
    ad48:	b004      	add	sp, #16
    ad4a:	bd80      	pop	{r7, pc}
    ad4c:	0000024d 	.word	0x0000024d

0000ad50 <system_apb_clock_set_mask>:
{
    ad50:	b580      	push	{r7, lr}
    ad52:	b082      	sub	sp, #8
    ad54:	af00      	add	r7, sp, #0
    ad56:	0002      	movs	r2, r0
    ad58:	6039      	str	r1, [r7, #0]
    ad5a:	1dfb      	adds	r3, r7, #7
    ad5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ad5e:	1dfb      	adds	r3, r7, #7
    ad60:	781b      	ldrb	r3, [r3, #0]
    ad62:	2b01      	cmp	r3, #1
    ad64:	d00a      	beq.n	ad7c <system_apb_clock_set_mask+0x2c>
    ad66:	2b02      	cmp	r3, #2
    ad68:	d00f      	beq.n	ad8a <system_apb_clock_set_mask+0x3a>
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d114      	bne.n	ad98 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ad6e:	4b0e      	ldr	r3, [pc, #56]	; (ada8 <system_apb_clock_set_mask+0x58>)
    ad70:	4a0d      	ldr	r2, [pc, #52]	; (ada8 <system_apb_clock_set_mask+0x58>)
    ad72:	6991      	ldr	r1, [r2, #24]
    ad74:	683a      	ldr	r2, [r7, #0]
    ad76:	430a      	orrs	r2, r1
    ad78:	619a      	str	r2, [r3, #24]
			break;
    ad7a:	e00f      	b.n	ad9c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ad7c:	4b0a      	ldr	r3, [pc, #40]	; (ada8 <system_apb_clock_set_mask+0x58>)
    ad7e:	4a0a      	ldr	r2, [pc, #40]	; (ada8 <system_apb_clock_set_mask+0x58>)
    ad80:	69d1      	ldr	r1, [r2, #28]
    ad82:	683a      	ldr	r2, [r7, #0]
    ad84:	430a      	orrs	r2, r1
    ad86:	61da      	str	r2, [r3, #28]
			break;
    ad88:	e008      	b.n	ad9c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ad8a:	4b07      	ldr	r3, [pc, #28]	; (ada8 <system_apb_clock_set_mask+0x58>)
    ad8c:	4a06      	ldr	r2, [pc, #24]	; (ada8 <system_apb_clock_set_mask+0x58>)
    ad8e:	6a11      	ldr	r1, [r2, #32]
    ad90:	683a      	ldr	r2, [r7, #0]
    ad92:	430a      	orrs	r2, r1
    ad94:	621a      	str	r2, [r3, #32]
			break;
    ad96:	e001      	b.n	ad9c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ad98:	2317      	movs	r3, #23
    ad9a:	e000      	b.n	ad9e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ad9c:	2300      	movs	r3, #0
}
    ad9e:	0018      	movs	r0, r3
    ada0:	46bd      	mov	sp, r7
    ada2:	b002      	add	sp, #8
    ada4:	bd80      	pop	{r7, pc}
    ada6:	46c0      	nop			; (mov r8, r8)
    ada8:	40000400 	.word	0x40000400

0000adac <nvm_get_config_defaults>:
{
    adac:	b580      	push	{r7, lr}
    adae:	b082      	sub	sp, #8
    adb0:	af00      	add	r7, sp, #0
    adb2:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	2200      	movs	r2, #0
    adb8:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    adba:	687b      	ldr	r3, [r7, #4]
    adbc:	2201      	movs	r2, #1
    adbe:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    adc0:	4b08      	ldr	r3, [pc, #32]	; (ade4 <nvm_get_config_defaults+0x38>)
    adc2:	685b      	ldr	r3, [r3, #4]
    adc4:	06db      	lsls	r3, r3, #27
    adc6:	0f1b      	lsrs	r3, r3, #28
    adc8:	b2db      	uxtb	r3, r3
    adca:	001a      	movs	r2, r3
    adcc:	687b      	ldr	r3, [r7, #4]
    adce:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    add0:	687b      	ldr	r3, [r7, #4]
    add2:	2200      	movs	r2, #0
    add4:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    add6:	687b      	ldr	r3, [r7, #4]
    add8:	2200      	movs	r2, #0
    adda:	711a      	strb	r2, [r3, #4]
}
    addc:	46c0      	nop			; (mov r8, r8)
    adde:	46bd      	mov	sp, r7
    ade0:	b002      	add	sp, #8
    ade2:	bd80      	pop	{r7, pc}
    ade4:	41004000 	.word	0x41004000

0000ade8 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    ade8:	b580      	push	{r7, lr}
    adea:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    adec:	4b02      	ldr	r3, [pc, #8]	; (adf8 <system_reset+0x10>)
    adee:	4798      	blx	r3
}
    adf0:	46c0      	nop			; (mov r8, r8)
    adf2:	46bd      	mov	sp, r7
    adf4:	bd80      	pop	{r7, pc}
    adf6:	46c0      	nop			; (mov r8, r8)
    adf8:	0000ad09 	.word	0x0000ad09

0000adfc <system_interrupt_enable_global>:
{
    adfc:	b580      	push	{r7, lr}
    adfe:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    ae00:	4b04      	ldr	r3, [pc, #16]	; (ae14 <system_interrupt_enable_global+0x18>)
    ae02:	2201      	movs	r2, #1
    ae04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    ae06:	f3bf 8f5f 	dmb	sy
    ae0a:	b662      	cpsie	i
}
    ae0c:	46c0      	nop			; (mov r8, r8)
    ae0e:	46bd      	mov	sp, r7
    ae10:	bd80      	pop	{r7, pc}
    ae12:	46c0      	nop			; (mov r8, r8)
    ae14:	20000009 	.word	0x20000009

0000ae18 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    ae18:	b580      	push	{r7, lr}
    ae1a:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    ae1c:	2102      	movs	r1, #2
    ae1e:	2001      	movs	r0, #1
    ae20:	4b02      	ldr	r3, [pc, #8]	; (ae2c <dsu_crc32_init+0x14>)
    ae22:	4798      	blx	r3
#endif

}
    ae24:	46c0      	nop			; (mov r8, r8)
    ae26:	46bd      	mov	sp, r7
    ae28:	bd80      	pop	{r7, pc}
    ae2a:	46c0      	nop			; (mov r8, r8)
    ae2c:	0000ad51 	.word	0x0000ad51

0000ae30 <main>:
*
* @return  Unused (ANSI-C compatibility).
* @note    Bootloader code initiates here.
*****************************************************************************/
int main(void)
{
    ae30:	b590      	push	{r4, r7, lr}
    ae32:	b08b      	sub	sp, #44	; 0x2c
    ae34:	af00      	add	r7, sp, #0
    /*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
    system_init();
    ae36:	4b46      	ldr	r3, [pc, #280]	; (af50 <main+0x120>)
    ae38:	4798      	blx	r3
    delay_init();
    ae3a:	4b46      	ldr	r3, [pc, #280]	; (af54 <main+0x124>)
    ae3c:	4798      	blx	r3
    InitializeSerialConsole();
    ae3e:	4b46      	ldr	r3, [pc, #280]	; (af58 <main+0x128>)
    ae40:	4798      	blx	r3
    system_interrupt_enable_global();
    ae42:	4b46      	ldr	r3, [pc, #280]	; (af5c <main+0x12c>)
    ae44:	4798      	blx	r3

    /* Initialize SD MMC stack */
    sd_mmc_init();
    ae46:	4b46      	ldr	r3, [pc, #280]	; (af60 <main+0x130>)
    ae48:	4798      	blx	r3

    // Initialize the NVM driver
    configure_nvm();
    ae4a:	4b46      	ldr	r3, [pc, #280]	; (af64 <main+0x134>)
    ae4c:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
    ae4e:	4b46      	ldr	r3, [pc, #280]	; (af68 <main+0x138>)
    ae50:	2201      	movs	r2, #1
    ae52:	701a      	strb	r2, [r3, #0]
    ae54:	f3bf 8f5f 	dmb	sy
    ae58:	b662      	cpsie	i

    // Configure DSU CRC
    dsu_crc32_init();
    ae5a:	4b44      	ldr	r3, [pc, #272]	; (af6c <main+0x13c>)
    ae5c:	4798      	blx	r3

    SerialConsoleWriteString("ESE5160 - ENTER BOOTLOADER\r\n");
    ae5e:	4b44      	ldr	r3, [pc, #272]	; (af70 <main+0x140>)
    ae60:	0018      	movs	r0, r3
    ae62:	4b44      	ldr	r3, [pc, #272]	; (af74 <main+0x144>)
    ae64:	4798      	blx	r3

    /* END SYSTEM PERIPHERALS INITIALIZATION*/

    /*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/
    SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    ae66:	4b44      	ldr	r3, [pc, #272]	; (af78 <main+0x148>)
    ae68:	0018      	movs	r0, r3
    ae6a:	4b42      	ldr	r3, [pc, #264]	; (af74 <main+0x144>)
    ae6c:	4798      	blx	r3
    if (!StartFilesystemAndTest()) {
    ae6e:	4b43      	ldr	r3, [pc, #268]	; (af7c <main+0x14c>)
    ae70:	4798      	blx	r3
    ae72:	0003      	movs	r3, r0
    ae74:	001a      	movs	r2, r3
    ae76:	2301      	movs	r3, #1
    ae78:	4053      	eors	r3, r2
    ae7a:	b2db      	uxtb	r3, r3
    ae7c:	2b00      	cmp	r3, #0
    ae7e:	d00a      	beq.n	ae96 <main+0x66>
        SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...\r\n");
    ae80:	4b3f      	ldr	r3, [pc, #252]	; (af80 <main+0x150>)
    ae82:	0018      	movs	r0, r3
    ae84:	4b3b      	ldr	r3, [pc, #236]	; (af74 <main+0x144>)
    ae86:	4798      	blx	r3
        delay_cycles_ms(5000);
    ae88:	4b3e      	ldr	r3, [pc, #248]	; (af84 <main+0x154>)
    ae8a:	0018      	movs	r0, r3
    ae8c:	4b3e      	ldr	r3, [pc, #248]	; (af88 <main+0x158>)
    ae8e:	4798      	blx	r3
        system_reset();
    ae90:	4b3e      	ldr	r3, [pc, #248]	; (af8c <main+0x15c>)
    ae92:	4798      	blx	r3
    ae94:	e003      	b.n	ae9e <main+0x6e>
    } else {
        SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted.\r\n");
    ae96:	4b3e      	ldr	r3, [pc, #248]	; (af90 <main+0x160>)
    ae98:	0018      	movs	r0, r3
    ae9a:	4b36      	ldr	r3, [pc, #216]	; (af74 <main+0x144>)
    ae9c:	4798      	blx	r3

    /*3.) STARTS BOOTLOADER HERE!*/
    {
        FRESULT flagRes;
        FIL flagFile;
        bool flagUpdate = false;
    ae9e:	2327      	movs	r3, #39	; 0x27
    aea0:	18fb      	adds	r3, r7, r3
    aea2:	2200      	movs	r2, #0
    aea4:	701a      	strb	r2, [r3, #0]

        // Check if "FlagA.txt" exists
        flagRes = f_open(&flagFile, "0:FlagA.txt", FA_READ);
    aea6:	2326      	movs	r3, #38	; 0x26
    aea8:	18fc      	adds	r4, r7, r3
    aeaa:	493a      	ldr	r1, [pc, #232]	; (af94 <main+0x164>)
    aeac:	003b      	movs	r3, r7
    aeae:	2201      	movs	r2, #1
    aeb0:	0018      	movs	r0, r3
    aeb2:	4b39      	ldr	r3, [pc, #228]	; (af98 <main+0x168>)
    aeb4:	4798      	blx	r3
    aeb6:	0003      	movs	r3, r0
    aeb8:	7023      	strb	r3, [r4, #0]
        if (flagRes == FR_OK) {
    aeba:	2326      	movs	r3, #38	; 0x26
    aebc:	18fb      	adds	r3, r7, r3
    aebe:	781b      	ldrb	r3, [r3, #0]
    aec0:	2b00      	cmp	r3, #0
    aec2:	d107      	bne.n	aed4 <main+0xa4>
            flagUpdate = true;
    aec4:	2327      	movs	r3, #39	; 0x27
    aec6:	18fb      	adds	r3, r7, r3
    aec8:	2201      	movs	r2, #1
    aeca:	701a      	strb	r2, [r3, #0]
            f_close(&flagFile);
    aecc:	003b      	movs	r3, r7
    aece:	0018      	movs	r0, r3
    aed0:	4b32      	ldr	r3, [pc, #200]	; (af9c <main+0x16c>)
    aed2:	4798      	blx	r3
        }

        if (flagUpdate) {
    aed4:	2327      	movs	r3, #39	; 0x27
    aed6:	18fb      	adds	r3, r7, r3
    aed8:	781b      	ldrb	r3, [r3, #0]
    aeda:	2b00      	cmp	r3, #0
    aedc:	d026      	beq.n	af2c <main+0xfc>
            SerialConsoleWriteString("FlagA.txt detected - updating firmware from application.bin...\r\n");
    aede:	4b30      	ldr	r3, [pc, #192]	; (afa0 <main+0x170>)
    aee0:	0018      	movs	r0, r3
    aee2:	4b24      	ldr	r3, [pc, #144]	; (af74 <main+0x144>)
    aee4:	4798      	blx	r3

            // First, attempt to verify and burn "application.bin" (last 4 bytes contain the CRC)
            if (CheckAndBurnCrcFirmware("0:application.bin")) {
    aee6:	4b2f      	ldr	r3, [pc, #188]	; (afa4 <main+0x174>)
    aee8:	0018      	movs	r0, r3
    aeea:	4b2f      	ldr	r3, [pc, #188]	; (afa8 <main+0x178>)
    aeec:	4798      	blx	r3
    aeee:	1e03      	subs	r3, r0, #0
    aef0:	d004      	beq.n	aefc <main+0xcc>
                // After a successful update, delete FlagUpdate.txt
                f_unlink("0:FlagA.txt");
    aef2:	4b28      	ldr	r3, [pc, #160]	; (af94 <main+0x164>)
    aef4:	0018      	movs	r0, r3
    aef6:	4b2d      	ldr	r3, [pc, #180]	; (afac <main+0x17c>)
    aef8:	4798      	blx	r3
    aefa:	e01b      	b.n	af34 <main+0x104>
            } else {
                // If that fails, fall back to using "g_application.bin"
                SerialConsoleWriteString("Error updating firmware from application.bin.\r\n");
    aefc:	4b2c      	ldr	r3, [pc, #176]	; (afb0 <main+0x180>)
    aefe:	0018      	movs	r0, r3
    af00:	4b1c      	ldr	r3, [pc, #112]	; (af74 <main+0x144>)
    af02:	4798      	blx	r3
                SerialConsoleWriteString("Falling back to g_application.bin...\r\n");
    af04:	4b2b      	ldr	r3, [pc, #172]	; (afb4 <main+0x184>)
    af06:	0018      	movs	r0, r3
    af08:	4b1a      	ldr	r3, [pc, #104]	; (af74 <main+0x144>)
    af0a:	4798      	blx	r3

                if (LoadFirmwareFromSDtoFlash("0:g_application.bin")) {
    af0c:	4b2a      	ldr	r3, [pc, #168]	; (afb8 <main+0x188>)
    af0e:	0018      	movs	r0, r3
    af10:	4b2a      	ldr	r3, [pc, #168]	; (afbc <main+0x18c>)
    af12:	4798      	blx	r3
    af14:	1e03      	subs	r3, r0, #0
    af16:	d004      	beq.n	af22 <main+0xf2>
                    f_unlink("0:FlagA.txt");
    af18:	4b1e      	ldr	r3, [pc, #120]	; (af94 <main+0x164>)
    af1a:	0018      	movs	r0, r3
    af1c:	4b23      	ldr	r3, [pc, #140]	; (afac <main+0x17c>)
    af1e:	4798      	blx	r3
    af20:	e008      	b.n	af34 <main+0x104>
                } else {
                    SerialConsoleWriteString("Error updating firmware from g_application.bin.\r\n");
    af22:	4b27      	ldr	r3, [pc, #156]	; (afc0 <main+0x190>)
    af24:	0018      	movs	r0, r3
    af26:	4b13      	ldr	r3, [pc, #76]	; (af74 <main+0x144>)
    af28:	4798      	blx	r3
    af2a:	e003      	b.n	af34 <main+0x104>
                }
            }
        } else {
            SerialConsoleWriteString("No update flag found. Go to the firmware in the flash.\r\n");
    af2c:	4b25      	ldr	r3, [pc, #148]	; (afc4 <main+0x194>)
    af2e:	0018      	movs	r0, r3
    af30:	4b10      	ldr	r3, [pc, #64]	; (af74 <main+0x144>)
    af32:	4798      	blx	r3
    }
    /* END BOOTLOADER HERE!*/


    // 4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
    SerialConsoleWriteString("ESE5160 - EXIT BOOTLOADER\r\n");
    af34:	4b24      	ldr	r3, [pc, #144]	; (afc8 <main+0x198>)
    af36:	0018      	movs	r0, r3
    af38:	4b0e      	ldr	r3, [pc, #56]	; (af74 <main+0x144>)
    af3a:	4798      	blx	r3
    delay_cycles_ms(100);
    af3c:	2064      	movs	r0, #100	; 0x64
    af3e:	4b12      	ldr	r3, [pc, #72]	; (af88 <main+0x158>)
    af40:	4798      	blx	r3

    DeinitializeSerialConsole();
    af42:	4b22      	ldr	r3, [pc, #136]	; (afcc <main+0x19c>)
    af44:	4798      	blx	r3
    sd_mmc_deinit();
    af46:	4b22      	ldr	r3, [pc, #136]	; (afd0 <main+0x1a0>)
    af48:	4798      	blx	r3

    // Jump to application
    jumpToApplication();
    af4a:	4b22      	ldr	r3, [pc, #136]	; (afd4 <main+0x1a4>)
    af4c:	4798      	blx	r3

    // Should not reach here! The device should have jumped to the main firmware.
    while(1);
    af4e:	e7fe      	b.n	af4e <main+0x11e>
    af50:	00006c81 	.word	0x00006c81
    af54:	00000149 	.word	0x00000149
    af58:	00000e1d 	.word	0x00000e1d
    af5c:	0000adfd 	.word	0x0000adfd
    af60:	00001cc9 	.word	0x00001cc9
    af64:	0000b2b1 	.word	0x0000b2b1
    af68:	20000009 	.word	0x20000009
    af6c:	0000ae19 	.word	0x0000ae19
    af70:	0000d574 	.word	0x0000d574
    af74:	00000ea9 	.word	0x00000ea9
    af78:	0000d594 	.word	0x0000d594
    af7c:	0000afd9 	.word	0x0000afd9
    af80:	0000d5bc 	.word	0x0000d5bc
    af84:	00001388 	.word	0x00001388
    af88:	000001a1 	.word	0x000001a1
    af8c:	0000ade9 	.word	0x0000ade9
    af90:	0000d60c 	.word	0x0000d60c
    af94:	0000d640 	.word	0x0000d640
    af98:	000099bd 	.word	0x000099bd
    af9c:	0000a659 	.word	0x0000a659
    afa0:	0000d64c 	.word	0x0000d64c
    afa4:	0000d690 	.word	0x0000d690
    afa8:	0000b2dd 	.word	0x0000b2dd
    afac:	0000a909 	.word	0x0000a909
    afb0:	0000d6a4 	.word	0x0000d6a4
    afb4:	0000d6d4 	.word	0x0000d6d4
    afb8:	0000d6fc 	.word	0x0000d6fc
    afbc:	0000b87d 	.word	0x0000b87d
    afc0:	0000d710 	.word	0x0000d710
    afc4:	0000d744 	.word	0x0000d744
    afc8:	0000d780 	.word	0x0000d780
    afcc:	00000e8d 	.word	0x00000e8d
    afd0:	00002a71 	.word	0x00002a71
    afd4:	0000b279 	.word	0x0000b279

0000afd8 <StartFilesystemAndTest>:
 *              creating a binary file and writing to it. It is used to verify that the SD card
 *              and FATFS are functioning before jumping to the main application.
 * @return      Returns true if the SD card and filesystem test passed, false otherwise.
 ***************************************************************************/
static bool StartFilesystemAndTest(void)
{
    afd8:	b590      	push	{r4, r7, lr}
    afda:	b0c5      	sub	sp, #276	; 0x114
    afdc:	af00      	add	r7, sp, #0
    bool sdCardPass = true;
    afde:	2310      	movs	r3, #16
    afe0:	33ff      	adds	r3, #255	; 0xff
    afe2:	18fb      	adds	r3, r7, r3
    afe4:	2201      	movs	r2, #1
    afe6:	701a      	strb	r2, [r3, #0]
    uint8_t binbuff[256];

    // Before we begin - fill the buffer for the binary write test with values 0x00 to 0xFF
    for (int i = 0; i < 256; i++) {
    afe8:	2300      	movs	r3, #0
    afea:	2284      	movs	r2, #132	; 0x84
    afec:	0052      	lsls	r2, r2, #1
    afee:	18ba      	adds	r2, r7, r2
    aff0:	6013      	str	r3, [r2, #0]
    aff2:	e019      	b.n	b028 <StartFilesystemAndTest+0x50>
        binbuff[i] = (uint8_t)i;
    aff4:	2384      	movs	r3, #132	; 0x84
    aff6:	005b      	lsls	r3, r3, #1
    aff8:	18fb      	adds	r3, r7, r3
    affa:	681b      	ldr	r3, [r3, #0]
    affc:	b2d9      	uxtb	r1, r3
    affe:	4b82      	ldr	r3, [pc, #520]	; (b208 <StartFilesystemAndTest+0x230>)
    b000:	2288      	movs	r2, #136	; 0x88
    b002:	0052      	lsls	r2, r2, #1
    b004:	18ba      	adds	r2, r7, r2
    b006:	18d2      	adds	r2, r2, r3
    b008:	2384      	movs	r3, #132	; 0x84
    b00a:	005b      	lsls	r3, r3, #1
    b00c:	18fb      	adds	r3, r7, r3
    b00e:	681b      	ldr	r3, [r3, #0]
    b010:	18d3      	adds	r3, r2, r3
    b012:	1c0a      	adds	r2, r1, #0
    b014:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
    b016:	2384      	movs	r3, #132	; 0x84
    b018:	005b      	lsls	r3, r3, #1
    b01a:	18fb      	adds	r3, r7, r3
    b01c:	681b      	ldr	r3, [r3, #0]
    b01e:	3301      	adds	r3, #1
    b020:	2284      	movs	r2, #132	; 0x84
    b022:	0052      	lsls	r2, r2, #1
    b024:	18ba      	adds	r2, r7, r2
    b026:	6013      	str	r3, [r2, #0]
    b028:	2384      	movs	r3, #132	; 0x84
    b02a:	005b      	lsls	r3, r3, #1
    b02c:	18fb      	adds	r3, r7, r3
    b02e:	681b      	ldr	r3, [r3, #0]
    b030:	2bff      	cmp	r3, #255	; 0xff
    b032:	dddf      	ble.n	aff4 <StartFilesystemAndTest+0x1c>
    }

    // MOUNT SD CARD
    Ctrl_status sdStatus = SdCard_Initiate();
    b034:	2308      	movs	r3, #8
    b036:	33ff      	adds	r3, #255	; 0xff
    b038:	18fc      	adds	r4, r7, r3
    b03a:	4b74      	ldr	r3, [pc, #464]	; (b20c <StartFilesystemAndTest+0x234>)
    b03c:	4798      	blx	r3
    b03e:	0003      	movs	r3, r0
    b040:	7023      	strb	r3, [r4, #0]
    if (sdStatus == CTRL_GOOD) {
    b042:	2308      	movs	r3, #8
    b044:	33ff      	adds	r3, #255	; 0xff
    b046:	18fb      	adds	r3, r7, r3
    b048:	781b      	ldrb	r3, [r3, #0]
    b04a:	2b00      	cmp	r3, #0
    b04c:	d000      	beq.n	b050 <StartFilesystemAndTest+0x78>
    b04e:	e0ca      	b.n	b1e6 <StartFilesystemAndTest+0x20e>
        SerialConsoleWriteString("SD Card initiated correctly!\r\n");
    b050:	4b6f      	ldr	r3, [pc, #444]	; (b210 <StartFilesystemAndTest+0x238>)
    b052:	0018      	movs	r0, r3
    b054:	4b6f      	ldr	r3, [pc, #444]	; (b214 <StartFilesystemAndTest+0x23c>)
    b056:	4798      	blx	r3

        // Attempt to mount a FAT file system on the SD card using FATFS
        SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    b058:	4b6f      	ldr	r3, [pc, #444]	; (b218 <StartFilesystemAndTest+0x240>)
    b05a:	0018      	movs	r0, r3
    b05c:	4b6d      	ldr	r3, [pc, #436]	; (b214 <StartFilesystemAndTest+0x23c>)
    b05e:	4798      	blx	r3
        memset(&fs, 0, sizeof(FATFS));
    b060:	238c      	movs	r3, #140	; 0x8c
    b062:	009a      	lsls	r2, r3, #2
    b064:	4b6d      	ldr	r3, [pc, #436]	; (b21c <StartFilesystemAndTest+0x244>)
    b066:	2100      	movs	r1, #0
    b068:	0018      	movs	r0, r3
    b06a:	4b6d      	ldr	r3, [pc, #436]	; (b220 <StartFilesystemAndTest+0x248>)
    b06c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    b06e:	4b6b      	ldr	r3, [pc, #428]	; (b21c <StartFilesystemAndTest+0x244>)
    b070:	0019      	movs	r1, r3
    b072:	2000      	movs	r0, #0
    b074:	4b6b      	ldr	r3, [pc, #428]	; (b224 <StartFilesystemAndTest+0x24c>)
    b076:	4798      	blx	r3
    b078:	0003      	movs	r3, r0
    b07a:	001a      	movs	r2, r3
    b07c:	4b6a      	ldr	r3, [pc, #424]	; (b228 <StartFilesystemAndTest+0x250>)
    b07e:	701a      	strb	r2, [r3, #0]
        if (FR_INVALID_DRIVE == res) {
    b080:	4b69      	ldr	r3, [pc, #420]	; (b228 <StartFilesystemAndTest+0x250>)
    b082:	781b      	ldrb	r3, [r3, #0]
    b084:	2b0b      	cmp	r3, #11
    b086:	d109      	bne.n	b09c <StartFilesystemAndTest+0xc4>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b088:	4b67      	ldr	r3, [pc, #412]	; (b228 <StartFilesystemAndTest+0x250>)
    b08a:	781b      	ldrb	r3, [r3, #0]
    b08c:	001a      	movs	r2, r3
    b08e:	4b67      	ldr	r3, [pc, #412]	; (b22c <StartFilesystemAndTest+0x254>)
    b090:	0019      	movs	r1, r3
    b092:	2000      	movs	r0, #0
    b094:	4b66      	ldr	r3, [pc, #408]	; (b230 <StartFilesystemAndTest+0x258>)
    b096:	4798      	blx	r3
            return false;
    b098:	2300      	movs	r3, #0
    b09a:	e0b1      	b.n	b200 <StartFilesystemAndTest+0x228>
        }
        SerialConsoleWriteString("[OK]\r\n");
    b09c:	4b65      	ldr	r3, [pc, #404]	; (b234 <StartFilesystemAndTest+0x25c>)
    b09e:	0018      	movs	r0, r3
    b0a0:	4b5c      	ldr	r3, [pc, #368]	; (b214 <StartFilesystemAndTest+0x23c>)
    b0a2:	4798      	blx	r3

        // Create and open a file
        SerialConsoleWriteString("Create a file (f_open)...\r\n");
    b0a4:	4b64      	ldr	r3, [pc, #400]	; (b238 <StartFilesystemAndTest+0x260>)
    b0a6:	0018      	movs	r0, r3
    b0a8:	4b5a      	ldr	r3, [pc, #360]	; (b214 <StartFilesystemAndTest+0x23c>)
    b0aa:	4798      	blx	r3
        test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b0ac:	4b63      	ldr	r3, [pc, #396]	; (b23c <StartFilesystemAndTest+0x264>)
    b0ae:	2230      	movs	r2, #48	; 0x30
    b0b0:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    b0b2:	4962      	ldr	r1, [pc, #392]	; (b23c <StartFilesystemAndTest+0x264>)
    b0b4:	4b62      	ldr	r3, [pc, #392]	; (b240 <StartFilesystemAndTest+0x268>)
    b0b6:	220a      	movs	r2, #10
    b0b8:	0018      	movs	r0, r3
    b0ba:	4b62      	ldr	r3, [pc, #392]	; (b244 <StartFilesystemAndTest+0x26c>)
    b0bc:	4798      	blx	r3
    b0be:	0003      	movs	r3, r0
    b0c0:	001a      	movs	r2, r3
    b0c2:	4b59      	ldr	r3, [pc, #356]	; (b228 <StartFilesystemAndTest+0x250>)
    b0c4:	701a      	strb	r2, [r3, #0]
        if (res != FR_OK) {
    b0c6:	4b58      	ldr	r3, [pc, #352]	; (b228 <StartFilesystemAndTest+0x250>)
    b0c8:	781b      	ldrb	r3, [r3, #0]
    b0ca:	2b00      	cmp	r3, #0
    b0cc:	d00d      	beq.n	b0ea <StartFilesystemAndTest+0x112>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b0ce:	4b56      	ldr	r3, [pc, #344]	; (b228 <StartFilesystemAndTest+0x250>)
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	001a      	movs	r2, r3
    b0d4:	4b55      	ldr	r3, [pc, #340]	; (b22c <StartFilesystemAndTest+0x254>)
    b0d6:	0019      	movs	r1, r3
    b0d8:	2000      	movs	r0, #0
    b0da:	4b55      	ldr	r3, [pc, #340]	; (b230 <StartFilesystemAndTest+0x258>)
    b0dc:	4798      	blx	r3
            sdCardPass = false;
    b0de:	2310      	movs	r3, #16
    b0e0:	33ff      	adds	r3, #255	; 0xff
    b0e2:	18fb      	adds	r3, r7, r3
    b0e4:	2200      	movs	r2, #0
    b0e6:	701a      	strb	r2, [r3, #0]
            goto test_end;
    b0e8:	e078      	b.n	b1dc <StartFilesystemAndTest+0x204>
        }
        SerialConsoleWriteString("[OK]\r\n");
    b0ea:	4b52      	ldr	r3, [pc, #328]	; (b234 <StartFilesystemAndTest+0x25c>)
    b0ec:	0018      	movs	r0, r3
    b0ee:	4b49      	ldr	r3, [pc, #292]	; (b214 <StartFilesystemAndTest+0x23c>)
    b0f0:	4798      	blx	r3

        // Write to a file
        SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    b0f2:	4b55      	ldr	r3, [pc, #340]	; (b248 <StartFilesystemAndTest+0x270>)
    b0f4:	0018      	movs	r0, r3
    b0f6:	4b47      	ldr	r3, [pc, #284]	; (b214 <StartFilesystemAndTest+0x23c>)
    b0f8:	4798      	blx	r3
        if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    b0fa:	4a51      	ldr	r2, [pc, #324]	; (b240 <StartFilesystemAndTest+0x268>)
    b0fc:	4b53      	ldr	r3, [pc, #332]	; (b24c <StartFilesystemAndTest+0x274>)
    b0fe:	0011      	movs	r1, r2
    b100:	0018      	movs	r0, r3
    b102:	4b53      	ldr	r3, [pc, #332]	; (b250 <StartFilesystemAndTest+0x278>)
    b104:	4798      	blx	r3
    b106:	1e03      	subs	r3, r0, #0
    b108:	d10e      	bne.n	b128 <StartFilesystemAndTest+0x150>
            f_close(&file_object);
    b10a:	4b4d      	ldr	r3, [pc, #308]	; (b240 <StartFilesystemAndTest+0x268>)
    b10c:	0018      	movs	r0, r3
    b10e:	4b51      	ldr	r3, [pc, #324]	; (b254 <StartFilesystemAndTest+0x27c>)
    b110:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b112:	4b51      	ldr	r3, [pc, #324]	; (b258 <StartFilesystemAndTest+0x280>)
    b114:	0019      	movs	r1, r3
    b116:	2000      	movs	r0, #0
    b118:	4b45      	ldr	r3, [pc, #276]	; (b230 <StartFilesystemAndTest+0x258>)
    b11a:	4798      	blx	r3
            sdCardPass = false;
    b11c:	2310      	movs	r3, #16
    b11e:	33ff      	adds	r3, #255	; 0xff
    b120:	18fb      	adds	r3, r7, r3
    b122:	2200      	movs	r2, #0
    b124:	701a      	strb	r2, [r3, #0]
            goto test_end;
    b126:	e059      	b.n	b1dc <StartFilesystemAndTest+0x204>
        }
        SerialConsoleWriteString("[OK]\r\n");
    b128:	4b42      	ldr	r3, [pc, #264]	; (b234 <StartFilesystemAndTest+0x25c>)
    b12a:	0018      	movs	r0, r3
    b12c:	4b39      	ldr	r3, [pc, #228]	; (b214 <StartFilesystemAndTest+0x23c>)
    b12e:	4798      	blx	r3
        f_close(&file_object); // Close file
    b130:	4b43      	ldr	r3, [pc, #268]	; (b240 <StartFilesystemAndTest+0x268>)
    b132:	0018      	movs	r0, r3
    b134:	4b47      	ldr	r3, [pc, #284]	; (b254 <StartFilesystemAndTest+0x27c>)
    b136:	4798      	blx	r3

        SerialConsoleWriteString("Test is successful.\r\n");
    b138:	4b48      	ldr	r3, [pc, #288]	; (b25c <StartFilesystemAndTest+0x284>)
    b13a:	0018      	movs	r0, r3
    b13c:	4b35      	ldr	r3, [pc, #212]	; (b214 <StartFilesystemAndTest+0x23c>)
    b13e:	4798      	blx	r3

        // Write binary file
        test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b140:	4b47      	ldr	r3, [pc, #284]	; (b260 <StartFilesystemAndTest+0x288>)
    b142:	2230      	movs	r2, #48	; 0x30
    b144:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    b146:	4946      	ldr	r1, [pc, #280]	; (b260 <StartFilesystemAndTest+0x288>)
    b148:	4b3d      	ldr	r3, [pc, #244]	; (b240 <StartFilesystemAndTest+0x268>)
    b14a:	220a      	movs	r2, #10
    b14c:	0018      	movs	r0, r3
    b14e:	4b3d      	ldr	r3, [pc, #244]	; (b244 <StartFilesystemAndTest+0x26c>)
    b150:	4798      	blx	r3
    b152:	0003      	movs	r3, r0
    b154:	001a      	movs	r2, r3
    b156:	4b34      	ldr	r3, [pc, #208]	; (b228 <StartFilesystemAndTest+0x250>)
    b158:	701a      	strb	r2, [r3, #0]
        if (res != FR_OK) {
    b15a:	4b33      	ldr	r3, [pc, #204]	; (b228 <StartFilesystemAndTest+0x250>)
    b15c:	781b      	ldrb	r3, [r3, #0]
    b15e:	2b00      	cmp	r3, #0
    b160:	d011      	beq.n	b186 <StartFilesystemAndTest+0x1ae>
            SerialConsoleWriteString("Could not open binary file!\r\n");
    b162:	4b40      	ldr	r3, [pc, #256]	; (b264 <StartFilesystemAndTest+0x28c>)
    b164:	0018      	movs	r0, r3
    b166:	4b2b      	ldr	r3, [pc, #172]	; (b214 <StartFilesystemAndTest+0x23c>)
    b168:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b16a:	4b2f      	ldr	r3, [pc, #188]	; (b228 <StartFilesystemAndTest+0x250>)
    b16c:	781b      	ldrb	r3, [r3, #0]
    b16e:	001a      	movs	r2, r3
    b170:	4b2e      	ldr	r3, [pc, #184]	; (b22c <StartFilesystemAndTest+0x254>)
    b172:	0019      	movs	r1, r3
    b174:	2000      	movs	r0, #0
    b176:	4b2e      	ldr	r3, [pc, #184]	; (b230 <StartFilesystemAndTest+0x258>)
    b178:	4798      	blx	r3
            sdCardPass = false;
    b17a:	2310      	movs	r3, #16
    b17c:	33ff      	adds	r3, #255	; 0xff
    b17e:	18fb      	adds	r3, r7, r3
    b180:	2200      	movs	r2, #0
    b182:	701a      	strb	r2, [r3, #0]
            goto test_end;
    b184:	e02a      	b.n	b1dc <StartFilesystemAndTest+0x204>
        }

        // Write to a binary file
        SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    b186:	4b38      	ldr	r3, [pc, #224]	; (b268 <StartFilesystemAndTest+0x290>)
    b188:	0018      	movs	r0, r3
    b18a:	4b22      	ldr	r3, [pc, #136]	; (b214 <StartFilesystemAndTest+0x23c>)
    b18c:	4798      	blx	r3
        uint32_t varWrite = 0;
    b18e:	2300      	movs	r3, #0
    b190:	603b      	str	r3, [r7, #0]
        if (0 != f_write(&file_object, binbuff, 256, &varWrite)) {
    b192:	003c      	movs	r4, r7
    b194:	2380      	movs	r3, #128	; 0x80
    b196:	005a      	lsls	r2, r3, #1
    b198:	1d39      	adds	r1, r7, #4
    b19a:	4829      	ldr	r0, [pc, #164]	; (b240 <StartFilesystemAndTest+0x268>)
    b19c:	0023      	movs	r3, r4
    b19e:	4c33      	ldr	r4, [pc, #204]	; (b26c <StartFilesystemAndTest+0x294>)
    b1a0:	47a0      	blx	r4
    b1a2:	1e03      	subs	r3, r0, #0
    b1a4:	d00e      	beq.n	b1c4 <StartFilesystemAndTest+0x1ec>
            f_close(&file_object);
    b1a6:	4b26      	ldr	r3, [pc, #152]	; (b240 <StartFilesystemAndTest+0x268>)
    b1a8:	0018      	movs	r0, r3
    b1aa:	4b2a      	ldr	r3, [pc, #168]	; (b254 <StartFilesystemAndTest+0x27c>)
    b1ac:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b1ae:	4b2a      	ldr	r3, [pc, #168]	; (b258 <StartFilesystemAndTest+0x280>)
    b1b0:	0019      	movs	r1, r3
    b1b2:	2000      	movs	r0, #0
    b1b4:	4b1e      	ldr	r3, [pc, #120]	; (b230 <StartFilesystemAndTest+0x258>)
    b1b6:	4798      	blx	r3
            sdCardPass = false;
    b1b8:	2310      	movs	r3, #16
    b1ba:	33ff      	adds	r3, #255	; 0xff
    b1bc:	18fb      	adds	r3, r7, r3
    b1be:	2200      	movs	r2, #0
    b1c0:	701a      	strb	r2, [r3, #0]
            goto test_end;
    b1c2:	e00b      	b.n	b1dc <StartFilesystemAndTest+0x204>
        }
        SerialConsoleWriteString("[OK]\r\n");
    b1c4:	4b1b      	ldr	r3, [pc, #108]	; (b234 <StartFilesystemAndTest+0x25c>)
    b1c6:	0018      	movs	r0, r3
    b1c8:	4b12      	ldr	r3, [pc, #72]	; (b214 <StartFilesystemAndTest+0x23c>)
    b1ca:	4798      	blx	r3
        f_close(&file_object);
    b1cc:	4b1c      	ldr	r3, [pc, #112]	; (b240 <StartFilesystemAndTest+0x268>)
    b1ce:	0018      	movs	r0, r3
    b1d0:	4b20      	ldr	r3, [pc, #128]	; (b254 <StartFilesystemAndTest+0x27c>)
    b1d2:	4798      	blx	r3

        SerialConsoleWriteString("Test is successful.\r\n");
    b1d4:	4b21      	ldr	r3, [pc, #132]	; (b25c <StartFilesystemAndTest+0x284>)
    b1d6:	0018      	movs	r0, r3
    b1d8:	4b0e      	ldr	r3, [pc, #56]	; (b214 <StartFilesystemAndTest+0x23c>)
    b1da:	4798      	blx	r3

    test_end:
        SerialConsoleWriteString("End of Test.\r\n");
    b1dc:	4b24      	ldr	r3, [pc, #144]	; (b270 <StartFilesystemAndTest+0x298>)
    b1de:	0018      	movs	r0, r3
    b1e0:	4b0c      	ldr	r3, [pc, #48]	; (b214 <StartFilesystemAndTest+0x23c>)
    b1e2:	4798      	blx	r3
    b1e4:	e008      	b.n	b1f8 <StartFilesystemAndTest+0x220>
    } else {
        SerialConsoleWriteString("SD Card failed initiation! Check connections!\r\n");
    b1e6:	4b23      	ldr	r3, [pc, #140]	; (b274 <StartFilesystemAndTest+0x29c>)
    b1e8:	0018      	movs	r0, r3
    b1ea:	4b0a      	ldr	r3, [pc, #40]	; (b214 <StartFilesystemAndTest+0x23c>)
    b1ec:	4798      	blx	r3
        sdCardPass = false;
    b1ee:	2310      	movs	r3, #16
    b1f0:	33ff      	adds	r3, #255	; 0xff
    b1f2:	18fb      	adds	r3, r7, r3
    b1f4:	2200      	movs	r2, #0
    b1f6:	701a      	strb	r2, [r3, #0]
    }

    return sdCardPass;
    b1f8:	2310      	movs	r3, #16
    b1fa:	33ff      	adds	r3, #255	; 0xff
    b1fc:	18fb      	adds	r3, r7, r3
    b1fe:	781b      	ldrb	r3, [r3, #0]
}
    b200:	0018      	movs	r0, r3
    b202:	46bd      	mov	sp, r7
    b204:	b045      	add	sp, #276	; 0x114
    b206:	bd90      	pop	{r4, r7, pc}
    b208:	fffffef4 	.word	0xfffffef4
    b20c:	000008fd 	.word	0x000008fd
    b210:	0000d79c 	.word	0x0000d79c
    b214:	00000ea9 	.word	0x00000ea9
    b218:	0000d7bc 	.word	0x0000d7bc
    b21c:	20000a04 	.word	0x20000a04
    b220:	0000be53 	.word	0x0000be53
    b224:	00009965 	.word	0x00009965
    b228:	20000c8c 	.word	0x20000c8c
    b22c:	0000d7d8 	.word	0x0000d7d8
    b230:	00000f35 	.word	0x00000f35
    b234:	0000d7e8 	.word	0x0000d7e8
    b238:	0000d7f0 	.word	0x0000d7f0
    b23c:	2000000c 	.word	0x2000000c
    b240:	20000c34 	.word	0x20000c34
    b244:	000099bd 	.word	0x000099bd
    b248:	0000d80c 	.word	0x0000d80c
    b24c:	0000d830 	.word	0x0000d830
    b250:	0000abb1 	.word	0x0000abb1
    b254:	0000a659 	.word	0x0000a659
    b258:	0000d844 	.word	0x0000d844
    b25c:	0000d850 	.word	0x0000d850
    b260:	20000020 	.word	0x20000020
    b264:	0000d868 	.word	0x0000d868
    b268:	0000d888 	.word	0x0000d888
    b26c:	0000a189 	.word	0x0000a189
    b270:	0000d8ac 	.word	0x0000d8ac
    b274:	0000d8bc 	.word	0x0000d8bc

0000b278 <jumpToApplication>:
 * @brief       Jumps to the main application.
 * @details     Before jumping, please turn off ALL peripherals that were turned on by the bootloader.
 * @return      None.
 ***************************************************************************/
static void jumpToApplication(void)
{
    b278:	b580      	push	{r7, lr}
    b27a:	b082      	sub	sp, #8
    b27c:	af00      	add	r7, sp, #0
    // Function pointer to the application section
    void (*applicationCodeEntry)(void);

    // Rebase the stack pointer
    __set_MSP(*(uint32_t *) APP_START_ADDRESS);
    b27e:	23f0      	movs	r3, #240	; 0xf0
    b280:	021b      	lsls	r3, r3, #8
    b282:	681b      	ldr	r3, [r3, #0]
    b284:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    b286:	683b      	ldr	r3, [r7, #0]
    b288:	f383 8808 	msr	MSP, r3

    // Rebase the vector table
    SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    b28c:	4b06      	ldr	r3, [pc, #24]	; (b2a8 <jumpToApplication+0x30>)
    b28e:	22f0      	movs	r2, #240	; 0xf0
    b290:	0212      	lsls	r2, r2, #8
    b292:	609a      	str	r2, [r3, #8]

    // Set pointer to the application section (Reset Handler)
    applicationCodeEntry = (void (*)(void))(*(unsigned *) (APP_START_RESET_VEC_ADDRESS));
    b294:	4b05      	ldr	r3, [pc, #20]	; (b2ac <jumpToApplication+0x34>)
    b296:	681b      	ldr	r3, [r3, #0]
    b298:	607b      	str	r3, [r7, #4]

    // Jump to application
    applicationCodeEntry();
    b29a:	687b      	ldr	r3, [r7, #4]
    b29c:	4798      	blx	r3
}
    b29e:	46c0      	nop			; (mov r8, r8)
    b2a0:	46bd      	mov	sp, r7
    b2a2:	b002      	add	sp, #8
    b2a4:	bd80      	pop	{r7, pc}
    b2a6:	46c0      	nop			; (mov r8, r8)
    b2a8:	e000ed00 	.word	0xe000ed00
    b2ac:	0000f004 	.word	0x0000f004

0000b2b0 <configure_nvm>:
 * @brief       Configures the NVM driver.
 * @details     Retrieves default configuration, modifies settings, and sets the configuration.
 * @return      None.
 ***************************************************************************/
static void configure_nvm(void)
{
    b2b0:	b580      	push	{r7, lr}
    b2b2:	b082      	sub	sp, #8
    b2b4:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    b2b6:	003b      	movs	r3, r7
    b2b8:	0018      	movs	r0, r3
    b2ba:	4b06      	ldr	r3, [pc, #24]	; (b2d4 <configure_nvm+0x24>)
    b2bc:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    b2be:	003b      	movs	r3, r7
    b2c0:	2200      	movs	r2, #0
    b2c2:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    b2c4:	003b      	movs	r3, r7
    b2c6:	0018      	movs	r0, r3
    b2c8:	4b03      	ldr	r3, [pc, #12]	; (b2d8 <configure_nvm+0x28>)
    b2ca:	4798      	blx	r3
}
    b2cc:	46c0      	nop			; (mov r8, r8)
    b2ce:	46bd      	mov	sp, r7
    b2d0:	b002      	add	sp, #8
    b2d2:	bd80      	pop	{r7, pc}
    b2d4:	0000adad 	.word	0x0000adad
    b2d8:	00000519 	.word	0x00000519

0000b2dc <CheckAndBurnCrcFirmware>:
/**************************************************************************
 *  1) Calculate CRC32 for the first (fileSize - 4) bytes and compare with the last 4 bytes.
 *  2) If they match, burn (fileSize - 4) bytes to Flash.
 **************************************************************************/
static bool CheckAndBurnCrcFirmware(const char *binFilename)
{
    b2dc:	b5b0      	push	{r4, r5, r7, lr}
    b2de:	b0b2      	sub	sp, #200	; 0xc8
    b2e0:	af00      	add	r7, sp, #0
    b2e2:	6078      	str	r0, [r7, #4]
    // Open file to get file size
    FIL fp;
    FRESULT fr = f_open(&fp, binFilename, FA_READ);
    b2e4:	23c7      	movs	r3, #199	; 0xc7
    b2e6:	18fc      	adds	r4, r7, r3
    b2e8:	6879      	ldr	r1, [r7, #4]
    b2ea:	2398      	movs	r3, #152	; 0x98
    b2ec:	18fb      	adds	r3, r7, r3
    b2ee:	2201      	movs	r2, #1
    b2f0:	0018      	movs	r0, r3
    b2f2:	4b6a      	ldr	r3, [pc, #424]	; (b49c <CheckAndBurnCrcFirmware+0x1c0>)
    b2f4:	4798      	blx	r3
    b2f6:	0003      	movs	r3, r0
    b2f8:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK) {
    b2fa:	23c7      	movs	r3, #199	; 0xc7
    b2fc:	18fb      	adds	r3, r7, r3
    b2fe:	781b      	ldrb	r3, [r3, #0]
    b300:	2b00      	cmp	r3, #0
    b302:	d005      	beq.n	b310 <CheckAndBurnCrcFirmware+0x34>
        SerialConsoleWriteString("Cannot open file for CRC check.\r\n");
    b304:	4b66      	ldr	r3, [pc, #408]	; (b4a0 <CheckAndBurnCrcFirmware+0x1c4>)
    b306:	0018      	movs	r0, r3
    b308:	4b66      	ldr	r3, [pc, #408]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b30a:	4798      	blx	r3
        return false;
    b30c:	2300      	movs	r3, #0
    b30e:	e0c0      	b.n	b492 <CheckAndBurnCrcFirmware+0x1b6>
    }
    uint32_t fileSize = fp.fsize;
    b310:	2398      	movs	r3, #152	; 0x98
    b312:	18fb      	adds	r3, r7, r3
    b314:	68db      	ldr	r3, [r3, #12]
    b316:	22c0      	movs	r2, #192	; 0xc0
    b318:	18ba      	adds	r2, r7, r2
    b31a:	6013      	str	r3, [r2, #0]
    f_close(&fp);
    b31c:	2398      	movs	r3, #152	; 0x98
    b31e:	18fb      	adds	r3, r7, r3
    b320:	0018      	movs	r0, r3
    b322:	4b61      	ldr	r3, [pc, #388]	; (b4a8 <CheckAndBurnCrcFirmware+0x1cc>)
    b324:	4798      	blx	r3

    if (fileSize < 4) {
    b326:	23c0      	movs	r3, #192	; 0xc0
    b328:	18fb      	adds	r3, r7, r3
    b32a:	681b      	ldr	r3, [r3, #0]
    b32c:	2b03      	cmp	r3, #3
    b32e:	d805      	bhi.n	b33c <CheckAndBurnCrcFirmware+0x60>
        SerialConsoleWriteString("File too small for appended CRC.\r\n");
    b330:	4b5e      	ldr	r3, [pc, #376]	; (b4ac <CheckAndBurnCrcFirmware+0x1d0>)
    b332:	0018      	movs	r0, r3
    b334:	4b5b      	ldr	r3, [pc, #364]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b336:	4798      	blx	r3
        return false;
    b338:	2300      	movs	r3, #0
    b33a:	e0aa      	b.n	b492 <CheckAndBurnCrcFirmware+0x1b6>
    }

    // Read the last 4 bytes
    uint8_t last4[4];
    fr = f_open(&fp, binFilename, FA_READ);
    b33c:	23c7      	movs	r3, #199	; 0xc7
    b33e:	18fc      	adds	r4, r7, r3
    b340:	6879      	ldr	r1, [r7, #4]
    b342:	2398      	movs	r3, #152	; 0x98
    b344:	18fb      	adds	r3, r7, r3
    b346:	2201      	movs	r2, #1
    b348:	0018      	movs	r0, r3
    b34a:	4b54      	ldr	r3, [pc, #336]	; (b49c <CheckAndBurnCrcFirmware+0x1c0>)
    b34c:	4798      	blx	r3
    b34e:	0003      	movs	r3, r0
    b350:	7023      	strb	r3, [r4, #0]
    if (fr == FR_OK) {
    b352:	23c7      	movs	r3, #199	; 0xc7
    b354:	18fb      	adds	r3, r7, r3
    b356:	781b      	ldrb	r3, [r3, #0]
    b358:	2b00      	cmp	r3, #0
    b35a:	d11b      	bne.n	b394 <CheckAndBurnCrcFirmware+0xb8>
        f_lseek(&fp, fileSize - 4);
    b35c:	23c0      	movs	r3, #192	; 0xc0
    b35e:	18fb      	adds	r3, r7, r3
    b360:	681b      	ldr	r3, [r3, #0]
    b362:	1f1a      	subs	r2, r3, #4
    b364:	2398      	movs	r3, #152	; 0x98
    b366:	18fb      	adds	r3, r7, r3
    b368:	0011      	movs	r1, r2
    b36a:	0018      	movs	r0, r3
    b36c:	4b50      	ldr	r3, [pc, #320]	; (b4b0 <CheckAndBurnCrcFirmware+0x1d4>)
    b36e:	4798      	blx	r3
        UINT readLen;
        fr = f_read(&fp, last4, 4, &readLen);
    b370:	23c7      	movs	r3, #199	; 0xc7
    b372:	18fc      	adds	r4, r7, r3
    b374:	230c      	movs	r3, #12
    b376:	18fb      	adds	r3, r7, r3
    b378:	2294      	movs	r2, #148	; 0x94
    b37a:	18b9      	adds	r1, r7, r2
    b37c:	2298      	movs	r2, #152	; 0x98
    b37e:	18b8      	adds	r0, r7, r2
    b380:	2204      	movs	r2, #4
    b382:	4d4c      	ldr	r5, [pc, #304]	; (b4b4 <CheckAndBurnCrcFirmware+0x1d8>)
    b384:	47a8      	blx	r5
    b386:	0003      	movs	r3, r0
    b388:	7023      	strb	r3, [r4, #0]
        f_close(&fp);
    b38a:	2398      	movs	r3, #152	; 0x98
    b38c:	18fb      	adds	r3, r7, r3
    b38e:	0018      	movs	r0, r3
    b390:	4b45      	ldr	r3, [pc, #276]	; (b4a8 <CheckAndBurnCrcFirmware+0x1cc>)
    b392:	4798      	blx	r3
    }

    if (fr != FR_OK) {
    b394:	23c7      	movs	r3, #199	; 0xc7
    b396:	18fb      	adds	r3, r7, r3
    b398:	781b      	ldrb	r3, [r3, #0]
    b39a:	2b00      	cmp	r3, #0
    b39c:	d005      	beq.n	b3aa <CheckAndBurnCrcFirmware+0xce>
        SerialConsoleWriteString("Failed to read last 4 bytes of file.\r\n");
    b39e:	4b46      	ldr	r3, [pc, #280]	; (b4b8 <CheckAndBurnCrcFirmware+0x1dc>)
    b3a0:	0018      	movs	r0, r3
    b3a2:	4b40      	ldr	r3, [pc, #256]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b3a4:	4798      	blx	r3
        return false;
    b3a6:	2300      	movs	r3, #0
    b3a8:	e073      	b.n	b492 <CheckAndBurnCrcFirmware+0x1b6>
    }

    // Little-endian parsing
    uint32_t appendedCrc = last4[0]
    b3aa:	2394      	movs	r3, #148	; 0x94
    b3ac:	18fb      	adds	r3, r7, r3
    b3ae:	781b      	ldrb	r3, [r3, #0]
    b3b0:	001a      	movs	r2, r3
                         | (last4[1] << 8)
    b3b2:	2394      	movs	r3, #148	; 0x94
    b3b4:	18fb      	adds	r3, r7, r3
    b3b6:	785b      	ldrb	r3, [r3, #1]
    b3b8:	021b      	lsls	r3, r3, #8
    b3ba:	431a      	orrs	r2, r3
                         | (last4[2] << 16)
    b3bc:	2394      	movs	r3, #148	; 0x94
    b3be:	18fb      	adds	r3, r7, r3
    b3c0:	789b      	ldrb	r3, [r3, #2]
    b3c2:	041b      	lsls	r3, r3, #16
    b3c4:	431a      	orrs	r2, r3
                         | (last4[3] << 24);
    b3c6:	2394      	movs	r3, #148	; 0x94
    b3c8:	18fb      	adds	r3, r7, r3
    b3ca:	78db      	ldrb	r3, [r3, #3]
    b3cc:	061b      	lsls	r3, r3, #24
    b3ce:	4313      	orrs	r3, r2
    uint32_t appendedCrc = last4[0]
    b3d0:	22bc      	movs	r2, #188	; 0xbc
    b3d2:	18ba      	adds	r2, r7, r2
    b3d4:	6013      	str	r3, [r2, #0]

    // Compute CRC32 for the first (fileSize - 4) bytes
    uint32_t computedCrc = 0;
    b3d6:	2300      	movs	r3, #0
    b3d8:	2290      	movs	r2, #144	; 0x90
    b3da:	18ba      	adds	r2, r7, r2
    b3dc:	6013      	str	r3, [r2, #0]
    if (!compute_file_crc32(binFilename, fileSize - 4, &computedCrc)) {
    b3de:	23c0      	movs	r3, #192	; 0xc0
    b3e0:	18fb      	adds	r3, r7, r3
    b3e2:	681b      	ldr	r3, [r3, #0]
    b3e4:	1f19      	subs	r1, r3, #4
    b3e6:	2390      	movs	r3, #144	; 0x90
    b3e8:	18fa      	adds	r2, r7, r3
    b3ea:	687b      	ldr	r3, [r7, #4]
    b3ec:	0018      	movs	r0, r3
    b3ee:	4b33      	ldr	r3, [pc, #204]	; (b4bc <CheckAndBurnCrcFirmware+0x1e0>)
    b3f0:	4798      	blx	r3
    b3f2:	0003      	movs	r3, r0
    b3f4:	001a      	movs	r2, r3
    b3f6:	2301      	movs	r3, #1
    b3f8:	4053      	eors	r3, r2
    b3fa:	b2db      	uxtb	r3, r3
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d005      	beq.n	b40c <CheckAndBurnCrcFirmware+0x130>
        SerialConsoleWriteString("Error computing file CRC.\r\n");
    b400:	4b2f      	ldr	r3, [pc, #188]	; (b4c0 <CheckAndBurnCrcFirmware+0x1e4>)
    b402:	0018      	movs	r0, r3
    b404:	4b27      	ldr	r3, [pc, #156]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b406:	4798      	blx	r3
        return false;
    b408:	2300      	movs	r3, #0
    b40a:	e042      	b.n	b492 <CheckAndBurnCrcFirmware+0x1b6>
    }

    char msg[128];
    sprintf(msg, "Appended CRC=0x%08lX, Computed CRC=0x%08lX\r\n", (unsigned long)appendedCrc, (unsigned long)computedCrc);
    b40c:	2390      	movs	r3, #144	; 0x90
    b40e:	18fb      	adds	r3, r7, r3
    b410:	681b      	ldr	r3, [r3, #0]
    b412:	22bc      	movs	r2, #188	; 0xbc
    b414:	18ba      	adds	r2, r7, r2
    b416:	6812      	ldr	r2, [r2, #0]
    b418:	492a      	ldr	r1, [pc, #168]	; (b4c4 <CheckAndBurnCrcFirmware+0x1e8>)
    b41a:	2010      	movs	r0, #16
    b41c:	1838      	adds	r0, r7, r0
    b41e:	4c2a      	ldr	r4, [pc, #168]	; (b4c8 <CheckAndBurnCrcFirmware+0x1ec>)
    b420:	47a0      	blx	r4
    SerialConsoleWriteString(msg);
    b422:	2310      	movs	r3, #16
    b424:	18fb      	adds	r3, r7, r3
    b426:	0018      	movs	r0, r3
    b428:	4b1e      	ldr	r3, [pc, #120]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b42a:	4798      	blx	r3

    if (appendedCrc == computedCrc) {
    b42c:	2390      	movs	r3, #144	; 0x90
    b42e:	18fb      	adds	r3, r7, r3
    b430:	681b      	ldr	r3, [r3, #0]
    b432:	22bc      	movs	r2, #188	; 0xbc
    b434:	18ba      	adds	r2, r7, r2
    b436:	6812      	ldr	r2, [r2, #0]
    b438:	429a      	cmp	r2, r3
    b43a:	d125      	bne.n	b488 <CheckAndBurnCrcFirmware+0x1ac>
        // If CRC valid, burn (fileSize - 4) bytes to Flash
        sprintf(msg, "CRC valid. Burning %lu bytes.\r\n", (unsigned long)(fileSize - 4));
    b43c:	23c0      	movs	r3, #192	; 0xc0
    b43e:	18fb      	adds	r3, r7, r3
    b440:	681b      	ldr	r3, [r3, #0]
    b442:	1f1a      	subs	r2, r3, #4
    b444:	4921      	ldr	r1, [pc, #132]	; (b4cc <CheckAndBurnCrcFirmware+0x1f0>)
    b446:	2310      	movs	r3, #16
    b448:	18fb      	adds	r3, r7, r3
    b44a:	0018      	movs	r0, r3
    b44c:	4b1e      	ldr	r3, [pc, #120]	; (b4c8 <CheckAndBurnCrcFirmware+0x1ec>)
    b44e:	4798      	blx	r3
        SerialConsoleWriteString(msg);
    b450:	2310      	movs	r3, #16
    b452:	18fb      	adds	r3, r7, r3
    b454:	0018      	movs	r0, r3
    b456:	4b13      	ldr	r3, [pc, #76]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b458:	4798      	blx	r3
        if (LoadFirmwareFromSDtoFlashTruncate(binFilename, fileSize - 4)) {
    b45a:	23c0      	movs	r3, #192	; 0xc0
    b45c:	18fb      	adds	r3, r7, r3
    b45e:	681b      	ldr	r3, [r3, #0]
    b460:	1f1a      	subs	r2, r3, #4
    b462:	687b      	ldr	r3, [r7, #4]
    b464:	0011      	movs	r1, r2
    b466:	0018      	movs	r0, r3
    b468:	4b19      	ldr	r3, [pc, #100]	; (b4d0 <CheckAndBurnCrcFirmware+0x1f4>)
    b46a:	4798      	blx	r3
    b46c:	1e03      	subs	r3, r0, #0
    b46e:	d005      	beq.n	b47c <CheckAndBurnCrcFirmware+0x1a0>
            SerialConsoleWriteString("Firmware updated via CRC method.\r\n");
    b470:	4b18      	ldr	r3, [pc, #96]	; (b4d4 <CheckAndBurnCrcFirmware+0x1f8>)
    b472:	0018      	movs	r0, r3
    b474:	4b0b      	ldr	r3, [pc, #44]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b476:	4798      	blx	r3
            return true;
    b478:	2301      	movs	r3, #1
    b47a:	e00a      	b.n	b492 <CheckAndBurnCrcFirmware+0x1b6>
        } else {
            SerialConsoleWriteString("CRC method burn fail!\r\n");
    b47c:	4b16      	ldr	r3, [pc, #88]	; (b4d8 <CheckAndBurnCrcFirmware+0x1fc>)
    b47e:	0018      	movs	r0, r3
    b480:	4b08      	ldr	r3, [pc, #32]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b482:	4798      	blx	r3
            return false;
    b484:	2300      	movs	r3, #0
    b486:	e004      	b.n	b492 <CheckAndBurnCrcFirmware+0x1b6>
        }
    } else {
        SerialConsoleWriteString("CRC mismatch!\r\n");
    b488:	4b14      	ldr	r3, [pc, #80]	; (b4dc <CheckAndBurnCrcFirmware+0x200>)
    b48a:	0018      	movs	r0, r3
    b48c:	4b05      	ldr	r3, [pc, #20]	; (b4a4 <CheckAndBurnCrcFirmware+0x1c8>)
    b48e:	4798      	blx	r3
        return false;
    b490:	2300      	movs	r3, #0
    }
}
    b492:	0018      	movs	r0, r3
    b494:	46bd      	mov	sp, r7
    b496:	b032      	add	sp, #200	; 0xc8
    b498:	bdb0      	pop	{r4, r5, r7, pc}
    b49a:	46c0      	nop			; (mov r8, r8)
    b49c:	000099bd 	.word	0x000099bd
    b4a0:	0000d8ec 	.word	0x0000d8ec
    b4a4:	00000ea9 	.word	0x00000ea9
    b4a8:	0000a659 	.word	0x0000a659
    b4ac:	0000d910 	.word	0x0000d910
    b4b0:	0000a695 	.word	0x0000a695
    b4b4:	00009eed 	.word	0x00009eed
    b4b8:	0000d934 	.word	0x0000d934
    b4bc:	0000b735 	.word	0x0000b735
    b4c0:	0000d95c 	.word	0x0000d95c
    b4c4:	0000d978 	.word	0x0000d978
    b4c8:	0000c145 	.word	0x0000c145
    b4cc:	0000d9a8 	.word	0x0000d9a8
    b4d0:	0000b4e1 	.word	0x0000b4e1
    b4d4:	0000d9c8 	.word	0x0000d9c8
    b4d8:	0000d9ec 	.word	0x0000d9ec
    b4dc:	0000da04 	.word	0x0000da04

0000b4e0 <LoadFirmwareFromSDtoFlashTruncate>:

/**************************************************************************
 *  Read from SD Card and burn only the first validSize bytes to FLASH
 **************************************************************************/
static bool LoadFirmwareFromSDtoFlashTruncate(const char *binFilename, uint32_t validSize)
{
    b4e0:	b5b0      	push	{r4, r5, r7, lr}
    b4e2:	b0d4      	sub	sp, #336	; 0x150
    b4e4:	af00      	add	r7, sp, #0
    b4e6:	6078      	str	r0, [r7, #4]
    b4e8:	6039      	str	r1, [r7, #0]
    FRESULT res;
    FIL binFile;
    UINT bytesRead = 0;
    b4ea:	2300      	movs	r3, #0
    b4ec:	2286      	movs	r2, #134	; 0x86
    b4ee:	0052      	lsls	r2, r2, #1
    b4f0:	18ba      	adds	r2, r7, r2
    b4f2:	6013      	str	r3, [r2, #0]
    bool updateSuccess = true;
    b4f4:	2350      	movs	r3, #80	; 0x50
    b4f6:	33ff      	adds	r3, #255	; 0xff
    b4f8:	18fb      	adds	r3, r7, r3
    b4fa:	2201      	movs	r2, #1
    b4fc:	701a      	strb	r2, [r3, #0]

    uint8_t buffer[FLASH_ROW_SIZE];
    uint32_t currentAddr = APP_START_ADDRESS;
    b4fe:	23f0      	movs	r3, #240	; 0xf0
    b500:	021b      	lsls	r3, r3, #8
    b502:	22a4      	movs	r2, #164	; 0xa4
    b504:	0052      	lsls	r2, r2, #1
    b506:	18ba      	adds	r2, r7, r2
    b508:	6013      	str	r3, [r2, #0]
    uint32_t bytesRemaining = validSize;
    b50a:	683b      	ldr	r3, [r7, #0]
    b50c:	22a2      	movs	r2, #162	; 0xa2
    b50e:	0052      	lsls	r2, r2, #1
    b510:	18ba      	adds	r2, r7, r2
    b512:	6013      	str	r3, [r2, #0]

    // Open file
    res = f_open(&binFile, binFilename, FA_READ);
    b514:	2340      	movs	r3, #64	; 0x40
    b516:	33ff      	adds	r3, #255	; 0xff
    b518:	18fc      	adds	r4, r7, r3
    b51a:	6879      	ldr	r1, [r7, #4]
    b51c:	2388      	movs	r3, #136	; 0x88
    b51e:	005b      	lsls	r3, r3, #1
    b520:	18fb      	adds	r3, r7, r3
    b522:	2201      	movs	r2, #1
    b524:	0018      	movs	r0, r3
    b526:	4b76      	ldr	r3, [pc, #472]	; (b700 <LoadFirmwareFromSDtoFlashTruncate+0x220>)
    b528:	4798      	blx	r3
    b52a:	0003      	movs	r3, r0
    b52c:	7023      	strb	r3, [r4, #0]
    if (res != FR_OK) {
    b52e:	2340      	movs	r3, #64	; 0x40
    b530:	33ff      	adds	r3, #255	; 0xff
    b532:	18fb      	adds	r3, r7, r3
    b534:	781b      	ldrb	r3, [r3, #0]
    b536:	2b00      	cmp	r3, #0
    b538:	d005      	beq.n	b546 <LoadFirmwareFromSDtoFlashTruncate+0x66>
        SerialConsoleWriteString("Truncate: open file fail.\r\n");
    b53a:	4b72      	ldr	r3, [pc, #456]	; (b704 <LoadFirmwareFromSDtoFlashTruncate+0x224>)
    b53c:	0018      	movs	r0, r3
    b53e:	4b72      	ldr	r3, [pc, #456]	; (b708 <LoadFirmwareFromSDtoFlashTruncate+0x228>)
    b540:	4798      	blx	r3
        return false;
    b542:	2300      	movs	r3, #0
    b544:	e0d7      	b.n	b6f6 <LoadFirmwareFromSDtoFlashTruncate+0x216>
    }

    SerialConsoleWriteString("Starting truncated firmware update...\r\n");
    b546:	4b71      	ldr	r3, [pc, #452]	; (b70c <LoadFirmwareFromSDtoFlashTruncate+0x22c>)
    b548:	0018      	movs	r0, r3
    b54a:	4b6f      	ldr	r3, [pc, #444]	; (b708 <LoadFirmwareFromSDtoFlashTruncate+0x228>)
    b54c:	4798      	blx	r3

    while (bytesRemaining > 0) {
    b54e:	e0b0      	b.n	b6b2 <LoadFirmwareFromSDtoFlashTruncate+0x1d2>
        uint32_t chunkSize = (bytesRemaining >= FLASH_ROW_SIZE) ? FLASH_ROW_SIZE : bytesRemaining;
    b550:	23a2      	movs	r3, #162	; 0xa2
    b552:	005b      	lsls	r3, r3, #1
    b554:	18fb      	adds	r3, r7, r3
    b556:	681b      	ldr	r3, [r3, #0]
    b558:	2280      	movs	r2, #128	; 0x80
    b55a:	0052      	lsls	r2, r2, #1
    b55c:	4293      	cmp	r3, r2
    b55e:	d901      	bls.n	b564 <LoadFirmwareFromSDtoFlashTruncate+0x84>
    b560:	2380      	movs	r3, #128	; 0x80
    b562:	005b      	lsls	r3, r3, #1
    b564:	229c      	movs	r2, #156	; 0x9c
    b566:	0052      	lsls	r2, r2, #1
    b568:	18ba      	adds	r2, r7, r2
    b56a:	6013      	str	r3, [r2, #0]
        memset(buffer, 0xFF, FLASH_ROW_SIZE);
    b56c:	2380      	movs	r3, #128	; 0x80
    b56e:	005a      	lsls	r2, r3, #1
    b570:	230c      	movs	r3, #12
    b572:	18fb      	adds	r3, r7, r3
    b574:	21ff      	movs	r1, #255	; 0xff
    b576:	0018      	movs	r0, r3
    b578:	4b65      	ldr	r3, [pc, #404]	; (b710 <LoadFirmwareFromSDtoFlashTruncate+0x230>)
    b57a:	4798      	blx	r3

        res = f_read(&binFile, buffer, chunkSize, &bytesRead);
    b57c:	2340      	movs	r3, #64	; 0x40
    b57e:	33ff      	adds	r3, #255	; 0xff
    b580:	18fc      	adds	r4, r7, r3
    b582:	2386      	movs	r3, #134	; 0x86
    b584:	005b      	lsls	r3, r3, #1
    b586:	18fb      	adds	r3, r7, r3
    b588:	229c      	movs	r2, #156	; 0x9c
    b58a:	0052      	lsls	r2, r2, #1
    b58c:	18ba      	adds	r2, r7, r2
    b58e:	6812      	ldr	r2, [r2, #0]
    b590:	210c      	movs	r1, #12
    b592:	1879      	adds	r1, r7, r1
    b594:	2088      	movs	r0, #136	; 0x88
    b596:	0040      	lsls	r0, r0, #1
    b598:	1838      	adds	r0, r7, r0
    b59a:	4d5e      	ldr	r5, [pc, #376]	; (b714 <LoadFirmwareFromSDtoFlashTruncate+0x234>)
    b59c:	47a8      	blx	r5
    b59e:	0003      	movs	r3, r0
    b5a0:	7023      	strb	r3, [r4, #0]
        if (res != FR_OK || bytesRead == 0) {
    b5a2:	2340      	movs	r3, #64	; 0x40
    b5a4:	33ff      	adds	r3, #255	; 0xff
    b5a6:	18fb      	adds	r3, r7, r3
    b5a8:	781b      	ldrb	r3, [r3, #0]
    b5aa:	2b00      	cmp	r3, #0
    b5ac:	d105      	bne.n	b5ba <LoadFirmwareFromSDtoFlashTruncate+0xda>
    b5ae:	2386      	movs	r3, #134	; 0x86
    b5b0:	005b      	lsls	r3, r3, #1
    b5b2:	18fb      	adds	r3, r7, r3
    b5b4:	681b      	ldr	r3, [r3, #0]
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	d105      	bne.n	b5c6 <LoadFirmwareFromSDtoFlashTruncate+0xe6>
            updateSuccess = false;
    b5ba:	2350      	movs	r3, #80	; 0x50
    b5bc:	33ff      	adds	r3, #255	; 0xff
    b5be:	18fb      	adds	r3, r7, r3
    b5c0:	2200      	movs	r2, #0
    b5c2:	701a      	strb	r2, [r3, #0]
            break;
    b5c4:	e07e      	b.n	b6c4 <LoadFirmwareFromSDtoFlashTruncate+0x1e4>
        }

        // Erase 256 bytes row
        if (nvm_erase_row(currentAddr) != STATUS_OK) {
    b5c6:	23a4      	movs	r3, #164	; 0xa4
    b5c8:	005b      	lsls	r3, r3, #1
    b5ca:	18fb      	adds	r3, r7, r3
    b5cc:	681b      	ldr	r3, [r3, #0]
    b5ce:	0018      	movs	r0, r3
    b5d0:	4b51      	ldr	r3, [pc, #324]	; (b718 <LoadFirmwareFromSDtoFlashTruncate+0x238>)
    b5d2:	4798      	blx	r3
    b5d4:	1e03      	subs	r3, r0, #0
    b5d6:	d009      	beq.n	b5ec <LoadFirmwareFromSDtoFlashTruncate+0x10c>
            SerialConsoleWriteString("Error erasing row!\r\n");
    b5d8:	4b50      	ldr	r3, [pc, #320]	; (b71c <LoadFirmwareFromSDtoFlashTruncate+0x23c>)
    b5da:	0018      	movs	r0, r3
    b5dc:	4b4a      	ldr	r3, [pc, #296]	; (b708 <LoadFirmwareFromSDtoFlashTruncate+0x228>)
    b5de:	4798      	blx	r3
            updateSuccess = false;
    b5e0:	2350      	movs	r3, #80	; 0x50
    b5e2:	33ff      	adds	r3, #255	; 0xff
    b5e4:	18fb      	adds	r3, r7, r3
    b5e6:	2200      	movs	r2, #0
    b5e8:	701a      	strb	r2, [r3, #0]
            break;
    b5ea:	e06b      	b.n	b6c4 <LoadFirmwareFromSDtoFlashTruncate+0x1e4>
        }

        // Write 4 pages (64B each)
        for (uint32_t i = 0; i < (FLASH_ROW_SIZE / FLASH_PAGE_SIZE); i++) {
    b5ec:	2300      	movs	r3, #0
    b5ee:	22a0      	movs	r2, #160	; 0xa0
    b5f0:	0052      	lsls	r2, r2, #1
    b5f2:	18ba      	adds	r2, r7, r2
    b5f4:	6013      	str	r3, [r2, #0]
    b5f6:	e033      	b.n	b660 <LoadFirmwareFromSDtoFlashTruncate+0x180>
            enum status_code writeRet = nvm_write_buffer(currentAddr + (i * FLASH_PAGE_SIZE),
    b5f8:	23a0      	movs	r3, #160	; 0xa0
    b5fa:	005b      	lsls	r3, r3, #1
    b5fc:	18fb      	adds	r3, r7, r3
    b5fe:	681b      	ldr	r3, [r3, #0]
    b600:	019a      	lsls	r2, r3, #6
    b602:	23a4      	movs	r3, #164	; 0xa4
    b604:	005b      	lsls	r3, r3, #1
    b606:	18fb      	adds	r3, r7, r3
    b608:	681b      	ldr	r3, [r3, #0]
    b60a:	18d0      	adds	r0, r2, r3
                                                         &buffer[i * FLASH_PAGE_SIZE],
    b60c:	23a0      	movs	r3, #160	; 0xa0
    b60e:	005b      	lsls	r3, r3, #1
    b610:	18fb      	adds	r3, r7, r3
    b612:	681b      	ldr	r3, [r3, #0]
    b614:	019b      	lsls	r3, r3, #6
    b616:	220c      	movs	r2, #12
    b618:	18ba      	adds	r2, r7, r2
    b61a:	18d3      	adds	r3, r2, r3
            enum status_code writeRet = nvm_write_buffer(currentAddr + (i * FLASH_PAGE_SIZE),
    b61c:	2238      	movs	r2, #56	; 0x38
    b61e:	32ff      	adds	r2, #255	; 0xff
    b620:	18bc      	adds	r4, r7, r2
    b622:	2240      	movs	r2, #64	; 0x40
    b624:	0019      	movs	r1, r3
    b626:	4b3e      	ldr	r3, [pc, #248]	; (b720 <LoadFirmwareFromSDtoFlashTruncate+0x240>)
    b628:	4798      	blx	r3
    b62a:	0003      	movs	r3, r0
    b62c:	7023      	strb	r3, [r4, #0]
                                                         FLASH_PAGE_SIZE);
            if (writeRet != STATUS_OK) {
    b62e:	2338      	movs	r3, #56	; 0x38
    b630:	33ff      	adds	r3, #255	; 0xff
    b632:	18fb      	adds	r3, r7, r3
    b634:	781b      	ldrb	r3, [r3, #0]
    b636:	2b00      	cmp	r3, #0
    b638:	d009      	beq.n	b64e <LoadFirmwareFromSDtoFlashTruncate+0x16e>
                SerialConsoleWriteString("Error writing page!\r\n");
    b63a:	4b3a      	ldr	r3, [pc, #232]	; (b724 <LoadFirmwareFromSDtoFlashTruncate+0x244>)
    b63c:	0018      	movs	r0, r3
    b63e:	4b32      	ldr	r3, [pc, #200]	; (b708 <LoadFirmwareFromSDtoFlashTruncate+0x228>)
    b640:	4798      	blx	r3
                updateSuccess = false;
    b642:	2350      	movs	r3, #80	; 0x50
    b644:	33ff      	adds	r3, #255	; 0xff
    b646:	18fb      	adds	r3, r7, r3
    b648:	2200      	movs	r2, #0
    b64a:	701a      	strb	r2, [r3, #0]
                break;
    b64c:	e00e      	b.n	b66c <LoadFirmwareFromSDtoFlashTruncate+0x18c>
        for (uint32_t i = 0; i < (FLASH_ROW_SIZE / FLASH_PAGE_SIZE); i++) {
    b64e:	23a0      	movs	r3, #160	; 0xa0
    b650:	005b      	lsls	r3, r3, #1
    b652:	18fb      	adds	r3, r7, r3
    b654:	681b      	ldr	r3, [r3, #0]
    b656:	3301      	adds	r3, #1
    b658:	22a0      	movs	r2, #160	; 0xa0
    b65a:	0052      	lsls	r2, r2, #1
    b65c:	18ba      	adds	r2, r7, r2
    b65e:	6013      	str	r3, [r2, #0]
    b660:	23a0      	movs	r3, #160	; 0xa0
    b662:	005b      	lsls	r3, r3, #1
    b664:	18fb      	adds	r3, r7, r3
    b666:	681b      	ldr	r3, [r3, #0]
    b668:	2b03      	cmp	r3, #3
    b66a:	d9c5      	bls.n	b5f8 <LoadFirmwareFromSDtoFlashTruncate+0x118>
            }
        }
        if (!updateSuccess) {
    b66c:	2350      	movs	r3, #80	; 0x50
    b66e:	33ff      	adds	r3, #255	; 0xff
    b670:	18fb      	adds	r3, r7, r3
    b672:	781b      	ldrb	r3, [r3, #0]
    b674:	2201      	movs	r2, #1
    b676:	4053      	eors	r3, r2
    b678:	b2db      	uxtb	r3, r3
    b67a:	2b00      	cmp	r3, #0
    b67c:	d121      	bne.n	b6c2 <LoadFirmwareFromSDtoFlashTruncate+0x1e2>
            break;
        }

        currentAddr    += bytesRead;
    b67e:	2386      	movs	r3, #134	; 0x86
    b680:	005b      	lsls	r3, r3, #1
    b682:	18fb      	adds	r3, r7, r3
    b684:	681b      	ldr	r3, [r3, #0]
    b686:	22a4      	movs	r2, #164	; 0xa4
    b688:	0052      	lsls	r2, r2, #1
    b68a:	18ba      	adds	r2, r7, r2
    b68c:	6812      	ldr	r2, [r2, #0]
    b68e:	18d3      	adds	r3, r2, r3
    b690:	22a4      	movs	r2, #164	; 0xa4
    b692:	0052      	lsls	r2, r2, #1
    b694:	18ba      	adds	r2, r7, r2
    b696:	6013      	str	r3, [r2, #0]
        bytesRemaining -= bytesRead;
    b698:	2386      	movs	r3, #134	; 0x86
    b69a:	005b      	lsls	r3, r3, #1
    b69c:	18fb      	adds	r3, r7, r3
    b69e:	681b      	ldr	r3, [r3, #0]
    b6a0:	22a2      	movs	r2, #162	; 0xa2
    b6a2:	0052      	lsls	r2, r2, #1
    b6a4:	18ba      	adds	r2, r7, r2
    b6a6:	6812      	ldr	r2, [r2, #0]
    b6a8:	1ad3      	subs	r3, r2, r3
    b6aa:	22a2      	movs	r2, #162	; 0xa2
    b6ac:	0052      	lsls	r2, r2, #1
    b6ae:	18ba      	adds	r2, r7, r2
    b6b0:	6013      	str	r3, [r2, #0]
    while (bytesRemaining > 0) {
    b6b2:	23a2      	movs	r3, #162	; 0xa2
    b6b4:	005b      	lsls	r3, r3, #1
    b6b6:	18fb      	adds	r3, r7, r3
    b6b8:	681b      	ldr	r3, [r3, #0]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d000      	beq.n	b6c0 <LoadFirmwareFromSDtoFlashTruncate+0x1e0>
    b6be:	e747      	b.n	b550 <LoadFirmwareFromSDtoFlashTruncate+0x70>
    b6c0:	e000      	b.n	b6c4 <LoadFirmwareFromSDtoFlashTruncate+0x1e4>
            break;
    b6c2:	46c0      	nop			; (mov r8, r8)
    }

    f_close(&binFile);
    b6c4:	2388      	movs	r3, #136	; 0x88
    b6c6:	005b      	lsls	r3, r3, #1
    b6c8:	18fb      	adds	r3, r7, r3
    b6ca:	0018      	movs	r0, r3
    b6cc:	4b16      	ldr	r3, [pc, #88]	; (b728 <LoadFirmwareFromSDtoFlashTruncate+0x248>)
    b6ce:	4798      	blx	r3

    if (updateSuccess) {
    b6d0:	2350      	movs	r3, #80	; 0x50
    b6d2:	33ff      	adds	r3, #255	; 0xff
    b6d4:	18fb      	adds	r3, r7, r3
    b6d6:	781b      	ldrb	r3, [r3, #0]
    b6d8:	2b00      	cmp	r3, #0
    b6da:	d004      	beq.n	b6e6 <LoadFirmwareFromSDtoFlashTruncate+0x206>
        SerialConsoleWriteString("Truncated firmware update done!\r\n");
    b6dc:	4b13      	ldr	r3, [pc, #76]	; (b72c <LoadFirmwareFromSDtoFlashTruncate+0x24c>)
    b6de:	0018      	movs	r0, r3
    b6e0:	4b09      	ldr	r3, [pc, #36]	; (b708 <LoadFirmwareFromSDtoFlashTruncate+0x228>)
    b6e2:	4798      	blx	r3
    b6e4:	e003      	b.n	b6ee <LoadFirmwareFromSDtoFlashTruncate+0x20e>
    } else {
        SerialConsoleWriteString("Truncated firmware update failed!\r\n");
    b6e6:	4b12      	ldr	r3, [pc, #72]	; (b730 <LoadFirmwareFromSDtoFlashTruncate+0x250>)
    b6e8:	0018      	movs	r0, r3
    b6ea:	4b07      	ldr	r3, [pc, #28]	; (b708 <LoadFirmwareFromSDtoFlashTruncate+0x228>)
    b6ec:	4798      	blx	r3
    }

    return updateSuccess;
    b6ee:	2350      	movs	r3, #80	; 0x50
    b6f0:	33ff      	adds	r3, #255	; 0xff
    b6f2:	18fb      	adds	r3, r7, r3
    b6f4:	781b      	ldrb	r3, [r3, #0]
}
    b6f6:	0018      	movs	r0, r3
    b6f8:	46bd      	mov	sp, r7
    b6fa:	b054      	add	sp, #336	; 0x150
    b6fc:	bdb0      	pop	{r4, r5, r7, pc}
    b6fe:	46c0      	nop			; (mov r8, r8)
    b700:	000099bd 	.word	0x000099bd
    b704:	0000da14 	.word	0x0000da14
    b708:	00000ea9 	.word	0x00000ea9
    b70c:	0000da30 	.word	0x0000da30
    b710:	0000be53 	.word	0x0000be53
    b714:	00009eed 	.word	0x00009eed
    b718:	00000855 	.word	0x00000855
    b71c:	0000da58 	.word	0x0000da58
    b720:	00000709 	.word	0x00000709
    b724:	0000da70 	.word	0x0000da70
    b728:	0000a659 	.word	0x0000a659
    b72c:	0000da88 	.word	0x0000da88
    b730:	0000daac 	.word	0x0000daac

0000b734 <compute_file_crc32>:
 *  Compute the CRC32 for the first 'length' bytes of the file on the SD card
 *  using a method outside of ASF/SDK (such as a software loop or other method).
 *  Here, an incremental approach is used.
 **************************************************************************/
static bool compute_file_crc32(const char *filename, uint32_t length, uint32_t *outCrc)
{
    b734:	b5b0      	push	{r4, r5, r7, lr}
    b736:	b0d2      	sub	sp, #328	; 0x148
    b738:	af00      	add	r7, sp, #0
    b73a:	60f8      	str	r0, [r7, #12]
    b73c:	60b9      	str	r1, [r7, #8]
    b73e:	607a      	str	r2, [r7, #4]
    // Microchip's "crc32_cal()" is for calculating a buffer in memory or
    // to recalc partial. But we want to read from file. So let's do it manually.

    FIL fp;
    FRESULT fr = f_open(&fp, filename, FA_READ);
    b740:	2344      	movs	r3, #68	; 0x44
    b742:	33ff      	adds	r3, #255	; 0xff
    b744:	18fc      	adds	r4, r7, r3
    b746:	68f9      	ldr	r1, [r7, #12]
    b748:	238c      	movs	r3, #140	; 0x8c
    b74a:	005b      	lsls	r3, r3, #1
    b74c:	18fb      	adds	r3, r7, r3
    b74e:	2201      	movs	r2, #1
    b750:	0018      	movs	r0, r3
    b752:	4b45      	ldr	r3, [pc, #276]	; (b868 <compute_file_crc32+0x134>)
    b754:	4798      	blx	r3
    b756:	0003      	movs	r3, r0
    b758:	7023      	strb	r3, [r4, #0]
    if (fr != FR_OK) {
    b75a:	2344      	movs	r3, #68	; 0x44
    b75c:	33ff      	adds	r3, #255	; 0xff
    b75e:	18fb      	adds	r3, r7, r3
    b760:	781b      	ldrb	r3, [r3, #0]
    b762:	2b00      	cmp	r3, #0
    b764:	d001      	beq.n	b76a <compute_file_crc32+0x36>
        return false;
    b766:	2300      	movs	r3, #0
    b768:	e079      	b.n	b85e <compute_file_crc32+0x12a>
    }

    uint8_t buffer[256];
    UINT bytesRead;
    uint32_t remaining = length;
    b76a:	68bb      	ldr	r3, [r7, #8]
    b76c:	22a2      	movs	r2, #162	; 0xa2
    b76e:	0052      	lsls	r2, r2, #1
    b770:	18ba      	adds	r2, r7, r2
    b772:	6013      	str	r3, [r2, #0]
    // We'll implement a straightforward polynomial approach or partial approach using "crc32_cal" in a loop.
    // But let's do a simpler approach with the ASF's software: We'll feed data in chunks.

    crc32_t crcVal = 0; // let "crcVal=0" => then first call is "crc32_cal(...)"
    b774:	2300      	movs	r3, #0
    b776:	613b      	str	r3, [r7, #16]

    // We will read file in small pieces
    while (remaining > 0) {
    b778:	e061      	b.n	b83e <compute_file_crc32+0x10a>
        uint32_t chunk = (remaining > sizeof(buffer)) ? sizeof(buffer) : remaining;
    b77a:	23a2      	movs	r3, #162	; 0xa2
    b77c:	005b      	lsls	r3, r3, #1
    b77e:	18fb      	adds	r3, r7, r3
    b780:	681b      	ldr	r3, [r3, #0]
    b782:	2280      	movs	r2, #128	; 0x80
    b784:	0052      	lsls	r2, r2, #1
    b786:	4293      	cmp	r3, r2
    b788:	d901      	bls.n	b78e <compute_file_crc32+0x5a>
    b78a:	2380      	movs	r3, #128	; 0x80
    b78c:	005b      	lsls	r3, r3, #1
    b78e:	229e      	movs	r2, #158	; 0x9e
    b790:	0052      	lsls	r2, r2, #1
    b792:	18ba      	adds	r2, r7, r2
    b794:	6013      	str	r3, [r2, #0]
        fr = f_read(&fp, buffer, chunk, &bytesRead);
    b796:	2344      	movs	r3, #68	; 0x44
    b798:	33ff      	adds	r3, #255	; 0xff
    b79a:	18fc      	adds	r4, r7, r3
    b79c:	2314      	movs	r3, #20
    b79e:	18fb      	adds	r3, r7, r3
    b7a0:	229e      	movs	r2, #158	; 0x9e
    b7a2:	0052      	lsls	r2, r2, #1
    b7a4:	18ba      	adds	r2, r7, r2
    b7a6:	6812      	ldr	r2, [r2, #0]
    b7a8:	2118      	movs	r1, #24
    b7aa:	1879      	adds	r1, r7, r1
    b7ac:	208c      	movs	r0, #140	; 0x8c
    b7ae:	0040      	lsls	r0, r0, #1
    b7b0:	1838      	adds	r0, r7, r0
    b7b2:	4d2e      	ldr	r5, [pc, #184]	; (b86c <compute_file_crc32+0x138>)
    b7b4:	47a8      	blx	r5
    b7b6:	0003      	movs	r3, r0
    b7b8:	7023      	strb	r3, [r4, #0]
        if (fr != FR_OK || bytesRead == 0) {
    b7ba:	2344      	movs	r3, #68	; 0x44
    b7bc:	33ff      	adds	r3, #255	; 0xff
    b7be:	18fb      	adds	r3, r7, r3
    b7c0:	781b      	ldrb	r3, [r3, #0]
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d102      	bne.n	b7cc <compute_file_crc32+0x98>
    b7c6:	697b      	ldr	r3, [r7, #20]
    b7c8:	2b00      	cmp	r3, #0
    b7ca:	d107      	bne.n	b7dc <compute_file_crc32+0xa8>
            f_close(&fp);
    b7cc:	238c      	movs	r3, #140	; 0x8c
    b7ce:	005b      	lsls	r3, r3, #1
    b7d0:	18fb      	adds	r3, r7, r3
    b7d2:	0018      	movs	r0, r3
    b7d4:	4b26      	ldr	r3, [pc, #152]	; (b870 <compute_file_crc32+0x13c>)
    b7d6:	4798      	blx	r3
            return false;
    b7d8:	2300      	movs	r3, #0
    b7da:	e040      	b.n	b85e <compute_file_crc32+0x12a>
        }
        remaining -= bytesRead;
    b7dc:	697b      	ldr	r3, [r7, #20]
    b7de:	22a2      	movs	r2, #162	; 0xa2
    b7e0:	0052      	lsls	r2, r2, #1
    b7e2:	18ba      	adds	r2, r7, r2
    b7e4:	6812      	ldr	r2, [r2, #0]
    b7e6:	1ad3      	subs	r3, r2, r3
    b7e8:	22a2      	movs	r2, #162	; 0xa2
    b7ea:	0052      	lsls	r2, r2, #1
    b7ec:	18ba      	adds	r2, r7, r2
    b7ee:	6013      	str	r3, [r2, #0]

        // If first call, use crc32_cal. If subsequent calls, use crc32_recalculate
        // But simpler is to do:
        if (crcVal == 0) {
    b7f0:	693b      	ldr	r3, [r7, #16]
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	d111      	bne.n	b81a <compute_file_crc32+0xe6>
            // first block
            if (crc32_calculate(buffer, bytesRead, &crcVal) != STATUS_OK) {
    b7f6:	6979      	ldr	r1, [r7, #20]
    b7f8:	2310      	movs	r3, #16
    b7fa:	18fa      	adds	r2, r7, r3
    b7fc:	2318      	movs	r3, #24
    b7fe:	18fb      	adds	r3, r7, r3
    b800:	0018      	movs	r0, r3
    b802:	4b1c      	ldr	r3, [pc, #112]	; (b874 <compute_file_crc32+0x140>)
    b804:	4798      	blx	r3
    b806:	1e03      	subs	r3, r0, #0
    b808:	d019      	beq.n	b83e <compute_file_crc32+0x10a>
                f_close(&fp);
    b80a:	238c      	movs	r3, #140	; 0x8c
    b80c:	005b      	lsls	r3, r3, #1
    b80e:	18fb      	adds	r3, r7, r3
    b810:	0018      	movs	r0, r3
    b812:	4b17      	ldr	r3, [pc, #92]	; (b870 <compute_file_crc32+0x13c>)
    b814:	4798      	blx	r3
                return false;
    b816:	2300      	movs	r3, #0
    b818:	e021      	b.n	b85e <compute_file_crc32+0x12a>
            }
        } else {
            if (crc32_recalculate(buffer, bytesRead, &crcVal) != STATUS_OK) {
    b81a:	6979      	ldr	r1, [r7, #20]
    b81c:	2310      	movs	r3, #16
    b81e:	18fa      	adds	r2, r7, r3
    b820:	2318      	movs	r3, #24
    b822:	18fb      	adds	r3, r7, r3
    b824:	0018      	movs	r0, r3
    b826:	4b14      	ldr	r3, [pc, #80]	; (b878 <compute_file_crc32+0x144>)
    b828:	4798      	blx	r3
    b82a:	1e03      	subs	r3, r0, #0
    b82c:	d007      	beq.n	b83e <compute_file_crc32+0x10a>
                f_close(&fp);
    b82e:	238c      	movs	r3, #140	; 0x8c
    b830:	005b      	lsls	r3, r3, #1
    b832:	18fb      	adds	r3, r7, r3
    b834:	0018      	movs	r0, r3
    b836:	4b0e      	ldr	r3, [pc, #56]	; (b870 <compute_file_crc32+0x13c>)
    b838:	4798      	blx	r3
                return false;
    b83a:	2300      	movs	r3, #0
    b83c:	e00f      	b.n	b85e <compute_file_crc32+0x12a>
    while (remaining > 0) {
    b83e:	23a2      	movs	r3, #162	; 0xa2
    b840:	005b      	lsls	r3, r3, #1
    b842:	18fb      	adds	r3, r7, r3
    b844:	681b      	ldr	r3, [r3, #0]
    b846:	2b00      	cmp	r3, #0
    b848:	d197      	bne.n	b77a <compute_file_crc32+0x46>
            }
        }
    }

    f_close(&fp);
    b84a:	238c      	movs	r3, #140	; 0x8c
    b84c:	005b      	lsls	r3, r3, #1
    b84e:	18fb      	adds	r3, r7, r3
    b850:	0018      	movs	r0, r3
    b852:	4b07      	ldr	r3, [pc, #28]	; (b870 <compute_file_crc32+0x13c>)
    b854:	4798      	blx	r3
    *outCrc = crcVal;
    b856:	693a      	ldr	r2, [r7, #16]
    b858:	687b      	ldr	r3, [r7, #4]
    b85a:	601a      	str	r2, [r3, #0]
    return true;
    b85c:	2301      	movs	r3, #1
}
    b85e:	0018      	movs	r0, r3
    b860:	46bd      	mov	sp, r7
    b862:	b052      	add	sp, #328	; 0x148
    b864:	bdb0      	pop	{r4, r5, r7, pc}
    b866:	46c0      	nop			; (mov r8, r8)
    b868:	000099bd 	.word	0x000099bd
    b86c:	00009eed 	.word	0x00009eed
    b870:	0000a659 	.word	0x0000a659
    b874:	0000ad25 	.word	0x0000ad25
    b878:	0000024d 	.word	0x0000024d

0000b87c <LoadFirmwareFromSDtoFlash>:
 *          application region of Flash starting at APP_START_ADDRESS.
 * @param   binFilename The path to the .bin file on SD (e.g. "0:TestA.bin")
 * @return  true if the write is successful, false otherwise
 */
static bool LoadFirmwareFromSDtoFlash(const char *binFilename)
{
    b87c:	b5b0      	push	{r4, r5, r7, lr}
    b87e:	b0d2      	sub	sp, #328	; 0x148
    b880:	af00      	add	r7, sp, #0
    b882:	6078      	str	r0, [r7, #4]
    FRESULT res;
    FIL binFile;
    uint32_t currentAddr = APP_START_ADDRESS;
    b884:	23f0      	movs	r3, #240	; 0xf0
    b886:	021b      	lsls	r3, r3, #8
    b888:	22a2      	movs	r2, #162	; 0xa2
    b88a:	0052      	lsls	r2, r2, #1
    b88c:	18ba      	adds	r2, r7, r2
    b88e:	6013      	str	r3, [r2, #0]
    UINT bytesRead = 0;
    b890:	2300      	movs	r3, #0
    b892:	2284      	movs	r2, #132	; 0x84
    b894:	0052      	lsls	r2, r2, #1
    b896:	18ba      	adds	r2, r7, r2
    b898:	6013      	str	r3, [r2, #0]
    uint8_t buffer[FLASH_ROW_SIZE];  // 256-byte buffer for row write
    bool updateSuccess = true;
    b89a:	2344      	movs	r3, #68	; 0x44
    b89c:	33ff      	adds	r3, #255	; 0xff
    b89e:	18fb      	adds	r3, r7, r3
    b8a0:	2201      	movs	r2, #1
    b8a2:	701a      	strb	r2, [r3, #0]

    // Open the .bin file
    res = f_open(&binFile, binFilename, FA_READ);
    b8a4:	233c      	movs	r3, #60	; 0x3c
    b8a6:	33ff      	adds	r3, #255	; 0xff
    b8a8:	18fc      	adds	r4, r7, r3
    b8aa:	6879      	ldr	r1, [r7, #4]
    b8ac:	2386      	movs	r3, #134	; 0x86
    b8ae:	005b      	lsls	r3, r3, #1
    b8b0:	18fb      	adds	r3, r7, r3
    b8b2:	2201      	movs	r2, #1
    b8b4:	0018      	movs	r0, r3
    b8b6:	4b6e      	ldr	r3, [pc, #440]	; (ba70 <LoadFirmwareFromSDtoFlash+0x1f4>)
    b8b8:	4798      	blx	r3
    b8ba:	0003      	movs	r3, r0
    b8bc:	7023      	strb	r3, [r4, #0]
    if (res != FR_OK) {
    b8be:	233c      	movs	r3, #60	; 0x3c
    b8c0:	33ff      	adds	r3, #255	; 0xff
    b8c2:	18fb      	adds	r3, r7, r3
    b8c4:	781b      	ldrb	r3, [r3, #0]
    b8c6:	2b00      	cmp	r3, #0
    b8c8:	d005      	beq.n	b8d6 <LoadFirmwareFromSDtoFlash+0x5a>
        SerialConsoleWriteString("Error opening bin file!\r\n");
    b8ca:	4b6a      	ldr	r3, [pc, #424]	; (ba74 <LoadFirmwareFromSDtoFlash+0x1f8>)
    b8cc:	0018      	movs	r0, r3
    b8ce:	4b6a      	ldr	r3, [pc, #424]	; (ba78 <LoadFirmwareFromSDtoFlash+0x1fc>)
    b8d0:	4798      	blx	r3
        return false;
    b8d2:	2300      	movs	r3, #0
    b8d4:	e0c7      	b.n	ba66 <LoadFirmwareFromSDtoFlash+0x1ea>
    }

    SerialConsoleWriteString("Starting firmware update...\r\n");
    b8d6:	4b69      	ldr	r3, [pc, #420]	; (ba7c <LoadFirmwareFromSDtoFlash+0x200>)
    b8d8:	0018      	movs	r0, r3
    b8da:	4b67      	ldr	r3, [pc, #412]	; (ba78 <LoadFirmwareFromSDtoFlash+0x1fc>)
    b8dc:	4798      	blx	r3

    // Optionally, you could erase the entire application area here if needed.
    // Simplified: erase each row before writing it.
    while (1) {
        // Read 256 bytes
        memset(buffer, 0xFF, FLASH_ROW_SIZE);
    b8de:	2380      	movs	r3, #128	; 0x80
    b8e0:	005a      	lsls	r2, r3, #1
    b8e2:	2308      	movs	r3, #8
    b8e4:	18fb      	adds	r3, r7, r3
    b8e6:	21ff      	movs	r1, #255	; 0xff
    b8e8:	0018      	movs	r0, r3
    b8ea:	4b65      	ldr	r3, [pc, #404]	; (ba80 <LoadFirmwareFromSDtoFlash+0x204>)
    b8ec:	4798      	blx	r3
        res = f_read(&binFile, buffer, FLASH_ROW_SIZE, &bytesRead);
    b8ee:	233c      	movs	r3, #60	; 0x3c
    b8f0:	33ff      	adds	r3, #255	; 0xff
    b8f2:	18fc      	adds	r4, r7, r3
    b8f4:	2384      	movs	r3, #132	; 0x84
    b8f6:	005b      	lsls	r3, r3, #1
    b8f8:	18fd      	adds	r5, r7, r3
    b8fa:	2380      	movs	r3, #128	; 0x80
    b8fc:	005a      	lsls	r2, r3, #1
    b8fe:	2308      	movs	r3, #8
    b900:	18f9      	adds	r1, r7, r3
    b902:	2386      	movs	r3, #134	; 0x86
    b904:	005b      	lsls	r3, r3, #1
    b906:	18f8      	adds	r0, r7, r3
    b908:	002b      	movs	r3, r5
    b90a:	4d5e      	ldr	r5, [pc, #376]	; (ba84 <LoadFirmwareFromSDtoFlash+0x208>)
    b90c:	47a8      	blx	r5
    b90e:	0003      	movs	r3, r0
    b910:	7023      	strb	r3, [r4, #0]
        if ((res != FR_OK) || (bytesRead == 0)) {
    b912:	233c      	movs	r3, #60	; 0x3c
    b914:	33ff      	adds	r3, #255	; 0xff
    b916:	18fb      	adds	r3, r7, r3
    b918:	781b      	ldrb	r3, [r3, #0]
    b91a:	2b00      	cmp	r3, #0
    b91c:	d000      	beq.n	b920 <LoadFirmwareFromSDtoFlash+0xa4>
    b91e:	e089      	b.n	ba34 <LoadFirmwareFromSDtoFlash+0x1b8>
    b920:	2384      	movs	r3, #132	; 0x84
    b922:	005b      	lsls	r3, r3, #1
    b924:	18fb      	adds	r3, r7, r3
    b926:	681b      	ldr	r3, [r3, #0]
    b928:	2b00      	cmp	r3, #0
    b92a:	d100      	bne.n	b92e <LoadFirmwareFromSDtoFlash+0xb2>
    b92c:	e082      	b.n	ba34 <LoadFirmwareFromSDtoFlash+0x1b8>
            // Error occurred or reached the end of the file
            break;
        }

        // Erase the corresponding flash row (one row = 256 bytes)
        enum status_code eraseRet = nvm_erase_row(currentAddr);
    b92e:	239d      	movs	r3, #157	; 0x9d
    b930:	005b      	lsls	r3, r3, #1
    b932:	18fc      	adds	r4, r7, r3
    b934:	23a2      	movs	r3, #162	; 0xa2
    b936:	005b      	lsls	r3, r3, #1
    b938:	18fb      	adds	r3, r7, r3
    b93a:	681b      	ldr	r3, [r3, #0]
    b93c:	0018      	movs	r0, r3
    b93e:	4b52      	ldr	r3, [pc, #328]	; (ba88 <LoadFirmwareFromSDtoFlash+0x20c>)
    b940:	4798      	blx	r3
    b942:	0003      	movs	r3, r0
    b944:	7023      	strb	r3, [r4, #0]
        if (eraseRet != STATUS_OK) {
    b946:	239d      	movs	r3, #157	; 0x9d
    b948:	005b      	lsls	r3, r3, #1
    b94a:	18fb      	adds	r3, r7, r3
    b94c:	781b      	ldrb	r3, [r3, #0]
    b94e:	2b00      	cmp	r3, #0
    b950:	d009      	beq.n	b966 <LoadFirmwareFromSDtoFlash+0xea>
            SerialConsoleWriteString("Error erasing row!\r\n");
    b952:	4b4e      	ldr	r3, [pc, #312]	; (ba8c <LoadFirmwareFromSDtoFlash+0x210>)
    b954:	0018      	movs	r0, r3
    b956:	4b48      	ldr	r3, [pc, #288]	; (ba78 <LoadFirmwareFromSDtoFlash+0x1fc>)
    b958:	4798      	blx	r3
            updateSuccess = false;
    b95a:	2344      	movs	r3, #68	; 0x44
    b95c:	33ff      	adds	r3, #255	; 0xff
    b95e:	18fb      	adds	r3, r7, r3
    b960:	2200      	movs	r2, #0
    b962:	701a      	strb	r2, [r3, #0]
            break;
    b964:	e066      	b.n	ba34 <LoadFirmwareFromSDtoFlash+0x1b8>
        }

        // On SAMD21, write operations are typically performed in pages (64 bytes each)
        // Divide the row into 4 pages and write each page
        for (uint32_t i = 0; i < (FLASH_ROW_SIZE / FLASH_PAGE_SIZE); i++) {
    b966:	2300      	movs	r3, #0
    b968:	229e      	movs	r2, #158	; 0x9e
    b96a:	0052      	lsls	r2, r2, #1
    b96c:	18ba      	adds	r2, r7, r2
    b96e:	6013      	str	r3, [r2, #0]
    b970:	e03a      	b.n	b9e8 <LoadFirmwareFromSDtoFlash+0x16c>
            uint32_t offset = i * FLASH_PAGE_SIZE;
    b972:	239e      	movs	r3, #158	; 0x9e
    b974:	005b      	lsls	r3, r3, #1
    b976:	18fb      	adds	r3, r7, r3
    b978:	681b      	ldr	r3, [r3, #0]
    b97a:	019b      	lsls	r3, r3, #6
    b97c:	229a      	movs	r2, #154	; 0x9a
    b97e:	0052      	lsls	r2, r2, #1
    b980:	18ba      	adds	r2, r7, r2
    b982:	6013      	str	r3, [r2, #0]
            enum status_code writeRet = nvm_write_buffer(currentAddr + offset, &buffer[offset], FLASH_PAGE_SIZE);
    b984:	23a2      	movs	r3, #162	; 0xa2
    b986:	005b      	lsls	r3, r3, #1
    b988:	18fb      	adds	r3, r7, r3
    b98a:	681a      	ldr	r2, [r3, #0]
    b98c:	239a      	movs	r3, #154	; 0x9a
    b98e:	005b      	lsls	r3, r3, #1
    b990:	18fb      	adds	r3, r7, r3
    b992:	681b      	ldr	r3, [r3, #0]
    b994:	18d0      	adds	r0, r2, r3
    b996:	2308      	movs	r3, #8
    b998:	18fa      	adds	r2, r7, r3
    b99a:	239a      	movs	r3, #154	; 0x9a
    b99c:	005b      	lsls	r3, r3, #1
    b99e:	18fb      	adds	r3, r7, r3
    b9a0:	681b      	ldr	r3, [r3, #0]
    b9a2:	18d3      	adds	r3, r2, r3
    b9a4:	2234      	movs	r2, #52	; 0x34
    b9a6:	32ff      	adds	r2, #255	; 0xff
    b9a8:	18bc      	adds	r4, r7, r2
    b9aa:	2240      	movs	r2, #64	; 0x40
    b9ac:	0019      	movs	r1, r3
    b9ae:	4b38      	ldr	r3, [pc, #224]	; (ba90 <LoadFirmwareFromSDtoFlash+0x214>)
    b9b0:	4798      	blx	r3
    b9b2:	0003      	movs	r3, r0
    b9b4:	7023      	strb	r3, [r4, #0]
            if (writeRet != STATUS_OK) {
    b9b6:	2334      	movs	r3, #52	; 0x34
    b9b8:	33ff      	adds	r3, #255	; 0xff
    b9ba:	18fb      	adds	r3, r7, r3
    b9bc:	781b      	ldrb	r3, [r3, #0]
    b9be:	2b00      	cmp	r3, #0
    b9c0:	d009      	beq.n	b9d6 <LoadFirmwareFromSDtoFlash+0x15a>
                SerialConsoleWriteString("Error writing page!\r\n");
    b9c2:	4b34      	ldr	r3, [pc, #208]	; (ba94 <LoadFirmwareFromSDtoFlash+0x218>)
    b9c4:	0018      	movs	r0, r3
    b9c6:	4b2c      	ldr	r3, [pc, #176]	; (ba78 <LoadFirmwareFromSDtoFlash+0x1fc>)
    b9c8:	4798      	blx	r3
                updateSuccess = false;
    b9ca:	2344      	movs	r3, #68	; 0x44
    b9cc:	33ff      	adds	r3, #255	; 0xff
    b9ce:	18fb      	adds	r3, r7, r3
    b9d0:	2200      	movs	r2, #0
    b9d2:	701a      	strb	r2, [r3, #0]
                break;
    b9d4:	e00e      	b.n	b9f4 <LoadFirmwareFromSDtoFlash+0x178>
        for (uint32_t i = 0; i < (FLASH_ROW_SIZE / FLASH_PAGE_SIZE); i++) {
    b9d6:	239e      	movs	r3, #158	; 0x9e
    b9d8:	005b      	lsls	r3, r3, #1
    b9da:	18fb      	adds	r3, r7, r3
    b9dc:	681b      	ldr	r3, [r3, #0]
    b9de:	3301      	adds	r3, #1
    b9e0:	229e      	movs	r2, #158	; 0x9e
    b9e2:	0052      	lsls	r2, r2, #1
    b9e4:	18ba      	adds	r2, r7, r2
    b9e6:	6013      	str	r3, [r2, #0]
    b9e8:	239e      	movs	r3, #158	; 0x9e
    b9ea:	005b      	lsls	r3, r3, #1
    b9ec:	18fb      	adds	r3, r7, r3
    b9ee:	681b      	ldr	r3, [r3, #0]
    b9f0:	2b03      	cmp	r3, #3
    b9f2:	d9be      	bls.n	b972 <LoadFirmwareFromSDtoFlash+0xf6>
            }
        }

        if (!updateSuccess) {
    b9f4:	2344      	movs	r3, #68	; 0x44
    b9f6:	33ff      	adds	r3, #255	; 0xff
    b9f8:	18fb      	adds	r3, r7, r3
    b9fa:	781b      	ldrb	r3, [r3, #0]
    b9fc:	2201      	movs	r2, #1
    b9fe:	4053      	eors	r3, r2
    ba00:	b2db      	uxtb	r3, r3
    ba02:	2b00      	cmp	r3, #0
    ba04:	d113      	bne.n	ba2e <LoadFirmwareFromSDtoFlash+0x1b2>
            break;
        }

        currentAddr += bytesRead;
    ba06:	2384      	movs	r3, #132	; 0x84
    ba08:	005b      	lsls	r3, r3, #1
    ba0a:	18fb      	adds	r3, r7, r3
    ba0c:	681b      	ldr	r3, [r3, #0]
    ba0e:	22a2      	movs	r2, #162	; 0xa2
    ba10:	0052      	lsls	r2, r2, #1
    ba12:	18ba      	adds	r2, r7, r2
    ba14:	6812      	ldr	r2, [r2, #0]
    ba16:	18d3      	adds	r3, r2, r3
    ba18:	22a2      	movs	r2, #162	; 0xa2
    ba1a:	0052      	lsls	r2, r2, #1
    ba1c:	18ba      	adds	r2, r7, r2
    ba1e:	6013      	str	r3, [r2, #0]

        // If the number of bytes read is less than 256, then the end of the file has been reached.
        if (bytesRead < FLASH_ROW_SIZE) {
    ba20:	2384      	movs	r3, #132	; 0x84
    ba22:	005b      	lsls	r3, r3, #1
    ba24:	18fb      	adds	r3, r7, r3
    ba26:	681b      	ldr	r3, [r3, #0]
    ba28:	2bff      	cmp	r3, #255	; 0xff
    ba2a:	d902      	bls.n	ba32 <LoadFirmwareFromSDtoFlash+0x1b6>
    while (1) {
    ba2c:	e757      	b.n	b8de <LoadFirmwareFromSDtoFlash+0x62>
            break;
    ba2e:	46c0      	nop			; (mov r8, r8)
    ba30:	e000      	b.n	ba34 <LoadFirmwareFromSDtoFlash+0x1b8>
            break;
    ba32:	46c0      	nop			; (mov r8, r8)
        }
    }

    f_close(&binFile);
    ba34:	2386      	movs	r3, #134	; 0x86
    ba36:	005b      	lsls	r3, r3, #1
    ba38:	18fb      	adds	r3, r7, r3
    ba3a:	0018      	movs	r0, r3
    ba3c:	4b16      	ldr	r3, [pc, #88]	; (ba98 <LoadFirmwareFromSDtoFlash+0x21c>)
    ba3e:	4798      	blx	r3

    if (updateSuccess) {
    ba40:	2344      	movs	r3, #68	; 0x44
    ba42:	33ff      	adds	r3, #255	; 0xff
    ba44:	18fb      	adds	r3, r7, r3
    ba46:	781b      	ldrb	r3, [r3, #0]
    ba48:	2b00      	cmp	r3, #0
    ba4a:	d004      	beq.n	ba56 <LoadFirmwareFromSDtoFlash+0x1da>
        SerialConsoleWriteString("Firmware update done!\r\n");
    ba4c:	4b13      	ldr	r3, [pc, #76]	; (ba9c <LoadFirmwareFromSDtoFlash+0x220>)
    ba4e:	0018      	movs	r0, r3
    ba50:	4b09      	ldr	r3, [pc, #36]	; (ba78 <LoadFirmwareFromSDtoFlash+0x1fc>)
    ba52:	4798      	blx	r3
    ba54:	e003      	b.n	ba5e <LoadFirmwareFromSDtoFlash+0x1e2>
    } else {
        SerialConsoleWriteString("Firmware update failed!\r\n");
    ba56:	4b12      	ldr	r3, [pc, #72]	; (baa0 <LoadFirmwareFromSDtoFlash+0x224>)
    ba58:	0018      	movs	r0, r3
    ba5a:	4b07      	ldr	r3, [pc, #28]	; (ba78 <LoadFirmwareFromSDtoFlash+0x1fc>)
    ba5c:	4798      	blx	r3
    }

    return updateSuccess;
    ba5e:	2344      	movs	r3, #68	; 0x44
    ba60:	33ff      	adds	r3, #255	; 0xff
    ba62:	18fb      	adds	r3, r7, r3
    ba64:	781b      	ldrb	r3, [r3, #0]
}
    ba66:	0018      	movs	r0, r3
    ba68:	46bd      	mov	sp, r7
    ba6a:	b052      	add	sp, #328	; 0x148
    ba6c:	bdb0      	pop	{r4, r5, r7, pc}
    ba6e:	46c0      	nop			; (mov r8, r8)
    ba70:	000099bd 	.word	0x000099bd
    ba74:	0000dad0 	.word	0x0000dad0
    ba78:	00000ea9 	.word	0x00000ea9
    ba7c:	0000daec 	.word	0x0000daec
    ba80:	0000be53 	.word	0x0000be53
    ba84:	00009eed 	.word	0x00009eed
    ba88:	00000855 	.word	0x00000855
    ba8c:	0000da58 	.word	0x0000da58
    ba90:	00000709 	.word	0x00000709
    ba94:	0000da70 	.word	0x0000da70
    ba98:	0000a659 	.word	0x0000a659
    ba9c:	0000db0c 	.word	0x0000db0c
    baa0:	0000db24 	.word	0x0000db24

0000baa4 <__udivsi3>:
    baa4:	2200      	movs	r2, #0
    baa6:	0843      	lsrs	r3, r0, #1
    baa8:	428b      	cmp	r3, r1
    baaa:	d374      	bcc.n	bb96 <__udivsi3+0xf2>
    baac:	0903      	lsrs	r3, r0, #4
    baae:	428b      	cmp	r3, r1
    bab0:	d35f      	bcc.n	bb72 <__udivsi3+0xce>
    bab2:	0a03      	lsrs	r3, r0, #8
    bab4:	428b      	cmp	r3, r1
    bab6:	d344      	bcc.n	bb42 <__udivsi3+0x9e>
    bab8:	0b03      	lsrs	r3, r0, #12
    baba:	428b      	cmp	r3, r1
    babc:	d328      	bcc.n	bb10 <__udivsi3+0x6c>
    babe:	0c03      	lsrs	r3, r0, #16
    bac0:	428b      	cmp	r3, r1
    bac2:	d30d      	bcc.n	bae0 <__udivsi3+0x3c>
    bac4:	22ff      	movs	r2, #255	; 0xff
    bac6:	0209      	lsls	r1, r1, #8
    bac8:	ba12      	rev	r2, r2
    baca:	0c03      	lsrs	r3, r0, #16
    bacc:	428b      	cmp	r3, r1
    bace:	d302      	bcc.n	bad6 <__udivsi3+0x32>
    bad0:	1212      	asrs	r2, r2, #8
    bad2:	0209      	lsls	r1, r1, #8
    bad4:	d065      	beq.n	bba2 <__udivsi3+0xfe>
    bad6:	0b03      	lsrs	r3, r0, #12
    bad8:	428b      	cmp	r3, r1
    bada:	d319      	bcc.n	bb10 <__udivsi3+0x6c>
    badc:	e000      	b.n	bae0 <__udivsi3+0x3c>
    bade:	0a09      	lsrs	r1, r1, #8
    bae0:	0bc3      	lsrs	r3, r0, #15
    bae2:	428b      	cmp	r3, r1
    bae4:	d301      	bcc.n	baea <__udivsi3+0x46>
    bae6:	03cb      	lsls	r3, r1, #15
    bae8:	1ac0      	subs	r0, r0, r3
    baea:	4152      	adcs	r2, r2
    baec:	0b83      	lsrs	r3, r0, #14
    baee:	428b      	cmp	r3, r1
    baf0:	d301      	bcc.n	baf6 <__udivsi3+0x52>
    baf2:	038b      	lsls	r3, r1, #14
    baf4:	1ac0      	subs	r0, r0, r3
    baf6:	4152      	adcs	r2, r2
    baf8:	0b43      	lsrs	r3, r0, #13
    bafa:	428b      	cmp	r3, r1
    bafc:	d301      	bcc.n	bb02 <__udivsi3+0x5e>
    bafe:	034b      	lsls	r3, r1, #13
    bb00:	1ac0      	subs	r0, r0, r3
    bb02:	4152      	adcs	r2, r2
    bb04:	0b03      	lsrs	r3, r0, #12
    bb06:	428b      	cmp	r3, r1
    bb08:	d301      	bcc.n	bb0e <__udivsi3+0x6a>
    bb0a:	030b      	lsls	r3, r1, #12
    bb0c:	1ac0      	subs	r0, r0, r3
    bb0e:	4152      	adcs	r2, r2
    bb10:	0ac3      	lsrs	r3, r0, #11
    bb12:	428b      	cmp	r3, r1
    bb14:	d301      	bcc.n	bb1a <__udivsi3+0x76>
    bb16:	02cb      	lsls	r3, r1, #11
    bb18:	1ac0      	subs	r0, r0, r3
    bb1a:	4152      	adcs	r2, r2
    bb1c:	0a83      	lsrs	r3, r0, #10
    bb1e:	428b      	cmp	r3, r1
    bb20:	d301      	bcc.n	bb26 <__udivsi3+0x82>
    bb22:	028b      	lsls	r3, r1, #10
    bb24:	1ac0      	subs	r0, r0, r3
    bb26:	4152      	adcs	r2, r2
    bb28:	0a43      	lsrs	r3, r0, #9
    bb2a:	428b      	cmp	r3, r1
    bb2c:	d301      	bcc.n	bb32 <__udivsi3+0x8e>
    bb2e:	024b      	lsls	r3, r1, #9
    bb30:	1ac0      	subs	r0, r0, r3
    bb32:	4152      	adcs	r2, r2
    bb34:	0a03      	lsrs	r3, r0, #8
    bb36:	428b      	cmp	r3, r1
    bb38:	d301      	bcc.n	bb3e <__udivsi3+0x9a>
    bb3a:	020b      	lsls	r3, r1, #8
    bb3c:	1ac0      	subs	r0, r0, r3
    bb3e:	4152      	adcs	r2, r2
    bb40:	d2cd      	bcs.n	bade <__udivsi3+0x3a>
    bb42:	09c3      	lsrs	r3, r0, #7
    bb44:	428b      	cmp	r3, r1
    bb46:	d301      	bcc.n	bb4c <__udivsi3+0xa8>
    bb48:	01cb      	lsls	r3, r1, #7
    bb4a:	1ac0      	subs	r0, r0, r3
    bb4c:	4152      	adcs	r2, r2
    bb4e:	0983      	lsrs	r3, r0, #6
    bb50:	428b      	cmp	r3, r1
    bb52:	d301      	bcc.n	bb58 <__udivsi3+0xb4>
    bb54:	018b      	lsls	r3, r1, #6
    bb56:	1ac0      	subs	r0, r0, r3
    bb58:	4152      	adcs	r2, r2
    bb5a:	0943      	lsrs	r3, r0, #5
    bb5c:	428b      	cmp	r3, r1
    bb5e:	d301      	bcc.n	bb64 <__udivsi3+0xc0>
    bb60:	014b      	lsls	r3, r1, #5
    bb62:	1ac0      	subs	r0, r0, r3
    bb64:	4152      	adcs	r2, r2
    bb66:	0903      	lsrs	r3, r0, #4
    bb68:	428b      	cmp	r3, r1
    bb6a:	d301      	bcc.n	bb70 <__udivsi3+0xcc>
    bb6c:	010b      	lsls	r3, r1, #4
    bb6e:	1ac0      	subs	r0, r0, r3
    bb70:	4152      	adcs	r2, r2
    bb72:	08c3      	lsrs	r3, r0, #3
    bb74:	428b      	cmp	r3, r1
    bb76:	d301      	bcc.n	bb7c <__udivsi3+0xd8>
    bb78:	00cb      	lsls	r3, r1, #3
    bb7a:	1ac0      	subs	r0, r0, r3
    bb7c:	4152      	adcs	r2, r2
    bb7e:	0883      	lsrs	r3, r0, #2
    bb80:	428b      	cmp	r3, r1
    bb82:	d301      	bcc.n	bb88 <__udivsi3+0xe4>
    bb84:	008b      	lsls	r3, r1, #2
    bb86:	1ac0      	subs	r0, r0, r3
    bb88:	4152      	adcs	r2, r2
    bb8a:	0843      	lsrs	r3, r0, #1
    bb8c:	428b      	cmp	r3, r1
    bb8e:	d301      	bcc.n	bb94 <__udivsi3+0xf0>
    bb90:	004b      	lsls	r3, r1, #1
    bb92:	1ac0      	subs	r0, r0, r3
    bb94:	4152      	adcs	r2, r2
    bb96:	1a41      	subs	r1, r0, r1
    bb98:	d200      	bcs.n	bb9c <__udivsi3+0xf8>
    bb9a:	4601      	mov	r1, r0
    bb9c:	4152      	adcs	r2, r2
    bb9e:	4610      	mov	r0, r2
    bba0:	4770      	bx	lr
    bba2:	e7ff      	b.n	bba4 <__udivsi3+0x100>
    bba4:	b501      	push	{r0, lr}
    bba6:	2000      	movs	r0, #0
    bba8:	f000 f8f0 	bl	bd8c <__aeabi_idiv0>
    bbac:	bd02      	pop	{r1, pc}
    bbae:	46c0      	nop			; (mov r8, r8)

0000bbb0 <__aeabi_uidivmod>:
    bbb0:	2900      	cmp	r1, #0
    bbb2:	d0f7      	beq.n	bba4 <__udivsi3+0x100>
    bbb4:	e776      	b.n	baa4 <__udivsi3>
    bbb6:	4770      	bx	lr

0000bbb8 <__divsi3>:
    bbb8:	4603      	mov	r3, r0
    bbba:	430b      	orrs	r3, r1
    bbbc:	d47f      	bmi.n	bcbe <__divsi3+0x106>
    bbbe:	2200      	movs	r2, #0
    bbc0:	0843      	lsrs	r3, r0, #1
    bbc2:	428b      	cmp	r3, r1
    bbc4:	d374      	bcc.n	bcb0 <__divsi3+0xf8>
    bbc6:	0903      	lsrs	r3, r0, #4
    bbc8:	428b      	cmp	r3, r1
    bbca:	d35f      	bcc.n	bc8c <__divsi3+0xd4>
    bbcc:	0a03      	lsrs	r3, r0, #8
    bbce:	428b      	cmp	r3, r1
    bbd0:	d344      	bcc.n	bc5c <__divsi3+0xa4>
    bbd2:	0b03      	lsrs	r3, r0, #12
    bbd4:	428b      	cmp	r3, r1
    bbd6:	d328      	bcc.n	bc2a <__divsi3+0x72>
    bbd8:	0c03      	lsrs	r3, r0, #16
    bbda:	428b      	cmp	r3, r1
    bbdc:	d30d      	bcc.n	bbfa <__divsi3+0x42>
    bbde:	22ff      	movs	r2, #255	; 0xff
    bbe0:	0209      	lsls	r1, r1, #8
    bbe2:	ba12      	rev	r2, r2
    bbe4:	0c03      	lsrs	r3, r0, #16
    bbe6:	428b      	cmp	r3, r1
    bbe8:	d302      	bcc.n	bbf0 <__divsi3+0x38>
    bbea:	1212      	asrs	r2, r2, #8
    bbec:	0209      	lsls	r1, r1, #8
    bbee:	d065      	beq.n	bcbc <__divsi3+0x104>
    bbf0:	0b03      	lsrs	r3, r0, #12
    bbf2:	428b      	cmp	r3, r1
    bbf4:	d319      	bcc.n	bc2a <__divsi3+0x72>
    bbf6:	e000      	b.n	bbfa <__divsi3+0x42>
    bbf8:	0a09      	lsrs	r1, r1, #8
    bbfa:	0bc3      	lsrs	r3, r0, #15
    bbfc:	428b      	cmp	r3, r1
    bbfe:	d301      	bcc.n	bc04 <__divsi3+0x4c>
    bc00:	03cb      	lsls	r3, r1, #15
    bc02:	1ac0      	subs	r0, r0, r3
    bc04:	4152      	adcs	r2, r2
    bc06:	0b83      	lsrs	r3, r0, #14
    bc08:	428b      	cmp	r3, r1
    bc0a:	d301      	bcc.n	bc10 <__divsi3+0x58>
    bc0c:	038b      	lsls	r3, r1, #14
    bc0e:	1ac0      	subs	r0, r0, r3
    bc10:	4152      	adcs	r2, r2
    bc12:	0b43      	lsrs	r3, r0, #13
    bc14:	428b      	cmp	r3, r1
    bc16:	d301      	bcc.n	bc1c <__divsi3+0x64>
    bc18:	034b      	lsls	r3, r1, #13
    bc1a:	1ac0      	subs	r0, r0, r3
    bc1c:	4152      	adcs	r2, r2
    bc1e:	0b03      	lsrs	r3, r0, #12
    bc20:	428b      	cmp	r3, r1
    bc22:	d301      	bcc.n	bc28 <__divsi3+0x70>
    bc24:	030b      	lsls	r3, r1, #12
    bc26:	1ac0      	subs	r0, r0, r3
    bc28:	4152      	adcs	r2, r2
    bc2a:	0ac3      	lsrs	r3, r0, #11
    bc2c:	428b      	cmp	r3, r1
    bc2e:	d301      	bcc.n	bc34 <__divsi3+0x7c>
    bc30:	02cb      	lsls	r3, r1, #11
    bc32:	1ac0      	subs	r0, r0, r3
    bc34:	4152      	adcs	r2, r2
    bc36:	0a83      	lsrs	r3, r0, #10
    bc38:	428b      	cmp	r3, r1
    bc3a:	d301      	bcc.n	bc40 <__divsi3+0x88>
    bc3c:	028b      	lsls	r3, r1, #10
    bc3e:	1ac0      	subs	r0, r0, r3
    bc40:	4152      	adcs	r2, r2
    bc42:	0a43      	lsrs	r3, r0, #9
    bc44:	428b      	cmp	r3, r1
    bc46:	d301      	bcc.n	bc4c <__divsi3+0x94>
    bc48:	024b      	lsls	r3, r1, #9
    bc4a:	1ac0      	subs	r0, r0, r3
    bc4c:	4152      	adcs	r2, r2
    bc4e:	0a03      	lsrs	r3, r0, #8
    bc50:	428b      	cmp	r3, r1
    bc52:	d301      	bcc.n	bc58 <__divsi3+0xa0>
    bc54:	020b      	lsls	r3, r1, #8
    bc56:	1ac0      	subs	r0, r0, r3
    bc58:	4152      	adcs	r2, r2
    bc5a:	d2cd      	bcs.n	bbf8 <__divsi3+0x40>
    bc5c:	09c3      	lsrs	r3, r0, #7
    bc5e:	428b      	cmp	r3, r1
    bc60:	d301      	bcc.n	bc66 <__divsi3+0xae>
    bc62:	01cb      	lsls	r3, r1, #7
    bc64:	1ac0      	subs	r0, r0, r3
    bc66:	4152      	adcs	r2, r2
    bc68:	0983      	lsrs	r3, r0, #6
    bc6a:	428b      	cmp	r3, r1
    bc6c:	d301      	bcc.n	bc72 <__divsi3+0xba>
    bc6e:	018b      	lsls	r3, r1, #6
    bc70:	1ac0      	subs	r0, r0, r3
    bc72:	4152      	adcs	r2, r2
    bc74:	0943      	lsrs	r3, r0, #5
    bc76:	428b      	cmp	r3, r1
    bc78:	d301      	bcc.n	bc7e <__divsi3+0xc6>
    bc7a:	014b      	lsls	r3, r1, #5
    bc7c:	1ac0      	subs	r0, r0, r3
    bc7e:	4152      	adcs	r2, r2
    bc80:	0903      	lsrs	r3, r0, #4
    bc82:	428b      	cmp	r3, r1
    bc84:	d301      	bcc.n	bc8a <__divsi3+0xd2>
    bc86:	010b      	lsls	r3, r1, #4
    bc88:	1ac0      	subs	r0, r0, r3
    bc8a:	4152      	adcs	r2, r2
    bc8c:	08c3      	lsrs	r3, r0, #3
    bc8e:	428b      	cmp	r3, r1
    bc90:	d301      	bcc.n	bc96 <__divsi3+0xde>
    bc92:	00cb      	lsls	r3, r1, #3
    bc94:	1ac0      	subs	r0, r0, r3
    bc96:	4152      	adcs	r2, r2
    bc98:	0883      	lsrs	r3, r0, #2
    bc9a:	428b      	cmp	r3, r1
    bc9c:	d301      	bcc.n	bca2 <__divsi3+0xea>
    bc9e:	008b      	lsls	r3, r1, #2
    bca0:	1ac0      	subs	r0, r0, r3
    bca2:	4152      	adcs	r2, r2
    bca4:	0843      	lsrs	r3, r0, #1
    bca6:	428b      	cmp	r3, r1
    bca8:	d301      	bcc.n	bcae <__divsi3+0xf6>
    bcaa:	004b      	lsls	r3, r1, #1
    bcac:	1ac0      	subs	r0, r0, r3
    bcae:	4152      	adcs	r2, r2
    bcb0:	1a41      	subs	r1, r0, r1
    bcb2:	d200      	bcs.n	bcb6 <__divsi3+0xfe>
    bcb4:	4601      	mov	r1, r0
    bcb6:	4152      	adcs	r2, r2
    bcb8:	4610      	mov	r0, r2
    bcba:	4770      	bx	lr
    bcbc:	e05d      	b.n	bd7a <__divsi3+0x1c2>
    bcbe:	0fca      	lsrs	r2, r1, #31
    bcc0:	d000      	beq.n	bcc4 <__divsi3+0x10c>
    bcc2:	4249      	negs	r1, r1
    bcc4:	1003      	asrs	r3, r0, #32
    bcc6:	d300      	bcc.n	bcca <__divsi3+0x112>
    bcc8:	4240      	negs	r0, r0
    bcca:	4053      	eors	r3, r2
    bccc:	2200      	movs	r2, #0
    bcce:	469c      	mov	ip, r3
    bcd0:	0903      	lsrs	r3, r0, #4
    bcd2:	428b      	cmp	r3, r1
    bcd4:	d32d      	bcc.n	bd32 <__divsi3+0x17a>
    bcd6:	0a03      	lsrs	r3, r0, #8
    bcd8:	428b      	cmp	r3, r1
    bcda:	d312      	bcc.n	bd02 <__divsi3+0x14a>
    bcdc:	22fc      	movs	r2, #252	; 0xfc
    bcde:	0189      	lsls	r1, r1, #6
    bce0:	ba12      	rev	r2, r2
    bce2:	0a03      	lsrs	r3, r0, #8
    bce4:	428b      	cmp	r3, r1
    bce6:	d30c      	bcc.n	bd02 <__divsi3+0x14a>
    bce8:	0189      	lsls	r1, r1, #6
    bcea:	1192      	asrs	r2, r2, #6
    bcec:	428b      	cmp	r3, r1
    bcee:	d308      	bcc.n	bd02 <__divsi3+0x14a>
    bcf0:	0189      	lsls	r1, r1, #6
    bcf2:	1192      	asrs	r2, r2, #6
    bcf4:	428b      	cmp	r3, r1
    bcf6:	d304      	bcc.n	bd02 <__divsi3+0x14a>
    bcf8:	0189      	lsls	r1, r1, #6
    bcfa:	d03a      	beq.n	bd72 <__divsi3+0x1ba>
    bcfc:	1192      	asrs	r2, r2, #6
    bcfe:	e000      	b.n	bd02 <__divsi3+0x14a>
    bd00:	0989      	lsrs	r1, r1, #6
    bd02:	09c3      	lsrs	r3, r0, #7
    bd04:	428b      	cmp	r3, r1
    bd06:	d301      	bcc.n	bd0c <__divsi3+0x154>
    bd08:	01cb      	lsls	r3, r1, #7
    bd0a:	1ac0      	subs	r0, r0, r3
    bd0c:	4152      	adcs	r2, r2
    bd0e:	0983      	lsrs	r3, r0, #6
    bd10:	428b      	cmp	r3, r1
    bd12:	d301      	bcc.n	bd18 <__divsi3+0x160>
    bd14:	018b      	lsls	r3, r1, #6
    bd16:	1ac0      	subs	r0, r0, r3
    bd18:	4152      	adcs	r2, r2
    bd1a:	0943      	lsrs	r3, r0, #5
    bd1c:	428b      	cmp	r3, r1
    bd1e:	d301      	bcc.n	bd24 <__divsi3+0x16c>
    bd20:	014b      	lsls	r3, r1, #5
    bd22:	1ac0      	subs	r0, r0, r3
    bd24:	4152      	adcs	r2, r2
    bd26:	0903      	lsrs	r3, r0, #4
    bd28:	428b      	cmp	r3, r1
    bd2a:	d301      	bcc.n	bd30 <__divsi3+0x178>
    bd2c:	010b      	lsls	r3, r1, #4
    bd2e:	1ac0      	subs	r0, r0, r3
    bd30:	4152      	adcs	r2, r2
    bd32:	08c3      	lsrs	r3, r0, #3
    bd34:	428b      	cmp	r3, r1
    bd36:	d301      	bcc.n	bd3c <__divsi3+0x184>
    bd38:	00cb      	lsls	r3, r1, #3
    bd3a:	1ac0      	subs	r0, r0, r3
    bd3c:	4152      	adcs	r2, r2
    bd3e:	0883      	lsrs	r3, r0, #2
    bd40:	428b      	cmp	r3, r1
    bd42:	d301      	bcc.n	bd48 <__divsi3+0x190>
    bd44:	008b      	lsls	r3, r1, #2
    bd46:	1ac0      	subs	r0, r0, r3
    bd48:	4152      	adcs	r2, r2
    bd4a:	d2d9      	bcs.n	bd00 <__divsi3+0x148>
    bd4c:	0843      	lsrs	r3, r0, #1
    bd4e:	428b      	cmp	r3, r1
    bd50:	d301      	bcc.n	bd56 <__divsi3+0x19e>
    bd52:	004b      	lsls	r3, r1, #1
    bd54:	1ac0      	subs	r0, r0, r3
    bd56:	4152      	adcs	r2, r2
    bd58:	1a41      	subs	r1, r0, r1
    bd5a:	d200      	bcs.n	bd5e <__divsi3+0x1a6>
    bd5c:	4601      	mov	r1, r0
    bd5e:	4663      	mov	r3, ip
    bd60:	4152      	adcs	r2, r2
    bd62:	105b      	asrs	r3, r3, #1
    bd64:	4610      	mov	r0, r2
    bd66:	d301      	bcc.n	bd6c <__divsi3+0x1b4>
    bd68:	4240      	negs	r0, r0
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d500      	bpl.n	bd70 <__divsi3+0x1b8>
    bd6e:	4249      	negs	r1, r1
    bd70:	4770      	bx	lr
    bd72:	4663      	mov	r3, ip
    bd74:	105b      	asrs	r3, r3, #1
    bd76:	d300      	bcc.n	bd7a <__divsi3+0x1c2>
    bd78:	4240      	negs	r0, r0
    bd7a:	b501      	push	{r0, lr}
    bd7c:	2000      	movs	r0, #0
    bd7e:	f000 f805 	bl	bd8c <__aeabi_idiv0>
    bd82:	bd02      	pop	{r1, pc}

0000bd84 <__aeabi_idivmod>:
    bd84:	2900      	cmp	r1, #0
    bd86:	d0f8      	beq.n	bd7a <__divsi3+0x1c2>
    bd88:	e716      	b.n	bbb8 <__divsi3>
    bd8a:	4770      	bx	lr

0000bd8c <__aeabi_idiv0>:
    bd8c:	4770      	bx	lr
    bd8e:	46c0      	nop			; (mov r8, r8)

0000bd90 <__aeabi_lmul>:
    bd90:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd92:	46ce      	mov	lr, r9
    bd94:	4647      	mov	r7, r8
    bd96:	0415      	lsls	r5, r2, #16
    bd98:	0c2d      	lsrs	r5, r5, #16
    bd9a:	002e      	movs	r6, r5
    bd9c:	b580      	push	{r7, lr}
    bd9e:	0407      	lsls	r7, r0, #16
    bda0:	0c14      	lsrs	r4, r2, #16
    bda2:	0c3f      	lsrs	r7, r7, #16
    bda4:	4699      	mov	r9, r3
    bda6:	0c03      	lsrs	r3, r0, #16
    bda8:	437e      	muls	r6, r7
    bdaa:	435d      	muls	r5, r3
    bdac:	4367      	muls	r7, r4
    bdae:	4363      	muls	r3, r4
    bdb0:	197f      	adds	r7, r7, r5
    bdb2:	0c34      	lsrs	r4, r6, #16
    bdb4:	19e4      	adds	r4, r4, r7
    bdb6:	469c      	mov	ip, r3
    bdb8:	42a5      	cmp	r5, r4
    bdba:	d903      	bls.n	bdc4 <__aeabi_lmul+0x34>
    bdbc:	2380      	movs	r3, #128	; 0x80
    bdbe:	025b      	lsls	r3, r3, #9
    bdc0:	4698      	mov	r8, r3
    bdc2:	44c4      	add	ip, r8
    bdc4:	464b      	mov	r3, r9
    bdc6:	4351      	muls	r1, r2
    bdc8:	4343      	muls	r3, r0
    bdca:	0436      	lsls	r6, r6, #16
    bdcc:	0c36      	lsrs	r6, r6, #16
    bdce:	0c25      	lsrs	r5, r4, #16
    bdd0:	0424      	lsls	r4, r4, #16
    bdd2:	4465      	add	r5, ip
    bdd4:	19a4      	adds	r4, r4, r6
    bdd6:	1859      	adds	r1, r3, r1
    bdd8:	1949      	adds	r1, r1, r5
    bdda:	0020      	movs	r0, r4
    bddc:	bc0c      	pop	{r2, r3}
    bdde:	4690      	mov	r8, r2
    bde0:	4699      	mov	r9, r3
    bde2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bde4 <__libc_init_array>:
    bde4:	b570      	push	{r4, r5, r6, lr}
    bde6:	2600      	movs	r6, #0
    bde8:	4d0c      	ldr	r5, [pc, #48]	; (be1c <__libc_init_array+0x38>)
    bdea:	4c0d      	ldr	r4, [pc, #52]	; (be20 <__libc_init_array+0x3c>)
    bdec:	1b64      	subs	r4, r4, r5
    bdee:	10a4      	asrs	r4, r4, #2
    bdf0:	42a6      	cmp	r6, r4
    bdf2:	d109      	bne.n	be08 <__libc_init_array+0x24>
    bdf4:	2600      	movs	r6, #0
    bdf6:	f001 feef 	bl	dbd8 <_init>
    bdfa:	4d0a      	ldr	r5, [pc, #40]	; (be24 <__libc_init_array+0x40>)
    bdfc:	4c0a      	ldr	r4, [pc, #40]	; (be28 <__libc_init_array+0x44>)
    bdfe:	1b64      	subs	r4, r4, r5
    be00:	10a4      	asrs	r4, r4, #2
    be02:	42a6      	cmp	r6, r4
    be04:	d105      	bne.n	be12 <__libc_init_array+0x2e>
    be06:	bd70      	pop	{r4, r5, r6, pc}
    be08:	00b3      	lsls	r3, r6, #2
    be0a:	58eb      	ldr	r3, [r5, r3]
    be0c:	4798      	blx	r3
    be0e:	3601      	adds	r6, #1
    be10:	e7ee      	b.n	bdf0 <__libc_init_array+0xc>
    be12:	00b3      	lsls	r3, r6, #2
    be14:	58eb      	ldr	r3, [r5, r3]
    be16:	4798      	blx	r3
    be18:	3601      	adds	r6, #1
    be1a:	e7f2      	b.n	be02 <__libc_init_array+0x1e>
    be1c:	0000dbe4 	.word	0x0000dbe4
    be20:	0000dbe4 	.word	0x0000dbe4
    be24:	0000dbe4 	.word	0x0000dbe4
    be28:	0000dbe8 	.word	0x0000dbe8

0000be2c <malloc>:
    be2c:	b510      	push	{r4, lr}
    be2e:	4b03      	ldr	r3, [pc, #12]	; (be3c <malloc+0x10>)
    be30:	0001      	movs	r1, r0
    be32:	6818      	ldr	r0, [r3, #0]
    be34:	f000 f860 	bl	bef8 <_malloc_r>
    be38:	bd10      	pop	{r4, pc}
    be3a:	46c0      	nop			; (mov r8, r8)
    be3c:	20000030 	.word	0x20000030

0000be40 <memcpy>:
    be40:	2300      	movs	r3, #0
    be42:	b510      	push	{r4, lr}
    be44:	429a      	cmp	r2, r3
    be46:	d100      	bne.n	be4a <memcpy+0xa>
    be48:	bd10      	pop	{r4, pc}
    be4a:	5ccc      	ldrb	r4, [r1, r3]
    be4c:	54c4      	strb	r4, [r0, r3]
    be4e:	3301      	adds	r3, #1
    be50:	e7f8      	b.n	be44 <memcpy+0x4>

0000be52 <memset>:
    be52:	0003      	movs	r3, r0
    be54:	1882      	adds	r2, r0, r2
    be56:	4293      	cmp	r3, r2
    be58:	d100      	bne.n	be5c <memset+0xa>
    be5a:	4770      	bx	lr
    be5c:	7019      	strb	r1, [r3, #0]
    be5e:	3301      	adds	r3, #1
    be60:	e7f9      	b.n	be56 <memset+0x4>
	...

0000be64 <_free_r>:
    be64:	b570      	push	{r4, r5, r6, lr}
    be66:	0005      	movs	r5, r0
    be68:	2900      	cmp	r1, #0
    be6a:	d010      	beq.n	be8e <_free_r+0x2a>
    be6c:	1f0c      	subs	r4, r1, #4
    be6e:	6823      	ldr	r3, [r4, #0]
    be70:	2b00      	cmp	r3, #0
    be72:	da00      	bge.n	be76 <_free_r+0x12>
    be74:	18e4      	adds	r4, r4, r3
    be76:	0028      	movs	r0, r5
    be78:	f000 fb44 	bl	c504 <__malloc_lock>
    be7c:	4a1d      	ldr	r2, [pc, #116]	; (bef4 <_free_r+0x90>)
    be7e:	6813      	ldr	r3, [r2, #0]
    be80:	2b00      	cmp	r3, #0
    be82:	d105      	bne.n	be90 <_free_r+0x2c>
    be84:	6063      	str	r3, [r4, #4]
    be86:	6014      	str	r4, [r2, #0]
    be88:	0028      	movs	r0, r5
    be8a:	f000 fb3c 	bl	c506 <__malloc_unlock>
    be8e:	bd70      	pop	{r4, r5, r6, pc}
    be90:	42a3      	cmp	r3, r4
    be92:	d909      	bls.n	bea8 <_free_r+0x44>
    be94:	6821      	ldr	r1, [r4, #0]
    be96:	1860      	adds	r0, r4, r1
    be98:	4283      	cmp	r3, r0
    be9a:	d1f3      	bne.n	be84 <_free_r+0x20>
    be9c:	6818      	ldr	r0, [r3, #0]
    be9e:	685b      	ldr	r3, [r3, #4]
    bea0:	1841      	adds	r1, r0, r1
    bea2:	6021      	str	r1, [r4, #0]
    bea4:	e7ee      	b.n	be84 <_free_r+0x20>
    bea6:	0013      	movs	r3, r2
    bea8:	685a      	ldr	r2, [r3, #4]
    beaa:	2a00      	cmp	r2, #0
    beac:	d001      	beq.n	beb2 <_free_r+0x4e>
    beae:	42a2      	cmp	r2, r4
    beb0:	d9f9      	bls.n	bea6 <_free_r+0x42>
    beb2:	6819      	ldr	r1, [r3, #0]
    beb4:	1858      	adds	r0, r3, r1
    beb6:	42a0      	cmp	r0, r4
    beb8:	d10b      	bne.n	bed2 <_free_r+0x6e>
    beba:	6820      	ldr	r0, [r4, #0]
    bebc:	1809      	adds	r1, r1, r0
    bebe:	1858      	adds	r0, r3, r1
    bec0:	6019      	str	r1, [r3, #0]
    bec2:	4282      	cmp	r2, r0
    bec4:	d1e0      	bne.n	be88 <_free_r+0x24>
    bec6:	6810      	ldr	r0, [r2, #0]
    bec8:	6852      	ldr	r2, [r2, #4]
    beca:	1841      	adds	r1, r0, r1
    becc:	6019      	str	r1, [r3, #0]
    bece:	605a      	str	r2, [r3, #4]
    bed0:	e7da      	b.n	be88 <_free_r+0x24>
    bed2:	42a0      	cmp	r0, r4
    bed4:	d902      	bls.n	bedc <_free_r+0x78>
    bed6:	230c      	movs	r3, #12
    bed8:	602b      	str	r3, [r5, #0]
    beda:	e7d5      	b.n	be88 <_free_r+0x24>
    bedc:	6821      	ldr	r1, [r4, #0]
    bede:	1860      	adds	r0, r4, r1
    bee0:	4282      	cmp	r2, r0
    bee2:	d103      	bne.n	beec <_free_r+0x88>
    bee4:	6810      	ldr	r0, [r2, #0]
    bee6:	6852      	ldr	r2, [r2, #4]
    bee8:	1841      	adds	r1, r0, r1
    beea:	6021      	str	r1, [r4, #0]
    beec:	6062      	str	r2, [r4, #4]
    beee:	605c      	str	r4, [r3, #4]
    bef0:	e7ca      	b.n	be88 <_free_r+0x24>
    bef2:	46c0      	nop			; (mov r8, r8)
    bef4:	20000184 	.word	0x20000184

0000bef8 <_malloc_r>:
    bef8:	2303      	movs	r3, #3
    befa:	b570      	push	{r4, r5, r6, lr}
    befc:	1ccd      	adds	r5, r1, #3
    befe:	439d      	bics	r5, r3
    bf00:	3508      	adds	r5, #8
    bf02:	0006      	movs	r6, r0
    bf04:	2d0c      	cmp	r5, #12
    bf06:	d21e      	bcs.n	bf46 <_malloc_r+0x4e>
    bf08:	250c      	movs	r5, #12
    bf0a:	42a9      	cmp	r1, r5
    bf0c:	d81d      	bhi.n	bf4a <_malloc_r+0x52>
    bf0e:	0030      	movs	r0, r6
    bf10:	f000 faf8 	bl	c504 <__malloc_lock>
    bf14:	4a25      	ldr	r2, [pc, #148]	; (bfac <_malloc_r+0xb4>)
    bf16:	6814      	ldr	r4, [r2, #0]
    bf18:	0021      	movs	r1, r4
    bf1a:	2900      	cmp	r1, #0
    bf1c:	d119      	bne.n	bf52 <_malloc_r+0x5a>
    bf1e:	4c24      	ldr	r4, [pc, #144]	; (bfb0 <_malloc_r+0xb8>)
    bf20:	6823      	ldr	r3, [r4, #0]
    bf22:	2b00      	cmp	r3, #0
    bf24:	d103      	bne.n	bf2e <_malloc_r+0x36>
    bf26:	0030      	movs	r0, r6
    bf28:	f000 f844 	bl	bfb4 <_sbrk_r>
    bf2c:	6020      	str	r0, [r4, #0]
    bf2e:	0029      	movs	r1, r5
    bf30:	0030      	movs	r0, r6
    bf32:	f000 f83f 	bl	bfb4 <_sbrk_r>
    bf36:	1c43      	adds	r3, r0, #1
    bf38:	d12c      	bne.n	bf94 <_malloc_r+0x9c>
    bf3a:	230c      	movs	r3, #12
    bf3c:	0030      	movs	r0, r6
    bf3e:	6033      	str	r3, [r6, #0]
    bf40:	f000 fae1 	bl	c506 <__malloc_unlock>
    bf44:	e003      	b.n	bf4e <_malloc_r+0x56>
    bf46:	2d00      	cmp	r5, #0
    bf48:	dadf      	bge.n	bf0a <_malloc_r+0x12>
    bf4a:	230c      	movs	r3, #12
    bf4c:	6033      	str	r3, [r6, #0]
    bf4e:	2000      	movs	r0, #0
    bf50:	bd70      	pop	{r4, r5, r6, pc}
    bf52:	680b      	ldr	r3, [r1, #0]
    bf54:	1b5b      	subs	r3, r3, r5
    bf56:	d41a      	bmi.n	bf8e <_malloc_r+0x96>
    bf58:	2b0b      	cmp	r3, #11
    bf5a:	d903      	bls.n	bf64 <_malloc_r+0x6c>
    bf5c:	600b      	str	r3, [r1, #0]
    bf5e:	18cc      	adds	r4, r1, r3
    bf60:	6025      	str	r5, [r4, #0]
    bf62:	e003      	b.n	bf6c <_malloc_r+0x74>
    bf64:	428c      	cmp	r4, r1
    bf66:	d10e      	bne.n	bf86 <_malloc_r+0x8e>
    bf68:	6863      	ldr	r3, [r4, #4]
    bf6a:	6013      	str	r3, [r2, #0]
    bf6c:	0030      	movs	r0, r6
    bf6e:	f000 faca 	bl	c506 <__malloc_unlock>
    bf72:	0020      	movs	r0, r4
    bf74:	2207      	movs	r2, #7
    bf76:	300b      	adds	r0, #11
    bf78:	1d23      	adds	r3, r4, #4
    bf7a:	4390      	bics	r0, r2
    bf7c:	1ac3      	subs	r3, r0, r3
    bf7e:	d0e7      	beq.n	bf50 <_malloc_r+0x58>
    bf80:	425a      	negs	r2, r3
    bf82:	50e2      	str	r2, [r4, r3]
    bf84:	e7e4      	b.n	bf50 <_malloc_r+0x58>
    bf86:	684b      	ldr	r3, [r1, #4]
    bf88:	6063      	str	r3, [r4, #4]
    bf8a:	000c      	movs	r4, r1
    bf8c:	e7ee      	b.n	bf6c <_malloc_r+0x74>
    bf8e:	000c      	movs	r4, r1
    bf90:	6849      	ldr	r1, [r1, #4]
    bf92:	e7c2      	b.n	bf1a <_malloc_r+0x22>
    bf94:	2303      	movs	r3, #3
    bf96:	1cc4      	adds	r4, r0, #3
    bf98:	439c      	bics	r4, r3
    bf9a:	42a0      	cmp	r0, r4
    bf9c:	d0e0      	beq.n	bf60 <_malloc_r+0x68>
    bf9e:	1a21      	subs	r1, r4, r0
    bfa0:	0030      	movs	r0, r6
    bfa2:	f000 f807 	bl	bfb4 <_sbrk_r>
    bfa6:	1c43      	adds	r3, r0, #1
    bfa8:	d1da      	bne.n	bf60 <_malloc_r+0x68>
    bfaa:	e7c6      	b.n	bf3a <_malloc_r+0x42>
    bfac:	20000184 	.word	0x20000184
    bfb0:	20000188 	.word	0x20000188

0000bfb4 <_sbrk_r>:
    bfb4:	2300      	movs	r3, #0
    bfb6:	b570      	push	{r4, r5, r6, lr}
    bfb8:	4c06      	ldr	r4, [pc, #24]	; (bfd4 <_sbrk_r+0x20>)
    bfba:	0005      	movs	r5, r0
    bfbc:	0008      	movs	r0, r1
    bfbe:	6023      	str	r3, [r4, #0]
    bfc0:	f7fa ff58 	bl	6e74 <_sbrk>
    bfc4:	1c43      	adds	r3, r0, #1
    bfc6:	d103      	bne.n	bfd0 <_sbrk_r+0x1c>
    bfc8:	6823      	ldr	r3, [r4, #0]
    bfca:	2b00      	cmp	r3, #0
    bfcc:	d000      	beq.n	bfd0 <_sbrk_r+0x1c>
    bfce:	602b      	str	r3, [r5, #0]
    bfd0:	bd70      	pop	{r4, r5, r6, pc}
    bfd2:	46c0      	nop			; (mov r8, r8)
    bfd4:	20000c90 	.word	0x20000c90

0000bfd8 <setbuf>:
    bfd8:	424a      	negs	r2, r1
    bfda:	414a      	adcs	r2, r1
    bfdc:	2380      	movs	r3, #128	; 0x80
    bfde:	b510      	push	{r4, lr}
    bfe0:	0052      	lsls	r2, r2, #1
    bfe2:	00db      	lsls	r3, r3, #3
    bfe4:	f000 f802 	bl	bfec <setvbuf>
    bfe8:	bd10      	pop	{r4, pc}
	...

0000bfec <setvbuf>:
    bfec:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfee:	001d      	movs	r5, r3
    bff0:	4b4f      	ldr	r3, [pc, #316]	; (c130 <setvbuf+0x144>)
    bff2:	b085      	sub	sp, #20
    bff4:	681e      	ldr	r6, [r3, #0]
    bff6:	0004      	movs	r4, r0
    bff8:	000f      	movs	r7, r1
    bffa:	9200      	str	r2, [sp, #0]
    bffc:	2e00      	cmp	r6, #0
    bffe:	d005      	beq.n	c00c <setvbuf+0x20>
    c000:	69b3      	ldr	r3, [r6, #24]
    c002:	2b00      	cmp	r3, #0
    c004:	d102      	bne.n	c00c <setvbuf+0x20>
    c006:	0030      	movs	r0, r6
    c008:	f000 f9be 	bl	c388 <__sinit>
    c00c:	4b49      	ldr	r3, [pc, #292]	; (c134 <setvbuf+0x148>)
    c00e:	429c      	cmp	r4, r3
    c010:	d150      	bne.n	c0b4 <setvbuf+0xc8>
    c012:	6874      	ldr	r4, [r6, #4]
    c014:	9b00      	ldr	r3, [sp, #0]
    c016:	2b02      	cmp	r3, #2
    c018:	d005      	beq.n	c026 <setvbuf+0x3a>
    c01a:	2b01      	cmp	r3, #1
    c01c:	d900      	bls.n	c020 <setvbuf+0x34>
    c01e:	e084      	b.n	c12a <setvbuf+0x13e>
    c020:	2d00      	cmp	r5, #0
    c022:	da00      	bge.n	c026 <setvbuf+0x3a>
    c024:	e081      	b.n	c12a <setvbuf+0x13e>
    c026:	0021      	movs	r1, r4
    c028:	0030      	movs	r0, r6
    c02a:	f000 f93f 	bl	c2ac <_fflush_r>
    c02e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c030:	2900      	cmp	r1, #0
    c032:	d008      	beq.n	c046 <setvbuf+0x5a>
    c034:	0023      	movs	r3, r4
    c036:	3344      	adds	r3, #68	; 0x44
    c038:	4299      	cmp	r1, r3
    c03a:	d002      	beq.n	c042 <setvbuf+0x56>
    c03c:	0030      	movs	r0, r6
    c03e:	f7ff ff11 	bl	be64 <_free_r>
    c042:	2300      	movs	r3, #0
    c044:	6363      	str	r3, [r4, #52]	; 0x34
    c046:	2300      	movs	r3, #0
    c048:	61a3      	str	r3, [r4, #24]
    c04a:	6063      	str	r3, [r4, #4]
    c04c:	89a3      	ldrh	r3, [r4, #12]
    c04e:	061b      	lsls	r3, r3, #24
    c050:	d503      	bpl.n	c05a <setvbuf+0x6e>
    c052:	6921      	ldr	r1, [r4, #16]
    c054:	0030      	movs	r0, r6
    c056:	f7ff ff05 	bl	be64 <_free_r>
    c05a:	89a3      	ldrh	r3, [r4, #12]
    c05c:	4a36      	ldr	r2, [pc, #216]	; (c138 <setvbuf+0x14c>)
    c05e:	4013      	ands	r3, r2
    c060:	81a3      	strh	r3, [r4, #12]
    c062:	9b00      	ldr	r3, [sp, #0]
    c064:	2b02      	cmp	r3, #2
    c066:	d05a      	beq.n	c11e <setvbuf+0x132>
    c068:	ab03      	add	r3, sp, #12
    c06a:	aa02      	add	r2, sp, #8
    c06c:	0021      	movs	r1, r4
    c06e:	0030      	movs	r0, r6
    c070:	f000 fa20 	bl	c4b4 <__swhatbuf_r>
    c074:	89a3      	ldrh	r3, [r4, #12]
    c076:	4318      	orrs	r0, r3
    c078:	81a0      	strh	r0, [r4, #12]
    c07a:	2d00      	cmp	r5, #0
    c07c:	d124      	bne.n	c0c8 <setvbuf+0xdc>
    c07e:	9d02      	ldr	r5, [sp, #8]
    c080:	0028      	movs	r0, r5
    c082:	f7ff fed3 	bl	be2c <malloc>
    c086:	9501      	str	r5, [sp, #4]
    c088:	1e07      	subs	r7, r0, #0
    c08a:	d142      	bne.n	c112 <setvbuf+0x126>
    c08c:	9b02      	ldr	r3, [sp, #8]
    c08e:	9301      	str	r3, [sp, #4]
    c090:	42ab      	cmp	r3, r5
    c092:	d139      	bne.n	c108 <setvbuf+0x11c>
    c094:	2001      	movs	r0, #1
    c096:	4240      	negs	r0, r0
    c098:	2302      	movs	r3, #2
    c09a:	89a2      	ldrh	r2, [r4, #12]
    c09c:	4313      	orrs	r3, r2
    c09e:	81a3      	strh	r3, [r4, #12]
    c0a0:	2300      	movs	r3, #0
    c0a2:	60a3      	str	r3, [r4, #8]
    c0a4:	0023      	movs	r3, r4
    c0a6:	3347      	adds	r3, #71	; 0x47
    c0a8:	6023      	str	r3, [r4, #0]
    c0aa:	6123      	str	r3, [r4, #16]
    c0ac:	2301      	movs	r3, #1
    c0ae:	6163      	str	r3, [r4, #20]
    c0b0:	b005      	add	sp, #20
    c0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0b4:	4b21      	ldr	r3, [pc, #132]	; (c13c <setvbuf+0x150>)
    c0b6:	429c      	cmp	r4, r3
    c0b8:	d101      	bne.n	c0be <setvbuf+0xd2>
    c0ba:	68b4      	ldr	r4, [r6, #8]
    c0bc:	e7aa      	b.n	c014 <setvbuf+0x28>
    c0be:	4b20      	ldr	r3, [pc, #128]	; (c140 <setvbuf+0x154>)
    c0c0:	429c      	cmp	r4, r3
    c0c2:	d1a7      	bne.n	c014 <setvbuf+0x28>
    c0c4:	68f4      	ldr	r4, [r6, #12]
    c0c6:	e7a5      	b.n	c014 <setvbuf+0x28>
    c0c8:	2f00      	cmp	r7, #0
    c0ca:	d0d9      	beq.n	c080 <setvbuf+0x94>
    c0cc:	69b3      	ldr	r3, [r6, #24]
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	d102      	bne.n	c0d8 <setvbuf+0xec>
    c0d2:	0030      	movs	r0, r6
    c0d4:	f000 f958 	bl	c388 <__sinit>
    c0d8:	9b00      	ldr	r3, [sp, #0]
    c0da:	2b01      	cmp	r3, #1
    c0dc:	d103      	bne.n	c0e6 <setvbuf+0xfa>
    c0de:	89a3      	ldrh	r3, [r4, #12]
    c0e0:	9a00      	ldr	r2, [sp, #0]
    c0e2:	431a      	orrs	r2, r3
    c0e4:	81a2      	strh	r2, [r4, #12]
    c0e6:	2008      	movs	r0, #8
    c0e8:	89a3      	ldrh	r3, [r4, #12]
    c0ea:	6027      	str	r7, [r4, #0]
    c0ec:	6127      	str	r7, [r4, #16]
    c0ee:	6165      	str	r5, [r4, #20]
    c0f0:	4018      	ands	r0, r3
    c0f2:	d018      	beq.n	c126 <setvbuf+0x13a>
    c0f4:	2001      	movs	r0, #1
    c0f6:	4018      	ands	r0, r3
    c0f8:	2300      	movs	r3, #0
    c0fa:	4298      	cmp	r0, r3
    c0fc:	d011      	beq.n	c122 <setvbuf+0x136>
    c0fe:	426d      	negs	r5, r5
    c100:	60a3      	str	r3, [r4, #8]
    c102:	61a5      	str	r5, [r4, #24]
    c104:	0018      	movs	r0, r3
    c106:	e7d3      	b.n	c0b0 <setvbuf+0xc4>
    c108:	9801      	ldr	r0, [sp, #4]
    c10a:	f7ff fe8f 	bl	be2c <malloc>
    c10e:	1e07      	subs	r7, r0, #0
    c110:	d0c0      	beq.n	c094 <setvbuf+0xa8>
    c112:	2380      	movs	r3, #128	; 0x80
    c114:	89a2      	ldrh	r2, [r4, #12]
    c116:	9d01      	ldr	r5, [sp, #4]
    c118:	4313      	orrs	r3, r2
    c11a:	81a3      	strh	r3, [r4, #12]
    c11c:	e7d6      	b.n	c0cc <setvbuf+0xe0>
    c11e:	2000      	movs	r0, #0
    c120:	e7ba      	b.n	c098 <setvbuf+0xac>
    c122:	60a5      	str	r5, [r4, #8]
    c124:	e7c4      	b.n	c0b0 <setvbuf+0xc4>
    c126:	60a0      	str	r0, [r4, #8]
    c128:	e7c2      	b.n	c0b0 <setvbuf+0xc4>
    c12a:	2001      	movs	r0, #1
    c12c:	4240      	negs	r0, r0
    c12e:	e7bf      	b.n	c0b0 <setvbuf+0xc4>
    c130:	20000030 	.word	0x20000030
    c134:	0000db64 	.word	0x0000db64
    c138:	fffff35c 	.word	0xfffff35c
    c13c:	0000db84 	.word	0x0000db84
    c140:	0000db44 	.word	0x0000db44

0000c144 <siprintf>:
    c144:	b40e      	push	{r1, r2, r3}
    c146:	b510      	push	{r4, lr}
    c148:	b09d      	sub	sp, #116	; 0x74
    c14a:	a902      	add	r1, sp, #8
    c14c:	9002      	str	r0, [sp, #8]
    c14e:	6108      	str	r0, [r1, #16]
    c150:	480b      	ldr	r0, [pc, #44]	; (c180 <siprintf+0x3c>)
    c152:	2482      	movs	r4, #130	; 0x82
    c154:	6088      	str	r0, [r1, #8]
    c156:	6148      	str	r0, [r1, #20]
    c158:	2001      	movs	r0, #1
    c15a:	4240      	negs	r0, r0
    c15c:	ab1f      	add	r3, sp, #124	; 0x7c
    c15e:	81c8      	strh	r0, [r1, #14]
    c160:	4808      	ldr	r0, [pc, #32]	; (c184 <siprintf+0x40>)
    c162:	cb04      	ldmia	r3!, {r2}
    c164:	00a4      	lsls	r4, r4, #2
    c166:	6800      	ldr	r0, [r0, #0]
    c168:	9301      	str	r3, [sp, #4]
    c16a:	818c      	strh	r4, [r1, #12]
    c16c:	f000 fa2e 	bl	c5cc <_svfiprintf_r>
    c170:	2300      	movs	r3, #0
    c172:	9a02      	ldr	r2, [sp, #8]
    c174:	7013      	strb	r3, [r2, #0]
    c176:	b01d      	add	sp, #116	; 0x74
    c178:	bc10      	pop	{r4}
    c17a:	bc08      	pop	{r3}
    c17c:	b003      	add	sp, #12
    c17e:	4718      	bx	r3
    c180:	7fffffff 	.word	0x7fffffff
    c184:	20000030 	.word	0x20000030

0000c188 <strlen>:
    c188:	2300      	movs	r3, #0
    c18a:	5cc2      	ldrb	r2, [r0, r3]
    c18c:	3301      	adds	r3, #1
    c18e:	2a00      	cmp	r2, #0
    c190:	d1fb      	bne.n	c18a <strlen+0x2>
    c192:	1e58      	subs	r0, r3, #1
    c194:	4770      	bx	lr
	...

0000c198 <__sflush_r>:
    c198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c19a:	898a      	ldrh	r2, [r1, #12]
    c19c:	0005      	movs	r5, r0
    c19e:	000c      	movs	r4, r1
    c1a0:	0713      	lsls	r3, r2, #28
    c1a2:	d460      	bmi.n	c266 <__sflush_r+0xce>
    c1a4:	684b      	ldr	r3, [r1, #4]
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	dc04      	bgt.n	c1b4 <__sflush_r+0x1c>
    c1aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	dc01      	bgt.n	c1b4 <__sflush_r+0x1c>
    c1b0:	2000      	movs	r0, #0
    c1b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c1b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c1b6:	2f00      	cmp	r7, #0
    c1b8:	d0fa      	beq.n	c1b0 <__sflush_r+0x18>
    c1ba:	2300      	movs	r3, #0
    c1bc:	682e      	ldr	r6, [r5, #0]
    c1be:	602b      	str	r3, [r5, #0]
    c1c0:	2380      	movs	r3, #128	; 0x80
    c1c2:	015b      	lsls	r3, r3, #5
    c1c4:	401a      	ands	r2, r3
    c1c6:	d034      	beq.n	c232 <__sflush_r+0x9a>
    c1c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c1ca:	89a3      	ldrh	r3, [r4, #12]
    c1cc:	075b      	lsls	r3, r3, #29
    c1ce:	d506      	bpl.n	c1de <__sflush_r+0x46>
    c1d0:	6863      	ldr	r3, [r4, #4]
    c1d2:	1ac0      	subs	r0, r0, r3
    c1d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d001      	beq.n	c1de <__sflush_r+0x46>
    c1da:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c1dc:	1ac0      	subs	r0, r0, r3
    c1de:	0002      	movs	r2, r0
    c1e0:	6a21      	ldr	r1, [r4, #32]
    c1e2:	2300      	movs	r3, #0
    c1e4:	0028      	movs	r0, r5
    c1e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c1e8:	47b8      	blx	r7
    c1ea:	89a1      	ldrh	r1, [r4, #12]
    c1ec:	1c43      	adds	r3, r0, #1
    c1ee:	d106      	bne.n	c1fe <__sflush_r+0x66>
    c1f0:	682b      	ldr	r3, [r5, #0]
    c1f2:	2b1d      	cmp	r3, #29
    c1f4:	d831      	bhi.n	c25a <__sflush_r+0xc2>
    c1f6:	4a2c      	ldr	r2, [pc, #176]	; (c2a8 <__sflush_r+0x110>)
    c1f8:	40da      	lsrs	r2, r3
    c1fa:	07d3      	lsls	r3, r2, #31
    c1fc:	d52d      	bpl.n	c25a <__sflush_r+0xc2>
    c1fe:	2300      	movs	r3, #0
    c200:	6063      	str	r3, [r4, #4]
    c202:	6923      	ldr	r3, [r4, #16]
    c204:	6023      	str	r3, [r4, #0]
    c206:	04cb      	lsls	r3, r1, #19
    c208:	d505      	bpl.n	c216 <__sflush_r+0x7e>
    c20a:	1c43      	adds	r3, r0, #1
    c20c:	d102      	bne.n	c214 <__sflush_r+0x7c>
    c20e:	682b      	ldr	r3, [r5, #0]
    c210:	2b00      	cmp	r3, #0
    c212:	d100      	bne.n	c216 <__sflush_r+0x7e>
    c214:	6560      	str	r0, [r4, #84]	; 0x54
    c216:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c218:	602e      	str	r6, [r5, #0]
    c21a:	2900      	cmp	r1, #0
    c21c:	d0c8      	beq.n	c1b0 <__sflush_r+0x18>
    c21e:	0023      	movs	r3, r4
    c220:	3344      	adds	r3, #68	; 0x44
    c222:	4299      	cmp	r1, r3
    c224:	d002      	beq.n	c22c <__sflush_r+0x94>
    c226:	0028      	movs	r0, r5
    c228:	f7ff fe1c 	bl	be64 <_free_r>
    c22c:	2000      	movs	r0, #0
    c22e:	6360      	str	r0, [r4, #52]	; 0x34
    c230:	e7bf      	b.n	c1b2 <__sflush_r+0x1a>
    c232:	2301      	movs	r3, #1
    c234:	6a21      	ldr	r1, [r4, #32]
    c236:	0028      	movs	r0, r5
    c238:	47b8      	blx	r7
    c23a:	1c43      	adds	r3, r0, #1
    c23c:	d1c5      	bne.n	c1ca <__sflush_r+0x32>
    c23e:	682b      	ldr	r3, [r5, #0]
    c240:	2b00      	cmp	r3, #0
    c242:	d0c2      	beq.n	c1ca <__sflush_r+0x32>
    c244:	2b1d      	cmp	r3, #29
    c246:	d001      	beq.n	c24c <__sflush_r+0xb4>
    c248:	2b16      	cmp	r3, #22
    c24a:	d101      	bne.n	c250 <__sflush_r+0xb8>
    c24c:	602e      	str	r6, [r5, #0]
    c24e:	e7af      	b.n	c1b0 <__sflush_r+0x18>
    c250:	2340      	movs	r3, #64	; 0x40
    c252:	89a2      	ldrh	r2, [r4, #12]
    c254:	4313      	orrs	r3, r2
    c256:	81a3      	strh	r3, [r4, #12]
    c258:	e7ab      	b.n	c1b2 <__sflush_r+0x1a>
    c25a:	2340      	movs	r3, #64	; 0x40
    c25c:	430b      	orrs	r3, r1
    c25e:	2001      	movs	r0, #1
    c260:	81a3      	strh	r3, [r4, #12]
    c262:	4240      	negs	r0, r0
    c264:	e7a5      	b.n	c1b2 <__sflush_r+0x1a>
    c266:	690f      	ldr	r7, [r1, #16]
    c268:	2f00      	cmp	r7, #0
    c26a:	d0a1      	beq.n	c1b0 <__sflush_r+0x18>
    c26c:	680b      	ldr	r3, [r1, #0]
    c26e:	600f      	str	r7, [r1, #0]
    c270:	1bdb      	subs	r3, r3, r7
    c272:	9301      	str	r3, [sp, #4]
    c274:	2300      	movs	r3, #0
    c276:	0792      	lsls	r2, r2, #30
    c278:	d100      	bne.n	c27c <__sflush_r+0xe4>
    c27a:	694b      	ldr	r3, [r1, #20]
    c27c:	60a3      	str	r3, [r4, #8]
    c27e:	9b01      	ldr	r3, [sp, #4]
    c280:	2b00      	cmp	r3, #0
    c282:	dc00      	bgt.n	c286 <__sflush_r+0xee>
    c284:	e794      	b.n	c1b0 <__sflush_r+0x18>
    c286:	9b01      	ldr	r3, [sp, #4]
    c288:	003a      	movs	r2, r7
    c28a:	6a21      	ldr	r1, [r4, #32]
    c28c:	0028      	movs	r0, r5
    c28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c290:	47b0      	blx	r6
    c292:	2800      	cmp	r0, #0
    c294:	dc03      	bgt.n	c29e <__sflush_r+0x106>
    c296:	2340      	movs	r3, #64	; 0x40
    c298:	89a2      	ldrh	r2, [r4, #12]
    c29a:	4313      	orrs	r3, r2
    c29c:	e7df      	b.n	c25e <__sflush_r+0xc6>
    c29e:	9b01      	ldr	r3, [sp, #4]
    c2a0:	183f      	adds	r7, r7, r0
    c2a2:	1a1b      	subs	r3, r3, r0
    c2a4:	9301      	str	r3, [sp, #4]
    c2a6:	e7ea      	b.n	c27e <__sflush_r+0xe6>
    c2a8:	20400001 	.word	0x20400001

0000c2ac <_fflush_r>:
    c2ac:	690b      	ldr	r3, [r1, #16]
    c2ae:	b570      	push	{r4, r5, r6, lr}
    c2b0:	0005      	movs	r5, r0
    c2b2:	000c      	movs	r4, r1
    c2b4:	2b00      	cmp	r3, #0
    c2b6:	d101      	bne.n	c2bc <_fflush_r+0x10>
    c2b8:	2000      	movs	r0, #0
    c2ba:	bd70      	pop	{r4, r5, r6, pc}
    c2bc:	2800      	cmp	r0, #0
    c2be:	d004      	beq.n	c2ca <_fflush_r+0x1e>
    c2c0:	6983      	ldr	r3, [r0, #24]
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	d101      	bne.n	c2ca <_fflush_r+0x1e>
    c2c6:	f000 f85f 	bl	c388 <__sinit>
    c2ca:	4b0b      	ldr	r3, [pc, #44]	; (c2f8 <_fflush_r+0x4c>)
    c2cc:	429c      	cmp	r4, r3
    c2ce:	d109      	bne.n	c2e4 <_fflush_r+0x38>
    c2d0:	686c      	ldr	r4, [r5, #4]
    c2d2:	220c      	movs	r2, #12
    c2d4:	5ea3      	ldrsh	r3, [r4, r2]
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	d0ee      	beq.n	c2b8 <_fflush_r+0xc>
    c2da:	0021      	movs	r1, r4
    c2dc:	0028      	movs	r0, r5
    c2de:	f7ff ff5b 	bl	c198 <__sflush_r>
    c2e2:	e7ea      	b.n	c2ba <_fflush_r+0xe>
    c2e4:	4b05      	ldr	r3, [pc, #20]	; (c2fc <_fflush_r+0x50>)
    c2e6:	429c      	cmp	r4, r3
    c2e8:	d101      	bne.n	c2ee <_fflush_r+0x42>
    c2ea:	68ac      	ldr	r4, [r5, #8]
    c2ec:	e7f1      	b.n	c2d2 <_fflush_r+0x26>
    c2ee:	4b04      	ldr	r3, [pc, #16]	; (c300 <_fflush_r+0x54>)
    c2f0:	429c      	cmp	r4, r3
    c2f2:	d1ee      	bne.n	c2d2 <_fflush_r+0x26>
    c2f4:	68ec      	ldr	r4, [r5, #12]
    c2f6:	e7ec      	b.n	c2d2 <_fflush_r+0x26>
    c2f8:	0000db64 	.word	0x0000db64
    c2fc:	0000db84 	.word	0x0000db84
    c300:	0000db44 	.word	0x0000db44

0000c304 <_cleanup_r>:
    c304:	b510      	push	{r4, lr}
    c306:	4902      	ldr	r1, [pc, #8]	; (c310 <_cleanup_r+0xc>)
    c308:	f000 f8b2 	bl	c470 <_fwalk_reent>
    c30c:	bd10      	pop	{r4, pc}
    c30e:	46c0      	nop			; (mov r8, r8)
    c310:	0000c2ad 	.word	0x0000c2ad

0000c314 <std.isra.0>:
    c314:	2300      	movs	r3, #0
    c316:	b510      	push	{r4, lr}
    c318:	0004      	movs	r4, r0
    c31a:	6003      	str	r3, [r0, #0]
    c31c:	6043      	str	r3, [r0, #4]
    c31e:	6083      	str	r3, [r0, #8]
    c320:	8181      	strh	r1, [r0, #12]
    c322:	6643      	str	r3, [r0, #100]	; 0x64
    c324:	81c2      	strh	r2, [r0, #14]
    c326:	6103      	str	r3, [r0, #16]
    c328:	6143      	str	r3, [r0, #20]
    c32a:	6183      	str	r3, [r0, #24]
    c32c:	0019      	movs	r1, r3
    c32e:	2208      	movs	r2, #8
    c330:	305c      	adds	r0, #92	; 0x5c
    c332:	f7ff fd8e 	bl	be52 <memset>
    c336:	4b05      	ldr	r3, [pc, #20]	; (c34c <std.isra.0+0x38>)
    c338:	6224      	str	r4, [r4, #32]
    c33a:	6263      	str	r3, [r4, #36]	; 0x24
    c33c:	4b04      	ldr	r3, [pc, #16]	; (c350 <std.isra.0+0x3c>)
    c33e:	62a3      	str	r3, [r4, #40]	; 0x28
    c340:	4b04      	ldr	r3, [pc, #16]	; (c354 <std.isra.0+0x40>)
    c342:	62e3      	str	r3, [r4, #44]	; 0x2c
    c344:	4b04      	ldr	r3, [pc, #16]	; (c358 <std.isra.0+0x44>)
    c346:	6323      	str	r3, [r4, #48]	; 0x30
    c348:	bd10      	pop	{r4, pc}
    c34a:	46c0      	nop			; (mov r8, r8)
    c34c:	0000cae5 	.word	0x0000cae5
    c350:	0000cb0d 	.word	0x0000cb0d
    c354:	0000cb45 	.word	0x0000cb45
    c358:	0000cb71 	.word	0x0000cb71

0000c35c <__sfmoreglue>:
    c35c:	b570      	push	{r4, r5, r6, lr}
    c35e:	2568      	movs	r5, #104	; 0x68
    c360:	1e4a      	subs	r2, r1, #1
    c362:	4355      	muls	r5, r2
    c364:	000e      	movs	r6, r1
    c366:	0029      	movs	r1, r5
    c368:	3174      	adds	r1, #116	; 0x74
    c36a:	f7ff fdc5 	bl	bef8 <_malloc_r>
    c36e:	1e04      	subs	r4, r0, #0
    c370:	d008      	beq.n	c384 <__sfmoreglue+0x28>
    c372:	2100      	movs	r1, #0
    c374:	002a      	movs	r2, r5
    c376:	6001      	str	r1, [r0, #0]
    c378:	6046      	str	r6, [r0, #4]
    c37a:	300c      	adds	r0, #12
    c37c:	60a0      	str	r0, [r4, #8]
    c37e:	3268      	adds	r2, #104	; 0x68
    c380:	f7ff fd67 	bl	be52 <memset>
    c384:	0020      	movs	r0, r4
    c386:	bd70      	pop	{r4, r5, r6, pc}

0000c388 <__sinit>:
    c388:	6983      	ldr	r3, [r0, #24]
    c38a:	b513      	push	{r0, r1, r4, lr}
    c38c:	0004      	movs	r4, r0
    c38e:	2b00      	cmp	r3, #0
    c390:	d128      	bne.n	c3e4 <__sinit+0x5c>
    c392:	6483      	str	r3, [r0, #72]	; 0x48
    c394:	64c3      	str	r3, [r0, #76]	; 0x4c
    c396:	6503      	str	r3, [r0, #80]	; 0x50
    c398:	4b13      	ldr	r3, [pc, #76]	; (c3e8 <__sinit+0x60>)
    c39a:	4a14      	ldr	r2, [pc, #80]	; (c3ec <__sinit+0x64>)
    c39c:	681b      	ldr	r3, [r3, #0]
    c39e:	6282      	str	r2, [r0, #40]	; 0x28
    c3a0:	9301      	str	r3, [sp, #4]
    c3a2:	4298      	cmp	r0, r3
    c3a4:	d101      	bne.n	c3aa <__sinit+0x22>
    c3a6:	2301      	movs	r3, #1
    c3a8:	6183      	str	r3, [r0, #24]
    c3aa:	0020      	movs	r0, r4
    c3ac:	f000 f820 	bl	c3f0 <__sfp>
    c3b0:	6060      	str	r0, [r4, #4]
    c3b2:	0020      	movs	r0, r4
    c3b4:	f000 f81c 	bl	c3f0 <__sfp>
    c3b8:	60a0      	str	r0, [r4, #8]
    c3ba:	0020      	movs	r0, r4
    c3bc:	f000 f818 	bl	c3f0 <__sfp>
    c3c0:	2200      	movs	r2, #0
    c3c2:	60e0      	str	r0, [r4, #12]
    c3c4:	2104      	movs	r1, #4
    c3c6:	6860      	ldr	r0, [r4, #4]
    c3c8:	f7ff ffa4 	bl	c314 <std.isra.0>
    c3cc:	2201      	movs	r2, #1
    c3ce:	2109      	movs	r1, #9
    c3d0:	68a0      	ldr	r0, [r4, #8]
    c3d2:	f7ff ff9f 	bl	c314 <std.isra.0>
    c3d6:	2202      	movs	r2, #2
    c3d8:	2112      	movs	r1, #18
    c3da:	68e0      	ldr	r0, [r4, #12]
    c3dc:	f7ff ff9a 	bl	c314 <std.isra.0>
    c3e0:	2301      	movs	r3, #1
    c3e2:	61a3      	str	r3, [r4, #24]
    c3e4:	bd13      	pop	{r0, r1, r4, pc}
    c3e6:	46c0      	nop			; (mov r8, r8)
    c3e8:	0000db40 	.word	0x0000db40
    c3ec:	0000c305 	.word	0x0000c305

0000c3f0 <__sfp>:
    c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3f2:	4b1e      	ldr	r3, [pc, #120]	; (c46c <__sfp+0x7c>)
    c3f4:	0007      	movs	r7, r0
    c3f6:	681e      	ldr	r6, [r3, #0]
    c3f8:	69b3      	ldr	r3, [r6, #24]
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	d102      	bne.n	c404 <__sfp+0x14>
    c3fe:	0030      	movs	r0, r6
    c400:	f7ff ffc2 	bl	c388 <__sinit>
    c404:	3648      	adds	r6, #72	; 0x48
    c406:	68b4      	ldr	r4, [r6, #8]
    c408:	6873      	ldr	r3, [r6, #4]
    c40a:	3b01      	subs	r3, #1
    c40c:	d504      	bpl.n	c418 <__sfp+0x28>
    c40e:	6833      	ldr	r3, [r6, #0]
    c410:	2b00      	cmp	r3, #0
    c412:	d007      	beq.n	c424 <__sfp+0x34>
    c414:	6836      	ldr	r6, [r6, #0]
    c416:	e7f6      	b.n	c406 <__sfp+0x16>
    c418:	220c      	movs	r2, #12
    c41a:	5ea5      	ldrsh	r5, [r4, r2]
    c41c:	2d00      	cmp	r5, #0
    c41e:	d00d      	beq.n	c43c <__sfp+0x4c>
    c420:	3468      	adds	r4, #104	; 0x68
    c422:	e7f2      	b.n	c40a <__sfp+0x1a>
    c424:	2104      	movs	r1, #4
    c426:	0038      	movs	r0, r7
    c428:	f7ff ff98 	bl	c35c <__sfmoreglue>
    c42c:	6030      	str	r0, [r6, #0]
    c42e:	2800      	cmp	r0, #0
    c430:	d1f0      	bne.n	c414 <__sfp+0x24>
    c432:	230c      	movs	r3, #12
    c434:	0004      	movs	r4, r0
    c436:	603b      	str	r3, [r7, #0]
    c438:	0020      	movs	r0, r4
    c43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c43c:	2301      	movs	r3, #1
    c43e:	0020      	movs	r0, r4
    c440:	425b      	negs	r3, r3
    c442:	81e3      	strh	r3, [r4, #14]
    c444:	3302      	adds	r3, #2
    c446:	81a3      	strh	r3, [r4, #12]
    c448:	6665      	str	r5, [r4, #100]	; 0x64
    c44a:	6025      	str	r5, [r4, #0]
    c44c:	60a5      	str	r5, [r4, #8]
    c44e:	6065      	str	r5, [r4, #4]
    c450:	6125      	str	r5, [r4, #16]
    c452:	6165      	str	r5, [r4, #20]
    c454:	61a5      	str	r5, [r4, #24]
    c456:	2208      	movs	r2, #8
    c458:	0029      	movs	r1, r5
    c45a:	305c      	adds	r0, #92	; 0x5c
    c45c:	f7ff fcf9 	bl	be52 <memset>
    c460:	6365      	str	r5, [r4, #52]	; 0x34
    c462:	63a5      	str	r5, [r4, #56]	; 0x38
    c464:	64a5      	str	r5, [r4, #72]	; 0x48
    c466:	64e5      	str	r5, [r4, #76]	; 0x4c
    c468:	e7e6      	b.n	c438 <__sfp+0x48>
    c46a:	46c0      	nop			; (mov r8, r8)
    c46c:	0000db40 	.word	0x0000db40

0000c470 <_fwalk_reent>:
    c470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c472:	0004      	movs	r4, r0
    c474:	0007      	movs	r7, r0
    c476:	2600      	movs	r6, #0
    c478:	9101      	str	r1, [sp, #4]
    c47a:	3448      	adds	r4, #72	; 0x48
    c47c:	2c00      	cmp	r4, #0
    c47e:	d101      	bne.n	c484 <_fwalk_reent+0x14>
    c480:	0030      	movs	r0, r6
    c482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c484:	6863      	ldr	r3, [r4, #4]
    c486:	68a5      	ldr	r5, [r4, #8]
    c488:	9300      	str	r3, [sp, #0]
    c48a:	9b00      	ldr	r3, [sp, #0]
    c48c:	3b01      	subs	r3, #1
    c48e:	9300      	str	r3, [sp, #0]
    c490:	d501      	bpl.n	c496 <_fwalk_reent+0x26>
    c492:	6824      	ldr	r4, [r4, #0]
    c494:	e7f2      	b.n	c47c <_fwalk_reent+0xc>
    c496:	89ab      	ldrh	r3, [r5, #12]
    c498:	2b01      	cmp	r3, #1
    c49a:	d908      	bls.n	c4ae <_fwalk_reent+0x3e>
    c49c:	220e      	movs	r2, #14
    c49e:	5eab      	ldrsh	r3, [r5, r2]
    c4a0:	3301      	adds	r3, #1
    c4a2:	d004      	beq.n	c4ae <_fwalk_reent+0x3e>
    c4a4:	0029      	movs	r1, r5
    c4a6:	0038      	movs	r0, r7
    c4a8:	9b01      	ldr	r3, [sp, #4]
    c4aa:	4798      	blx	r3
    c4ac:	4306      	orrs	r6, r0
    c4ae:	3568      	adds	r5, #104	; 0x68
    c4b0:	e7eb      	b.n	c48a <_fwalk_reent+0x1a>
	...

0000c4b4 <__swhatbuf_r>:
    c4b4:	b570      	push	{r4, r5, r6, lr}
    c4b6:	000e      	movs	r6, r1
    c4b8:	001d      	movs	r5, r3
    c4ba:	230e      	movs	r3, #14
    c4bc:	5ec9      	ldrsh	r1, [r1, r3]
    c4be:	b090      	sub	sp, #64	; 0x40
    c4c0:	0014      	movs	r4, r2
    c4c2:	2900      	cmp	r1, #0
    c4c4:	da07      	bge.n	c4d6 <__swhatbuf_r+0x22>
    c4c6:	2300      	movs	r3, #0
    c4c8:	602b      	str	r3, [r5, #0]
    c4ca:	89b3      	ldrh	r3, [r6, #12]
    c4cc:	061b      	lsls	r3, r3, #24
    c4ce:	d411      	bmi.n	c4f4 <__swhatbuf_r+0x40>
    c4d0:	2380      	movs	r3, #128	; 0x80
    c4d2:	00db      	lsls	r3, r3, #3
    c4d4:	e00f      	b.n	c4f6 <__swhatbuf_r+0x42>
    c4d6:	aa01      	add	r2, sp, #4
    c4d8:	f000 fb76 	bl	cbc8 <_fstat_r>
    c4dc:	2800      	cmp	r0, #0
    c4de:	dbf2      	blt.n	c4c6 <__swhatbuf_r+0x12>
    c4e0:	22f0      	movs	r2, #240	; 0xf0
    c4e2:	9b02      	ldr	r3, [sp, #8]
    c4e4:	0212      	lsls	r2, r2, #8
    c4e6:	4013      	ands	r3, r2
    c4e8:	4a05      	ldr	r2, [pc, #20]	; (c500 <__swhatbuf_r+0x4c>)
    c4ea:	189b      	adds	r3, r3, r2
    c4ec:	425a      	negs	r2, r3
    c4ee:	4153      	adcs	r3, r2
    c4f0:	602b      	str	r3, [r5, #0]
    c4f2:	e7ed      	b.n	c4d0 <__swhatbuf_r+0x1c>
    c4f4:	2340      	movs	r3, #64	; 0x40
    c4f6:	2000      	movs	r0, #0
    c4f8:	6023      	str	r3, [r4, #0]
    c4fa:	b010      	add	sp, #64	; 0x40
    c4fc:	bd70      	pop	{r4, r5, r6, pc}
    c4fe:	46c0      	nop			; (mov r8, r8)
    c500:	ffffe000 	.word	0xffffe000

0000c504 <__malloc_lock>:
    c504:	4770      	bx	lr

0000c506 <__malloc_unlock>:
    c506:	4770      	bx	lr

0000c508 <__ssputs_r>:
    c508:	b5f0      	push	{r4, r5, r6, r7, lr}
    c50a:	688e      	ldr	r6, [r1, #8]
    c50c:	b085      	sub	sp, #20
    c50e:	0007      	movs	r7, r0
    c510:	000c      	movs	r4, r1
    c512:	9203      	str	r2, [sp, #12]
    c514:	9301      	str	r3, [sp, #4]
    c516:	429e      	cmp	r6, r3
    c518:	d839      	bhi.n	c58e <__ssputs_r+0x86>
    c51a:	2390      	movs	r3, #144	; 0x90
    c51c:	898a      	ldrh	r2, [r1, #12]
    c51e:	00db      	lsls	r3, r3, #3
    c520:	421a      	tst	r2, r3
    c522:	d034      	beq.n	c58e <__ssputs_r+0x86>
    c524:	2503      	movs	r5, #3
    c526:	6909      	ldr	r1, [r1, #16]
    c528:	6823      	ldr	r3, [r4, #0]
    c52a:	1a5b      	subs	r3, r3, r1
    c52c:	9302      	str	r3, [sp, #8]
    c52e:	6963      	ldr	r3, [r4, #20]
    c530:	9802      	ldr	r0, [sp, #8]
    c532:	435d      	muls	r5, r3
    c534:	0feb      	lsrs	r3, r5, #31
    c536:	195d      	adds	r5, r3, r5
    c538:	9b01      	ldr	r3, [sp, #4]
    c53a:	106d      	asrs	r5, r5, #1
    c53c:	3301      	adds	r3, #1
    c53e:	181b      	adds	r3, r3, r0
    c540:	42ab      	cmp	r3, r5
    c542:	d900      	bls.n	c546 <__ssputs_r+0x3e>
    c544:	001d      	movs	r5, r3
    c546:	0553      	lsls	r3, r2, #21
    c548:	d532      	bpl.n	c5b0 <__ssputs_r+0xa8>
    c54a:	0029      	movs	r1, r5
    c54c:	0038      	movs	r0, r7
    c54e:	f7ff fcd3 	bl	bef8 <_malloc_r>
    c552:	1e06      	subs	r6, r0, #0
    c554:	d109      	bne.n	c56a <__ssputs_r+0x62>
    c556:	230c      	movs	r3, #12
    c558:	603b      	str	r3, [r7, #0]
    c55a:	2340      	movs	r3, #64	; 0x40
    c55c:	2001      	movs	r0, #1
    c55e:	89a2      	ldrh	r2, [r4, #12]
    c560:	4240      	negs	r0, r0
    c562:	4313      	orrs	r3, r2
    c564:	81a3      	strh	r3, [r4, #12]
    c566:	b005      	add	sp, #20
    c568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c56a:	9a02      	ldr	r2, [sp, #8]
    c56c:	6921      	ldr	r1, [r4, #16]
    c56e:	f7ff fc67 	bl	be40 <memcpy>
    c572:	89a3      	ldrh	r3, [r4, #12]
    c574:	4a14      	ldr	r2, [pc, #80]	; (c5c8 <__ssputs_r+0xc0>)
    c576:	401a      	ands	r2, r3
    c578:	2380      	movs	r3, #128	; 0x80
    c57a:	4313      	orrs	r3, r2
    c57c:	81a3      	strh	r3, [r4, #12]
    c57e:	9b02      	ldr	r3, [sp, #8]
    c580:	6126      	str	r6, [r4, #16]
    c582:	18f6      	adds	r6, r6, r3
    c584:	6026      	str	r6, [r4, #0]
    c586:	6165      	str	r5, [r4, #20]
    c588:	9e01      	ldr	r6, [sp, #4]
    c58a:	1aed      	subs	r5, r5, r3
    c58c:	60a5      	str	r5, [r4, #8]
    c58e:	9b01      	ldr	r3, [sp, #4]
    c590:	42b3      	cmp	r3, r6
    c592:	d200      	bcs.n	c596 <__ssputs_r+0x8e>
    c594:	001e      	movs	r6, r3
    c596:	0032      	movs	r2, r6
    c598:	9903      	ldr	r1, [sp, #12]
    c59a:	6820      	ldr	r0, [r4, #0]
    c59c:	f000 fb45 	bl	cc2a <memmove>
    c5a0:	68a3      	ldr	r3, [r4, #8]
    c5a2:	2000      	movs	r0, #0
    c5a4:	1b9b      	subs	r3, r3, r6
    c5a6:	60a3      	str	r3, [r4, #8]
    c5a8:	6823      	ldr	r3, [r4, #0]
    c5aa:	199e      	adds	r6, r3, r6
    c5ac:	6026      	str	r6, [r4, #0]
    c5ae:	e7da      	b.n	c566 <__ssputs_r+0x5e>
    c5b0:	002a      	movs	r2, r5
    c5b2:	0038      	movs	r0, r7
    c5b4:	f000 fb4b 	bl	cc4e <_realloc_r>
    c5b8:	1e06      	subs	r6, r0, #0
    c5ba:	d1e0      	bne.n	c57e <__ssputs_r+0x76>
    c5bc:	6921      	ldr	r1, [r4, #16]
    c5be:	0038      	movs	r0, r7
    c5c0:	f7ff fc50 	bl	be64 <_free_r>
    c5c4:	e7c7      	b.n	c556 <__ssputs_r+0x4e>
    c5c6:	46c0      	nop			; (mov r8, r8)
    c5c8:	fffffb7f 	.word	0xfffffb7f

0000c5cc <_svfiprintf_r>:
    c5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ce:	b09f      	sub	sp, #124	; 0x7c
    c5d0:	9002      	str	r0, [sp, #8]
    c5d2:	9305      	str	r3, [sp, #20]
    c5d4:	898b      	ldrh	r3, [r1, #12]
    c5d6:	000f      	movs	r7, r1
    c5d8:	0016      	movs	r6, r2
    c5da:	061b      	lsls	r3, r3, #24
    c5dc:	d511      	bpl.n	c602 <_svfiprintf_r+0x36>
    c5de:	690b      	ldr	r3, [r1, #16]
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	d10e      	bne.n	c602 <_svfiprintf_r+0x36>
    c5e4:	2140      	movs	r1, #64	; 0x40
    c5e6:	f7ff fc87 	bl	bef8 <_malloc_r>
    c5ea:	6038      	str	r0, [r7, #0]
    c5ec:	6138      	str	r0, [r7, #16]
    c5ee:	2800      	cmp	r0, #0
    c5f0:	d105      	bne.n	c5fe <_svfiprintf_r+0x32>
    c5f2:	230c      	movs	r3, #12
    c5f4:	9a02      	ldr	r2, [sp, #8]
    c5f6:	3801      	subs	r0, #1
    c5f8:	6013      	str	r3, [r2, #0]
    c5fa:	b01f      	add	sp, #124	; 0x7c
    c5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5fe:	2340      	movs	r3, #64	; 0x40
    c600:	617b      	str	r3, [r7, #20]
    c602:	2300      	movs	r3, #0
    c604:	ad06      	add	r5, sp, #24
    c606:	616b      	str	r3, [r5, #20]
    c608:	3320      	adds	r3, #32
    c60a:	766b      	strb	r3, [r5, #25]
    c60c:	3310      	adds	r3, #16
    c60e:	76ab      	strb	r3, [r5, #26]
    c610:	0034      	movs	r4, r6
    c612:	7823      	ldrb	r3, [r4, #0]
    c614:	2b00      	cmp	r3, #0
    c616:	d147      	bne.n	c6a8 <_svfiprintf_r+0xdc>
    c618:	1ba3      	subs	r3, r4, r6
    c61a:	9304      	str	r3, [sp, #16]
    c61c:	d00d      	beq.n	c63a <_svfiprintf_r+0x6e>
    c61e:	1ba3      	subs	r3, r4, r6
    c620:	0032      	movs	r2, r6
    c622:	0039      	movs	r1, r7
    c624:	9802      	ldr	r0, [sp, #8]
    c626:	f7ff ff6f 	bl	c508 <__ssputs_r>
    c62a:	1c43      	adds	r3, r0, #1
    c62c:	d100      	bne.n	c630 <_svfiprintf_r+0x64>
    c62e:	e0b5      	b.n	c79c <_svfiprintf_r+0x1d0>
    c630:	696a      	ldr	r2, [r5, #20]
    c632:	9b04      	ldr	r3, [sp, #16]
    c634:	4694      	mov	ip, r2
    c636:	4463      	add	r3, ip
    c638:	616b      	str	r3, [r5, #20]
    c63a:	7823      	ldrb	r3, [r4, #0]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d100      	bne.n	c642 <_svfiprintf_r+0x76>
    c640:	e0ac      	b.n	c79c <_svfiprintf_r+0x1d0>
    c642:	2201      	movs	r2, #1
    c644:	2300      	movs	r3, #0
    c646:	4252      	negs	r2, r2
    c648:	606a      	str	r2, [r5, #4]
    c64a:	a902      	add	r1, sp, #8
    c64c:	3254      	adds	r2, #84	; 0x54
    c64e:	1852      	adds	r2, r2, r1
    c650:	3401      	adds	r4, #1
    c652:	602b      	str	r3, [r5, #0]
    c654:	60eb      	str	r3, [r5, #12]
    c656:	60ab      	str	r3, [r5, #8]
    c658:	7013      	strb	r3, [r2, #0]
    c65a:	65ab      	str	r3, [r5, #88]	; 0x58
    c65c:	4e58      	ldr	r6, [pc, #352]	; (c7c0 <_svfiprintf_r+0x1f4>)
    c65e:	2205      	movs	r2, #5
    c660:	7821      	ldrb	r1, [r4, #0]
    c662:	0030      	movs	r0, r6
    c664:	f000 fad6 	bl	cc14 <memchr>
    c668:	1c62      	adds	r2, r4, #1
    c66a:	2800      	cmp	r0, #0
    c66c:	d120      	bne.n	c6b0 <_svfiprintf_r+0xe4>
    c66e:	6829      	ldr	r1, [r5, #0]
    c670:	06cb      	lsls	r3, r1, #27
    c672:	d504      	bpl.n	c67e <_svfiprintf_r+0xb2>
    c674:	2353      	movs	r3, #83	; 0x53
    c676:	ae02      	add	r6, sp, #8
    c678:	3020      	adds	r0, #32
    c67a:	199b      	adds	r3, r3, r6
    c67c:	7018      	strb	r0, [r3, #0]
    c67e:	070b      	lsls	r3, r1, #28
    c680:	d504      	bpl.n	c68c <_svfiprintf_r+0xc0>
    c682:	2353      	movs	r3, #83	; 0x53
    c684:	202b      	movs	r0, #43	; 0x2b
    c686:	ae02      	add	r6, sp, #8
    c688:	199b      	adds	r3, r3, r6
    c68a:	7018      	strb	r0, [r3, #0]
    c68c:	7823      	ldrb	r3, [r4, #0]
    c68e:	2b2a      	cmp	r3, #42	; 0x2a
    c690:	d016      	beq.n	c6c0 <_svfiprintf_r+0xf4>
    c692:	2000      	movs	r0, #0
    c694:	210a      	movs	r1, #10
    c696:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c698:	7822      	ldrb	r2, [r4, #0]
    c69a:	3a30      	subs	r2, #48	; 0x30
    c69c:	2a09      	cmp	r2, #9
    c69e:	d955      	bls.n	c74c <_svfiprintf_r+0x180>
    c6a0:	2800      	cmp	r0, #0
    c6a2:	d015      	beq.n	c6d0 <_svfiprintf_r+0x104>
    c6a4:	9309      	str	r3, [sp, #36]	; 0x24
    c6a6:	e013      	b.n	c6d0 <_svfiprintf_r+0x104>
    c6a8:	2b25      	cmp	r3, #37	; 0x25
    c6aa:	d0b5      	beq.n	c618 <_svfiprintf_r+0x4c>
    c6ac:	3401      	adds	r4, #1
    c6ae:	e7b0      	b.n	c612 <_svfiprintf_r+0x46>
    c6b0:	2301      	movs	r3, #1
    c6b2:	1b80      	subs	r0, r0, r6
    c6b4:	4083      	lsls	r3, r0
    c6b6:	6829      	ldr	r1, [r5, #0]
    c6b8:	0014      	movs	r4, r2
    c6ba:	430b      	orrs	r3, r1
    c6bc:	602b      	str	r3, [r5, #0]
    c6be:	e7cd      	b.n	c65c <_svfiprintf_r+0x90>
    c6c0:	9b05      	ldr	r3, [sp, #20]
    c6c2:	1d18      	adds	r0, r3, #4
    c6c4:	681b      	ldr	r3, [r3, #0]
    c6c6:	9005      	str	r0, [sp, #20]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	db39      	blt.n	c740 <_svfiprintf_r+0x174>
    c6cc:	9309      	str	r3, [sp, #36]	; 0x24
    c6ce:	0014      	movs	r4, r2
    c6d0:	7823      	ldrb	r3, [r4, #0]
    c6d2:	2b2e      	cmp	r3, #46	; 0x2e
    c6d4:	d10b      	bne.n	c6ee <_svfiprintf_r+0x122>
    c6d6:	7863      	ldrb	r3, [r4, #1]
    c6d8:	1c62      	adds	r2, r4, #1
    c6da:	2b2a      	cmp	r3, #42	; 0x2a
    c6dc:	d13e      	bne.n	c75c <_svfiprintf_r+0x190>
    c6de:	9b05      	ldr	r3, [sp, #20]
    c6e0:	3402      	adds	r4, #2
    c6e2:	1d1a      	adds	r2, r3, #4
    c6e4:	681b      	ldr	r3, [r3, #0]
    c6e6:	9205      	str	r2, [sp, #20]
    c6e8:	2b00      	cmp	r3, #0
    c6ea:	db34      	blt.n	c756 <_svfiprintf_r+0x18a>
    c6ec:	9307      	str	r3, [sp, #28]
    c6ee:	4e35      	ldr	r6, [pc, #212]	; (c7c4 <_svfiprintf_r+0x1f8>)
    c6f0:	7821      	ldrb	r1, [r4, #0]
    c6f2:	2203      	movs	r2, #3
    c6f4:	0030      	movs	r0, r6
    c6f6:	f000 fa8d 	bl	cc14 <memchr>
    c6fa:	2800      	cmp	r0, #0
    c6fc:	d006      	beq.n	c70c <_svfiprintf_r+0x140>
    c6fe:	2340      	movs	r3, #64	; 0x40
    c700:	1b80      	subs	r0, r0, r6
    c702:	4083      	lsls	r3, r0
    c704:	682a      	ldr	r2, [r5, #0]
    c706:	3401      	adds	r4, #1
    c708:	4313      	orrs	r3, r2
    c70a:	602b      	str	r3, [r5, #0]
    c70c:	7821      	ldrb	r1, [r4, #0]
    c70e:	2206      	movs	r2, #6
    c710:	482d      	ldr	r0, [pc, #180]	; (c7c8 <_svfiprintf_r+0x1fc>)
    c712:	1c66      	adds	r6, r4, #1
    c714:	7629      	strb	r1, [r5, #24]
    c716:	f000 fa7d 	bl	cc14 <memchr>
    c71a:	2800      	cmp	r0, #0
    c71c:	d046      	beq.n	c7ac <_svfiprintf_r+0x1e0>
    c71e:	4b2b      	ldr	r3, [pc, #172]	; (c7cc <_svfiprintf_r+0x200>)
    c720:	2b00      	cmp	r3, #0
    c722:	d12f      	bne.n	c784 <_svfiprintf_r+0x1b8>
    c724:	6829      	ldr	r1, [r5, #0]
    c726:	9b05      	ldr	r3, [sp, #20]
    c728:	2207      	movs	r2, #7
    c72a:	05c9      	lsls	r1, r1, #23
    c72c:	d528      	bpl.n	c780 <_svfiprintf_r+0x1b4>
    c72e:	189b      	adds	r3, r3, r2
    c730:	4393      	bics	r3, r2
    c732:	3308      	adds	r3, #8
    c734:	9305      	str	r3, [sp, #20]
    c736:	696b      	ldr	r3, [r5, #20]
    c738:	9a03      	ldr	r2, [sp, #12]
    c73a:	189b      	adds	r3, r3, r2
    c73c:	616b      	str	r3, [r5, #20]
    c73e:	e767      	b.n	c610 <_svfiprintf_r+0x44>
    c740:	425b      	negs	r3, r3
    c742:	60eb      	str	r3, [r5, #12]
    c744:	2302      	movs	r3, #2
    c746:	430b      	orrs	r3, r1
    c748:	602b      	str	r3, [r5, #0]
    c74a:	e7c0      	b.n	c6ce <_svfiprintf_r+0x102>
    c74c:	434b      	muls	r3, r1
    c74e:	3401      	adds	r4, #1
    c750:	189b      	adds	r3, r3, r2
    c752:	2001      	movs	r0, #1
    c754:	e7a0      	b.n	c698 <_svfiprintf_r+0xcc>
    c756:	2301      	movs	r3, #1
    c758:	425b      	negs	r3, r3
    c75a:	e7c7      	b.n	c6ec <_svfiprintf_r+0x120>
    c75c:	2300      	movs	r3, #0
    c75e:	0014      	movs	r4, r2
    c760:	200a      	movs	r0, #10
    c762:	001a      	movs	r2, r3
    c764:	606b      	str	r3, [r5, #4]
    c766:	7821      	ldrb	r1, [r4, #0]
    c768:	3930      	subs	r1, #48	; 0x30
    c76a:	2909      	cmp	r1, #9
    c76c:	d903      	bls.n	c776 <_svfiprintf_r+0x1aa>
    c76e:	2b00      	cmp	r3, #0
    c770:	d0bd      	beq.n	c6ee <_svfiprintf_r+0x122>
    c772:	9207      	str	r2, [sp, #28]
    c774:	e7bb      	b.n	c6ee <_svfiprintf_r+0x122>
    c776:	4342      	muls	r2, r0
    c778:	3401      	adds	r4, #1
    c77a:	1852      	adds	r2, r2, r1
    c77c:	2301      	movs	r3, #1
    c77e:	e7f2      	b.n	c766 <_svfiprintf_r+0x19a>
    c780:	3307      	adds	r3, #7
    c782:	e7d5      	b.n	c730 <_svfiprintf_r+0x164>
    c784:	ab05      	add	r3, sp, #20
    c786:	9300      	str	r3, [sp, #0]
    c788:	003a      	movs	r2, r7
    c78a:	4b11      	ldr	r3, [pc, #68]	; (c7d0 <_svfiprintf_r+0x204>)
    c78c:	0029      	movs	r1, r5
    c78e:	9802      	ldr	r0, [sp, #8]
    c790:	e000      	b.n	c794 <_svfiprintf_r+0x1c8>
    c792:	bf00      	nop
    c794:	9003      	str	r0, [sp, #12]
    c796:	9b03      	ldr	r3, [sp, #12]
    c798:	3301      	adds	r3, #1
    c79a:	d1cc      	bne.n	c736 <_svfiprintf_r+0x16a>
    c79c:	89bb      	ldrh	r3, [r7, #12]
    c79e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c7a0:	065b      	lsls	r3, r3, #25
    c7a2:	d400      	bmi.n	c7a6 <_svfiprintf_r+0x1da>
    c7a4:	e729      	b.n	c5fa <_svfiprintf_r+0x2e>
    c7a6:	2001      	movs	r0, #1
    c7a8:	4240      	negs	r0, r0
    c7aa:	e726      	b.n	c5fa <_svfiprintf_r+0x2e>
    c7ac:	ab05      	add	r3, sp, #20
    c7ae:	9300      	str	r3, [sp, #0]
    c7b0:	003a      	movs	r2, r7
    c7b2:	4b07      	ldr	r3, [pc, #28]	; (c7d0 <_svfiprintf_r+0x204>)
    c7b4:	0029      	movs	r1, r5
    c7b6:	9802      	ldr	r0, [sp, #8]
    c7b8:	f000 f87a 	bl	c8b0 <_printf_i>
    c7bc:	e7ea      	b.n	c794 <_svfiprintf_r+0x1c8>
    c7be:	46c0      	nop			; (mov r8, r8)
    c7c0:	0000dba4 	.word	0x0000dba4
    c7c4:	0000dbaa 	.word	0x0000dbaa
    c7c8:	0000dbae 	.word	0x0000dbae
    c7cc:	00000000 	.word	0x00000000
    c7d0:	0000c509 	.word	0x0000c509

0000c7d4 <_printf_common>:
    c7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c7d6:	0015      	movs	r5, r2
    c7d8:	9301      	str	r3, [sp, #4]
    c7da:	688a      	ldr	r2, [r1, #8]
    c7dc:	690b      	ldr	r3, [r1, #16]
    c7de:	9000      	str	r0, [sp, #0]
    c7e0:	000c      	movs	r4, r1
    c7e2:	4293      	cmp	r3, r2
    c7e4:	da00      	bge.n	c7e8 <_printf_common+0x14>
    c7e6:	0013      	movs	r3, r2
    c7e8:	0022      	movs	r2, r4
    c7ea:	602b      	str	r3, [r5, #0]
    c7ec:	3243      	adds	r2, #67	; 0x43
    c7ee:	7812      	ldrb	r2, [r2, #0]
    c7f0:	2a00      	cmp	r2, #0
    c7f2:	d001      	beq.n	c7f8 <_printf_common+0x24>
    c7f4:	3301      	adds	r3, #1
    c7f6:	602b      	str	r3, [r5, #0]
    c7f8:	6823      	ldr	r3, [r4, #0]
    c7fa:	069b      	lsls	r3, r3, #26
    c7fc:	d502      	bpl.n	c804 <_printf_common+0x30>
    c7fe:	682b      	ldr	r3, [r5, #0]
    c800:	3302      	adds	r3, #2
    c802:	602b      	str	r3, [r5, #0]
    c804:	2706      	movs	r7, #6
    c806:	6823      	ldr	r3, [r4, #0]
    c808:	401f      	ands	r7, r3
    c80a:	d027      	beq.n	c85c <_printf_common+0x88>
    c80c:	0023      	movs	r3, r4
    c80e:	3343      	adds	r3, #67	; 0x43
    c810:	781b      	ldrb	r3, [r3, #0]
    c812:	1e5a      	subs	r2, r3, #1
    c814:	4193      	sbcs	r3, r2
    c816:	6822      	ldr	r2, [r4, #0]
    c818:	0692      	lsls	r2, r2, #26
    c81a:	d430      	bmi.n	c87e <_printf_common+0xaa>
    c81c:	0022      	movs	r2, r4
    c81e:	9901      	ldr	r1, [sp, #4]
    c820:	3243      	adds	r2, #67	; 0x43
    c822:	9800      	ldr	r0, [sp, #0]
    c824:	9e08      	ldr	r6, [sp, #32]
    c826:	47b0      	blx	r6
    c828:	1c43      	adds	r3, r0, #1
    c82a:	d025      	beq.n	c878 <_printf_common+0xa4>
    c82c:	2306      	movs	r3, #6
    c82e:	6820      	ldr	r0, [r4, #0]
    c830:	682a      	ldr	r2, [r5, #0]
    c832:	68e1      	ldr	r1, [r4, #12]
    c834:	4003      	ands	r3, r0
    c836:	2500      	movs	r5, #0
    c838:	2b04      	cmp	r3, #4
    c83a:	d103      	bne.n	c844 <_printf_common+0x70>
    c83c:	1a8d      	subs	r5, r1, r2
    c83e:	43eb      	mvns	r3, r5
    c840:	17db      	asrs	r3, r3, #31
    c842:	401d      	ands	r5, r3
    c844:	68a3      	ldr	r3, [r4, #8]
    c846:	6922      	ldr	r2, [r4, #16]
    c848:	4293      	cmp	r3, r2
    c84a:	dd01      	ble.n	c850 <_printf_common+0x7c>
    c84c:	1a9b      	subs	r3, r3, r2
    c84e:	18ed      	adds	r5, r5, r3
    c850:	2700      	movs	r7, #0
    c852:	42bd      	cmp	r5, r7
    c854:	d120      	bne.n	c898 <_printf_common+0xc4>
    c856:	2000      	movs	r0, #0
    c858:	e010      	b.n	c87c <_printf_common+0xa8>
    c85a:	3701      	adds	r7, #1
    c85c:	68e3      	ldr	r3, [r4, #12]
    c85e:	682a      	ldr	r2, [r5, #0]
    c860:	1a9b      	subs	r3, r3, r2
    c862:	429f      	cmp	r7, r3
    c864:	dad2      	bge.n	c80c <_printf_common+0x38>
    c866:	0022      	movs	r2, r4
    c868:	2301      	movs	r3, #1
    c86a:	3219      	adds	r2, #25
    c86c:	9901      	ldr	r1, [sp, #4]
    c86e:	9800      	ldr	r0, [sp, #0]
    c870:	9e08      	ldr	r6, [sp, #32]
    c872:	47b0      	blx	r6
    c874:	1c43      	adds	r3, r0, #1
    c876:	d1f0      	bne.n	c85a <_printf_common+0x86>
    c878:	2001      	movs	r0, #1
    c87a:	4240      	negs	r0, r0
    c87c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c87e:	2030      	movs	r0, #48	; 0x30
    c880:	18e1      	adds	r1, r4, r3
    c882:	3143      	adds	r1, #67	; 0x43
    c884:	7008      	strb	r0, [r1, #0]
    c886:	0021      	movs	r1, r4
    c888:	1c5a      	adds	r2, r3, #1
    c88a:	3145      	adds	r1, #69	; 0x45
    c88c:	7809      	ldrb	r1, [r1, #0]
    c88e:	18a2      	adds	r2, r4, r2
    c890:	3243      	adds	r2, #67	; 0x43
    c892:	3302      	adds	r3, #2
    c894:	7011      	strb	r1, [r2, #0]
    c896:	e7c1      	b.n	c81c <_printf_common+0x48>
    c898:	0022      	movs	r2, r4
    c89a:	2301      	movs	r3, #1
    c89c:	321a      	adds	r2, #26
    c89e:	9901      	ldr	r1, [sp, #4]
    c8a0:	9800      	ldr	r0, [sp, #0]
    c8a2:	9e08      	ldr	r6, [sp, #32]
    c8a4:	47b0      	blx	r6
    c8a6:	1c43      	adds	r3, r0, #1
    c8a8:	d0e6      	beq.n	c878 <_printf_common+0xa4>
    c8aa:	3701      	adds	r7, #1
    c8ac:	e7d1      	b.n	c852 <_printf_common+0x7e>
	...

0000c8b0 <_printf_i>:
    c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8b2:	b08b      	sub	sp, #44	; 0x2c
    c8b4:	9206      	str	r2, [sp, #24]
    c8b6:	000a      	movs	r2, r1
    c8b8:	3243      	adds	r2, #67	; 0x43
    c8ba:	9307      	str	r3, [sp, #28]
    c8bc:	9005      	str	r0, [sp, #20]
    c8be:	9204      	str	r2, [sp, #16]
    c8c0:	7e0a      	ldrb	r2, [r1, #24]
    c8c2:	000c      	movs	r4, r1
    c8c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8c6:	2a6e      	cmp	r2, #110	; 0x6e
    c8c8:	d100      	bne.n	c8cc <_printf_i+0x1c>
    c8ca:	e08f      	b.n	c9ec <_printf_i+0x13c>
    c8cc:	d817      	bhi.n	c8fe <_printf_i+0x4e>
    c8ce:	2a63      	cmp	r2, #99	; 0x63
    c8d0:	d02c      	beq.n	c92c <_printf_i+0x7c>
    c8d2:	d808      	bhi.n	c8e6 <_printf_i+0x36>
    c8d4:	2a00      	cmp	r2, #0
    c8d6:	d100      	bne.n	c8da <_printf_i+0x2a>
    c8d8:	e099      	b.n	ca0e <_printf_i+0x15e>
    c8da:	2a58      	cmp	r2, #88	; 0x58
    c8dc:	d054      	beq.n	c988 <_printf_i+0xd8>
    c8de:	0026      	movs	r6, r4
    c8e0:	3642      	adds	r6, #66	; 0x42
    c8e2:	7032      	strb	r2, [r6, #0]
    c8e4:	e029      	b.n	c93a <_printf_i+0x8a>
    c8e6:	2a64      	cmp	r2, #100	; 0x64
    c8e8:	d001      	beq.n	c8ee <_printf_i+0x3e>
    c8ea:	2a69      	cmp	r2, #105	; 0x69
    c8ec:	d1f7      	bne.n	c8de <_printf_i+0x2e>
    c8ee:	6821      	ldr	r1, [r4, #0]
    c8f0:	681a      	ldr	r2, [r3, #0]
    c8f2:	0608      	lsls	r0, r1, #24
    c8f4:	d523      	bpl.n	c93e <_printf_i+0x8e>
    c8f6:	1d11      	adds	r1, r2, #4
    c8f8:	6019      	str	r1, [r3, #0]
    c8fa:	6815      	ldr	r5, [r2, #0]
    c8fc:	e025      	b.n	c94a <_printf_i+0x9a>
    c8fe:	2a73      	cmp	r2, #115	; 0x73
    c900:	d100      	bne.n	c904 <_printf_i+0x54>
    c902:	e088      	b.n	ca16 <_printf_i+0x166>
    c904:	d808      	bhi.n	c918 <_printf_i+0x68>
    c906:	2a6f      	cmp	r2, #111	; 0x6f
    c908:	d029      	beq.n	c95e <_printf_i+0xae>
    c90a:	2a70      	cmp	r2, #112	; 0x70
    c90c:	d1e7      	bne.n	c8de <_printf_i+0x2e>
    c90e:	2220      	movs	r2, #32
    c910:	6809      	ldr	r1, [r1, #0]
    c912:	430a      	orrs	r2, r1
    c914:	6022      	str	r2, [r4, #0]
    c916:	e003      	b.n	c920 <_printf_i+0x70>
    c918:	2a75      	cmp	r2, #117	; 0x75
    c91a:	d020      	beq.n	c95e <_printf_i+0xae>
    c91c:	2a78      	cmp	r2, #120	; 0x78
    c91e:	d1de      	bne.n	c8de <_printf_i+0x2e>
    c920:	0022      	movs	r2, r4
    c922:	2178      	movs	r1, #120	; 0x78
    c924:	3245      	adds	r2, #69	; 0x45
    c926:	7011      	strb	r1, [r2, #0]
    c928:	4a6c      	ldr	r2, [pc, #432]	; (cadc <_printf_i+0x22c>)
    c92a:	e030      	b.n	c98e <_printf_i+0xde>
    c92c:	000e      	movs	r6, r1
    c92e:	681a      	ldr	r2, [r3, #0]
    c930:	3642      	adds	r6, #66	; 0x42
    c932:	1d11      	adds	r1, r2, #4
    c934:	6019      	str	r1, [r3, #0]
    c936:	6813      	ldr	r3, [r2, #0]
    c938:	7033      	strb	r3, [r6, #0]
    c93a:	2301      	movs	r3, #1
    c93c:	e079      	b.n	ca32 <_printf_i+0x182>
    c93e:	0649      	lsls	r1, r1, #25
    c940:	d5d9      	bpl.n	c8f6 <_printf_i+0x46>
    c942:	1d11      	adds	r1, r2, #4
    c944:	6019      	str	r1, [r3, #0]
    c946:	2300      	movs	r3, #0
    c948:	5ed5      	ldrsh	r5, [r2, r3]
    c94a:	2d00      	cmp	r5, #0
    c94c:	da03      	bge.n	c956 <_printf_i+0xa6>
    c94e:	232d      	movs	r3, #45	; 0x2d
    c950:	9a04      	ldr	r2, [sp, #16]
    c952:	426d      	negs	r5, r5
    c954:	7013      	strb	r3, [r2, #0]
    c956:	4b62      	ldr	r3, [pc, #392]	; (cae0 <_printf_i+0x230>)
    c958:	270a      	movs	r7, #10
    c95a:	9303      	str	r3, [sp, #12]
    c95c:	e02f      	b.n	c9be <_printf_i+0x10e>
    c95e:	6820      	ldr	r0, [r4, #0]
    c960:	6819      	ldr	r1, [r3, #0]
    c962:	0605      	lsls	r5, r0, #24
    c964:	d503      	bpl.n	c96e <_printf_i+0xbe>
    c966:	1d08      	adds	r0, r1, #4
    c968:	6018      	str	r0, [r3, #0]
    c96a:	680d      	ldr	r5, [r1, #0]
    c96c:	e005      	b.n	c97a <_printf_i+0xca>
    c96e:	0640      	lsls	r0, r0, #25
    c970:	d5f9      	bpl.n	c966 <_printf_i+0xb6>
    c972:	680d      	ldr	r5, [r1, #0]
    c974:	1d08      	adds	r0, r1, #4
    c976:	6018      	str	r0, [r3, #0]
    c978:	b2ad      	uxth	r5, r5
    c97a:	4b59      	ldr	r3, [pc, #356]	; (cae0 <_printf_i+0x230>)
    c97c:	2708      	movs	r7, #8
    c97e:	9303      	str	r3, [sp, #12]
    c980:	2a6f      	cmp	r2, #111	; 0x6f
    c982:	d018      	beq.n	c9b6 <_printf_i+0x106>
    c984:	270a      	movs	r7, #10
    c986:	e016      	b.n	c9b6 <_printf_i+0x106>
    c988:	3145      	adds	r1, #69	; 0x45
    c98a:	700a      	strb	r2, [r1, #0]
    c98c:	4a54      	ldr	r2, [pc, #336]	; (cae0 <_printf_i+0x230>)
    c98e:	9203      	str	r2, [sp, #12]
    c990:	681a      	ldr	r2, [r3, #0]
    c992:	6821      	ldr	r1, [r4, #0]
    c994:	1d10      	adds	r0, r2, #4
    c996:	6018      	str	r0, [r3, #0]
    c998:	6815      	ldr	r5, [r2, #0]
    c99a:	0608      	lsls	r0, r1, #24
    c99c:	d522      	bpl.n	c9e4 <_printf_i+0x134>
    c99e:	07cb      	lsls	r3, r1, #31
    c9a0:	d502      	bpl.n	c9a8 <_printf_i+0xf8>
    c9a2:	2320      	movs	r3, #32
    c9a4:	4319      	orrs	r1, r3
    c9a6:	6021      	str	r1, [r4, #0]
    c9a8:	2710      	movs	r7, #16
    c9aa:	2d00      	cmp	r5, #0
    c9ac:	d103      	bne.n	c9b6 <_printf_i+0x106>
    c9ae:	2320      	movs	r3, #32
    c9b0:	6822      	ldr	r2, [r4, #0]
    c9b2:	439a      	bics	r2, r3
    c9b4:	6022      	str	r2, [r4, #0]
    c9b6:	0023      	movs	r3, r4
    c9b8:	2200      	movs	r2, #0
    c9ba:	3343      	adds	r3, #67	; 0x43
    c9bc:	701a      	strb	r2, [r3, #0]
    c9be:	6863      	ldr	r3, [r4, #4]
    c9c0:	60a3      	str	r3, [r4, #8]
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	db5c      	blt.n	ca80 <_printf_i+0x1d0>
    c9c6:	2204      	movs	r2, #4
    c9c8:	6821      	ldr	r1, [r4, #0]
    c9ca:	4391      	bics	r1, r2
    c9cc:	6021      	str	r1, [r4, #0]
    c9ce:	2d00      	cmp	r5, #0
    c9d0:	d158      	bne.n	ca84 <_printf_i+0x1d4>
    c9d2:	9e04      	ldr	r6, [sp, #16]
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d064      	beq.n	caa2 <_printf_i+0x1f2>
    c9d8:	0026      	movs	r6, r4
    c9da:	9b03      	ldr	r3, [sp, #12]
    c9dc:	3642      	adds	r6, #66	; 0x42
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	7033      	strb	r3, [r6, #0]
    c9e2:	e05e      	b.n	caa2 <_printf_i+0x1f2>
    c9e4:	0648      	lsls	r0, r1, #25
    c9e6:	d5da      	bpl.n	c99e <_printf_i+0xee>
    c9e8:	b2ad      	uxth	r5, r5
    c9ea:	e7d8      	b.n	c99e <_printf_i+0xee>
    c9ec:	6809      	ldr	r1, [r1, #0]
    c9ee:	681a      	ldr	r2, [r3, #0]
    c9f0:	0608      	lsls	r0, r1, #24
    c9f2:	d505      	bpl.n	ca00 <_printf_i+0x150>
    c9f4:	1d11      	adds	r1, r2, #4
    c9f6:	6019      	str	r1, [r3, #0]
    c9f8:	6813      	ldr	r3, [r2, #0]
    c9fa:	6962      	ldr	r2, [r4, #20]
    c9fc:	601a      	str	r2, [r3, #0]
    c9fe:	e006      	b.n	ca0e <_printf_i+0x15e>
    ca00:	0649      	lsls	r1, r1, #25
    ca02:	d5f7      	bpl.n	c9f4 <_printf_i+0x144>
    ca04:	1d11      	adds	r1, r2, #4
    ca06:	6019      	str	r1, [r3, #0]
    ca08:	6813      	ldr	r3, [r2, #0]
    ca0a:	8aa2      	ldrh	r2, [r4, #20]
    ca0c:	801a      	strh	r2, [r3, #0]
    ca0e:	2300      	movs	r3, #0
    ca10:	9e04      	ldr	r6, [sp, #16]
    ca12:	6123      	str	r3, [r4, #16]
    ca14:	e054      	b.n	cac0 <_printf_i+0x210>
    ca16:	681a      	ldr	r2, [r3, #0]
    ca18:	1d11      	adds	r1, r2, #4
    ca1a:	6019      	str	r1, [r3, #0]
    ca1c:	6816      	ldr	r6, [r2, #0]
    ca1e:	2100      	movs	r1, #0
    ca20:	6862      	ldr	r2, [r4, #4]
    ca22:	0030      	movs	r0, r6
    ca24:	f000 f8f6 	bl	cc14 <memchr>
    ca28:	2800      	cmp	r0, #0
    ca2a:	d001      	beq.n	ca30 <_printf_i+0x180>
    ca2c:	1b80      	subs	r0, r0, r6
    ca2e:	6060      	str	r0, [r4, #4]
    ca30:	6863      	ldr	r3, [r4, #4]
    ca32:	6123      	str	r3, [r4, #16]
    ca34:	2300      	movs	r3, #0
    ca36:	9a04      	ldr	r2, [sp, #16]
    ca38:	7013      	strb	r3, [r2, #0]
    ca3a:	e041      	b.n	cac0 <_printf_i+0x210>
    ca3c:	6923      	ldr	r3, [r4, #16]
    ca3e:	0032      	movs	r2, r6
    ca40:	9906      	ldr	r1, [sp, #24]
    ca42:	9805      	ldr	r0, [sp, #20]
    ca44:	9d07      	ldr	r5, [sp, #28]
    ca46:	47a8      	blx	r5
    ca48:	1c43      	adds	r3, r0, #1
    ca4a:	d043      	beq.n	cad4 <_printf_i+0x224>
    ca4c:	6823      	ldr	r3, [r4, #0]
    ca4e:	2500      	movs	r5, #0
    ca50:	079b      	lsls	r3, r3, #30
    ca52:	d40f      	bmi.n	ca74 <_printf_i+0x1c4>
    ca54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca56:	68e0      	ldr	r0, [r4, #12]
    ca58:	4298      	cmp	r0, r3
    ca5a:	da3d      	bge.n	cad8 <_printf_i+0x228>
    ca5c:	0018      	movs	r0, r3
    ca5e:	e03b      	b.n	cad8 <_printf_i+0x228>
    ca60:	0022      	movs	r2, r4
    ca62:	2301      	movs	r3, #1
    ca64:	3219      	adds	r2, #25
    ca66:	9906      	ldr	r1, [sp, #24]
    ca68:	9805      	ldr	r0, [sp, #20]
    ca6a:	9e07      	ldr	r6, [sp, #28]
    ca6c:	47b0      	blx	r6
    ca6e:	1c43      	adds	r3, r0, #1
    ca70:	d030      	beq.n	cad4 <_printf_i+0x224>
    ca72:	3501      	adds	r5, #1
    ca74:	68e3      	ldr	r3, [r4, #12]
    ca76:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca78:	1a9b      	subs	r3, r3, r2
    ca7a:	429d      	cmp	r5, r3
    ca7c:	dbf0      	blt.n	ca60 <_printf_i+0x1b0>
    ca7e:	e7e9      	b.n	ca54 <_printf_i+0x1a4>
    ca80:	2d00      	cmp	r5, #0
    ca82:	d0a9      	beq.n	c9d8 <_printf_i+0x128>
    ca84:	9e04      	ldr	r6, [sp, #16]
    ca86:	0028      	movs	r0, r5
    ca88:	0039      	movs	r1, r7
    ca8a:	f7ff f891 	bl	bbb0 <__aeabi_uidivmod>
    ca8e:	9b03      	ldr	r3, [sp, #12]
    ca90:	3e01      	subs	r6, #1
    ca92:	5c5b      	ldrb	r3, [r3, r1]
    ca94:	0028      	movs	r0, r5
    ca96:	7033      	strb	r3, [r6, #0]
    ca98:	0039      	movs	r1, r7
    ca9a:	f7ff f803 	bl	baa4 <__udivsi3>
    ca9e:	1e05      	subs	r5, r0, #0
    caa0:	d1f1      	bne.n	ca86 <_printf_i+0x1d6>
    caa2:	2f08      	cmp	r7, #8
    caa4:	d109      	bne.n	caba <_printf_i+0x20a>
    caa6:	6823      	ldr	r3, [r4, #0]
    caa8:	07db      	lsls	r3, r3, #31
    caaa:	d506      	bpl.n	caba <_printf_i+0x20a>
    caac:	6863      	ldr	r3, [r4, #4]
    caae:	6922      	ldr	r2, [r4, #16]
    cab0:	4293      	cmp	r3, r2
    cab2:	dc02      	bgt.n	caba <_printf_i+0x20a>
    cab4:	2330      	movs	r3, #48	; 0x30
    cab6:	3e01      	subs	r6, #1
    cab8:	7033      	strb	r3, [r6, #0]
    caba:	9b04      	ldr	r3, [sp, #16]
    cabc:	1b9b      	subs	r3, r3, r6
    cabe:	6123      	str	r3, [r4, #16]
    cac0:	9b07      	ldr	r3, [sp, #28]
    cac2:	aa09      	add	r2, sp, #36	; 0x24
    cac4:	9300      	str	r3, [sp, #0]
    cac6:	0021      	movs	r1, r4
    cac8:	9b06      	ldr	r3, [sp, #24]
    caca:	9805      	ldr	r0, [sp, #20]
    cacc:	f7ff fe82 	bl	c7d4 <_printf_common>
    cad0:	1c43      	adds	r3, r0, #1
    cad2:	d1b3      	bne.n	ca3c <_printf_i+0x18c>
    cad4:	2001      	movs	r0, #1
    cad6:	4240      	negs	r0, r0
    cad8:	b00b      	add	sp, #44	; 0x2c
    cada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cadc:	0000dbc6 	.word	0x0000dbc6
    cae0:	0000dbb5 	.word	0x0000dbb5

0000cae4 <__sread>:
    cae4:	b570      	push	{r4, r5, r6, lr}
    cae6:	000c      	movs	r4, r1
    cae8:	250e      	movs	r5, #14
    caea:	5f49      	ldrsh	r1, [r1, r5]
    caec:	f000 f8d6 	bl	cc9c <_read_r>
    caf0:	2800      	cmp	r0, #0
    caf2:	db03      	blt.n	cafc <__sread+0x18>
    caf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    caf6:	181b      	adds	r3, r3, r0
    caf8:	6563      	str	r3, [r4, #84]	; 0x54
    cafa:	bd70      	pop	{r4, r5, r6, pc}
    cafc:	89a3      	ldrh	r3, [r4, #12]
    cafe:	4a02      	ldr	r2, [pc, #8]	; (cb08 <__sread+0x24>)
    cb00:	4013      	ands	r3, r2
    cb02:	81a3      	strh	r3, [r4, #12]
    cb04:	e7f9      	b.n	cafa <__sread+0x16>
    cb06:	46c0      	nop			; (mov r8, r8)
    cb08:	ffffefff 	.word	0xffffefff

0000cb0c <__swrite>:
    cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb0e:	001f      	movs	r7, r3
    cb10:	898b      	ldrh	r3, [r1, #12]
    cb12:	0005      	movs	r5, r0
    cb14:	000c      	movs	r4, r1
    cb16:	0016      	movs	r6, r2
    cb18:	05db      	lsls	r3, r3, #23
    cb1a:	d505      	bpl.n	cb28 <__swrite+0x1c>
    cb1c:	230e      	movs	r3, #14
    cb1e:	5ec9      	ldrsh	r1, [r1, r3]
    cb20:	2200      	movs	r2, #0
    cb22:	2302      	movs	r3, #2
    cb24:	f000 f862 	bl	cbec <_lseek_r>
    cb28:	89a3      	ldrh	r3, [r4, #12]
    cb2a:	4a05      	ldr	r2, [pc, #20]	; (cb40 <__swrite+0x34>)
    cb2c:	0028      	movs	r0, r5
    cb2e:	4013      	ands	r3, r2
    cb30:	81a3      	strh	r3, [r4, #12]
    cb32:	0032      	movs	r2, r6
    cb34:	230e      	movs	r3, #14
    cb36:	5ee1      	ldrsh	r1, [r4, r3]
    cb38:	003b      	movs	r3, r7
    cb3a:	f000 f81f 	bl	cb7c <_write_r>
    cb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb40:	ffffefff 	.word	0xffffefff

0000cb44 <__sseek>:
    cb44:	b570      	push	{r4, r5, r6, lr}
    cb46:	000c      	movs	r4, r1
    cb48:	250e      	movs	r5, #14
    cb4a:	5f49      	ldrsh	r1, [r1, r5]
    cb4c:	f000 f84e 	bl	cbec <_lseek_r>
    cb50:	89a3      	ldrh	r3, [r4, #12]
    cb52:	1c42      	adds	r2, r0, #1
    cb54:	d103      	bne.n	cb5e <__sseek+0x1a>
    cb56:	4a05      	ldr	r2, [pc, #20]	; (cb6c <__sseek+0x28>)
    cb58:	4013      	ands	r3, r2
    cb5a:	81a3      	strh	r3, [r4, #12]
    cb5c:	bd70      	pop	{r4, r5, r6, pc}
    cb5e:	2280      	movs	r2, #128	; 0x80
    cb60:	0152      	lsls	r2, r2, #5
    cb62:	4313      	orrs	r3, r2
    cb64:	81a3      	strh	r3, [r4, #12]
    cb66:	6560      	str	r0, [r4, #84]	; 0x54
    cb68:	e7f8      	b.n	cb5c <__sseek+0x18>
    cb6a:	46c0      	nop			; (mov r8, r8)
    cb6c:	ffffefff 	.word	0xffffefff

0000cb70 <__sclose>:
    cb70:	b510      	push	{r4, lr}
    cb72:	230e      	movs	r3, #14
    cb74:	5ec9      	ldrsh	r1, [r1, r3]
    cb76:	f000 f815 	bl	cba4 <_close_r>
    cb7a:	bd10      	pop	{r4, pc}

0000cb7c <_write_r>:
    cb7c:	b570      	push	{r4, r5, r6, lr}
    cb7e:	0005      	movs	r5, r0
    cb80:	0008      	movs	r0, r1
    cb82:	0011      	movs	r1, r2
    cb84:	2200      	movs	r2, #0
    cb86:	4c06      	ldr	r4, [pc, #24]	; (cba0 <_write_r+0x24>)
    cb88:	6022      	str	r2, [r4, #0]
    cb8a:	001a      	movs	r2, r3
    cb8c:	f7fa f93c 	bl	6e08 <_write>
    cb90:	1c43      	adds	r3, r0, #1
    cb92:	d103      	bne.n	cb9c <_write_r+0x20>
    cb94:	6823      	ldr	r3, [r4, #0]
    cb96:	2b00      	cmp	r3, #0
    cb98:	d000      	beq.n	cb9c <_write_r+0x20>
    cb9a:	602b      	str	r3, [r5, #0]
    cb9c:	bd70      	pop	{r4, r5, r6, pc}
    cb9e:	46c0      	nop			; (mov r8, r8)
    cba0:	20000c90 	.word	0x20000c90

0000cba4 <_close_r>:
    cba4:	2300      	movs	r3, #0
    cba6:	b570      	push	{r4, r5, r6, lr}
    cba8:	4c06      	ldr	r4, [pc, #24]	; (cbc4 <_close_r+0x20>)
    cbaa:	0005      	movs	r5, r0
    cbac:	0008      	movs	r0, r1
    cbae:	6023      	str	r3, [r4, #0]
    cbb0:	f7fa f97e 	bl	6eb0 <_close>
    cbb4:	1c43      	adds	r3, r0, #1
    cbb6:	d103      	bne.n	cbc0 <_close_r+0x1c>
    cbb8:	6823      	ldr	r3, [r4, #0]
    cbba:	2b00      	cmp	r3, #0
    cbbc:	d000      	beq.n	cbc0 <_close_r+0x1c>
    cbbe:	602b      	str	r3, [r5, #0]
    cbc0:	bd70      	pop	{r4, r5, r6, pc}
    cbc2:	46c0      	nop			; (mov r8, r8)
    cbc4:	20000c90 	.word	0x20000c90

0000cbc8 <_fstat_r>:
    cbc8:	2300      	movs	r3, #0
    cbca:	b570      	push	{r4, r5, r6, lr}
    cbcc:	4c06      	ldr	r4, [pc, #24]	; (cbe8 <_fstat_r+0x20>)
    cbce:	0005      	movs	r5, r0
    cbd0:	0008      	movs	r0, r1
    cbd2:	0011      	movs	r1, r2
    cbd4:	6023      	str	r3, [r4, #0]
    cbd6:	f7fa f975 	bl	6ec4 <_fstat>
    cbda:	1c43      	adds	r3, r0, #1
    cbdc:	d103      	bne.n	cbe6 <_fstat_r+0x1e>
    cbde:	6823      	ldr	r3, [r4, #0]
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d000      	beq.n	cbe6 <_fstat_r+0x1e>
    cbe4:	602b      	str	r3, [r5, #0]
    cbe6:	bd70      	pop	{r4, r5, r6, pc}
    cbe8:	20000c90 	.word	0x20000c90

0000cbec <_lseek_r>:
    cbec:	b570      	push	{r4, r5, r6, lr}
    cbee:	0005      	movs	r5, r0
    cbf0:	0008      	movs	r0, r1
    cbf2:	0011      	movs	r1, r2
    cbf4:	2200      	movs	r2, #0
    cbf6:	4c06      	ldr	r4, [pc, #24]	; (cc10 <_lseek_r+0x24>)
    cbf8:	6022      	str	r2, [r4, #0]
    cbfa:	001a      	movs	r2, r3
    cbfc:	f7fa f970 	bl	6ee0 <_lseek>
    cc00:	1c43      	adds	r3, r0, #1
    cc02:	d103      	bne.n	cc0c <_lseek_r+0x20>
    cc04:	6823      	ldr	r3, [r4, #0]
    cc06:	2b00      	cmp	r3, #0
    cc08:	d000      	beq.n	cc0c <_lseek_r+0x20>
    cc0a:	602b      	str	r3, [r5, #0]
    cc0c:	bd70      	pop	{r4, r5, r6, pc}
    cc0e:	46c0      	nop			; (mov r8, r8)
    cc10:	20000c90 	.word	0x20000c90

0000cc14 <memchr>:
    cc14:	b2c9      	uxtb	r1, r1
    cc16:	1882      	adds	r2, r0, r2
    cc18:	4290      	cmp	r0, r2
    cc1a:	d101      	bne.n	cc20 <memchr+0xc>
    cc1c:	2000      	movs	r0, #0
    cc1e:	4770      	bx	lr
    cc20:	7803      	ldrb	r3, [r0, #0]
    cc22:	428b      	cmp	r3, r1
    cc24:	d0fb      	beq.n	cc1e <memchr+0xa>
    cc26:	3001      	adds	r0, #1
    cc28:	e7f6      	b.n	cc18 <memchr+0x4>

0000cc2a <memmove>:
    cc2a:	b510      	push	{r4, lr}
    cc2c:	4288      	cmp	r0, r1
    cc2e:	d902      	bls.n	cc36 <memmove+0xc>
    cc30:	188b      	adds	r3, r1, r2
    cc32:	4298      	cmp	r0, r3
    cc34:	d308      	bcc.n	cc48 <memmove+0x1e>
    cc36:	2300      	movs	r3, #0
    cc38:	429a      	cmp	r2, r3
    cc3a:	d007      	beq.n	cc4c <memmove+0x22>
    cc3c:	5ccc      	ldrb	r4, [r1, r3]
    cc3e:	54c4      	strb	r4, [r0, r3]
    cc40:	3301      	adds	r3, #1
    cc42:	e7f9      	b.n	cc38 <memmove+0xe>
    cc44:	5c8b      	ldrb	r3, [r1, r2]
    cc46:	5483      	strb	r3, [r0, r2]
    cc48:	3a01      	subs	r2, #1
    cc4a:	d2fb      	bcs.n	cc44 <memmove+0x1a>
    cc4c:	bd10      	pop	{r4, pc}

0000cc4e <_realloc_r>:
    cc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc50:	0007      	movs	r7, r0
    cc52:	000d      	movs	r5, r1
    cc54:	0016      	movs	r6, r2
    cc56:	2900      	cmp	r1, #0
    cc58:	d105      	bne.n	cc66 <_realloc_r+0x18>
    cc5a:	0011      	movs	r1, r2
    cc5c:	f7ff f94c 	bl	bef8 <_malloc_r>
    cc60:	0004      	movs	r4, r0
    cc62:	0020      	movs	r0, r4
    cc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc66:	2a00      	cmp	r2, #0
    cc68:	d103      	bne.n	cc72 <_realloc_r+0x24>
    cc6a:	f7ff f8fb 	bl	be64 <_free_r>
    cc6e:	0034      	movs	r4, r6
    cc70:	e7f7      	b.n	cc62 <_realloc_r+0x14>
    cc72:	f000 f827 	bl	ccc4 <_malloc_usable_size_r>
    cc76:	002c      	movs	r4, r5
    cc78:	4286      	cmp	r6, r0
    cc7a:	d9f2      	bls.n	cc62 <_realloc_r+0x14>
    cc7c:	0031      	movs	r1, r6
    cc7e:	0038      	movs	r0, r7
    cc80:	f7ff f93a 	bl	bef8 <_malloc_r>
    cc84:	1e04      	subs	r4, r0, #0
    cc86:	d0ec      	beq.n	cc62 <_realloc_r+0x14>
    cc88:	0029      	movs	r1, r5
    cc8a:	0032      	movs	r2, r6
    cc8c:	f7ff f8d8 	bl	be40 <memcpy>
    cc90:	0029      	movs	r1, r5
    cc92:	0038      	movs	r0, r7
    cc94:	f7ff f8e6 	bl	be64 <_free_r>
    cc98:	e7e3      	b.n	cc62 <_realloc_r+0x14>
	...

0000cc9c <_read_r>:
    cc9c:	b570      	push	{r4, r5, r6, lr}
    cc9e:	0005      	movs	r5, r0
    cca0:	0008      	movs	r0, r1
    cca2:	0011      	movs	r1, r2
    cca4:	2200      	movs	r2, #0
    cca6:	4c06      	ldr	r4, [pc, #24]	; (ccc0 <_read_r+0x24>)
    cca8:	6022      	str	r2, [r4, #0]
    ccaa:	001a      	movs	r2, r3
    ccac:	f7fa f882 	bl	6db4 <_read>
    ccb0:	1c43      	adds	r3, r0, #1
    ccb2:	d103      	bne.n	ccbc <_read_r+0x20>
    ccb4:	6823      	ldr	r3, [r4, #0]
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	d000      	beq.n	ccbc <_read_r+0x20>
    ccba:	602b      	str	r3, [r5, #0]
    ccbc:	bd70      	pop	{r4, r5, r6, pc}
    ccbe:	46c0      	nop			; (mov r8, r8)
    ccc0:	20000c90 	.word	0x20000c90

0000ccc4 <_malloc_usable_size_r>:
    ccc4:	1f0b      	subs	r3, r1, #4
    ccc6:	681b      	ldr	r3, [r3, #0]
    ccc8:	1f18      	subs	r0, r3, #4
    ccca:	2b00      	cmp	r3, #0
    cccc:	da01      	bge.n	ccd2 <_malloc_usable_size_r+0xe>
    ccce:	580b      	ldr	r3, [r1, r0]
    ccd0:	18c0      	adds	r0, r0, r3
    ccd2:	4770      	bx	lr
    ccd4:	000006a8 	.word	0x000006a8
    ccd8:	000006a8 	.word	0x000006a8
    ccdc:	0000069c 	.word	0x0000069c
    cce0:	000006a8 	.word	0x000006a8
    cce4:	0000069c 	.word	0x0000069c
    cce8:	00000676 	.word	0x00000676
    ccec:	00000676 	.word	0x00000676
    ccf0:	000006a8 	.word	0x000006a8
    ccf4:	000006a8 	.word	0x000006a8
    ccf8:	000006a8 	.word	0x000006a8
    ccfc:	000006a8 	.word	0x000006a8
    cd00:	000006a8 	.word	0x000006a8
    cd04:	000006a8 	.word	0x000006a8
    cd08:	000006a8 	.word	0x000006a8
    cd0c:	000006a8 	.word	0x000006a8
    cd10:	000006a8 	.word	0x000006a8
    cd14:	000006a8 	.word	0x000006a8
    cd18:	000006a8 	.word	0x000006a8
    cd1c:	000006a8 	.word	0x000006a8
    cd20:	000006a8 	.word	0x000006a8
    cd24:	000006a8 	.word	0x000006a8
    cd28:	000006a8 	.word	0x000006a8
    cd2c:	000006a8 	.word	0x000006a8
    cd30:	000006a8 	.word	0x000006a8
    cd34:	000006a8 	.word	0x000006a8
    cd38:	000006a8 	.word	0x000006a8
    cd3c:	000006a8 	.word	0x000006a8
    cd40:	000006a8 	.word	0x000006a8
    cd44:	000006a8 	.word	0x000006a8
    cd48:	000006a8 	.word	0x000006a8
    cd4c:	000006a8 	.word	0x000006a8
    cd50:	000006a8 	.word	0x000006a8
    cd54:	000006a8 	.word	0x000006a8
    cd58:	000006a8 	.word	0x000006a8
    cd5c:	000006a8 	.word	0x000006a8
    cd60:	000006a8 	.word	0x000006a8
    cd64:	000006a8 	.word	0x000006a8
    cd68:	000006a8 	.word	0x000006a8
    cd6c:	000006a8 	.word	0x000006a8
    cd70:	000006a8 	.word	0x000006a8
    cd74:	000006a8 	.word	0x000006a8
    cd78:	000006a8 	.word	0x000006a8
    cd7c:	000006a8 	.word	0x000006a8
    cd80:	000006a8 	.word	0x000006a8
    cd84:	000006a8 	.word	0x000006a8
    cd88:	000006a8 	.word	0x000006a8
    cd8c:	000006a8 	.word	0x000006a8
    cd90:	000006a8 	.word	0x000006a8
    cd94:	000006a8 	.word	0x000006a8
    cd98:	000006a8 	.word	0x000006a8
    cd9c:	000006a8 	.word	0x000006a8
    cda0:	000006a8 	.word	0x000006a8
    cda4:	000006a8 	.word	0x000006a8
    cda8:	000006a8 	.word	0x000006a8
    cdac:	000006a8 	.word	0x000006a8
    cdb0:	000006a8 	.word	0x000006a8
    cdb4:	000006a8 	.word	0x000006a8
    cdb8:	000006a8 	.word	0x000006a8
    cdbc:	000006a8 	.word	0x000006a8
    cdc0:	000006a8 	.word	0x000006a8
    cdc4:	000006a8 	.word	0x000006a8
    cdc8:	000006a8 	.word	0x000006a8
    cdcc:	000006a8 	.word	0x000006a8
    cdd0:	000006a8 	.word	0x000006a8
    cdd4:	0000069c 	.word	0x0000069c
    cdd8:	0000069c 	.word	0x0000069c
    cddc:	000006b2 	.word	0x000006b2
    cde0:	000006b2 	.word	0x000006b2
    cde4:	000006b2 	.word	0x000006b2
    cde8:	000006b2 	.word	0x000006b2

0000cdec <sd_mmc_trans_units>:
    cdec:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000ce08 <sd_trans_multipliers>:
    ce08:	00000000 0000000a 0000000c 0000000d     ................
    ce18:	0000000f 00000014 00000019 0000001e     ................
    ce28:	00000023 00000028 0000002d 00000032     #...(...-...2...
    ce38:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000ce48 <mmc_trans_multipliers>:
    ce48:	00000000 0000000a 0000000c 0000000d     ................
    ce58:	0000000f 00000014 0000001a 0000001e     ................
    ce68:	00000023 00000028 0000002d 00000034     #...(...-...4...
    ce78:	00000037 0000003c 00000046 00000050     7...<...F...P...
    ce88:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    ce98:	22302074 00000000                       t 0"....

0000cea0 <lun_desc>:
    cea0:	0000221d 00002275 000022c1 0000230d     ."..u"..."...#..
    ceb0:	0000233d 000023c1 00002451 0000ce88     =#...#..Q$......
    cec0:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    ced0:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    cee0:	00005f32 00005fac 00005fac 00005f50     2_..._..._..P_..
    cef0:	00005f4a 00005f56 00005f38 00005f5c     J_..V_..8_..\_..
    cf00:	00005f92 00006278 000062c8 000062c8     ._..xb...b...b..
    cf10:	000062c4 0000626a 0000628a 0000625a     .b..jb...b..Zb..
    cf20:	0000629c 000062ae 00006316 00006344     .b...b...c..Dc..
    cf30:	00006344 00006340 00006310 0000631c     Dc..@c...c...c..
    cf40:	0000630a 00006322 00006328              .c.."c..(c..

0000cf4c <LfnOfs>:
    cf4c:	07050301 12100e09 1c181614 0000001e     ................
    cf5c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    cf6c:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    cf7c:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    cf8c:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    cf9c:	20205441 00202020                       AT     .

0000cfa4 <excvt.4558>:
    cfa4:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    cfb4:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    cfc4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    cfd4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    cfe4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    cff4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    d004:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    d014:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000d024 <Tbl>:
    d024:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    d034:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    d044:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    d054:	00d600ff 00f800dc 00d800a3 019200d7     ................
    d064:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    d074:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    d084:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    d094:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    d0a4:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    d0b4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    d0c4:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    d0d4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    d0e4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    d0f4:	00da00de 00d900db 00dd00fd 00b400af     ................
    d104:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    d114:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000d124 <tbl_lower.4308>:
    d124:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    d134:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    d144:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    d154:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    d164:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    d174:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    d184:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    d194:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    d1a4:	01050103 01090107 010d010b 0111010f     ................
    d1b4:	01150113 01190117 011d011b 0121011f     ..............!.
    d1c4:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    d1d4:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    d1e4:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    d1f4:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    d204:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    d214:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    d224:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    d234:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    d244:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    d254:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    d264:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    d274:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    d284:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    d294:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    d2a4:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    d2b4:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    d2c4:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    d2d4:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    d2e4:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    d2f4:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000d304 <tbl_upper.4309>:
    d304:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    d314:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    d324:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    d334:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    d344:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    d354:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    d364:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    d374:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    d384:	01040102 01080106 010c010a 0110010e     ................
    d394:	01140112 01180116 011c011a 0120011e     .............. .
    d3a4:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    d3b4:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    d3c4:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    d3d4:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    d3e4:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    d3f4:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    d404:	03940393 03960395 03980397 039a0399     ................
    d414:	039c039b 039e039d 03a0039f 03a303a1     ................
    d424:	03a503a4 03a703a6 03a903a8 041003aa     ................
    d434:	04120411 04140413 04160415 04180417     ................
    d444:	041a0419 041c041b 041e041d 0420041f     .............. .
    d454:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    d464:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    d474:	04030402 04050404 04070406 04090408     ................
    d484:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    d494:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    d4a4:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    d4b4:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    d4c4:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    d4d4:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    d4e4:	20435243 636c6163 74616c75 206e6f69     CRC calculation 
    d4f4:	6c696166 0d216465 0000000a 706d6f43     failed!.....Comp
    d504:	64657475 43524320 7830203a 58383025     uted CRC: 0x%08X
    d514:	00000a0d 20435243 6d73696d 68637461     ....CRC mismatch
    d524:	78452021 74636570 203a6465 30257830     ! Expected: 0x%0
    d534:	202c5838 3a746f47 25783020 0d583830     8X, Got: 0x%08X.
    d544:	0000000a 20435243 6374616d 46202168     ....CRC match! F
    d554:	776d7269 20657261 65746e69 74697267     irmware integrit
    d564:	65762079 69666972 0d2e6465 0000000a     y verified......
    d574:	35455345 20303631 4e45202d 20524554     ESE5160 - ENTER 
    d584:	544f4f42 44414f4c 0a0d5245 00000000     BOOTLOADER......
    d594:	2d0d0a0c 4453202d 434d4d2f 72614320     ...-- SD/MMC Car
    d5a4:	78452064 6c706d61 6e6f2065 74614620     d Example on Fat
    d5b4:	2d207346 000d0a2d 43204453 20445241     Fs --...SD CARD 
    d5c4:	6c696166 20216465 63656843 6f79206b     failed! Check yo
    d5d4:	63207275 656e6e6f 6f697463 202e736e     ur connections. 
    d5e4:	74737953 77206d65 206c6c69 74736572     System will rest
    d5f4:	20747261 35206e69 63657320 73646e6f     art in 5 seconds
    d604:	0d2e2e2e 0000000a 43204453 20445241     ........SD CARD 
    d614:	6e756f6d 75732074 73656363 46202173     mount success! F
    d624:	73656c69 65747379 6c61206d 6d206f73     ilesystem also m
    d634:	746e756f 0d2e6465 0000000a 6c463a30     ounted......0:Fl
    d644:	2e416761 00747874 67616c46 78742e41     agA.txt.FlagA.tx
    d654:	65642074 74636574 2d206465 64707520     t detected - upd
    d664:	6e697461 69662067 61776d72 66206572     ating firmware f
    d674:	206d6f72 6c707061 74616369 2e6e6f69     rom application.
    d684:	2e6e6962 0a0d2e2e 00000000 70613a30     bin.........0:ap
    d694:	63696c70 6f697461 69622e6e 0000006e     plication.bin...
    d6a4:	6f727245 70752072 69746164 6620676e     Error updating f
    d6b4:	776d7269 20657261 6d6f7266 70706120     irmware from app
    d6c4:	6163696c 6e6f6974 6e69622e 000a0d2e     lication.bin....
    d6d4:	6c6c6146 20676e69 6b636162 206f7420     Falling back to 
    d6e4:	70615f67 63696c70 6f697461 69622e6e     g_application.bi
    d6f4:	2e2e2e6e 00000a0d 5f673a30 6c707061     n.......0:g_appl
    d704:	74616369 2e6e6f69 006e6962 6f727245     ication.bin.Erro
    d714:	70752072 69746164 6620676e 776d7269     r updating firmw
    d724:	20657261 6d6f7266 615f6720 696c7070     are from g_appli
    d734:	69746163 622e6e6f 0d2e6e69 0000000a     cation.bin......
    d744:	75206f4e 74616470 6c662065 66206761     No update flag f
    d754:	646e756f 6f47202e 206f7420 20656874     ound. Go to the 
    d764:	6d726966 65726177 206e6920 20656874     firmware in the 
    d774:	73616c66 0a0d2e68 00000000 35455345     flash.......ESE5
    d784:	20303631 5845202d 42205449 4c544f4f     160 - EXIT BOOTL
    d794:	4544414f 000a0d52 43204453 20647261     OADER...SD Card 
    d7a4:	74696e69 65746169 6f632064 63657272     initiated correc
    d7b4:	21796c74 00000a0d 6e756f4d 69642074     tly!....Mount di
    d7c4:	28206b73 6f6d5f66 29746e75 0d2e2e2e     sk (f_mount)....
    d7d4:	0000000a 4941465b 72205d4c 25207365     ....[FAIL] res %
    d7e4:	000a0d64 5d4b4f5b 00000a0d 61657243     d...[OK]....Crea
    d7f4:	61206574 6c696620 66282065 65706f5f     te a file (f_ope
    d804:	2e2e296e 000a0d2e 74697257 6f742065     n)......Write to
    d814:	73657420 69662074 2820656c 75705f66      test file (f_pu
    d824:	2e297374 0a0d2e2e 00000000 74736554     ts).........Test
    d834:	2f445320 20434d4d 63617473 00000a6b      SD/MMC stack...
    d844:	4941465b 0a0d5d4c 00000000 74736554     [FAIL]......Test
    d854:	20736920 63637573 66737365 0d2e6c75      is successful..
    d864:	0000000a 6c756f43 6f6e2064 706f2074     ....Could not op
    d874:	62206e65 72616e69 69662079 0d21656c     en binary file!.
    d884:	0000000a 74697257 6f742065 73657420     ....Write to tes
    d894:	69662074 2820656c 72775f66 29657469     t file (f_write)
    d8a4:	0d2e2e2e 0000000a 20646e45 5420666f     ........End of T
    d8b4:	2e747365 00000a0d 43204453 20647261     est.....SD Card 
    d8c4:	6c696166 69206465 6974696e 6f697461     failed initiatio
    d8d4:	4320216e 6b636568 6e6f6320 7463656e     n! Check connect
    d8e4:	736e6f69 000a0d21 6e6e6143 6f20746f     ions!...Cannot o
    d8f4:	206e6570 656c6966 726f6620 43524320     pen file for CRC
    d904:	65686320 0d2e6b63 0000000a 656c6946      check......File
    d914:	6f6f7420 616d7320 66206c6c 6120726f      too small for a
    d924:	6e657070 20646564 2e435243 00000a0d     ppended CRC.....
    d934:	6c696146 74206465 6572206f 6c206461     Failed to read l
    d944:	20747361 79622034 20736574 6620666f     ast 4 bytes of f
    d954:	2e656c69 00000a0d 6f727245 6f632072     ile.....Error co
    d964:	7475706d 20676e69 656c6966 43524320     mputing file CRC
    d974:	000a0d2e 65707041 6465646e 43524320     ....Appended CRC
    d984:	2578303d 586c3830 6f43202c 7475706d     =0x%08lX, Comput
    d994:	43206465 303d4352 38302578 0a0d586c     ed CRC=0x%08lX..
    d9a4:	00000000 20435243 696c6176 42202e64     ....CRC valid. B
    d9b4:	696e7275 2520676e 6220756c 73657479     urning %lu bytes
    d9c4:	000a0d2e 6d726946 65726177 64707520     ....Firmware upd
    d9d4:	64657461 61697620 43524320 74656d20     ated via CRC met
    d9e4:	2e646f68 00000a0d 20435243 6874656d     hod.....CRC meth
    d9f4:	6220646f 206e7275 6c696166 000a0d21     od burn fail!...
    da04:	20435243 6d73696d 68637461 000a0d21     CRC mismatch!...
    da14:	6e757254 65746163 706f203a 66206e65     Truncate: open f
    da24:	20656c69 6c696166 000a0d2e 72617453     ile fail....Star
    da34:	676e6974 75727420 7461636e 66206465     ting truncated f
    da44:	776d7269 20657261 61647075 2e2e6574     irmware update..
    da54:	000a0d2e 6f727245 72652072 6e697361     ....Error erasin
    da64:	6f722067 0a0d2177 00000000 6f727245     g row!......Erro
    da74:	72772072 6e697469 61702067 0d216567     r writing page!.
    da84:	0000000a 6e757254 65746163 69662064     ....Truncated fi
    da94:	61776d72 75206572 74616470 6f642065     rmware update do
    daa4:	0d21656e 0000000a 6e757254 65746163     ne!.....Truncate
    dab4:	69662064 61776d72 75206572 74616470     d firmware updat
    dac4:	61662065 64656c69 000a0d21 6f727245     e failed!...Erro
    dad4:	706f2072 6e696e65 69622067 6966206e     r opening bin fi
    dae4:	0d21656c 0000000a 72617453 676e6974     le!.....Starting
    daf4:	72696620 7261776d 70752065 65746164      firmware update
    db04:	0d2e2e2e 0000000a 6d726946 65726177     ........Firmware
    db14:	64707520 20657461 656e6f64 000a0d21      update done!...
    db24:	6d726946 65726177 64707520 20657461     Firmware update 
    db34:	6c696166 0d216465 0000000a              failed!.....

0000db40 <_global_impure_ptr>:
    db40:	20000034                                4.. 

0000db44 <__sf_fake_stderr>:
	...

0000db64 <__sf_fake_stdin>:
	...

0000db84 <__sf_fake_stdout>:
	...
    dba4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    dbb4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    dbc4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    dbd4:	00006665                                ef..

0000dbd8 <_init>:
    dbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbda:	46c0      	nop			; (mov r8, r8)
    dbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    dbde:	bc08      	pop	{r3}
    dbe0:	469e      	mov	lr, r3
    dbe2:	4770      	bx	lr

0000dbe4 <__init_array_start>:
    dbe4:	000000dd 	.word	0x000000dd

0000dbe8 <_fini>:
    dbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbea:	46c0      	nop			; (mov r8, r8)
    dbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    dbee:	bc08      	pop	{r3}
    dbf0:	469e      	mov	lr, r3
    dbf2:	4770      	bx	lr

0000dbf4 <__fini_array_start>:
    dbf4:	000000b5 	.word	0x000000b5
